<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Programming in C++ (Part 2 Selection)</title>
      <author>Mark Mahoney</author>
      <pubDate>Wed, 14 Apr 2021 23:02:16 +0000</pubDate>
      <link>https://dev.to/markm208/programming-in-c-part-2-selection-c42</link>
      <guid>https://dev.to/markm208/programming-in-c-part-2-selection-c42</guid>
      <description>&lt;p&gt;In this post I will discuss altering the flow of control with &lt;code&gt;if/else&lt;/code&gt; statements. These statements ask the computer to evaluate whether a condition is &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; and changes the flow of control based on the answer. Along the way I discuss another data type, &lt;code&gt;bool&lt;/code&gt;, which can hold either true or false and I show a few examples of how to use selection with &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;if/else&lt;/code&gt;, &lt;code&gt;if/else if/else&lt;/code&gt;, and &lt;code&gt;switch&lt;/code&gt; statements. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter2/01/playback.html"&gt;Booleans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter2/02/playback.html"&gt;Even/odd calculator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter2/03/playback.html"&gt;Overtime pay with an if/else&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter2/04/playback.html"&gt;Water temperature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/cppbook/chapter2/05/playback.html"&gt;Switch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#call-to-action"&gt;
  &lt;/a&gt;
  Call to Action
&lt;/h3&gt;

&lt;p&gt;Now that you have reviewed the guided code walk-throughs I ask that you write a few programs:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#problem-1"&gt;
  &lt;/a&gt;
  Problem 1
&lt;/h4&gt;

&lt;p&gt;Problem 1 asks you to write a program to determine if one date comes after another. The program will ask for two sets of dates. Next, the program will determine if the first date comes before, is equal to, or comes after.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter in the first month: 2
Enter in the first day: 21
Enter in the first year: 2012

Enter in the second month: 2
Enter in the second day: 22
Enter in the second year: 2011

The first date comes after the second.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#problem-2"&gt;
  &lt;/a&gt;
  Problem 2
&lt;/h4&gt;

&lt;p&gt;Problem 2 asks you to write a programs that prompts the user for a date and determines if that date is valid. For example, 9/19/2017 is a valid date but these are not valid dates:&lt;/p&gt;

&lt;p&gt;4/31/2006 (only 30 days in April)&lt;br&gt;
2/29/2005 (not a leap year)&lt;br&gt;
16/1/2010 (invalid month)&lt;br&gt;
4/59/2013 (invalid day)&lt;/p&gt;

&lt;p&gt;If the date is correct print it out. If it is incorrect display an error message explaining why the date is not correct. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#problem-3"&gt;
  &lt;/a&gt;
  Problem 3
&lt;/h4&gt;

&lt;p&gt;Problem 3 asks you to write a program that will calculate change for a sales purchase. Your program should prompt for a sales price. Validate that the data entered is a number greater than 0. If the data entered is incorrect, display an error message and end the program. Next, prompt the user for the amount that the customer will pay to the cashier. Validate that this value is greater than or equal to the sales price. If it is not, display an error message and end the program.&lt;/p&gt;

&lt;p&gt;If the entry is correct, your program must calculate the amount of change to return to the user.  Next, calculate what bills and coins that the the cashier needs to return to the customer. The fewest number of paper bills and coins should be returned. You can make change in many different combinations, however, the only correct implementation is the one that returns the fewest paper bills and coins.&lt;/p&gt;

&lt;p&gt;Display the number of each of the bills and coins. Here is a sample run of the program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter in a sales amount: $20.38
Enter in the amount the customer pays: $30.00

The change due back is $9.62

You should give the customer this change:
0 $100 bills
0 $50 bills
0 $20 bills
0 $10 bills
1 $5 bills
4 $1 bills
1 Half Dollars
0 Quarters
1 Dimes
0 Nickels
2 Pennies
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because of the way arithmetic works with float variables, storing the monetary values as floats may cause some problems. For example, if you had a float variable that held 1.29 to represent $1.29 and you subtracted the .05 from it (to represent giving back a nickel) you would think that you would be left with exactly 1.24. Unfortunately, the computer might store that value or it might store 1.2399999 or 1.2400001 instead of exactly 1.24. These very small inconsistencies can cause a problem calculating the number of pennies to return. Consider converting the amounts into ints to solve this problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comments-and-feedback"&gt;
  &lt;/a&gt;
  Comments and Feedback
&lt;/h3&gt;

&lt;p&gt;You can find all of these code playbacks in my free 'book', &lt;a href="https://markm208.github.io/cppbook/"&gt;An Animated Introduction to Programming in C++&lt;/a&gt;. I am always looking for feedback so please feel free to comment here or to send me a message. You can follow me on twitter &lt;a href="https://twitter.com/markm208"&gt;@markm208&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Prank your mom dad or ANYONE with this!</title>
      <author>DLC7936_King Olly.Mp.4</author>
      <pubDate>Wed, 14 Apr 2021 22:42:31 +0000</pubDate>
      <link>https://dev.to/ho/prank-your-mom-dad-or-anyone-with-this-5901</link>
      <guid>https://dev.to/ho/prank-your-mom-dad-or-anyone-with-this-5901</guid>
      <description>&lt;p&gt;Here is the link:&lt;a href="https://geekprank.com/cracked-screen/"&gt;https://geekprank.com/cracked-screen/&lt;/a&gt; Go fullscreen and hide the mouse! And watch them react!&lt;/p&gt;

</description>
      <category>lol</category>
    </item>
    <item>
      <title>setTimeout e setInterval</title>
      <author>Fernando Junior</author>
      <pubDate>Wed, 14 Apr 2021 22:39:44 +0000</pubDate>
      <link>https://dev.to/inando85/settimeout-e-setinterval-2k08</link>
      <guid>https://dev.to/inando85/settimeout-e-setinterval-2k08</guid>
      <description>&lt;p&gt;Chegamos a mais um post da minha &lt;a href="https://dev.to/inando85/bem-vindo-de-novo-javascript-1b48"&gt;saga de estudos&lt;/a&gt; em JavaScript.&lt;/p&gt;

&lt;p&gt;No post de hoje irei falar um pouco sobre os métodos &lt;code&gt;setTimeout&lt;/code&gt; e &lt;code&gt;setInterval&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#settimeout"&gt;
  &lt;/a&gt;
  setTimeout
&lt;/h3&gt;

&lt;p&gt;O método &lt;code&gt;setTimeout&lt;/code&gt; é usado para executarmos uma função após um determinado tempo, esta função será executada uma única vez.&lt;/p&gt;

&lt;p&gt;Este método recebe dois argumentos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1: A função que será executada após o tempo informado&lt;/li&gt;
&lt;li&gt;2: O tempo que deve ser esperado para executar a função do primeiro argumento, esse tempo deve ser informado em milissegundos.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Execução do setTimeout!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Levando em consideração o código de exemplo acima, após o carregamento da página, será aguardado 2 segundos para executar a função, que no nosso caso é apenas informar no console a string &lt;code&gt;Execução do setTimeout&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setinterval"&gt;
  &lt;/a&gt;
  setInterval
&lt;/h3&gt;

&lt;p&gt;Já o método &lt;code&gt;setInterval&lt;/code&gt;, é usado para ficar executando uma função no intervalo de tempo que foi determinado.&lt;/p&gt;

&lt;p&gt;Este método também recebe dois argumentos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1: A função que ficará sendo executada&lt;/li&gt;
&lt;li&gt;2: De quanto em quanto tempo essa função será executada, também em milissegundos.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Execução do setInterval!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Observando o código de exemplo acima, a função passada como primeiro argumento ficará sendo executada a cada 2 segundos, logo, a cada 2 segundos será impresso no console a string &lt;code&gt;Execução do setInterval!&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Desta forma, esse &lt;code&gt;setInterval&lt;/code&gt; ficará sendo executado indefinidamente, pois não foi informado um momento para que esse execução seja parada.&lt;/p&gt;

&lt;p&gt;Para fazermos isso, devemos usar um método chamado &lt;code&gt;clearInterval&lt;/code&gt;. Observe o código abaixo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Execução do setInterval!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;

 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Como pode ser observado acima, usei o método clearInterval para parar a execução do código assim que a variável counter fosse igual a 5.&lt;/p&gt;

&lt;p&gt;Com isso, a cada dois segundos será impresso no console &lt;code&gt;Execução do setInterval&lt;/code&gt; e a variável counter será incrementada, assim que essa variável atingir o valor 5, cairemos na condição do &lt;code&gt;if&lt;/code&gt; e com isso, o método clearInterval será executado, parando a execução da const timer.&lt;/p&gt;

&lt;p&gt;Por hoje é isso, espero que estejam curtindo as postagens!&lt;/p&gt;

&lt;p&gt;Vou deixar aqui abaixo o link do MDN com a documentação sobre &lt;a href="https://developer.mozilla.org/pt-BR/docs/Learn/JavaScript/Asynchronous/Timeouts_and_intervals#settimeout"&gt;setTimeout&lt;/a&gt; e sobre &lt;a href="https://developer.mozilla.org/pt-BR/docs/Learn/JavaScript/Asynchronous/Timeouts_and_intervals#setinterval"&gt;setInterval&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Esse foi mais um post da minha saga de estudos em JavaScript Vanilla. Espero que estejam gostando!&lt;/p&gt;

&lt;p&gt;Qualquer dúvida ou sugestão, vocês me encontram nas minhas redes sociais:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://linkedin.com/in/inando85"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/inando85"&gt;GIthub&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/inando85"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top 50 TypeScript Interview Questions Explained</title>
      <author>Ryan Thelin</author>
      <pubDate>Wed, 14 Apr 2021 22:31:08 +0000</pubDate>
      <link>https://dev.to/educative/top-50-typescript-interview-questions-explained-3mpc</link>
      <guid>https://dev.to/educative/top-50-typescript-interview-questions-explained-3mpc</guid>
      <description>&lt;p&gt;TypeScript is an open-source superset of JavaScript developed by Microsoft to add additional features without breaking existing programs. TypeScript is now widely used by front-end and full-stack developers for large-scale projects due to its unique benefits like static typing and many shorthand notations.&lt;/p&gt;

&lt;p&gt;Today, we'll help you prepare for your TypeScript coding interview by covering 50 of the top TypeScript interview questions and answers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s what we’ll cover today:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#general"&gt;General TypeScript Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#syntax"&gt;TypeScript Syntax &amp;amp; Language Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#javascript"&gt;TypeScript with JavaScript Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#advanced"&gt;Advanced TypeScript Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#more"&gt;20 More TypeScript Questions to Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tips"&gt;Tips for preparing for TypeScript interviews&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h4&gt;&lt;b&gt; Brush up on your TypeScript the easy way. &lt;/b&gt;&lt;/h4&gt;
 

&lt;p&gt;Get the hands-on practice you need to ace the TypeScript interview. By the end, you'll know how to use advanced TypeScript in professional projects.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;a href="https://www.educative.io/path/typescript-for-front-end-developers"&gt;TypeScript for Front-End Developers&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;





&lt;h3&gt;
  &lt;a href="#1-what-are-the-main-features-of-typescript"&gt;
  &lt;/a&gt;
  1. What are the main features of TypeScript?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Cross-Platform&lt;/strong&gt;:  The TypeScript compiler can be installed on any operating system such as Windows, macOS, and Linux.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ES6 Features&lt;/strong&gt;: TypeScript includes most features of planned ECMAScript 2015 (&lt;a href="https://www.educative.io/blog/javascript-es6-tutorial-a-complete-crash-course"&gt;ES6&lt;/a&gt;) such as Arrow functions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Object-Oriented Language&lt;/strong&gt;: TypeScript provides all the standard &lt;a href="https://www.educative.io/blog/javascript-oop-primer"&gt;OOP&lt;/a&gt; features like classes, interfaces, and modules.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Static Type-Checking&lt;/strong&gt;: TypeScript uses static typing and helps type checking at compile time. Thus, you can find compile-time errors while writing the code without running the script.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Optional Static Typing&lt;/strong&gt;: TypeScript also allows optional static typing in case you are used to the dynamic typing of JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DOM Manipulation&lt;/strong&gt;: You can use TypeScript to manipulate the DOM for adding or removing client-side web page elements.&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#2-what-are-the-benefits-of-using-typescript"&gt;
  &lt;/a&gt;
  2. What are the benefits of using TypeScript?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;TypeScript is &lt;strong&gt;more expressive&lt;/strong&gt;, meaning it has less syntactical clutter.&lt;/li&gt;
&lt;li&gt;Easy debugging due to &lt;strong&gt;advanced debugger&lt;/strong&gt; that focuses on catching logical errors before compile-time&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Static typing&lt;/strong&gt; makes TypeScript easier to read and more structured than JavaScript's dynamic typing.&lt;/li&gt;
&lt;li&gt;Usable &lt;strong&gt;across platforms&lt;/strong&gt;, in both client and server-side projects due to versatile transpiling.&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#3-what-are-the-builtin-data-types-of-typescript"&gt;
  &lt;/a&gt;
  3. What are the built-in data types of TypeScript?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Number type&lt;/strong&gt;: It is used to represent number type values. All the numbers in TypeScript are stored as floating-point values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;String type&lt;/strong&gt;: It represents a sequence of characters stored as Unicode UTF-16 code. Strings are enclosed in single or double quotation marks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Boolean type&lt;/strong&gt;: a logical binary switch that holds either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let identifier: bool = Boolean value;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Null type:&lt;/strong&gt; Null represents a variable whose value is undefined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; let num: number = null;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Undefined type:&lt;/strong&gt; an undefined literal that is the starting point of all variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Void type:&lt;/strong&gt; The type assigned to methods that have no return value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;unusable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#4-what-is-the-current-stable-version-of-typescript"&gt;
  &lt;/a&gt;
  4. What is the current stable version of TypeScript?
&lt;/h3&gt;

&lt;p&gt;The current stable version is 4.2.3.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#5-what-is-an-interface-in-typescript"&gt;
  &lt;/a&gt;
  5. What is an interface in TypeScript?
&lt;/h3&gt;

&lt;p&gt;Interfaces define a contract or structure for objects that use that interface. &lt;/p&gt;

&lt;p&gt;An interface is defined with the keyword &lt;code&gt;interface&lt;/code&gt; and it can include properties and method declarations using a function or an arrow function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IEmployee&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;empCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;empName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;getSalary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// arrow function&lt;/span&gt;
    &lt;span class="nx"&gt;getManagerName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#6-what-are-modules-in-typescript"&gt;
  &lt;/a&gt;
  6. What are modules in TypeScript?
&lt;/h3&gt;

&lt;p&gt;Modules in TypeScript are a collection of related variables, functions, classes, and interfaces. &lt;/p&gt;

&lt;p&gt;You can think of modules as containers that contain everything needed to execute a task. Modules can be imported to easily share code between projects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="nx"&gt;module_name&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;xyz&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#7-how-can-you-use-typescript-for-the-backend"&gt;
  &lt;/a&gt;
  7. How can you use TypeScript for the backend?
&lt;/h3&gt;

&lt;p&gt;You can use Node.js with TypeScript to bring the benefits of TypeScript to backend work. &lt;/p&gt;

&lt;p&gt;Simply install the TypeScript compiler into your Node.js by entering the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="nx"&gt;typescript&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#8-what-are-type-assertions-in-typescript"&gt;
  &lt;/a&gt;
  8. What are Type assertions in TypeScript?
&lt;/h3&gt;

&lt;p&gt;Type assertion in TypeScript works like typecasting in other languages but without the type checking or restructuring of data possible in languages like C# and Java. Type assertion has no impact on runtime and is used purely by the compiler.&lt;/p&gt;

&lt;p&gt;Type assertion is essentially a soft version of typecasting that suggests the compiler see the variable as a certain type but does not force it into that mold if it's in a different form.&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typescript-syntax-amp-language-basics"&gt;
  &lt;/a&gt;
  TypeScript Syntax &amp;amp; Language Basics
&lt;/h2&gt;



&lt;h3&gt;
  &lt;a href="#9-how-do-you-create-a-variable-in-typescript"&gt;
  &lt;/a&gt;
  9. How do you create a variable in TypeScript?
&lt;/h3&gt;

&lt;p&gt;You can create variables in three ways: &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, and &lt;code&gt;const&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;var&lt;/code&gt; is the old style of fiercely scoped variables. You should avoid using &lt;code&gt;var&lt;/code&gt; whenever possible because it can cause issues in larger projects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;let&lt;/code&gt; is the default way of declaring variables in TypeScript, Compared to &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; reduces the number of compile-time errors and increases code readability.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;const&lt;/code&gt; creates a constant variable whose value cannot change. It uses the same scoping rules as &lt;code&gt;let&lt;/code&gt; and helps reduce overall program complexity.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#10-how-do-you-call-a-base-class-constructor-from-a-child-class-in-typescript"&gt;
  &lt;/a&gt;
  10. How do you call a base class constructor from a child class in TypeScript?
&lt;/h3&gt;

&lt;p&gt;You can use the &lt;code&gt;super()&lt;/code&gt; function to call the constructor of the base class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;theName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;distanceInMeters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; moved &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;distanceInMeters&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;m.`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Snake&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Animal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;distanceInMeters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Slithering...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;distanceInMeters&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#11-explain-how-to-use-typescript-mixins"&gt;
  &lt;/a&gt;
  11. Explain how to use TypeScript Mixins.
&lt;/h3&gt;

&lt;p&gt;Mixins are essentially inheritance that works in the opposite direction. Mixins allow you to build new classes by combining simpler partial class setups from previous classes.&lt;/p&gt;

&lt;p&gt;Instead of class &lt;code&gt;A&lt;/code&gt; extending class &lt;code&gt;B&lt;/code&gt; to gain its functionality, class &lt;code&gt;B&lt;/code&gt; takes from class &lt;code&gt;A&lt;/code&gt; and returns a new class with additional functionality.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#12-how-do-you-check-null-and-undefined-in-typescript"&gt;
  &lt;/a&gt;
  12. How do you check null and undefined in TypeScript?
&lt;/h3&gt;

&lt;p&gt;You can either use a juggle-check, which checks both null and undefined, and strict-check which returns true for values set to null and won't evaluate true for undefined variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//juggle&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; == null&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; === null&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; is undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#13-what-are-getterssetters-in-typescript-how-do-you-use-them"&gt;
  &lt;/a&gt;
  13. What are getters/setters in TypeScript? How do you use them?
&lt;/h3&gt;

&lt;p&gt;Getters and setters are special types of methods that help you delegate different levels of access to private variables based on the needs of the program.&lt;/p&gt;

&lt;p&gt;Getters allow you to reference a value but cannot edit it. Setters allow you to change the value of a variable but not see its current value. These are essential to achieve encapsulation.&lt;/p&gt;

&lt;p&gt;For example, a new employer may be able to &lt;code&gt;get&lt;/code&gt; the number of employees in the company but does not have permission to &lt;code&gt;set&lt;/code&gt; the number of employees.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fullNameMaxLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;_fullName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_fullName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newName&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;newName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fullNameMaxLength&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fullName has a max length of &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;fullNameMaxLength&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;employee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bob Smith&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#14-how-do-you-allow-classes-defined-in-a-module-to-be-accessible-outside-of-a-module"&gt;
  &lt;/a&gt;
  14. How do you allow classes defined in a module to be accessible outside of a module?
&lt;/h3&gt;

&lt;p&gt;You can use the &lt;code&gt;export&lt;/code&gt; keyword to open modules up for use outside the module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="nx"&gt;Admin&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// use the export keyword in TypeScript to access the class outside&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;alex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;alex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;alex@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// The Admin variable will allow you to access the Employee class outside the module with the help of the export keyword in TypeScript&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;nick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nick@yahoo.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#15-how-do-we-convert-string-to-a-number-using-typescript"&gt;
  &lt;/a&gt;
  15. How do we convert string to a number using Typescript?
&lt;/h3&gt;

&lt;p&gt;Similar to JavaScript, You can use the &lt;code&gt;parseInt&lt;/code&gt; or &lt;code&gt;parseFloat&lt;/code&gt; functions to convert a string to an integer or float, respectively. You can also use the unary operator &lt;code&gt;+&lt;/code&gt; to convert a string to the most fitting numeric type, "3" becomes the integer &lt;code&gt;3&lt;/code&gt; while "3.14" becomes the float &lt;code&gt;3.14&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;32&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#16-what-is-a-map-file-and-whyhow-can-you-use-it"&gt;
  &lt;/a&gt;
  16. What is a '.map' file, and why/how can you use it?
&lt;/h3&gt;

&lt;p&gt;A map file is a source map that shows how the original TypeScript code was interpreted into usable JavaScript code. They help simplify debugging because you can catch any odd compiler behavior. &lt;/p&gt;

&lt;p&gt;Debugging tools can also use these files to allow you to edit the underlying TypeScript rather than the emitted JavaScript file.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#17-what-are-classes-in-typescript-how-do-you-define-them"&gt;
  &lt;/a&gt;
  17. What are classes in TypeScript? How do you define them?
&lt;/h3&gt;

&lt;p&gt;Classes represent the shared behaviors and attributes of a group of related objects. &lt;/p&gt;

&lt;p&gt;For example, our class might be &lt;code&gt;Student&lt;/code&gt; which all have the &lt;code&gt;attendClass&lt;/code&gt; method. On the other hand, &lt;code&gt;John&lt;/code&gt; is an individual instance of type &lt;code&gt;Student&lt;/code&gt; and may have additional unique behaviors like &lt;code&gt;attendExtracurricular&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You declare classes using the keyword &lt;code&gt;class&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Student&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
    &lt;span class="nl"&gt;studCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
    &lt;span class="nl"&gt;studName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;studName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;studCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
    &lt;span class="p"&gt;}&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;h4&gt;
  &lt;a href="#keep-practicing-typescript" class="anchor"&gt;
  &lt;/a&gt;
  Keep practicing TypeScript.
&lt;/h4&gt;

&lt;p&gt;Prepare for your interview with expert lessons and 400 hands-on coding environments. Educative's text-based courses are easy to skim and focus on hirable skills to get you prepared in half the time.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;a href="https://www.educative.io/path/typescript-for-front-end-developers"&gt;TypeScript for Front-End Developers&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typescript-with-javascript-questions"&gt;
  &lt;/a&gt;
  TypeScript with JavaScript Questions
&lt;/h2&gt;



&lt;h3&gt;
  &lt;a href="#18-how-does-typescript-relate-to-javascript"&gt;
  &lt;/a&gt;
  18. How does TypeScript relate to JavaScript?
&lt;/h3&gt;

&lt;p&gt;TypeScript is an open-source syntactic superset of JavaScript that compiles to JavaScript. All original JavaScript libraries and syntax still works but TypeScript adds additional syntax options and compiler features not found in JavaScript. &lt;/p&gt;

&lt;p&gt;TypeScript can also interface with most of the same technologies as JavaScript, such as &lt;a href="https://www.educative.io/blog/angularjs-tutorial"&gt;Angular&lt;/a&gt; and &lt;a href="https://www.educative.io/blog/what-is-jquery-javascript-library"&gt;jQuery&lt;/a&gt;.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#19-what-is-jsx-in-typescript"&gt;
  &lt;/a&gt;
  19. What is JSX in TypeScript?
&lt;/h3&gt;

&lt;p&gt;JSX is an embeddable XML-like syntax that allows you to create &lt;a href="https://www.educative.io/blog/html-beginners-tutorial-build-from-scratch"&gt;HTML&lt;/a&gt;. TypeScript supports embedding, type checking, and compiling JSX directly to JavaScript.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#20-what-are-the-jsx-modes-typescript-supports"&gt;
  &lt;/a&gt;
  20. What are the JSX modes TypeScript supports?
&lt;/h3&gt;

&lt;p&gt;TypeScript has built-in support for &lt;code&gt;preserve&lt;/code&gt;, &lt;code&gt;react&lt;/code&gt;, and &lt;code&gt;react-native&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;preserve&lt;/code&gt; keeps the JSX intact for use in a subsequent transformation.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;react&lt;/code&gt; does not go through a JSX transformation and instead emits &lt;code&gt;react.createElement&lt;/code&gt; and outputs as a &lt;code&gt;.js&lt;/code&gt; file extension.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;react-native&lt;/code&gt; combines &lt;code&gt;preserve&lt;/code&gt; and &lt;code&gt;react&lt;/code&gt; in that it maintains all JSX and outputs as a &lt;code&gt;.js&lt;/code&gt; extension.&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#21-how-do-you-compile-a-typescript-file"&gt;
  &lt;/a&gt;
  21. How do you compile a TypeScript file?
&lt;/h3&gt;

&lt;p&gt;You need to call the TypeScript compiler &lt;code&gt;tsc&lt;/code&gt; to compile a file. You'll need to have the TypeScript compiler installed, which you can do using &lt;code&gt;npm&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="nx"&gt;typescript&lt;/span&gt;
&lt;span class="nx"&gt;tsc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TypeScript&lt;/span&gt; &lt;span class="nx"&gt;File&lt;/span&gt; &lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#22-what-scopes-are-available-in-typescript-how-does-this-compare-to-js"&gt;
  &lt;/a&gt;
  22. What scopes are available in TypeScript? How does this compare to JS?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Global Scope&lt;/strong&gt;: defined outside of any class and can be used anywhere in the program.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Function/Class Scope:&lt;/strong&gt; variables defined in a function or class can be used anywhere within that scope.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Local Scope/Code Block&lt;/strong&gt;: variables defined in the local scope can be used anywhere in that block.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advanced-typescript-questions"&gt;
  &lt;/a&gt;
  Advanced TypeScript Questions
&lt;/h2&gt;



&lt;h3&gt;
  &lt;a href="#23-what-are-arrowlambda-functions-in-typescript"&gt;
  &lt;/a&gt;
  23. What are Arrow/lambda functions in TypeScript?
&lt;/h3&gt;

&lt;p&gt;Fat arrow function is a shorthand syntax for defining function expressions of anonymous functions. It's similar to lambda functions in other languages. The arrow function lets you skip the &lt;code&gt;function&lt;/code&gt; keyword and write more concise code.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#24-explain-rest-parameters-and-the-rules-to-declare-rest-parameters"&gt;
  &lt;/a&gt;
  24. Explain Rest parameters and the rules to declare Rest parameters.
&lt;/h3&gt;

&lt;p&gt;Rest parameters allow you to pass a varied number of arguments (zero or more) to a function. This is useful when you're unsure how many parameters a function will receive. All arguments after the rest symbol &lt;code&gt;...&lt;/code&gt; will be stored in an array.&lt;br&gt;
For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Steve&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bill&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns "Hello Steve, Bill!"&lt;/span&gt;

&lt;span class="nx"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// returns "Hello !"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The rest parameter must be the last on parameter definition and you can only have 1 rest parameter per function.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#25-what-are-tripleslash-directives-what-are-some-of-the-tripleslash-directives"&gt;
  &lt;/a&gt;
  25. What are Triple-Slash Directives? What are some of the triple-slash directives?
&lt;/h3&gt;

&lt;p&gt;Triple-slash Directives are single-line comments that contain an XML tag to use as compiler directives. Each directive signals what to load during the compilation process. Triple-slash Directives only work at the top of their file and will be treated as normal comments anywhere else in the file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/// &amp;lt;reference path="..." /&amp;gt;&lt;/code&gt; is the most common directive and defines the dependency between files.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/// &amp;lt;reference types="..." /&amp;gt;&lt;/code&gt; is similar to &lt;code&gt;path&lt;/code&gt; but defines a dependency for a package.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/// &amp;lt;reference lib="..." /&amp;gt;&lt;/code&gt; allows you to explicitly include the built-in &lt;code&gt;lib&lt;/code&gt; file. &lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#26-what-does-the-raw-omit-endraw-type-do"&gt;
  &lt;/a&gt;
  26. What does the &lt;code&gt;Omit&lt;/code&gt; type do?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Omit&lt;/code&gt; is a form of utility type, which facilitates common type transformations. Omit lets you construct a type by passing a current &lt;code&gt;Type&lt;/code&gt; and selecting &lt;code&gt;Keys&lt;/code&gt; to be omitted in the new type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Omit&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Keys&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;createdAt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;TodoPreview&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Omit&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#27-how-do-you-achieve-function-overloading-in-typescript"&gt;
  &lt;/a&gt;
  27. How do you achieve function overloading in TypeScript?
&lt;/h3&gt;

&lt;p&gt;To overload, a function in TypeScript, simply create two functions of the same name but have different argument/return types. Both functions must accept the same number of arguments. This is an essential part of polymorphism in TypeScript.&lt;/p&gt;

&lt;p&gt;For example, you could make an &lt;code&gt;add&lt;/code&gt; function that sums the two arguments if they're numbers and concatenates them if they're strings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Steve&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns "Hello Steve" &lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 30 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#28-how-do-you-make-all-properties-of-an-interface-optional"&gt;
  &lt;/a&gt;
  28. How do you make all properties of an interface optional?
&lt;/h3&gt;

&lt;p&gt;You can use the &lt;code&gt;partial&lt;/code&gt; mapped type to easily make all properties optional.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#29-when-should-you-use-the-unknown-keyword"&gt;
  &lt;/a&gt;
  29. When should you use the ‘unknown’ keyword?
&lt;/h3&gt;

&lt;p&gt;You should use &lt;code&gt;unknown&lt;/code&gt; if you don't know which type to expect upfront but want to assign it later on, and the &lt;code&gt;any&lt;/code&gt; keyword will not work.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#30-what-are-decorators-and-what-can-they-be-applied-to"&gt;
  &lt;/a&gt;
  30. What are decorators, and what can they be applied to?
&lt;/h3&gt;

&lt;p&gt;A decorator is a special kind of declaration that lets you modify classes or class members all at once by marking them with the &lt;code&gt;@&amp;lt;name&amp;gt;&lt;/code&gt; annotation. Each decorator must refer to a function that'll be evaluated at runtime. &lt;/p&gt;

&lt;p&gt;For example, the decorator &lt;code&gt;@sealed&lt;/code&gt; would correspond to the &lt;code&gt;sealed&lt;/code&gt; function. Anything marked with &lt;code&gt;@sealed&lt;/code&gt; would be used to evaluate the &lt;code&gt;sealed&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sealed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do something with 'target' ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;They can be attached to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Class declarations&lt;/li&gt;
&lt;li&gt;Methods&lt;/li&gt;
&lt;li&gt;Accessors&lt;/li&gt;
&lt;li&gt;Properties&lt;/li&gt;
&lt;li&gt;Parameters&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Decorators are not enabled by default. To enable them, you have to edit the &lt;code&gt;experimentalDecorators&lt;/code&gt; field in the compiler options from your &lt;code&gt;tsconfig.json&lt;/code&gt; file or the command line.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#20-more-typescript-questions-to-practice"&gt;
  &lt;/a&gt;
  20 More TypeScript Questions to Practice
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;31.&lt;/strong&gt; What is the default access modifier for member variables and methods in TypeScript?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;32.&lt;/strong&gt; When should you use the &lt;code&gt;declare&lt;/code&gt; keyword?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;33.&lt;/strong&gt; What are generics in TypeScript? When would you use them?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;34.&lt;/strong&gt; How and when would you use the &lt;code&gt;enum&lt;/code&gt; collection?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;35.&lt;/strong&gt; What are namespaces and why would you use them?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;36.&lt;/strong&gt; How would you implement optional parameters?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;37.&lt;/strong&gt; Name 3 differences between TypeScript and JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;38.&lt;/strong&gt; Is TypeScript a &lt;a href="https://www.educative.io/blog/what-is-functional-programming-python-js-java"&gt;functional programming&lt;/a&gt; language?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;39.&lt;/strong&gt; What TypeScript features would be beneficial for a &lt;a href="https://www.educative.io/blog/fullstack-javascript-introduction"&gt;full-stack developer&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;40.&lt;/strong&gt; What are the advantages of TypeScript Language Service (TSLS)?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;41.&lt;/strong&gt; What features does TypeScript offer to help make reusable components?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;42.&lt;/strong&gt; What is the difference between a tuple and an array in TypeScript?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;43.&lt;/strong&gt; What is the difference between internal and external modules in TypeScript?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;44.&lt;/strong&gt; What collections does TypeScript support?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;45.&lt;/strong&gt; What is the &lt;code&gt;Record&lt;/code&gt; type used for?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;46.&lt;/strong&gt; What advantages does TypeScript bring to a tech stack?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;47.&lt;/strong&gt; How do you generate a definition file using TypeScript?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;48.&lt;/strong&gt; Does TypeScript support abstract classes?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;49.&lt;/strong&gt; How can you set your TypeScript file to compile whenever there's a change?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;50.&lt;/strong&gt; What are &lt;code&gt;Ambients&lt;/code&gt; in TypeScript and when should you use them?&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tips-for-preparing-for-typescript-interviews"&gt;
  &lt;/a&gt;
  Tips for preparing for TypeScript interviews
&lt;/h2&gt;

&lt;p&gt;Preparing for interviews is always stressful, but proper preparation beforehand can help you build confidence. When preparing for your interview, remember to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get practice working with questions &lt;strong&gt;hands-on&lt;/strong&gt;, not just reading them.&lt;/li&gt;
&lt;li&gt;Break up your study material into sections and &lt;strong&gt;quiz yourself&lt;/strong&gt; after each one.&lt;/li&gt;
&lt;li&gt;Prepare for your &lt;a href="https://www.educative.io/blog/behavioral-interviews-how-to-prepare-and-ace-interview-questions"&gt;behavioral interview&lt;/a&gt;, which is equally as important as the coding portion.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To help you get more hands-on practice with TypeScript, Educative has created the &lt;a href="https://www.educative.io/path/typescript-for-front-end-developers"&gt;&lt;strong&gt;TypeScript for Front-End Developers Path&lt;/strong&gt;&lt;/a&gt;. This Path is full of our best TypeScript content from across our site. You'll revise the fundamentals, explore practical applications, and build React projects all using Educative's in-browser coding environments. &lt;/p&gt;

&lt;p&gt;By the end of the Path, you'll have the skills you need to ace your next TypeScript interview.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#continue-reading-about-typescript-and-coding-interviews"&gt;
  &lt;/a&gt;
  Continue reading about TypeScript and coding interviews
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/typescript-tutorial"&gt;TypeScript Tutorial: A step-by-step guide to learn TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/react-and-typescript"&gt;Getting started with React and TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/coding-interivew-preparation-bootcamp"&gt;3 Month Coding Interview Preparation Bootcamp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>typescript</category>
      <category>career</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Erlscripten: Transpiling Erlang to Javascript. Yes, you read it right.
</title>
      <author>omar-saadoun</author>
      <pubDate>Wed, 14 Apr 2021 22:20:41 +0000</pubDate>
      <link>https://dev.to/omarsaadoun/erlscripten-49gg</link>
      <guid>https://dev.to/omarsaadoun/erlscripten-49gg</guid>
      <description>&lt;p&gt;It is safe to say that Erlang as a language and framework is the most reliable choice out there to build highly stable applications, running the likes of Whatsapp and Discord. Now, there is a transpiler introducing concepts of Erlang to web technology, which would be near impossible to implement manually using Javascript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--raO1QVh_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsu0eumfaucke1ni19q9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--raO1QVh_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsu0eumfaucke1ni19q9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here at æternity, we’ve envisioned for a long time that running major parts of a blockchain protocol in the context of modern web frameworks would mean a huge leap for the adoption and scalability of distributed ledger technology. What if you could run an ad-hoc blockchain node in your browser, or use state channels to quickly make safe payments using your phone?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a solid foundation had to be laid for a reliable infrastructure first, that was not conceivable as of yet. Until now.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#erlscripten-is-here"&gt;
  &lt;/a&gt;
  Erlscripten is here.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uXChxkGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqxsabamfrt7qf52x8ub.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uXChxkGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqxsabamfrt7qf52x8ub.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Erlscripten&lt;/strong&gt; (sic not Emscripten!) is a source-to-source transpiler capable of converting most Erlang codebases into semantically equivalent Purescript projects. Purescript is a strongly typed language heavily inspired by Haskell and which compiles down to Javascript. Taking Purescript as an intermediary step, Erlscripten allows you to take your existing Erlang application and easily ship it out to Javascript users — your Erlang code can now run safely in the browser — enabling code sharing between an Erlang backend and the frontend. It is highly interoperable with Javascript — Javascript can easily call the transpiled code and then make use of the results — you can easily map Erlang constructs and types to readily available JS constructs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It’s zero hassle&lt;/strong&gt; — you point Erlscripten to an existing Rebar3 Erlang project and in result get a compatible spago project ready to be used in existing Purescript/Javascript projects. &lt;strong&gt;While at it, we transpiled the Erlang runtime (ERTS) that allows you to run arbitrary transpiled Erlang code:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/erlscripten/erlps-core"&gt;https://github.com/erlscripten/erlps-core&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#purpose"&gt;
  &lt;/a&gt;
  Purpose
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Besides bringing the components of the æternity blockchain to more platforms and web frameworks, there are two novel use cases for Erlscripten:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#1-code-reuse-between-erlang-backends-and-javascript-frontends"&gt;
  &lt;/a&gt;
  1 — Code reuse between Erlang backends and Javascript frontends;
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#2-the-creation-of-a-new-paradigm-for-developing-frontend-applications"&gt;
  &lt;/a&gt;
  2 — The creation of a new paradigm for developing frontend applications.
&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;æternity is a blockchain platform primarily written in Erlang. In the upcoming era of Hyperchains the need for code distribution between frontend and backend applications is high. Therefore we need to move some parts of æternity infrastructure to the clients’ side in order to provide a more reliable and decentralized system. It doesn’t make sense to rewrite our code in Javascript/Rust manually as this would require a lengthy rewrite and then the need to maintain and sync 2 codebases. The high need of interoperability between Erlang and Javascript is where Erlscripten was born. We can transpile what we need and distribute it to the browser where it’s needed. &lt;strong&gt;One side effect of Erlscripten is that it will soon be possible to write Frontend applications directly in Erlang&lt;/strong&gt; — Erlang’s actor based programming maps really nicely to existing reactive frameworks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#similar-projects"&gt;
  &lt;/a&gt;
  Similar projects
&lt;/h3&gt;

&lt;p&gt;We’re not the first ones with the need of Erlang/Javascript interoperability &lt;/p&gt;

&lt;p&gt;— &lt;a href="https://github.com/elixirscript/elixirscript"&gt;Elixirscript&lt;/a&gt; is a Elixir to Javascript transpiler with similar goals as our project. The main downside of Elixirscript is the lack of OTP support (Erlang’s main framework for building failsafe applications) — it works on a really small subset of the Elixir language and they need to rewrite the Elixir standard library in Javascript for it to work. In contrast we are OTP compatible — we transpiled the real Erlang standard library from OTP and distributed it open-source: &lt;a href="https://github.com/erlscripten/erlps-stdlib"&gt;https://github.com/erlscripten/erlps-stdlib&lt;/a&gt; (&lt;br&gt;
Erlang Solutions&lt;br&gt;
).&lt;/p&gt;

&lt;p&gt;To demonstrate our point we were capable of taking the compiler of our smart contract language (&lt;a href="https://github.com/aeternity/aesophia"&gt;https://github.com/aeternity/aesophia&lt;/a&gt;) and converting it to be runnable in the browser: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/erlscripten/erlps-aesophia"&gt;https://github.com/erlscripten/erlps-aesophia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We tested the transpiled project and it works! &lt;strong&gt;Demonstrating our point that we have support for advanced OTP constructs including ETS, Erlang’s in-memory database.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Notably, &lt;a href="https://github.com/lumen/lumen"&gt;Lumen&lt;/a&gt; has similar goals to our project, after their project is done it will be much faster than Erlscripten and probably more capable — the downside is that Lumen is in WIP phase and it will take a long time for Lumen to be ready whereas Erlscripten is now and here! Ready to be used!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#status-quo"&gt;
  &lt;/a&gt;
  Status quo
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#what-is-supported"&gt;
  &lt;/a&gt;
  What is supported
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Majority of Erlang expression&lt;/li&gt;
&lt;li&gt;Arbitrary arity functions&lt;/li&gt;
&lt;li&gt;Pattern matching&lt;/li&gt;
&lt;li&gt;Records (via tuples)&lt;/li&gt;
&lt;li&gt;Binaries&lt;/li&gt;
&lt;li&gt;Lambdas&lt;/li&gt;
&lt;li&gt;Tail recursion&lt;/li&gt;
&lt;li&gt;Exceptions&lt;/li&gt;
&lt;li&gt;Process dictionaries&lt;/li&gt;
&lt;li&gt;Code server, module loading&lt;/li&gt;
&lt;li&gt;Imports and exports&lt;/li&gt;
&lt;li&gt;Compatibility utilities&lt;/li&gt;
&lt;li&gt;Common errors (function_clause, case_clause, badarity, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#what-is-partially-supported"&gt;
  &lt;/a&gt;
  What is partially supported
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/erlscripten/erlps-stdlib/"&gt;Erlang’s standard library&lt;/a&gt; (most essential modules; lists, maps, string, etc.)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/erlscripten/erlps-core"&gt;Erlang builtins&lt;/a&gt; (the list is growing and growing!)&lt;/li&gt;
&lt;li&gt;Rebar project transpilation&lt;/li&gt;
&lt;li&gt;ETS&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#what-is-under-development"&gt;
  &lt;/a&gt;
  What is under development
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Bitstrings&lt;/li&gt;
&lt;li&gt;Leaking variable scopes&lt;/li&gt;
&lt;li&gt;Basic erlang process emulation&lt;/li&gt;
&lt;li&gt;NIFs (will be done through C to WASM compilation)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#works-on-the-purescript-compiler"&gt;
  &lt;/a&gt;
  Works on the PureScript compiler
&lt;/h3&gt;

&lt;p&gt;The original PureScript turned out not to suffice our use case perfectly. For instance, we had some issues regarding handling &lt;a href="https://en.wikipedia.org/wiki/Tail_call"&gt;tail call optimization&lt;/a&gt; which started several discussions and contributions on their GitHub:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/purescript/purescript/pull/3968"&gt;Pull Request: Trigger TCO even when there are some self references in non-tail positions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/purescript/purescript/pull/3958"&gt;Pull Request: Support TCO for functions with tail-recursive inner functions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/purescript/purescript/issues/3957"&gt;Issue: TCO does not trigger in &lt;code&gt;case&lt;/code&gt; expressions with assign guards&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/purescript/purescript/issues/3967"&gt;Proposal: Take more opportunities to trigger TCO&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of the problems have been already fixed due to our reports, but some of them haven’t been accepted as they involved some overhead on the performance in the general case. Because of this &lt;a href="https://github.com/erlscripten/purescript"&gt;we have forked the compiler&lt;/a&gt; and started adjusting it for our needs ourselves. Our works mainly involve the optimization tweaks and updating the backend to EcmaScript6 (instead of 5). For instance, we have implemented a much more aggressive tail call optimizer, increased strictness of AST traversals and completely rewritten the code generation for pattern match alternatives.&lt;/p&gt;

&lt;p&gt;During this work we have spotted some performance bugs and started working on fixing them on our own. One of our patches has already been approved and awaits merging:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/purescript/purescript/pull/4006"&gt;Fix exponential collapsing of BindingGroups&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples:
&lt;/h3&gt;

&lt;p&gt;While we are perfectly aware that neither Erlang nor PureScript are the most common sight to see, we invite you to take a look: Here are some examples of how Erlscripten transforms existing Erlang code into PureScript. The generated code is obviously larger as we need to take care of the type system (PureScript is typed while Erlang is not) and tackle some syntactic sugars. Furthermore, we need to emulate the default error handling and exceptions that are being solved much differently in Erlang in order to preserve compatibility.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#factorial"&gt;
  &lt;/a&gt;
  Factorial:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hetWk4S9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z15rglu3qfopre2khxyh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hetWk4S9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z15rglu3qfopre2khxyh.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find the code example here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/erlscripten/erlscripten/blob/main/examples/factorial.erl"&gt;https://github.com/erlscripten/erlscripten/blob/main/examples/factorial.erl&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#continuation-based-list-reversal-via-catamorphic-transformation"&gt;
  &lt;/a&gt;
  Continuation based list reversal via catamorphic transformation:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yXKCdULN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuj7nh1q8qypdhy6j818.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yXKCdULN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuj7nh1q8qypdhy6j818.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find the code example here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/erlscripten/erlscripten/blob/main/examples/list_reverse.erl"&gt;https://github.com/erlscripten/erlscripten/blob/main/examples/list_reverse.erl&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#run-erlang-in-the-browser"&gt;
  &lt;/a&gt;
  Run Erlang in the browser!
&lt;/h2&gt;

&lt;p&gt;Erlang to PureScript transpiler &amp;gt; &lt;a href="https://github.com/erlscripten/erlscripten"&gt;https://github.com/erlscripten/erlscripten&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Original article from : &lt;br&gt;
&lt;a href="https://blog.aeternity.com/erlscripten-92c815786987"&gt;https://blog.aeternity.com/erlscripten-92c815786987&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>erlang</category>
      <category>blockchain</category>
      <category>aeternityblockchain</category>
      <category>elixir</category>
    </item>
    <item>
      <title>Talk Notes: "Secrets of Successful Mentors" (RailsConf 2021)</title>
      <author>Sylwia Vargas</author>
      <pubDate>Wed, 14 Apr 2021 21:58:31 +0000</pubDate>
      <link>https://dev.to/sylwiavargas/talk-notes-secrets-of-successful-mentors-railsconf-2021-25h8</link>
      <guid>https://dev.to/sylwiavargas/talk-notes-secrets-of-successful-mentors-railsconf-2021-25h8</guid>
      <description>&lt;p&gt;✨ &lt;strong&gt;What is this post about&lt;/strong&gt;: As a part of my professional growth, I make time to watch conference talks on Ruby, Rails, JS, React, tech writing, and tech trivia. Previously, I'd just watch them but now I will take and publish notes for future reference. This talk was a part of RailsConf 2021 that I'm participating in at the time of writing. &lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;Talk&lt;/strong&gt;: 'The Secrets of Successful Mentors' by &lt;a href="https://twitter.com/dougbradbury"&gt;Doug Bradbury&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;Prep materials&lt;/strong&gt;: &lt;a href="https://github.com/dougbradbury/secrets-of-successful-mentors"&gt;GitHub Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;One-paragraph summary&lt;/strong&gt;: How do the best mentors operate? What makes them so effective? In this workshop, we will explore some counter-intuitive techniques that great mentors use in helping their apprentices learn fast and achieve extraordinary results. Learn how to give just the right learning challenge and just the right time and how to give feedback in a way that will actually be heard!&lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;Impression&lt;/strong&gt;: I have participated in a number of workshops and talks on mentorship and this was the best by far. I am really impressed by Doug's experience and empathy 💕&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#notes"&gt;Notes&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#successful-mentors-mentor-because-they-want-to"&gt;Successful mentors mentor because they want to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-don-t-teach-they-mentor"&gt;Successful mentors don't teach, they mentor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-ask-more-qs-than-they-answer"&gt;Successful mentors ask more qs than they answer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-colearn"&gt;Successful mentors co-learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-follow-the-learner"&gt;Successful mentors follow the learner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-replay-their-reactions"&gt;Successful mentors replay their reactions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-look-for-outcomes"&gt;Successful mentors look for outcomes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-individualize-the-pluralize-concepts"&gt;Successful mentors individualize, the pluralize concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-define-clear-learning-outcomes"&gt;Successful mentors define clear learning outcomes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#successful-mentors-protect-separate-and-leave"&gt;Successful mentors protect, separate, and leave&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#read-more"&gt;Read more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors mentor because they want to&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;It's important for you to know why you're doing this&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors don't teach, they mentor&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;you're working with their character, not behavior; with their skills, not their knowledge (it's their responsibility to learn);&lt;/li&gt;
&lt;li&gt;deep-level learning: we are looking for synthesizing what they've learned;&lt;/li&gt;
&lt;li&gt;the person should be transformed through the time they've spent with you;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Teaching&lt;/th&gt;
&lt;th&gt;Mentoring&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Behavior&lt;/td&gt;
&lt;td&gt;character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Knowledge&lt;/td&gt;
&lt;td&gt;Skills&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Regurgitate&lt;/td&gt;
&lt;td&gt;Synthesize&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Certify&lt;/td&gt;
&lt;td&gt;Transform&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Group&lt;/td&gt;
&lt;td&gt;1-1 Relationship&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors ask more qs than they answer&lt;/strong&gt; 

&lt;ul&gt;
&lt;li&gt;This is meant to encourage deeper learning&lt;/li&gt;
&lt;li&gt;Following &lt;a href="https://en.wikipedia.org/wiki/Socratic_method"&gt;the Socratic method&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors co-learn&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Experts can actually make poor mentors because they don't remember what it is like to learn&lt;/li&gt;
&lt;li&gt;Learning happens in relation to what you already know by building a "scaffolding" to what you already know -- experts usually don't have these scaffoldings because they already have a whole structure&lt;/li&gt;
&lt;li&gt;the best mentor is someone near you, just ahead of you (&lt;a href="https://www.simplypsychology.org/Zone-of-Proximal-Development.html"&gt;zone of proximal development&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;expert-mentors can be a bit intimidating&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors follow the learner&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;the Montessori method of "follow the learner": watch them, present them with the next step, next challenge&lt;/li&gt;
&lt;li&gt;what is &lt;strong&gt;F L O W&lt;/strong&gt;? It is a perfect balance between relaxation and arousal; if there's too much relaxation, you'll be bored; if there's too much arousal, you'll be anxious; both inhibit learning; ideally, you will be bouncing between a little bit of relaxation and arousal; &lt;/li&gt;
&lt;li&gt;as a mentor, it's important to find the right challenge, just a little bit more than what the person already knows;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Successful mentors replay their reactions&lt;/strong&gt; (I think that was the phrasing)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;when we receive critical feedback, our brain may just "shut down" because of the &lt;em&gt;fight-flight-freeze&lt;/em&gt; response&lt;/li&gt;
&lt;li&gt;fight, flight, freeze response narrows your focus and just emphasizes survival &lt;/li&gt;
&lt;li&gt;how we present what we have to say triggers the defensive reactions - and we usually present feedback as a judgment&lt;/li&gt;
&lt;li&gt;we want to give people the feedback but the best way to deliver it is to make it not about them but about us&lt;/li&gt;
&lt;li&gt;use phrases like: "this is how it came across to me", "this is how I saw it"&lt;/li&gt;
&lt;li&gt;if you replay your reactions, feedback becomes the start of the conversations, not their end&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;"Most feedback is much more about the person giving the feedback than the person receiving it" &lt;br&gt;
"If you don't have anything nice, say something about yourself"&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Instead of ...&lt;/th&gt;
&lt;th&gt;Try ...&lt;/th&gt;
&lt;th&gt;Because ...&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Can I give you some feedback?&lt;/td&gt;
&lt;td&gt;Here's my reaction. / Tell me about your thought process here.&lt;/td&gt;
&lt;td&gt;It causes fear, you can't say no, it may sound patronizing (are you implying I can't take feedback?)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Good job!&lt;/td&gt;
&lt;td&gt;That works for me! I liked what you did there. Tell me how you've arrived at this solution.&lt;/td&gt;
&lt;td&gt;It's not specific, not helpful. It's rooted in approval and power dynamic (who am I to tell you what is "good"?!)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Here’s what you should do.&lt;/td&gt;
&lt;td&gt;Have you considered X? / Here's what I'd do (...) - let's talk about it.&lt;/td&gt;
&lt;td&gt;It's a judgment.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;That won’t really work.&lt;/td&gt;
&lt;td&gt;-,-&lt;/td&gt;
&lt;td&gt;-,-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;You need to improve your communication skills.&lt;/td&gt;
&lt;td&gt;When you did X, I felt Y. / I'm having a hard time understanding what you're trying to say / Here's where you've lost me&lt;/td&gt;
&lt;td&gt;Not specific, it's a judgment.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;You are slow to complete your work.&lt;/td&gt;
&lt;td&gt;I feel that you... / I'm concerned that we...&lt;/td&gt;
&lt;td&gt;Feels too personal. Activates fear and worry. Closes the conversation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;You spin your wheels for too long before asking for help.&lt;/td&gt;
&lt;td&gt;Here's what works for me.&lt;/td&gt;
&lt;td&gt;If someone is not asking for help, probably it's more about the env, than the individual.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors look for outcomes&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;what does "success" mean for this person, and in this scenario? &lt;/li&gt;
&lt;li&gt;the mentee is not a great "vessel" to fill up with our great knowledge&lt;/li&gt;
&lt;li&gt;we usually a picture of how things should be done and what excellence looks like for us but in this way, the best we can achieve is to build some poor imitation of ourselves but we want to go beyond them&lt;/li&gt;
&lt;li&gt;instead, look for "excellence outcomes", point them out to the learner, and let them figure out how they got there&lt;/li&gt;
&lt;li&gt;ask them how they achieved stuff (this feel acknowledging + helps them reflect and recreate what they did)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors individualize, the pluralize concepts&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;there's nothing like one learning style!!!!&lt;/li&gt;
&lt;li&gt;it's a mechanism of bias and of putting folks in boxes&lt;/li&gt;
&lt;li&gt;there are multiple kinds of intelligence, for instance: verbal-linguistic, logical-mathematical, intrapersonal (self), interpersonal (others), musical, visual-spatial, bodily-kinesthetic, naturalist (taxonomy, organization), existential (why?), emotional&lt;/li&gt;
&lt;li&gt;interconnect different kinds of intelligence! &lt;/li&gt;
&lt;li&gt;help the learner develop these kinds!&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors define clear learning outcomes&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;THIS IS SO IMPORTANT -- I've seen it first-hand when I was teaching Ruby at a bootcamp&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use specific verbs, such as&lt;/strong&gt;: Name, Memorize, Identify, Do a simple procedure, Recognize, count, define, draw, fund, label, match, quote, recall, recite, order, tell, write, imitate, List, Describe, Classify, Combine, Do algorithms, Report, discuss, illustrate, select, narrate, compute, sequence, outline, separate Analyze, Explain, Integrate, Sequence, Relate, Apply, Compare, Contrast, Argue, Criticize, Relate, Predict, conclude, summarize, review, argue, transfer, make a plan, characterize, differentiate, organize, debate, make a case, construct, review and rewrite, examine, translate, paraphrase, solve a problem Reflect, Theorize, Hypothesize, Create, Imagine, Formulate, Generate Generalize, generate, compose, invent, originate, prove from first principles, make an original case, solve from first principles&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Build the outcomes with this structure&lt;/strong&gt;: &lt;code&gt;verb + subject + context&lt;/code&gt;, for instance: "List (verb) the three rules of TDD (subject) to a group of apprentices seeing TDD for the first time. (context)", "Contrast (verb) Outside in vs Inside Out TDD (subject) in a blog post targeted at Senior Developers (context)", itd.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Successful mentors protect, separate, and leave&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;this is a reference to a Japanese concept of &lt;a href="https://en.wikipedia.org/wiki/Shuhari"&gt;Shu Ha Ri&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;shu&lt;/em&gt; (守) "protect": you create a safe env for a person to learn where they can fail (safely) without becoming a failure&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;ha&lt;/em&gt; (破) "detach": this is where a person pushes back on the ideas and established ways&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;ri&lt;/em&gt; (離) "leave": our hope is that the learner will become able to do more than what we can do, that they grow beyond us; there comes a point in the relationship where they leave this mentorship relationship&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#read-more"&gt;
  &lt;/a&gt;
  Read more
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Socratic_method"&gt;the Socratic method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.simplypsychology.org/Zone-of-Proximal-Development.html"&gt;zone of proximal development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.ted.com/talks/mihaly_csikszentmihalyi_flow_the_secret_to_happiness"&gt;recommended TedTalk: Flow, the secret to happiness&lt;/a&gt; by Mihaly Csikszentmihalyi&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hbr.org/2019/03/the-feedback-fallacy"&gt;recommended reading: feedback fallacy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.washingtonpost.com/news/answer-sheet/wp/2013/10/16/howard-gardner-multiple-intelligences-are-not-learning-styles"&gt;Learning Styles vs Multiple Intelligences&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>techtalks</category>
      <category>career</category>
    </item>
    <item>
      <title>Run local Graviton2 builds with AWS CodeBuild agent</title>
      <author>Jason Andrews</author>
      <pubDate>Wed, 14 Apr 2021 21:53:03 +0000</pubDate>
      <link>https://dev.to/aws-builders/run-local-graviton2-builds-with-aws-codebuild-agent-1o6h</link>
      <guid>https://dev.to/aws-builders/run-local-graviton2-builds-with-aws-codebuild-agent-1o6h</guid>
      <description>&lt;p&gt;Previously I described how to use &lt;a href="https://dev.to/aws-builders/build-and-share-docker-images-using-aws-codebuild-and-graviton2-1271"&gt;AWS CodeBuild on Graviton2&lt;/a&gt;. The example I used was very simple. It required only Docker to execute the build and did not run for a long time. For more complex projects it is helpful to have an AWS CodeBuild environment on your local machine. This allows the Docker images to be inspected to make sure they contain the needed tools. It also provides an easier way to work through the build process. New users will likely need some practice to debug the contents of the buildspec.yml file. This article explains how to run builds locally with the CodeBuild agent and create CodeBuild projects for Graviton2.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-and-prerequisites"&gt;
  &lt;/a&gt;
  Setup and prerequisites
&lt;/h2&gt;

&lt;p&gt;AWS EC2 instances powered by Graviton2 processors use the Arm architecture. A local machine which also uses the Arm architecture provides a seamless developer experience. Today, I’m going to do it on a MacBook Air with Apple Silicon. &lt;a href="https://dev.to/aws-builders/windows-10-on-arm-with-wsl-2-2kbg"&gt;Windows 10 on Arm&lt;/a&gt; is another option. &lt;/p&gt;

&lt;p&gt;Docker and git are required to run this tutorial. Git should be available in /usr/bin already. &lt;a href="https://docs.docker.com/docker-for-mac/apple-m1/"&gt;Install Docker for Apple Silicon&lt;/a&gt; using the Download link.&lt;/p&gt;

&lt;p&gt;With git and Docker available, let’s setup the required Docker images. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#docker-images"&gt;
  &lt;/a&gt;
  Docker images
&lt;/h2&gt;

&lt;p&gt;There are two Docker images required to run CodeBuild. The build image and the local agent. The build image is the one where the build process will be executed. It needs to have all of the required tools to run the commands in the buildspec.yml file for the project.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/aws/aws-codebuild-docker-images"&gt;Dockerfiles for CodeBuild images are available on GitHub&lt;/a&gt;. For the previous article I selected the Amazon Linux 2 standard image, version 2. &lt;/p&gt;

&lt;p&gt;To build and use any of the CodeBuild images clone the GitHub repository, change directory to the desired image, and build. &lt;/p&gt;

&lt;p&gt;I have posted the Amazon Linux 2 image for Arm on &lt;a href="https://gallery.ecr.aws/z9p7l6s8/codebuild/amazonlinux2-aarch64-standard"&gt;Amazon ECR Public&lt;/a&gt; so there is no need to build it.  &lt;/p&gt;

&lt;p&gt;To get the build image use docker pull.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;docker pull public.ecr.aws/z9p7l6s8/codebuild/amazonlinux2-aarch64-standard:2.0
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;docker tag public.ecr.aws/z9p7l6s8/codebuild/amazonlinux2-aarch64-standard:2.0 codebuild/amazonlinux2-aarch64-standard:2.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get and build yourself (or any other CodeBuild image) use docker build.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;git clone https://github.com/aws/aws-codebuild-docker-images.git
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;aws-codebuild-docker-images/al2/aarch64/standard/2.0
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;docker build &lt;span class="nt"&gt;-t&lt;/span&gt;  codebuild/amazonlinux2-aarch64-standard:2.0  &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second Docker image needed is the local agent. This is now available from &lt;a href="https://hub.docker.com/r/amazon/aws-codebuild-local"&gt;Docker Hub&lt;/a&gt; for Graviton2. This is good news as it wasn’t available when I wrote the previous article.&lt;/p&gt;

&lt;p&gt;Use docker pull to get the local agent image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;docker pull amazon/aws-codebuild-local:aarch64 &lt;span class="nt"&gt;--disable-content-trust&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#codebuild-local-build-script"&gt;
  &lt;/a&gt;
  CodeBuild local build script
&lt;/h2&gt;

&lt;p&gt;The last thing required is the script which runs the build. The script is available in the GitHub project above which contains the Dockerfiles, but it can also be downloaded using wget.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;wget https://raw.githubusercontent.com/aws/aws-codebuild-docker-images/master/local_builds/codebuild_build.sh
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;chmod&lt;/span&gt; +x codebuild_build.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#running-a-build"&gt;
  &lt;/a&gt;
  Running a build
&lt;/h2&gt;

&lt;p&gt;A test build can be started using the buildspec.yml. In my previous article I put the buildspec.yml into the GitHub project. Sometimes users may also enter the buildspec.yml directly into CodeBuild. Either way the build script defaults to a buildspec.yml file in the directory where the script is run. It also offers a switch to specify the buildspec.yml file. &lt;/p&gt;

&lt;p&gt;Let’s run a local build using the same “hello world” project. &lt;/p&gt;

&lt;p&gt;Clone the project from GitHub to your local machine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;git clone https://github.com/jasonrandrews/hello-arm.git
&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;hello-arm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The buildspec.yml is already in the top level directory. &lt;/p&gt;

&lt;p&gt;One other thing to note is the use of the secrets-manager section in the buildspec.yml. AWS services such as Secrets Manager can be used on the local machine. &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html"&gt;Setup the AWS cli&lt;/a&gt; on the local machine to create a profile which has access to your AWS account and use the -c option to codebuild_build.sh. &lt;/p&gt;

&lt;p&gt;Here is the command to run the build:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;./codebuild_build.sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; codebuild/amazonlinux2-aarch64-standard:2.0 &lt;span class="nt"&gt;-a&lt;/span&gt; /tmp  &lt;span class="nt"&gt;-l&lt;/span&gt; amazon/aws-codebuild-local:aarch64
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#checking-the-codebuild-images"&gt;
  &lt;/a&gt;
  Checking the CodeBuild images
&lt;/h2&gt;

&lt;p&gt;Another common reason for running CodeBuild locally is to make sure everything needed by a build is contained in the Docker image. &lt;/p&gt;

&lt;p&gt;To start the CodeBuild image and poke around to see what is inside of it override the ENTRYPOINT from the Dockerfile and start bash instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;--entrypoint&lt;/span&gt; /bin/bash codebuild/amazonlinux2-aarch64-standard:2.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This allows you to look and see what is inside the image, try out commands interactively, and gain confidence the image will be able to run the buildspec.yml. &lt;/p&gt;

&lt;p&gt;Use the -h on codebuild_build.sh to get a list of more options for the build script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt; $&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;./codebuild_build.sh &lt;span class="nt"&gt;-h&lt;/span&gt;
&lt;span class="go"&gt;usage: codebuild_build.sh [-i image_name] [-a artifact_output_directory] [options]
Required:
  -i        Used to specify the customer build container image.
  -a        Used to specify an artifact output directory.
Options:
  -l IMAGE  Used to override the default local agent image.
  -r        Used to specify a report output directory.
  -s        Used to specify source information. Defaults to the current working directory for primary source.
               * First (-s) is for primary source
&lt;/span&gt;&lt;span class="gp"&gt;               * Use additional (-s) in &amp;lt;sourceIdentifier&amp;gt;&lt;/span&gt;:&amp;lt;sourceLocation&amp;gt; format &lt;span class="k"&gt;for &lt;/span&gt;secondary &lt;span class="nb"&gt;source&lt;/span&gt;
&lt;span class="go"&gt;               * For sourceIdentifier, use a value that is fewer than 128 characters and contains only alphanumeric characters and underscores
  -c        Use the AWS configuration and credentials from your local host. This includes ~/.aws and any AWS_* environment variables.
  -p        Used to specify the AWS CLI Profile.
  -b FILE   Used to specify a buildspec override file. Defaults to buildspec.yml in the source directory.
  -m        Used to mount the source directory to the customer build container directly.
  -d        Used to run the build container in docker privileged mode.
  -e FILE   Used to specify a file containing environment variables.
            (-e) File format expectations:
               * Each line is in VAR=VAL format
&lt;/span&gt;&lt;span class="gp"&gt;               * Lines beginning with #&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;are processed as comments and ignored
&lt;span class="go"&gt;               * Blank lines are ignored
               * File can be of type .env or .txt
               * There is no special handling of quotation marks, meaning they will be part of the VAL
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/codebuild/"&gt;AWS CodeBuild&lt;/a&gt; is a great service to automate most anything and works well on Graviton2. With the newly available CodeBuild local agent Docker image for AArch64 builds can be developed and tested locally to quickly find any issues. Local testing can be done on a MacBook with Apple Silicon or a Windows 10 on Arm machine such as the Samsung Galaxy Book S or the Microsoft Surface Pro X. &lt;/p&gt;

</description>
      <category>aws</category>
      <category>codebuild</category>
    </item>
    <item>
      <title>An intro to the useComponent pattern</title>
      <author>Dan Hammer</author>
      <pubDate>Wed, 14 Apr 2021 21:17:06 +0000</pubDate>
      <link>https://dev.to/danmhammer/an-intro-to-the-usecomponent-pattern-3e1n</link>
      <guid>https://dev.to/danmhammer/an-intro-to-the-usecomponent-pattern-3e1n</guid>
      <description>&lt;p&gt;You might be familiar with the "useComponent" pattern. I was first introduced to it by &lt;a href="https://dev.to/droopytersen/new-react-hooks-pattern-return-a-component-31bh"&gt;this fantastic write-up by Andrew Petersen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have found this pattern to be useful in many cases, and thought a basic introduction might be helpful. In this post, I will briefly break down the below simple example of this pattern:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/objective-https-jjh2l"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useRadioButtons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;selectedOption&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSelectedOption&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onChangeOption&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setSelectedOption&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;onChangeOption&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;selectedOption&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;RadioButtons&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;selectedOption&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;RadioButtons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onChangeOption&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;selectedOption&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
            &lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selectedOption&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onChangeOption&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;radio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useRadioButtons&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useRadioButtons&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./use-radio-buttons&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RadioButtons&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;selectedOption&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRadioButtons&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`A`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`B`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`C`&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;RadioButtons&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selectedOption&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-is-it"&gt;
  &lt;/a&gt;
  What is it?
&lt;/h3&gt;

&lt;p&gt;The RadioButtons component itself is fairly simple. It accepts an array of options, an onChange function, and the current value and returns radio buttons with all of the options.&lt;/p&gt;

&lt;p&gt;useRadioButtons, on the other hand, is where things get interesting.&lt;/p&gt;

&lt;p&gt;The purpose of this pattern is to contain all of the state, function that rely on state, and hooks (especially any useEffects that specifically belong to the component) so that it's not necessary to set all of it up in the parent.&lt;/p&gt;

&lt;p&gt;useRadioButtons sets up the useState for the selectedOption and the onChangeOption function. It returns a props object that can be passed directly into RadioButtons as well as the selectedOption to be used by the parent, and the RadioButtons function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#less-plumbing-in-the-parent"&gt;
  &lt;/a&gt;
  Less plumbing in the parent
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RadioButtons&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;selectedOption&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRadioButtons&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`A`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`B`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`C`&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;RadioButtons&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of declaring all of the state inside every parent where this simple RadioButton component is needed, it's possible to just call useRadioButtons once to set it all up. Reading the parent makes it very clear exactly what belongs to the RadioButtons component and exactly what is returned by it, selectedOption. We could contain all of the state in the parent, but sometimes we just want whatever value a component is meant to give us.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#passing-functions-into-the-hook"&gt;
  &lt;/a&gt;
  Passing functions into the hook
&lt;/h3&gt;

&lt;p&gt;This pattern also gives ample opportunity to create whatever parent-child relationships you need.&lt;/p&gt;

&lt;p&gt;For one, you may have noticed that I pass in an optional onChange function. This is most useful if you need to trigger some specific function on change, but we can have fun with it and just throw an alert (don't do this).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RadioButtons&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;selectedOption&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRadioButtons&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`A`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`B`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`C`&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectedOption&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectedOption&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#getting-functions-out-of-the-hook"&gt;
  &lt;/a&gt;
  Getting functions out of the hook
&lt;/h3&gt;

&lt;p&gt;What about calling a function from the parent to change something within the hook? You could use useImperativeHandle (which I have a &lt;a href="https://dev.to/danmhammer/creating-a-pdf-saver-and-print-previewer-in-react-using-useimperativehandle-and-jspdf-3o8m"&gt;post&lt;/a&gt; on), or you can set up the function and return it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useRadioButtons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;....&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setSelectedOption&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;onChangeOption&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;selectedOption&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;RadioButtons&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;selectedOption&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RadioButtons&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;selectedOption&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRadioButtons&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`A`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`B`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`C`&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectedOption&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectedOption&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;RadioButtons&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Reset&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selectedOption&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This provides a function to reset the options to the first option (bound to a button in this example). As a bonus, this function will always refer to the correct instance of the component. No need to worry about passing around refs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-do-this-one-thing"&gt;
  &lt;/a&gt;
  Don't do this one thing!
&lt;/h3&gt;

&lt;p&gt;Don't return an instance of the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useRadioButtons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;selectedOption&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSelectedOption&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onChangeOption&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setSelectedOption&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;RadioButtons&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;RadioButtons&lt;/span&gt;
        &lt;span class="p"&gt;{...{&lt;/span&gt;
          &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;onChangeOption&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;selectedOption&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;selectedOption&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RadioButtons&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;selectedOption&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRadioButtons&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`A`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`B`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`C`&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;RadioButtons&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selectedOption&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will work and it looks nice, but you will re-create RadioButtons every render. Not only might this cause performance issues, but it will cause you quite a lot of headache if you put more complex state and hooks into useRadioButtons.&lt;/p&gt;

&lt;p&gt;You can wrap it in a useCallback and mostly get a stable instance, but do it at your own risk. If you return the props and spread them into the component, you'll only re-render when you expect to. It's worth it for the peace of mind and doesn't add any lines of code to do so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;RadioButtons&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;RadioButtons&lt;/span&gt;
        &lt;span class="p"&gt;{...{&lt;/span&gt;
          &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;onChangeOption&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;selectedOption&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Next time you want a smart, re-usable component, consider employing this pattern and see if you can even improve it. It's not a one-size-fits-all solution, but there are use cases where it might make your life just a bit easier. I hope this brief introduction has been useful!&lt;/p&gt;

&lt;p&gt;In future posts, I'll discuss setting up many instances with different options with a hook, I'll get into the weeds of some issues you might run into, and I'll compare this to other methods of making components do what you want them to do.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How do you build your static site?</title>
      <author>Glenn Tippett</author>
      <pubDate>Wed, 14 Apr 2021 20:54:51 +0000</pubDate>
      <link>https://dev.to/glenntippett/how-do-you-build-your-static-site-58lc</link>
      <guid>https://dev.to/glenntippett/how-do-you-build-your-static-site-58lc</guid>
      <description>&lt;p&gt;Hey all, &lt;/p&gt;

&lt;p&gt;I am curious to hear how other people build their static sites. &lt;/p&gt;

&lt;p&gt;What I mean is, say you need to build a basic landing page - with maybe only 3 pages max. &lt;br&gt;
The site has the usual markup, styling maybe some JS for effects. &lt;/p&gt;

&lt;p&gt;Are you always reaching for a framework or library such as React or Angular? &lt;br&gt;
Or are you just creating some .html, .css and .js files and deploying that folder to a host? &lt;/p&gt;

&lt;p&gt;Curious to hear how others approach this.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Tudo que você queria saber sobre o package-lock.json mas estava com vergonha de perguntar</title>
      <author>Allan Ramos</author>
      <pubDate>Wed, 14 Apr 2021 20:49:17 +0000</pubDate>
      <link>https://dev.to/allangrds/tudo-que-voce-queria-saber-sobre-o-package-lock-json-mas-estava-com-vergonha-de-perguntar-4689</link>
      <guid>https://dev.to/allangrds/tudo-que-voce-queria-saber-sobre-o-package-lock-json-mas-estava-com-vergonha-de-perguntar-4689</guid>
      <description>&lt;p&gt;Esse texto é uma tradução livre do artigo&lt;a href="https://medium.com/coinmonks/everything-you-wanted-to-know-about-package-lock-json-b81911aa8ab8"&gt;Everything You Wanted To Know About package-lock.json But Were Too Afraid To Ask&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introdu%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Introdução
&lt;/h2&gt;

&lt;p&gt;Então você atualizou o Node Package Manager (npm) para a versão 5.x.x e tudo parece que está funcionando bem, certo? Mas pera, o que é isso? Um novo arquivo foi criado automaticamente:&lt;code&gt;package-lock.json&lt;/code&gt;. Se você abri-lo até vai parecer um&lt;code&gt;package.json&lt;/code&gt;, mas com muito mais coisa, mais verboso. Você decide ignorá-lo enquanto desenvolve seu projeto. Eventualmente você se depara com um problema de dependência. Não pode ser encontrada ou uma versão errada foi instalada. A maior parte das pessoas deleta o&lt;code&gt;package-lock.json&lt;/code&gt;e reexecuta o&lt;code&gt;npm install&lt;/code&gt;. Então por que o temos? O que deveríamos fazer? O que ele faz?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resumo"&gt;
  &lt;/a&gt;
  Resumo
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Se você está usando uma versão do NPM superior a 5.x.x o&lt;code&gt;package-lock.json&lt;/code&gt;será gerado para você;&lt;/li&gt;
&lt;li&gt;Você deve usar o&lt;code&gt;package-lock.json&lt;/code&gt;para garantir uma instalação consistente e dependências compatíveis;&lt;/li&gt;
&lt;li&gt;Você&lt;strong&gt;DEVE&lt;/strong&gt;commitar seu&lt;code&gt;package-lock.json&lt;/code&gt;em seu sistema de controle de versão;&lt;/li&gt;
&lt;li&gt;A partir da versão 5.1.0 do npm o conteúdo do&lt;code&gt;package.json&lt;/code&gt;é capaz de sobrescrever o que estiver no&lt;code&gt;package-lock.json&lt;/code&gt;para instalar ou modificar uma dependência, o que*deve*gerar menos dor de cabeça;&lt;/li&gt;
&lt;li&gt;Não precisa mais deletar o&lt;code&gt;package-lock.json&lt;/code&gt;e executar o&lt;code&gt;npm install&lt;/code&gt;para regerá-lo;&lt;/li&gt;
&lt;li&gt;Use semver (versionamento semântico) se sua aplicação for uma API e siga as regras do semver.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#versionamento-sem%C3%A2ntico-semver"&gt;
  &lt;/a&gt;
  Versionamento Semântico (semver)
&lt;/h3&gt;

&lt;p&gt;Antes de entender o&lt;code&gt;package-lock.json&lt;/code&gt;e o&lt;code&gt;package.json&lt;/code&gt;você precisa entender o&lt;a href="http://semver.org/"&gt;versionamento semântico (semver)&lt;/a&gt;. É a sacada por trás do NPM, e o que o tornou um sucesso. Você pode ler mais sobre como o NPM faz seu uso por&lt;a href="http://blog.npmjs.org/post/162134793605/why-use-semver"&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;De forma resumida, se você está criando uma aplicação com a qual outras irão integrar, você deve comunicar como as alterações feitas afetarão a capacidade de integração desses terceiros com sua aplicação. Isso é feito através do versionamento semântico.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Uma versão é dividida em 3 partes: X, Y e Z, onde a primeira é considerada a&lt;/em&gt;&lt;em&gt;major&lt;/em&gt;&lt;em&gt;(principal), a segunda, a&lt;/em&gt;&lt;em&gt;minor&lt;/em&gt;&lt;em&gt;(menor) e a terceira é o&lt;/em&gt;&lt;em&gt;patch&lt;/em&gt;*(correção).*Um exemplo como 1.2.3 representaria que 1 é a major, a 2 é a minor, e o 3 o patch.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Uma modificação no patch não quebrará nada. Muito pelo contrário, corrigirá algo.&lt;/li&gt;
&lt;li&gt;Uma alteração na versão minor lhe trará uma nova funcionalidade, mas sem quebrar o que existe atualmente.&lt;/li&gt;
&lt;li&gt;E por fim, alterar algo na versão major significa que houve uma quebra de compatibilidade. Se o usuário não fizer a alteração necessária, ele não conseguirá mais integrar com sua aplicação.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#gerenciando-pacotes"&gt;
  &lt;/a&gt;
  Gerenciando pacotes
&lt;/h3&gt;

&lt;p&gt;O NPM existe para facilitar o gerenciamento de dependências. Seu projeto pode ter centenas de dependências, cada uma com suas próprias dependências. Para nos mantermos longe desse inferno de dependências, o NPM foi criado com um conjunto de comandos que permitem você instalar e gerenciar tudo isso e, dificilmente, precisar se preocupar com elas.&lt;/p&gt;

&lt;p&gt;Quando você instala um pacote com o NPM (e o salva), uma nova entrada é adicionada ao arquivo&lt;code&gt;package.json&lt;/code&gt;contendo o nome do pacote e a versão (semver) que será usada. Entretanto, existem algumas artimanhas para definir melhor as versões.&lt;/p&gt;

&lt;p&gt;Por padrão o NPM instalará a versão mais nova do pacote, inserindo um símbolo na frente da versão&lt;code&gt;^2.12.0&lt;/code&gt;. Isso significa que o pacote será instalada com uma versão que seja igual ou superior a 2.12.0. Leia mais sobre semver e wildcards e brinque com uma&lt;a href="http://blog.npmjs.org/post/115305091285/introducing-the-npm-semantic-version-calculator"&gt;ferramenta para calcular a versão do pacote.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#projetos-compartilhados"&gt;
  &lt;/a&gt;
  Projetos Compartilhados
&lt;/h3&gt;

&lt;p&gt;O real benefício de ter dependências definidas no&lt;code&gt;package.json&lt;/code&gt;é que qualquer um pode ter acesso a esse arquivo e criar um pasta de dependências contendo todos os módulos para rodar sua aplicação. Mas vamos dar uma olhada em uma caso específico em que as coisas podem dar errado.&lt;/p&gt;

&lt;p&gt;Vamos dizer que criamos um projeto utilizando o&lt;a href="http://Mas%20vamos%20dar%20uma%20olhada%20em%20uma%20maneira%20espec%C3%ADfica%20em%20que%20as%20coisas%20podem%20dar%20errado./"&gt;express&lt;/a&gt;. Depois de rodar&lt;code&gt;npm init&lt;/code&gt;instalamos o express:&lt;code&gt;npm install express --save&lt;/code&gt;. Até o momento em que escrevo esse artigo, a última versão do express é a 4.15.4. Então será adicionado como dependência ao&lt;code&gt;package.json&lt;/code&gt;a linha&lt;code&gt;express: ^4.15.4&lt;/code&gt;, e isso informará exatamente a versão que será instalada em meu computador.&lt;/p&gt;

&lt;p&gt;Não agora, mas talvez amanhã, o pessoal que desenvolve o express pode lançar um bug fix, então a nova versão será a 4.15.5. Então se alguém quiser contribuir com meu projeto, precisará cloná-lo e rodar o comando&lt;code&gt;npm install&lt;/code&gt;. Com isso ele terá instalado em seu computador a versão 4.15.5. Nós dois teremos o express instalado, mas versões diferentes. Teoricamente ambas devem ser compatíveis, mas talvez esse bug fix afete alguma funcionalidade que fazemos uso, e nossa aplicação poderá produzir resultados diferentes, já que uma possui a versão 4.15.4, e outra a 4.15.5.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#packagelock"&gt;
  &lt;/a&gt;
  Package-lock
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#o-objetivo"&gt;
  &lt;/a&gt;
  O objetivo
&lt;/h3&gt;

&lt;p&gt;A proposta do&lt;code&gt;package-lock&lt;/code&gt;é evitar que situações como o caso acima, onde módulos instalados a partir do mesmo&lt;code&gt;package.json&lt;/code&gt;resulte em duas diferentes instalações. O&lt;code&gt;package-lock&lt;/code&gt;foi adicionado em versões superiores ao do NPM 5.x.x, então se você está usando essa versão ou alguma maior, você o verá ser gerado, a não ser que você desabilite essa função.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#o-formato"&gt;
  &lt;/a&gt;
  O formato
&lt;/h3&gt;

&lt;p&gt;O&lt;code&gt;package-lock.json&lt;/code&gt;é uma larga lista de dependências listadas no seu&lt;code&gt;package.json&lt;/code&gt;, além de especificar a versão exata que deve ser instalado, a localização do módulo (URI), o hash que verifica a integridade do módulo e a lista de pacotes necessários. Vamos dar uma olhada nos registros presentes apenas para o express:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"express"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"4.15.4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"resolved"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://registry.npmjs.org/express/-/express-4.15.4.tgz"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"integrity"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"sha1-Ay4iU0ic+PzgJma+yj0R7XotrtE="&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"requires"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"accepts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.3.3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"array-flatten"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.1.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"content-disposition"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.5.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"content-type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"cookie"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.3.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"cookie-signature"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"debug"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2.6.8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"depd"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.1.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"encodeurl"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"escape-html"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"etag"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.8.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"finalhandler"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"fresh"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.5.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"merge-descriptors"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"methods"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.1.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"on-finished"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2.3.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"parseurl"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.3.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"path-to-regexp"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.1.7"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"proxy-addr"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.1.5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"qs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"6.5.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"range-parser"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"send"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.15.4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"serve-static"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.12.4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"setprototypeof"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"statuses"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.3.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"type-is"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.6.15"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"utils-merge"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"vary"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.1.1"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Entradas equivalentes podem ser encontradas para cada pacote listado na seção “requires”.&lt;/p&gt;

&lt;p&gt;Então a ideia é que ao invés do NPM ler o&lt;code&gt;package.json&lt;/code&gt;para instalar os módulos ele use o&lt;code&gt;package-lock.json&lt;/code&gt;. Isso acontece justamente por conta do que disse anteriormente. Pelo&lt;code&gt;package-lock&lt;/code&gt;especificar a versão, localização, hash para cada módulo, e suas dependências próprias, a instalação criada será sempre a mesma, toda vez. Não importa qual dispositivo você use, ou quando você fará a instalação, ele deverá ter o mesmo resultado, sempre, e isso é útil demais.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-controv%C3%A9rsia"&gt;
  &lt;/a&gt;
  A controvérsia
&lt;/h3&gt;

&lt;p&gt;Então, se o&lt;code&gt;package-lock.json&lt;/code&gt;supostamente resolve um problema comum, por que os principais resultados de pesquisa (além da documentação do npm) são todos sobre desabilitá-lo ou questionar a função que ele desempenha?&lt;/p&gt;

&lt;p&gt;Antes do NPM 5, o&lt;code&gt;package.json&lt;/code&gt;era a fonte absoluta para qualquer projeto. O que estava nele era a lei. Os usuários do NPM gostaram desse modelo e se acostumaram a mantê-lo assim. Entretanto, quando o&lt;code&gt;package-lock&lt;/code&gt;foi introduzido, ele agiu de forma contrária ao que as pessoas esperavam.&lt;/p&gt;

&lt;p&gt;Dado um pacote preexistente e um&lt;code&gt;package-lock&lt;/code&gt;, uma alteração no&lt;code&gt;package.json&lt;/code&gt;(o que muitos usuários consideravam a fonte da verdade) não era refletida no&lt;code&gt;package-lock&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exemplo&lt;/strong&gt;: Pacote A, versão 1.0.0 no&lt;code&gt;package&lt;/code&gt;e no&lt;code&gt;package-lock&lt;/code&gt;. No&lt;code&gt;package.json&lt;/code&gt;a versão A foi alterada manualmente para 1.1.0. Se um usuário considerar o&lt;code&gt;package.json&lt;/code&gt;como a fonte da verdade e executar o&lt;code&gt;npm install&lt;/code&gt;, ele irá esperar que a versão 1.1.0 seja instalada. Entretanto, a versão 1.0.0 é instalada, apesar do fato de que a versão 1.1.0 está listada no&lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exemplo:&lt;/strong&gt;Um módulo não existe no&lt;code&gt;package-lock.json&lt;/code&gt;, mas existe no&lt;code&gt;package.json&lt;/code&gt;. Como um usuário que olha para o&lt;code&gt;package.json&lt;/code&gt;como a fonte de toda a verdade, eu esperaria que meu módulo fosse instalado. No entanto, como o módulo não está presente no&lt;code&gt;package-lock.json&lt;/code&gt;, ele não está instalado e meu código falha porque não consegue encontrar o módulo.&lt;/p&gt;

&lt;p&gt;Na maior parte do tempo, porque a pessoa não conseguiu descobrir o motivo de suas dependências não estarem sendo instaladas corretamente, ela irá preferir remover o&lt;code&gt;package-lock.json&lt;/code&gt;e rodar o comando&lt;code&gt;install&lt;/code&gt;novamente, ou irá desabilitar sua criação.&lt;/p&gt;

&lt;p&gt;O conflito entre o esperado e a realidade gerou&lt;a href="https://github.com/npm/npm/issues/16866"&gt;uma discussão muito interessante no repositório do NPM&lt;/a&gt;. Algumas pessoas acham que o&lt;code&gt;package.json&lt;/code&gt;deveria ser a fonte da verdade, outras acham que desde que o NPM considerou o&lt;code&gt;package-lock.json&lt;/code&gt;como a fonte para realizar a instalação, essa deve ser a fonte real. A resolução desse conflito está no&lt;a href="https://github.com/npm/npm/pull/17508"&gt;PR #17508&lt;/a&gt;.&lt;em&gt;Os contribuidores do projeto adicionaram uma mudança ao&lt;code&gt;package.json&lt;/code&gt;fazendo com que as regras presentes nele se sobrepujam ao que está no&lt;code&gt;package-lock&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Agora, em ambos cenários, os pacotes que os usuários esperam ser instalados, serão instalados corretamente. Essa mudança faz parte do release lançado na versão 5.1.0 do NPM, que foi ao ar em 5 julho de 2017.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to install typescript on Ubuntu</title>
      <author>Damian Brdej</author>
      <pubDate>Wed, 14 Apr 2021 20:47:23 +0000</pubDate>
      <link>https://dev.to/quentindamianino/how-to-install-typescript-on-ubuntu-33am</link>
      <guid>https://dev.to/quentindamianino/how-to-install-typescript-on-ubuntu-33am</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-install-node"&gt;
  &lt;/a&gt;
  1. Install node
&lt;/h2&gt;

&lt;p&gt;Firstly you have to install node, if you haven't done that yet just type these two commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -fsSL https://deb.nodesource.com/setup_15.x | sudo -E bash -
sudo apt-get install -y nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-install-typescript"&gt;
  &lt;/a&gt;
  2. Install TypeScript
&lt;/h2&gt;

&lt;p&gt;When your node is installed, you can proceed to install TypeScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-check-if-everything-works"&gt;
  &lt;/a&gt;
  3. Check if everything works
&lt;/h2&gt;

&lt;p&gt;Now check if everything working properly by typing this simple command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tsc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see a version of TypeScript you just install, and a list of options for &lt;code&gt;tsc&lt;/code&gt; command.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>ubuntu</category>
      <category>linux</category>
    </item>
    <item>
      <title>Documentando minha API #1 — API Blueprint + Aglio</title>
      <author>Allan Ramos</author>
      <pubDate>Wed, 14 Apr 2021 20:46:13 +0000</pubDate>
      <link>https://dev.to/allangrds/documentando-minha-api-1-api-blueprint-aglio-48h2</link>
      <guid>https://dev.to/allangrds/documentando-minha-api-1-api-blueprint-aglio-48h2</guid>
      <description>&lt;p&gt;Mexer num projeto cuja API não tem documentação é um sofrimento… ter que vasculhar no código do projetos os endpoints e entender o que é possível fazer com cada um deles é um trabalho desnecessário, e seria resolvido de forma simples com uma bendita documentação :(.&lt;/p&gt;

&lt;p&gt;Já diz a frase:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Uma API documentada é uma API feliz&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eis que chega a minha hora de fazer um projeto novo, e não posso cair na mesma mancada de deixar o código ser a fonte de entendimento da API.&lt;/p&gt;

&lt;p&gt;Como especificação para a construção dessa documentação, optei pela &lt;strong&gt;&lt;a href="https://apiblueprint.org/"&gt;API Blueprint&lt;/a&gt;.&lt;/strong&gt; Criada pela &lt;a href="https://apiary.io/"&gt;Apiary&lt;/a&gt;(Oracle), tem a vantagem de ser escrita utilizando Markdown, facilitando a leitura.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#come%C3%A7ando"&gt;
  &lt;/a&gt;
  Começando
&lt;/h2&gt;

&lt;p&gt;Seguindo o padrão da API Blueprint, podemos escrever nossa documentação em &lt;strong&gt;Markdown&lt;/strong&gt; ou com a extensão &lt;strong&gt;.apib&lt;/strong&gt;. Optei pela segunda, já que é possível encontrar extensões para meu editor de texto.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;FORMAT: 1A
HOST: http://api.meninogaimeiro.com.br

&lt;span class="gh"&gt;# API do Menino Gaimeiro&lt;/span&gt;

Uma API pra você gerenciar a sua carteirinha xD.

&lt;span class="gh"&gt;# Group Games&lt;/span&gt;

&lt;span class="gu"&gt;## Games [/games]&lt;/span&gt;

&lt;span class="gu"&gt;### Criar games [POST]&lt;/span&gt;
&lt;span class="p"&gt;
+&lt;/span&gt; Request Criar um game
&lt;span class="p"&gt;    +&lt;/span&gt; Headers&lt;span class="sb"&gt;

            Accept: application/json
            Content-Type: application/json

    + Attributes

        + name (required)

&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt; Response 201 (application/json)
&lt;span class="p"&gt;    +&lt;/span&gt; Attributes&lt;span class="sb"&gt;

        + id: 1 (number) - ID do game
        + name: Desperados 3 (string) - Nome do game

&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt; Response 400 (application/json)
&lt;span class="p"&gt;    +&lt;/span&gt; Attributes&lt;span class="sb"&gt;

        + status_code: 400 (number) - Status code da Request
        + errors (array) - Objeto de erros
            + (object)
                + parameter_name: name (string) - Nome do parâmetro
                + message: field is required (string) - Tipo do erro
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O exemplo acima faz o seguinte:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Seta a url da api para&lt;a href="http://api.meninogaimeiro.com.br%3B/"&gt;http://api.meninogaimeiro.com.br;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Cria um grupo de rotas chamada*games*;&lt;/li&gt;
&lt;li&gt;Cria um grupo de rotas*Games /games.&lt;em&gt;Nesse meu exemplo ficou repetido, mas poderia existir junto com essa rota o*Platforms /games/platforms&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Crio uma request informando seus headers e seus atributos;&lt;/li&gt;
&lt;li&gt;Crio uma response informando seus status codes e seus payloads&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para ver como essa documentação é renderizada usando o Apiary,&lt;a href="https://gamer1.docs.apiary.io/"&gt;clique aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gerando-a-documenta%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Gerando a documentação
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;API Blueprint&lt;/strong&gt; é apenas uma especificação, não uma tecnologia. Para gerar uma documentação em meu projeto Node, acabei por utilizar a engine &lt;a href="https://github.com/danielgtaylor/aglio"&gt;Aglio&lt;/a&gt;, que será responsável por interpretar os arquivos nesse formato e renderizar a documentação formatada.&lt;/p&gt;

&lt;p&gt;Para isso, faça:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;npm install -g aglio&lt;/li&gt;
&lt;li&gt;aglio -i api.apib — theme-template triple -s&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Esse último comando lerá o arquivo*&lt;em&gt;api.apib&lt;/em&gt;*, gerando um template de 3 colunas em um servidor.&lt;/p&gt;

&lt;p&gt;Eis que o resultado será algo como mostrado na imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cDUYjGYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9pgybf83klc0lvppnyr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cDUYjGYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9pgybf83klc0lvppnyr.png" alt="alt text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Pronto! Com isso já posso dar continuidade na documentação da API :).&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
