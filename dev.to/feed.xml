<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How To Add Attractive Share Buttons To Your Website Or Blog</title>
      <author>Code_Jedi</author>
      <pubDate>Mon, 10 Jan 2022 18:00:25 +0000</pubDate>
      <link>https://dev.to/code_jedi/how-to-add-attractive-share-buttons-to-your-website-or-blog-59bm</link>
      <guid>https://dev.to/code_jedi/how-to-add-attractive-share-buttons-to-your-website-or-blog-59bm</guid>
      <description>&lt;p&gt;Today, I’ll be demonstrating and explaining how you can make simple, functional and good looking share buttons for your website or blog.&lt;/p&gt;

&lt;p&gt;First of all, why should you add share buttons to your website or blog, and why is it an important part of web development?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;They are really beneficial for SEO and help your website gain backlinks, which will in turn make your website/blog rank higher on search engines like Google.&lt;/li&gt;
&lt;li&gt;Shares and backlinks are the main currency of social media. the more shares you get on your website or blog, the more people will visit it and in-turn share it with more people. And if you’re not adding share buttons to your website or blog, you’re not giving people the opportunity to share your content.&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let’s get started!
&lt;/h2&gt;

&lt;p&gt;First, let’s add the basic layout of our webpage and add a link to the stylesheet containing the social media icons we’ll be using for our share buttons:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Share this!&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/css/all.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
      &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sbutton"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sbutton reddit"&lt;/span&gt; &lt;span class="na"&gt;tooltip=&lt;/span&gt;&lt;span class="s"&gt;"Reddit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-reddit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sbutton fb"&lt;/span&gt; &lt;span class="na"&gt;tooltip=&lt;/span&gt;&lt;span class="s"&gt;"Facebook"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-facebook-f"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sbutton twitt"&lt;/span&gt; &lt;span class="na"&gt;tooltip=&lt;/span&gt;&lt;span class="s"&gt;"Twitter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-twitter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sbutton linked"&lt;/span&gt; &lt;span class="na"&gt;tooltip=&lt;/span&gt;&lt;span class="s"&gt;"Linkedin"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-linkedin"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
      &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we’ve defined the share buttons for Reddit, Twitter, Facebook and Linkedin, as well as gave them their corresponding classes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; the classes referenced in the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements will be used for setting background colors and margins, while the classes defined in the &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; elements will be used for displaying the actual social media icons and will be referenced from &lt;a href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/css/all.css"&gt;here&lt;/a&gt;, the link which we included earlier. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#now-lets-add-some-style-to-the-share-buttons"&gt;
  &lt;/a&gt;
  Now let’s add some style to the share buttons
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class="nc"&gt;.sbutton&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nc"&gt;.sbutton&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;38px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nc"&gt;.sbutton.reddit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;darkorange&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nc"&gt;.sbutton.twitt&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#03A9F4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nc"&gt;.sbutton.fb&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3F51B5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;180px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nc"&gt;.sbutton.linked&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;224&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;260px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Let’s break this down piece by piece:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We define the &lt;code&gt;sbutton&lt;/code&gt; class which will contain our share buttons and give them the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A width and height of 60px.&lt;/li&gt;
&lt;li&gt;A fixed position attribute (this will make the icons unscrollable thus making them stay in the user’s view even if they scroll down) and a position 2% away from the left side of the screen.&lt;/li&gt;
&lt;li&gt;A border-radius of 25% to turn the icon backgrounds into squares with soft edges. You can change this attribute to 50% to make your icon background look less like squares:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bP-Ropdm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hmw9jp46dondpprbjz8.png" alt="Squares" width="84" height="330"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and more like circles:&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cd3SE3GA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/px9lvk7kjy349ejrc7yz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cd3SE3GA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/px9lvk7kjy349ejrc7yz.png" alt="Circles" width="85" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;text-align: center;&lt;/code&gt; attribute to align the icons in the center of their corresponding background elements.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;margin-top: 20px;&lt;/code&gt; attribute to position the upper-most icon 20px down from the top of the &lt;code&gt;sbutton&lt;/code&gt; container. &lt;/li&gt;
&lt;li&gt;Finally, a &lt;code&gt;cursor: pointer&lt;/code&gt; attribute to turn the user’s cursor into a pointer when they hover over one of the icons.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We style the &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; elements within the &lt;code&gt;sbutton&lt;/code&gt; container to inherit a font-size of 38px.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We define the background of the first icon(Reddit) to have a dark-orange background.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We then define the background of the second icon(Twitter) to have a background color of the #03A9F4 hexadecimal and position it 100px down from the &lt;code&gt;sbutton&lt;/code&gt; container’s top position.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We do the same for the next icons but increment their &lt;code&gt;margin-top&lt;/code&gt; attribute by 80px.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;At this point you should have basic, embeddable share button widgets:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/matveynikon/embed/mdmNEjP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One last but very important thing!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As you might have noticed, the href attributes within our share buttons have no effect!&lt;br&gt;
Let's take &lt;a href="https://dev.to/code_jedi"&gt;https://dev.to/code_jedi&lt;/a&gt; as a sample link that's going to be shared through the share buttons.&lt;br&gt;
Let’s give our icons’ href attributes URLs to their respective social media platforms' post pages, as well as make them include our sample link in a new post:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sbutton"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://www.reddit.com/submit?url=https://dev.to/code_jedi"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sbutton reddit"&lt;/span&gt; &lt;span class="na"&gt;tooltip=&lt;/span&gt;&lt;span class="s"&gt;"Reddit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-reddit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://www.facebook.com/sharer/sharer.php?u=https://dev.to/code_jedi"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sbutton fb"&lt;/span&gt; &lt;span class="na"&gt;tooltip=&lt;/span&gt;&lt;span class="s"&gt;"Facebook"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-facebook-f"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://twitter.com/share?url=https://dev.to/code_jedi"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sbutton twitt"&lt;/span&gt; &lt;span class="na"&gt;tooltip=&lt;/span&gt;&lt;span class="s"&gt;"Twitter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-twitter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://www.linkedin.com/sharing/share-offsite/?url=https://dev.to/code_jedi"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sbutton linked"&lt;/span&gt; &lt;span class="na"&gt;tooltip=&lt;/span&gt;&lt;span class="s"&gt;"Linkedin"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-linkedin"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here’s what a visitor will see when clicking on these share buttons:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reddit:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k5Ihib1c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4euet7ruqhj2ybsiql6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k5Ihib1c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4euet7ruqhj2ybsiql6.png" alt="Reddit" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Facebook:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dZGQCfYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4k6jebjh1y6t8of8erz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dZGQCfYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4k6jebjh1y6t8of8erz.png" alt="Facebook" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Twitter:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VHv5UHtb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3y6wmaop0jd2yv8c6esi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VHv5UHtb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3y6wmaop0jd2yv8c6esi.png" alt="Twitter" width="880" height="473"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linkedin:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oKLDcbSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exnfu2pomn5860mw83cs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oKLDcbSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exnfu2pomn5860mw83cs.png" alt="Linkedin" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Here’s what your functional share buttons should look like:&lt;/strong&gt;&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/matveynikon/embed/jOGvZjB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-can-now-add-them-to-your-blog-or-website"&gt;
  &lt;/a&gt;
  You can now add them to your blog or website:
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/matveynikon/embed/jOGvzLY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;That’s it for this blog post, hope you found it useful! &lt;br&gt;
Make sure to follow for more development blogs if you did.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Byeeee👋&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to use dbt with Materialize and Redpanda</title>
      <author>Bobby Iliev</author>
      <pubDate>Mon, 10 Jan 2022 17:52:11 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/how-to-use-dbt-with-materialize-and-redpanda-47b3</link>
      <guid>https://dev.to/bobbyiliev/how-to-use-dbt-with-materialize-and-redpanda-47b3</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;This is a self-contained demo using &lt;a href="https://materialize.com/"&gt;Materialize&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This demo shows you how to use &lt;a href="https://docs.getdbt.com/docs/introduction"&gt;dbt&lt;/a&gt; together with Materialize.&lt;/p&gt;

&lt;p&gt;For this demo, we are going to monitor the reviews left by users on a demo website, and use dbt to model our business logic, like getting a list of important users that left bad reviews. We will then explore how to use this data to potentially reach out to the flagged users and improve our website experience.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ctSrQTHr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/148790925-fff39499-d8a3-4b2e-8488-13f61265b0a0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ctSrQTHr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/148790925-fff39499-d8a3-4b2e-8488-13f61265b0a0.png" alt="How to use dbt with Materialize" width="880" height="520"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Before you get started, you need to make sure that you have Docker and Docker Compose installed.&lt;/p&gt;

&lt;p&gt;You can follow the steps here on how to install Docker:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://materialize.com/docs/third-party/docker/"&gt;Installing Docker&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also, you would need to make sure that you have &lt;code&gt;dbt&lt;/code&gt; (v0.18.1+) installed:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://materialize.com/docs/third-party/dbt/"&gt;Installing dbt&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can find the files for this demo in this &lt;a href="https://github.com/bobbyiliev/materialize-tutorials/blob/main/mz-user-reviews-dbt-demo/"&gt;GitHub repository here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;As shown in the diagram above, we will have the following components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A mock service to continually generate reviews and users.&lt;/li&gt;
&lt;li&gt;The reviews and the users will be stored in a MySQL database.&lt;/li&gt;
&lt;li&gt;As the database writes occur, Debezium streams the changes out of MySQL to a Redpanda topic.&lt;/li&gt;
&lt;li&gt;We then ingest this Redpanda topic into Materialize directly.&lt;/li&gt;
&lt;li&gt;After that, we use dbt to define transformations on the data and create a model that lists any VIP users that left bad reviews.&lt;/li&gt;
&lt;li&gt;You could, later on, visualize the data in a BI tool like Metabase.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;As a side note here, you would be perfectly fine using Kafka instead of Redpanda. I just like the simplicity that Redpanda brings to the table, as you can run a single Redpanda instance instead of all of the Kafka components.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#running-the-demo"&gt;
  &lt;/a&gt;
  Running the demo
&lt;/h2&gt;

&lt;p&gt;First, start by cloning the repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/bobbyiliev/materialize-tutorials.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, you can access the directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd materialize-tutorials/mz-user-reviews-dbt-demo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's start by running the Redpanda container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose up -d redpanda
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Build the images:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then pull all of the other Docker images:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose pull
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, start all of the services:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to launch the Materialize CLI, you can run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose run mzcli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This is just a shortcut to a Docker container with a compatible CLI pre-installed; if you already have &lt;code&gt;psql&lt;/code&gt; installed, you could instead connect to the running Materialize instance using that: &lt;code&gt;psql -U materialize -h localhost -p 6875 materialize&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As soon as the demo is running, the mock service will start generating reviews and users.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prepare-dbt-configuration"&gt;
  &lt;/a&gt;
  Prepare dbt configuration
&lt;/h3&gt;

&lt;p&gt;First, we will need to install the &lt;a href="https://pypi.org/project/dbt-materialize/"&gt;&lt;code&gt;dbt-materialize&lt;/code&gt;&lt;/a&gt; plugin:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3 -m venv dbt-venv
source dbt-venv/bin/activate
pip install dbt-materialize
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, with your favorite text editor, open the &lt;code&gt;~/.dbt/project.yml&lt;/code&gt; file and add the following lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;user_reviews&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;outputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;dev&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;materialize&lt;/span&gt;
      &lt;span class="na"&gt;threads&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
      &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;localhost&lt;/span&gt;
      &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6875&lt;/span&gt;
      &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;materialize&lt;/span&gt;
      &lt;span class="na"&gt;pass&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pass&lt;/span&gt;
      &lt;span class="na"&gt;dbname&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;materialize&lt;/span&gt;
      &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;analytics&lt;/span&gt;

  &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, to make sure that the connection to the Materialize container is working, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dbt debug
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we can use dbt to create materialized views on top of the 3 Redpanda/Kafka topics. To do so just run the following dbt command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dbt run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command generates executable SQL from our model files (found in the &lt;code&gt;models&lt;/code&gt; directory of this project) and executes that SQL against the target database, creating our materialized views.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: If you installed &lt;code&gt;dbt-materialize&lt;/code&gt; in a virtual environment, make sure it's activated. If you don't have it installed, please revisit the setup above.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, you can run your dbt tests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dbt test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#verify-the-materialized-views-and-sources-are-created"&gt;
  &lt;/a&gt;
  Verify the Materialized Views and Sources are created
&lt;/h4&gt;

&lt;p&gt;Congratulations! You just used dbt to create materialized views in Materialize.&lt;/p&gt;

&lt;p&gt;You can check the columns of the &lt;code&gt;reviews&lt;/code&gt; source by running the following statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="n"&gt;COLUMNS&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;analytics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reviews_raw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll see that, as Materialize is pulling the message schema from the &lt;a href="https://vectorized.io/blog/schema_registry/"&gt;Redpanda registry&lt;/a&gt;, it knows the column types to use for each attribute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;     &lt;span class="n"&gt;name&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;nullable&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="k"&gt;type&lt;/span&gt;
&lt;span class="c1"&gt;---------------+----------+-----------&lt;/span&gt;
 &lt;span class="n"&gt;id&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;bigint&lt;/span&gt;
 &lt;span class="n"&gt;user_id&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;bigint&lt;/span&gt;
 &lt;span class="n"&gt;review_text&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;
 &lt;span class="n"&gt;review_rating&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;
 &lt;span class="n"&gt;created_at&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;
 &lt;span class="n"&gt;updated_at&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;timestamp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can verify the views were created from your psql shell connected to Materialize:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="n"&gt;VIEWS&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;analytics&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;        &lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="c1"&gt;--------------------&lt;/span&gt;
 &lt;span class="n"&gt;badreviews&lt;/span&gt;
 &lt;span class="n"&gt;vipusers&lt;/span&gt;
 &lt;span class="n"&gt;vipusersbadreviews&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also verify the data is being pulled from Redpanda by running the following query a few times:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;analytics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vipusersbadreviews&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will be able to see that the result changes each time you run the query, meaning that the data is being incrementally updated without you having to run &lt;code&gt;dbt run&lt;/code&gt; again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generate-the-dbt-docs"&gt;
  &lt;/a&gt;
  Generate the dbt docs
&lt;/h3&gt;

&lt;p&gt;Once we have our materialized views created, we can generate the dbt docs. To do so, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dbt docs generate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that you can serve the docs by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dbt docs serve
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then visit the docs at &lt;a href="http://localhost:8080/dbt/docs/"&gt;http://localhost:8080/dbt/docs/&lt;/a&gt;. There, you will have a list of all the views that were created and you can click on any of them to see the SQL that was generated. You would also see some nice Lineage Graphs that show the relationships between the views:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MVEICbAN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/148784371-21a454d4-560a-40a4-a6d1-e2aefc543617.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MVEICbAN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/148784371-21a454d4-560a-40a4-a6d1-e2aefc543617.png" alt="dbt Lineage Graph" width="880" height="318"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#metabase"&gt;
  &lt;/a&gt;
  Metabase
&lt;/h2&gt;

&lt;p&gt;In order to access the &lt;a href="https://materialize.com/docs/third-party/metabase/"&gt;Metabase&lt;/a&gt; instance, visit &lt;code&gt;http://localhost:3030&lt;/code&gt; if you are running the demo locally or &lt;code&gt;http://your_server_ip:3030&lt;/code&gt; if you are running the demo on a server. Then follow the steps to complete the Metabase setup.&lt;/p&gt;

&lt;p&gt;Materialize integrates natively with Metabase using the official PostgreSQL connector. To connect to your Materialize database, specify the following connection properties:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Database&lt;/td&gt;
&lt;td&gt;PostgreSQL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;user_reviews&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Host&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;materialized&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Port&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;6875&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Database name&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;materialize&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Database username&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;materialize&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Database password&lt;/td&gt;
&lt;td&gt;Leave empty&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Once ready, you will be able to visualize your data just as you would with a standard PostgreSQL database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stopping-the-demo"&gt;
  &lt;/a&gt;
  Stopping the Demo
&lt;/h2&gt;

&lt;p&gt;To stop all of the services, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose down
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you can see, this is a barebones example of how to use Materialize together with dbt. You can use Materialize to ingest data from a variety of sources and then stream it to a variety of destinations.&lt;/p&gt;

&lt;p&gt;To learn more about dbt and Materialize, check out the documentation here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://materialize.com/dbt-materialize-jaffle-shop-demo/"&gt;dbt + Materialize demo: Running dbt’s jaffle_shop with Materialize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaterializeInc/materialize/blob/main/play/wikirecent-dbt/README.md"&gt;dbt + Materialize: streaming Wikipedia data demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://materialize.com/docs/guides/dbt/"&gt;Materialize and dbt getting started guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also make sure to check out this video here on how to go from Batch to Streaming in One Easy Step (w/ Emily Hawkins &amp;amp; Arjun Narayan):&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_oVF217KPvY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#helpful-resources"&gt;
  &lt;/a&gt;
  Helpful resources:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://materialize.com/docs/sql/create-source/"&gt;&lt;code&gt;CREATE SOURCE&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://materialize.com/docs/sql/create-materialized-view/"&gt;&lt;code&gt;CREATE MATERIALIZED VIEW&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://materialize.com/docs/sql/select"&gt;&lt;code&gt;SELECT&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>database</category>
      <category>redpanda</category>
      <category>materialize</category>
      <category>dbt</category>
    </item>
    <item>
      <title>I built a real-time logging platform</title>
      <author>SeedAcquire</author>
      <pubDate>Mon, 10 Jan 2022 17:35:24 +0000</pubDate>
      <link>https://dev.to/seedacquire/i-built-a-real-time-logging-platform-jjn</link>
      <guid>https://dev.to/seedacquire/i-built-a-real-time-logging-platform-jjn</guid>
      <description>&lt;p&gt;Today, I launched logmyapp. While we dont have a formal website our app is live at app.logmyapp.io and the npm package for it is here &lt;a href="https://www.npmjs.com/package/logmyapp"&gt;https://www.npmjs.com/package/logmyapp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What does logmyapp do?&lt;br&gt;
Its actually quite simple. We log your logs. Have a .catch? use our package to effectively log your errors from production. Want to know when data is succeeding? Use our package to log it. Think of logmyapp like a way to see what your users are doing or errors they are seeing in production. &lt;/p&gt;

&lt;p&gt;How do I use it?&lt;br&gt;
You can view the package details here &lt;a href="https://www.npmjs.com/package/logmyapp"&gt;https://www.npmjs.com/package/logmyapp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or start by simply heading to app.logmyapp.io -&amp;gt; create a project -&amp;gt; head over to &lt;a href="https://www.npmjs.com/package/logmyapp"&gt;https://www.npmjs.com/package/logmyapp&lt;/a&gt; -&amp;gt; download the package (npm i logmyapp) include it in your components and start using it! After that you will see logs in real-time by heading to app.logmyapp.io -&amp;gt; find your project and click view real-time logging.&lt;/p&gt;

&lt;p&gt;Have a question?&lt;br&gt;
Email us or comment below &lt;a href="mailto:bryan@logmyapp.io"&gt;bryan@logmyapp.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>
My Web-development Journey</title>
      <author>Richard Warepam</author>
      <pubDate>Mon, 10 Jan 2022 17:27:17 +0000</pubDate>
      <link>https://dev.to/coding_warepam/my-web-development-journey-4n66</link>
      <guid>https://dev.to/coding_warepam/my-web-development-journey-4n66</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-webdevelopment"&gt;
  &lt;/a&gt;
  Why Web-development?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7i45AFDV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ka924jvj5h2cq6427r9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7i45AFDV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ka924jvj5h2cq6427r9.png" alt="Image description" width="768" height="545"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was in my second year of college, pursuing B.Tech Computer Engineering and due to the pandemic “COVID-19”, College wasn’t going well at that time. At that moment, I realised that depending all on college will be of no use so, I started to explore what interests me the most while learning. Then, I found out that web-development resources on internet are so easy to understand and are available on a large scale, that anyone can start learning it at free of cost. Without a doubt in my mind, I started collecting the resources and started my web-development learning journey. Honestly, that decision was the best in my life, to give a kick-start in my programmer’s journey.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ways-of-learning-webdevelopment"&gt;
  &lt;/a&gt;
  Ways of learning Web-development:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xOC0DMzh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64eszwa2ifst69rn1hiv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xOC0DMzh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64eszwa2ifst69rn1hiv.png" alt="Image description" width="768" height="545"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The best way to learn web-development is to listen and watch some courses and practice by yourself. After some days of practice , you will be able to read and learn from web-documentations. Whenever you face any problem, a programmer or developer always depends on &lt;a href="https://www.google.com/"&gt;Google&lt;/a&gt; and &lt;a href="https://stackoverflow.com/"&gt;Stackoverflow&lt;/a&gt;. I will provide the resources with you below in this blog.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#topics-related-to-webdevelopment"&gt;
  &lt;/a&gt;
  Topics related to Web-development:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zZCTXGnD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixmzd4omydop0wu3e4do.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zZCTXGnD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixmzd4omydop0wu3e4do.png" alt="Image description" width="768" height="545"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FronEnd and BackEnd&lt;/strong&gt;&lt;br&gt;
Web-development is categorised in two parts : FrontEnd Web-Development and BackEnd Web-Development&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FrontEnd Web-development&lt;/strong&gt; is the development of what the clients see such as, the designs and the functionalities of the website. To be a FrontEnd developer, We have to learn:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We can also learn the frameworks and libraries of FrontEnd like, Bootstrap, Tailwind and jQuery, to make ourselves and our work more faster and better in the designing the Websites.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BackEnd Web-development&lt;/strong&gt; is the development of the server’s side . It helps to connect the clients and servers with its technologies. To be a BackEnd developer, We have to learn:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Node. js&lt;/li&gt;
&lt;li&gt;Express. js&lt;/li&gt;
&lt;li&gt;APIs&lt;/li&gt;
&lt;li&gt;Git, Github and Version Control&lt;/li&gt;
&lt;li&gt;Databases : MySQL and NoSQL(MongoDB)&lt;/li&gt;
&lt;li&gt;EJS and React. js&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When you complete these topics both FrontEnd technologies and BackEnd technologies and you are familiar working with these concepts , you are called as Full-Stack Developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#best-resources-of-webdevelopment"&gt;
  &lt;/a&gt;
  Best Resources of Web-development:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xYdVbV3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmcr5f4cc0xnkvwzhwn9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xYdVbV3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmcr5f4cc0xnkvwzhwn9.png" alt="Image description" width="768" height="545"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are the resources from which I learned Web development completely:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Web-development Video Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Free Courses:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/user/TechGuyWeb"&gt;Traversy Media&lt;/a&gt; – Youtube Channel&lt;br&gt;
&lt;a href="https://www.youtube.com/c/Freecodecamp"&gt;freecodecamp&lt;/a&gt; – Youtube Channel&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=mU6anWqZJcc&amp;amp;t=1s"&gt;freecodecamp HTML/CSS&lt;/a&gt; – Youtube Video&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=jS4aFq5-91M"&gt;freecodecamp Javascript&lt;/a&gt; – Youtube Video&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Paid Courses:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/the-complete-web-development-bootcamp/"&gt;Angela Yu&lt;/a&gt; – Udemy&lt;br&gt;
&lt;a href="https://www.udemy.com/course/the-web-developer-bootcamp/"&gt;Colt Steele&lt;/a&gt; – Udemy&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Web-development Documentation Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/"&gt;W3 Schools&lt;/a&gt;&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/"&gt;MDN Documentation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/"&gt;dev.to&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can follow the youtube channels and learn from them or you could enrolled to one of the courses in Udemy to start off your journey. A special mention for practice is, &lt;a href="https://www.freecodecamp.org/learn/"&gt;https://www.freecodecamp.org/learn/&lt;/a&gt; , you can learn anything from here .&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;Why learning Web-development was my best decision? – It is because, in my learning time period , I learned so much extra-development topics, which I can apply on any software development works and even in Blockchain-development that many scopes of work were opened for me to build myself a better developer and use my development skills to develop anything I want.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For more blog content, Visit my blogs&lt;/strong&gt;: &lt;a href="https://richardwarepam.tech/blogs/"&gt;Blogs&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Wake up , get out of your normal comfort zone and start learning Web-development . Your life’s gonna change soon, once you have learned it.”&lt;br&gt;
– Richard Warepam&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>css</category>
    </item>
    <item>
      <title>How to become a Blockchain Developer?</title>
      <author>Richard Warepam</author>
      <pubDate>Mon, 10 Jan 2022 17:15:37 +0000</pubDate>
      <link>https://dev.to/coding_warepam/how-to-become-a-blockchain-developer-263m</link>
      <guid>https://dev.to/coding_warepam/how-to-become-a-blockchain-developer-263m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#blockchain-developer"&gt;
  &lt;/a&gt;
  Blockchain Developer:
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#what-do-they-do"&gt;
  &lt;/a&gt;
  What do they do?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LEQddwf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dpu6cqrh0ndg4xjqmdyd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LEQddwf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dpu6cqrh0ndg4xjqmdyd.png" alt="Image description" width="768" height="545"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Blockchain Developers are the Programmers who create applications for Blockchain. They handle the entire life-cycle of a blockchain application, which means that he/she will be responsible for the research as well as the execution of the application. They create the whole architecture of the blockchain system, make smart contracts and optimize the protocols.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Types of Blockchain Developer :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7YjTd67L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6z1569bhrm4e2cxm0dj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7YjTd67L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6z1569bhrm4e2cxm0dj.png" alt="Image description" width="768" height="545"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are two types of Blockchain Developer:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Blockchain Core Developer:&lt;/strong&gt; Developers who works on designing the network architecture of the whole system such as, consensus(Working rules) protocols ,etc.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Blockchain Software Developer:&lt;/strong&gt; Developers who builds decentralised applications with the help of blockchain network system.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this blog, We are going to talk all about Blockchain Software Developer as the demand of it is at the highest at this moment. Today, It is one of the fastest growing skill-sets with jobs in this domain growing at a huge rate of 2,000-6,000%.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#average-salary-of-a-blockchain-developer-"&gt;
  &lt;/a&gt;
  Average Salary of a Blockchain Developer :
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JAlCWbCt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tg41emv9fcraaz69dau8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JAlCWbCt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tg41emv9fcraaz69dau8.png" alt="Image description" width="768" height="545"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the demand of Blockchain Developer is increasing, the salaries of Blockchain Developers are 50-100% higher than other conventional developer jobs.&lt;/p&gt;

&lt;p&gt;Salary range in India: &lt;strong&gt;Rs. 5,00,000-30,00,000 LPA&lt;/strong&gt;&lt;br&gt;
Salary range in US: &lt;strong&gt;$120,000-$200,000 annually.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#skills-required-to-become-a-blockchain-developer"&gt;
  &lt;/a&gt;
  Skills required to become a Blockchain Developer:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_VWGLRlQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vbqfdjtn3wdwpkfumag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_VWGLRlQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vbqfdjtn3wdwpkfumag.png" alt="Image description" width="768" height="545"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Blockchain Software Architecture can be categorised in 4 categories, such as:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;FrontEnd&lt;/li&gt;
&lt;li&gt;BackEnd&lt;/li&gt;
&lt;li&gt;Smart Contracts&lt;/li&gt;
&lt;li&gt;Databases&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;FrontEnd:&lt;/strong&gt;&lt;br&gt;
Here are the FrontEnd programming languages, which you should know to be a successful blockchain developer-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These 3 are the basic programming languages that you should know, but to become a more advanced and efficient blockchain developer, learning &lt;strong&gt;&lt;em&gt;React.js or Angular.js&lt;/em&gt;&lt;/strong&gt; will be great.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BackEnd:&lt;/strong&gt;&lt;br&gt;
There are many backend technologies which you can learn or which you know, that is applicable in blockchain development. As a personal choice , I use &lt;strong&gt;&lt;em&gt;“Node.js”&lt;/em&gt;&lt;/strong&gt; as my primary backend technology.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smart Contracts:&lt;/strong&gt;&lt;br&gt;
Smart Contracts are simply programs stored on a blockchain that run when predetermined conditions are met. They are typically used to automate agreement so that all participants can know the outcome immediately, without any intermediary’s involvement. To Write a smart contract, We have to know-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Solidity or,&lt;/li&gt;
&lt;li&gt;Vyper&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Database:&lt;/strong&gt;&lt;br&gt;
For database, Its always better to know both &lt;strong&gt;&lt;em&gt;MySQL and NoSQL(MongoDB)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are the basic skills you should learn to become a blockchain-developer. Besides these, in any programming languages you should learn the &lt;strong&gt;&lt;em&gt;OOPS concepts&lt;/em&gt;&lt;/strong&gt; perfectly to be a better developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extras-which-makes-you-a-better-blockchain-developer"&gt;
  &lt;/a&gt;
  Extras which makes you a better Blockchain developer:
&lt;/h2&gt;

&lt;p&gt;There are some topics which you can learn as an extra knowledge besides the basic requirements, to become a better blockchain developer. They are –&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What is HyperLedger?&lt;/li&gt;
&lt;li&gt;What is IPFS?&lt;/li&gt;
&lt;li&gt;About Cryptography.&lt;/li&gt;
&lt;li&gt;What is Truffle?&lt;/li&gt;
&lt;li&gt;What are NFTs?&lt;/li&gt;
&lt;li&gt;What is DeFi?&lt;/li&gt;
&lt;li&gt;Lastly, What is a GETH?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#resources-to-learn-the-skills"&gt;
  &lt;/a&gt;
  Resources to learn the skills:
&lt;/h2&gt;

&lt;p&gt;If you are an Indian, there is one youtube channel which I absolutely recommend you to check out for all his blockchain tutorials. This blog is also inspired from his videos: Code Eater (&lt;a href="https://www.youtube.com/c/CodeEater21"&gt;Click here&lt;/a&gt;)- Youtube Channel.&lt;/p&gt;

&lt;p&gt;I started learning about Blockchain Development from a youtube Channel called “Dapp-University“(Click here)&lt;/p&gt;

&lt;p&gt;Youtube Video – &lt;a href="https://www.youtube.com/c/DappUniversity"&gt;freeCodeCamp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, there are many Udemy Courses you can enroll to as well.&lt;/p&gt;

&lt;p&gt;Documentation links:&lt;br&gt;
Visit this Website : &lt;a href="https://www.youtube.com/watch?v=M576WGiDBdQ"&gt;Dapp University&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Solidity Docs – &lt;a href="https://docs.soliditylang.org/en/v0.8.7/"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ethereum Docs – &lt;a href="https://ethereum.org/en/what-is-ethereum/"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;This is kind of a roadmap to become a blockchain developer, only if you are interested. I wrote this blog just to make someone’s life easier because resources and knowledge about blockchain, on internet is very less and unclear. So, I researched hard about everything and found the best resources about blockchain that I can provide you with full Confidence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For more blog content, Visit my blogs:&lt;/strong&gt; &lt;a href="https://richardwarepam.tech/blogs/"&gt;Blogs&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Blockchain is gonna rule this digital world by 2026-2030, So learn the skills as soon as possible. You are never late to learn anything. Learning this technology, is the best investment you can make right now”&lt;br&gt;
– Richard Warepam&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>ethereum</category>
      <category>eth</category>
      <category>web3</category>
      <category>blockchain</category>
    </item>
    <item>
      <title>5 Articles every WebDev should read this week (#02)
</title>
      <author>martin krause</author>
      <pubDate>Mon, 10 Jan 2022 16:57:08 +0000</pubDate>
      <link>https://dev.to/martinkr/5-articles-every-webdev-should-read-this-week-02-2bpn</link>
      <guid>https://dev.to/martinkr/5-articles-every-webdev-should-read-this-week-02-2bpn</guid>
      <description>&lt;p&gt;A curated list of the top five web development must-reads from last week. Don't miss out on the latest web development stories and insights. Read all about the cutting edge in web development, working in tech and the new tools and frameworks while learning a few new tricks.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#nuxt-3-beta-whats-new-and-how-to-get-started"&gt;
  &lt;/a&gt;
  Nuxt 3 Beta: What’s New and How to Get Started
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;In this article, we’ll explore the most notable new features and improvements offered by Nuxt 3, and we’ll also look at how most of them can be used in practice. This will provide a good overview of what’s possible with Nuxt 3 and how you can implement its goodies in your projects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.sitepoint.com/nuxt-3-whats-new-get-started/"&gt;https://www.sitepoint.com/nuxt-3-whats-new-get-started/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#my-first-impressions-of-web3"&gt;
  &lt;/a&gt;
  My first impressions of web3
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Even strictly on the technological level, though, I haven’t yet managed to become a believer. So given all of the recent attention into what is now being called web3, I decided to explore some of what has been happening in that space more thoroughly to see what I may be missing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://moxie.org/2022/01/07/web3-first-impressions.html"&gt;https://moxie.org/2022/01/07/web3-first-impressions.html&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-create-a-browser-extension"&gt;
  &lt;/a&gt;
  How to Create a Browser Extension
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;In this article, I will give you an introduction on how to create one. Ultimately, we’ll make it work in multiple browsers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/how-to-create-a-browser-extension/"&gt;https://css-tricks.com/how-to-create-a-browser-extension/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#imperative-vs-declarative-programming"&gt;
  &lt;/a&gt;
  Imperative vs Declarative Programming
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Learn the difference between imperative and declarative programming and why you'll usually want to use one over the other.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#httpswwwyoutubecomwatchve7fbf7r3x6i"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=E7Fbf7R3x6I"&gt;https://www.youtube.com/watch?v=E7Fbf7R3x6I&lt;/a&gt;
&lt;/h2&gt;




&lt;h2&gt;
  &lt;a href="#introducing-fuite-a-tool-for-finding-memory-leaks-in-web-apps"&gt;
  &lt;/a&gt;
  Introducing fuite: a tool for finding memory leaks in web apps
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Debugging memory leaks in web apps is hard. The tooling exists, but it’s complicated, cumbersome, and often doesn’t answer the simple question: Why is my app leaking memory?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://nolanlawson.com/2021/12/17/introducing-fuite-a-tool-for-finding-memory-leaks-in-web-apps/"&gt;https://nolanlawson.com/2021/12/17/introducing-fuite-a-tool-for-finding-memory-leaks-in-web-apps/&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@burntime"&gt;Alex Kulikov&lt;/a&gt; on &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://modernfrontend.dev/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cH97ToOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://modernfrontend.dev/banner/banner_583-111.png" alt="Subscribe to the weekly modern frontend development newsletter" width="583" height="111"&gt;&lt;/a&gt;&lt;/p&gt;




</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Writing User Stories</title>
      <author>David Whitney</author>
      <pubDate>Mon, 10 Jan 2022 16:29:13 +0000</pubDate>
      <link>https://dev.to/david_whitney/writing-user-stories-1dml</link>
      <guid>https://dev.to/david_whitney/writing-user-stories-1dml</guid>
      <description>&lt;p&gt;Software development transforms human requirements, repeatedly, until software is eventually produced.&lt;/p&gt;

&lt;p&gt;We transform things we'd like into feature requests.&lt;br&gt;
Which are subsequently decomposed into designs.&lt;br&gt;
Which are eventually transformed into working software.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;At each step in this process the information becomes denser, more concrete, more specific.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In agile software development, user stories are a brief statement of what a user wants a piece of software to do. User stories are meant to represent a small, atomic, valuable change to a software system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sounds simple right?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But they're more than that – user stories are artifacts in agile planning games, they're triggers that start conversations, tools used to track progress, and often the place that a lot of "product thinking" ends up distilled. User stories end up as the single source of truth of pending changes to software.&lt;/p&gt;

&lt;p&gt;Because they're so critically important to getting work done, it's important to understand them – so we're going to walk through what exactly user stories are, where they came from, and why we use them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-time-before-user-stories"&gt;
  &lt;/a&gt;
  The time before user stories
&lt;/h2&gt;

&lt;p&gt;Before agile reached critical mass, the source of change for software systems was often a &lt;strong&gt;large specification&lt;/strong&gt; that was often the result of a &lt;strong&gt;lengthy requirements engineering&lt;/strong&gt; process.&lt;/p&gt;

&lt;p&gt;In traditional waterfall processes, the requirements gathering portion of software development generally happened at the start of the process and resulted in a set of designs for software that would be written at a later point.&lt;/p&gt;

&lt;p&gt;Over time, weaknesses in this very linear "think -&amp;gt; plan -&amp;gt; do" approach to change became obvious. The specifications that were created ended up in systems that often took a long time to build, didn't finish, and full of defects that were only discovered way, way too late.&lt;/p&gt;

&lt;p&gt;The truth was that &lt;strong&gt;the systems as they were specified were often not actually what people wanted&lt;/strong&gt;. By disconnecting the design and development of complicated pieces of software, frequently &lt;strong&gt;design decisions were misinterpreted as requirements&lt;/strong&gt;, and &lt;strong&gt;user feedback was hardly ever solicited until the very end of the process.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is about as perfect a storm as can exist for requirements – long, laborious requirement capturing processes resulting in the wrong thing being built.&lt;/p&gt;

&lt;p&gt;To make matters worse, because so much thought-work was put into crafting the specifications at the beginning of the process, they often brought out the worst in people; specs became unchangeable, locked down, binding things, where so much work was done to them that if that work was ever invalidated, the authors would often fall foul of the &lt;strong&gt;sunk cost fallacy&lt;/strong&gt; and just continue down the path anyway because it was "part of the design".&lt;/p&gt;

&lt;p&gt;The specifications never met their goals. They isolated software development from it's users both with layers of people and management. They bound developers to decisions made during times of speculation. And they charmed people with the security of "having done some work" when no software was being produced.&lt;/p&gt;

&lt;p&gt;They provided a feedback-less illusion of progress.&lt;/p&gt;

&lt;p&gt;"But not my specifications!" I hear you cry.&lt;/p&gt;

&lt;p&gt;No, not all specifications, but most of them.&lt;/p&gt;

&lt;p&gt;There had to be a better way to capture requirements that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Was open to change to match the changing nature of software&lt;/li&gt;
&lt;li&gt;Could operate at the pace of the internet&lt;/li&gt;
&lt;li&gt;Didn't divorce the authors of work from the users of the systems they were designing&lt;/li&gt;
&lt;li&gt;Were based in real, measurable, progress.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The humble user story emerged as the format to tackle this problem.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-a-user-story"&gt;
  &lt;/a&gt;
  What is a user story
&lt;/h1&gt;

&lt;p&gt;A user story is a short, structured statement of a change to a system. They should be &lt;strong&gt;outcome focused&lt;/strong&gt; , &lt;strong&gt;precise,&lt;/strong&gt; and &lt;strong&gt;non-exhaustive.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Stories originated as part of physical work-tracking systems in early agile methods – they were handwritten on the front of index cards, with acceptance criteria written on the reverse of the card. The physical format added constraints to user stories that are still useful today.&lt;/p&gt;

&lt;p&gt;Their job is to &lt;strong&gt;describe an outcome&lt;/strong&gt; , and not an implementation. They're used as artefacts in planning activities, and they're specifically &lt;strong&gt;designed to be non-exhaustive&lt;/strong&gt; – containing only the information absolutely required as part of a change to a product.&lt;/p&gt;

&lt;p&gt;It's the &lt;strong&gt;responsibility of the whole team&lt;/strong&gt; to make sure our stories are high enough quality to work from, and to verify the outcomes of our work.&lt;/p&gt;

&lt;p&gt;Furthermore, user stories are an exercise in restraint. They do not exist to replace documentation. They do not exist to replace conversation and collaboration. The job is to decompose large, tough, intractable problems into small, articulated, well considered changes.&lt;/p&gt;

&lt;p&gt;User stories are meant to represent a small, atomic, valuable change to a software system and have mostly replaced traditional requirements engineering from the mid-2000s onwards.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-user-story-contents"&gt;
  &lt;/a&gt;
  The user story contents
&lt;/h1&gt;

&lt;p&gt;The most common user story format, and generally the one that should be followed by default, was popularised by the XP team at Connextra in 2001. It looks like this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As a&lt;/strong&gt; &amp;lt;persona&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I want&lt;/strong&gt; &amp;lt;business focused outcome&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So that&lt;/strong&gt; &amp;lt;reason driving the change&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accept:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;List of…&lt;/li&gt;
&lt;li&gt;Acceptance criteria…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;br&gt;
Any notes&lt;/p&gt;

&lt;p&gt;This particular format is popular because it considers both the &lt;strong&gt;desired outcome&lt;/strong&gt; from a user's perspective (the persona), and also &lt;strong&gt;includes the product thinking or justification&lt;/strong&gt; for the change as part of the "So that" clause.&lt;/p&gt;

&lt;p&gt;By adhering to the constraint of being concise, the story format forces us to decompose our work into small, deliverable chunks. It doesn't prevent us from writing "build the whole solution", but it illuminates poorly written stories very quickly.&lt;/p&gt;

&lt;p&gt;Finally, the user story contains a &lt;strong&gt;concise, non-exhaustive&lt;/strong&gt; list of acceptance criteria. Acceptance criteria list the essential qualities of the implemented work. Until all of them are met, the work isn't finished.&lt;/p&gt;

&lt;p&gt;Acceptance criteria aren't an excuse to write a &lt;strong&gt;specification by stealth&lt;/strong&gt;. They are not the output format of response documents when you're building APIs, or snippets of HTML for web interfaces. They're conversation points to verify and later accept the user story as completed.&lt;/p&gt;

&lt;p&gt;Good acceptance criteria are precise and unambiguous – anything else isn't an acceptance criteria. As an example – "must work in IE6" is better than "must work in legacy browsers", equally "must be accessible" is worse than "must adhere to all WCAG 2.0 recommendations".&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#who-and-what-is-a-valid-persona"&gt;
  &lt;/a&gt;
  Who and what is a valid persona?
&lt;/h1&gt;

&lt;p&gt;Personas represent the users of the software that you are building.&lt;/p&gt;

&lt;p&gt;This is often mistaken to mean "the customers of the business" and this fundamental misunderstanding leads to lots of unnatural user stories being rendered into reality.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Your software has multiple different types of users – even users you don't expect&lt;/strong&gt;. If you're writing a web application, you might have personas that represent "your end user", "business to business customers", or other customer architypes. In addition to this, however, you'll often have personas like "the on call engineer supporting this application", "first line support" or "the back-office user who configures this application".&lt;/p&gt;

&lt;p&gt;While they might not be your paying customers, they're all &lt;strong&gt;valid user personas&lt;/strong&gt; and users of your software.&lt;/p&gt;

&lt;p&gt;API teams often fall into the trap of trying to write user stories from the perspective of the customer of the software that is making use of their API. This is a mistake, and it's important that if you're building APIs, you write user stories from the perspective of your customers – the developers and clients that make use of your APIs to build consumer facing functionality.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-makes-a-good-user-story"&gt;
  &lt;/a&gt;
  What makes a good user story?
&lt;/h1&gt;

&lt;p&gt;While the vast majority of teams use digital tracking systems today, we should pay mind to the constraints placed upon user stories by physical cards and not over-write our stories. It's important to remember that &lt;strong&gt;user stories are meant to contain distilled information for people to work from&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As the author of a user story, you need to be the world's most aggressive editor – removing words that introduce ambiguity, removing any and all repetition and making sure the content is precise. Every single word you write in your user story should be vital and convey new and distinct information to the reader.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It's easy to misinterpret this as "user stories must be exhaustive", but that isn't the case&lt;/strong&gt;. Keep it tight, don't waffle, but &lt;strong&gt;don't try and reproduce every piece of auxiliary documentation&lt;/strong&gt; about the feature or the context inside every story.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For example:&lt;/em&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;As a Back-Office Manager
I want business events to be created that describe changes to, or events happening to, customer accounts that are of relevance to back-office management
So that those events may be used to prompt automated decisions on changing the treatment of accounts based on back-office strategies that I have configured.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Could be re-written:&lt;/em&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;As a Back-Office Manager
I want an event published when a customer account is changed
So that downstream systems can subscribe to make decisions

Accept:
- Event contains kind of change
- Event contains account identifiers
- External systems can subscribe
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In this example, edited, &lt;strong&gt;precise language makes the content of the story easier to read&lt;/strong&gt; , and moving some of the nuance to clearly articulated acceptance criteria prevent the reader having to guess what is expected.&lt;/p&gt;

&lt;p&gt;Bill West put together the mnemonic device &lt;strong&gt;INVEST&lt;/strong&gt; , standing for Independent, Negotiable, Verifiable, Estimable, Small and Testable – to describe characteristics of a good user story – but in most cases &lt;strong&gt;these qualities can be met by remembering the constraints of physical cards.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If in doubt, remember the words of Ernest Hemingway:&lt;/p&gt;

&lt;p&gt;"If I started to write elaborately, or like someone introducing or presenting something, I found that I could cut that scrollwork or ornament out and throw it away and start with the first true simple declarative sentence I had written."&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write less.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-joy-of-physical-limitations"&gt;
  &lt;/a&gt;
  The joy of physical limitations
&lt;/h1&gt;

&lt;p&gt;Despite the inevitability of a digital, and remote-first world, it's easy to be wistful for the days of user stories in their physical form, with their associated physical constraints and limitations.&lt;/p&gt;

&lt;p&gt;Stories written on &lt;strong&gt;physical index cards are constrained by the size of the cards&lt;/strong&gt; – this provides the wonderful side effect of keeping stories succinct – they cannot possibly bloat or become secret specifications because the cards literally are not big enough.&lt;/p&gt;

&lt;p&gt;The scrappy nature of index cards and handwritten stories also comes with the additional psychological benefit of making them feel like impermanent, transitory artefacts that can be torn up and rewritten at will, re-negotiated, and refined, without ceremony or loss. By contrast, &lt;strong&gt;teams can often become attached to tickets in digital systems, valuing the audit log of stories moved back and forth and back and forth from column to column as if it's more important than the work it's meant to inspire and represent&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Subtasks attached to the index-card stories on post-it notes become heavy&lt;/strong&gt; and start falling apart, items get lost, and the cards sag, prompting and encouraging teams to divide bloated stories into smaller, more granular increments. Again, the physicality of the artefact bringing its own benefit.&lt;/p&gt;

&lt;p&gt;Physical walls of stories are ever present, tactile, and real. &lt;strong&gt;Surrounding your teams with their progress helps build a kind of total immersion that digital tools struggle to replicate&lt;/strong&gt;. Columns on a wall can be physical constrained, reconfigured in the space, and visual workspaces built around the way work and tasks flow, rather than how a developer at a work tracking firm models how they presume you work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There's a joy in physical, real, artefacts of production that we have entirely struggled to replicate digitally&lt;/strong&gt;. But the world has changed, and our digital workflows can be enough, but it takes work to not become so enamoured and obsessed with the instrumentation, the progress reports, and the roll-up statistics and lose sight of the fact that user stories and work tracking systems were meant to help you complete some work, to remember that they are the map and not the destination.&lt;/p&gt;

&lt;p&gt;All the best digital workflows succeed by following the same kinds of disciplines and following the same constraints as physical boards have. Digital workflows where team members feel empowered to delete and reform stories and tickets at any point. Where team members can move, refine, and relabel the work as they learn. And where teams do what's right for their project and worry about how to report on it afterwards, find the most success with digital tools.&lt;/p&gt;

&lt;p&gt;It's always worth acknowledging that those constraints helped &lt;strong&gt;give teams focus&lt;/strong&gt; and are worth replicating.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-needs-to-be-expressed-as-a-user-story"&gt;
  &lt;/a&gt;
  What needs to be expressed as a user story?
&lt;/h1&gt;

&lt;p&gt;Lots of teams get lost in the weeds when they try to understand "what's a user story" vs "what's a technical task" vs "what's a technical debt card". Looking backwards towards the original physical origin of these artefacts it's obvious – &lt;strong&gt;all these things are the same thing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Expressing changes as user stories with personas and articulated outcomes is valuable&lt;/strong&gt; whatever the kind of change. It's a way to communicate with your team that everyone understands, and it's a good way to keep your work honest.&lt;/p&gt;

&lt;p&gt;However, don't fall into the trap of user story theatre for small pieces of work that need to happen anyway.&lt;/p&gt;

&lt;p&gt;I'd not expect a programmer to see a missing unit test and write a user story to fix it - I'd expect them to fix it. I'd not expect a developer to write a "user story" to fix a build they just watched break. &lt;strong&gt;This is essential, non-negotiable work&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As a rule of thumb, technical things that take less time to solve than write up should just be fixed rather than fudging language to artificially legitimise the work – it's already legitimate work.&lt;/p&gt;

&lt;p&gt;Every functional change should be expressed as a user story – just make sure you know who the change is for. If you can't articulate who you're doing some work for, it is often a symptom of not understanding the audience of your changes (at best) or at worst, trying to do work that needn't be done at all.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-relationship-between-user-stories-commits-and-pull-requests"&gt;
  &lt;/a&gt;
  The relationship between user stories, commits, and pull requests
&lt;/h1&gt;

&lt;p&gt;Pull request driven workflows can suffer from the unfortunate side-effect of encouraging deferred integration and driving folks towards "one user story, one pull request" working patterns. While this may work fine for some categories of change, it can be problematic for larger user stories.&lt;/p&gt;

&lt;p&gt;It's worth remembering when you establish your own working patterns that there is absolutely nothing wrong with multiple sets of changes contributing to the completion of a single user story. Committing the smallest pieces of work that doesn't break your system is safer by default.&lt;/p&gt;

&lt;p&gt;The sooner you're integrating your code, the better, regardless of story writing technique.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-makes-a-bad-user-story"&gt;
  &lt;/a&gt;
  What makes a bad user story?
&lt;/h1&gt;

&lt;p&gt;There are plenty of ways to write poor quality user stories, but here are a few favourites:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Decomposed specifications / Design-by-stealth&lt;/strong&gt; – prescriptive user stories that exhaustively list outputs or specifications as their acceptance criteria are low quality. They constrain your teams to one fixed solution and in most cases don't result in high quality work from teams.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Word Salad&lt;/strong&gt; – user stories that grow longer than a paragraph or two almost always lead to repetition or interpretation of their intent. They create work, rather than remove it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Repetition or boiler-plate copy/paste –&lt;/strong&gt; Obvious repetition and copy/paste content in user stories invents work and burdens the readers with interpretation. It's the exact opposite of the intention of a user story, which is to &lt;strong&gt;enhance clarity&lt;/strong&gt;. The moment you reach for CTRL+V/C while writing a story, you're making a mistake.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Given / Then / When or test script syntax in stories&lt;/strong&gt; – user stories do not have to be all things to all people. Test scripts, specifications or context documents have no place in stories – they don't add clarity, they increase the time it takes to comprehend requirements. While valuable, those assets should live in wikis, and test tools, respectively.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#help-all-my-stories-are-too-big-sequencing-and-splitting-stories"&gt;
  &lt;/a&gt;
  Help! All my stories are too big! Sequencing and splitting stories.
&lt;/h1&gt;

&lt;p&gt;Driving changes through user &lt;strong&gt;stories becomes trickier when the stories require design exercises&lt;/strong&gt; , or the solution in mind has some pre-requirements (standing up new infrastructure for the first time etc. It's useful to &lt;strong&gt;split and sequence stories to make larger pieces of technical work easier&lt;/strong&gt; while still being deliverable in small chunks.&lt;/p&gt;

&lt;p&gt;Imagine, for example, a user story that looked like this:&lt;/p&gt;

&lt;p&gt;As a customer&lt;br&gt;
I want to call a customer API&lt;br&gt;
To retrieve the data stored about me, my order history, and my account expiry date&lt;/p&gt;

&lt;p&gt;On the surface the story might sound reasonable, but if this were a story for a brand new API, your development team would soon start to spiral out asking questions like "how does the customer authenticate", "what data should we return by default", "how do we handle pagination of the order history" and lots of other &lt;strong&gt;valid questions that soon represent quite a lot of hidden complexity&lt;/strong&gt; in the work.&lt;/p&gt;

&lt;p&gt;In the above example, you'd probably split that work down into several smaller stories – starting with the smallest possible story you can that forms a &lt;strong&gt;tracer bullet through the process&lt;/strong&gt; that you can build on top of.&lt;/p&gt;

&lt;p&gt;Perhaps it'd be this list of stories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A story to retrieve the user's public data over an API. (Create the API)&lt;/li&gt;
&lt;li&gt;A story to add their account expiry to that response if they authenticate. (Introduce auth)&lt;/li&gt;
&lt;li&gt;A story to add the top-level order summary (totals, number of previous orders)&lt;/li&gt;
&lt;li&gt;A story to add pagination and past orders to the response&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is just illustrative, and the &lt;strong&gt;exact way you slice your stories depends heavily on context&lt;/strong&gt; – but the themes are clear – split your larger stories into smaller useful shippable parts that prove and add functionality piece by piece. Slicing like &lt;strong&gt;this removes risk from your delivery&lt;/strong&gt; , allows you to introduce technical work carried by the story that needs it first, and &lt;strong&gt;keeps progress visible&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Occasionally you'll stumble up against a story that feels intractable and inestimable. First, don't panic, it happens to everyone, breathe. Then, write down the questions you have on a card. These questions form the basis of a &lt;strong&gt;spike&lt;/strong&gt; – a small Q&amp;amp;A focused time-boxed story that doesn't deliver user-facing value. Spikes exist to help you remove ambiguity, to do some quick prototyping, &lt;strong&gt;to learn whatever you need to learn so that you can come back and work on the story that got blocked.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Spikes should always pose a question and have a defined outcome – be it example code, or documentation explaining what was learnt. They're the trick to help you when you don't seem to be able to split and sequence your work because there are too many unknowns.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-it-right"&gt;
  &lt;/a&gt;
  Getting it right
&lt;/h2&gt;

&lt;p&gt;You won't get your user stories right first time – but much in the spirit of other agile processes you'll get better at writing and refining user stories by doing it. Hopefully this primer will help you avoid trying to &lt;strong&gt;boil the ocean&lt;/strong&gt; and lead to you building &lt;strong&gt;small things, safely.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you're still feeling nervous about writing high quality user stories with your teams Henrik Kniberg and Alistair Cockburn published a workshop they called "The Elephant Carpaccio Exercise" in 2013 which will help you practice in a safe environment. You can download the worksheet here - &lt;a href="https://docs.google.com/document/d/1TCuuu-8Mm14oxsOnlk8DqfZAA1cvtYu9WGv67Yj_sSk/pub"&gt;Elephant Carpaccio facilitation guide (google.com)&lt;/a&gt;&lt;/p&gt;

</description>
      <category>agile</category>
      <category>product</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How we reduced our nodejs monorepo build time by 70%</title>
      <author>Dima Grossman</author>
      <pubDate>Mon, 10 Jan 2022 16:13:26 +0000</pubDate>
      <link>https://dev.to/scopsy/how-we-reduced-our-nodejs-monorepo-build-time-by-70-3oma</link>
      <guid>https://dev.to/scopsy/how-we-reduced-our-nodejs-monorepo-build-time-by-70-3oma</guid>
      <description>&lt;p&gt;How we reduced our nodejs monorepo build time by 70%&lt;/p&gt;

&lt;p&gt;At &lt;a href="https://github.com/notifirehq/notifire"&gt;Notifire&lt;/a&gt;, we use a monorepo to manage our 24 libraries and apps. There are many debates over whether you should use a monorepo or a poly-repo. For us, visibility, code sharing, standardization, easier refactoring, and a few other reasons were the critical factors for choosing this approach for our open-source notification infrastructure project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR;
&lt;/h2&gt;

&lt;p&gt;We migrated from &lt;a href="https://classic.yarnpkg.com/lang/en/docs/workspaces/"&gt;yarn workspaces&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/lerna/lerna"&gt;lerna&lt;/a&gt; to &lt;a href="https://pnpm.io/"&gt;PNPM&lt;/a&gt; and &lt;a href="https://nx.dev"&gt;nx.dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8QZzQB91--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vx11afhwbk4abnqpqbsm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8QZzQB91--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vx11afhwbk4abnqpqbsm.png" alt="Image description" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-bigger-the-slower"&gt;
  &lt;/a&gt;
  The bigger, the slower
&lt;/h2&gt;

&lt;p&gt;With all the advantages, there are a few drawbacks to using monorepos. We noticed a particular drawback when scaling the number of packages and amount of code in each one: The &lt;strong&gt;time&lt;/strong&gt; it takes to bootstrap the project and then build any packages within. So a typical GitHub action for a service would run anywhere between 11 to 30 minutes. And that's for each time a PR was created or a code was pushed to remote. &lt;/p&gt;

&lt;p&gt;More than that, installing a package locally with &lt;code&gt;yarn install&lt;/code&gt; could take around 5 minutes to install and build all the dependencies.&lt;/p&gt;

&lt;p&gt;This amount of time spent bootstrapping and building reduced the developer experience and wasted collectively so much talented people's time. Being an open-source project with a growing number of contributors, this was unacceptable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging-the-slowest-tasks"&gt;
  &lt;/a&gt;
  Debugging the slowest tasks
&lt;/h2&gt;

&lt;p&gt;Inspecting a typical 12 minutes GitHub action, it was clear that two specific steps took almost 70-80% of the overall time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;yarn install&lt;/strong&gt; - takes 5-6 minutes&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;yarn build:{package}&lt;/strong&gt; - could take from 3-6 minutes to build the selected package and its dependencies.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#migrating-from-yarn-workspaces-to-pnpm"&gt;
  &lt;/a&gt;
  Migrating from yarn workspaces to PNPM
&lt;/h2&gt;

&lt;p&gt;PNPM is a fast, disk space-efficient package manager(as stated on their website), and from some of the &lt;a href="https://pnpm.io/benchmarks"&gt;benchmarks&lt;/a&gt;, there was a massive improvement in install time against &lt;code&gt;yarn workspaces&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Moving from &lt;code&gt;yarn install&lt;/code&gt; that took around 6 minutes, the migration to pnpm was effortless: Just adding a &lt;code&gt;pnpm-workspace.yaml&lt;/code&gt; to the project's root and running &lt;code&gt;pnpm install&lt;/code&gt;, that's all. The symlinks and dependencies for each package we're efficiently installed, in... wait for it... &lt;strong&gt;just 1.5 minutes&lt;/strong&gt;! And that's without any cache at all! After PNPM caches the majority of the dependencies, it takes &lt;strong&gt;less than 40 seconds&lt;/strong&gt; to build and install the dependencies from the cached store.&lt;/p&gt;

&lt;p&gt;Reducing ~4 minutes from the bootstrap time for every CI run and locally for first-time contributors is a HUGE win. But wait, we can do even better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#from-lerna-to-nxdev"&gt;
  &lt;/a&gt;
  From Lerna to NX.dev
&lt;/h2&gt;

&lt;p&gt;After seeing the &lt;a href="https://dev.toTurborepo%20Demo%20and%20Walkthrough%20(High-Performance%20Monorepos)"&gt;Turborepo demo&lt;/a&gt; by vercel, I was intrigued by their distributed caching mechanism. With such a mechanism, we can reuse the already built packages by other maintainers and download the &lt;code&gt;dist&lt;/code&gt; assets instead of rebuilding them each time. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;turborepo&lt;/strong&gt; vs &lt;strong&gt;nx.dev&lt;/strong&gt;?&lt;br&gt;
After brief research, we decided to go with nx.dev for multiple reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Maturity&lt;/strong&gt; - nx was in the market for a while now, and they have a pretty big community around them.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Performance&lt;/strong&gt; - Seeing some of the &lt;a href="https://github.com/vsavkin/large-monorepo"&gt;benchmarks&lt;/a&gt; nx looks like a faster build system overall.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our community member &lt;a href="https://github.com/nishit-g"&gt;nishit-g&lt;/a&gt; took over the open GitHub &lt;a href="https://github.com/notifirehq/notifire/issues/164"&gt;issue&lt;/a&gt; and quickly after we had a PR open, the results astonished us: &lt;strong&gt;30 seconds&lt;/strong&gt; the building step! (Instead of the previous 3-6 minutes building a specific set of packages).&lt;/p&gt;

&lt;p&gt;After implementing the nx.cloud for distributed caching, the entire 24 packages take less than &lt;strong&gt;5 seconds&lt;/strong&gt; when fully cached building. But even without being fully cached due to the intelligent parallelism nx performs and builds our target package in less than &lt;strong&gt;30 seconds&lt;/strong&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Reducing our build times from 12+ minutes to around 3 minutes significantly impacts the developer experience of our maintainers. It also reduces the feedback loop from creating a PR to running our test suite to merging the feature. You can check the final configuration on our &lt;a href="https://github.com/notifirehq/notifire"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;HUGE Kudos to &lt;a href="https://github.com/nishit-g"&gt;nishit-g&lt;/a&gt; for migrating us from Lerna to NX. Check him out on his &lt;a href="https://twitter.com/sh1nXan"&gt;Twitter&lt;/a&gt; as well!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>opensource</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Perulangan Di Vue Js</title>
      <author>MedanInCode</author>
      <pubDate>Mon, 10 Jan 2022 16:07:21 +0000</pubDate>
      <link>https://dev.to/medan_in_code/perulangan-di-vue-js-1j0a</link>
      <guid>https://dev.to/medan_in_code/perulangan-di-vue-js-1j0a</guid>
      <description>&lt;p&gt;Tutorial kali ini akan membahas bagaimana menggunakan perulangan di &lt;strong&gt;vue&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Untuk melakukan ini di &lt;strong&gt;vue&lt;/strong&gt; kita menggunakan directive &lt;strong&gt;v-for&lt;/strong&gt;.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#menampilkan-data-array"&gt;
  &lt;/a&gt;
  Menampilkan data array
&lt;/h5&gt;

&lt;p&gt;Misalnya kita punya data array nama-nama siswa&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;siswa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;budi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;andi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;caca&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;atau jika menggunakan struktur vue akan seperti ini.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;siswa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;budi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;andi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;caca&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Data tersebut akan kita tampilkan menggunakan &lt;strong&gt;v-for&lt;/strong&gt;.Maka template vue nya akan menjadi seperti ini&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"nama in siswa"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  {{ nama }}
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Kita menggunakan html list untuk menampilkan nama siswa.Bisa dilihat kita melakukan perulangan dengan variable &lt;strong&gt;siswa&lt;/strong&gt; dan &lt;strong&gt;nama&lt;/strong&gt; sebagai alias untuk item satuan.Kemudian karena ini hanya array kita langsung mencetak dengan seperti dibawah ini.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{{ nama }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rEEqCtnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2z6sz5f2o4hjkjd810pc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rEEqCtnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2z6sz5f2o4hjkjd810pc.png" alt="Perulangan Di Vue Js 1" width="597" height="84"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kita juga bisa menampilkan index dari masing-masing data tersebut dengan menambahkan kode seperti dibawah.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"(nama,index) in siswa"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   {{index+1}}.{{ nama }}
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Index diawali dari 0 jadi kita menambah 1 ketika mencetak.Maka akan keluar hasil seperti dibawah ini.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9VUvwMie--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/apwcf4fza4285ull7m2i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9VUvwMie--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/apwcf4fza4285ull7m2i.png" alt="Perulangan Di Vue Js 2" width="595" height="74"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#menampilkan-data-object"&gt;
  &lt;/a&gt;
  Menampilkan data object
&lt;/h5&gt;

&lt;p&gt;Sebenarnya cara sama saja menampilkan data object ataupun array dengan &lt;strong&gt;v-for&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jika kita punya data seperti dibawah ini.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;siswa&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;nama&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;budi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;kelas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;XII-A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;jurusan&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;RPL&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Kode template sama saja&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"value in siswa"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   {{ value }}
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Kita juga bisa menampilkan key dari object sebagimana index dari array sebelumnya.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"(value,key) in siswa"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   {{key}} : {{ value }}
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Maka akan mendapatkan hasil seperti dibawah ini.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pQLHfNdg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nde4w1cmadaui1oem63u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pQLHfNdg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nde4w1cmadaui1oem63u.png" alt="Perulangan Di Vue Js 3" width="459" height="78"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Di object kita bisa menambahkan satu parameter lagi yaitu index sehingga menjadi seperti ini.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"(value,key,index) in siswa"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{index+1}}. {{key}} : {{ value }}
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eLvtjWba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yf3e6h9chupgw16l86sv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eLvtjWba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yf3e6h9chupgw16l86sv.png" alt="Perulangan Di Vue Js 4" width="458" height="75"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#menampilkan-data-collection"&gt;
  &lt;/a&gt;
  Menampilkan Data Collection
&lt;/h5&gt;

&lt;p&gt;Jika kita mendapatkan data dari &lt;strong&gt;api&lt;/strong&gt; backend,seringkali data yang didapatkan berbentuk &lt;strong&gt;collection&lt;/strong&gt; atau &lt;strong&gt;array object&lt;/strong&gt; atau berformat data &lt;strong&gt;JSON&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Misalnya seperti data dibawah.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;siswa&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;nama&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;budi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;kelas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;XII-A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;jurusan&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;RPL&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;nama&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;andi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;kelas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;XII-B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;jurusan&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;TKJ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;nama&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;caca&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;kelas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;XII-A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;jurusan&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;RPL&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Kita akan menampilkan kedalam html tabel.Maka kode &lt;strong&gt;v-for&lt;/strong&gt; untuk table kurang lebih seperti dibawah ini.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;border=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;No&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Nama&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Kelas&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Jurusan&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;tr&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"(data,index) in siswa"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{index+1}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{data.nama}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{data.kelas}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{data.jurusan}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;        
  &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Kenapa kita meletakkan &lt;strong&gt;v-for&lt;/strong&gt; di &lt;strong&gt;tr&lt;/strong&gt;,karena &lt;strong&gt;tr&lt;/strong&gt; lah yang akan kita looping sebanyak data siswa.&lt;strong&gt;data.nama&lt;/strong&gt; berarti kita memanggil key &lt;strong&gt;nama&lt;/strong&gt; dari variabel &lt;strong&gt;data&lt;/strong&gt; yang sudah jadi objek dari perulangan &lt;strong&gt;siswa&lt;/strong&gt;.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#attribut-vbindkey"&gt;
  &lt;/a&gt;
  Attribut v-bind:key
&lt;/h5&gt;

&lt;p&gt;Attribut ini bisa juga dipanggil hanya dengan &lt;strong&gt;:key&lt;/strong&gt;.Jika kita menggunakan &lt;strong&gt;v-for&lt;/strong&gt; maka vue menyarankan kita harus menggunakan attribute ini,di IDE apalagi yang menggunakan &lt;strong&gt;syntax linter&lt;/strong&gt; ,akan menunjukan warning di baris kodenya jika kita tidak menambahkan &lt;strong&gt;key&lt;/strong&gt; saat pakai &lt;strong&gt;v-for&lt;/strong&gt;.Attribute ini berperan sebagai penanda unik ,kayak primary key lah kalau di database,agar vue bisa melakukan tracking perubahan setiap tag html saat dirender.&lt;/p&gt;

&lt;p&gt;Asal dari &lt;strong&gt;:key&lt;/strong&gt; ini bisa dari index dari array,key atau properti dari object.&lt;/p&gt;

&lt;p&gt;Contohnya :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"(value,index) in siswa"&lt;/span&gt; &lt;span class="na"&gt;v-bind:key=&lt;/span&gt;&lt;span class="s"&gt;"index"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   {{index+1}}. {{ value }}
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;atau jika kita punya object yang memiliki attribute unik.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;siswa&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;nama&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;budi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;nama&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;andi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Maka kode htmlnya bisa seperti dibawah ini.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"(data,index) in siswa"&lt;/span&gt; &lt;span class="na"&gt;v-bind:key=&lt;/span&gt;&lt;span class="s"&gt;"data.id"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   {{index+1}}. {{ data.nama }}
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sampai sini dulu pembahasan mengenai penggunaan &lt;strong&gt;v-for&lt;/strong&gt;,silahkan bertanya dibawah jika ada yang kurang dimengerti.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>vue</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Handling Errors in Remix: A Guide.</title>
      <author>Abdur-Rahman</author>
      <pubDate>Mon, 10 Jan 2022 16:02:46 +0000</pubDate>
      <link>https://dev.to/shafspecs/handling-errors-in-remix-a-guide-5h3p</link>
      <guid>https://dev.to/shafspecs/handling-errors-in-remix-a-guide-5h3p</guid>
      <description>&lt;p&gt;Errors are an embedded part of our lifecycle in programming and like it or not, you run into plenty. With Remix 💿, things have been simplified a great deal but, by how much? Welcome to Error handling in Remix where we would cover how to address common errors we run into and how to use Remix to handle them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#404-errors-amp-similar-"&gt;
  &lt;/a&gt;
  &lt;u&gt;404 Errors &amp;amp; Similar 🚫:&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;One of the most common errors you would see when working with remix is the 404 error, thrown by the server when the specified route isn't found. There are two reasons this can happen in Remix: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The URL requested by the user isn't found on the server.&lt;/li&gt;
&lt;li&gt;Your &lt;code&gt;loader&lt;/code&gt; function didn't find any data.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Remix handles the misplaced route issue well without needing you to do anything (👏) but you would have to go about handling the second one yourself. But don't worry, Remix got you covered most of the way!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HhRU2TJm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8i6q4tzy3ybnqmle7uvo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HhRU2TJm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8i6q4tzy3ybnqmle7uvo.png" alt="Error 404" width="880" height="353"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Default Error Page of a misplaced route&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's inspect some code and get our hands greasy. Let's go over what a "loader" is in a jiffy. So, a loader function is a function that will be called on the server before rendering happens to provide data to the route. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Each route has their loader, so each route handles their calls, responses, errors independently and asynchronously&lt;/em&gt; 🔥.&lt;/p&gt;

&lt;p&gt;This function is only ever run on the server. On the initial server render it will provide data to the HTML document. On navigations in the browser, Remix will call the function via fetch. This means you can talk directly to your database, use server only API secrets, etc. A seperate article would be coming out soon on the server-side things of Remix, this article would also be updated to include it for further info.&lt;/p&gt;

&lt;p&gt;Throwing an error from a loader can be handled from inside the loader itself, take the following as an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Not Found&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a simple loader function where we get a post's index from a database (&lt;em&gt;somewhere, I hope&lt;/em&gt;) and we return it to be consumed in that route. It is very possible that page won't be found cause our &lt;code&gt;params&lt;/code&gt; argument was a hoax and so, nothing was fetched. In that case, we throw an error of status of &lt;code&gt;404&lt;/code&gt;. &lt;em&gt;Wait, just that?&lt;/em&gt;. Not really, when the error is thrown, it is "intercepted" by a function in the Remix's app route called &lt;code&gt;CatchBoundary&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is simply a function that runs when a react component or a loader throws an error (&lt;em&gt;Nice planning ahead, Remix&lt;/em&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useCatch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remix&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CatchBoundary&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;caught&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCatch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Caught&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;caught&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;caught&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/code&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/pre&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The catch boundary extends beyond just &lt;code&gt;404&lt;/code&gt; errors, &lt;code&gt;403&lt;/code&gt;, &lt;code&gt;402&lt;/code&gt; just to mention a few other errors are also handled by the CatchBoundary. Now this is very awesome cause it means we can handle the different errors with a wanky style and still have them handled by one relatively short function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CatchBoundary&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;caught&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCatch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;caught&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Oops&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nx"&gt;Looks&lt;/span&gt; &lt;span class="nx"&gt;like&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;tried&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;visit&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;access&lt;/span&gt;
          &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Oops&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nx"&gt;Looks&lt;/span&gt; &lt;span class="nx"&gt;like&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;tried&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;visit&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;does&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;exist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;caught&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;caught&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Document&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;caught&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;caught&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="nx"&gt;You&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;x27&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;re&lt;/span&gt; &lt;span class="nx"&gt;alone&lt;/span&gt; &lt;span class="nx"&gt;here&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mt-4 text-white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="nx"&gt;Go&lt;/span&gt; &lt;span class="nx"&gt;back&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;caught&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;           &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Document&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Too much &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s 😅&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take this somewhat long code snippet (&lt;em&gt;with no styling&lt;/em&gt;), we make use of a &lt;code&gt;switch&lt;/code&gt; statement to loop through the errors (it can be extended and customized easily too) and return something based on the error. I used 404 error as the scapegoat in this section but the same applies to similar errors that occur in this manner, either an error thrown from the server or a route or component linking, etc.&lt;/p&gt;

&lt;p&gt;We also notice a &lt;code&gt;useCatch()&lt;/code&gt; function lurking in the corner, well, it's a function for simply handling the Error object thrown and allowing us to destructure (I prefer the word, &lt;em&gt;dissect&lt;/em&gt;) the Error object.&lt;/p&gt;

&lt;p&gt;But that isn't just the end of it, remember I &lt;a href="https://dev.to/shafspecs/intro-to-remix-41l7"&gt;said&lt;/a&gt; Remix routes can handle themselves independently including Errors without bringing down the entire page/site? Well, turns out it's with CachBoundary too. All that needs to happen is for the component to actually contain it's own CatchBoundary function and voila! You are handling it &lt;strong&gt;in&lt;/strong&gt; that function. Take the first code snippet we wrote, we can add it's own CatchBounday to get an error in that component only:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Not Found&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CatchBoundary&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useParams&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;We&lt;/span&gt; &lt;span class="nx"&gt;couldn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;t find that page!&amp;lt;/h2&amp;gt;
      &amp;lt;Form action="../create"&amp;gt;
        &amp;lt;button
          type="submit"
          name="Post Index"
          value={param.index}
        &amp;gt;
          Create {param.index}?
        &amp;lt;/button&amp;gt;
      &amp;lt;/Form&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default function Page() {
  return &amp;lt;PageView page={useLoaderData()} /&amp;gt;;
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To straighten some new terms up there, &lt;code&gt;useParams()&lt;/code&gt; allow us to access the parameters of our current URL and we used the same function as before only added a Catch Boundary to the route.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thrown errors are always handled by their nearest CatchBoundary function&lt;/strong&gt;, so you can dynamically choose to shut down a whole section of a page or keep the page running, your call! There you go, customization in your hands, browser is happy, user is happy, developer is happy and SEO is happy, and no one gets grumpy. Everyone is happy. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unforseen-surprise-errors-"&gt;
  &lt;/a&gt;
  &lt;u&gt;Unforseen, Surprise Errors 💥:&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;Errors like this sometimes happen, thrown from the server or the browser or even a &lt;code&gt;loader&lt;/code&gt;, and your site goes puff. In Remix, these nasty errors are caught by Remix 🥳 and then, it's up to you to deal with them. So, let's go deal with 'em errors.&lt;/p&gt;

&lt;p&gt;Remix has a function called &lt;code&gt;ErrorBoundary&lt;/code&gt; that is displayed when the an uncaught error is thrown. It has &lt;em&gt;some&lt;/em&gt; principles of &lt;code&gt;CathBoundary&lt;/code&gt; function in the sense that the error UI would be displayed in the nearest &lt;code&gt;ErrorBoundary&lt;/code&gt; and the rest of the site would keep running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Something&lt;/span&gt; &lt;span class="nx"&gt;weird&lt;/span&gt; &lt;span class="nx"&gt;happened&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/title&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Meta&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Links&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/head&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Your Error UI comes here */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Scripts&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/body&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/html&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The error that is thrown would be caught here and the ErrorBoundary function would be mounted in it's place. If for whatever reason that I can't explain, your button component throws an uncaught server error, the nearest error boundary would catch it and render itself in place of the component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SE4A8IAn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zgjc8kuici1cyftrjup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SE4A8IAn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zgjc8kuici1cyftrjup.png" alt="Image description" width="612" height="477"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Take a look at this image, we are on the route: &lt;a href="http://example.com/sales/invoices/102000"&gt;http://example.com/sales/invoices/102000&lt;/a&gt;. Our &lt;code&gt;102000&lt;/code&gt; error caught an unexpected error. The invoices route has an ErrorBoundary function that does the catching, renders itself and Voila! Our site is still up and the error has been handled.&lt;/p&gt;




&lt;p&gt;That is the end of this article, if you guys want to get active with Remix, why not start now? It's as easy as spooling up a codesandbox, no need for preconfiguration and setup. Tell me what you guys think in the comments or if you have any addition or correction, not only would you improve yourself, but benefit others. Till then, like always, I wish you guys a happy learning experience and happy reading 👋.&lt;/p&gt;

</description>
      <category>remix</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Weird behavior of javaScript you should know!!</title>
      <author>Abhinav Kale</author>
      <pubDate>Mon, 10 Jan 2022 15:53:26 +0000</pubDate>
      <link>https://dev.to/kale_abhinav/weird-behavior-of-javascript-you-should-know-4056</link>
      <guid>https://dev.to/kale_abhinav/weird-behavior-of-javascript-you-should-know-4056</guid>
      <description>&lt;p&gt;We know that javaScript sometimes behaves weird as compare to other programming languages, but initially it was design only to make web pages.&lt;/p&gt;

&lt;p&gt;But now in today's world, we can do so many things using javaScript with help of other libraries/framework like react, angular.&lt;/p&gt;

&lt;p&gt;This weird behaviour is not a fault of javaScript, this is how the language was design in the initial phase. So we should understand why this behaviour happens, so we can take primitive actions based on it.(If we are intending that this should not happen)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vtOxqWll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grjvghciy63brggmle93.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vtOxqWll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grjvghciy63brggmle93.png" alt="Image1 description" width="681" height="259"&gt;&lt;/a&gt;&lt;br&gt;
So here, we make one object calling its name &lt;strong&gt;weirdObject&lt;/strong&gt; which has property &lt;code&gt;obj_id&lt;/code&gt; and &lt;code&gt;obj_name&lt;/code&gt; which is further divided into an object which has property &lt;code&gt;obj_title&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we run our code with node we get the output as the object considering &lt;code&gt;obj_id&lt;/code&gt; and &lt;code&gt;obj_name&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nrPmZmrp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdmbkaa2ucxn0o48nqni.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nrPmZmrp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdmbkaa2ucxn0o48nqni.png" alt="Image2 description" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, if we want to change the &lt;code&gt;obj_id&lt;/code&gt; of the object we can do that in javaScript inspite of using &lt;strong&gt;const&lt;/strong&gt; keyword.(It is allowed to change inside property of javaScript whether we use const or not)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LKPl4xwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yng6lxqi137q4626pbxu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LKPl4xwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yng6lxqi137q4626pbxu.png" alt="Image3 description" width="880" height="441"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To change this behaviour, we can use &lt;strong&gt;Object.freeze()&lt;/strong&gt; method which freezes an object. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e2LbOHI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjwoyuhbhw174htvufna.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e2LbOHI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjwoyuhbhw174htvufna.png" alt="Image4 description" width="880" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here the value of &lt;code&gt;obj_id&lt;/code&gt; not changed. A frozen object can no longer be changed; freezing an object prevents new properties from being added to it, existing properties from being removed, prevents changing the enumerability, configurability, and writability of existing properties, and also prevents the values of existing properties from being changed.&lt;/p&gt;

&lt;p&gt;But, what if we want to change value of the &lt;code&gt;obj_title&lt;/code&gt; from &lt;strong&gt;"My Object"&lt;/strong&gt; to &lt;strong&gt;"This Object"&lt;/strong&gt; which is present inside &lt;code&gt;obj_name&lt;/code&gt; object of weirdObject after using &lt;code&gt;Object.freeze()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Let's see..&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aflh74v7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/msjc06wjx85zpqollh42.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aflh74v7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/msjc06wjx85zpqollh42.png" alt="Image5 description" width="880" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yes, we can do that..!! This is called &lt;strong&gt;Shallow freeze&lt;/strong&gt; which only applies to the immediate properties of the object itself and will prevent future property addition, removal or value re-assignment operations only on object. If the value of those properties are objects themselves, those objects are not frozen and may be the target of property addition, removal or value re-assignment operations.&lt;/p&gt;

&lt;p&gt;To make object immutable, we will have to add explicit function which will check is wheather the object has another object present inside it.&lt;/p&gt;

&lt;p&gt;Hope this odd behaviour of javaScript information helps you.&lt;br&gt;
Thanks for reading and happy coding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>memory game | react | next js | javascript | css | html
</title>
      <author>shAtud</author>
      <pubDate>Mon, 10 Jan 2022 15:43:33 +0000</pubDate>
      <link>https://dev.to/shatud/memory-game-react-next-js-javascript-css-html-4oef</link>
      <guid>https://dev.to/shatud/memory-game-react-next-js-javascript-css-html-4oef</guid>
      <description>&lt;p&gt;memory game | react | next js | javascript | css | html&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=BkTyORDsiWE"&gt;https://www.youtube.com/watch?v=BkTyORDsiWE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;if you liked our content please subscribe to the channel ,leave a nice comment and smash the like button ...thanks for watching&lt;/p&gt;

</description>
      <category>react</category>
      <category>nextjs</category>
      <category>javascript</category>
      <category>tailwindcss</category>
    </item>
  </channel>
</rss>
