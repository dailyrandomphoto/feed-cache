<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Create GitHub Actions Templates - New Composite Actions Feature Explored</title>
      <author>Davide 'CoderDave' Benvegn√π</author>
      <pubDate>Tue, 21 Sep 2021 01:15:45 +0000</pubDate>
      <link>https://dev.to/github/create-github-actions-templates-new-composite-actions-feature-4ibk</link>
      <guid>https://dev.to/github/create-github-actions-templates-new-composite-actions-feature-4ibk</guid>
      <description>&lt;p&gt;While I've covered the basics of the Composite Run Steps Actions in this other &lt;a href="https://dev.to/n3wt0n/github-composite-actions-nest-actions-within-actions-3e5l"&gt;post&lt;/a&gt; and &lt;a href="https://youtu.be/OqJyrZUUGTw"&gt;video&lt;/a&gt;, &lt;em&gt;and therefore I will not go too in depth in those here&lt;/em&gt;, today I will show you one of the most important new features in GitHub Actions in the last 6 months, at least in my opinion: &lt;strong&gt;The possibility to use other Actions in a Composite Action&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4lH_7b5lmjo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/4lH_7b5lmjo"&gt;Link to the video: https://youtu.be/4lH_7b5lmjo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-problem-and-the-solution"&gt;
  &lt;/a&gt;
  The Problem and The Solution
&lt;/h3&gt;

&lt;p&gt;Until now, Composite Actions could use only scripts, either inline in the YAML or in separate files. And this of course was pretty limiting.&lt;/p&gt;

&lt;p&gt;But now they can instead &lt;strong&gt;reference other Actions as well&lt;/strong&gt;, making them the de-facto &lt;strong&gt;equivalent of templates&lt;/strong&gt; in Azure Pipelines, Jenkins, and so on so forth.&lt;/p&gt;

&lt;p&gt;And of course this also makes it easy to reduce duplication in your workflows, and it is perfect for repetitive tasks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-scenario"&gt;
  &lt;/a&gt;
  The Scenario
&lt;/h3&gt;

&lt;p&gt;Alright, let's see how we can create Composite Actions that use other Actions, and how to use them. For this example, I wanted to create &lt;strong&gt;something actually useful&lt;/strong&gt;. I decided to go with templatizing the Build and Push of a Docker image, which is something I do all the time in my workflows, and represent a &lt;strong&gt;recurrent set of tasks&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-composite-action-with-actions"&gt;
  &lt;/a&gt;
  Create a Composite Action with Actions
&lt;/h3&gt;

&lt;p&gt;First think we have to do is creating an &lt;code&gt;action.yml&lt;/code&gt; file in the root of a public repo, which will become the "&lt;em&gt;source&lt;/em&gt;" for our Composite Action.&lt;/p&gt;

&lt;p&gt;Next, we can add some metadata.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Publish&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Docker"&lt;/span&gt;
&lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Build&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;container&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;image&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;and&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Pushes&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;it&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Docker&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;registry"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These two lines just add a name and the description, so we know what our Action does.&lt;/p&gt;

&lt;p&gt;Next, we need some inputs. We'd need for example the Docker registry username and password, the image name, tags, etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;registry_username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Username&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;for&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;image&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;registry"&lt;/span&gt;
    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;registry_password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Password&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;for&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;image&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;registry"&lt;/span&gt;
    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;image_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Name&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;of&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;the&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;image&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;push"&lt;/span&gt;
    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;How&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tag&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;the&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;image.&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Default:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;latest"&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see we can set the inputs as required, or leave them optional (as the tag).&lt;/p&gt;

&lt;p&gt;Last part before we can add the actual task, we need to let GitHub know this is a metadata file for composite actions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;runs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;using&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;composite"&lt;/span&gt;
  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#add-the-tasks"&gt;
  &lt;/a&gt;
  Add the tasks
&lt;/h3&gt;

&lt;p&gt;Alright, we are ready to add our task. How? Well, exactly in the same way you'd do in a normal Actions workflow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup BuildX&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/setup-buildx-action@v1&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Login to the Registry&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/login-action@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{inputs.registry_username}}&lt;/span&gt;
          &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{inputs.registry_password}}&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set the tag&lt;/span&gt;
        &lt;span class="na"&gt;shell&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bash&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;if [ -z "${{inputs.tag}}" ]&lt;/span&gt;
          &lt;span class="s"&gt;then&lt;/span&gt;
            &lt;span class="s"&gt;echo "final_tag=latest" &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span&gt;
          &lt;span class="s"&gt;else&lt;/span&gt;
            &lt;span class="s"&gt;echo "final_tag=${{inputs.tag}}" &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span&gt;
          &lt;span class="s"&gt;fi&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build and Push the Image&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/build-push-action@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
          &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{inputs.registry_username}}/${{inputs.image_name}}:${{env.final_tag}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only difference is that you'd need to add the Actions references (&lt;em&gt;for example &lt;code&gt;uses: docker/setup-buildx-action@v1&lt;/code&gt;&lt;/em&gt;) manually because there is no marketplace pane on the right side of the screen like you'd have in the Actions workflow.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÑπÔ∏è Suggestion: if you don't remember all the Actions names, you can compose your tasks in the normal workflow editor, and then copy them over into the Composite Action&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another thing worth noting in the YAML is how you use the value of the inputs: &lt;code&gt;${{ inputs.image_name }}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And that's basically all you need to do for creating a Composite Action that uses Actions in it. Just commit and you're good to go.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üëÄ Check out the &lt;a href="https://github.com/n3wt0n/CompositeAction"&gt;n3wt0n/CompositeAction repo&lt;/a&gt; to see the whole YAML&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-the-composite-action-in-your-workflow"&gt;
  &lt;/a&gt;
  Use the Composite Action in your Workflow
&lt;/h3&gt;

&lt;p&gt;Let's see now how to use our action in a normal workflow.&lt;/p&gt;

&lt;p&gt;All you have to do is referencing that Composite Action using the username (or organization account) and the name of the repo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build and Push the image&lt;/span&gt;
  &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;n3wt0n/CompositeAction@main&lt;/span&gt;
  &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;registry_username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.REGISTRY_USERNAME}}&lt;/span&gt;
    &lt;span class="na"&gt;registry_password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.REGISTRY_PASSWORD}}&lt;/span&gt;
    &lt;span class="na"&gt;image_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-awesome-app&lt;/span&gt;
    &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$GITHUB_RUN_NUMBER&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the YAML above, in the &lt;code&gt;uses&lt;/code&gt; you can see that I reference my Composite Action using my &lt;strong&gt;account name&lt;/strong&gt; (&lt;code&gt;n3wt0n&lt;/code&gt;), and the &lt;strong&gt;repo name&lt;/strong&gt; (&lt;code&gt;CompositeAction&lt;/code&gt;). Plus, I need to use a &lt;strong&gt;version&lt;/strong&gt;. In this case I used &lt;code&gt;main&lt;/code&gt;, which means that my workflow will always use the latest version of the Composite Action available on the main branch. If you want to have a &lt;strong&gt;&lt;em&gt;static version&lt;/em&gt;&lt;/strong&gt; instead, you'd have to &lt;strong&gt;create a tag on your repo&lt;/strong&gt; and use that instead of the branch name to version your Composite Action.&lt;/p&gt;

&lt;p&gt;Lastly, as you can see you can pass your input values using the &lt;code&gt;with&lt;/code&gt; keyword&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üëÄ Check out the &lt;a href="https://github.com/n3wt0n/ActionsTest/blob/main/.github/workflows/compositeActionUse.yml"&gt;n3wt0n/ActionsTest repo&lt;/a&gt; to see the whole YAML&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#the-log"&gt;
  &lt;/a&gt;
  The Log
&lt;/h3&gt;

&lt;p&gt;Last thing worth mentioning is how the whole thing is printed out in the logs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wHde_PyY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrhgv9r43fia6vy8paqu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wHde_PyY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrhgv9r43fia6vy8paqu.png" alt="Logs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we have the &lt;code&gt;Build and Push the image&lt;/code&gt; task (which is how I called the step that uses my Composite Action) but &lt;strong&gt;we don't have the details of the steps in the Composite Action itself&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We have however the logs of the steps in the actual log:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Su-GQKcL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qu6v4r22ixuun8k77m6u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Su-GQKcL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qu6v4r22ixuun8k77m6u.png" alt="Logs Expanded"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;As you can see, this new capability of the Composite Actions is very useful for &lt;strong&gt;simplifying repetitive tasks&lt;/strong&gt; and to make sure everything needed is included in your workflow with just a single reference.&lt;/p&gt;

&lt;p&gt;As I've mentioned before this feature is for me one of the best new additions to GitHub Actions in the past few months. Do you agree with me? Let me know in the comments below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1r1kYO08--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7iqa30qs1qhk4i5rn76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1r1kYO08--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7iqa30qs1qhk4i5rn76.png" alt="Roadmap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also think that when it would be possible to use custom actions from internal and private repositories, which is a feature that is actually planned for the last quarter of this year, as you can see here on the GitHub's public roadmap, this will be even more powerful. Let me know in the comment section below how do you use or plan to use the Composite Actions.&lt;/p&gt;

&lt;p&gt;You may also want to watch &lt;a href="https://youtu.be/OqJyrZUUGTw"&gt;this video&lt;/a&gt;, in which I talk about all the basics of the Composite Run Steps Actions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; üöÄ for more content:&lt;/p&gt;

&lt;p&gt;üìΩ &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
‚òï &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
üíñ &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
üìß &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
üåê &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
üëï &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
üë¶üèª &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
üê±‚Äçüíª &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
üë≤üèª &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
üë¥üèª &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
üîâ &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4lH_7b5lmjo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>devops</category>
      <category>actions</category>
      <category>cicd</category>
    </item>
    <item>
      <title>React dialog box library</title>
      <author>Abod Micheal (he/him)</author>
      <pubDate>Tue, 21 Sep 2021 00:08:39 +0000</pubDate>
      <link>https://dev.to/abodmicheal/react-dialog-box-library-b1b</link>
      <guid>https://dev.to/abodmicheal/react-dialog-box-library-b1b</guid>
      <description>&lt;h1&gt;
  &lt;a href="#reactjsdialogbox"&gt;
  &lt;/a&gt;
  react-js-dialog-box
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;simple react.js modal box&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/react-js-dialog-box"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GXJBbCdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/react-js-dialog-box.svg" alt="NPM"&gt;&lt;/a&gt; &lt;a href="https://standardjs.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--atFcFrlw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/code_style-standard-brightgreen.svg" alt="JavaScript Style Guide"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;
  &lt;a href="https://i.giphy.com/media/9AhXVa4v9eef7avcWl/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/9AhXVa4v9eef7avcWl/giphy.gif"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  Install
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; react-js-dialog-box
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ReactDialogBox&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-js-dialog-box&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-js-dialog-box/dist/index.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;openBox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;closeBox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;openBox&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Open ReactDialogBox &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReactDialogBox&lt;/span&gt;
              &lt;span class="na"&gt;closeBox&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeBox&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="na"&gt;modalWidth&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'60%'&lt;/span&gt;
              &lt;span class="na"&gt;headerBackgroundColor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'red'&lt;/span&gt;
              &lt;span class="na"&gt;headerTextColor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'white'&lt;/span&gt;
              &lt;span class="na"&gt;headerHeight&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'65'&lt;/span&gt;
              &lt;span class="na"&gt;closeButtonColor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'white'&lt;/span&gt;
              &lt;span class="na"&gt;bodyBackgroundColor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'white'&lt;/span&gt;
              &lt;span class="na"&gt;bodyTextColor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'black'&lt;/span&gt;
              &lt;span class="na"&gt;bodyHeight&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'200px'&lt;/span&gt;
              &lt;span class="na"&gt;headerText&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Hearder '&lt;/span&gt;
            &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Dialog Content&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ReactDialogBox&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D7XUNib0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/abodmicheal/react-js-dialog-box/main/dialog-library.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D7XUNib0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/abodmicheal/react-js-dialog-box/main/dialog-library.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  License
&lt;/h2&gt;

&lt;p&gt;MIT ¬© &lt;a href="https://github.com/abodmicheal/react-js-dialog-box"&gt;abodmicheal&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>techtalks</category>
      <category>npm</category>
    </item>
    <item>
      <title>Husky + lint-staged</title>
      <author>Edson Junior de Andrade</author>
      <pubDate>Tue, 21 Sep 2021 00:03:15 +0000</pubDate>
      <link>https://dev.to/edsonjuniornarvaes/husky-lint-staged-2bjo</link>
      <guid>https://dev.to/edsonjuniornarvaes/husky-lint-staged-2bjo</guid>
      <description>&lt;p&gt;In this post, I'll show you how to improve your husky workflow, using pre-commit to trigger error checking on your code before uploading it to the repository.&lt;/p&gt;

&lt;p&gt;To get started, let's install husky with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;yarn add husky -D
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the package.json file I define the scope of the husky with the hook call and then the scope with the definition of the files to be checked, in the example I define the files that end in js and ts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;"husky"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"hooks"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"pre-commit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lint-staged"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"lint-staged"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"*.{js, ts}"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point it is necessary to install and configure eslint, in this article I explain how to install eslint step by step &lt;a href=""&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here I configure it to automatically fix our changes: &lt;code&gt;eslint --fix&lt;/code&gt;, if it can't fix the file, it will inform the user about the error, so I set git add to include the changes from&lt;code&gt;eslint -fix&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;"lint-staged"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"*.{js, ts}"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"eslint --fix"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"git add ."&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>husky</category>
      <category>lintstaged</category>
      <category>eslint</category>
    </item>
    <item>
      <title>Identity-driven learning for coding</title>
      <author>ùôπùöäùöúùöòùöó ùôªùöéùöòùö† üë®üèª‚Äçüíª</author>
      <pubDate>Mon, 20 Sep 2021 23:25:25 +0000</pubDate>
      <link>https://dev.to/jasonleowsg/identity-driven-learning-for-coding-3ii7</link>
      <guid>https://dev.to/jasonleowsg/identity-driven-learning-for-coding-3ii7</guid>
      <description>&lt;h3&gt;
  &lt;a href="#onoff-with-coding"&gt;
  &lt;/a&gt;
  On/off with coding
&lt;/h3&gt;

&lt;p&gt;When I started on my journey of learning coding, I had the impression that all I needed to do to get better at coding is to just code more. First, take an online course . Then do more tutorials. Make a small side project. Rise and repeat. Basically, just looking at code on a screen, or someone else‚Äôs code on a screen, and go from there. I did that for kind of the first 1-2 years, but my relationship with coding then kept going on and then off. I‚Äôll be super enthusiastic for a couple of months doing courses and Youtube tutorials, and then got busy and it dropped off the radar. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learning-the-softer-aspects-of-coding-dev-culture"&gt;
  &lt;/a&gt;
  Learning the 'softer' aspects of coding - dev culture
&lt;/h3&gt;

&lt;p&gt;But this time, on my rebound a couple of months ago, I did something different. Besides the hunkering down on coding screen-time, I also did something that‚Äôs not usually part of the ‚Äòsyllabus‚Äô - listening to web development podcasts. I would head out for lunch, and during that one hour, I‚Äôll be plugged into my Overcast app, listening to the likes of Wes Bos and Scott Tolinski of Syntax.fm, or whatever topic that was a search bar away within the app ‚Äì JAMstack, Vue, serverless, headless CMS. &lt;/p&gt;

&lt;p&gt;Initially I just wanted to ramp up on more technical knowledge right from the experts, but over time, especially on the Syntax.fm podcast which I‚Äôm loving loads, I began to enjoy listening to the softer aspects of coding ‚Äì like making your first buck from web dev, freelancing, learning about security, working from home, geeking out on other hardware tech, hearing Wes and Scott riff on when they are reviewing a Javascript framework. Basically, just learning about the identity, culture, lingo, and everything except the code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#identity-is-also-part-of-the-learning-process"&gt;
  &lt;/a&gt;
  Identity is also part of the learning process
&lt;/h3&gt;

&lt;p&gt;And it really helped! I‚Äôd stuck around a lot more this time, and my interest to keep coding doesn‚Äôt seem to be faltering at that. I think the key difference was that &lt;strong&gt;identity is pretty much part of the learning process as much as the technical learning&lt;/strong&gt;. I‚Äôd always seen myself as a designer, entrepreneur or indie hacker, not a developer, and that lack of sense of belonging did hamper the learning process in ways that I wasn‚Äôt aware of initially. Especially now that I‚Äôm trying to transition to developing products fulltime, I needed to grow into a different identity, a fresh season of life, a new narrative. &lt;/p&gt;

&lt;p&gt;And you can‚Äôt get that from just doing technical stuff. &lt;/p&gt;

&lt;p&gt;I had to truly immerse in web dev culture, and being initiated into these softer aspects of web dev had a significant effect of making me like I belong, I understand the lingo, I can speak to other web devs and understand each other. And as a result, confidence grows, I get more comfortable in my new skin, and that social+identity multiplier seeps across into my technical confidence as well‚Ä¶in some weird black magic way I can‚Äôt fathom.&lt;/p&gt;

&lt;p&gt;So, yeah. Want to be a better developer? Crank up on your geek culture!&lt;/p&gt;




&lt;p&gt;Follow my daily writings on &lt;a href="https://golifelog.com/goals/30"&gt;Lifelog&lt;/a&gt;, where I write about learning to code, goals, productivity, indie hacking and tech for good.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>decodingcoding</category>
    </item>
    <item>
      <title>Do You Like Using Your Phone To Evolve Your Productivity and Your Coding Skills ? Here are 15 Mobile Apps That Will Help You!</title>
      <author>Aya Bouchiha</author>
      <pubDate>Mon, 20 Sep 2021 22:59:45 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/do-you-like-using-your-phone-to-evlove-your-productivity-and-your-coding-skills-here-is-10-mobile-apps-that-will-help-you-3b0o</link>
      <guid>https://dev.to/ayabouchiha/do-you-like-using-your-phone-to-evlove-your-productivity-and-your-coding-skills-here-is-10-mobile-apps-that-will-help-you-3b0o</guid>
      <description>&lt;p&gt;Hello Everybody, this is my #99 post, I'm &lt;a href="//developer.aya.b@gmail.com"&gt;Aya Bouchiha&lt;/a&gt;, on this beautiful day, I would like to share with you 15 free mobile apps that will help you to evolve your productivity and your coding skills.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: the mentioned apps in this post are free, but they could include some paid features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#google-keep-easy-notes-tick-tick-notion"&gt;
  &lt;/a&gt;
  Google Keep, Easy Notes, Tick Tick, Notion
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;‚ÄúIf you don‚Äôt know where you are going, you‚Äôll end up someplace else.‚Äù&lt;/em&gt;(Yogi Berra)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google keep&lt;/strong&gt;: is one of the most used applications for writing notes, ideas..., which let you share and collaborate with people on notes and lists.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://keep.google.com/"&gt;website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.google.android.keep&amp;amp;hl=en&amp;amp;gl=US"&gt;android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apps.apple.com/us/app/google-keep-notes-and-lists/id1029207872"&gt;ios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Easy Notes&lt;/strong&gt; is an &lt;strong&gt;android&lt;/strong&gt; app for taking notes with colorful backgrounds and checklists, that provides you many features like creating photos, audio notes,  sorting them...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=easynotes.notes.notepad.notebook.privatenotes.note&amp;amp;hl=en&amp;amp;gl=US"&gt;android&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;TickTick&lt;/strong&gt;: is a mobile app used for writing, managing your tasks, to-do lists, daily routine, tracking, and developing new habits. However, It provides you Pomodoro timer to keep you focused.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ticktick.com/?language=en_US"&gt;website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.ticktick.task&amp;amp;hl=en&amp;amp;gl=US"&gt;android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apps.apple.com/us/app/ticktick-to-do-list-calendar/id626144601"&gt;ios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Notion&lt;/strong&gt;: an editor that blends notes, to-do lists, bookmarks, code snippets, tasks, wikis, and more awesome features.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.notion.so/"&gt;website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=notion.id&amp;amp;hl=en&amp;amp;gl=US"&gt;android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apps.apple.com/us/app/notion-notes-projects-docs/id1232780281"&gt;ios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#coursera-udemy"&gt;
  &lt;/a&gt;
  Coursera, Udemy
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;"The roots of education are bitter, but the fruit is sweet."&lt;/em&gt; (Aristotle)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coursera&lt;/strong&gt;: is one of the best platforms for online learning and self-education, It provides great courses for anyone, anywhere access to online courses and degrees from world-class universities and companies.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/"&gt;website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=org.coursera.android&amp;amp;hl=en&amp;amp;gl=US"&gt;android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apps.apple.com/us/app/coursera-learn-new-skills/id736535961"&gt;ios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Udemy&lt;/strong&gt; is an online learning platform that provides individual online courses that cover different categories like programming, marketing, content creation...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://udemy.com/"&gt;website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.udemy.android&amp;amp;hl=en&amp;amp;gl=US"&gt;android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apps.apple.com/us/app/udemy-online-video-courses/id562413829"&gt;ios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#geeksforgeeks"&gt;
  &lt;/a&gt;
  GeeksForGeeks
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;GeeksForGeeks&lt;/strong&gt;: is one of the most famous platforms that provide amazing and well-explained articles for studying, learning, and mastering algorithms and data structures.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/"&gt;website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/developer?id=GeeksforGeeks&amp;amp;hl=en_US&amp;amp;gl=US"&gt;android&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#900-programming-books"&gt;
  &lt;/a&gt;
  900+ Programming Books
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;"a reader lives a thousand lives before he dies, the man who never reads lives only one"&lt;/em&gt;(George R. R. Martin)&lt;/p&gt;

&lt;p&gt;Everyone knows reading books is a great habit that every person, man, woman, child..., need to understand more life, to enrich his vocabulary, to developer his analytical and communicational skills.&lt;/p&gt;

&lt;p&gt;according to me and many programmers, Youtube tutorials and courses will never replace the power and the valuable benefits of books.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;900+ Programming Books&lt;/strong&gt;: is an &lt;strong&gt;android&lt;/strong&gt; app that offers more than 900 free, and paid books that cover more than 60 programming languages.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.codinghomies.programming.books.learn.to.code&amp;amp;hl=en&amp;amp;gl=US"&gt;android&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#moon-reader-readera-marvin-3"&gt;
  &lt;/a&gt;
  Moon+ Reader, ReadEra, Marvin 3
&lt;/h2&gt;

&lt;p&gt;most developers, like me and you :), prefer and love the dark theme, that's why ReadEra are in my favorites app lists. &lt;a href="https://dev.to/ayabouchiha/my-5-favourite-vs-code-themes-26h8"&gt;my 5 favorites vs code themes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ReadEra&lt;/strong&gt; is an &lt;strong&gt;android&lt;/strong&gt; application for reading ebooks and viewing documents, in addition, It is for free and doesn't contain ads.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=org.readera&amp;amp;hl=en&amp;amp;gl=US"&gt;android&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Moon+ Reader: is an &lt;strong&gt;android&lt;/strong&gt; app for reading ebooks that allows you to load books in practically any ebook format you can find, including epub, mobi, chm, cbr, cbz, umd, fb2, txt, html, rar, zip, or OPDS..., It gives you Full visual like line space, font scale, bold, italic, in addition, It provides you 10+ themes including Dark one.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.flyersoft.moonreader&amp;amp;hl=en&amp;amp;gl=US"&gt;android&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Marvin 3: is one of the best &lt;strong&gt;ios&lt;/strong&gt; app for reading ebooks, which contains awesome features like providing light/&lt;strong&gt;dark&lt;/strong&gt; themes, reading statistics, Vertical scrolling, Goodreads integration...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://apps.apple.com/us/app/marvin-3/id1086482858"&gt;ios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#miro-microsoft-whiteboard"&gt;
  &lt;/a&gt;
  Miro, Microsoft Whiteboard
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;‚ÄúIf I had an hour to solve a problem I'd spend 55 minutes thinking about the problem and five minutes thinking about solutions."&lt;/em&gt;(Albert Einstein)&lt;/p&gt;

&lt;p&gt;as a programmer, you will face many times some hard and complex problems that require focus, understanding and visualizing them, that is why using an online whiteboard will help you a lot to solve them faster, However, It lets you work more effectively with your team especially when It comes to planning and managing the projects together.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Microsoft Whiteboard&lt;/strong&gt;: (for android and ios) provides a freeform intelligent canvas where teams can ideate, create, and collaborate visually via the cloud. Designed for pen and touch, it lets you write or draw as smoothly as you would with ink, while automatically recognizing and transforming shapes and tables as you draw.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.microsoft.com/en-us/microsoft-365/microsoft-whiteboard/digital-whiteboard-app"&gt;website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.microsoft.whiteboard.publicpreview&amp;amp;hl=en&amp;amp;gl=US"&gt;android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apps.apple.com/us/app/microsoft-whiteboard/id1352499399"&gt;ios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Miro&lt;/strong&gt;: is an online collaborative whiteboard that enables distributed teams to work effectively together, from brainstorming with digital sticky notes to planning and managing agile workflow.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://miro.com/"&gt;website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.realtimeboard&amp;amp;hl=en&amp;amp;gl=US"&gt;android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apps.apple.com/us/app/miro-collaborative-whiteboard/id1180074773"&gt;ios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my opinion, I prefer &lt;em&gt;Miro&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thirty"&gt;
  &lt;/a&gt;
  Thirty
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Thirty&lt;/strong&gt;: is a social network (&lt;strong&gt;android app&lt;/strong&gt;) that will help you to start 30 days challenges to track and stop bad habits and start building new effective habits, in addition, It let you share your daily goals and habits with your friends and other people and more fun features.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.twominds.thirty&amp;amp;hl=en&amp;amp;gl=US"&gt;anroid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#dcoder-spck-code-editor"&gt;
  &lt;/a&gt;
  Dcoder, Spck Code Editor
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Dcoder&lt;/strong&gt; is a mobile IDE with Syntax highlighting which let you Debug and Write a code in more than 35 Programming Languages and libraries (&lt;em&gt;python, ruby, reactjs, django, html, javascript, nodejs...&lt;/em&gt;) see compilation results and errors at the same time on the same screen. in addition, Dcoder will help you to evolve and develop your problem-solving skills by solving available challenges in the app. &lt;a href="https://dev.to/ayabouchiha/11-websites-to-practice-you-coding-and-your-problem-solving-skills-51k9"&gt;11 Websites To Practice You Coding And Your Problem Solving Skills&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dcoder.tech/"&gt;website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.paprbit.dcoder&amp;amp;hl=en&amp;amp;gl=US"&gt;android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apps.apple.com/ky/app/dcoder-code-compiler-ide/id1488496978"&gt;ios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Spck Code Editor&lt;/strong&gt;: is an &lt;strong&gt;android&lt;/strong&gt; app that lets you write code, commit to any git repository .in addition, It provides you cloning feature from Github/Gitlab/Bitbucket, AWS CodeCommit, Azure DevOps...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Main languages supported: &lt;em&gt;JavaScript, CSS, HTML&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Smart code-hinting support: &lt;em&gt;TypeScript, JavaScript, TSX, JSX, CSS, Less, SCSS, HTML&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Syntax highlighting only: &lt;em&gt;Python, Ruby, R, Perl, Julia, Scala, Java, Scala, Kotlin, OCaml, PHP, Golang, Rust, C, C#, Stylus, CoffeeScript, Pug, Markdown, Batch, Bash, ActionScript, Coldfusion, HaXe&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://play.google.com/store/apps/details?id=io.spck&amp;amp;hl=en&amp;amp;gl=US"&gt;android&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#to-contact-me"&gt;
  &lt;/a&gt;
  To Contact Me
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;email: &lt;a href="mailto:developer.aya.b@gmail.com"&gt;developer.aya.b@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;telegram: &lt;a href="https://t.me/AyaBouchiha"&gt;AyaBouchiha&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Whatsapp: +212677070579&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please, feel free to write your favorites apps in the comments section.&lt;/p&gt;

&lt;p&gt;Have an excellent day!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/youtube-courses-projects-to-master-javascript-3lhc"&gt;Youtube Courses, Projects To Master Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/9-websites-plateforms-that-i-visit-them-at-least-2-times-in-a-weak-as-a-developer-387n"&gt;9 websites &amp;amp; platforms that I visit at least 2 times in a week&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/this-is-your-complete-guide-to-all-python-list-methods-b4"&gt;This Is Your Complete Guide To All Python List Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/your-complete-guide-to-math-object-in-javascript-4o5d"&gt;Your Essential Guide To Math Object In Javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>productivity</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Session management: What it is and why your security depends on it</title>
      <author>Clerk.dev</author>
      <pubDate>Mon, 20 Sep 2021 22:52:57 +0000</pubDate>
      <link>https://dev.to/clerk/session-management-what-it-is-and-why-your-security-depends-on-it-5e6</link>
      <guid>https://dev.to/clerk/session-management-what-it-is-and-why-your-security-depends-on-it-5e6</guid>
      <description>&lt;p&gt;Constantly having to log back in to your online accounts is a frequent annoyance - but this irritating problem stems from an inefficient solution to a genuine security concern.&lt;/p&gt;

&lt;p&gt;Web applications need to make sure that your accounts are safe from hackers, and some handle that by requiring frequent re-authentication. Still, that's not the best solution. Proper session management can help apps like yours keep users safe¬†*without¬†*needing to constantly log back in.&lt;/p&gt;

&lt;p&gt;Below, we'll cover the fundamentals of session management, what's required to implement it, and how it can help you keep your users safe without creating a frustrating user experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-session-management"&gt;
  &lt;/a&gt;
  What is session management?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.packetlabs.net/session-management/"&gt;Session management&lt;/a&gt;¬†is the process of facilitating private interactions between users and web applications. It specifically refers to managing different "sessions," or periods when the user is logged in and active in the application. The session management process lets users access their unique and potentially sensitive information securely without letting others get into their account, without forcing users to constantly re-authenticate.&lt;/p&gt;

&lt;p&gt;Session management can take two forms: short-lived and long-lived. Short-lived sessions last only as long as the user remains in the application. Every time they leave the app, they need to re-authenticate to get back in.&lt;/p&gt;

&lt;p&gt;Long-lived sessions keep the user logged in to the app even if they leave. These sessions store session IDs on the user's device, allowing them to reopen the app and start using it without needing to re-authenticate.&lt;/p&gt;

&lt;p&gt;Long-lived sessions typically offer the best user experience, since they let people get into their accounts with no hassle. But this approach also has drawbacks. Anyone who accesses the device can also access that account as long as the session is still active, which is a security risk. For apps that contain sensitive information, short-lived sessions may make the user experience slightly more complicated, but will be more secure.&lt;/p&gt;

&lt;p&gt;‚Äå&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-elements-of-session-management-implementation"&gt;
  &lt;/a&gt;
  The elements of session management implementation
&lt;/h2&gt;

&lt;p&gt;Proper session management implementation involves three functions: creating session IDs, storing session cookies or tokens, and enforcing session expiry dates.&lt;/p&gt;

&lt;p&gt;Here's what that means:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Session IDs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When the user first logs into the website or app, the server creates a unique session ID associated with the authenticated user. However, with each new request, the server still needs a way of identifying if the request came from that authenticated user without needing re-authentication. Which is where cookies or¬†&lt;a href="https://en.wikipedia.org/wiki/JSON_Web_Token"&gt;JWT&lt;/a&gt;¬†tokens come in.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Session cookies vs. tokens&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When the server creates a unique session ID, it also creates a cookie that is stored in the user's browser. The information contained in that cookie is sent along with each new request so the server understands it comes from the same authenticated user.&lt;/p&gt;

&lt;p&gt;Session cookies are most commonly used with websites or web-based platforms. When it comes to modern web applications, a JSON Web Token, or JWT, is used instead.&lt;/p&gt;

&lt;p&gt;When the user logs on with the right credentials, a JWT is created instead of a session ID and sends it to the user. The JWT is stored in local storage and the header of the token is sent with every new request.&lt;/p&gt;

&lt;p&gt;This means that the user's state is not stored on the server, but inside the token, making this option more scalable and more useful for mobile device authentication.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Session expiry&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sessions are temporary states and expire under certain circumstances, such as the mobile app being closed, a set period of inactivity, or a maximum session duration that cannot be exceeded. Long-lived sessions may expire when the user hasn't interacted with the app in a certain number of days or weeks. The cookie or token storing the session ID should automatically delete itself at the end of those periods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#security-concerns-addressed-by-well-implemented-session-management"&gt;
  &lt;/a&gt;
  Security concerns addressed by well implemented session management
&lt;/h2&gt;

&lt;p&gt;The purpose of session management is to help keep user data secure. Without appropriate session management, you can run into several security problems, putting your users at risk. Common vulnerabilities caused by a lack of or poorly implemented session management include:&lt;/p&gt;

&lt;p&gt;‚Äå&lt;strong&gt;Session hijacking&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The cookies that you use to store session IDs need to be truly secure. Insecure session cookies are easy for hackers to predict or to use for brute-force attacks. If a hacker can spoof your users' session IDs, they can impersonate users and take over their accounts. This is known as session hijacking, and it can lead to the loss of sensitive information connected to the account.&lt;/p&gt;

&lt;p&gt;‚Äå&lt;strong&gt;Session fixation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If a specific session token can be used across platforms and without proper expiry protocols, it can be "fixated" by hackers. Essentially, the hacker tricks a user into logging in with a specific session ID, often by adding to the session ID in the URL argument, and then uses those credentials to log in to the user's account.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Session resources&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Session management systems should beare resource-light, so that attacks, such as denial of service (DDoS) that flood the system with new session requests, don't consume huge amounts of resources.&lt;/p&gt;

&lt;p&gt;‚Äå&lt;strong&gt;Anomaly detection&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Every application runs the risk of hacking attempts. If your session management tool doesn't have a way to detect abnormal patterns like brute force session ID guessing or DDoS attacks, you're more likely to fall victim to these attacks.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;‚Äå_Session expiry unset or too long&lt;/em&gt;_&lt;/p&gt;

&lt;p&gt;Session expiration has two potential problems. If you don't set the timeout period, many programs may leave the cookie or token on the device forever, leaving the account vulnerable to anyone else with the device. Also, a set timeout period that's too long has the same issue.&lt;/p&gt;

&lt;p&gt;‚Äå&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stay-secure-with-session-management"&gt;
  &lt;/a&gt;
  Stay secure with session management
&lt;/h2&gt;

&lt;p&gt;‚ÄåProper session management addresses all these concerns. It keeps your users and accounts safe by providing secure cookies or tokens, setting appropriate protocols and timeouts, and implementing anomaly detection.‚Äå&lt;/p&gt;

&lt;p&gt;Session management is a fundamental part of running a secure, trustworthy web application. By keeping a handle on your users' sessions, you can help them avoid the hassle of constant re-authentication without putting them at risk.&lt;/p&gt;

&lt;p&gt;You can address all your session management needs by implementing a¬†&lt;a href="https://clerk.dev/"&gt;user management&lt;/a&gt;¬†service, or you can write your own. Either way, your users will thank you for protecting them without making their lives more difficult.&lt;/p&gt;

</description>
      <category>security</category>
      <category>authentication</category>
      <category>jamstack</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>Which GitHub repo is going to have the most commits?</title>
      <author>[Cursors]</author>
      <pubDate>Mon, 20 Sep 2021 22:40:46 +0000</pubDate>
      <link>https://dev.to/cursorsdottsx/which-github-repo-is-going-to-have-the-most-commits-434</link>
      <guid>https://dev.to/cursorsdottsx/which-github-repo-is-going-to-have-the-most-commits-434</guid>
      <description>&lt;p&gt;So I saw this post by &lt;a href="https://github.com/virejdasani/"&gt;Virej Dasani&lt;/a&gt;: &lt;a href="https://dev.to/virejdasani/which-github-repo-has-the-most-commits-2i18?signin=true"&gt;Which GitHub repo has the most commits?&lt;/a&gt;, and I wondered, "Is there a faster, more efficient way of reaching 3,000,000 commits?"&lt;/p&gt;

&lt;p&gt;Well, of course the answer is yes, and the answer deals with multi-threading and hacky Git tricks.&lt;/p&gt;

&lt;p&gt;First off, I use the &lt;a href="https://en.wikipedia.org/wiki/Master/slave_(technology)"&gt;Master/slave&lt;/a&gt; design pattern:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__filename&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;master&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// process is master (folder names determine status)&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Spawning &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;threads&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; slave&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;threads&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;...`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;threads&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// spawn slaves&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// process is slave&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might think that you'd just spawn multiple processes that spam empty commits, just like how Virej used a Python loop, but no, that won't work.&lt;/p&gt;

&lt;p&gt;It is almost certain that two processes will commit at the same time, resulting in the &lt;code&gt;HEAD.lock&lt;/code&gt; file in the &lt;code&gt;.git/&lt;/code&gt; directory not matching.&lt;br&gt;
&lt;strong&gt;Error!&lt;/strong&gt; It's &lt;em&gt;fatal&lt;/em&gt; and also it's &lt;em&gt;slower&lt;/em&gt; to ignore this with traditional try-catch.&lt;br&gt;
Plus, if we have many processes (10+), this will happen almost every time a commit is made, hindering progress.&lt;/p&gt;

&lt;p&gt;Instead we will provide each slave its own Git repository, where it can commit happily as it chooses, separate from other slaves.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;threads&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;execSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`git clone ../master ../slave-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;execSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`tsc ../slave-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/index.ts`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;slave&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`../slave-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/index.js`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;threads&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;commits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;..&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`slave-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also pass the identifier to the slave using &lt;code&gt;fork&lt;/code&gt;'s &lt;code&gt;argv&lt;/code&gt; parameter, and we also set the &lt;code&gt;cwd&lt;/code&gt; of the slave to its repository's root.&lt;/p&gt;

&lt;p&gt;Each slave will make its &lt;em&gt;own&lt;/em&gt; branch to commit on, and when it's done, it will notify the master process.&lt;br&gt;
The master will then merge the slave's commits onto the master branch, and then proceeds to delete the slave's Git repository and kill its process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;execSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`git checkout -b slave-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;commits&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;execSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`git commit --allow-empty -m "[slave-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;]: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`commit &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;EXIT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using &lt;code&gt;process.send&lt;/code&gt;, we can send a message to the master process:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;slave&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;EXIT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;execSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`git remote remove local`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;execSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`git remote add local ../slave-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;execSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`git fetch local`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;execSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`git merge local/slave-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;rmSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`../slave-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;recursive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;force&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;slave&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`[slave-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;]: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we can add a little more flair if we wish:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// A check so that we are in the correct directory...&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;__filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`You must be inside the master repository.`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// When the master is interrupted it will clean up its mess...&lt;/span&gt;

&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SIGINT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Cleaning up... please wait.`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;created&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;execSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`git remote remove local`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;execSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`git remote add local ../slave-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;execSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`git fetch local`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;execSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`git merge local/slave-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Unable to merge 'slave-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;execSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`rm -rf ../slave-*`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Final notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://github.com/cursorsdottsx/committed"&gt;GitHub repository&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  Leave a star if you liked, leave an issue if you disliked.&lt;/li&gt;
&lt;li&gt;  I'm committing a lot, and then pushing all those commits, so I'm not spamming GitHub's servers.&lt;/li&gt;
&lt;li&gt;  The &lt;code&gt;.git&lt;/code&gt; directory will become very large, but nowhere close to GitHub's previously known limit: 100GB&lt;/li&gt;
&lt;li&gt;  Write an implementation in other languages and make sure to share it with me!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>github</category>
      <category>typescript</category>
    </item>
    <item>
      <title>JavaScript from ES6 to Today</title>
      <author>Joe Ziemba</author>
      <pubDate>Mon, 20 Sep 2021 22:04:16 +0000</pubDate>
      <link>https://dev.to/justmyrealname/javascript-from-es6-to-today-c42</link>
      <guid>https://dev.to/justmyrealname/javascript-from-es6-to-today-c42</guid>
      <description>&lt;p&gt;ES6 is nearly synonymous with "modern javascript" and rightly so. When it dropped in 2015 as the second-ever major language update (first being ES5 in 2009) ES6 added a &lt;em&gt;huge&lt;/em&gt; list of features that completely changed JS development. But time didn't stop in 2015 and the good folks over at ECMA International have released a new version every year since - that's right, in 2021 we're actually on &lt;strong&gt;ES12&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;If you missed the memo on versions 7-11, you're not alone. Thanks to tools like Babel, Webpack and TypeScript that transpile our code to browser-usable versions, we don't really need to pay much attention to the ES versions. But you might be surprised how many language features are newer - or older - than you thought...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#es6-ecmascript-2015"&gt;
  &lt;/a&gt;
  ES6 / ECMAScript 2015
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Block-scoping&lt;/li&gt;
&lt;li&gt;Array destructuring &lt;code&gt;let [ a, b ] = sourceArray&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Object destructuring &lt;code&gt;let { a, b } = sourceObject&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#object-literals"&gt;
  &lt;/a&gt;
  Object Literals
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Property shorthand &lt;code&gt;let obj = { a, b }&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Computed property keys &lt;code&gt;let obj = { [a]: "a" }&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Method definition &lt;code&gt;let obj = { myMethod(a) { return a } }; obj.myMethod("a");&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;for...of&lt;/code&gt; loops&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  Arrays
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Spread operator &lt;code&gt;[a, b, ...anotherArray]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.copyWithin()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.entries()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.fill()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.find()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.findIndex()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.keys()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.values()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Arrow declaration &lt;code&gt;() =&amp;gt; {}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Default params &lt;code&gt;(a, b = true) =&amp;gt; {}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Rest params &lt;code&gt;(a, b, ...rest) =&amp;gt; {}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Destructuring params &lt;code&gt;({ a, b }) =&amp;gt; {}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Generators&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#classes"&gt;
  &lt;/a&gt;
  Classes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extends&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;instanceof&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#modules"&gt;
  &lt;/a&gt;
  Modules
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;import&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#regular-expressions"&gt;
  &lt;/a&gt;
  Regular Expressions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/y&lt;/code&gt; (sticky)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/u&lt;/code&gt; (unicode)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.flags&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.source&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#strings"&gt;
  &lt;/a&gt;
  Strings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Template literals&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.includes()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.startsWith()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.endsWith()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.repeat()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#new-global-objects-methods"&gt;
  &lt;/a&gt;
  New Global Objects / Methods
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WeakMap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Object&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.assign()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.entries()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Array&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.from()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.of()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Number&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.EPSILON&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.MIN_SAFE_INTEGER&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.MAX_SAFE_INTEGER&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.isInteger()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.isSafeInteger()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.isFinite()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.parseFloat()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.parseInt()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.isNaN()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Math&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.cbrt()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.log10()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.log2()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.sign()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.trunc()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.hypot()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's &lt;em&gt;everything&lt;/em&gt; released in ES6. It's &lt;em&gt;a lot&lt;/em&gt;. But if you feel like something's missing from the list, keep going. There's 6 more years of features to go!&lt;/p&gt;

&lt;p&gt;Fun fact: ES6 is now fully supported by browsers, so it no longer needs to be transpiled unless you're unfortunate enough to be supporting Internet Explorer (my condolences)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#es7-ecmascript-2016"&gt;
  &lt;/a&gt;
  ES7 / ECMAScript 2016
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Exponentiation &lt;code&gt;3 ** 4&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array.includes()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#es8-ecmascript-2017"&gt;
  &lt;/a&gt;
  ES8 / ECMAScript 2017
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Asyncronous functions &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Object destructuring rest assignment &lt;code&gt;let { a, b, ...c } = sourceObject&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Object spread properties &lt;code&gt;{ a: 'a', b: 'b', ...anotherObject }&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Object&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.entries()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.getOwnPropertyDescriptors()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.values()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;String&lt;/code&gt; prototypes

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.padStart()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.padEnd()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Trailing commas in function parameters&lt;/li&gt;
&lt;li&gt;Shared memory and atomics&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#es9-ecmascript-2018"&gt;
  &lt;/a&gt;
  ES9 / ECMAScript 2018
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Async iteration &lt;code&gt;for-await-of&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Rest and Spread for Object Literals&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Promise.prototype.finally()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Tagged Template Literals&lt;/li&gt;
&lt;li&gt;Regular Expressions

&lt;ul&gt;
&lt;li&gt;named capture groups&lt;/li&gt;
&lt;li&gt;better escapes&lt;/li&gt;
&lt;li&gt;lookbehind assertions&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#es10-ecmascript-2019"&gt;
  &lt;/a&gt;
  ES10 / ECMAScript 2019
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Optional catch binding&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Symbol.prototype.description&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.fromEntries()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;String methods &lt;code&gt;.trimStart()&lt;/code&gt; and &lt;code&gt;.trimEnd()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Array methods &lt;code&gt;.flatMap()&lt;/code&gt; and &lt;code&gt;.flat()&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#es11-ecmascript-2020"&gt;
  &lt;/a&gt;
  ES11 / ECMAScript 2020
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Bigint data type&lt;/li&gt;
&lt;li&gt;Optional chaining on objects &lt;code&gt;myObject?.details?.name&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Nullish coalescing operator &lt;code&gt;a ?? b&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String.prototype.matchAll()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Dynamic imports via &lt;code&gt;import()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Promise.allSettled()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;globalThis&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import.meta&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Namespace re-exporting: &lt;code&gt;export \* as ns from "mod"&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#es12-ecmascript-2021"&gt;
  &lt;/a&gt;
  ES12 / ECMAScript 2021
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;String.prototype.replaceAll()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Promise.any()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;WeakRefs&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Logical assignment operators&lt;/li&gt;
&lt;li&gt;Underscores as separators in &lt;code&gt;number&lt;/code&gt; and &lt;code&gt;bigint&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#whats-next-for-js"&gt;
  &lt;/a&gt;
  What's next for JS?
&lt;/h2&gt;

&lt;p&gt;JavaScript's yearly release pace doesn't look to be slowing down anytime soon. ES13 is already in the works, slated for release in 2022 with a still-growing list of new additions like &lt;code&gt;.at()&lt;/code&gt; for arrays, &lt;code&gt;Object.hasOwn()&lt;/code&gt;. If you want to stay ahead of the curve, you can follow the progress of proposals for language additions &lt;a href="https://github.com/tc39/proposals"&gt;here on GitHub&lt;/a&gt;. There are some that will come out next year, but many more to keep an eye on for later versions (personally, I'm hoping for the pipe operator soon).&lt;/p&gt;

&lt;p&gt;But until then, sound off in the comments with the JS features you were surprised are older or newer than you though or that you'd never even heard of before! Unless you work with ECMA International, I'm willing to bet there's a few üòÑ.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>es6</category>
    </item>
    <item>
      <title>Extract, Transform and Load with React &amp; Rails </title>
      <author>Erin Fox</author>
      <pubDate>Mon, 20 Sep 2021 21:48:18 +0000</pubDate>
      <link>https://dev.to/erinfoox/extract-transform-and-load-with-react-rails-ggp</link>
      <guid>https://dev.to/erinfoox/extract-transform-and-load-with-react-rails-ggp</guid>
      <description>&lt;p&gt;You might be thinking, &lt;strong&gt;WFT is ETL and have I been using it all this time?!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you're an engineer, you probably have done some form of ETL. I never realized I was extracting, transforming and loading data throughout my career until researching it recently. I also, need to get better at it and the best way I know how is by researching, practice and  writing about it.  &lt;/p&gt;

&lt;p&gt;I'm still working on learning it with more complicated data structures and data transformations, but I wanted to break it down to the beginning to make sure I understand it each step of the way. But with cats added. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-etl"&gt;
  &lt;/a&gt;
  What is ETL?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ETL&lt;/strong&gt; = Extract, Transform, Load &lt;/p&gt;

&lt;p&gt;ETL is a series of steps to move data from one location to another. When doing this, it transforms the data structure before it is loaded from its source to its new destination. In more words, it is a process you can use to help plan and execute the movement of data that you need. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-etl"&gt;
  &lt;/a&gt;
  Why use ETL?
&lt;/h2&gt;

&lt;p&gt;I'm sure there are several answers to this question. For me, using it breaks down the steps of gathering and retrieving data. It also forces you to understand the shape of the data, what data you need, and how eventually you want it to look before rendering it in your app, browser or database.&lt;/p&gt;

&lt;p&gt;A more fancier definition for why we use it: Data from different sources can be pulled together and restructured to a standardized format. &lt;/p&gt;

&lt;p&gt;Let's walk through each step of extracting, transforming and loading data with React and Rails. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C_rv0lL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gx36yjmojswv491t83u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C_rv0lL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gx36yjmojswv491t83u.png" alt="Mind map of ETL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extract-plan-it"&gt;
  &lt;/a&gt;
  Extract - PLAN IT
&lt;/h2&gt;

&lt;p&gt;Extract, is all about planning for the transforming. There are 3 steps or questions to ask yourself to find the answers needed in order to move on to the next step, transform. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Where is the data that I need? 

&lt;ul&gt;
&lt;li&gt;Get it locally from your routes file? &lt;/li&gt;
&lt;li&gt;From another endpoint or 3rd party API like 
the Spotify API?

&lt;ul&gt;
&lt;li&gt;For our example, we will use hardcoded 
code found in our controller.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  def cats
    render json: {
      cats: [ # Cat.all
        {
          name: "Maya",
          color: "calico",
          rating: "perfect",
          owners: [
            "Mark"
          ]
        },
        {
          name: "Sully",
          color: "seal bicolor",
          rating: "perfect",
          owners: [
            "Erin"
          ]
        }
      ]
    }
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;What specific information do I need from that data?"&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Decide what data to extract 

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;In our example, let's extract the 
colors of the cats. So we want to 
return only the colors.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What should I use to retrieve that data? &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Query/retrieve the data &lt;/li&gt;
&lt;li&gt;A fetch request with JS on the frontend? &lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Net::HTTP&lt;/code&gt; with Ruby?

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;For our example, we will use &lt;code&gt;request&lt;/code&gt; 
which is a custom little thing we built 
internally. It is build off JS fetch.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This &lt;code&gt;handleGet&lt;/code&gt; function is the main way we will extract and receive the data we need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  async function handleGet() {
    const response = await request("/some-cool-route/cats") // built off js fetch, so this is a GET request
    console.log("handleGet", response)
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And our console log, would look like this: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vswiZ1Vl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ridrj59nk2g3odsi1fp7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vswiZ1Vl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ridrj59nk2g3odsi1fp7.png" alt="Console.log response"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#transform-do-it"&gt;
  &lt;/a&gt;
  Transform - DO IT
&lt;/h2&gt;

&lt;p&gt;Now that we have learned where the data is (in a method within the controller), what part of it we need (the cat's colors) and how to retrieve the data (a fetch GET request using an internal tool we use) we can now start changing the data to the shape we want. We can restructure it, rename it, remove things we don't need and even add values. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What should the data structure look like? 

&lt;ul&gt;
&lt;li&gt;Since our example is small, we are looking 
&lt;em&gt;only&lt;/em&gt; to return the cat's colors. We don't 
need the name, rating or owners.

&lt;ul&gt;
&lt;li&gt;We would want our transformed data to 
look like this if we were to console log it. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i5ZINwl1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/at4ws558y1e1ngta5ozm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i5ZINwl1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/at4ws558y1e1ngta5ozm.png" alt="Console.log of the 2 cat colors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can transform the cats array, to return only the cat colors by creating a function that takes the data (cat's array) and returns a new data structure (an array of cat colors).&lt;/p&gt;

&lt;p&gt;With our data in a method in our controller, let's look at our react component that will render the page. &lt;/p&gt;

&lt;p&gt;This is were we can create a transform function &lt;code&gt;transformColors()&lt;/code&gt; that will return an array of each cat's color: ["calico", "seal bicolor"]&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function transformColors(cats) {
  return cats.map(cat =&amp;gt; cat.color)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#load-render-show-it"&gt;
  &lt;/a&gt;
  Load / Render - SHOW IT
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Where should the data then be loaded or rendered? 

&lt;ul&gt;
&lt;li&gt;Add it to the database or display it to the 
user&lt;/li&gt;
&lt;li&gt;In some situations, you may be adding this 
new array of cat colors to your database. &lt;/li&gt;
&lt;li&gt;I mostly work with rendering the data to 
the page with React components, so let's see it all play out that way. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is the react component rendering our new transformed data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from "react"
import { request } from "react-rb" // internal tool by CK

export default function Meow() {
  const [cats, setCats] = useState([])
  const [colors, setColors] = useState([])

  async function handleGet() {
// EXTRACT
    const response = await request("/some-cool-route/cats") // built off js fetch, so this is a GET request
    setCats(response.data.cats)

    const transformCatColors = transformColors(response.data.cats)
    setColors(transformCatColors)
  }

  return (
    &amp;lt;div className="m-8"&amp;gt;
      &amp;lt;button onClick={handleGet}&amp;gt;Get cat colors üêà üêà‚Äç‚¨õ&amp;lt;/button&amp;gt;
// LOAD/RENDER
      &amp;lt;div&amp;gt;{colors}&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}
// TRANSFORM 
function transformColors(cats) {
  return cats.map(cat =&amp;gt; &amp;lt;div key={cat.color}&amp;gt;{cat.color}&amp;lt;/div&amp;gt;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's recap. We have &lt;strong&gt;Extracted&lt;/strong&gt; the data from our controller using a fetch request. We then &lt;strong&gt;Transformed&lt;/strong&gt; that data to return only the cat colors with our &lt;code&gt;transformColors()&lt;/code&gt; function. And finally, we can &lt;strong&gt;Load/Render&lt;/strong&gt; it to the page in our React component in the JSX. &lt;/p&gt;

&lt;p&gt;Here's a gif it it all working! It is not pretty, but hopefully you get the idea. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0xxuJZpv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/ioDgx0riJAzR1NKzr1/giphy.gif%3Fcid%3D790b7611f059b641b5f0ff113180651f88bec5f851ac221c%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0xxuJZpv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/ioDgx0riJAzR1NKzr1/giphy.gif%3Fcid%3D790b7611f059b641b5f0ff113180651f88bec5f851ac221c%26rid%3Dgiphy.gif%26ct%3Dg" alt="Gif of button being clicked to render the cat name and color"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hopefully this small example helps explain ETL just a little but more!&lt;/p&gt;

&lt;p&gt;A big shoutout to my coworker &lt;a href="https://twitter.com/mtmdev_"&gt;Mark M.&lt;/a&gt; for helping me grasp this concept even further and for setting up this awesome cat example. &lt;/p&gt;

</description>
      <category>etl</category>
      <category>react</category>
      <category>rails</category>
      <category>cats</category>
    </item>
    <item>
      <title>Manage Your Dotfiles Like a Superhero</title>
      <author>Jake Wiesler</author>
      <pubDate>Mon, 20 Sep 2021 21:01:04 +0000</pubDate>
      <link>https://dev.to/jakewies/manage-your-dotfiles-like-a-superhero-4gpd</link>
      <guid>https://dev.to/jakewies/manage-your-dotfiles-like-a-superhero-4gpd</guid>
      <description>&lt;p&gt;I'm going to assume you are reading this because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;you have one or more dotfiles lying around and you don't know how to organize them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;you heard that you can save dotfiles for later use in case your computer explodes or something.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;you've seen other people's dotfiles on GitHub, and they look so damn cool.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;you like superheros.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The thing about programming, or anything you try to teach yourself for that matter, is that when you start, &lt;em&gt;you don't know what you don't know&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Dotfiles are a perfect example. You don't know about them until either someone tells you they are thing, or you fall down a rabbit hole and find yourself setting the &lt;code&gt;$PATH&lt;/code&gt; variable in your &lt;code&gt;.bashrc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Eventually you go from not knowing about dotfiles, to really caring about them. You realize just how essential they are for your workflow. How having a good relationship with them can accelerate your ability to solve problems.&lt;/p&gt;

&lt;p&gt;And most important, you realize &lt;em&gt;just how picky you really are&lt;/em&gt;, and how your dotfiles are a perfect outlet for such pickiness.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-youre-probably-doing"&gt;
  &lt;/a&gt;
  What you're probably doing
&lt;/h2&gt;

&lt;p&gt;If you are not managing your dotfiles in any way, then they are probably strewn about your home directory. You probably have a file for your shell, say a &lt;code&gt;.bashrc&lt;/code&gt; or a &lt;code&gt;.zshrc&lt;/code&gt;. You probably have a &lt;code&gt;.vimrc&lt;/code&gt; or something like that. You might even have a &lt;code&gt;.gitconfig&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this scenario your dotfiles are ephemeral. They exist as long as your machine exists. And when your machine goes down for the long nap, so will your dotfiles. You don't want to be that girl or guy setting up a new machine from scratch every single time. It sucks. I've been there. Avoid at all costs!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-you-should-be-doing"&gt;
  &lt;/a&gt;
  What you should be doing
&lt;/h2&gt;

&lt;p&gt;Your dotfiles should be stored in such a way that you can access them anywhere at any time. If something happens to your current machine, or you need to setup another one, you're a &lt;code&gt;git clone&lt;/code&gt; away from an identical development environment. That is the dream.&lt;/p&gt;

&lt;p&gt;You may have come across resources like &lt;em&gt;Atlassian's&lt;/em&gt; &lt;a href="https://www.atlassian.com/git/tutorials/dotfiles"&gt;How to store dotfiles&lt;/a&gt;, or &lt;a href="https://yadm.io/"&gt;Yet Another Dotfiles Manager&lt;/a&gt;. I've tried them both. They work, but they're a little involved.&lt;/p&gt;

&lt;p&gt;Instead I recommend you use &lt;a href="https://www.gnu.org/software/stow/"&gt;GNU Stow&lt;/a&gt;, a utility that lets you symlink files from different parts of your machine and make them appear as if they are installed in the same place. This will make sense soon.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-do-it"&gt;
  &lt;/a&gt;
  How to do it
&lt;/h2&gt;

&lt;p&gt;Step one is to create a &lt;code&gt;.dotfiles&lt;/code&gt; directory in your home directory. For example, let's say Alice's home directory is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;/Users/alice
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alice will create her &lt;code&gt;.dotfiles&lt;/code&gt; directory here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; /Users/alice/.dotfiles
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, you'll need to get your hands on the &lt;code&gt;stow&lt;/code&gt; package. Luckily it is a pretty ubiquitous piece of software, so most package managers should make it available to you. For MacOS users you can use &lt;a href="https://formulae.brew.sh/formula/stow"&gt;&lt;code&gt;homebrew&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;stow
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The third step is to move existing dotfiles to the &lt;code&gt;.dotfiles&lt;/code&gt; directory, and/or create new ones depending on your scenario. This step requires some explanation of how &lt;code&gt;stow&lt;/code&gt; works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#understanding-raw-stow-endraw-"&gt;
  &lt;/a&gt;
  Understanding &lt;code&gt;stow&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;stow&lt;/code&gt; has a few key concepts that, when understood, should make this entire process a breeze. These concepts can be found in the &lt;a href="https://www.gnu.org/software/stow/manual/stow.html#Terminology"&gt;Terminology documentation&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;package&lt;/strong&gt; is a folder containing related dotfiles.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;stow directory&lt;/strong&gt; is a folder containing one or more packages.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;target directory&lt;/strong&gt; is the location in which a package's contents will be symlinked.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What this will look like in practice is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;target-directory
‚îú‚îÄ‚îÄ stow-directory
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ package-1
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ .dotfile-1
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ package-2
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ .dotfile-2
‚îÇ¬†¬†  ¬†¬† ‚îî‚îÄ‚îÄ .dotfile-3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's use Alice again as an example. Alice's &lt;code&gt;.dotfiles&lt;/code&gt; directory is located at:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;/Users/alice/.dotfiles
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;.dotfiles&lt;/code&gt; directory is her &lt;strong&gt;stow directory&lt;/strong&gt;. Currently it's empty. She will need to create one or more &lt;strong&gt;packages&lt;/strong&gt; within it to house her dotfiles.&lt;/p&gt;

&lt;p&gt;Alice has the following dotfiles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.bashrc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.vimrc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.gitconfig&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since each file belongs to a different "package", &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;vim&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt; respectively, Alice will create a package for each:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# /Users/alice/.dotfiles &lt;/span&gt;

&lt;span class="nb"&gt;mkdir &lt;/span&gt;bash
&lt;span class="nb"&gt;mkdir &lt;/span&gt;vim
&lt;span class="nb"&gt;mkdir &lt;/span&gt;git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, Alice can move each dotfile into their respective package directory. As a result, the &lt;code&gt;.dotfiles&lt;/code&gt; directory will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.dotfiles
‚îú‚îÄ‚îÄ bash
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ .bashrc
‚îú‚îÄ‚îÄ vim
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ .vimrc
‚îî‚îÄ‚îÄ git
    ‚îî‚îÄ‚îÄ .gitconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;.dotfiles&lt;/code&gt; is the stow directory. &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;vim&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt; are package directories. Their contents are the dotfiles themselves. Now, all that's left is to use the &lt;code&gt;stow&lt;/code&gt; command to target each package inside of the stow directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# /Users/alice/.dotfiles &lt;/span&gt;

stow bash
stow vim
stow git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The commands above will symlink the contents of each package to the &lt;strong&gt;target directory&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But what is the target directory?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;stow&lt;/code&gt;, the target directory is one directory above the stow directory. In Alice's case, if her stow directory is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;/Users/alice/.dotfiles
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then her target directory is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/Users/alice
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me explain these symlinks a little bit better. When you run &lt;code&gt;stow &amp;lt;package&amp;gt;&lt;/code&gt;, the &lt;code&gt;stow&lt;/code&gt; utility will create the least amount of symlinks necessary to mirror the contents of the package to your target directory. If your package had a single dotfile, &lt;code&gt;stow&lt;/code&gt; will create a single symlink:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/Users/alice
‚îú‚îÄ‚îÄ .dotfiles
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ vim
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ .vimrc
‚îú‚îÄ‚îÄ .vimrc -&amp;gt; .dotfiles/vim/.vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;
  The arrow (-&amp;gt;) represents a symlinked file pointing to its original source.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;This might seem obvious to some, but what happens if you have a subfolder within a package? For instance, it's common for Vim users to not only have a &lt;code&gt;.vimrc&lt;/code&gt; file in their home directory, but also a &lt;code&gt;.vim&lt;/code&gt; directory with scripts and plugins. How would you stow that?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/Users/alice
‚îú‚îÄ‚îÄ .dotfiles
‚îÇ   ‚îú‚îÄ‚îÄ vim
‚îÇ       ‚îî‚îÄ‚îÄ .vimrc
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ .vim
|           ‚îî‚îÄ‚îÄ script.vim
‚îú‚îÄ‚îÄ .vimrc -&amp;gt; .dotfiles/vim/.vimrc
‚îú‚îÄ‚îÄ .vim   -&amp;gt; .dotfiles/vim/.vim
|   ‚îî‚îÄ‚îÄ script.vim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This gives you a ton of flexibilty, because very often command line tools like &lt;code&gt;git&lt;/code&gt; and &lt;code&gt;vim&lt;/code&gt; use more than dotfiles stored in the home directory. They have their own directories and subdirectories, and being able to model this out within a package is really powerful.&lt;/p&gt;

&lt;p&gt;Once you can visualize how &lt;code&gt;stow&lt;/code&gt; mirrors a package's contents to the target directory, structuring your &lt;code&gt;.dotfiles&lt;/code&gt; directory will be easy peezy lemon squeezy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#one-more-example"&gt;
  &lt;/a&gt;
  One more example
&lt;/h3&gt;

&lt;p&gt;The last example I'll give should really drive &lt;code&gt;stow&lt;/code&gt; symlinks home. Let's say Alice is a &lt;code&gt;vim&lt;/code&gt; user, but instead of traditional vim she uses &lt;a href="https://neovim.io/"&gt;Neovim&lt;/a&gt;. Neovim doesn't use a &lt;code&gt;.vimrc&lt;/code&gt; file in her home directory, but instead an &lt;code&gt;init.vim&lt;/code&gt; file which is located at:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/Users/alice/.config/nvim/init.vim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;init.vim&lt;/code&gt; file is heavily nested. If Alice wants to stow this, how would she do it?&lt;/p&gt;

&lt;p&gt;It's pretty simple actually. In her &lt;code&gt;.dotfiles&lt;/code&gt; directory she creates a package called &lt;code&gt;nvim&lt;/code&gt;. It would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.dotfiles
‚îú‚îÄ‚îÄ nvim
‚îÇ   ‚îú‚îÄ‚îÄ .config
‚îÇ       ‚îî‚îÄ‚îÄ nvim
|           ‚îî‚îÄ‚îÄ init.vim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The folder structure starting from &lt;code&gt;.dotfiles/nvim&lt;/code&gt; is the same structure that is expected in Alice's home directory. Now she just needs to stow the &lt;code&gt;nvim&lt;/code&gt; directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# /Users/alice/.dotfiles &lt;/span&gt;

stow nvim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the result will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/Users/alice
‚îú‚îÄ‚îÄ .dotfiles
‚îÇ   ‚îú‚îÄ‚îÄ nvim
‚îÇ       ‚îî‚îÄ‚îÄ .config
|           ‚îî‚îÄ‚îÄ nvim
|               ‚îî‚îÄ‚îÄ init.vim
‚îú‚îÄ‚îÄ .config -&amp;gt; .dotfiles/nvim/.config
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#storing-dotfiles-in-git"&gt;
  &lt;/a&gt;
  Storing dotfiles in git
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;.dotfiles&lt;/code&gt; directory is just like any old directory on your machine. You can &lt;code&gt;git init&lt;/code&gt; and &lt;code&gt;git push&lt;/code&gt; up to your git repository of choice:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# /path/to/your/.dotfiles&lt;/span&gt;

git init
git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"storing initial dotfiles"&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can add a &lt;code&gt;.gitignore&lt;/code&gt; file to prevent unwanted configs from being pushed to your remote repository, and a &lt;code&gt;README&lt;/code&gt; to illustrate how it all works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this has helped you gain a better understanding of how to manage your dotfiles. This is by no means the only way to do it, but it is my preferred way.&lt;/p&gt;

&lt;p&gt;You can really take this as far as you want to go. For instance, I am planning on creating an &lt;code&gt;install&lt;/code&gt; script that can be run on new machines. This script will install a bunch of dependencies like &lt;code&gt;node&lt;/code&gt; and the like, stow my dotfiles so the symlinks are created, etc.&lt;/p&gt;

&lt;p&gt;If you want to take a peak at my dotfiles, you can &lt;a href="https://github.com/jakewies/.dotfiles"&gt;see them here&lt;/a&gt;. They're still a work in progress, but it should be a good resource for learning.&lt;/p&gt;

&lt;p&gt;If you made it to the end, thanks for reading! Have questions? See a mistake? Just want to say hi? Reach out to me on [Twitter].&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>git</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Make your own Heroku! Auto-deploy a Docker app on your own server with GitHub Actions</title>
      <author>Josh Lee</author>
      <pubDate>Mon, 20 Sep 2021 20:44:47 +0000</pubDate>
      <link>https://dev.to/toficofi/make-your-own-heroku-auto-deploy-a-docker-app-on-your-own-server-with-github-actions-5d32</link>
      <guid>https://dev.to/toficofi/make-your-own-heroku-auto-deploy-a-docker-app-on-your-own-server-with-github-actions-5d32</guid>
      <description>&lt;p&gt;If you've switched from using PaaS services like Heroku to running off a VPS (or your own machine!) then you might miss features like auto-deploy.&lt;/p&gt;

&lt;p&gt;Luckily, with the power of ‚ö° GitHub Actions and Docker, it's simple to replicate auto-deploy yourself.&lt;/p&gt;

&lt;p&gt;You can find the final example repository below:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/toficofi"&gt;
        toficofi
      &lt;/a&gt; / &lt;a href="https://github.com/toficofi/auto-deploy-docker"&gt;
        auto-deploy-docker
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#the-goal"&gt;
  &lt;/a&gt;
  üéØ The Goal
&lt;/h2&gt;

&lt;p&gt;We'll be able to &lt;code&gt;git push origin live&lt;/code&gt; some changes, and find that your server has automatically pulled the changes, built a new image, and restarted the containers, without lifting a finger.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-i-need"&gt;
  &lt;/a&gt;
  üß† What do I need?
&lt;/h2&gt;

&lt;p&gt;This guide assumes a basic understanding of Docker, Git, and bash, and that you have a VPS or another Linux machine already provisioned. The stack for your app doesn't matter here!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  üöÄ Let's get started!
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#our-app"&gt;
  &lt;/a&gt;
  Our app
&lt;/h3&gt;

&lt;p&gt;In this example, we'll be using the default ASP.Net Core webapp template. It doesn't matter what stack you use, as long as it's Dockerized.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;auto-deploy-docker
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;auto-deploy-docker
&lt;span class="nv"&gt;$ &lt;/span&gt;dotnet new webapp
&lt;span class="nv"&gt;$ &lt;/span&gt;dotnet run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(local shell)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That'll get us started with a simple webapp, found at &lt;code&gt;localhost:5000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jyBoh0S1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0otb8ojrwcy73e2qvt6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jyBoh0S1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0otb8ojrwcy73e2qvt6.png" alt="Untitled-1"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#docker-time"&gt;
  &lt;/a&gt;
  üê≥ Docker time
&lt;/h3&gt;

&lt;p&gt;Drop a &lt;code&gt;Dockerfile&lt;/code&gt; at the root of the project. We're going to steal the config from &lt;a href="https://docs.docker.com/samples/dotnetcore/"&gt;Dockerize an ASP.NET Core application&lt;/a&gt; as it fits our needs. I've annotated the file with comments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# syntax=docker/dockerfile:1&lt;/span&gt;
&lt;span class="c"&gt;# First stage: build the app&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; mcr.microsoft.com/dotnet/sdk:5.0 AS build-env&lt;/span&gt;

&lt;span class="c"&gt;# Make and switch to the /app directory&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="c"&gt;# Copy the C# project file into /app&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; *.csproj ./&lt;/span&gt;

&lt;span class="c"&gt;# Restore dependencies&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;dotnet restore

&lt;span class="c"&gt;# Now we can copy the rest of the source into /app&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./ ./&lt;/span&gt;

&lt;span class="c"&gt;# Build the project in Release mode to the "out" directory&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;dotnet publish &lt;span class="nt"&gt;-c&lt;/span&gt; Release &lt;span class="nt"&gt;-o&lt;/span&gt; out

&lt;span class="c"&gt;# Second stage: run the app&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; mcr.microsoft.com/dotnet/aspnet:5.0&lt;/span&gt;

&lt;span class="c"&gt;# Switch back to /app&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app &lt;/span&gt;

&lt;span class="c"&gt;# Copy the binaries from the build stage into our new stage&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=build-env /app/out .&lt;/span&gt;

&lt;span class="c"&gt;# Set the entrypoint for when the image is started&lt;/span&gt;
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["dotnet", "auto-deploy-docker.dll"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To reduce the size of the image, drop a &lt;code&gt;.dockerignore&lt;/code&gt; so we don't copy in the binaries from the context. We don't need these, because we're building the project inside the container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bin/
obj/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: For deployment pipelines, it's &lt;a href="https://docs.docker.com/samples/dotnetcore/#method-2-build-app-outside-docker-container"&gt;generally preferred to build the project outside the container&lt;/a&gt;, and use the compiled binaries in the image. We won't worry about that for this guide.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's build the image and verify it works locally. Make sure you exit the &lt;code&gt;dotnet run dev&lt;/code&gt; you started earlier, so it doesn't hog up port 5000!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# build the image&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker build &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;-t&lt;/span&gt; auto-deploy-docker

&lt;span class="c"&gt;# run the image, binding the container's 80 to our 5000&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker &lt;span class="nt"&gt;-p&lt;/span&gt; 5000:80 run auto-deploy-docker 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(local shell)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Navigate again to &lt;code&gt;localhost:5000&lt;/code&gt; and you should see the same app. &lt;/p&gt;

&lt;p&gt;Great! The last thing we'll want to do here is make use of the powerful &lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt;. If you've not used Compose yet, it's basically a way to define all the containers we need to use for our app with a &lt;code&gt;docker-compose.yml&lt;/code&gt; configuration file, which means we can put them all up and tear them all down in one go without faffing around with other commands. &lt;/p&gt;

&lt;p&gt;In this example, we're only running a single webapp in a container, but if you need to add other services - like a background worker, or a database container, Compose helps you orchestrate them. On top of that, it lets you configure containers to automatically restart when they go down or the host machine is restarted.&lt;/p&gt;

&lt;p&gt;Make a &lt;code&gt;docker-compose.yml&lt;/code&gt; and fill it out as so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.8"&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;auto_deploy_docker&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# name of the service&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;auto-deploy-docker&lt;/span&gt; &lt;span class="c1"&gt;# the image to use&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;auto-deploy-docker&lt;/span&gt; &lt;span class="c1"&gt;# what to label the container for docker ps&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;80:80&lt;/span&gt; &lt;span class="c1"&gt;# note, we're mapping to port 80 instead of 5000 because we'll use 80 on the VPS&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;unless-stopped&lt;/span&gt; &lt;span class="c1"&gt;# restart if failed, until we stop it ourselves&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Give it a shot (again, make sure you stop the previous &lt;code&gt;docker run&lt;/code&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# bring everything up (will run in background)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up &lt;span class="nt"&gt;-d&lt;/span&gt;

&lt;span class="c"&gt;# tear everything down&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose down
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(local shell)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Nice. We've got everything up and running locally. &lt;a href="https://github.com/git-guides/"&gt;Commit your app to GitHub&lt;/a&gt;, and make a &lt;code&gt;live&lt;/code&gt; branch that reflects what will be live on our VPS. This is where we'll push changes to have them deployed on the server.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#dropping-our-app-on-the-vps"&gt;
  &lt;/a&gt;
  üíª Dropping our app on the VPS
&lt;/h3&gt;

&lt;p&gt;It's time to take things remote. SSH into your VPS (I'm using &lt;a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/"&gt;PuTTY&lt;/a&gt;), and make sure you have Git and Docker installed. I'm using a Debian with Docker image from OVH. &lt;a href="https://us.ovh.com/us/order/vps/?v=3#/vps/build?selection=~(range~'Starter~flavor~'vps-starter-1-2-20~datacenters~(BHS~1)~pricingMode~'default)"&gt;At the moment, they're doing a nice $3.50 a month VPS.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Start by enabling credential caching. This will save our GitHub username and Personal Access Token. &lt;strong&gt;It will, however, save it in plaintext, so make sure you have tight control over your VPS.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; credential.helper store
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, clone your repo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/toficofi/auto-deploy-docker.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;auto-deploy-docker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Git will prompt you to log into GitHub if you haven't already. You can't use your GitHub password here, you'll need to &lt;a href="https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token"&gt;generate a Personal Access Token&lt;/a&gt; and use that in place of a password. &lt;em&gt;Limit the scopes for the PAT. We only need &lt;code&gt;repo&lt;/code&gt; access on the VPS.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Great! Let's give it a test run.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# build the image on the server&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker build &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;-t&lt;/span&gt; auto-deploy-docker
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up
&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout live &lt;span class="c"&gt;# switch to our live branch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(remote shell)&lt;/em&gt;&lt;br&gt;
Navigate to your server's IP address, and you should see the page up and running. Fantastic!&lt;/p&gt;

&lt;p&gt;Next up, we'll write a bash script for automatically pulling changes and deploying them.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#the-deploy-script"&gt;
  &lt;/a&gt;
  üìù The deploy script
&lt;/h3&gt;

&lt;p&gt;Let's recap where we are.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have an ASP.Net Core app, and we've Dockerized it.&lt;/li&gt;
&lt;li&gt;We've got it on GitHub, and the VPS has the repo pulled.&lt;/li&gt;
&lt;li&gt;We can run &lt;code&gt;docker-compose up&lt;/code&gt; to start our container.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to respond to changes to the code, these are the steps we need to take:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pull down the updated &lt;code&gt;live&lt;/code&gt; branch&lt;/li&gt;
&lt;li&gt;Build the image (which will also build the project)&lt;/li&gt;
&lt;li&gt;Tear down the existing containers&lt;/li&gt;
&lt;li&gt;Start up the existing container&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We'll wrap these steps up in a little &lt;code&gt;deploy.sh&lt;/code&gt; script that will handle this all with a single execution.&lt;/p&gt;

&lt;p&gt;Make the &lt;code&gt;deploy.sh&lt;/code&gt; script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Deploying changes..."&lt;/span&gt;
&lt;span class="c"&gt;# Pull changes from the live branch&lt;/span&gt;
git pull

&lt;span class="c"&gt;# Build the image with the new changes&lt;/span&gt;
docker build &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;-t&lt;/span&gt; auto-deploy-docker

&lt;span class="c"&gt;# Shut down the existing containers&lt;/span&gt;
docker-compose down

&lt;span class="c"&gt;# Start the new containers&lt;/span&gt;
docker-compose up &lt;span class="nt"&gt;-d&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Deployed!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: If you're developing on a Windows platform, make sure you change your line endings to use &lt;code&gt;\r&lt;/code&gt; (Unix-style) instead of &lt;code&gt;\r\n&lt;/code&gt;, or bash on the server won't understand the script.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Make the script executable, and give it a shot!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;chmod&lt;/span&gt; +x deploy.sh
&lt;span class="nv"&gt;$ &lt;/span&gt;deploy.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(remote shell)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It might take a couple of minutes, but you'll be able to watch it pull changes, build your image, and start the containers up. &lt;/p&gt;

&lt;p&gt;Connect to your VPS and you should see the app!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#setting-up-the-github-action"&gt;
  &lt;/a&gt;
  ‚ö° Setting up the GitHub Action
&lt;/h3&gt;

&lt;p&gt;We've got our &lt;code&gt;deploy.sh&lt;/code&gt; script ready to go. The final piece of the puzzle is to set up a GitHub Action that will automatically invoke this script whenever the &lt;code&gt;live&lt;/code&gt; branch has been updated, completing the loop.&lt;/p&gt;

&lt;p&gt;Jump onto your repo on GitHub, navigate to the &lt;em&gt;Actions&lt;/em&gt; page and hit &lt;em&gt;skip this and set up a workflow yourself&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F3mUdDN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o10cr2ga7eufwj4r7fcm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F3mUdDN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o10cr2ga7eufwj4r7fcm.png" alt="aa"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll be presented with a templated Workflow script. It looks a little overwhelming, but it's really just a list of "actions". Each Action is triggered by something, like a push to a branch. It will then execute a sequence of steps in a GitHub-provided container. &lt;a href="https://docs.github.com/en/actions"&gt;You can read more about Actions here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're just going to use the action to SSH and invoke our &lt;code&gt;deploy.sh&lt;/code&gt; script whenever the &lt;code&gt;live&lt;/code&gt; branch is pushed to.&lt;/p&gt;

&lt;p&gt;Drop this workflow script in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy&lt;/span&gt;

&lt;span class="c1"&gt;# Controls when the workflow will run&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# Triggers the workflow on push or pull request events but only for the live branch&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;live&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;live&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

  &lt;span class="c1"&gt;# Allows you to run this workflow manually from the Actions tab&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="c1"&gt;# A workflow run is made up of one or more jobs that can run sequentially or in parallel&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# The type of runner that the job will run on&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="c1"&gt;# Steps represent a sequence of tasks that will be executed as part of the job&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;log into VPS and trigger deploy script&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;appleboy/ssh-action@master&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.HOST }}&lt;/span&gt; &lt;span class="c1"&gt;# uses secrets stored in the Secrets tab&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.USERNAME }}&lt;/span&gt;
          &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.PASSWORD }}&lt;/span&gt;
          &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.PORT }}&lt;/span&gt;
          &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sh deploy.sh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should be pretty self explanatory. Commit the workflow script to the &lt;code&gt;live&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;We'll need to allow the Action to access our SSH host, username, password and port. Go to Settings &amp;gt; Secrets.&lt;/p&gt;

&lt;p&gt;Add secrets for &lt;code&gt;HOST&lt;/code&gt; (IP/domain for your server), &lt;code&gt;USERNAME&lt;/code&gt; (ssh username), &lt;code&gt;PASSWORD&lt;/code&gt; (ssh password) &lt;code&gt;PORT&lt;/code&gt; (probably 22).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8d20_IT9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3p5wu96r9exirddmal8r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8d20_IT9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3p5wu96r9exirddmal8r.png" alt="secrets"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE: These secrets are accessible to anyone with Contributor access to the repository, which means they'll be able to log into your VPS. Be careful.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With the secrets added, that should be us ready to go. Let's give it a whirl! &lt;/p&gt;

&lt;p&gt;On your local machine, make a change to your app. For example, we'll change &lt;code&gt;Index.cshtml&lt;/code&gt; to show "Hello, Auto Deploy!"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"display-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Welcome&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello, Auto Deploy!&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Push your changes to the &lt;code&gt;live&lt;/code&gt; branch, and jump onto GitHub to watch the action. You'll be able to see GitHub executing each step for you. Once it's done, navigate to your server IP/domain and some ‚ú®magic‚ú® has happened!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZE33u3je--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghdhxrkqnsv51ya5l9x0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZE33u3je--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghdhxrkqnsv51ya5l9x0.png" alt="done"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  üéÅ Wrapping up
&lt;/h2&gt;

&lt;p&gt;Now that you've completed this guide, you'll be able to deploy your changes on your VPS with a simple &lt;code&gt;git push&lt;/code&gt;. This will save you a ton of time, and makes a foundation for a CI/CD pipelines.&lt;/p&gt;

&lt;p&gt;Here are some next steps you might take:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run some tests as part of your deployment pipeline&lt;/li&gt;
&lt;li&gt;Build the app using GitHub Actions, and send over the binaries via SCP instead of maintaining a repo on the VPS&lt;/li&gt;
&lt;li&gt;Send yourself a notification when the deployment has completed with &lt;a href="https://github.com/GustavoKatel/pushbullet-cli"&gt;PushBullet CLI&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;üéâ Thanks for reading! &lt;a href="https://twitter.com/toficofi"&gt;You can find me on Twitter here.&lt;/a&gt; and on &lt;a href="https://www.linkedin.com/in/josh-lee-15459b10a/"&gt;LinkedIn&lt;/a&gt; here.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>github</category>
      <category>devops</category>
    </item>
    <item>
      <title>URL Shortener with Rust, Svelte, &amp; AWS (2/): Simple HTTP API</title>
      <author>Miles Watson</author>
      <pubDate>Mon, 20 Sep 2021 20:32:32 +0000</pubDate>
      <link>https://dev.to/mileswatson/url-shortener-with-rust-svelte-aws-2-simple-http-api-3kg6</link>
      <guid>https://dev.to/mileswatson/url-shortener-with-rust-svelte-aws-2-simple-http-api-3kg6</guid>
      <description>&lt;p&gt;In the first post of the series, I covered the reasons for choosing Rust and AWS, as well as the process for initialising a new Rust project. If you haven't followed the steps in that article, you can find it &lt;a href="https://dev.toTODO"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article, we will create a simple URL-shortener API, and serve the endpoint locally. For the web framework, we will be using &lt;a href="https://rocket.rs/"&gt;Rocket&lt;/a&gt; to reduce the amount of boilerplate and help us focus on the application logic.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-started-with-rocket"&gt;
  &lt;/a&gt;
  Getting Started with Rocket
&lt;/h3&gt;

&lt;p&gt;Before we can use Rocket, we need to add it to our list of dependencies (cargo.toml). We'll be using the JSON feature&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[dependencies]&lt;/span&gt;
&lt;span class="py"&gt;rocket&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.5.0-rc.1"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To check everything is working, copy the following code to &lt;code&gt;main.rs&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[macro_use]&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="n"&gt;crate&lt;/span&gt; &lt;span class="n"&gt;rocket&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;#[get(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nd"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;'static&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;#[launch]&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;rocket&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nn"&gt;rocket&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nd"&gt;routes!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you start the program with &lt;code&gt;cargo run&lt;/code&gt;, you should be presented with the following message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;üöÄ Rocket has launched from http://127.0.0.1:8000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you open the link in a web browser, you should be presented with the expected "Hello, World!" message.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#concurrent-hashmap"&gt;
  &lt;/a&gt;
  Concurrent HashMap
&lt;/h3&gt;

&lt;p&gt;To store pairings of shortened URLs to full URLs, we will use a hashmap. However, we need to share this map across threads - those familiar with Rust will know that this can be quite tricky due to the restrictions of the borrow checker.&lt;/p&gt;

&lt;p&gt;One approach to solving this would be to simply wrap a &lt;code&gt;HashMap&lt;/code&gt; in a &lt;code&gt;Mutex&lt;/code&gt; for controlling concurrent accesses, and then use an &lt;code&gt;Arc&lt;/code&gt; for referencing counting. However, we can simplify this in two ways.&lt;/p&gt;

&lt;p&gt;Firstly, we can use the &lt;a href="https://docs.rs/dashmap/"&gt;dashmap&lt;/a&gt; crate for a fast, concurrent hashmap (&lt;code&gt;DashMap&lt;/code&gt; implements &lt;code&gt;Sync&lt;/code&gt; so it can be shared safely across threads). Although perhaps overkill for our use-case, dashmap provides better performance than naively using an &lt;code&gt;RwLock&lt;/code&gt;. To install it, add the following dependency to &lt;code&gt;cargo.toml&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="py"&gt;dashmap&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"4.0.2"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As for sharing this state across threads, we only need to access it from endpoints: therefore we can just let Rocket manage it directly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[launch]&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;rocket&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nn"&gt;rocket&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.manage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;DashMap&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="nf"&gt;.mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nd"&gt;routes!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more information on state in Rocket, you can check the &lt;a href="https://rocket.rs/v0.5-rc/guide/state/"&gt;Rocket docs&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-endpoints"&gt;
  &lt;/a&gt;
  Creating the endpoints
&lt;/h3&gt;

&lt;p&gt;Now we need to create the actual endpoints to allow users to create and follow shortened URLs. For random number generation, we will use the &lt;a href="https://docs.rs/rand/"&gt;rand&lt;/a&gt; crate, so add the following to your dependency list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="py"&gt;rand&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.8.4"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first endpoint will listen to POST requests of the form &lt;code&gt;/api/shorten?url=___&lt;/code&gt;, and then generate a random url to return. It will return an error if the url field is empty, or a key if the URL was added to the hashmap.&lt;/p&gt;

&lt;p&gt;Rocket will automatically parse the URL parameter and inject the managed hashmap.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[post(&lt;/span&gt;&lt;span class="s"&gt;"/api/shorten?&amp;lt;url&amp;gt;"&lt;/span&gt;&lt;span class="nd"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;shorten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BadRequest&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="nf"&gt;.is_empty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;BadRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"URL is empty!"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u32&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;thread_rng&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.gen&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="nf"&gt;.insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The other endpoint will listen to GET requests of the form &lt;code&gt;/&amp;lt;key&amp;gt;&lt;/code&gt; where  is a number. If the key exists in the hashmap, then it will redirect the user to the corresponding URL. Otherwise, it will return an error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[get(&lt;/span&gt;&lt;span class="s"&gt;"/&amp;lt;key&amp;gt;"&lt;/span&gt;&lt;span class="nd"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NotFound&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt;
        &lt;span class="nf"&gt;.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.map&lt;/span&gt;&lt;span class="p"&gt;(|&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nn"&gt;Redirect&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
        &lt;span class="nf"&gt;.ok_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;NotFound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Invalid or expired link!"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember to update your &lt;code&gt;rocket&lt;/code&gt; function to mount the new routes!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#manual-testing"&gt;
  &lt;/a&gt;
  Manual Testing
&lt;/h3&gt;

&lt;p&gt;To check that your API is working as expected, you can use a tool like Postman or Curl to make POST requests, then enter the link manually in a browser. To use curl, try the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-X&lt;/span&gt; POST &lt;span class="nt"&gt;-G&lt;/span&gt; &lt;span class="nt"&gt;--data-urlencode&lt;/span&gt; &lt;span class="s1"&gt;'url=https://duck.com'&lt;/span&gt; http://localhost:8000/api/shorten
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Warning: In PowerShell, &lt;code&gt;curl&lt;/code&gt; is simply an alias for &lt;code&gt;Invoke-WebRequest&lt;/code&gt;, therefore this command may not work without installing it manually.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You should see the endpoint respond with a number - use this in your browser to make the GET request. If your number was 123, for example, you should enter &lt;code&gt;http://127.0.0.1:8000/123&lt;/code&gt; into your address bar. You should be automatically redirected to whatever URL you set in the previous POST request.&lt;/p&gt;

&lt;p&gt;If you are having any issues, check out the &lt;a href="https://github.com/mileswatson/url-shortener/tree/part-2"&gt;part-2 tag&lt;/a&gt; of my repo.&lt;/p&gt;

&lt;p&gt;That's all for this post! In the next post, we will create a simple HTTP API with the Rocket web framework. Make sure to click the "Follow" button if you want to be alerted when the next part is available!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#footnote"&gt;
  &lt;/a&gt;
  Footnote
&lt;/h4&gt;

&lt;p&gt;If you enjoyed reading this, then consider dropping a like or following me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/mileswatson"&gt;DEV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hashnode.com/@mileswatson"&gt;Hashnode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/miles__watson"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mileswatson"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm just starting out, so the support is greatly appreciated!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer - I'm a (mostly) self-taught programmer, and I use my blog to share things that I've learnt on my journey to becoming a better developer. Because of this, I apologize in advance for any inaccuracies I might have made - criticism and corrections are welcome!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>rust</category>
      <category>svelte</category>
      <category>docker</category>
    </item>
  </channel>
</rss>
