<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Angular : RxJS concatMap operator</title>
      <author>diptee</author>
      <pubDate>Sat, 06 Nov 2021 14:41:41 +0000</pubDate>
      <link>https://dev.to/dipteekhd/angular-rxjs-concatmap-operator-4614</link>
      <guid>https://dev.to/dipteekhd/angular-rxjs-concatmap-operator-4614</guid>
      <description>&lt;ul&gt;
&lt;li&gt;In Angular, we use HTTP to get data from backend,HTTP methods always return an observable.Generally we subscribe to that observable and assign response data to class variables to use it in our component.&lt;/li&gt;
&lt;li&gt;But using RxJS operators we can compose multiple observables(data streams) or process  observable data  before subscribing to it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;RxJS concatMap operator&lt;/strong&gt;&lt;br&gt;
It is a High-order Mapping operator an operator that takes value from an outer observable and maps it into inner observable instead of plain values(&lt;strong&gt;Observable emits observable&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;concatMap operator&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Takes each value from the outer observable and maps that value  to observable(called as inner observable) &lt;/li&gt;
&lt;li&gt;Concat all inner observables into a single observable in order  and subscribe to inner observables and emit data of each inner observable into output observable in sequential manner.&lt;/li&gt;
&lt;li&gt;concatMap never subscribes to the next inner observable until the previous one completes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Example:&lt;br&gt;
Display first 3 toppers of the computer department on UI with ROLL NUMBER &amp;amp; MARKS.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o1SHBrE---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qofhfkxmgt9ffcmxa1t0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o1SHBrE---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qofhfkxmgt9ffcmxa1t0.png" alt="toppers" width="381" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://57dhr.csb.app/"&gt;Run live&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we have 2 API’s&lt;br&gt;
1.First API to get roll numbers of first 3 toppers.&lt;br&gt;
2.Second API to get marks of topper taking roll number as input.&lt;/p&gt;

&lt;p&gt;In the above case we need to take all roll numbers from the first API  and pass it to the second API.&lt;br&gt;
Normally in such scenarios developers use a nested subscription approach.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--70WLr5s8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsmq81ny79m0e3umm3ge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--70WLr5s8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsmq81ny79m0e3umm3ge.png" alt="Nested" width="462" height="310"&gt;&lt;/a&gt;&lt;br&gt;
Here due to nested subscription approach output may vary,because we are hitting HTTP requests for each roll number,but here HTTP requests are not completing in sequential manner,depending upon which request completes first that request response data gets pushed in toppersList_1. &lt;/p&gt;

&lt;p&gt;So solution to this problem is use concatMap RxJS operator instead of nested subscription.&lt;br&gt;
For given use-case,we need to use two concatMap operator.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZRNyhVg2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twlmz1i1soc73lx2pgd2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZRNyhVg2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twlmz1i1soc73lx2pgd2.png" alt="concat" width="767" height="406"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First contactMap operator -&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;getToppers_rollNum()&lt;/em&gt; this method returns an Observable of type number[] , conactMap  maps &lt;code&gt;Observable&amp;lt;number[]&amp;gt;&lt;/code&gt; to &lt;code&gt;Observable &amp;lt;number&amp;gt;&lt;/code&gt;(inner observable) then subscribes to inner observable and emit data into output observable(top_3_rollNum$).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second  concatMap operator -&lt;/strong&gt;&lt;br&gt;
Let's consider &lt;strong&gt;top_3_rollNum$&lt;/strong&gt; as outer observable.concatMap takes each roll number from the outer observable and &lt;strong&gt;hits http request sequentially&lt;/strong&gt;(here we have 3 inner observables return by 3 http requests) &amp;amp; emits http response data into output observable(topper_marks$).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;concatMap never hits the next http request until the previous one completes.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Shorthand syntax for above code&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4MsIYZr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7x84zt0xszzv3a45pxfs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4MsIYZr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7x84zt0xszzv3a45pxfs.png" alt="Shorthand " width="764" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So,concatMap is used where sequence of execution matters.&lt;/p&gt;

&lt;p&gt;Thanks for reading! If you found this helpful please share!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>angular</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Applying code formatter to my SSG</title>
      <author>jjung99</author>
      <pubDate>Sat, 06 Nov 2021 13:46:49 +0000</pubDate>
      <link>https://dev.to/jjung99/applying-code-formatter-to-my-ssg-51ce</link>
      <guid>https://dev.to/jjung99/applying-code-formatter-to-my-ssg-51ce</guid>
      <description></description>
    </item>
    <item>
      <title>A server-less CI/CD approach for mono-repo micro-frontends</title>
      <author>Antonio Lagrotteria</author>
      <pubDate>Sat, 06 Nov 2021 13:39:33 +0000</pubDate>
      <link>https://dev.to/aws-builders/a-server-less-cicd-approach-for-mono-repo-micro-frontends-32m6</link>
      <guid>https://dev.to/aws-builders/a-server-less-cicd-approach-for-mono-repo-micro-frontends-32m6</guid>
      <description>&lt;p&gt;This article provides a CI/CD pipeline approach for a GitHub mono-repo-based micro-frontend architecture in AWS, leveraging a series of AWS server-less services such as AWS &lt;a href="https://aws.amazon.com/codepipeline"&gt;CodePipeline&lt;/a&gt;, &lt;a href="https://aws.amazon.com/codebuild"&gt;CodeBuild &lt;/a&gt;and &lt;a href="https://aws.amazon.com/codedeploy/"&gt;CodeDeploy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Micro-frontends come with an increase of the complexity of managing the infrastructure, which makes it crucial for organizations to carefully invest their time in supporting continuous integration (CI), continuous deployment (CD) pipelines and automatic tools that scale along with the organization.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zcBblgRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2400/1%2AIHjJA1RJpWif1UtWcjiD1g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zcBblgRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2400/1%2AIHjJA1RJpWif1UtWcjiD1g.png" alt="A CI/CD for building mono repo micro-frontends" width="880" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The proposed approach provides a scalable option for organizations to scale their tech micro-frontend ecosystem, keep teams autonomous and let them focus on business and early feedback with a fast release cycle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-context-mono-and-poly-repos"&gt;
  &lt;/a&gt;
  Some context: Mono and Poly repos
&lt;/h2&gt;

&lt;p&gt;Before diving in the architecture, let’s mention the main approaches for structuring a micro-frontend module.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mono repos:&lt;/strong&gt; all the teams work on a single repository&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Poly (multi)-repos:&lt;/strong&gt; each domain specific micro-frontend is located in its own repository and owned by a single team.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This PoC will focus on a hands-on, detailed and pragmatic CI/CD setup based on a mono-repo with main branch as source of the pipelines changes. For a great overview and detailed comparison I recommend an upcoming &lt;a href="https://www.buildingmicrofrontends.com/"&gt;book &lt;/a&gt;from Luca Mezzalira.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#architecture"&gt;
  &lt;/a&gt;
  Architecture
&lt;/h2&gt;

&lt;p&gt;The architecture is based on a scenario where a company is implementing micro-frontends on a mono GitHub repository and wishes to implement a server-less CI/CD pipeline in AWS.&lt;/p&gt;

&lt;p&gt;For this PoC, the mono-repo contains two trivial Angular micro-frontends, &lt;em&gt;mfe-accounts&lt;/em&gt; and &lt;em&gt;mfe-payments&lt;/em&gt;, though this model allows you to write each module independently with any framework of choice:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H5gPbNMA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AbxYzUMH6TnjmGRwkXgC6GQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H5gPbNMA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AbxYzUMH6TnjmGRwkXgC6GQ.png" alt="Mono-repo structure" width="330" height="251"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The scenario involves some steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Developers push their code to the main branch in GitHub, which will trigger a push event via &lt;a href="https://docs.github.com/en/developers/webhooks-and-events/webhooks/about-webhooks"&gt;GitHub webhooks&lt;/a&gt; to an &lt;a href="https://aws.amazon.com/api-gateway/"&gt;AWS API Gateway&lt;/a&gt; responsible to handle the event.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The API Gateway triggers an &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt; function which authenticates the request, analyses the event and, based on affected files, triggers a pipeline for the micro-frontend where the files belong to.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One or more pipelines start building, testing and deployment actions via &lt;a href="https://aws.amazon.com/codepipeline/"&gt;AWS CodePipeline&lt;/a&gt;, &lt;a href="https://aws.amazon.com/codebuild/"&gt;CodeBuild &lt;/a&gt;and &lt;a href="https://aws.amazon.com/codedeploy/"&gt;CodeDeploy&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Changes are available in S3 bucket and exposed on a &lt;a href="https://aws.amazon.com/cloudfront/"&gt;Cloudfront&lt;/a&gt; distribution.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets deep dive in the setup.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-gateway-setup"&gt;
  &lt;/a&gt;
  API gateway setup
&lt;/h2&gt;

&lt;p&gt;GitHub allows to setup integrations towards its events, such as repository pushes, via &lt;a href="https://docs.github.com/en/developers/webhooks-and-events/webhooks/about-webhooks"&gt;webhooks&lt;/a&gt;, which POST a GitHub event data payload towards an endpoint. Let’s expose a RESTful API in AWS via API Gateway containing a single POST endpoints as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WLkxdsLy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ANqZHmyRKTLt-7k8nCyIcZg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WLkxdsLy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ANqZHmyRKTLt-7k8nCyIcZg.gif" alt="Create API Gateway" width="600" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In above screen, we use a &lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html"&gt;Lambda integration proxy&lt;/a&gt; because our associated “Hello World” Lambda will need to access the API Gateway request headers in order to authenticate GitHub upcoming requests. With the API in place, let’s create the webhook.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-webhook-setup"&gt;
  &lt;/a&gt;
  GitHub Webhook setup
&lt;/h2&gt;

&lt;p&gt;Once the API Gateway has been deployed in a stage, it is time to create a GitHub webhook, (refer to this &lt;a href="https://docs.github.com/en/github/setting-up-and-managing-your-enterprise/managing-organizations-in-your-enterprise-account/configuring-webhooks-for-organization-events-in-your-enterprise-account"&gt;intuitive guide&lt;/a&gt;). &lt;strong&gt;&lt;em&gt;Important&lt;/em&gt;&lt;/strong&gt;: provide a secret to make sure that our Lambda can accept requests only coming from the webhook (more on this later).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o6dOIMRu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AJQxroMYLlDxW0Rq6rORHuA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o6dOIMRu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AJQxroMYLlDxW0Rq6rORHuA.gif" alt="Create a GitHub webhook" width="600" height="285"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The integration is ready! Pushing a file to the repository will result in a “Hello world” message triggered by the Lambda, which can be seen under its stream logs in &lt;a href="https://aws.amazon.com/cloudwatch/"&gt;Cloudwatch&lt;/a&gt;. Let’s now update Lambda code to make sure that we support CI/CD for any micro-frontends in your repo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#microfrontend-strategy-on-lambda-setup"&gt;
  &lt;/a&gt;
  Micro-frontend strategy on Lambda setup
&lt;/h2&gt;

&lt;p&gt;The ultimate goal of the Lambda function is that given a GitHub push event containing repo commits, then it triggers one or more pipelines for any affected micro-frontend. Let’s look in details at below gist:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First, Lambda authenticates requests only coming from the GitHub webhook by validating the SHA256 request header via a HMAC256 security check, using the crypto module. This check is based on the secret defined in the GitHub webhook earlier and also stored in AWS Secret Manager (follow &lt;a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/tutorials_basic.html"&gt;this tutorial&lt;/a&gt;). Lambda will access the secret in a secure way via the IAM action &lt;em&gt;secretsmanager:GetSecretValue&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once validated, the payload is used to infer which micro-frontends have been affected, by extracting its name from the added/modified and removed files from the commits list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If any micro-frontend has changed, we trigger a new build in &lt;a href="https://aws.amazon.com/codepipeline/"&gt;AWS CodePipeline&lt;/a&gt; which will build and deploy the micro-frontend. For simplicity the pipeline is called the same as the micro-frontend which is going to build. The AWS SDK client library requires an IAM role allowing &lt;em&gt;codepipeline:StartPipelineExecution&lt;/em&gt; action to access the resource&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall Lambda code can be seen &lt;a href="https://github.com/aladevlearning/microfrontends-pipeline/blob/main/aws/lambdas/pipeline-ci/index.js"&gt;here&lt;/a&gt;. Now it is time to create the pipeline itself, which is part of the next section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-pipeline-setup"&gt;
  &lt;/a&gt;
  Code Pipeline setup
&lt;/h2&gt;

&lt;p&gt;The creation of a Code Pipeline in AWS involves many steps and concepts, so I will try to keep it simple. Code Pipeline helps to automate release pipelines for fast and reliable application and infrastructure updates. Each steps, here called &lt;em&gt;stages&lt;/em&gt;, perform actions on the involved build artifacts. I will look into how:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create the pipeline by choosing some settings&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add a Source stage, answering the question “from where does the code to build come from?”&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add a Build stage: “how do I build the source code you just provided?”&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add a Deploy stage: “how and where do I deploy the build artifact you just provided?”&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main idea will be to isolate each CodePipeline and CodeBuild project to give flexibility and ownership to each team to manage that process within the team. Optimizations such as reuse of pipelines for similar projects and CloudFormation template are out of scope.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-pipeline-by-choosing-settings"&gt;
  &lt;/a&gt;
  Create pipeline by choosing settings
&lt;/h3&gt;

&lt;p&gt;First, create a pipeline by providing a name matching the building micro-frontend and default settings, as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zbMi19Nk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AS1ImESpU2mpnRv-LVsdoMA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zbMi19Nk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AS1ImESpU2mpnRv-LVsdoMA.gif" alt="First step of creating a pipeline." width="600" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#source-stage"&gt;
  &lt;/a&gt;
  Source Stage
&lt;/h3&gt;

&lt;p&gt;This stage links the source code to be processed with Code Pipeline. We will connect CodePipeline with our GitHub repo by clicking the Connect button and initiating a wizard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lrkkkQXj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ANpEkKgDO3-eb-VLZ3_RCZQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lrkkkQXj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ANpEkKgDO3-eb-VLZ3_RCZQ.png" alt="Connect Pipeline with GitHub" width="606" height="663"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the end of the wizard, as shown below, you will be able:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;to access your GitHub repo (&lt;em&gt;aladevlearning/microfrontends-pipeline&lt;/em&gt; in my case)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to select the *main *branch&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to unselect the &lt;em&gt;Start pipeline on source code changes&lt;/em&gt;, as we want to have it handled by the Lambda function&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;and click Next to proceed to the next stage.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Above steps can be seen in below gif.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a81f5YpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A2qMyfsPlTH1g3183CwJXxw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a81f5YpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A2qMyfsPlTH1g3183CwJXxw.gif" alt="Add source stage in CodePipeline" width="600" height="291"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-stage"&gt;
  &lt;/a&gt;
  Build Stage
&lt;/h3&gt;

&lt;p&gt;This stage is responsible to build the source received in previous stage. It will create or reuse an existing *CodeBuild *project, which instructs the pipeline on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;how to run the build, via a &lt;em&gt;builspec.yml&lt;/em&gt; file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;where CodeBuild will practically make the build&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In regards to &lt;em&gt;buildspec.yml *we can decide whether having a common file for all micro-frontends or having one for each of them. This highly depends on whether all micro-frontends adhere to same framework of choice and same build / test steps. By keeping them separate you give each team independence on how to build it, at the cost of slightly more complex overview on build process and governance. For our micro-frontend, the file looks like below:&lt;br&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
A *buildspec.yaml&lt;/em&gt; consists of intuitive phases for installing/prepping the environment, building the code and instructing how to structure the artifacts. After getting the micro-frontend name from the pipeline initiator, the file installs dependencies and zips the final artifact, which will be deployed to S3 bucket specified in the Deploy section. See &lt;a href="https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html"&gt;this guide for more details&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, the building process requires an environment (aka: machine) where to run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G769tdDb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ArmXTOdRcT99YFm78HdnDsw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G769tdDb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ArmXTOdRcT99YFm78HdnDsw.gif" alt="Create a Code Build project" width="600" height="668"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Above gif shows how CodeBuild configuration is based on a &lt;em&gt;build environment, *which represents a combination of operating system, programming language runtime, and tools that are used to run a build. We also selected a specific *buildspec.yml&lt;/em&gt; file location as each micro-frontend could differ in terms of build process and pipeline (e.g. one could be an Angular project and another be a React one, or both still using same framework but being built with different steps).&lt;/p&gt;

&lt;p&gt;Once the Code build project is setup, we set the build provider to be Code Build, we select the newly created Code Build project (&lt;em&gt;mfe-accounts-build&lt;/em&gt;) and continue to the final stage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DvtrsA1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AYlPorAgo2sNf5lfw-We5nQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DvtrsA1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AYlPorAgo2sNf5lfw-We5nQ.gif" alt="Create Build stage" width="600" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Build project created, let’s move to the final stage of CodePipeline.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploy-stage"&gt;
  &lt;/a&gt;
  Deploy Stage
&lt;/h3&gt;

&lt;p&gt;Finally, we want to deploy our artifact on S3. In order to do that, we need to &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-overview.html"&gt;create S3 buckets&lt;/a&gt; where the artifact will be independently deployed. As CodeBuild will zip the built artifact, we check the &lt;em&gt;Extract file before deploy *settings and set the *Canned ACL&lt;/em&gt; to public-read, given we want to be able to see the deployed artifacts in S3.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z3fKSK-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AscmER-OcW5nDxIUHzEMPJA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z3fKSK-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AscmER-OcW5nDxIUHzEMPJA.gif" alt="Create Deploy stage" width="600" height="285"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s great! Your code is now deployed in S3 which allows to associate it with &lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/cloudfront-serve-static-website/"&gt;a CloudFront distribution&lt;/a&gt; for better deployment. Above steps for the CodePipeline should be repeated for any micro-frontend. This level of redundancy will allow each team to be independent and autonomous, tweak their CI/CD to&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h2&gt;

&lt;p&gt;Upon push to repository affecting the micro-frontend containing the change, one or more code pipelines will start.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vk_kAgp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ATxua6bFrunxGlwrBttboIA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vk_kAgp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ATxua6bFrunxGlwrBttboIA.gif" alt="Pipelines coming alive" width="600" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Successful pipelines will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m8Nx8fDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AGrH0Um70FpOdan4SIkFVmw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m8Nx8fDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AGrH0Um70FpOdan4SIkFVmw.png" alt="Successful pipeline" width="484" height="857"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The deployed artifact is located under the specified S3 bucket:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RZNcqjCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3120/1%2AIsniGXK_oAwKXdtXUp6bhA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RZNcqjCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3120/1%2AIsniGXK_oAwKXdtXUp6bhA.png" alt="S3 bucket for deployed micro-frontend" width="880" height="416"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Associated with a Cloudfront distribution, our deployed micro-frontend will look as this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kOYn8JvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2ADuW0-nm785bugWCnNMPXPA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOYn8JvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2ADuW0-nm785bugWCnNMPXPA.png" alt="" width="880" height="310"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Full code can be found &lt;a href="https://github.com/aladevlearning/microfrontends-pipeline"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary-and-ideas"&gt;
  &lt;/a&gt;
  Summary and ideas
&lt;/h2&gt;

&lt;p&gt;This article went in depth to provide a 10 minutes setup to make a seamless CI/CD pipeline for a mono-repo based frontend architecture. This should be seen as a workable, though initial approach which can be explored in so many ways, proving yet again how great and creative is to build things in AWS. Some ideas could be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Have different pipelines to cover different needs, such as different framework, test suite, integration and functional testing, multi stage environment, etc…&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;publish artifacts in different AWS Accounts, one for test and one for production, to keep isolation and security in place.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extend approach for feature branch CI/CD, where you could created branch deployments for early prototyping and feedback, without blocking the main branch.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make the above as a CloudFormation template. This is a must to elevate this approach and consistently repeat it for any micro-frontend.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CloudFront invalidation step. If interested in adding CloudFront in the pipeline, a cache invalidation step via a Lambda function may be necessary to make sure all latest changes are correctly propagated to the consumers (or maybe AWS will take it as feedback and expose it as this seems a pretty used pattern).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/devops/complete-ci-cd-with-aws-codecommit-aws-codebuild-aws-codedeploy-and-aws-codepipeline/"&gt;&lt;strong&gt;Complete CI/CD with AWS CodeCommit, AWS CodeBuild, AWS CodeDeploy, and AWS CodePipeline | Amazon Web…&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.buildingmicrofrontends.com"&gt;&lt;strong&gt;Building Micro-Frontends: the book&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How To create an API using Node.js, Express, and Typescript</title>
      <author>Nayan Patil</author>
      <pubDate>Sat, 06 Nov 2021 13:30:55 +0000</pubDate>
      <link>https://dev.to/nayanpatil1998/how-to-create-an-api-using-nodejs-express-and-typescript-89d</link>
      <guid>https://dev.to/nayanpatil1998/how-to-create-an-api-using-nodejs-express-and-typescript-89d</guid>
      <description>&lt;p&gt;In this article, we will learn to create an API server using the Express framework and Typescript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-api"&gt;
  &lt;/a&gt;
  What is API?
&lt;/h3&gt;

&lt;p&gt;An API (Application Programming Interface) is a way of interacting with a service, through a series of predefined requests.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#express"&gt;
  &lt;/a&gt;
  Express
&lt;/h3&gt;

&lt;p&gt;Express is an open-source web framework, for Node.js, designed to make developing websites, web apps, and API's easier.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typescript"&gt;
  &lt;/a&gt;
  Typescript
&lt;/h3&gt;

&lt;p&gt;TypeScript is JavaScript with syntax for types, it is a strongly typed programming language that builds on JavaScript, giving you better tooling at any scale.&lt;/p&gt;

&lt;p&gt;so let's dive into the tutorial,&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Basic knowledge of  &lt;a href="https://nodejs.org/en/"&gt;NodeJs&lt;/a&gt;  and Javascript&lt;/li&gt;
&lt;li&gt;Basics of TypeScript&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-1-initialize-the-npm-project"&gt;
  &lt;/a&gt;
  Step 1: Initialize the npm project
&lt;/h2&gt;

&lt;p&gt;To initialize the project in the working directory and create a &lt;em&gt;package.json&lt;/em&gt; file by running the below command in terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running this command it will create the &lt;em&gt;package.json&lt;/em&gt; file in the working directory&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-installing-the-dependencies"&gt;
  &lt;/a&gt;
  Step 2: Installing the dependencies
&lt;/h2&gt;

&lt;p&gt;Now we have to install the required dependencies to create this API&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;express dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Dotenv&lt;/strong&gt; - Dotenv is a zero-dependency module that loads environment variables from a .env file into process.env&lt;/p&gt;

&lt;p&gt;Now we need to install the dev dependencies for typescript support&lt;br&gt;
using --save-dev flag&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @types/node @types/express nodemon ts-node &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now create a &lt;em&gt;tsconfig.json&lt;/em&gt; file and save it with the below code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"target"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"es6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"module"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"commonjs"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"rootDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"outDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"esModuleInterop"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"strict"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-3-add-scripts-in-packagejson-file-to-run-file"&gt;
  &lt;/a&gt;
  Step 3: Add scripts in &lt;em&gt;package.json&lt;/em&gt; file to run file
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ts-node server.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nodemon --exec ts-node server.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note - server.ts file which we will create in the next step&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-create-a-env-file"&gt;
  &lt;/a&gt;
  Step 4: Create a .env file
&lt;/h2&gt;

&lt;p&gt;There are some details like port number, database URLs, username etc. which should be hidden and not to be exposed to public&lt;/p&gt;

&lt;p&gt;so create a .env file and declare the port number&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PORT=8080 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-5-create-a-serverts-file"&gt;
  &lt;/a&gt;
  Step 5: Create a server.ts file
&lt;/h2&gt;

&lt;p&gt;Now comes an interesting part, creating server.ts file in root folder &lt;/p&gt;

&lt;p&gt;first, we will import the packages&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now get the port number from .env file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the most important part,  declaring '/' endpoint&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server is listening on &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we define a / endpoint, that will return the text Hello World!, and run our application on port 8080.&lt;/p&gt;

&lt;p&gt;Note that the / endpoint will only match for GET requests, as we've defined it using the app.get method.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6-running-our-api"&gt;
  &lt;/a&gt;
  Step 6: Running our API
&lt;/h2&gt;

&lt;p&gt;In your terminal, run the following command to start the application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if you see the output like below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;➜  express-typescript npm run dev

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; express-typescript@1.0.0 dev
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; nodemon &lt;span class="nt"&gt;--exec&lt;/span&gt; ts-node server.ts

&lt;span class="o"&gt;[&lt;/span&gt;nodemon] 2.0.14
&lt;span class="o"&gt;[&lt;/span&gt;nodemon] to restart at any &lt;span class="nb"&gt;time&lt;/span&gt;, enter &lt;span class="sb"&gt;`&lt;/span&gt;rs&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;nodemon] watching path&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="k"&gt;*&lt;/span&gt;.&lt;span class="k"&gt;*&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;nodemon] watching extensions: ts,json
&lt;span class="o"&gt;[&lt;/span&gt;nodemon] starting &lt;span class="sb"&gt;`&lt;/span&gt;ts-node server.ts&lt;span class="sb"&gt;`&lt;/span&gt;
Server is listening on 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! now open your browser and navigate to localhost:8080. If everything worked successfully, "Hello World" should be displayed in your browser.&lt;/p&gt;

&lt;p&gt;Congratulations, You have created API using express and typeScript&lt;/p&gt;

&lt;p&gt;Full code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello worrld&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server is listening on &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Loved the article?&lt;br&gt;
Follow me on - &lt;br&gt;
 &lt;a href="//twitter.com/Nayanp960478"&gt;Twitter&lt;/a&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
      <category>node</category>
    </item>
    <item>
      <title>React Native Football App UI</title>
      <author>Roy Chen</author>
      <pubDate>Sat, 06 Nov 2021 13:26:53 +0000</pubDate>
      <link>https://dev.to/musicoding/react-native-football-app-ui-9a8</link>
      <guid>https://dev.to/musicoding/react-native-football-app-ui-9a8</guid>
      <description>&lt;p&gt;Hi guys!👋🏻👋🏻 Today I will share with you a nice and clean Football app UI by using #ReactNative and #Expo. Hopefully you can learned something from it. &lt;/p&gt;

&lt;p&gt;Detail please check it out &lt;a href="https://youtu.be/LOJdbySUA9U"&gt;https://youtu.be/LOJdbySUA9U&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Happy Coding!!! &lt;br&gt;
Thank you for watching! Make sure to like + Subscribe For More!&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>javascript</category>
      <category>programming</category>
      <category>mobile</category>
    </item>
    <item>
      <title>Rapid Microservices Development in .NET. An introduction.</title>
      <author>Oleksii Nikiforov</author>
      <pubDate>Sat, 06 Nov 2021 13:17:10 +0000</pubDate>
      <link>https://dev.to/nikiforovall/rapid-microservices-development-in-net-an-introduction-jl2</link>
      <guid>https://dev.to/nikiforovall/rapid-microservices-development-in-net-an-introduction-jl2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Learn how to speed up microservices development process by using set of predefined templates and practices. See &lt;a href="https://www.nuget.org/packages/NikiforovAll.CleanArchitecture.Templates/"&gt;https://www.nuget.org/packages/NikiforovAll.CleanArchitecture.Templates/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#problem-statement"&gt;
  &lt;/a&gt;
  Problem Statement
&lt;/h2&gt;

&lt;p&gt;The way we develop software is built around the idea of high velocity and readiness to change and adapt to the market's requirements. This approach brings up the next questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How to successfully contribute to the existing code base?&lt;/li&gt;
&lt;li&gt;How to not break something in meantime?&lt;/li&gt;
&lt;li&gt;How do we reduce the learning curve of an existing solution?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;(1)&lt;/strong&gt; Actually, all you need to do is to write clean, understandable, and open for modification code. The actual craft of writing code is honed through years of learning and making mistakes. Component-level design is important and you can benefit from good predefined solution templates, something like Clean Architecture gives you a good starting point. Also, if you feel like your project has some complex domain you might want to incorporate DDD in the mix. Personally, I find it really useful because it facilitates communication between developers and domain experts. It is easier to map code snippets to domain and project requirements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(2)&lt;/strong&gt; Frequent changes increase the possibility of bugs, as software engineers, we deal with it by extensively testing a codebase. At first glance, you might think writing tests is an additional effort that prevents you from shipping some valuable and urgent features. But, in practice, it is actually another way around, you want to invest in a testing toolkit to save future self from some nasty bugs. Also, tests serve as live documentation and enable refactoring. My suggestion is to be practical about it, don't try to get 100% coverage by writing tons of useless unit tests, determine what is the best in a given context. Simply, write tests, my dude.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(3)&lt;/strong&gt; Clean code reduces the cognitive load and overall complexity of a codebase. In my opinion, for rapid development, you need somewhat consistency for technical decisions. It is a good idea to use common frameworks, libraries, tools, and even cross-cutting concerns code, just make sure it doesn't introduce additional coupling and unnecessary complexity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#proposal"&gt;
  &lt;/a&gt;
  Proposal
&lt;/h3&gt;

&lt;p&gt;Luckily, there is the remedy! Rapid Microservices Development &lt;code&gt;RMD === "remedy"&lt;/code&gt;, got it? 😏&lt;/p&gt;

&lt;p&gt;As an organization responsible for developing microservices solutions you want to build reusable components so it will be easy to create a new microservice from the scratch. Creating project templates is a well-known approach and it is quite simple. Rapid microservice development is a goal and templates might be a viable solution, just be mindful about the goal.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#templates-family"&gt;
  &lt;/a&gt;
  Templates Family
&lt;/h3&gt;

&lt;p&gt;I've created a set of project templates that provides you information of how you might organize microservices solutions yourself. &lt;strong&gt;Note&lt;/strong&gt;, each template might be used individually outside of microservices development context.&lt;/p&gt;

&lt;p&gt;Feedback is highly appreciated. 🙏&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.nuget.org/packages/NikiforovAll.CleanArchitecture.Templates/"&gt;https://www.nuget.org/packages/NikiforovAll.CleanArchitecture.Templates/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All you need to do is to install it via running the command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dotnet new --install NikiforovAll.CleanArchitecture.Templates::1.1.1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once installed, you can see a list of templates by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotnet new &lt;span class="nt"&gt;-l&lt;/span&gt; na-
&lt;span class="c"&gt;# These templates matched your input: 'na-'&lt;/span&gt;

&lt;span class="c"&gt;# Template Name                Short Name  Language  Tags&lt;/span&gt;
&lt;span class="c"&gt;# ---------------------------  ----------  --------  --------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;# Build Project Template       na-bu       bash      build-project/Template&lt;/span&gt;
&lt;span class="c"&gt;# Clean Architecture Template  na-ca       [C#]      CleanArchitecture/DDD/Template&lt;/span&gt;
&lt;span class="c"&gt;# Event Sourcing Template      na-es       [C#]      EventSourcing/CleanArchitecture/DDD/Template&lt;/span&gt;
&lt;span class="c"&gt;# Gateway Template             na-ga       [C#]      gateway/Template&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Alias&lt;/th&gt;
      &lt;th&gt;Repository&lt;/th&gt;
      &lt;th&gt;Status&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Build Project&lt;/td&gt;
      &lt;td&gt;na-bu&lt;/td&gt;
      &lt;td&gt;&lt;a href="https://github.com/NikiforovAll/na-bu" rel="noopener"&gt;https://github.com/NikiforovAll/na-bu&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;N/A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Clean Architecture Template&lt;/td&gt;
      &lt;td&gt;na-ca&lt;/td&gt;
      &lt;td&gt;&lt;a href="https://github.com/NikiforovAll/na-ca" rel="noopener"&gt;https://github.com/NikiforovAll/na-ca&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;
        &lt;a href="https://github.com/NikiforovAll/na-ca/actions/workflows/dotnet.yml" rel="noopener"&gt;
            &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---BJ8r3ob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/NikiforovAll/na-ca/actions/workflows/dotnet.yml/badge.svg" width="103" height="20"&gt;
        &lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Event Sourcing Template&lt;/td&gt;
      &lt;td&gt;na-bu&lt;/td&gt;
      &lt;td&gt;&lt;a href="https://github.com/NikiforovAll/na-es" rel="noopener"&gt;https://github.com/NikiforovAll/na-es&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;
        &lt;a href="https://github.com/NikiforovAll/na-es/actions/workflows/dotnet.yml" rel="noopener"&gt;
            &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nKNmvvZv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/NikiforovAll/na-es/actions/workflows/dotnet.yml/badge.svg" width="103" height="20"&gt;
        &lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Gateway&lt;/td&gt;
      &lt;td&gt;na-ga&lt;/td&gt;
      &lt;td&gt;&lt;a href="https://github.com/NikiforovAll/na-ga" rel="noopener"&gt;https://github.com/NikiforovAll/na-ga&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;
        &lt;a href="https://github.com/NikiforovAll/na-ga/actions/workflows/dotnet.yml" rel="noopener"&gt;
            &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kXlze_S0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/NikiforovAll/na-ga/actions/workflows/dotnet.yml/badge.svg" width="103" height="20"&gt;
        &lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#build-project"&gt;
  &lt;/a&gt;
  Build project
&lt;/h3&gt;

&lt;p&gt;In this blog post I will show you how to create a one of the components yourself.&lt;/p&gt;

&lt;p&gt;The responsibility of build project is a starting project of any developer. The main goal is to have &lt;strong&gt;zero-configuration&lt;/strong&gt; required to get the project up and running, this is really important and people will say thank you for that.&lt;/p&gt;

&lt;p&gt;Build project consists of something like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Scripts to pull code base and latest changes from the remotes.&lt;/li&gt;
&lt;li&gt;Scripts to manage infrastructure used during development. All you need to do is to run &lt;code&gt;docker compose service1, service2, ...&lt;/code&gt; to run the system locally. This is really useful.&lt;/li&gt;
&lt;li&gt;Projects assets, something like architecture documentation, postman collection to speed up manual developer testing, guidelines, etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I will explain the anatomy of the build project from the template in a moment. But first, we need to generate one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotnet new na-bu &lt;span class="nt"&gt;-n&lt;/span&gt; MyFirstBuildProject &lt;span class="nt"&gt;--dry-run&lt;/span&gt;
File actions would have been taken:
  Create: ./.env
  Create: ./.gitignore
  Create: ./.vscode/settings.json
  Create: ./assets/http/gateway/projects.http
  Create: ./assets/http/naca/projects.http
  Create: ./assets/http/naes/projects.http
  Create: ./build/docker_postgres_init.sql
  Create: ./build/execute-tests.sh
  Create: ./build/generate-report.sh
  Create: ./build/run-services.sh
  Create: ./build/setup-infrastructure.sh
  Create: ./docker-compose-local-infrastructure.yml
  Create: ./docker-compose-tests.override.yml
  Create: ./docker-compose-tests.yml
  Create: ./docker-compose.override.yml
  Create: ./docker-compose.yml
  Create: ./docker-images.txt
  Create: ./README.md
  Create: ./routes.conf.json
  Create: ./scripts/generate-report.sh
  Create: ./scripts/git-clone-all.sh
  Create: ./scripts/git-pull-all.sh
  Create: ./scripts/git-summary/.gitignore
  Create: ./scripts/git-summary/git-summary.sh
  Create: ./scripts/git-summary/README.md
  Create: ./scripts/git-summary/screenshot.png
  Create: ./scripts/open-in-browser.sh

&lt;span class="nv"&gt;$ &lt;/span&gt;dotnet new na-bu &lt;span class="nt"&gt;-n&lt;/span&gt; MyFirstBuildProject
The template &lt;span class="s2"&gt;"Build Project Template"&lt;/span&gt; was created successfully.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see we have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;📂 &lt;em&gt;./scripts&lt;/em&gt; - some tools and scripts to manage build project.&lt;/li&gt;
&lt;li&gt;📂 &lt;em&gt;./build&lt;/em&gt; - commands to build, start and test the solution.&lt;/li&gt;
&lt;li&gt;📂 &lt;em&gt;./assets&lt;/em&gt; - project artifacts&lt;/li&gt;
&lt;li&gt;📂 docker-compose.yml, docker-compose-local-infrastructure.yml, docker-compose.override.yml - run system locally&lt;/li&gt;
&lt;li&gt;📂 docker-compose-tests.yml, docker-compose-tests.override.yml - run tests locally&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The template pulls three other predefined templates &lt;code&gt;na-ca&lt;/code&gt;, &lt;code&gt;na-es&lt;/code&gt;, &lt;code&gt;na-ga&lt;/code&gt;. You can change that.&lt;/p&gt;

&lt;p&gt;Let's clone microservices from the &lt;code&gt;na-bu&lt;/code&gt; template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./scripts/git-clone-all.sh
&lt;span class="o"&gt;========================================================&lt;/span&gt;
Cloning repository: na-ca
&lt;span class="o"&gt;========================================================&lt;/span&gt;
Cloning into &lt;span class="s1"&gt;'na-ca'&lt;/span&gt;...
remote: Enumerating objects: 1146, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Counting objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;1146/1146&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Compressing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;568/568&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Total 1146 &lt;span class="o"&gt;(&lt;/span&gt;delta 673&lt;span class="o"&gt;)&lt;/span&gt;, reused 968 &lt;span class="o"&gt;(&lt;/span&gt;delta 506&lt;span class="o"&gt;)&lt;/span&gt;, pack-reused 0Receiving objects:  96% &lt;span class="o"&gt;(&lt;/span&gt;1101/1146&lt;span class="o"&gt;)&lt;/span&gt;
Receiving objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;1146/1146&lt;span class="o"&gt;)&lt;/span&gt;, 172.02 KiB | 978.00 KiB/s, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
Resolving deltas: 100% &lt;span class="o"&gt;(&lt;/span&gt;673/673&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;========================================================&lt;/span&gt;
Cloning repository: na-es
&lt;span class="o"&gt;========================================================&lt;/span&gt;
Cloning into &lt;span class="s1"&gt;'na-es'&lt;/span&gt;...
remote: Enumerating objects: 1019, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Counting objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;1019/1019&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Compressing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;523/523&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Total 1019 &lt;span class="o"&gt;(&lt;/span&gt;delta 571&lt;span class="o"&gt;)&lt;/span&gt;, reused 870 &lt;span class="o"&gt;(&lt;/span&gt;delta 430&lt;span class="o"&gt;)&lt;/span&gt;, pack-reused 0R
Receiving objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;1019/1019&lt;span class="o"&gt;)&lt;/span&gt;, 173.87 KiB | 1.26 MiB/s, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
Resolving deltas: 100% &lt;span class="o"&gt;(&lt;/span&gt;571/571&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
Updating files: 100% &lt;span class="o"&gt;(&lt;/span&gt;183/183&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;========================================================&lt;/span&gt;
Cloning repository: na-ga
&lt;span class="o"&gt;========================================================&lt;/span&gt;
Cloning into &lt;span class="s1"&gt;'na-ga'&lt;/span&gt;...
remote: Enumerating objects: 53, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Counting objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;53/53&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Compressing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;35/35&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Total 53 &lt;span class="o"&gt;(&lt;/span&gt;delta 15&lt;span class="o"&gt;)&lt;/span&gt;, reused 46 &lt;span class="o"&gt;(&lt;/span&gt;delta 8&lt;span class="o"&gt;)&lt;/span&gt;, pack-reused 0
Receiving objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;53/53&lt;span class="o"&gt;)&lt;/span&gt;, 18.59 KiB | 2.66 MiB/s, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
Resolving deltas: 100% &lt;span class="o"&gt;(&lt;/span&gt;15/15&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check the current state of the solution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./scripts/git-summary/git-summary.sh
Repository                       Branch Remote State
&lt;span class="o"&gt;================================&lt;/span&gt; &lt;span class="o"&gt;====&lt;/span&gt; &lt;span class="o"&gt;======&lt;/span&gt; &lt;span class="o"&gt;=====&lt;/span&gt;
/d/dev/MyFirstBuildProject       main ?  &lt;span class="nt"&gt;--&lt;/span&gt;
/d/dev/MyFirstBuildProject/na-ca main origin
/d/dev/MyFirstBuildProject/na-es main origin
/d/dev/MyFirstBuildProject/na-ga main origin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can build and run the solution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./build/run-services.sh start
Creating network &lt;span class="s2"&gt;"myfirstbuildproject_default"&lt;/span&gt; with the default driver
Creating volume &lt;span class="s2"&gt;"myfirstbuildproject_rabbitmqdata-nikiforovall"&lt;/span&gt; with &lt;span class="nb"&gt;local &lt;/span&gt;driver
Creating volume &lt;span class="s2"&gt;"myfirstbuildproject_postgresdata-nikiforovall"&lt;/span&gt; with &lt;span class="nb"&gt;local &lt;/span&gt;driver
Creating volume &lt;span class="s2"&gt;"myfirstbuildproject_seq-nikiforovall"&lt;/span&gt; with &lt;span class="nb"&gt;local &lt;/span&gt;driver
&lt;span class="c"&gt;# ...&lt;/span&gt;
Use &lt;span class="s1"&gt;'docker scan'&lt;/span&gt; to run Snyk tests against images to find vulnerabilities and learn how to fix them
Creating &lt;span class="nb"&gt;seq&lt;/span&gt;                                ... &lt;span class="k"&gt;done
&lt;/span&gt;Creating myfirstbuildproject_postgres_1     ... &lt;span class="k"&gt;done
&lt;/span&gt;Creating myfirstbuildproject_rabbitmq_1     ... &lt;span class="k"&gt;done
&lt;/span&gt;Creating myfirstbuildproject_naga.gateway_1 ... &lt;span class="k"&gt;done
&lt;/span&gt;Creating myfirstbuildproject_naes.api_1     ... &lt;span class="k"&gt;done
&lt;/span&gt;Creating myfirstbuildproject_naes.worker_1  ... &lt;span class="k"&gt;done
&lt;/span&gt;Creating myfirstbuildproject_naca.worker_1  ... &lt;span class="k"&gt;done
&lt;/span&gt;Creating myfirstbuildproject_naca.api_1     ... &lt;span class="k"&gt;done

&lt;/span&gt;Containers starting &lt;span class="k"&gt;in &lt;/span&gt;background
For log info: run-services.sh info
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The system is up and running (screenshot from awesome &lt;a href="https://github.com/jesseduffield/lazydocker"&gt;https://github.com/jesseduffield/lazydocker&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cYI-pTuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymdvq68j8t5dzqk1ymhc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cYI-pTuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymdvq68j8t5dzqk1ymhc.png" alt="Image description" width="880" height="519"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can use code from &lt;em&gt;assets&lt;/em&gt; folder to test things out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Create a project in "Clean Architecture" service created from na-ca template

POST http://localhost:3000/ca/projects
Content-Type: application/json

{
    "name": "Clean Architecture Tasks",
    "colourCode": "#FFFFFF"
}

# Get projects

GET http://localhost:3000/ca/projects/

# Create a project in "Event Sourcing" service created from na-es template

POST http://localhost:3000/es/projects
Content-Type: application/json

{
    "name": "Event Sourcing Tasks",
    "colourCode": "#FF5733"
}

# Get projects

GET http://localhost:3000/es/projects/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SHwhTJVD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bxun7ckvzyt64jhn5wo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SHwhTJVD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bxun7ckvzyt64jhn5wo.png" alt="Image description" width="880" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;I encourage you to continue the investigation of the codebase on your own. You may find some inspiration or good practices, there are hidden gems 🙂. Let me know if you want to see a review of one of the components in the comments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/NikiforovAll.CleanArchitecture.Templates/"&gt;https://www.nuget.org/packages/NikiforovAll.CleanArchitecture.Templates/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://martinfowler.com/articles/practical-test-pyramid.html"&gt;https://martinfowler.com/articles/practical-test-pyramid.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>dotnet</category>
      <category>architecture</category>
      <category>microservices</category>
      <category>docker</category>
    </item>
    <item>
      <title>Create a modal with React!</title>
      <author>Ustariz Enzo</author>
      <pubDate>Sat, 06 Nov 2021 13:11:42 +0000</pubDate>
      <link>https://dev.to/ziratsu/create-a-modal-with-react-176e</link>
      <guid>https://dev.to/ziratsu/create-a-modal-with-react-176e</guid>
      <description>&lt;p&gt;Hey &lt;strong&gt;fellow creators&lt;/strong&gt;,&lt;/p&gt;

&lt;p&gt;Let's create an awesome &lt;em&gt;modal&lt;/em&gt; with React! &lt;/p&gt;

&lt;p&gt;If you prefer to watch the video &lt;strong&gt;version&lt;/strong&gt;, it's right here :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/9DwGahSqcEc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Ziratsu/React-modal-yt"&gt;Here's the source code for you&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's start building!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-create-your-component"&gt;
  &lt;/a&gt;
  1. Create your component.
&lt;/h2&gt;

&lt;p&gt;In the Modal.js file, create a component that'll use &lt;em&gt;useState.&lt;/em&gt;&lt;br&gt;
Add a const with modal and setModal, making sure the state is false to begin with, so that the modal doesn't show upon opening the website.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Modal.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Modal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setModal&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-create-a-button-thatll-trigger-the-popup"&gt;
  &lt;/a&gt;
  2. Create a button that'll trigger the pop-up.
&lt;/h2&gt;

&lt;p&gt;Add a button inside of the return, with an onClick parameter that'll trigger the function we'll create in a second.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleModal&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"btn-modal"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Open
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the function: when you click on the button, it'll change the state from false to true or the other way around.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleModal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setModal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-create-the-modal"&gt;
  &lt;/a&gt;
  3. Create the modal.
&lt;/h2&gt;

&lt;p&gt;Create the content of your modal with the appropriate classnames for your css and make sure not to forget to add the onClick functions that'll trigger the opening or closing of your modal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"modal"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleModal&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"overlay"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"modal-content"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello Modal&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              Lorem ipsum dolor sit amet consectetur adipisicing elit. Provident
              perferendis suscipit officia recusandae, eveniet quaerat assumenda
              id fugit, dignissimos maxime non natus placeat illo iusto!
              Sapiente dolorum id maiores dolores? Illum pariatur possimus
              quaerat ipsum quos molestiae rem aspernatur dicta tenetur. Sunt
              placeat tempora vitae enim incidunt porro fuga ea.
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"close-modal"&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleModal&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     CLOSE
       &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-render-the-modal-conditionally"&gt;
  &lt;/a&gt;
  4. Render the modal conditionally.
&lt;/h2&gt;

&lt;p&gt;Add the curly brackets and your condition so that the modal only shows if the state is true (that is, if you've clicked on the "open" button).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"modal"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleModal&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"overlay"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"modal-content"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello Modal&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              Lorem ipsum dolor sit amet consectetur adipisicing elit. Provident
              perferendis suscipit officia recusandae, eveniet quaerat assumenda
              id fugit, dignissimos maxime non natus placeat illo iusto!
              Sapiente dolorum id maiores dolores? Illum pariatur possimus
              quaerat ipsum quos molestiae rem aspernatur dicta tenetur. Sunt
              placeat tempora vitae enim incidunt porro fuga ea.
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"close-modal"&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleModal&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              CLOSE
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now as you can see, there are two ways for you to close the modal:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;either by clicking on the close button of course.&lt;/li&gt;
&lt;li&gt;or by clicking on the overlay.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One last thing! Imagine there's a text below your "open" button. For a better user experience, you don't want this long paragraph to scroll down when the modal is open. To prevent that, you need to add a condition so that if the modal is opened, then the scrolling will not be possible:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="nc"&gt;.active-modal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;overflow-y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active-modal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active-modal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try with &lt;a href="https://github.com/Ziratsu/React-modal-yt"&gt;the full code&lt;/a&gt; and you'll see by yourself that it's now fixed! Make sure to check out the CSS file as well. &lt;/p&gt;

&lt;p&gt;Have fun experimenting and make sure to check out &lt;em&gt;my other tutorials&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Come and take a look at my &lt;strong&gt;Youtube channel&lt;/strong&gt;: &lt;a href="https://www.youtube.com/c/Learntocreate/videos"&gt;https://www.youtube.com/c/Learntocreate/videos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See you soon!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Enzo. &lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Why developers need an AWS alternative</title>
      <author>Asim Aslam</author>
      <pubDate>Sat, 06 Nov 2021 13:04:30 +0000</pubDate>
      <link>https://dev.to/micro/why-developers-need-an-aws-alternative-1nn8</link>
      <guid>https://dev.to/micro/why-developers-need-an-aws-alternative-1nn8</guid>
      <description>&lt;p&gt;&lt;em&gt;Author: Asim Aslam, founder of Micro Services, Inc. (Micro). Micro is building M3O, an open source public cloud platform. An AWS alternative for the next generation of developers. Consume popular public APIs as higher level building blocks, all on one platform, for a 10x developer experience.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;AWS was launched over 15 years ago, imagined as an operating system for the internet at a time before the cloud even existed as a concept. It was built to provide on-demand access to compute, storage and infrastructure services. What previously might have taken 6 weeks to provision was now being done in minutes. It largely unlocked productivity in a way that had not yet been imagined and enabled developers to quickly scale web services as users were coming online.&lt;/p&gt;

&lt;p&gt;Yet for all it's worth, AWS has largely maintained this experience and failed to keep up with modern day needs of developers. In 2006, we expected a level of server and database management as developers. What we classified as sysadmins (not yet devops) was a skill we'd gladly learn if it meant being able to ship the next shiny Rails app. &lt;/p&gt;

&lt;p&gt;Today we're looking for more. We're looking for not just fully managed (which AWS attempts to convince us they are), but an entirely serverless experience. We don't want to have to deploy that next database or spin up containers. We don't want to deal with the issues that arise when dealing with the complexities of this new fangled Kubernetes. As developers, all we want to focus on is building that next product and leveraging the APIs that let us do that.&lt;/p&gt;

&lt;p&gt;In 2021, AWS is slowly being eaten by third party API providers like Algolia, Elastic, CockroachDB, Twilio, Stripe, Sendgrid, Segment and so many many more. We're looking for entirely API first experiences in the cloud that don't require us to think about the infrastructure. We're looking for platforms that compliment our modern day Jamstack architectures powered by the Netlify's and Vercel's of the world.&lt;/p&gt;

&lt;p&gt;AWS now leaves a lot to be desired for the next generation of devs. Can they do anything to fix that?&lt;/p&gt;

&lt;p&gt;We personally don't believe so.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-is-aws-for"&gt;
  &lt;/a&gt;
  Who is AWS for?
&lt;/h2&gt;

&lt;p&gt;Then if AWS isn't built for developers, who's it for? AWS was never built for developers in the first place, let's be clear about that. AWS was about provisioning infrastructure services on which we could then run our software which was still automated by the sysadmins in our companies. How do we know that? Because we were heavily invested in AWS in our prior companies.&lt;/p&gt;

&lt;p&gt;We contended with the complexity of the bare metal era before AWS and then what came after managed largely by a disarray of hand crafted bash scripts, python libraries and eventually configuration management tools like chef and puppet. We escaped just as the DevOps movement took off but continued to witness the extraordinary pains of building systems for the cloud as a software engineer.&lt;/p&gt;

&lt;p&gt;Yet in all that time, we never once saw developers personally touch CloudFormation, or swim the sea of endless complexity unless they truly had to. No, those developers would gladly choose a Heroku long before an AWS, but if you worked at a startup that was scaling, at some point in the lifetime of the company you could expect an infrastructure engineer to join and quickly replatform you to AWS.&lt;/p&gt;

&lt;p&gt;The truth of the matter is. AWS was built for operators, not the developers.&lt;/p&gt;

&lt;p&gt;There's enough people now shouting at the screen pointing to services like AWS Lambda or Fargate talking about it's serverless nature or how it was built for developers but I'd argue, this is just AWS pandering to an existing Enterprise audience and checking off boxes. AWS is about building the 80% solution to keep existing customers happy, that doesn't mean the actual users in those companies are happy using them.&lt;/p&gt;

&lt;p&gt;AWS was the "just good enough" solution for a time in which we had nothing else. The book store that started a cloud computing business even admits to being shocked that they had a 7 year head start on everyone else. Had Google gotten their act together and shipped their superior internal tools as &lt;br&gt;
public services long ago, we'd be having an entirely different conversation.&lt;/p&gt;

&lt;p&gt;The fact of the matter is, AWS doesn't understand developers and the harder they try the more complex their offering becomes. As a developer AWS is an overwhelming and anxiety inducing experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-developers-need"&gt;
  &lt;/a&gt;
  What do developers need?
&lt;/h2&gt;

&lt;p&gt;What we need is a clean slate approach. As developers we need a new experience for cloud services. We need a new public cloud platform. One that focuses entirely on the developer experience. Higher level building blocks for existing public APIs.&lt;/p&gt;

&lt;p&gt;Replicating an AWS isn't the answer. VMs (EC2) and file storage (S3) are not the primitives developers need today. We need to start with next level building blocks for the next generation of devs. Today we are all about the Jamstack and leveraging third party APIs as the backend. &lt;/p&gt;

&lt;p&gt;We need a public API platform that aggregates the existing market and provides a new clean abstraction layer on top, all through a single unified offering. One that simplifies the pricing model rather than requiring a pricing calculator to know what you're spending.&lt;/p&gt;

&lt;p&gt;For what it's worth, we thank AWS for getting us to this point, but now it's time to hand the torch to someone else. Someone who understands what developers need and provide the next level building blocks for new types of software we'll come to use.&lt;/p&gt;

&lt;p&gt;The world is no longer talking about building mobile apps or web services but instead, crypto networks and the metaverse. Your grandparents can barely use a mobile phone, are we really expecting AWS and others to help us build the metaverse? &lt;/p&gt;

&lt;p&gt;It's up to developers to build the future and with it decide the kinds of platforms we want to build on. We're now more than ever interested in open platforms. Not just in the case of Web3 but more so in regards to "open source eating everything". It's not enough that just the services you run are open source, the entire system also needs to be so.&lt;/p&gt;

&lt;p&gt;AWS built in an era before GitHub, and the explosive nature of open source, is not. AWS is a silo, and a ship filled with containers of teams all building APIs in isolation. Their control plane is not open source, their platform is not open source, their system is not open source. AWS is not open source.&lt;/p&gt;

&lt;p&gt;We are a generation of developers who are looking for a new platform, one that aligns with our goals, beliefs and mantras and one that is entirely based on open source software.&lt;/p&gt;

&lt;p&gt;I'm Asim Aslam, the founder of Micro, and we're building &lt;a href="https://m3o.com"&gt;M3O&lt;/a&gt;, a new open source public cloud platform, an AWS alternative for the next generation of developers. Come join me in deciding how, where and what we're going to build the future on.&lt;/p&gt;

&lt;p&gt;See the source on &lt;a href="https://github.com/m3o/m3o"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>m3o</category>
      <category>cloud</category>
      <category>opensource</category>
    </item>
    <item>
      <title>10 awesome CSS Hamburger Menus</title>
      <author>webdeasy.de</author>
      <pubDate>Sat, 06 Nov 2021 12:50:04 +0000</pubDate>
      <link>https://dev.to/webdeasy/10-awesome-css-hamburger-menus-1iho</link>
      <guid>https://dev.to/webdeasy/10-awesome-css-hamburger-menus-1iho</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://webdeasy.de/?referer=dev-1iho"&gt;webdeasy.de&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Responsive web design has long been standard on the web. Almost every website has a navigation menu, which is often realized by a hamburger menu. A collection of the best CSS hamburger menus (+ icons &amp;amp; animations) can be found here!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In mobile navigation, i.e. on the tablet or smartphone, the &lt;a href="https://webdeasy.de/en/top-css-navigation-menus-en/"&gt;navigation menu&lt;/a&gt; is very often hidden for space reasons and only visible by clicking on the hamburger menu. There is endless scope for design possibilities here. Some are programmed with pure CSS without JavaScript and some with CSS and JavaScript - there is something for everyone.&lt;/p&gt;

&lt;p&gt;A menu of mostly 2-3 layers has established itself - just like a hamburger (bun, patty, bun), which reveals all menu items in an overlay by a click. Individual strokes can be rotated to an X, disappear or whiz around wildly. Endless possibilities! I have compiled the best ones for you here - let yourself be inspired.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The pens shown are licensed with MIT. You can find more info about your own use on the &lt;a href="https://blog.codepen.io/documentation/licensing/"&gt;Codepen Blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-gooey-menu"&gt;
  &lt;/a&gt;
  #1 Gooey Menu
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lbebber/embed/LELBEo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/lbebber"&gt;Luca Bebber&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS (SCSS);&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-svg-css3-menuburger-button"&gt;
  &lt;/a&gt;
  #2 SVG CSS3 Menu/Burger Button
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kylehenwood/embed/Alayb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/kylehenwood/"&gt;Kyle Henwood&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS (SCSS), JS;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-mobile-menu-animation"&gt;
  &lt;/a&gt;
  #3 Mobile Menu Animation
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/melnik909/embed/JpJPYp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/melnik909/"&gt;Stas Melnikov&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS, JS;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-page-tilt-effect"&gt;
  &lt;/a&gt;
  #4 Page Tilt Effect
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/marco_fugaro/embed/yNGJXE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/marco_fugaro/"&gt;Marco Fugaro&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS (SCSS), JS (jQuery);&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-elastic-menu"&gt;
  &lt;/a&gt;
  #5 Elastic menu
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/nguyenlong/embed/yJNjrN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/nguyenlong/"&gt;Long&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS (SCSS), JS;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-hamburger-icons-animations"&gt;
  &lt;/a&gt;
  #6 Hamburger Icons Animations
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ahmadbassamemran/embed/VQwPGr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/ahmadbassamemran/"&gt;Ahmad Emran&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS, JS;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-svg-gooey-hover-menu-concept"&gt;
  &lt;/a&gt;
  #7 SVG Gooey Hover Menu Concept
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mikel301292/embed/dMYRYZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/mikel301292/"&gt;Michael Leonard&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS, JS (jQuery);&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-hamburger-icon-animations"&gt;
  &lt;/a&gt;
  #8 Hamburger Icon Animations
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/RRoberts/embed/ZBYaJr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/RRoberts/"&gt;Rosa&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS, JS (jQuery);&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#9-hamburger-menu-animation-with-velocityjs"&gt;
  &lt;/a&gt;
  #9 Hamburger menu animation with velocity.js
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/filippo/embed/WvGbJB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/filippo/"&gt;Filippo&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS (Less), JS (jQuery + velocity.js);&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#10-atomic-hamburger-menu-css"&gt;
  &lt;/a&gt;
  #10 Atomic Hamburger Menu CSS
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alcoven/embed/JdoWdx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/alcoven/"&gt;Alex Coven&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conslusion"&gt;
  &lt;/a&gt;
  Conslusion
&lt;/h1&gt;

&lt;p&gt;Which menu would you choose for your website? Feel free to write it in the comments. And if you also have a fancy hamburger menu (icon), I can expand the collection.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: All buttons are all published on &lt;a href="https://codepen.io/"&gt;codepen.io&lt;/a&gt; and not by me.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Not enough yet? Then this could be something for you!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;😎 &lt;a href="https://webdeasy.de/en/loading-animations/"&gt;Cool CSS Buttons&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;4️⃣0️⃣4️⃣ &lt;a href="https://webdeasy.de/en/top-404-pages/"&gt;Creative 404-Error Pages&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🏆 &lt;a href="https://webdeasy.de/en/top-css-navigation-menus-en/"&gt;Top CSS Navigation Menus&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🤯 &lt;a href="https://webdeasy.de/en/satisfying-css-animations/"&gt;Satisfying CSS Animations&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🥵 &lt;a href="https://webdeasy.de/en/loading-animations/"&gt;Inspiring loading animations&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>ELI5 JavaScript: Nullish Coalescing (??) &amp; Logical Nullish Assignment (??=)</title>
      <author>Nisarg Kapkar</author>
      <pubDate>Sat, 06 Nov 2021 12:45:34 +0000</pubDate>
      <link>https://dev.to/nkap/eli5-javascript-nullish-coalescing-logical-nullish-assignment--510g</link>
      <guid>https://dev.to/nkap/eli5-javascript-nullish-coalescing-logical-nullish-assignment--510g</guid>
      <description>&lt;p&gt;Nullish Coalescing and Logical Nullish Assignment... they sure do sound scary!&lt;/p&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://i.giphy.com/media/3o6wrfTsqfAepbiHZe/giphy.gif" alt="Scared gif" width="480" height="260"&gt;&lt;br&gt;
&lt;/center&gt;

&lt;p&gt;This was my reaction when I first heard the words 'Nullish Coalescing' and 'Logical Nullish Assignment' 😂&lt;/p&gt;

&lt;p&gt;But don't worry! Both of these are some of the simplest yet powerful concepts introduced in modern JavaScript!&lt;br&gt;
Read the article till the end to learn more about those :)&lt;/p&gt;

&lt;p&gt;Without further ado...&lt;/p&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://i.giphy.com/media/64aBXTVfd90zyUH2da/giphy.gif" alt="Let's start gif" width="480" height="270"&gt;&lt;br&gt;
&lt;/center&gt;

&lt;h2&gt; Table of Contents: &lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#nullish-coalescing"&gt;Nullish Coalescing&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;    1.1     &lt;a href="#difference-between"&gt;Difference between OR (||) &amp;amp; Nullish Coalescing (??)&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;    1.2    &lt;a href="#short-circuiting"&gt;Short-circuiting&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;    1.3    &lt;a href="#assign-default-values"&gt;Assign default values&lt;/a&gt; &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#logical-nullish-assignment"&gt;Logical Nullish Assignment&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h3 id="nullish-coalescing"&gt;1. Nullish Coalescing&lt;/h3&gt; 

&lt;p&gt;It is a logical operator that&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;returns the first argument if it is 'defined' (not null/undefined)&lt;/li&gt;
&lt;li&gt;returns the second argument if the first argument isn't defined
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;person1&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nisarg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//output = Nisarg&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;person2&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nisarg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//output = Nisarg&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Kapkar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;person3&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nisarg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//output = Kapkar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;The output of the first two console.log statements would be the second argument ("Nisarg") as the first arguments are either undefined (person1) or null (person2).&lt;/li&gt;
&lt;li&gt;The output of the third console.log will be person3 ("Kapkar") as the first argument is not null or undefined.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="difference-between"&gt; 1.1 Difference between OR (||) and Nullish Coalescing (??) &lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;OR operator does not distinguish between a null/undefined, false, empty string, and 0. All of these are treated as falsy values.&lt;/li&gt;
&lt;li&gt;If the first argument of OR is one of the above values, the second argument is returned as the output.&lt;/li&gt;
&lt;li&gt;Whereas Nullish Coalescing will only return the second argument if the first argument is either null or undefined.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;//output = 10&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;n1&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;//output = 0&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n2&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;n2&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;//output = 10&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n2&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;//output = 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;For n1: 0 is a falsy value. So OR returns 10. Since n1 is not null or undefined, Nullish Coalescing returns the first argument. &lt;/li&gt;
&lt;li&gt;For n2: undefined is a falsy value. So OR returns 10. Since n2 is undefined, Nullish Coalescing returns the second argument. &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="short-circuiting"&gt; 1.2 Short-circuiting &lt;/h4&gt;

&lt;p&gt;Nullish Coalescing can also be used for 'Short-circuit' evaluation.&lt;br&gt;
The second argument is only evaluated if the first argument is null or undefined!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c called&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Output: c called 1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Output: 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;For the first expression (a ?? c()), since a is undefined, the right-hand side of the expression is also evaluated (function c). Function c logs "c called" and returns 1, which is then logged by the console.&lt;/li&gt;
&lt;li&gt;For the second expression (b ?? c()), since b is neither undefined nor null, the right-hand side of the expression is not evaluated. So the console logs the value of b (10)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="assign-default-values"&gt; 1.3 Assign default values &lt;/h4&gt; 

&lt;p&gt;Use Nullish Coalescing to assign default values to a variable. Suppose we want to assign a variable to 10 if the number is null or undefined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; 
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; 
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;//Output: 10&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;//Output: 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using OR to assign default values can have unexpected outcomes! &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OR assigns variable a to 10 even though the number is not null or undefined (as stated in section 1.1, OR considers 0 as a falsy value)&lt;/li&gt;
&lt;li&gt;Nullish Coalescing will assign 10 if and only if the number is null or undefined. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="logical-nullish-assignment"&gt; 2. Logical Nullish Assignment &lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; 
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;//Ouput = 100&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;//Ouput = 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Logical Nullish is an assignment operator which assigns value if the variable is null or undefined.&lt;/p&gt;

&lt;p&gt;In the above example, since a is undefined, it is assigned 100. b is already defined (10), so the value is not assigned to b!&lt;/p&gt;




&lt;p&gt;Woooo! Thank you for reading 😄&lt;/p&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://i.giphy.com/media/2E6OYt2yphlWTGZeYK/giphy.gif" alt="wooo Gif" width="480" height="480"&gt;&lt;br&gt;
&lt;/center&gt;

&lt;p&gt;If you have any questions about Nullish Coalescing or Logical Nullish Assignment (or about JavaScript in general), feel free to ask them in the comments 👇&lt;/p&gt;




&lt;p&gt;This article is part of my ELI5 JavaScript series.&lt;br&gt;
If you want to read &amp;amp; learn more about JavaScript, don't forget to subscribe (more articles coming soon!)&lt;/p&gt;

&lt;p&gt;Follow me 👇 for more content on full-stack development, software engineering &amp;amp; data structures/algorithms.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/nnkkaapp"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/nisarg-kapkar/"&gt;Linkedin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Nkap23"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you again :)&lt;/p&gt;

&lt;p&gt;Have an awesome day and happy coding 😄&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Showcase your project at Git Commit Show</title>
      <author>Saurabh Rai</author>
      <pubDate>Sat, 06 Nov 2021 12:41:27 +0000</pubDate>
      <link>https://dev.to/srbhr/showcase-your-project-at-git-commit-show-279l</link>
      <guid>https://dev.to/srbhr/showcase-your-project-at-git-commit-show-279l</guid>
      <description>&lt;p&gt;&lt;strong&gt;Git Commit Show #season03 on 27th &amp;amp; 28th November, 2021.&lt;/strong&gt; &lt;br&gt;
&lt;a href="https://gitcommit.show/"&gt;Git Commit Show&lt;/a&gt; is inviting you guys to showcase your breakthrough project ideas on web, robotics, automation, ml, etc. &lt;br&gt;
Giving a platform for those crazy ideas, that can impact a wider audience. Last two seasons we had some amazing projects home cleaner robot, 3D mouse etc.&lt;br&gt;
So this is the &lt;a href="http://push.gitcommit.show/"&gt;link to fill the form&lt;/a&gt;, the whole team at Git Commit Show would like to help you with your idea! Let's have you there! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://discord.gg/JFWP8c2gPG"&gt;Join our Discord&lt;/a&gt; to know more and participate in Giveaways! &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>opensource</category>
      <category>github</category>
    </item>
    <item>
      <title>How cookies track you around the Internet
</title>
      <author>Prajwol Shrestha</author>
      <pubDate>Sat, 06 Nov 2021 12:31:34 +0000</pubDate>
      <link>https://dev.to/prajwolshrestha/how-cookies-track-you-around-the-internet-11nj</link>
      <guid>https://dev.to/prajwolshrestha/how-cookies-track-you-around-the-internet-11nj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-cookies"&gt;
  &lt;/a&gt;
  What are cookies?
&lt;/h2&gt;

&lt;p&gt;Cookies are small text files that a website stores in your browser. Cookies are utilized to recall things about sites: your login data, what you have in your shopping basket, what language you prefer. They are generated by websites and remain in your browser until they expire.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#different-types-of-cookies"&gt;
  &lt;/a&gt;
  Different Types of Cookies
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#cookies-are-classified-based-on-their-different-characteristics"&gt;
  &lt;/a&gt;
  Cookies are classified based on their different characteristics:
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Based on their function,&lt;/strong&gt; cookies are divided as necessary and unnecessary. The necessary cookies are crucial for the functioning of a website, and the unnecessary cookies are the ones that are added additionally by the website and are not so crucial for the functioning of the website.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Based on their source,&lt;/strong&gt; cookies are divided into first-party and third-party cookies. First-party cookies are set by the site that the user is visiting presently, say, to check whether or not the user is logged in. Whereas third-party cookies are set by other websites that track the user for showing related advertisements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Based on their span,&lt;/strong&gt; cookies are classified as persistent and session cookies. Session cookies are set when the user begins a session and are temporary cookies. They terminate once the browser is closed and the session ends. Whereas Persistent cookies stay on the user’s browser for a long period and expire when they reach their expiration period.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#can-cookies-track-you-around-the-internet"&gt;
  &lt;/a&gt;
  Can cookies track you around the internet?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Yes, cookies can be used to invade your privacy and track you around the internet.&lt;/strong&gt; Most browsers only allow websites to store a maximum of 300 cookies and they cannot store a lot of data. Cookies set by one website cannot be accessed by that other site. And that raises a question, How can cookies be used to track us around the internet, especially if cookies from one website cannot be accessed by another? For instance, How can Facebook track what website we visit?&lt;/p&gt;

&lt;p&gt;The whole process starts when you log into Facebook, to remember that you are logged in Facebook, it stores a cookie on your browser, many other websites do the same thing. This cookie is bound to the Facebook domain name, meaning that nobody else besides facebook.com can read what’s inside the cookie. Let’s now assume, you are visiting another website, this website cannot access Facebook cookies and vice versa. But let’s assume that the owner of another website places a Facebook like button on his website, to show this like button your browser has to download some content from the Facebook servers. And when it’s talking to Facebook.com, it sends along with the cookie that Facebook had stored in your browser. Facebook now knows who you are and that you visited this site.&lt;/p&gt;

&lt;p&gt;Many other companies also use this technique to track you around the internet. The trick is easy, convince as many as websites to place some of your code in their websites.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-can-you-do-to-prevent-cookies-from-tracking-you"&gt;
  &lt;/a&gt;
  What can you do to prevent cookies from tracking you?
&lt;/h2&gt;

&lt;p&gt;You can prevent cookies from tracking you by:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using browser extensions like Privacy Badger, Ghostery, etc.&lt;/li&gt;
&lt;li&gt;Switching to a browser that has built-in privacy protection tools like Brave or safari.&lt;/li&gt;
&lt;li&gt;Enable Do Not Track (DNT) on browsers. Even though not all websites respect the DNT setting, it is one feature that users can use.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>todayilearned</category>
      <category>beginners</category>
      <category>information</category>
    </item>
  </channel>
</rss>
