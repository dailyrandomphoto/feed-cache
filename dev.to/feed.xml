<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Functions, fat arrows and parentheses</title>
      <author>Laurie</author>
      <pubDate>Tue, 07 Sep 2021 15:25:03 +0000</pubDate>
      <link>https://dev.to/laurieontech/functions-fat-arrows-and-parentheses-585o</link>
      <guid>https://dev.to/laurieontech/functions-fat-arrows-and-parentheses-585o</guid>
      <description>&lt;p&gt;If you develop with JavaScript you likely use functions fairly often. And, because you're a developer, you've likely made some mistakes.&lt;/p&gt;

&lt;p&gt;For me, it was last week. I called a function without parentheses and it didn't exactly do what I wanted. But why? Why was that a mistake? In React there are lots of times we use functions without parentheses and everything works just fine!&lt;/p&gt;

&lt;p&gt;Today we're going to talk about why.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-parantheses-impact-functions"&gt;
  &lt;/a&gt;
  How do parantheses impact functions
&lt;/h2&gt;

&lt;p&gt;Let's start with a typical function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;some string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we wanted to call this function, we'd do so like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;someString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// result is now "some string"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what happens if we do this?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;someString&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;result&lt;/code&gt; is now equal to &lt;code&gt;[Function: someString]&lt;/code&gt;. It's a reference to the function rather than the result of evaluating the function.&lt;/p&gt;

&lt;p&gt;Well that was a quick post. Always use parentheses, problem solved.&lt;/p&gt;

&lt;p&gt;Not so fast!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-and-functions"&gt;
  &lt;/a&gt;
  React and functions
&lt;/h2&gt;

&lt;p&gt;Sometimes in React we want to execute a function. But other times, we want to pass around a reference.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I was clicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;onClick&lt;/code&gt; is an &lt;a href="https://laurieontech.com/posts/event-listeners/#what-about-react"&gt;event handler&lt;/a&gt; which takes a function as a callback. So it needs a reference to the function it's going to call.&lt;/p&gt;

&lt;p&gt;What happens if we add parantheses? Will it still work?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I was clicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nope! Nothing will get logged. The event handler was expecting a function that it can call. However, it got &lt;code&gt;"I was clicked"&lt;/code&gt; instead! Not exactly helpful.&lt;/p&gt;

&lt;p&gt;Any other syntax weirdness we should talk about? Sure, why not!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h2&gt;

&lt;p&gt;By default, &lt;code&gt;event&lt;/code&gt; is passed as an argument to the callback function. Something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I was clicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This actually introduces an interesting detail! The code above is equivalent to the code below, passing our function wrapped in an anonymous function that exposes &lt;code&gt;event&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I was clicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#anonymous-functions"&gt;
  &lt;/a&gt;
  Anonymous functions
&lt;/h2&gt;

&lt;p&gt;As it turns out, we can define our function inline.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I was clicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This also gives us the opportunity to pass our own parameters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I was clicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what if we want the event object in addition to our other parameter(s)?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I was clicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This makes sense if we think about what we already know. That &lt;code&gt;event&lt;/code&gt; is always passed, whether we reference it or not.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#im-a-little-confused"&gt;
  &lt;/a&gt;
  I'm a little confused
&lt;/h2&gt;

&lt;p&gt;If that last example confused you, that's ok! It looks a lot like our earlier example where we passed the result of a function rather than a reference to it.&lt;/p&gt;

&lt;p&gt;The trick is to look at the definition of &lt;code&gt;clickHandler&lt;/code&gt; a little bit closer. We'll make it a bit more verbose to make that easier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The "result" of clickHandler is a function! It returns a reference to a function. So we're all good.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#functions-are-fun"&gt;
  &lt;/a&gt;
  Functions are fun
&lt;/h2&gt;

&lt;p&gt;I know that was a lot of syntax, but I hope you feel a bit more confident. Knowing what is happening under the hood can turn guess and check errors into intentional fixes. You'll still make mistakes, we all do, but maybe you'll catch them faster.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to learn React - The Effective way</title>
      <author>Shaan Alam</author>
      <pubDate>Tue, 07 Sep 2021 15:11:59 +0000</pubDate>
      <link>https://dev.to/shaan_alam/how-to-learn-react-the-effective-way-2km7</link>
      <guid>https://dev.to/shaan_alam/how-to-learn-react-the-effective-way-2km7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-react"&gt;
  &lt;/a&gt;
  What is React?
&lt;/h2&gt;

&lt;p&gt;React is a free and Open Source Front End JavaScript Library for building complex User Interfaces by dividing your application into smaller components. It is maintained by Facebook and a community of Developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites-for-learning-react"&gt;
  &lt;/a&gt;
  Pre-requisites for learning React
&lt;/h2&gt;

&lt;p&gt;Before learning React or trying to learn React, I would say to familiarize yourself with HTML, CSS, &amp;amp; JavaScript.You can learn HTML and CSS within 2-3 weeks as they are used for creating layouts for your web application. JavaScript takes some time to lean as it is a programming language. Spend at least a month or two learning JavaScript. Don't just learn and learn, but also create small projects to implement the knowledge that you have gained. You can create some mini projects like &lt;strong&gt;To-Do Lists&lt;/strong&gt;, &lt;strong&gt;Calculator&lt;/strong&gt;, &lt;strong&gt;Random Jokes Generator&lt;/strong&gt; etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;

&lt;p&gt;While learning JavaScript, you have to avoid some mistakes that I made. When I was learning JavaScript, I thought that I have to become a &lt;strong&gt;absolute master of JavaScript&lt;/strong&gt; to write React code (which is non-sense). I started learning advanced concepts (as a beginner), failing which, I thought I am not good enough. But, let me tell you, as a beginner you need to learn just enough ,so that you can create basic projects in vanilla JavaScript. Some topic to learn and understand deeply are &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;li&gt;if/else conditions and switch statements&lt;/li&gt;
&lt;li&gt;Difference between var, let &amp;amp; const&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Arrays&lt;/li&gt;
&lt;li&gt;Array methods like &lt;strong&gt;filter&lt;/strong&gt;, &lt;strong&gt;map&lt;/strong&gt;, &lt;strong&gt;reduce&lt;/strong&gt; etc.&lt;/li&gt;
&lt;li&gt;Promises&lt;/li&gt;
&lt;li&gt;Callbacks&lt;/li&gt;
&lt;li&gt;Async/await&lt;/li&gt;
&lt;li&gt;Classes and OOPs Concepts&lt;/li&gt;
&lt;li&gt;Working with APIs
Again, don't just learn, &lt;strong&gt;APPLY!!&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React
&lt;/h2&gt;

&lt;p&gt;At this point of time, when you have learned JavaScript essentials, it is time for you to dive into React. You can start learning React by taking a look at React Official Docs or by taking their React Official Tutorial to get some idea of how React works. React Docs are very well written covering the fundamentals of React. Learn these topics very well to understand React fundamentally.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSX&lt;/li&gt;
&lt;li&gt;Components (Functional and Class based)&lt;/li&gt;
&lt;li&gt;Lifecycle Methods&lt;/li&gt;
&lt;li&gt;State&lt;/li&gt;
&lt;li&gt;Props&lt;/li&gt;
&lt;li&gt;Handling events&lt;/li&gt;
&lt;li&gt;Forms&lt;/li&gt;
&lt;li&gt;Conditional Rendering&lt;/li&gt;
&lt;li&gt;Working with third-party APIs.
Once you have gained understanding of these topics, it is time for you to create projects in order to implement them. You can create new projects or the remake the ones you made while learning vanilla JavaScript using React.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#react-router"&gt;
  &lt;/a&gt;
  React Router
&lt;/h2&gt;

&lt;p&gt;Learn about React router. React router is a routing library for react which will help you to navigate through different pages in your React App. Learn about loading specific page's content, passing params in the URL, redirecting etc. Also, understand that react router is not a part of React, it's a routing library made for React.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advanced-react"&gt;
  &lt;/a&gt;
  Advanced React
&lt;/h2&gt;

&lt;p&gt;Now, that you have basic React knowledge and also created some basic projects, it is time to learn some advanced concepts like &lt;strong&gt;Hooks&lt;/strong&gt;, &lt;strong&gt;Context&lt;/strong&gt; etc. Take a look at React Docs and learn these concepts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Context&lt;/li&gt;
&lt;li&gt;Hooks&lt;/li&gt;
&lt;li&gt;Error Boundaries&lt;/li&gt;
&lt;li&gt;Higher Order Components&lt;/li&gt;
&lt;li&gt;Code Splitting&lt;/li&gt;
&lt;li&gt;Refs&lt;/li&gt;
&lt;li&gt;Forwarding Refs&lt;/li&gt;
&lt;li&gt;Render props&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#some-extra-stuff"&gt;
  &lt;/a&gt;
  Some extra stuff!
&lt;/h2&gt;

&lt;p&gt;You can also learn some extra libraries like &lt;strong&gt;Material UI&lt;/strong&gt;, &lt;strong&gt;reactstrap&lt;/strong&gt;, &lt;strong&gt;tailwindcss&lt;/strong&gt;, &lt;strong&gt;Semantic UI&lt;/strong&gt; etc, once you have learned the basics of React. These libraries will help you in your day-to-day React Dev life. However, it is not compulsory to learn everything, you can try and learn them once you are done with React basics and can make projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#congratulations"&gt;
  &lt;/a&gt;
  Congratulations 🥳
&lt;/h2&gt;

&lt;p&gt;You are a React Developer. Now you just have to hone you skills by creating projects and visiting React Docs often and learning new things.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-resources-to-learn-react-"&gt;
  &lt;/a&gt;
  Some resources to learn React -
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=w7ejDZ8SWv8"&gt;React JS Crash Course 2021 by Traversy Media&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=4UZrsTqkcW4"&gt;Full React Course 2020 - Learn Fundamentals, Hooks, Context API, React Router, Custom Hooks By FreeCodeCamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=j942wKiXFu8&amp;amp;list=PL4cUxeGkcC9gZD-Tvwfod2gaISzfRiP9d"&gt;Full Modern React Playlist by The Net Ninja&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#some-useful-tips"&gt;
  &lt;/a&gt;
  Some useful tips
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Don't try to learn everything at once, understand and accept the fact that you a beginner and spend enough amount of time to learn these concepts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don't be afraid of writing bad code. Like I mentioned earlier, you are a beginner, at some point everyone is. Understand that &lt;code&gt;Progress &amp;gt;&amp;gt;&amp;gt;&amp;gt; Perfection&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avoid &lt;strong&gt;Tutorial Hell 🤯&lt;/strong&gt;. Tutorial Hell refers to the term when you follow a tutorial after tutorial, and you think you are learning, when in fact you learn nothing. If you watching Youtube tutorials, don't just watch video after video. Realize that you are stuck in Tutorial Hell and stop watching more videos and start creating your own projects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make Google, StackOverflow, articles &amp;amp; blogs your best friend. Start googling your questions, there is a high probability that your problem/error has already been solved by someone else on the internet.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find me here - &lt;br&gt;
Github - &lt;a href="https://github.com/shaan-alam"&gt;shaan-alam&lt;/a&gt;&lt;br&gt;
Twitter - &lt;a href="https://twitter.com/shaancodes"&gt;shaancodes&lt;/a&gt;&lt;br&gt;
Instagram - &lt;a href="https://instagram.com/shaancodes"&gt;shaancodes&lt;/a&gt;&lt;br&gt;
LinkedIn - &lt;a href="https://www.linkedin.com/in/shaan-alam-01784018a/"&gt;Shaan Alam&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>reactnative</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The confusion around your API</title>
      <author>Catherine Galkina</author>
      <pubDate>Tue, 07 Sep 2021 15:10:30 +0000</pubDate>
      <link>https://dev.to/typeable/the-confusion-around-your-api-1bhd</link>
      <guid>https://dev.to/typeable/the-confusion-around-your-api-1bhd</guid>
      <description>&lt;p&gt;Author: Ilya Kostyuchenko&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-prevent-your-apis-from-scattering"&gt;
  &lt;/a&gt;
  How to prevent your APIs from scattering.
&lt;/h2&gt;

&lt;p&gt;In this post, I’d like to tell you what OpenAPI is and why you may need it.&lt;br&gt;
​&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-pokemons"&gt;
  &lt;/a&gt;
  Your Pokemons
&lt;/h2&gt;

&lt;p&gt;​&lt;br&gt;
Your status quo: you’ve got two developers. One is developing the backend of your product, the other is working on the frontend.&lt;/p&gt;

&lt;p&gt;You’ve got an idea for a new supercool application and you want to develop it as soon as possible, so you call an experienced architect to design well in advance the ideal API for which the frontend and the backend can be developed simultaneously.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fDwq01iA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/OpenAPI-blog.001.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fDwq01iA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/OpenAPI-blog.001.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
​&lt;br&gt;
The architect develops the ideal API, describes it in one big document and issues it to the developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YO0tgNwQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/OpenAPI.001.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YO0tgNwQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/OpenAPI.001.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
​&lt;br&gt;
Each of the developers takes the API description, reads it carefully and implements the described API.&lt;br&gt;
​&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#measure-thrice-and-cut-once"&gt;
  &lt;/a&gt;
  Measure thrice and cut once
&lt;/h2&gt;

&lt;p&gt;​&lt;br&gt;
In the long run, we’d like to get the frontend and the backend, each of which will deal with the same requests (the frontend will send and the backend will process them). Ideally, these requestы should also comply with what the architect has described (although it’s not so important).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iz9tlC3o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/OpenAPI.002.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iz9tlC3o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/OpenAPI.002.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
​&lt;br&gt;
Now let’s see what must happen to make the frontend and the backend requests coincide:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The backend developer hasn’t made any mistakes while implementing the API&lt;/li&gt;
&lt;li&gt;The backend developer has read the architect’s API description correctly&lt;/li&gt;
&lt;li&gt;The frontend developer hasn’t made any mistakes while implementing the API&lt;/li&gt;
&lt;li&gt;The frontend developer has read the architect’s API description correctly&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If anyone makes a mistake even in one of the items, your entire project will fail. And that’s assuming that the architect doesn’t make any errors (spoiler: they all do).&lt;/p&gt;

&lt;p&gt;It should be specially noted that heavy responsibility falls on human understanding and human communication of all technical details. The human understanding is generally rather hard to debug and test.&lt;br&gt;
​&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#people-are-a-weak-link-in-the-chain"&gt;
  &lt;/a&gt;
  People are a weak link in the chain
&lt;/h2&gt;

&lt;p&gt;​&lt;br&gt;
Given the situation, the desire to minimize the human factor in the API development seems quite natural. You’d like to exclude the human factor from the moment when the architect described API in the document. (As a matter of fact, it would be great to avoid the architect’s errors, too, but the technologies haven’t advanced thus far yet).&lt;/p&gt;

&lt;p&gt;Obviously, to make this possible, the architect should deliver not a human-readable document but a computer-readable document, i.e., some sort of formal specification for a specific API. If we have such API description, we can at least try to allot the subsequent tasks to automation.&lt;/p&gt;

&lt;p&gt;For each programming language, there are usually not so many ways to make a “canonical” implementation of any HTTP API when using a specific framework. Frameworks usually don’t have so many ways to make a request with a JSON object in the body, nor so many ways to read an integer in the request path.&lt;br&gt;
​&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#openapi"&gt;
  &lt;/a&gt;
  OpenAPI
&lt;/h2&gt;

&lt;p&gt;​&lt;br&gt;
It would be great to be able to describe your HTTP API once and get coinciding frameworks from this description to develop the backend and the frontend, which, considering that there is no human factor in the chain, will more likely coincide. (Provided that the frameworks have been generated without errors, which is in fact a simpler task).&lt;/p&gt;

&lt;p&gt;And behold! This has been invented already! This is OpenAPI!&lt;/p&gt;

&lt;p&gt;OpenAPI allows describing HTTP API formally as YAML files. A rather extensive example can be found on editor.swagger.io. There you can simultaneously view the source YAML and the human-readable HTML-page.&lt;/p&gt;

&lt;p&gt;If the architect describes the original specification in the form of an OpenAPI specification, the interaction between the backend and the frontend can be generated automatically and will always coincide. Thus, we eliminate the human factor from the chain altogether!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XyY3ThBM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/OpenAPI-blog.003.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XyY3ThBM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/OpenAPI-blog.003.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
​&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-than-just-code-generation"&gt;
  &lt;/a&gt;
  More than just code generation
&lt;/h2&gt;

&lt;p&gt;​&lt;br&gt;
Code generation is just one of the OpenAPI applications. OpenAPI is an open format of HTTP API description not tied to any specific ecosystem. It allows exchanging the accurate API description between the systems which would otherwise require manual API “synchronization”.&lt;/p&gt;

&lt;p&gt;There are a lot of tools based on OpenAPI specifications. Openapi.tools is a good source of such projects. There you can find such projects as GUI specification editors, test server generators based on specifications, search for vulnerabilities by specifications and many other things!&lt;/p&gt;

&lt;p&gt;Using Open API allows you not only to improve the accuracy of your API descriptions, but also to get access to a larger number of tools which might be useful for the project development.&lt;/p&gt;

</description>
      <category>api</category>
      <category>programming</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Using VPN Protection Online: A Beginner's Guide</title>
      <author>Piyush Shrivastava</author>
      <pubDate>Tue, 07 Sep 2021 14:56:14 +0000</pubDate>
      <link>https://dev.to/b1tsh3ll/using-vpn-protection-online-a-beginner-s-guide-37kj</link>
      <guid>https://dev.to/b1tsh3ll/using-vpn-protection-online-a-beginner-s-guide-37kj</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8VGF-I7T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f2afhjgxkgkcvfbrpg48.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8VGF-I7T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f2afhjgxkgkcvfbrpg48.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
                     A virtual private network (VPN) is a tool that ensures the security of both individuals and enterprises. Understanding what a VPN connection can do, why you should use one, and the benefits it delivers can help keep individuals and businesses safe. Here's a VPN guide to get you started on the path to improved internet security.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is a virtual private network (VPN) and why should you use one?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Anyone with even a basic understanding of cybersecurity understands that when you use any internet connection, you will be monitored. Regardless of where your servers are located, numerous entities, such as advertising or data gathering companies, will track, monitor, and record all of your activities.&lt;/p&gt;

&lt;p&gt;Once these organisations get your information, they can use it whatever they want, including selling it to other organisations interested in your browsing history. All of your online activities could be visible to a data collector if you don't use the correct safeguards. This also implies exposing your critical information to cyber risks in the lack of suitable controls, VPN protocols, and protection.&lt;/p&gt;

&lt;p&gt;This is where a virtual private network (VPN) comes in handy. Users of virtual private networks benefit from encryption and anonymity. They're also crucial for securing modern business networks, especially now that nearly every company has a large proportion of remote workers. Your remote workers can connect to your secure VPN network from anywhere, increasing your company's overall cyber security. Also, for more information on how to keep your business safe with a remote workforce, see our remote working checklist.&lt;/p&gt;

&lt;p&gt;You are protected by encryption using a VPN, regardless of the website you use or the level of security on the website, because your information is encrypted. Even if an advertiser or website can know you're on a specific site, the information is jumbled, so they can't tell much about what you're looking at or your typical browsing habits.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is VPN Tunneling?&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--svE9JXHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/983vinq70v5y9roin1nc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--svE9JXHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/983vinq70v5y9roin1nc.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Consider some of the physical tunnels you've travelled through to move from one area to another to gain a better understanding of tunnelling. Similarly, there are digital tunnels that serve a similar purpose.&lt;/p&gt;

&lt;p&gt;When you use a VPN, the programme can build a secure connection, or tunnel, between your device and the websites you access. This tunnel will also assist encrypt your activity so that only you and the website you're on can see what you're doing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is IP Masking?&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8cI2_F_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9bk8bqjxe5lzdivbkak.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8cI2_F_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9bk8bqjxe5lzdivbkak.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another advantage of using a VPN is the ability to use an IP masking tool. When you use your VPN to connect to the internet, it will begin to construct an encrypted tunnel between you and the website.&lt;/p&gt;

&lt;p&gt;Even if this happens, your IP address can be seen through the website and, depending on how the website is utilised, can sometimes be exposed to outsiders. This effectively defeats the VPN's function.&lt;/p&gt;

&lt;p&gt;Your activity will be hidden when you finish your session using a phone IP address, and no one will be able to track what you are doing online.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do I Need a VPN?&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RWWZJ5hE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79o8mww01ryiwbway4h4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RWWZJ5hE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79o8mww01ryiwbway4h4.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A VPN is a wonderful alternative if you want to hide your personal and private information online. There is a popular misperception that persons who utilise a VPN do so solely to engage in unlawful activity while online.&lt;/p&gt;

&lt;p&gt;There are numerous advantages to using a VPN, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hiding your private information.&lt;/li&gt;
&lt;li&gt;Preventing your information from getting into the wrong hands.&lt;/li&gt;
&lt;li&gt;Avoiding any censorship when traveling abroad.&lt;/li&gt;
&lt;li&gt;Accessing services that are blocked by regions, such as some shows on Netflix.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And Many More !&lt;/p&gt;

&lt;p&gt;Even if you only intend to browse the internet and check your social media accounts, most people will benefit from using a VPN. The extra security will ensure that the information you give out when online isn't given to the incorrect persons who could abuse it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some Best VPN Service Of 2021&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ExpressVPN&lt;/li&gt;
&lt;li&gt;Surfshark&lt;/li&gt;
&lt;li&gt;NordVPN&lt;/li&gt;
&lt;li&gt;ProtonVPN&lt;/li&gt;
&lt;li&gt;IPVanish&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cybersecurity</category>
      <category>security</category>
    </item>
    <item>
      <title>Um review de quase 10 anos como Dev</title>
      <author>Charles Assunção</author>
      <pubDate>Tue, 07 Sep 2021 14:52:20 +0000</pubDate>
      <link>https://dev.to/assuncaocharles/um-review-de-quase-10-anos-como-dev-48fc</link>
      <guid>https://dev.to/assuncaocharles/um-review-de-quase-10-anos-como-dev-48fc</guid>
      <description>&lt;p&gt;Recentemente eu visitei minha cidade natal e tive a oportunidade de dar um palestra sobre minha carreira e sobre as experiências que tive em meus poucos anos em TI. Inspirado pelo artigo &lt;a href="https://overreacted.io/my-decade-in-review/"&gt;Dan Abramov's Decade Review&lt;/a&gt; eu decide fazer o meu próprio review dos últimos anos, meus últimos 8 anos para ser mais preciso, até porque eu nunca tinha visto uma linha de código antes de 2013. Então vamos começar por lá...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#junho-2013"&gt;
  &lt;/a&gt;
  Junho, 2013
&lt;/h1&gt;

&lt;p&gt;Eu já tinha acabado o ensino médio há um ano e agora tinha 19 anos. Como qualquer jovem eu sofria um pouco de pressão da família para cursar uma faculdade e encontrar minha carreira. O único problema foi que eu não tinha a menor ideia do que eu queria, vindo de uma familia de policiais e pessoas da área de humanas eu até tive interesse em direito mas não chegava nem perto de imaginar como profissão.&lt;/p&gt;

&lt;p&gt;Em Junho de 2013 acontecia na minha cidade um evento chamado AppWeem, tinha uma proposta engraçada: Reunir desenvolvedores usando fantasias de meia noite a 6 da manhã para criar aplicativos para Windows 8. Eu sempre tive interesse por computador e tecnologia, tentava consertar as coisas sozinho e vivia montando e desmontado meu PC, mas eu nunca tive contato com código, se alguém me perguntasse sobre naquela época eu provavelmente diria que era algo só para super gênios da matemática, mas mesmo assim eu decidi ir naquele evento. &lt;/p&gt;

&lt;p&gt;Eu entre em contato com o Microsoft Student Partner que organizava o evento e expliquei que eu não conhecia nada de código mas se ainda assim poderia ir. Ele deu todo apoio e graças a Deus eu decidi ir mesmo com todas dúvidas. Foi uma experiência incrível e eu conheci muita gente legal que cursava TI que compartilharam suas experiências da faculdade comigo e responderam todas minhas dúvidas sobre mercado. Eu fiz alguns amigos aquele dia, bebi muito Red Bull e até dancei Harlem Shake.&lt;/p&gt;

&lt;p&gt;Alguns dias depois eu me cadastrei no vestibular da faculdade que ainda dava tempo para começar em agosto de 2013. De junho à agosto eu estudei todos materiais que o pessoal havia me recomendado no evento para que eu soubesse pelo menos o básico do básico quando a faculdade começasse. Tem muita discussão se faculdade é realmente necessária ou não para um desenvolvedor, eu não vou entrar nesse mérito aqui mas particularmente me sinto em dívida com alguns professores sensacionais que tive e somente aprendi realmente a codar depois de entrar na faculdade. &lt;/p&gt;

&lt;p&gt;Depois de 3 meses estudando eu comecei a procurar algum estágio, tentando procurar algo que eu pudesse colocar as mãos na massa e tenho que admitir que fui muito abençoado por Deus, mesmo estando bem no início eu passei no processo de estágio no MIC (Microsoft Innovation Center) que ficava em outra unidade da minha faculdade. Era um programa remunerado para desenvolver novas ideias por 3 meses com orientação de desenvolvedores senior e pesquisadores experientes, lá eu tive o primeiro contato com tecnologias WEB (ASP.net e JQuery).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2014"&gt;
  &lt;/a&gt;
  2014
&lt;/h1&gt;

&lt;p&gt;Eu tinha completado meus 3 meses no MIC e estava começando o meu segundo semestre na faculdade. Bem no início de 2014 o coordenador do meu curso me recomendou para um estágio em uma empresa chamada TecMidia, eles faziam software para empresas de jornais, eu comecei a trabalhar lá com C# e aprendi muita coisa, tudo era novo para mime por vários momentos pensei que eu não era bom suficiente (Ei síndrome do impostor), mas a animação por estar trabalhando como desenvolvedor era maior. Não foi muito fácil sincronizar minha vida de estudante com o estágio, eu morava 25 km da empresa, mas definitivamente valeu a pena.&lt;/p&gt;

&lt;p&gt;Ainda no começo do meu segundo semestre eu fui selecionado para a posição de Monitor de Algoritmos por causa da minha boa nota no primeiro semestre. Basicamente o que eu tinha que fazer era chegar 1 hora antes na faculdade para ficar a disposição dos alunos novos que quisessem tirar dúvidas e também ajudar o professor eventualmente a corrigir os exercícios. Pelos próximos 4 semestre eu tive a honra de continuar como monitor e ajudar o professor, foi um jeito muito legal para manter toda teoria do início fresca na minha mente. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2015"&gt;
  &lt;/a&gt;
  2015
&lt;/h1&gt;

&lt;p&gt;Esse foi um ano sensacional para mim, eu ainda era monitor na faculdade e estagiário na TecMidia... Lembra que eu disse que eu participei de um evento em 2013? Então, o organizador daquele evento agora era Microsoft Student Partner Lead responsável pelo meu estado (MG), a gente tinha mantido contado depois do evento até então. Em 2015 ele me recomendou para o programa Microsoft Student Partner, quando eu fui aceito foi uma das melhores sensações que já senti, juntos a gente iria compartilhar conhecimento e nossas experiências dando palestras em diversas cidades, participando de eventos e organizando hackathons. Conhecemos tantas pessoas sensacionais nessa jornada.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sONwYBTq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charlesassuncao.tech/static/fc6cf2a57b88ec4497aaff71ed703188/8179c/img_20150924_004304.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sONwYBTq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charlesassuncao.tech/static/fc6cf2a57b88ec4497aaff71ed703188/8179c/img_20150924_004304.jpg" alt="Charles talking in the stage" title="Charles talking in the stage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2016"&gt;
  &lt;/a&gt;
  2016
&lt;/h1&gt;

&lt;p&gt;Acredito que foi o ano que mais viajamos para eventos como MSP, perdi a conta de quantas cidades diferente fomos. &lt;/p&gt;

&lt;p&gt;No fim do ano eu fui convidado, junto com outros MSP selecionados, para ir na sede da Microsoft em São Paulo e assistir um evento sobre a Imagine Cup onde o próprio Satya Nadella estaria. Nem preciso dizer o quanto essa experiência foi sensacional né?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UznVmmg6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charlesassuncao.tech/static/a4e477c90245fbba6bd34e5d189377fc/ff12a/untitled.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UznVmmg6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charlesassuncao.tech/static/a4e477c90245fbba6bd34e5d189377fc/ff12a/untitled.png" alt="Satya speaking on the stage " title="Satya speaking on the stage "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2017"&gt;
  &lt;/a&gt;
  2017
&lt;/h1&gt;

&lt;p&gt;Agora eu era desenvolvedor JR na TecMidia por quase um ano e já tinha percebido que eu realmente gostava de tecnologias WEB e estava focando somente nisso, foi então que recebi a oferta de uma Fintech nova na minha cidade que tinha uma proposta muito interessante: Fazer o mercado financeiro acessível para todos. Fui oferecido a posição de front-end e então eu era o terceiro membro do recém criado time de front da Toro Investimentos. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vrL1KXkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charlesassuncao.tech/static/1c09f11ba7310306e7c01e419d135e1b/fb329/img_20170207_122458_456.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vrL1KXkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charlesassuncao.tech/static/1c09f11ba7310306e7c01e419d135e1b/fb329/img_20170207_122458_456.jpg" alt="Designers and Devs having lunch together " title="Designers and Devs having lunch together "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🏳 Almoço é zona neutra, designers e devs almoçando juntos em paz :D &lt;/p&gt;

&lt;p&gt;Eu tinha acabado de iniciar uma das experiências mais ricas que já tive, eu teria que escrever um artigo somente para descrever tudo que aprendi e vivi na Toro, foi literalmente minha primeira experiência como front, trabalhando com designers em um time usando scrum e com uma missão que eu conseguia sentir orgulho de fazer parte. Eu aprendi muito sobre a parte técnica ( hard skills ) e muito sobre trabalho em equipe. Sou eternamente grato por pessoas sensacionais que me ajudaram a me tornar um profissional melhor. ( Obrigado &lt;a href="https://www.linkedin.com/in/helena-rodrigues-6b668b5a/"&gt;Helena&lt;/a&gt; e &lt;a href="https://www.linkedin.com/in/fabricio-navega-1b6b432b/"&gt;Fabricio&lt;/a&gt; por toda a paciência que tiveram comigo 😁 ) &lt;/p&gt;

&lt;p&gt;Eu estava lá bem no início, escrevendo o primeiro &lt;code&gt;ng new&lt;/code&gt; do que se transformaria na &lt;a href="https://www.toroinvestimentos.com.br/"&gt;Toro Investimentos&lt;/a&gt;, então você pode entender o orgulho que ainda tenho de ter contribuído, hoje vendo as notícias sobre a empresa. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2018"&gt;
  &lt;/a&gt;
  2018
&lt;/h1&gt;

&lt;p&gt;Foi definitivamente o ano com mais mudanças na minha vida, até esse ponto na minha vida eu nunca tinha saído do Brasil, nem ao menos tinha um passaporte e alguns poucos meses que 2018 começou eu passei em um processo para uma empresa em Varsóvia, Polônia. Eu mal podia acreditar nisso, mesmo com meu inglês meia boca eu consegui passar no processo, não foi nada fácil, mas eu consegui. 🎉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7SMkyz72--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charlesassuncao.tech/static/2deba9dd9de1f76926cd55ecbbe2c433/fb329/img_0937.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7SMkyz72--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charlesassuncao.tech/static/2deba9dd9de1f76926cd55ecbbe2c433/fb329/img_0937.jpg" alt="Palace of Culture" title="Palace of Culture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Eu estava indo trabalhar no Credit Suisse sendo terceirizado pela SII Poland, empresa gigante, novo país, nova cultura, novos desafios, novos amigos... Longe da família, dos velhos amigos...  Não foi fácil adaptar. &lt;/p&gt;

&lt;p&gt;Graças a Deus eu fiz verdadeiros bons amigos, com pouco tempo eu já estava viajando pela Europa com o &lt;a href="https://www.linkedin.com/in/pawel-labus/"&gt;Pawel&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/karolpiotrowicz/"&gt;Karol&lt;/a&gt; e &lt;a href="https://www.linkedin.com/in/rafael-l-toscano-7232aa21/"&gt;Rafael&lt;/a&gt;. Eu até convenci o karol, que era meu gerente, a visitar o Brasil com sua namorada. Rafael e eu tínhamos o hábito de ir muito tomar café e visitar alguma Starbucks aleatória pela cidade para sentar e ficar estudando ou desenvolvendo. A vida lá ficou mais fácil com esses amigos, o tempo passou rápido.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5KRrETsz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charlesassuncao.tech/static/655c59764de62187aaf5752ab641411b/fb329/img_1422-collage.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5KRrETsz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charlesassuncao.tech/static/655c59764de62187aaf5752ab641411b/fb329/img_1422-collage.jpg" alt="Friends Collage" title="Friends Collage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2019"&gt;
  &lt;/a&gt;
  2019
&lt;/h1&gt;

&lt;p&gt;Bem no início de 2019 eu fui contratado como funcionário do Credit Suisse ( Não mais terceirizado agora ). Agora eu tinha o título de Senior Software Engineer e trabalhei em vários projetos diferentes. No começo de 2019 eu comecei a trabalhar em um projeto em conjunto com um time de Nova York, o que foi uma experiência bem interessante tentar manter uma comunicação estando em horário bem diferentes. &lt;/p&gt;

&lt;p&gt;Enquanto isso eu estava indo quase todos os dias para cafeterias com o Rafael para estudar Algoritmos e Estruturas de dados, foi um período incrível das nossas vidas, a gente desafiava um ao outro constantemente. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TLyvDOTI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charlesassuncao.tech/static/1490c5ebb4507d6421bc7747c2abd228/fb329/img_20190115_142630.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TLyvDOTI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charlesassuncao.tech/static/1490c5ebb4507d6421bc7747c2abd228/fb329/img_20190115_142630.jpg" alt="Friends at coffee" title="Friends Collage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O momento mais marcante de 2019 foi em Julho, quando eu decidi fazer um movimento ousado, mesmo não me considerando bom o suficiente (olá de novo síndrome do impostor), eu me candidatei em uma posição na empresa que sempre sonhei trabalhar. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jb8Lu-FN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charlesassuncao.tech/static/663e50cb601e16a13b74aea36b648c03/fb329/img_1842.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jb8Lu-FN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charlesassuncao.tech/static/663e50cb601e16a13b74aea36b648c03/fb329/img_1842.jpg" alt="Microsoft T-shirt" title="Microsoft T-shirt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Você pode notar que desde o início da minha carreira eu sempre tive uma influência muito forte da Microsoft ( MIC, MSP... ), então foi completamente natural desenvolver o sonho de trabalhar lá um dia. Eu passei no processo e no final de 2019, eu recebi a oferta. Foi definitivamente um dos momentos mais felizes da minha vida, eu não sabia nem o que fazer de tanta felicidade. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2020-2021"&gt;
  &lt;/a&gt;
  2020, 2021
&lt;/h1&gt;

&lt;p&gt;Novamente anos de muitas mudanças, me mudei para Praga, comecei a trabalhar na Microsoft no time do &lt;a href=""&gt;FluentUI&lt;/a&gt;, fiz muitas contribuições open source, aprendi muito mas muito mesmo com o time incrível no qual eu fui colocado, pandemia veio e pedi transferência para o Brazil até a pandemia oficialmente acabar... Eu acredito que vou precisar de um artigo separado para compartilhar essas experiência sensacional de trabalhar em uma big tech com pessoas incríveis e com a sensação de aprendizado diária. Isso vai ficar para próxima então, mas você pode me acompanhar e ver minha jornada me segundo no &lt;a href="https://www.instagram.com/charlesassuncaooficial/"&gt;Instagram&lt;/a&gt;, &lt;a href="https://github.com/assuncaocharles"&gt;Github&lt;/a&gt; ou me adicionando no &lt;a href="https://www.linkedin.com/in/charlesassuncao/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>career</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Learning HTML in 4 Hours as a beginner</title>
      <author>Madhavi Swamy</author>
      <pubDate>Tue, 07 Sep 2021 14:30:29 +0000</pubDate>
      <link>https://dev.to/madhaviswamy/learning-html-in-4-hours-as-a-beginner-247k</link>
      <guid>https://dev.to/madhaviswamy/learning-html-in-4-hours-as-a-beginner-247k</guid>
      <description>&lt;p&gt;Hey readers, the title of this article is not click-bait, you can actually start learning HTML and get into CSS within a few hours even without knowing the fundamentals of it. This article here precisely tells you HOW TO DO THAT!&lt;/p&gt;

&lt;p&gt;In this modern tech-focused world, there are many UI frameworks preferred while building any web-based application, but every single webpage on the internet is just HTML at its core. After reading this article to completion, you should be able to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Structure a website with basic elements of HTML.&lt;/li&gt;
&lt;li&gt;Apply basic formatting and learn separation of content in a webpage.&lt;/li&gt;
&lt;li&gt;Bring a webpage to life using different images and tables.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a rush? Watch our video below to learn the basics of HTML in 5 minutes! We're also hosting a live tutorial for HTML this Thursday. Read till the end for the link!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/XNk53PuKU9A"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-what-is-html"&gt;
  &lt;/a&gt;
  1. &lt;strong&gt;What is HTML?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Hypertext Markup Language or HTML has become one of the core technologies that power every single website on the internet. HTML was first created by Tim Berners-Lee, Robert Cailliau in the year 1989. While there’s an age-old debate on whether HTML is a programming language or not, it is very important to note that every webpage that you create will have at least a part of HTML involved. &lt;/p&gt;

&lt;p&gt;In my opinion, Markup languages are nothing but a simplified programming language consisting of easily understood keywords and tags, used to format the overall view of the page and its contents. If you are just starting off in web development, note that HTML is most commonly used with CSS (Cascading Style Sheets) for styling and JavaScript for added interactivity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dsanmFyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/Yfuze0AhSKek1xHAFpbSYaAcyeRYAw1GfL9YNoPsdhWp32XsKEcDgwSz26V-bfZmj9pXKfGOQwbgvYwd9hlQ6oFIzuVvDmfzecUQGgyhb9E0k7qIV9WM5UpSYIlG884H0TV7W3mb%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dsanmFyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/Yfuze0AhSKek1xHAFpbSYaAcyeRYAw1GfL9YNoPsdhWp32XsKEcDgwSz26V-bfZmj9pXKfGOQwbgvYwd9hlQ6oFIzuVvDmfzecUQGgyhb9E0k7qIV9WM5UpSYIlG884H0TV7W3mb%3Ds0" alt="Image credits: freecodecamp.org"&gt;&lt;/a&gt;                                                                &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Image credits: freecodecamp.org&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#2-structure-of-tags"&gt;
  &lt;/a&gt;
  2. &lt;strong&gt;Structure of Tags&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;A Markup Language allows computers to speak to each other and controls how text is processed and presented. To do this HTML uses two things- tags and attributes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-tag-names"&gt;
  &lt;/a&gt;
  a. Tag Names
&lt;/h3&gt;

&lt;p&gt;In simple language, a tag is any piece of information that describes the data or content that it is assigned to. Tags can be used to display bookmarks, digital images, videos, files, and so on, represented within closed brackets . Most tags must be opened &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; and closed &lt;code&gt;&amp;lt;/p&amp;gt;&lt;/code&gt; in order to function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Close what you open&lt;/em&gt;!&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;In any programming language, it is important that you use the syntax and structure your code appropriately. Each web browser has its own built-in code/rules, that govern how it will behave. You will find some browsers that will make a correct guess when it detects something like the missing closing tag in your example, but you can not rely on all browsers reacting the same way. &lt;/p&gt;

&lt;p&gt;Therefore in the absence of closing tags, some browsers might think that all your other tags are a part of the same element, this can result in an unfavorable output. It is always a good practice to close all the tags in use. &lt;/p&gt;

&lt;p&gt;The latest version of HTML, ie., HTML5 currently does not allow the use of self-closing tags. &lt;/p&gt;

&lt;p&gt;But, there are some tags that are classified as &lt;a href="http://xahlee.info/js/html5_non-closing_tag.html"&gt;self-closing tags&lt;/a&gt; which make use of a “/” character in order to effectively close out a beginning tag. To put it simply, there are a few tags that don't require closing tags and they can end within a starting tag only or survive without any! For example, &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; used to embed an image, is a self-closing tag.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--72N2d2E4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/QMiEsUdQeE-_ggPwYOdsyMuJYwRmqkodJ_E0Z6rgU9ysfYa87GTxznfjcpUOC7-RZrdZjimq1_TmmTHf2Yf-bcl3Nz3mOmjemuji1PSlAWNA_3T31E3jww1KqD_DKBFjmO02usRW%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--72N2d2E4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/QMiEsUdQeE-_ggPwYOdsyMuJYwRmqkodJ_E0Z6rgU9ysfYa87GTxznfjcpUOC7-RZrdZjimq1_TmmTHf2Yf-bcl3Nz3mOmjemuji1PSlAWNA_3T31E3jww1KqD_DKBFjmO02usRW%3Ds0" alt="https://lh6.googleusercontent.com/QMiEsUdQeE-_ggPwYOdsyMuJYwRmqkodJ_E0Z6rgU9ysfYa87GTxznfjcpUOC7-RZrdZjimq1_TmmTHf2Yf-bcl3Nz3mOmjemuji1PSlAWNA_3T31E3jww1KqD_DKBFjmO02usRW=s0"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#b-attributes"&gt;
  &lt;/a&gt;
  b. Attributes
&lt;/h3&gt;

&lt;p&gt;In an HTML element, the tag name is followed by an attribute that has a certain value. Most tags have a set of predefined attributes and are technically semantic. An HTML attribute is a way to provide additional information about the tag it's attached to. Think of attributes as a way to further customize the meaning and/or behavior of the tag. Each attribute has its own rules for the meaning of its value. &lt;/p&gt;

&lt;p&gt;For example, look at the above image, the value of the &lt;code&gt;src&lt;/code&gt; attribute has to be unique in the entire HTML document which is used to provide the path of the image. &lt;/p&gt;

&lt;p&gt;Below is a visual representation of an HTML element with an open tag (start tag) followed by the name and attribute, and a close tag (end tag) showing a forward slash and open tag name. To know more about each of these HTML tags, stay tuned for a Bonus at the end of the article.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VKkXktWN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/jIwWfQHFDUh7SWnsZPDWjWwVo4sdrQ2OWmpWHtEGcORqAMsVXrpDxdELS0N-ePNp_Dg38u40vT3s6a3wEVXaHkvj-f3ChO1PL6nl21lkq_Y8TLbNt0QCnkgiH8mHfqyAcZsBEUkA%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VKkXktWN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/jIwWfQHFDUh7SWnsZPDWjWwVo4sdrQ2OWmpWHtEGcORqAMsVXrpDxdELS0N-ePNp_Dg38u40vT3s6a3wEVXaHkvj-f3ChO1PL6nl21lkq_Y8TLbNt0QCnkgiH8mHfqyAcZsBEUkA%3Ds0" alt="https://lh5.googleusercontent.com/jIwWfQHFDUh7SWnsZPDWjWwVo4sdrQ2OWmpWHtEGcORqAMsVXrpDxdELS0N-ePNp_Dg38u40vT3s6a3wEVXaHkvj-f3ChO1PL6nl21lkq_Y8TLbNt0QCnkgiH8mHfqyAcZsBEUkA=s0"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you look at the HTML markup for any webpage today, you will see HTML elements contained within other HTML elements. These elements that are "inside" of other elements are known as nested elements, and they are essential to building any webpage today. Think of HTML tags as boxes that hold your content. Your content can include text, images, and related media. Sometimes, you need to places boxes inside of other boxes. Those "inner" boxes are nested inside of others. Let's learn with an example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Anatomy of an HTML document:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element is the root element and it defines the whole HTML document and the whole code is nested in &lt;code&gt;&amp;lt;html&amp;gt;&amp;lt;/html&amp;gt;&lt;/code&gt;. Therefore every other tag is the child element of &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element is a container for metadata and is always placed between the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tags.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; sets the title of your page, which is the title that appears in the browser tab when the page is loaded. It is also used to describe the page when you bookmark it or mark it as favorite.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; represents or defines the document's entire body&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; tag specifies the main content of a document and is unique to the document. It shouldn't contain any content that is repeated across documents such as sidebars, navigation links, copyright information, site logos, and search forms.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;to &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; define the heading and &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; defines a paragraph.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="na"&gt;DOCTYPE&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;First Project&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;My First Heading&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My first paragraph.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-semantic-html"&gt;
  &lt;/a&gt;
  3. &lt;strong&gt;Semantic HTML&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;As a programmer, you could be reading through hundreds or thousands of lines of code. The easier it is to read and understand any programmed document, the easier it makes your job. &lt;a href="https://www.freecodecamp.org/news/semantic-html5-elements/"&gt;Semantic HTML&lt;/a&gt; precisely does that for you.  Semantic HTML elements provide meaning to your document rather than just a presentation. &lt;/p&gt;

&lt;p&gt;According to &lt;a href="http://dictionary.com"&gt;Dictionary.com&lt;/a&gt;  semantics refers to the correct interpretation of the meaning of a word or sentence.&lt;/p&gt;

&lt;p&gt;Some Semantic HTML practices:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Semantic markup requires that HTML elements be used according to their intended purpose.&lt;/li&gt;
&lt;li&gt;Semantic markup requires the separation of content and presentation.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#some-tips-and-bonus-document"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Some tips and Bonus document&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;I have created a list of some commonly used HTML tags you can refer to. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://2cyko.csb.app/"&gt;Bonus Document&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use it to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Read about the most commonly used HTML tags&lt;/li&gt;
&lt;li&gt;Read the complete documentation of each and every tag mentioned&lt;/li&gt;
&lt;li&gt;Fork and use this project to learn&lt;/li&gt;
&lt;li&gt;experiment with different styling and optimizations&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I recommend beginners to first start their projects on &lt;a href="https://codesandbox.io/?from-app=1"&gt;Codesandbox&lt;/a&gt;. Sandbox environments are websites designed to allow you to write and immediately run small pieces of code. This is a great learning tool for beginners and an excellent debugging tool for experts. &lt;/p&gt;

&lt;p&gt;Please ‘fork’ the original sandbox so you can save your work! For any feedback or mentoring, you can share your project link with us in our &lt;a href="https://thewriting.dev/pl"&gt;Discord Community&lt;/a&gt; : &lt;/p&gt;

&lt;p&gt;Following a huge demand, we're hosting a Live tutoring session on &lt;strong&gt;learning HTML&lt;/strong&gt; this week. Signup using this form so that you don't miss out on the event. Links will be only shared if you fill the form, so sign up right away!&lt;/p&gt;

&lt;p&gt;Link to &lt;a href="https://forms.gle/xhR2TsxmkmLmryX37"&gt;Google Form&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary-tldr"&gt;
  &lt;/a&gt;
  Summary (TLDR)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Most HTML tags have an opening and closing tag, but not all&lt;/li&gt;
&lt;li&gt;Tags that don’t have a closing tag are not allowed to wrap content&lt;/li&gt;
&lt;li&gt;Self-closing tags (e.g., &lt;code&gt;&amp;lt; /&amp;gt;&lt;/code&gt;) are not allowed in modern HTML&lt;/li&gt;
&lt;li&gt;If a tag has a &lt;code&gt;&amp;lt;/&amp;gt;&lt;/code&gt; closing tag, always use it, even when it’s technically optional&lt;/li&gt;
&lt;li&gt;Attributes are name-value pairs that provide us with some additional information about the tag&lt;/li&gt;
&lt;li&gt;To structure your code precisely practice Semantic HTML&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Comment below your experience developing your first website. Don’t forget to show us some&lt;/em&gt; ❤ &lt;em&gt;if you found this article helpful.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s connect! I’d love to hear your feedback or questions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://twitter.com/thematsci_gal"&gt;Twitter&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.linkedin.com/in/madhavi-swamy/"&gt;Linkedin&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://discord.gg/4MzwvcYa"&gt;&lt;strong&gt;Discord&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here are the links to my opensource projects:)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://z553u.csb.app/"&gt;Google webpage recreation (without CSS)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jksg3.csb.app/"&gt;Google webpage recreation (with CSS)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://2cyko.csb.app/"&gt;HTML tags&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Liman ID Bilgisi Nasıl Elde Edilir</title>
      <author>Ahmed Said Çıtak</author>
      <pubDate>Tue, 07 Sep 2021 14:24:29 +0000</pubDate>
      <link>https://dev.to/aciklab/liman-id-bilgisi-nasil-elde-edilir-38n6</link>
      <guid>https://dev.to/aciklab/liman-id-bilgisi-nasil-elde-edilir-38n6</guid>
      <description>&lt;p&gt;Liman id bilgisi, liman ana ekranında bulunan profil kısmından görüntülenebiliyor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sMNMZske--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96hu2341fesexehkcdxc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sMNMZske--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96hu2341fesexehkcdxc.png" alt="Screenshot_2021-09-01_16-20-11"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Liman ana sayfasında ekranın sağ üst kısmında limana giriş yapılan kullanıcı profili gözüküyor. Profil üzerine tıkladığımızda açılan modal ile birlikte liman bilgilerine erişebiliyoruz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dLUpYmj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjwapunh5n24b8euz9tf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dLUpYmj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjwapunh5n24b8euz9tf.png" alt="alt text"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Burada bulunan &lt;strong&gt;liman id&lt;/strong&gt; kısmından gerekli bilgiyi temin edebiliriz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aZidSCCl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hnd2ofkcj5ut3qdiuo3z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aZidSCCl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hnd2ofkcj5ut3qdiuo3z.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>liman</category>
      <category>id</category>
      <category>server</category>
      <category>control</category>
    </item>
    <item>
      <title>Mudar de Carreira (ou emprego): Como decidir?</title>
      <author>TechSisters Brasil</author>
      <pubDate>Tue, 07 Sep 2021 14:07:18 +0000</pubDate>
      <link>https://dev.to/techsistersbrasil/mudar-de-carreira-ou-emprego-como-decidir-495h</link>
      <guid>https://dev.to/techsistersbrasil/mudar-de-carreira-ou-emprego-como-decidir-495h</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IIeQvGzf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hg1os5rpzjbs8u20jypy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IIeQvGzf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hg1os5rpzjbs8u20jypy.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Se você chegou nesse post, imagino que é porque isso já vem martelando na sua cabeça há algum tempo mas você está sentindo alguma dificuldade nesse processo. Muita coisa passa pela cabeça e o velho conselho: “Saia da sua zona de conforto!” chega a dar um arrepio na espinha. &lt;em&gt;&lt;strong&gt;Mas tudo bem, mudanças nem sempre são fáceis e na maioria das vezes levam tempo para acontecer.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Eu já estive nessa posição mais de uma vez e, ainda assim, por muito tempo me vi paralisada na tomada de decisões importantes, quase que esperando por um sinal do universo para seguir por um caminho ou outro. 🛤&lt;/p&gt;

&lt;p&gt;A verdade é que ficamos acomodados dentro da nossa vivência e por mais que a gente não esteja muito feliz ainda &lt;em&gt;“é mais fácil permanecer no mesmo lugar”&lt;/em&gt; afinal, a gente já sabe como tudo funciona e o que precisa ser feito.&lt;/p&gt;

&lt;p&gt;Até que certo dia, vendo um vídeo no youtube, uma conversa me chamou bastante atenção e eu entendi que:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;A vida é feita de escolhas e ninguém além de você pode tomar a decisão de sair de onde você está.&lt;/strong&gt; Nesse dia, entendi que NÃO escolher também é uma escolha e isso irá gerar uma consequência: O fato de permanecer no mesmo lugar.&lt;/em&gt; ❌&lt;/p&gt;

&lt;p&gt;A partir dai eu resolvi que não queria ficar no mesmo lugar e procurei uma estratégia para escolher com mais precisão. Pra isso eu precisava colocar os pés no chão e entender onde cada caminho poderia me levar e pra isso eu usei algumas dicas que me ajudaram a fazer com que essa escolha fizesse mais sentido e são as que eu vou compartilhar aqui hoje. Então vamos lá!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&amp;gt; Passo 01: Coloque no papel todas as possibilidades que você tem agora&lt;/strong&gt; ✅&lt;br&gt;
Pense no que você faz, você gosta de fazer isso? É possível continuar trabalhando com isso nesse momento? &lt;strong&gt;SE SIM&lt;/strong&gt;, quais a opções de cargos e/ou empresas em que você poderia se encaixar?&lt;/p&gt;

&lt;p&gt;Analise o que você tem a disposição e o que você pode fazer para realizar essa mudança, mesmo ainda estando nesse ambiente.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SE NÃO&lt;/strong&gt;, pense nas coisas que você é bom! Anote o que você poderia ou gostaria de fazer no seu futuro próximo e como isso poderia ser realizado, mesmo que a longo prazo. Faça uma pesquisa de mercado, há algo em que você pode se encaixar?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exemplo: Hoje, sou advogada, mas gostaria de mudar de carreira para algo que me porporcionasse realização profissional e que aumentasse minha renda nos próximos anos. Tenho pensado em algo relacionado a área de Tecnologia da Informação, pois é uma área em constante expansão.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&amp;gt; Passo 02: Crie uma linha do tempo&lt;/strong&gt; ✅&lt;br&gt;
A partir do que você pensou no Passo 01, coloque suas ideias no papel! Projete as possibilidades escolhidas a médio e longo prazo. Tente imaginar tudo com a maior quantidade de detalhes que você tiver, alinhando com o tempo que você tem e o que você pode fazer nos próximos meses/anos.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exemplo: Ainda atuo em alguns processos como advogada, posso esperar terminar todos eles e fazer uma faculdade, mas isso irá adiar meus planos um pouco mais. Ou posso utilizar meu tempo livre para estudar paralelamente e já ir me qualificando o que poderia acelerar minha transição de carreira. Posso investir meu tempo em cursos gratuitos, até decidir o que quero de verdade e investir em um curso técnico pago. Ou Posso não fazer nada e pensar sobre isso daqui alguns meses.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;- Lembre que todas as alternativas, até mesmo a de não fazer nada, geram uma consequencia. Como você encara cada uma delas e qual faz mais sentido pra você agora?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&amp;gt; Passo 03: O que eu posso fazer a partir de hoje, com as ideias que eu tenho em mente?&lt;/strong&gt; ✅&lt;br&gt;
Depois que você colocou tudo no papel, escolha a opção que faz mais sentido pra você e coloque em prática! Iniciar pesquisas na área, traçar um plano de estudos semanal, colocar metas para atividades que você precisa fazer, se matricule em um curso, converse com pessoas da área, enfim, começe a colocar as coisas em prática!&lt;/p&gt;

&lt;p&gt;A partir daí é com você. &lt;strong&gt;TESTE! Você só saberá o que você gosta ou não gosta TESTANDO!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Entenda, não há nada de errado em começar um curso, depois trancar e iniciar outro. Entrar num estágio em uma empresa e no ano seguinte partir pra outra oportunidade. Este é o momento de você conhecer o mercado e entender o que funciona pra você.&lt;/p&gt;

&lt;p&gt;É claro que você nao vai virar uma bola de &lt;em&gt;pingue-pongue&lt;/em&gt; e ficar pulando de lugar em lugar, mas também não há nada de errado em conhecer o ambiente. Quando a gente não tem referência sobre uma área essa é a melhor maneira de se inserir, conhecer pessoas e criar laços.&lt;/p&gt;

&lt;p&gt;Por fim, &lt;strong&gt;entre em comunidades e converse com pessoas da sua nova carreira/área.&lt;/strong&gt; Mesmo nos cenários mais improváveis pessoas com os mesmos objetivos se ajudam e se motivam entre si e nesse momento, é isso que você precisa. Ver outras pessoas trilhando o mesmo caminho para quando o medo bater você tenha com quem conversar e em quem se inspirar.&lt;/p&gt;

&lt;p&gt;Nada é fácil e não há uma fórmula mágica. Mas isso não quer dizer que você não possa utilizar estratégias que tornem esse caminho mais agradável. E eu realmente espero que a partir dessa leitura e da aplicação das técnicas — &lt;em&gt;colocar no papel e visualizar as possibilidades faz toda diferença!&lt;/em&gt; — você se sinta mais confortável para encarar esse algo novo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parafraseando Fernando Teixeira de Andrade:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Há um tempo em que é preciso abandonar as roupas usadas, que já tem a forma do nosso corpo, e esquecer os nossos caminhos, que nos levam sempre aos mesmos lugares. É o tempo da travessia: e, se não ousarmos fazê-la, teremos ficado, para sempre, à margem de nós mesmos.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Se esse artigo foi útil pra você ou se você se lembrou de alguém que está passando por isso, envia pra ele! Todo mundo sai ganhando quando a gente compartilha o conhecimento. &lt;strong&gt;Faça diferença na vida de alguém!&lt;/strong&gt; 🙂&lt;/p&gt;

&lt;p&gt;Leia mais sobre Transição de Carreira &lt;a href="https://dev.to/simonepedrosa/o-mito-da-transicao-de-carreira-4n9"&gt;aqui!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>carreira</category>
    </item>
    <item>
      <title>Feature Flags with Spring Boot</title>
      <author>Vikas Garg</author>
      <pubDate>Tue, 07 Sep 2021 13:57:14 +0000</pubDate>
      <link>https://dev.to/vikasgarghb/feature-flags-with-spring-boot-3l1l</link>
      <guid>https://dev.to/vikasgarghb/feature-flags-with-spring-boot-3l1l</guid>
      <description>&lt;p&gt;Feature Flags is a very broad topic and have been coming back up regularly irrespective of what language you use. There are multiple platforms available which provide extensive support for managing your features external to the code or deployed as part of the code. Some of the examples are,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LaunchDarkly&lt;/li&gt;
&lt;li&gt;Togglz&lt;/li&gt;
&lt;li&gt;Property (File) based
and many more.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#problem"&gt;Problem at hand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#project"&gt;Project Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dependencies"&gt;Dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#feature"&gt;Feature Loading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#enhancement"&gt;Enhancement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#remarks"&gt;Remarks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#problem-at-hand"&gt;
  &lt;/a&gt;
  Problem at hand &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This article specifically targets a case where you can add a toggle check before any method you want before actually getting into the method execution. Be it at a controller level to prevent an API to be executed OR a service method OR a repository method. This pattern can be extended with any feature toggle implementation you use.&lt;/p&gt;

&lt;p&gt;Code for the blog can be found here. &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vikasgarghb"&gt;
        vikasgarghb
      &lt;/a&gt; / &lt;a href="https://github.com/vikasgarghb/blog-feature-flags-spring"&gt;
        blog-feature-flags-spring
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Feature Flag Annotation usage with Spring Boot.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project Setup &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;To begin with you will need,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Java 11+&lt;/li&gt;
&lt;li&gt;Gradle 7+&lt;/li&gt;
&lt;li&gt;IDE of your choice&lt;/li&gt;
&lt;li&gt;Spring Boot 2.5.4+&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#dependencies"&gt;
  &lt;/a&gt;
  Dependencies &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Apart from the other spring dependencies, you will need to include spring-aop and aspectjweaver. There are much documentation available for Aspect based programming with Spring. Won't go into much details about it. But one thing which this article focuses on is how aspect can be used to call a method before executing actual method.&lt;/p&gt;

&lt;p&gt;AspectJ's &lt;code&gt;@Before&lt;/code&gt; annotation allows us to accomplish this. As long as correct pointcut expression is provided, the method decorated with this annotation will be called before the actual method.&lt;/p&gt;

&lt;p&gt;For eg,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Before&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"execution (* blog.vgarg.features..*(..)) &amp;amp;&amp;amp; @annotation(checkFeatureFlag)"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;checkFeatureFlag&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;JoinPoint&lt;/span&gt; &lt;span class="n"&gt;joinPoint&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;CheckFeatureFlag&lt;/span&gt; &lt;span class="n"&gt;checkFeatureFlag&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;checkFeatureFlag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;featureFlagService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isFeatureFlagSet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;FeatureNotEnabledException&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@CheckFeatureFlag&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"flags.goodmorning"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@GetMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/good-morning"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;ResponseEntity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getGoodMorning&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ResponseEntity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;greetingService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getGoodMorning&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="nc"&gt;HttpStatus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;OK&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;checkFeatureFlag&lt;/code&gt; method will be executed by spring before &lt;code&gt;getGoodMorning&lt;/code&gt; method gets executed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#feature-loading"&gt;
  &lt;/a&gt;
  Feature Loading &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;So, for this post, I am using file based features but the approach can be extended to use with any other feature provider.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;FeatureFlagService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;isFeatureFlagSet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have defined an interface with a simple single method to check the status of any given feature flag. As mentioned for this post the implementation reads the toggle from a file named, &lt;code&gt;featureflags.properties&lt;/code&gt; residing in &lt;code&gt;src/main/resources&lt;/code&gt; (can be anywhere as long as it is on classpath).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enhancement"&gt;
  &lt;/a&gt;
  Enhancement &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;As mentioned before this can be extended for other feature support providers. For eg, with launch darkly the implementation will involve using the SDK provided by them. As long as the LD setup is done correct way, using their SDK is pretty simple. More can be read &lt;a href="https://docs.launchdarkly.com/sdk/server-side/java"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remarks"&gt;
  &lt;/a&gt;
  Remarks &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is very bare minimum implementation of the functionality and has the capability of being extended into more. This only applies when the feature check needs to be applied before the actual method. For eg, if a new API needs to be deployed but not released, this check can come in handy.&lt;/p&gt;

&lt;p&gt;But as any other solution this is not one size fits all solution. Would be happy to hear from the community what solutions have they tried.&lt;/p&gt;

</description>
      <category>features</category>
      <category>spring</category>
      <category>java</category>
    </item>
    <item>
      <title>10 New AWS Amplify Features to Check Out</title>
      <author>Ali Spittel</author>
      <pubDate>Tue, 07 Sep 2021 13:56:40 +0000</pubDate>
      <link>https://dev.to/aws/10-new-aws-amplify-features-to-check-out-4291</link>
      <guid>https://dev.to/aws/10-new-aws-amplify-features-to-check-out-4291</guid>
      <description>&lt;p&gt;My team at AWS has been releasing a &lt;strong&gt;ton&lt;/strong&gt; of new features that make &lt;a href="https://docs.amplify.aws/"&gt;AWS Amplify&lt;/a&gt; better than ever. Here are ten things released in the past year that I'm personally excited about, and that will speed up your development workflows!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-nextjs-support"&gt;
  &lt;/a&gt;
  1. Next.js Support
&lt;/h2&gt;

&lt;p&gt;Next.js is the latest and greatest in JavaScript frameworks. It allows for both &lt;a href="https://welearncode.com/ssr-vs-ssg/"&gt;static site generation and server-side rendering&lt;/a&gt;, which makes your sites more performant leading to a better experience for your customers. Amplify has added support for Next.js -- you can deploy server-side rendered and incremental static regenerated apps to Amplify Hosting, add in Amplify backend resources, and then you can use the Amplify JavaScript libraries to server-side render your data.&lt;/p&gt;

&lt;p&gt;Within a &lt;code&gt;getServerSideProps&lt;/code&gt;, for example, you can use the &lt;code&gt;withSSRContext&lt;/code&gt; function to allow your Amplify JavaScript code to run on the server instead of the browser.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SSR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;withSSRContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;SSR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;listParks&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;parks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listParks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, all you need to do to deploy is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/"&gt;Create an AWS account&lt;/a&gt; if you don't already have one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Navigate to &lt;a href="https://console.aws.amazon.com/amplify/home"&gt;the Amplify Console&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the orange &lt;code&gt;connect app&lt;/code&gt; button.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose &lt;code&gt;GitHub&lt;/code&gt; in the &lt;code&gt;From your existing code&lt;/code&gt; menu, and click continue&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_GanIso8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/beginners-guide-react-2020/choose-github.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_GanIso8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/beginners-guide-react-2020/choose-github.png" alt="Amplify interface with different remotes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Type in the name of your GitHub repo you just created (it should autofill!) and then click &lt;code&gt;next&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QFQLPlqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/beginners-guide-react-2020/select-your-repo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QFQLPlqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/beginners-guide-react-2020/select-your-repo.png" alt="Amplify interface with name of repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The build settings will auto-populate, and so you can just click &lt;code&gt;next&lt;/code&gt; on the &lt;code&gt;Configure build settings&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click &lt;code&gt;Save and deploy&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;No custom settings are needed -- it will create a AWS Lambda@Edge function behind the scenes for you to do the server-side rendering.&lt;/p&gt;

&lt;p&gt;If you want to read a full tutorial on how to implement this in your app, &lt;a href="https://welearncode.com/build-a-fullstack-app-nextjs/"&gt;check this out!&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-sign-in-with-apple"&gt;
  &lt;/a&gt;
  2. Sign in with Apple
&lt;/h2&gt;

&lt;p&gt;A lot of developers need to integrate "Sign in with Apple" to their apps so that users can use their pre-created Apple accounts instead of creating one from scratch. You can use the Amplify Admin UI or command line interface to enable Sign in With Apple and tie it to your Apple Developer Account, and then you can use Amplify's libraries to implement the frontend authentication flow!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xmO-xG0W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z366uavjush4uy1apvbw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xmO-xG0W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z366uavjush4uy1apvbw.png" alt="Admin UI Interface with Sign in with Apple"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out &lt;a href="https://welearncode.com/siwa/"&gt;this tutorial&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-amplify-geo-developer-preview"&gt;
  &lt;/a&gt;
  3. Amplify Geo developer preview
&lt;/h2&gt;

&lt;p&gt;Did you know that you can create maps with Amplify? Right now Amplify Geo is in developer preview mode -- you can create a map, then add markers and location based search to it.&lt;/p&gt;

&lt;p&gt;To create a map, first create an HTML element to attach it to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"map"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, you can use the helper functions to create a map with a few lines of code!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createMap&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;maplibre-gl-js-amplify&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;maplibre-gl/dist/maplibre-gl.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;initializeMap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createMap&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;map&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;initializeMap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read more about how to implement Amplify Geo &lt;a href="https://docs.amplify.aws/lib/geo/getting-started/q/platform/js/"&gt;in the docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-datastore-multiauth"&gt;
  &lt;/a&gt;
  4. DataStore Multi-auth
&lt;/h2&gt;

&lt;p&gt;AWS Amplify DataStore allows you to create online and offline available data with no extra code on your end. This is super helpful for many &lt;a href="https://welearncode.com/offline-editor/"&gt;offline data patterns&lt;/a&gt; and mobile apps.&lt;/p&gt;

&lt;p&gt;It also has support for adding different authorization rules so that different users can be allowed or restricted from performing certain actions. For example, you may want admins to be able to delete data, a regular user to be able to create data, and then unauthenticated users to read data. As of a few months ago, DataStore supports multiple types of authorization like that example!&lt;/p&gt;

&lt;p&gt;Using the Admin UI, you can add different authorization rules for different types of users:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vKG-3CqI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hjo8l1kks7g1g1mzmh9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vKG-3CqI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hjo8l1kks7g1g1mzmh9.png" alt="admin ui interface showing different authorization rules"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're interested in a full tutorial on how to integrate this into your app, check out &lt;a href="https://welearncode.com/auth-react/"&gt;this tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-environmental-variables-and-secrets"&gt;
  &lt;/a&gt;
  5. Environmental Variables and Secrets
&lt;/h2&gt;

&lt;p&gt;You can create AWS Lambda Functions using Amplify, either within a REST API or outside of it. Now, you can add environmental variables and secrets to your functions -- I used this to &lt;a href="https://welearncode.com/stripe-amplify/"&gt;create a function that would create a user account every time they bought an item from my site with Stripe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To do this, first create a function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;➜  next10-blog git:&lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt; ✗ amplify add &lt;span class="k"&gt;function&lt;/span&gt;
? Select which capability you want to add: Lambda &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;serverless &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
? Provide an AWS Lambda &lt;span class="k"&gt;function &lt;/span&gt;name: next10bloge53fc67d
? Choose the runtime that you want to use: NodeJS
? Choose the &lt;span class="k"&gt;function &lt;/span&gt;template that you want to use: Hello World
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, under advanced configuration, you can add environmental variables and secrets!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;? Do you want to configure environment variables &lt;span class="k"&gt;for &lt;/span&gt;this &lt;span class="k"&gt;function&lt;/span&gt;? Yes
? Enter the environment variable name: github_user
? Enter the environment variable value: aspittel
? Select what you want to &lt;span class="k"&gt;do &lt;/span&gt;with environment variables: Im &lt;span class="k"&gt;done&lt;/span&gt;
? Do you want to configure secret values this &lt;span class="k"&gt;function &lt;/span&gt;can access? Yes
? Enter a secret name &lt;span class="o"&gt;(&lt;/span&gt;this is the key used to look up the secret value&lt;span class="o"&gt;)&lt;/span&gt;: github_key
? Enter the value &lt;span class="k"&gt;for &lt;/span&gt;github_key: &lt;span class="o"&gt;[&lt;/span&gt;hidden]
? What &lt;span class="k"&gt;do &lt;/span&gt;you want to &lt;span class="k"&gt;do&lt;/span&gt;? Im &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you can use them in your function! For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Parameters&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SSM&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getParameters&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;Names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;github_key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secretName&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;secretName&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
      &lt;span class="na"&gt;WithDecryption&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Parameters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-admin-ui-data-explorer"&gt;
  &lt;/a&gt;
  6. Admin UI Data Explorer
&lt;/h2&gt;

&lt;p&gt;As a software engineer, I can't tell you how many times I've had to create a secondary admin app for the company use to manage data. The Amplify Admin UI solves this problem by auto-generating one for you! You can manage application data using its data explorer. You can perform all the CRUD operations on the data, and even manage your app's users!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3TPn4SQH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj686q5v0l0t2iad9kko.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3TPn4SQH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj686q5v0l0t2iad9kko.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://welearncode.com/intro-amplify-admin-ui/"&gt;Here's a full tutorial on using the Admin UI.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-data-seeding"&gt;
  &lt;/a&gt;
  7. Data Seeding
&lt;/h2&gt;

&lt;p&gt;To keep going with the awesome Admin UI features, you can also automatically generate seed data for your apps. Often, you'll need test data when you're developing your app to make sure it's working as promised. You can autogenerate this data with the Admin UI! You can choose how many rows to generate, and then it will use your fields data types to generate the data!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ziHjVlT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/datastore-seed.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ziHjVlT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/datastore-seed.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-datastore-selective-sync-and-sort"&gt;
  &lt;/a&gt;
  8. DataStore selective sync and sort
&lt;/h2&gt;

&lt;p&gt;DataStore allows your data to be available online and offline. In the browser it stores your data in IndexedDB by default. That being said, sometimes each user doesn't need access to all data, or only some of the application's data needs to be available offline. You can set up selective sync to only sync some of the data locally.&lt;/p&gt;

&lt;p&gt;If you wanted to only store data that is associated with a certain user ID, you could configure DataStore like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;DataStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;syncExpressions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;syncExpression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Song&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eq&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In addition, there's support for sorting data! So, if you wanted to list all of your users alphabetically, you could write a query like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;DataStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Predicates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ALL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SortDirection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ASCENDING&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://docs.amplify.aws/lib/datastore/getting-started/q/platform/js/"&gt;Here's DataStore's full documentation.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-amplify-flutter"&gt;
  &lt;/a&gt;
  9. Amplify Flutter
&lt;/h2&gt;

&lt;p&gt;I'll be the first to admit that I'm a true web developer and really have no mobile knowledge. That being said, I'm really excited about Amplify releasing support for Flutter. Flutter allows for cross-platform development, and it seems to be picking up steam in the community.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.amplify.aws/start/q/integration/flutter/"&gt;Here's a tutorial on how to get started with Amplify and Flutter!&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-amplify-containers"&gt;
  &lt;/a&gt;
  10. Amplify containers
&lt;/h2&gt;

&lt;p&gt;So Amplify already has great support for serverless functions and GraphQL APIs, but sometimes you need to migrate an existing app over to Amplify. Also, sometimes you need to have long-running tasks, which don't integrate well into Lambda Functions. Or you want to write a full Django or Rails app which uses a bunch of other libraries which may not integrate well into a Lambda Function. Well, good news! Amplify supports AWS Fargate Containers! You can deploy anything that runs in a Docker Container within Amplify.&lt;/p&gt;

&lt;p&gt;First, add an API like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify add api

? Please &lt;span class="k"&gt;select &lt;/span&gt;from one of the below mentioned services:
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; REST
? Which service would you like to use
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; API Gateway + AWS Fargate &lt;span class="o"&gt;(&lt;/span&gt;Container-based&lt;span class="o"&gt;)&lt;/span&gt;
? Provide a friendly name &lt;span class="k"&gt;for &lt;/span&gt;your resource to be used as a label &lt;span class="k"&gt;for &lt;/span&gt;this category &lt;span class="k"&gt;in &lt;/span&gt;the project:
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; containerb5734e35
? What image would you like to use
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; ExpressJS - REST template
? When &lt;span class="k"&gt;do &lt;/span&gt;you want to build &amp;amp; deploy the Fargate task
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; On every &lt;span class="s2"&gt;"amplify push"&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Fully managed container &lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
? Do you want to restrict API access
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; No
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, you can go into your &lt;code&gt;amplify/backend/api/&amp;lt;your-api-name&amp;gt;/src/index.js&lt;/code&gt; file, and add in your app code! For example with a Express app, you could write something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bodyParser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body-parser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bodyParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bodyParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="c1"&gt;// Enable CORS for all methods&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Access-Control-Allow-Headers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Origin, X-Requested-With,Content-Type, Accept&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contentType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; 
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Example app listening at http://localhost:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, you can run &lt;code&gt;amplify push&lt;/code&gt; to deploy! You can configure your own Dockerfile and bring your own backend!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thanks for checking out these features! If you have any feedback on them, I'd love to hear. Stay tuned for more coming soon 😃.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How Google, Twitter, and Spotify built a culture of documentation</title>
      <author>Nik Begley</author>
      <pubDate>Tue, 07 Sep 2021 13:51:56 +0000</pubDate>
      <link>https://dev.to/doctave/how-google-twitter-and-spotify-built-a-culture-of-documentation-3e0m</link>
      <guid>https://dev.to/doctave/how-google-twitter-and-spotify-built-a-culture-of-documentation-3e0m</guid>
      <description>&lt;p&gt;Many technical problems ultimately turn out to be people problems, and a lack of good documentation is no exception. Writing and maintaining documentation is a habit that needs to be encouraged and nurtured. The unfortunate truth is that no amount of tooling is going to help without a &lt;strong&gt;culture of documentation&lt;/strong&gt;. Today we'll look at how 3 high performance engineering companies, Google, Twitter, and Spotify, handle their technical documentation and built a culture of documentation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#google"&gt;
  &lt;/a&gt;
  Google
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://twitter.com/rionam"&gt;Riona MacNamara&lt;/a&gt; has a fantastic &lt;a href="https://www.usenix.org/conference/srecon16europe/program/presentation/macnamara"&gt;talk from 2016&lt;/a&gt; talking about her work at Google improving the state of their internal documentation. We highly encourage you to watch the talk (it's only ~30 minutes), but here are a few interesting highlights of the problems they faced back in 2014:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;48% of Google engineers cited bad docs as #1 productivity issue&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;50%+ of SRE issues cited problems with docs&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Docs were considered everybody's problem, but nobody's job&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Everyone felt the pain of bad docs. Despite numerous past efforts, nothing had worked. Documentation  remained spread out in wikis, random documents, or even offline on whiteboards. Embedding technical writers into a team would help for a while, but documentation would quickly deteriorate after the writers left.&lt;/p&gt;

&lt;p&gt;So what worked for them to start changing the status quo? &lt;strong&gt;They made documentation radically simpler for their engineers&lt;/strong&gt; with a system called &lt;em&gt;g3docs&lt;/em&gt;. It did the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remove decisions - present one way to document things&lt;/li&gt;
&lt;li&gt;Host docs next to the code in source in Markdown so engineers can stay in their IDE&lt;/li&gt;
&lt;li&gt;Docs get automatically rendered into nice HTML pages on commits&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On top of the tooling work they did, the team went around creating organizational change:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Formed alliances with influential engineers to introduce the tooling&lt;/li&gt;
&lt;li&gt;Partnered with specific teams to build strategic integrations&lt;/li&gt;
&lt;li&gt;Released and iterated in the open&lt;/li&gt;
&lt;li&gt;Never &lt;em&gt;forced&lt;/em&gt; teams into a new workflow - lead by example&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After g3docs was adopted, usage grew to 200K+ documentation updates and 3.9 million page views a month &lt;em&gt;(NOTE: these numbers are from 2016)&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#twitter"&gt;
  &lt;/a&gt;
  Twitter
&lt;/h2&gt;

&lt;p&gt;Back in 2014, Twitter had 3 technical doc writers. Among other things it was their responsibility to assist the 1000+ software engineers with internal documentation. At the same time, the general atmosphere around docs at Twitter was that they were incomplete, out of date, or even nonexistent. Most documentation lived in Confluence, but some were in Google Docs or READMEs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/simeonfranklin"&gt;Simeon Franklin&lt;/a&gt; and &lt;a href="https://twitter.com/markog"&gt;Marko Gargenta&lt;/a&gt; have a &lt;a href="https://www.youtube.com/watch?v=6y4eQ6gYwdU"&gt;great talk&lt;/a&gt; where they discuss the strategy they took. Similar to Google, they embarked on a journey to change hearts and minds about documentation.&lt;/p&gt;

&lt;p&gt;They bring up the example of software engineers and testing: it was not long ago that software engineers were not expected to write tests. This expectation has been flipped, and today untested code is frowned upon. They wanted to do the same thing for docs internally at Twitter.&lt;/p&gt;

&lt;p&gt;Their approach came in 3 parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Encourage documentation via education and special &lt;strong&gt;DocDays&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Build a new &lt;strong&gt;docs-as-code&lt;/strong&gt; stack (DocBird)&lt;/li&gt;
&lt;li&gt;Create &lt;strong&gt;documentation templates&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They organized &lt;strong&gt;DocDays&lt;/strong&gt;, which are single-day hackathons where developers update their docs. Technical writers would give training on the day, and help edit the final docs. The bigger purpose of these days was to evangelize and normalize documentation writing as a practice. It builds community and a common set of expectations about documentation.&lt;/p&gt;

&lt;p&gt;To make documenting easier and standardized, they launched a new docs-as-code stack called DocBird, which is a customized wrapper around &lt;a href="https://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt;. Similar to g3docs, it builds your documentation from source automatically. It removes the questions of &lt;em&gt;"where are the docs"&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Finally, they created shared templates for documentation. These have common sections and questions and could be copied into projects to use as starting points. Staring at a blank canvas can sometimes be the hardest part of getting started writing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spotify"&gt;
  &lt;/a&gt;
  Spotify
&lt;/h2&gt;

&lt;p&gt;What makes Spotify's story interesting is that they have open sourced much of the stack they use for their documentation approach in a project called &lt;a href="https://backstage.io/"&gt;Backstage&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Backstage is a software catalog for Spotify's numerous microservices. It has a long list of features and plugins, but one of the most popular features has been the &lt;a href="https://backstage.io/blog/2020/09/08/announcing-tech-docs"&gt;integrated docs-as-code support&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Internally, we call it TechDocs. It’s the most used plugin at Spotify by far — accounting for about 20% of our Backstage traffic (even though it is just one of 130+ plugins).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Spotify's journey to Backstage's docs-as-code starts just like our previous case studies: &lt;strong&gt;the 3rd largest problem according to engineers was not being able to find the technical documentation they needed to do their work.&lt;/strong&gt; Docs were spread across Confluence, Google Docs, custom sites, and nothing could ever be found.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/garyniemen"&gt;Gary Niemen&lt;/a&gt; has a talk where he discusses their team's work in building out Spotify's "docs-as-code+" infrastructure. He highlights a couple interesting learnings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keep the solutions simple - so it just works&lt;/li&gt;
&lt;li&gt;Fiercely optimize for the engineer&lt;/li&gt;
&lt;li&gt;Standardize and centralize&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Their goal for the technical writing team is to have engineers go from "stuck to unstuck" in 1 minute with their documentation. They continue to move the needle towards this goal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-can-we-learn"&gt;
  &lt;/a&gt;
  What can we learn?
&lt;/h2&gt;

&lt;p&gt;There are a lot of common themes in these stories, but the learnings can be boiled down to 3 main points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make the engineer's life as easy as possible - remove friction&lt;/li&gt;
&lt;li&gt;Standardize and invest in your tools&lt;/li&gt;
&lt;li&gt;Make documentation an expectation through teaching and leading by example&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What we saw in these three cases, and many readers will likely agree based on experience, engineers will not maintain documentation in wikis. The context switch of moving from your code to a separate system and not being able to use your existing tooling means that documentation will be forgotten about. In these examples all three companies went with a &lt;a href="///2021/08/30/why-you-should-consider-docs-as-code.html"&gt;docs-as-code&lt;/a&gt; approach because of how frictionless it makes updating documentation for developers.&lt;/p&gt;

&lt;p&gt;All 3 companies also invested heavily in tooling. Whatever you choose for your documentation stack (we obviously strongly believe &lt;a href="https://www.doctave.com"&gt;Doctave&lt;/a&gt; is an excellent solution), stick with it and make sure that is the only place for technical documentation. There should never be a question about where the docs live.&lt;/p&gt;

&lt;p&gt;Finally, and this is likely the hardest part, you need to make documentation a part of the engineering culture. This means teaching developers how to write docs, providing examples and templates to use, organizing hack days dedicated to documentation, and working with influential engineers in your organization to set expectations. Just like how testing became a norm accepted by most engineers today, so can documentation.&lt;/p&gt;

</description>
      <category>writing</category>
      <category>programming</category>
      <category>productivity</category>
      <category>git</category>
    </item>
    <item>
      <title>How to create map like in airbnb with react and google-maps</title>
      <author>Alexander Dmitriev</author>
      <pubDate>Tue, 07 Sep 2021 13:45:26 +0000</pubDate>
      <link>https://dev.to/alex1998dmit/how-to-create-map-like-in-airbnb-with-react-and-google-maps-28i3</link>
      <guid>https://dev.to/alex1998dmit/how-to-create-map-like-in-airbnb-with-react-and-google-maps-28i3</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;English is not my native language, so there may be mistakes in the text, but I'm sure that the code can say a thousand times more than any of my words&lt;/li&gt;
&lt;li&gt;I did not use react-map-libraries to make the solution as flexible and understandable as possible&lt;/li&gt;
&lt;li&gt;This is the most simple implementation without deep styling, clustering and global-storage.&lt;/li&gt;
&lt;li&gt;Source code is here - &lt;a href="https://github.com/alex1998dmit/map_airbnb"&gt;https://github.com/alex1998dmit/map_airbnb&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h2&gt;

&lt;p&gt;Let's assume that we need to create a map with displaying apartment cards on it as it is done on airbnb&lt;br&gt;
The technology stack is next:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React &amp;amp; Typescript&lt;/li&gt;
&lt;li&gt;Google map and @googlemaps/react-wrapper&lt;/li&gt;
&lt;li&gt;MUI for style stuff&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#create-our-app"&gt;
  &lt;/a&gt;
  Create our app
&lt;/h2&gt;

&lt;p&gt;Everything is pretty trivial - you need to install the application using creat-react-app using TS&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app my-app --template typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#install-dependecies"&gt;
  &lt;/a&gt;
  Install dependecies
&lt;/h2&gt;

&lt;p&gt;For the application to work, we need MUI, @googlemaps/react-wrapper&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save @material-ui/core @material-ui/icons @googlemaps/react-wrapper
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configure-map"&gt;
  &lt;/a&gt;
  Configure map
&lt;/h2&gt;

&lt;p&gt;In this step we will integrate simple map to application. First of all you need to get google-map key - [&lt;a href="https://developers.google.com/maps/documentation/javascript/get-api-key"&gt;https://developers.google.com/maps/documentation/javascript/get-api-key&lt;/a&gt;]. &lt;br&gt;
First of all let's create a Map component, which will be wrapper for google-maps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useEffect, useRef, useState } from "react";
// we will use make styles for styling components, you can use another solutions (like css, sass or cssonjs
import { makeStyles } from "@material-ui/core";
// api mock data
import Apartments from "./apartments";

// Our component will receive center coords and zoom size in props
type MapProps = {
  center: google.maps.LatLngLiteral
  zoom: number
}

// map wrapper styles
const useStyles = makeStyles({
  map: {
    height: '100vh'
  }
})

function Map({ center, zoom }: MapProps) {
  const ref = useRef(null);
  const [map, setMap] = useState&amp;lt;google.maps.Map&amp;lt;Element&amp;gt; | null&amp;gt;(null)
  const classes = useStyles();

  useEffect(() =&amp;gt; {
    // we need to save google-map object for adding markers and routes in future
    if (ref.current) {
      // here will connect map frame to div element in DOM by using ref hook
      let createdMap = new window.google.maps.Map(
        ref.current,
        {
          center,
          zoom,
          disableDefaultUI: true,
          clickableIcons: false
        }
      );
      setMap(createdMap)
    }
  }, [center, zoom]);

  // map will be connect to this div block
  return &amp;lt;div ref={ref} id="map" className={classes.map} /&amp;gt;;
}

export default Map
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then let's modify App.tsx with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { ReactElement } from 'react';
import { Wrapper, Status } from "@googlemaps/react-wrapper";
import Map from './Map'

// Here we can add views when map will loading or failure
const render = (status: Status): ReactElement =&amp;gt; {
  if (status === Status.LOADING) return &amp;lt;h3&amp;gt;{status} ..&amp;lt;/h3&amp;gt;;
  if (status === Status.FAILURE) return &amp;lt;h3&amp;gt;{status} ...&amp;lt;/h3&amp;gt;;
  return &amp;lt;&amp;gt;&amp;lt;/&amp;gt;;
};

function App() {
  if (!process.env.REACT_APP_GOOGLE_KEY) {
    return &amp;lt;h2&amp;gt;Add google key&amp;lt;/h2&amp;gt;
  }
  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;Wrapper apiKey={process.env.REACT_APP_GOOGLE_KEY} render={render}&amp;gt;
        &amp;lt;Map center={{ lat: 55.753559, lng: 37.609218 }} zoom={11} /&amp;gt;
      &amp;lt;/Wrapper&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And result is:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--601Jdjdf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvfac0e57co971rc0vj1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--601Jdjdf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvfac0e57co971rc0vj1.png" alt="simple_map"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-custom-overlays"&gt;
  &lt;/a&gt;
  Add custom overlays
&lt;/h2&gt;

&lt;p&gt;The next step is to add a custom overlay. Why will we use overlays and not markers ? Because in my opinion it will be difficult to customize regular markers, according to the documentation we can change only icon image and label over it [&lt;a href="https://developers.google.com/maps/documentation/javascript/custom-markers"&gt;https://developers.google.com/maps/documentation/javascript/custom-markers&lt;/a&gt;]. &lt;br&gt;
Let's create an OverlayContainer, which will be a wrapper for the components located on the map at certain coordinates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import * as React from 'react'
import ReactDOM from 'react-dom';

// base function for creating DOM div node
function createOverlayElement() {
  const el = document.createElement('div');
  el.style.position = 'absolute';
  el.style.display = 'inline-block';
  el.style.width = '9999px';
  return el;
}

// Our OverlayComponent will recieve map, postion and children props - position is coords, map is google.map object and children is a component that will be render in overlay
export type Props = {
  map: google.maps.Map | null
  position: { lat: number, lng: number }
  children?: React.ReactChild
}

const OverlayContainer = (props: Props) =&amp;gt; {
  const overlay = React.useRef&amp;lt;google.maps.OverlayView | null&amp;gt;(null)
  const el = React.useRef&amp;lt;Element | null&amp;gt;(null)

  // modified OverlayView from google.maps [https://developers.google.com/maps/documentation/javascript/reference/3.44/overlay-view?hl=en]
  class OverlayView extends window.google.maps.OverlayView {
    position: google.maps.LatLng | null = null;
    content: any = null;

    constructor(props: any) {
      super();
      props.position &amp;amp;&amp;amp; (this.position = props.position);
      props.content &amp;amp;&amp;amp; (this.content = props.content);
    }

    onAdd = () =&amp;gt; {
      if (this.content) this.getPanes().floatPane.appendChild(this.content);
    };

    onRemove = () =&amp;gt; {
      if (this.content?.parentElement) {
        this.content.parentElement.removeChild(this.content);
      }
    };

    draw = () =&amp;gt; {
      if (this.position) {
        const divPosition = this.getProjection().fromLatLngToDivPixel(
          this.position
        );
        this.content.style.left = divPosition.x + 'px';
        this.content.style.top = divPosition.y + 'px';
      }
    };
  }

  React.useEffect(() =&amp;gt; {
    return () =&amp;gt; {
      if (overlay.current) overlay.current.setMap(null)
    }
  }, [])

  if (props.map) {
    el.current = el.current || createOverlayElement()
    overlay.current = overlay.current || new OverlayView(
      {
        position: new google.maps.LatLng(props.position.lat, props.position.lng),
        content: el.current
      }
    )
    overlay.current.setMap(props.map)
    return ReactDOM.createPortal(props.children, el.current);
  }
  return null
}

export default OverlayContainer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-map-points-and-apartment-cards"&gt;
  &lt;/a&gt;
  Creating Map Points and Apartment Cards
&lt;/h2&gt;

&lt;p&gt;I will create a simple apartment card by using MUI-core and MUI-icons [&lt;a href="https://material-ui.com/ru/components/cards/"&gt;https://material-ui.com/ru/components/cards/&lt;/a&gt;] [&lt;a href="https://material-ui.com/ru/components/material-icons/"&gt;https://material-ui.com/ru/components/material-icons/&lt;/a&gt;]. &lt;br&gt;
Let's create ApartmentCard:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import { makeStyles } from '@material-ui/core/styles';
import Card from '@material-ui/core/Card';
import CardActionArea from '@material-ui/core/CardActionArea';
import CardContent from '@material-ui/core/CardContent';
import CardMedia from '@material-ui/core/CardMedia';
import Typography from '@material-ui/core/Typography';
import AspectRatioIcon from '@material-ui/icons/AspectRatio';
import { Grid, IconButton } from '@material-ui/core';
import MeetingRoomIcon from '@material-ui/icons/MeetingRoom';
import KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';
import CloseIcon from '@material-ui/icons/Close';

const useStyles = makeStyles({
  root: {
    maxWidth: 230,
    position: 'relative',
    zIndex: 1001,
  },
  media: {
    height: 100,
  },
  close: {
    position: 'absolute',
    left: 0,
    top: 0,
    zIndex: 1001,
    background: 'white',
    width: '25px',
    height: '25px'
  }
});

type ApartmentCardProps = {
  image: string
  address: string
  area: number
  rooms_number: number
  floor: number
  floor_count: number
  rent: number
  handleClose: () =&amp;gt; void
}

export default function ApartmentCard(props: ApartmentCardProps) {
  const classes = useStyles();
  return (
    &amp;lt;Card className={classes.root}&amp;gt;
       &amp;lt;IconButton className={classes.close} aria-label="close" onClick={props.handleClose}&amp;gt;
        &amp;lt;CloseIcon /&amp;gt;
      &amp;lt;/IconButton&amp;gt;
      &amp;lt;CardActionArea&amp;gt;
        &amp;lt;CardMedia
          className={classes.media}
          image={props.image}
          title="Contemplative Reptile"
        /&amp;gt;
        &amp;lt;CardContent&amp;gt;
          &amp;lt;Typography variant="body2" component="h2"&amp;gt;
            {props.address}
          &amp;lt;/Typography&amp;gt;
          &amp;lt;Grid container spacing={1}&amp;gt;
            &amp;lt;Grid item container xs={6} spacing={1} alignItems='center'&amp;gt;
              &amp;lt;Grid item xs={8}&amp;gt;&amp;lt;AspectRatioIcon /&amp;gt;&amp;lt;/Grid&amp;gt;
              &amp;lt;Grid item xs={4}&amp;gt;{props.area}&amp;lt;/Grid&amp;gt;
            &amp;lt;/Grid&amp;gt;
            &amp;lt;Grid item container xs={6} spacing={1} alignItems='center'&amp;gt;
              &amp;lt;Grid item xs={8}&amp;gt;&amp;lt;MeetingRoomIcon /&amp;gt;&amp;lt;/Grid&amp;gt;
              &amp;lt;Grid item xs={4}&amp;gt;{props.rooms_number}&amp;lt;/Grid&amp;gt;
            &amp;lt;/Grid&amp;gt;
            &amp;lt;Grid item container xs={6} spacing={1} alignItems='center'&amp;gt;
              &amp;lt;Grid item xs={8}&amp;gt;&amp;lt;KeyboardArrowUpIcon /&amp;gt;&amp;lt;/Grid&amp;gt;
              &amp;lt;Grid item xs={4}&amp;gt;{props.floor}/{props.floor_count}&amp;lt;/Grid&amp;gt;
            &amp;lt;/Grid&amp;gt;
            &amp;lt;Grid item container xs={12} spacing={1} alignItems='center' justifyContent="center"&amp;gt;
              &amp;lt;Typography variant="body2" style={{ fontWeight: 600 }}&amp;gt;{props.rent} $&amp;lt;/Typography&amp;gt;
            &amp;lt;/Grid&amp;gt;
          &amp;lt;/Grid&amp;gt;
          &amp;lt;/Typography&amp;gt; */}
        &amp;lt;/CardContent&amp;gt;
      &amp;lt;/CardActionArea&amp;gt;
    &amp;lt;/Card&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And ApartmentPoint:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { makeStyles } from "@material-ui/styles"

type ApartmentPonitProps = {
  price: number
  onClick: () =&amp;gt; void
}

const styles = makeStyles({
  root:{
    background: 'white',
    borderRadius: '12px',
    padding: '8px',
    width: '60px',
    zIndex: 1000,
    position: 'relative'
  }
})

const ApartmentPoint = (props: ApartmentPonitProps) =&amp;gt; {
  const classes = styles()
  return (
    &amp;lt;div className={classes.root} onClick={props.onClick}&amp;gt;
      {props.price} $
    &amp;lt;/div&amp;gt;
  )
}

export default ApartmentPoint
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will use MapPoint like wrapper that will render ApartmentPoint or ApartmentCard:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useEffect, useRef, useState } from "react"
import ApartmentCard from "./ApartmentCard"
import ApartmentPoint from "./ApartmentPoint"

type MapPointProps = {
  image: string
  address: string
  area: number
  rooms_number: number
  floor: number
  floor_count: number
  rent: number
}

const MapPoint = (props: MapPointProps) =&amp;gt; {
  const [opened, setIsOpened] = useState&amp;lt;boolean&amp;gt;(false)
  const handleOnOpen = () =&amp;gt; setIsOpened(true)
  const handleOnClose = () =&amp;gt; setIsOpened(false)
  const containerRef = useRef&amp;lt;HTMLDivElement&amp;gt;(null)

// Hook for handle outside click - simple implementation from stack overflow
  useEffect(() =&amp;gt; {
    function handleClickOutside(this: Document, event: MouseEvent) {
      if (containerRef.current &amp;amp;&amp;amp; !containerRef.current.contains(event.target as Node)) {
        setIsOpened(false)
      }
    }

    document.addEventListener("mousedown", handleClickOutside);
    return () =&amp;gt; {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [containerRef]);

  return (&amp;lt;div ref={containerRef}&amp;gt;
    {opened ?
      &amp;lt;ApartmentCard
        image={props.image}
        address={props.address}
        area={props.area}
        rooms_number={props.rooms_number}
        floor={props.floor}
        floor_count={props.floor_count}
        rent={props.rent}
        handleClose={handleOnClose}
      /&amp;gt; :
      &amp;lt;ApartmentPoint
        price={props.rent}
        onClick={handleOnOpen}
      /&amp;gt;}
  &amp;lt;/div&amp;gt;)
}

export default MapPoint
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#and-all-together"&gt;
  &lt;/a&gt;
  And all together
&lt;/h2&gt;

&lt;p&gt;Let's modify Map component by adding apartments points inside overlay containers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { makeStyles } from "@material-ui/core";
import { useEffect, useRef, useState } from "react";
import Apartments from "./apartments";
import MapPoint from "./MapPoint";
import OverlayContainer from "./OverlayContainer";

type MapProps = {
  center: google.maps.LatLngLiteral
  zoom: number
}

const useStyles = makeStyles({
  map: {
    height: '100vh'
  }
})

function Map({ center, zoom }: MapProps) {
  const ref = useRef(null);
  const [map, setMap] = useState&amp;lt;google.maps.Map&amp;lt;Element&amp;gt; | null&amp;gt;(null)
  const classes = useStyles();

  useEffect(() =&amp;gt; {
    if (ref.current) { 
      let createdMap = new window.google.maps.Map(
        ref.current,
        {
          center,
          zoom,
          disableDefaultUI: true,
          clickableIcons: false
        }
      );
      setMap(createdMap)
    }
  }, [center, zoom]);

  return &amp;lt;div ref={ref} id="map" className={classes.map}&amp;gt;
    {Apartments.map((apartment, index) =&amp;gt; (
      &amp;lt;OverlayContainer
        map={map}
        position={{
          lat: apartment.lat,
          lng: apartment.lng
        }}
        key={index}
      &amp;gt;
        &amp;lt;MapPoint
          image={apartment.image}
          address={apartment.address}
          area={apartment.area}
          rooms_number={apartment.rooms_number}
          floor={apartment.floor}
          floor_count={apartment.floor_count}
          rent={apartment.rent}
        /&amp;gt;
      &amp;lt;/OverlayContainer&amp;gt;
    ))}
  &amp;lt;/div&amp;gt;;
}

export default Map
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Apartments mock-data example(apartments.ts):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Apartments = [
  {
    "id": 1,
    "image": "https://storage.yandexcloud.net/apartment-images/2.jpg",
    "area": 34.9,
    "kitchen_area": null,
    "address": "Novoalekseevskaya  4d4",
    "lat": 55.80562399999999,
    "lng": 37.641239,
    "rooms_number": 1,
    "bedrooms_number": 1,
    "restrooms_number": 1,
    "floor": 3,
    "floor_count": 14,
    "rent": 1500
  },
  {
    "id": 2,
    "image": "https://storage.yandexcloud.net/apartment-images/10_S939Rcf.jpg",
    "area": 47,
    "kitchen_area": null,
    "address": "Valovaya street 31",
    "lat": 55.66497999999999,
    "lng": 37.857464,
    "rooms_number": 1,
    "bedrooms_number": 1,
    "restrooms_number": 1,
    "floor": 6,
    "floor_count": 9,
    "rent": 2000
  },
  {
    "id": 3,
    "image": "https://storage.yandexcloud.net/apartment-images/07_uvV7gIk.jpg",
    "area": 40.9,
    "kitchen_area": null,
    "address": "academic Volgyn street 8A",
    "lat": 55.68271799999999,
    "lng": 37.544263,
    "rooms_number": 3,
    "bedrooms_number": 2,
    "restrooms_number": 1,
    "floor": 2,
    "floor_count": 5,
    "rent": 3000
  }
]

export default Apartments
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h2&gt;

&lt;p&gt;And our application will be:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qax6bFB0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7bd6yq6h8dp4d0fpsnzc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qax6bFB0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7bd6yq6h8dp4d0fpsnzc.png" alt="result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ps"&gt;
  &lt;/a&gt;
  P.S.
&lt;/h1&gt;

&lt;p&gt;This is just the first article, in it I tried only to show how I work with google maps and react, in further articles there will be more logic and styling to get as close as possible to airbnb&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>googlecloud</category>
    </item>
  </channel>
</rss>
