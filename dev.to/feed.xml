<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>7 new features, 51.3 new bugs added üòã, the DEV.TO üë©‚Äçüíªüë®‚Äçüíª editor [PART DEUX!]</title>
      <author>InHuOfficial</author>
      <pubDate>Wed, 07 Apr 2021 00:48:53 +0000</pubDate>
      <link>https://dev.to/inhuofficial/dev-to-markdown-editor-part-deux-massive-improvements-hack-2-continued-5mp</link>
      <guid>https://dev.to/inhuofficial/dev-to-markdown-editor-part-deux-massive-improvements-hack-2-continued-5mp</guid>
      <description>&lt;p&gt;Welcome to the dev.to editor version 0.02! My attempt at creating an editor for dev.to to make writing articles easier!&lt;/p&gt;

&lt;p&gt;If you didn't read my first post on this then take a couple of minutes to go play with that&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/wysiwyg-for-dev-to-jfp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Write faster in the dev.to editor - adding a WYSIWYG and keyboard shortcuts! [hack 2]&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial „Éª Mar 29 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;All caught up? Great, let's see what improvements have been made!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#just-let-me-play-with-it-i-dont-want-to-read" class="anchor"&gt;
  &lt;/a&gt;
  Just let me play with it, I don't want to read!
&lt;/h2&gt;

&lt;p&gt;Feeling impatient? I have a quick link to &lt;a href="#demo"&gt;jump to the instructions for how to try it yourself&lt;/a&gt; just for you!&lt;/p&gt;

&lt;p&gt;However if you do &lt;strong&gt;stick around&lt;/strong&gt; I do have a load of pretty GIFs showing off some of the features!&lt;/p&gt;




&lt;p&gt;Anyway, I bet you are wondering, what has changed in version 0.02?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-interface-got-a-facelift" class="anchor"&gt;
  &lt;/a&gt;
  The interface got a facelift!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fo0xcmbz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pm4b3vx4nf71j2t9xus.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fo0xcmbz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pm4b3vx4nf71j2t9xus.jpg" alt="Custom iconset designed in illustrator for dev.to"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I designed a set of custom icons just for dev.to.&lt;/p&gt;

&lt;p&gt;They are rough around the edges but overall I think the general aesthetic is pretty close to that of dev.to.&lt;/p&gt;

&lt;p&gt;With regards to the modals and other interface items...they aren't styled yet! This is a long way from a polished product but hopefully you can see where this is going!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-complete-code-redesign" class="anchor"&gt;
  &lt;/a&gt;
  A complete code redesign
&lt;/h2&gt;

&lt;p&gt;The original editor used a "wrap" function to wrap selected text in markdown.&lt;/p&gt;

&lt;p&gt;Now this was fine for basic stuff like bold text &lt;code&gt;**bold**&lt;/code&gt; but for more complex things it started getting a bit "janky" (yes, that is a technical term!)&lt;/p&gt;

&lt;p&gt;So instead we now have a template based system with regions that can be replaced with user content.&lt;/p&gt;

&lt;p&gt;Still a long way to go in tidying the code up but adding new markdown features is easy now.&lt;/p&gt;

&lt;p&gt;The other thing that was (and still is to some extent) an issue was the way that changes were applied. There is no choice but to update the whole &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; which means a lot of focus management. However I have improved the way items are handled and introduced a "undo" feature, just in case things go very wrong!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-features" class="anchor"&gt;
  &lt;/a&gt;
  New features
&lt;/h3&gt;

&lt;p&gt;Oh there are loads of things:-&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#headings-26" class="anchor"&gt;
  &lt;/a&gt;
  headings 2-6
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I071cczv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0l833tiz7ue7r4e5v32p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I071cczv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0l833tiz7ue7r4e5v32p.gif" alt="adding headings demonstration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The issue I had previously was that headings were assigned to the numbers 2-4 and I couldn't add level 5 and 6 as I used those numbers for other features.&lt;/p&gt;

&lt;p&gt;I now have a system where instead of Ctrl + {number}, you now press Ctrl + H and then immediately after the heading number you want. &lt;/p&gt;

&lt;p&gt;This has freed up all of the number keys for other uses (still working on the keyboard shortcuts!&lt;/p&gt;

&lt;p&gt;Why no heading level 1 I hear you ask? Accessibility. &lt;/p&gt;

&lt;p&gt;Despite being allowed under HTML standards and WCAG multiple &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;s are not ideal for screen reader users as it is not expected behaviour. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#further-text-decoration" class="anchor"&gt;
  &lt;/a&gt;
  Further text decoration!
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9w5mpc1w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63sd35me1ncjdosgs9rj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9w5mpc1w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63sd35me1ncjdosgs9rj.gif" alt="formatting text bold, italic, underlined and with a strikethrough demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I had &lt;strong&gt;bold&lt;/strong&gt; and &lt;em&gt;italic&lt;/em&gt; text all worked out, but now I have added  &lt;del&gt;strikethrough&lt;/del&gt; and &lt;u&gt;underline&lt;/u&gt; to make life even easier!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ordered-and-unordered-lists" class="anchor"&gt;
  &lt;/a&gt;
  ordered and unordered lists
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IyNEC4oA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2bc43ox4nhpm7zvogh25.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IyNEC4oA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2bc43ox4nhpm7zvogh25.gif" alt="adding ordered lists demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adding an ordered list is simple now with automatic numbering! &lt;/p&gt;

&lt;p&gt;It also removes white space between list items to keep everything clean!&lt;/p&gt;

&lt;p&gt;I also added unordered lists for ease.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tables" class="anchor"&gt;
  &lt;/a&gt;
  Tables!
&lt;/h4&gt;

&lt;p&gt;This one I am particularly proud of.&lt;/p&gt;

&lt;p&gt;Tables are annoying to create in Markdown. &lt;/p&gt;

&lt;p&gt;With the editor you simply click the tables button and a popup asks how many rows and columns you want and then inserts the table for you.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#updating-tables" class="anchor"&gt;
  &lt;/a&gt;
  Updating tables
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ObNIxJgV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9durnha1hgd87aae97y0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ObNIxJgV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9durnha1hgd87aae97y0.gif" alt="adding a table and then adding 2 rows and then adding 2 columns using the editor demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even better, the editor lets you position your cursor within a table and then &lt;strong&gt;add rows&lt;/strong&gt; or even &lt;strong&gt;add columns&lt;/strong&gt; in a couple of clicks. As tables are unruly in Markdown this can really make a difference.&lt;/p&gt;

&lt;p&gt;I have a further improvement for tables coming in version 0.03 to make them even easier!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#footnotes" class="anchor"&gt;
  &lt;/a&gt;
  Footnotes
&lt;/h4&gt;

&lt;p&gt;Automatic footnotes in just one click&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#liquid-tags" class="anchor"&gt;
  &lt;/a&gt;
  Liquid Tags
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mog0kqZ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i09es7ofx4e0wt8rbhvp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mog0kqZ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i09es7ofx4e0wt8rbhvp.gif" alt="showing how to embed a tweet, a youtube video and a dev.to comment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The previous version handled a couple of liquid tags, such as jsFiddles and codepens.&lt;/p&gt;

&lt;p&gt;This version can handle:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://jsfiddle.net/"&gt;jsfiddles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codepen.io/"&gt;codepens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://glitch.com/"&gt;glitch&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Dev.to links to other articles&lt;/li&gt;
&lt;li&gt;Dev.to links to user profiles&lt;/li&gt;
&lt;li&gt;Dev.to links to tags&lt;/li&gt;
&lt;li&gt;Dev.to links to comments&lt;/li&gt;
&lt;li&gt;Dev.to links to podcasts&lt;/li&gt;
&lt;li&gt;Dev.to spoiler / collapsible section blocks &lt;/li&gt;
&lt;li&gt;Tweet Embeds&lt;/li&gt;
&lt;li&gt;Github Repo cards&lt;/li&gt;
&lt;li&gt;Github issues, PR and comment cards&lt;/li&gt;
&lt;li&gt;Github Gists&lt;/li&gt;
&lt;li&gt;YouTube video insertion&lt;/li&gt;
&lt;li&gt;Twitch video insertion &lt;/li&gt;
&lt;li&gt;Vimeo Video insertion&lt;/li&gt;
&lt;li&gt;Medium article links &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are still about 15 more liquid tags to add in but that is a decent start!&lt;/p&gt;

&lt;p&gt;There is also some simple logic in place to select the correct parts from URLs that a liquid tag expects to see. (for example adding a card for a dev.to user only expects their username, the editor will strip that from a full URL for you)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#images" class="anchor"&gt;
  &lt;/a&gt;
  Images!!!!!!
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hq6xS3op--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxaaie03hlo4jvup21tl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hq6xS3op--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxaaie03hlo4jvup21tl.gif" alt="adding images with alt text prompts and image preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one was a fun one to implement. Instead of having to upload an image and then copy it where you want I built a whole interface for adding images.&lt;/p&gt;

&lt;p&gt;Also to try and persuade people to be more mindful of accessibility I added an image preview and &lt;code&gt;alt&lt;/code&gt; description screen where we prompt the user to enter a meaningful description of the image.&lt;/p&gt;

&lt;p&gt;And above all else....it actually just places the image directly in the Markdown at your current cursor position, no more fiddling with copying the URL!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessibility-considerations" class="anchor"&gt;
  &lt;/a&gt;
  Accessibility Considerations
&lt;/h2&gt;

&lt;p&gt;Now it still isn't fully accessible, but it is a lot better.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Preword on sticky keys....my key choice was dumb AF!&lt;/strong&gt; - the "\" key is obviously very useful when writing if you want to escape anything, I will be changing this to another key / key sequence so it doesn't make the editor unusable!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sticky-keys" class="anchor"&gt;
  &lt;/a&gt;
  sticky keys
&lt;/h3&gt;

&lt;p&gt;The main thing I have created is a one-handed operation mode with sticky keys.&lt;/p&gt;

&lt;p&gt;Pressing "\" on your keyboard puts sticky keys on temporarily (until an action is performed).&lt;/p&gt;

&lt;p&gt;This allows you to press "\" and then press "o" separately to add an ordered list item for example. At this point sticky keys switches itself off so you can write freely.&lt;/p&gt;

&lt;p&gt;However if you press "\" twice sticky keys is fixed on, meaning you could press o multiple times to set up an ordered list ready for populating.&lt;/p&gt;

&lt;p&gt;You can always switch it off again by pressing "\" one more time!&lt;/p&gt;

&lt;p&gt;One handed operation has a second benefit. When I get to the mobile version of the editor it becomes usable with shortcuts as we can set a sticky key instead of using Ctrl + {key} for shortcuts!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-else-are-you-going-to-do-for-accessibility" class="anchor"&gt;
  &lt;/a&gt;
  What else are you going to do for accessibility?
&lt;/h3&gt;

&lt;p&gt;I also plan to allow toggling between different modes for the buttons for people who struggle with icon comprehension so that they use text instead.&lt;/p&gt;

&lt;p&gt;I am going to fix the tooltips so they show when buttons are focused.&lt;/p&gt;

&lt;p&gt;I am also going to make sure the editor buttons follow colour themes on the site as at the moment they only work on white theme!&lt;/p&gt;

&lt;p&gt;Finally as I said I am going to make a mobile version of it with some clever text selection features that should make it usable for people with dexterity / accuracy issues!&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ok-it-looks-great-how-can-i-use-it" class="anchor"&gt;
  &lt;/a&gt;
  OK it looks great, how can I use it?
&lt;/h2&gt;

&lt;p&gt;At the moment the only way to use it is via a bookmarklet. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;drag the link in the fiddle to your bookmarks bar&lt;/li&gt;
&lt;li&gt;navigate to &lt;a href="https://dev.to/new"&gt;https://dev.to/new&lt;/a&gt; and click the bookmark you just added&lt;/li&gt;
&lt;li&gt;the editor will magically appear ready for you to experience all the bugs!&lt;/li&gt;
&lt;li&gt;Try out "Ctrl" + (B, I, E, L, Q, R, H (then 2-6), O and U) or click the buttons! Also with some features select text first (i.e. select some text, press "Ctrl" + "B" and it will be wrapped in &lt;code&gt;**&lt;/code&gt; to be bold...simples!)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/or2pebka//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Alternatively create a new bookmark, click "more" and paste the following code into the "URL" field and save the bookmark.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;script&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://inhu.co/dev_to/experiments/bookmarklet/bookmarklet-v2.js?&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;();}());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#i-found-a-bug" class="anchor"&gt;
  &lt;/a&gt;
  I found a bug
&lt;/h2&gt;

&lt;p&gt;I am &lt;strong&gt;really&lt;/strong&gt; not surprised, it is all held together with bubblegum and sticky tape at the moment.&lt;/p&gt;

&lt;p&gt;However I would really appreciate it if you could drop a comment letting me know what you found so I can see if I can fix it.&lt;/p&gt;

&lt;p&gt;p.s. Chrome bugs only at the moment please, I will fix "the Fox" etc. later once the Chrome version is stable.&lt;/p&gt;

&lt;p&gt;Bugs I am aware of:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;if you preview the page and then come back to the editor the editor is lost. &lt;/li&gt;
&lt;li&gt;If the editor is lost pressing the bookmark again causes a variety of bugs so you have to reload the page.&lt;/li&gt;
&lt;li&gt;tables can really go wrong if you accidentally select some text.&lt;/li&gt;
&lt;li&gt;editing items towards the top of the page cause the page to jump to the bottom due to replacing all the text.&lt;/li&gt;
&lt;li&gt;numerous "niggles" with strange positioning of focus indicator or weird behaviour with certain selections. Feel free to point out any you find just in case I missed some!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;I am working on fixes for all of them!&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#are-you-going-to-make-this-a-plugin-extension" class="anchor"&gt;
  &lt;/a&gt;
  Are you going to make this a plugin / extension?
&lt;/h2&gt;

&lt;p&gt;I am indeed! As was suggested in the comments I am going to make it into a user script and then ultimately a chrome extension!&lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/afif"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--0f-EwtOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--apy3IWsG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" alt="afif profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/afif"&gt;
        &lt;span class="comment-username"&gt;Temani Afif&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;‚Ä¢&lt;/span&gt;

&lt;a href="https://dev.to/afif/comment/1cp3h" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Mar 29
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;You can also consider creating a user script that can be used with tools like: &lt;a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=fr" rel="nofollow"&gt;chrome.google.com/webstore/detail/...&lt;/a&gt; .. it would be more convenient for many of us&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Either that or if enough of you "@" ben and jess they may decide to implement this themselves as part of dev.to (so it should be a lot less buggy! ü§£).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you can see it is a long way from finished but I am thoroughly enjoying the challenges this project is throwing at me.&lt;/p&gt;

&lt;p&gt;I mean, I wrote this whole article using the editor and it was....well let's just say it was easier than remembering all the liquid tags but still not ideal with the preview bit breaking things ü§£.&lt;/p&gt;

&lt;p&gt;It will probably be at least a month before I have something that is fully usable but I will keep putting updates up as I make improvements.&lt;/p&gt;

&lt;p&gt;If you have made it this far then you deserve to know the next thing I am working on.....a live preview pane to the right that is synced to the editor pane (which will move over to the left). That is also a way to solve the "preview problem" in the short term üòã.&lt;/p&gt;

&lt;p&gt;Follow me if not having to switch backwards and forwards between panels excites you as much as it excites me! &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__551686"&gt;
  
    .ltag__user__id__551686 .follow-action-button {
      background-color: #c62aa4 !important;
      color: #131111 !important;
      border-color: #c62aa4 !important;
    }
  
    &lt;a href="/inhuofficial" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/inhuofficial"&gt;InHuOfficial&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/inhuofficial"&gt;Specialising in accessibility and website load speed / performance. If you have a question about [accessibility] or [page-speed-insights] ask away and I will help any way I can!&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;See, what did I tell you, a footnote!¬†&lt;a href="#fnref1"&gt;‚Ü©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>showdev</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>I Built a Developer Productivity Tool!</title>
      <author>Tyrel Chambers</author>
      <pubDate>Wed, 07 Apr 2021 00:28:04 +0000</pubDate>
      <link>https://dev.to/imtyrelchambers/i-built-a-developer-productivity-tool-3m24</link>
      <guid>https://dev.to/imtyrelchambers/i-built-a-developer-productivity-tool-3m24</guid>
      <description>&lt;p&gt;Hey everyone!&lt;/p&gt;

&lt;p&gt;After many failed interviews absolutely nuked my self-confidence and love for programming, I decided I didn't really like the idea of working for someone else on their product. It's not that I never would, but I instead decided to focus on making my own ideas. &lt;/p&gt;

&lt;p&gt;For the past handful of months I've been working on this little thing called &lt;a href="https://kanlen.ca"&gt;Kanlen&lt;/a&gt;. I'm still figuring out exactly what "it is".&lt;/p&gt;

&lt;p&gt;I'm not a fan of wasting too much time on repetitive tasks even though I repeat myself often, but, here we are.&lt;/p&gt;

&lt;p&gt;I had an idea one day. What if there was a way, to build our your CLI command using a GUI of sorts? That would take the guesswork out of figuring out the correct syntax for the CLIs you use. For me, it's a lot of CRA.&lt;/p&gt;

&lt;p&gt;It might also be nice to know what flags I have available to use in this command. I sure can't remember all that.&lt;/p&gt;

&lt;p&gt;I'm going to briefly explain what Kanlen does and maybe from that, an idea of the app will form, but for now let's think of it like a developer's productivity tool.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-it-do" class="anchor"&gt;
  &lt;/a&gt;
  What does it do?
&lt;/h2&gt;

&lt;p&gt;Well, we already spoke about the whole CLI thing, so on we go.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#save-environment-variables" class="anchor"&gt;
  &lt;/a&gt;
  Save Environment Variables
&lt;/h3&gt;

&lt;p&gt;If you're like me, sometimes you get a new development computer and forget to jot down the environment variables you're using. That happened to me while building Reddex. Losing those variables was super annoying.&lt;/p&gt;

&lt;p&gt;I thought it might be cool if you could store them somewhere online. Then if you switch machines, it crashes, or spontaneously combusts, you'll have a backup of those variables.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#save-your-code-like-gists" class="anchor"&gt;
  &lt;/a&gt;
  Save your code like Gists
&lt;/h3&gt;

&lt;p&gt;Perhaps the bread and butter of Kanlen, well, at least the main idea of it since the beginning, was being able to save your favourite functions.&lt;/p&gt;

&lt;p&gt;I have a few pieces of code that I like to bring between projects and if I could save them in a spot that's easily accessible, obviously that would be pretty alright.&lt;/p&gt;

&lt;p&gt;These pieces of code are sharable and if you download the Kanlen VSCode extension, you can import your saved snippets right into your editor. On the flip-side, if you want to create a snippet, you can do that by selecting a block of code and running a specific command. It's pretty neat in my humble opinion.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moving-on" class="anchor"&gt;
  &lt;/a&gt;
  Moving on
&lt;/h2&gt;

&lt;p&gt;Those are a couple things it does, it you're interested in reading more about it, check out the main page &lt;a href="https://kanlen.ca"&gt;Kanlen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is just a little side project I've been playing with since late 2020. It's still in development, but I love where it's going and maybe it'll help you too someday.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>sideprojects</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Follow me on my journey as I complete 100 UI/UX design challenges in 100 days!</title>
      <author>Matthew Marquise</author>
      <pubDate>Wed, 07 Apr 2021 00:01:45 +0000</pubDate>
      <link>https://dev.to/mattmarquise/follow-me-on-my-journey-as-i-complete-100-ui-ux-design-challenges-in-100-days-jgb</link>
      <guid>https://dev.to/mattmarquise/follow-me-on-my-journey-as-i-complete-100-ui-ux-design-challenges-in-100-days-jgb</guid>
      <description>&lt;p&gt;Today I started the very first day of Daily UI's 100 day UI &amp;amp; UX design challenge! Every day, except on weekends, for the next 100 days I'll be completing each daily project. Depending on the complexity of each project I will likely try and do multiple different takes on each days challenge. Follow me on DEV, Medium, Bƒìhance, Dribbble, and check out my personal website for updates as I achieve each day's challenges!&lt;/p&gt;

</description>
      <category>ux</category>
      <category>design</category>
      <category>webdev</category>
    </item>
    <item>
      <title>üì¨ Asynq: simple, reliable &amp; efficient distributed task queue for your next Go project</title>
      <author>Vic Sh√≥stak</author>
      <pubDate>Tue, 06 Apr 2021 23:53:12 +0000</pubDate>
      <link>https://dev.to/koddr/asynq-simple-reliable-efficient-distributed-task-queue-for-your-next-go-project-4jhg</link>
      <guid>https://dev.to/koddr/asynq-simple-reliable-efficient-distributed-task-queue-for-your-next-go-project-4jhg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hi, DEV friends! üòâ It's time to share a great find that you must try in your next project. I'm talking about simple, reliable and efficient distributed task queue written on Go and called &lt;a href="https://github.com/hibiken/asynq"&gt;Asynq&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I already have experience using Asynq in production on one of my work projects (&lt;em&gt;microservice for sending scheduled messages to subscribers of Telegram bot&lt;/em&gt;). After using it successfully, I wanted to tell you more about it so you can appreciate it too!&lt;/p&gt;

&lt;p&gt;All right, let's get started! üëá&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  üìù Table of contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-asynq"&gt;What is Asynq?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-project-we-will-create"&gt;The project we will create&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#full-code-of-this-project"&gt;Full code of this project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#lets-write-some-code"&gt;Let's write some code&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#creating-tasks-payloads"&gt;Creating tasks payloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-tasks-handlers"&gt;Creating tasks handlers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-asynq-worker-server"&gt;Creating Asynq worker server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-asynq-client"&gt;Creating Asynq client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#asynq-web-ui"&gt;Asynq web UI&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#list-of-servers-and-workers"&gt;List of servers and workers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#redis-server-information"&gt;Redis server information&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adaptive-dark-theme"&gt;Adaptive dark theme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#asynq-cli"&gt;Asynq CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-asynq" class="anchor"&gt;
  &lt;/a&gt;
  What is Asynq?
&lt;/h2&gt;

&lt;p&gt;Follow official &lt;a href="https://github.com/hibiken/asynq"&gt;Asynq&lt;/a&gt; GitHub page:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Asynq is a Go library for queueing tasks and processing them asynchronously with workers. It's backed by Redis and is designed to be scalable yet easy to get started. [...] Task queues are used as a mechanism to distribute work across multiple machines. A system can consist of multiple worker servers and brokers, giving way to high availability and horizontal scaling.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Asynq is developed and maintained by &lt;a href="https://github.com/hibiken"&gt;Ken Hibino&lt;/a&gt;, who works as a software engineer at Google. So you can be sure of the quality of the code.&lt;/p&gt;

&lt;p&gt;Most awesome queueing tasks features are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Guaranteed at least one execution of a task&lt;/li&gt;
&lt;li&gt;Scheduling of tasks&lt;/li&gt;
&lt;li&gt;Durability since tasks are written to Redis&lt;/li&gt;
&lt;li&gt;Retries of failed tasks&lt;/li&gt;
&lt;li&gt;Automatic recovery of tasks in the event of a worker crash&lt;/li&gt;
&lt;li&gt;Weighted priority queues&lt;/li&gt;
&lt;li&gt;Strict priority queues&lt;/li&gt;
&lt;li&gt;Low latency to add a task since writes are fast in Redis&lt;/li&gt;
&lt;li&gt;De-duplication of tasks using unique option&lt;/li&gt;
&lt;li&gt;Allow timeout and deadline per task&lt;/li&gt;
&lt;li&gt;Flexible handler interface with support for middlewares&lt;/li&gt;
&lt;li&gt;Ability to pause queue to stop processing tasks from the queue&lt;/li&gt;
&lt;li&gt;Periodic Tasks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Built-in scaling tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support Redis Cluster for automatic sharding and high availability&lt;/li&gt;
&lt;li&gt;Support Redis Sentinels for high availability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, of course, useful tools for admins:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web UI to inspect and remote-control queues and tasks&lt;/li&gt;
&lt;li&gt;CLI to inspect and remote-control queues and tasks&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;üëç At this moment, I'm working on creating an official logo for Asynq. &lt;em&gt;If you have an idea, you're welcome to &lt;a href="https://github.com/hibiken/asynq/issues/260"&gt;discussion&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-project-we-will-create" class="anchor"&gt;
  &lt;/a&gt;
  The project we will create
&lt;/h2&gt;

&lt;p&gt;I would like to show with a simple example how you can easily work with Asynq in your Golang project. Suppose we have the task of sending a welcome email as soon as the user registers and, after a while, sending another reminder email to the user about something.&lt;/p&gt;

&lt;p&gt;Here are the points we will stick to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Three queues for tasks with different priorities;&lt;/li&gt;
&lt;li&gt;Generating multiple tasks of different types at once and for different queues on the client;&lt;/li&gt;
&lt;li&gt;Separation into task handlers and payloads;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#full-code-of-this-project" class="anchor"&gt;
  &lt;/a&gt;
  Full code of this project
&lt;/h2&gt;

&lt;p&gt;For clarity, you can download the full example and run it on your machine. Especially for you, I put it on GitHub:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/koddr"&gt;
        koddr
      &lt;/a&gt; / &lt;a href="https://github.com/koddr/tutorial-go-asynq"&gt;
        tutorial-go-asynq
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üìñ Tutorial: Asynq. Simple, reliable &amp;amp; efficient distributed task queue for your next Go project
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-write-some-code" class="anchor"&gt;
  &lt;/a&gt;
  Let's write some code
&lt;/h2&gt;

&lt;p&gt;Okay! We'll move on to the most interesting part, the writing of the code. I have supplied the code examples with detailed comments, so I won't dwell on them too much in the text of the article. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üî• Please look at the code!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-tasks-payloads" class="anchor"&gt;
  &lt;/a&gt;
  Creating tasks payloads
&lt;/h3&gt;

&lt;p&gt;Let's define the payloads of our tasks. Let's create two types to send a message to Email: a welcome message (&lt;em&gt;comes right away&lt;/em&gt;) and a reminder message (&lt;em&gt;comes after a while&lt;/em&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./tasks/payloads.go&lt;/span&gt;

&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/hibiken/asynq"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c"&gt;// TypeWelcomeEmail is a name of the task type&lt;/span&gt;
    &lt;span class="c"&gt;// for sending a welcome email.&lt;/span&gt;
    &lt;span class="n"&gt;TypeWelcomeEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"email:welcome"&lt;/span&gt;

    &lt;span class="c"&gt;// TypeReminderEmail is a name of the task type&lt;/span&gt;
    &lt;span class="c"&gt;// for sending a reminder email.&lt;/span&gt;
    &lt;span class="n"&gt;TypeReminderEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"email:reminder"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// NewWelcomeEmailTask task payload for a new welcome email.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewWelcomeEmailTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Specify task payload.&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{}{&lt;/span&gt;
        &lt;span class="s"&gt;"user_id"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// set user ID&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Return a new task with given type and payload.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TypeWelcomeEmail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// NewReminderEmailTask task payload for a reminder email.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewReminderEmailTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ts&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Specify task payload.&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{}{&lt;/span&gt;
        &lt;span class="s"&gt;"user_id"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          &lt;span class="c"&gt;// set user ID&lt;/span&gt;
        &lt;span class="s"&gt;"sent_in"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="c"&gt;// set time to sending&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Return a new task with given type and payload.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TypeReminderEmail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-tasks-handlers" class="anchor"&gt;
  &lt;/a&gt;
  Creating tasks handlers
&lt;/h3&gt;

&lt;p&gt;Task handlers are our business logic, which is responsible for the specific behavior of tasks when triggered. To keep it simple, I will display a normal message in the console of the Asynq worker server.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./tasks/handlers.go&lt;/span&gt;

&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"context"&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/hibiken/asynq"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// HandleWelcomeEmailTask handler for welcome email task.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;HandleWelcomeEmailTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Get user ID from given task.&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Payload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Dummy message to the worker's output.&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Send Welcome Email to User ID %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// HandleReminderEmailTask for reminder email task.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;HandleReminderEmailTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Get int with the user ID from the given task.&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Payload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Get string with the sent time from the given task.&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Payload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sent_in"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Dummy message to the worker's output.&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Send Reminder Email to User ID %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Reason: time is up (%v)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-asynq-worker-server" class="anchor"&gt;
  &lt;/a&gt;
  Creating Asynq worker server
&lt;/h3&gt;

&lt;p&gt;The central part of our project. It is this component that will be responsible for the logic of sending messages and queuing them (if we need it).&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./worker/server.go&lt;/span&gt;

&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;

    &lt;span class="s"&gt;"tutorial-go-asynq/tasks"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/hibiken/asynq"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Create and configuring Redis connection.&lt;/span&gt;
    &lt;span class="n"&gt;redisConnection&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RedisClientOpt&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Addr&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"localhost:6379"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// Redis server address&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Create and configuring Asynq worker server.&lt;/span&gt;
    &lt;span class="n"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redisConnection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// Specify how many concurrent workers to use.&lt;/span&gt;
        &lt;span class="n"&gt;Concurrency&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c"&gt;// Specify multiple queues with different priority.&lt;/span&gt;
        &lt;span class="n"&gt;Queues&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"critical"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// processed 60% of the time&lt;/span&gt;
            &lt;span class="s"&gt;"default"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// processed 30% of the time&lt;/span&gt;
            &lt;span class="s"&gt;"low"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// processed 10% of the time&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="c"&gt;// Create a new task's mux instance.&lt;/span&gt;
    &lt;span class="n"&gt;mux&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewServeMux&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Define a task handler for the welcome email task.&lt;/span&gt;
    &lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TypeWelcomeEmail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;       &lt;span class="c"&gt;// task type&lt;/span&gt;
        &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleWelcomeEmailTask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// handler function&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Define a task handler for the reminder email task.&lt;/span&gt;
    &lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TypeReminderEmail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;       &lt;span class="c"&gt;// task type&lt;/span&gt;
        &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleReminderEmailTask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// handler function&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Run worker server.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And my favorite part of Asynq. If your application is going to grow, you will definitely want to make a more scalable system and Asynq can help you with that perfectly, because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can create a personal Asynq worker server for each queue;&lt;/li&gt;
&lt;li&gt;Each Asynq worker server can be configured with any number of concurrent active workers to use;&lt;/li&gt;
&lt;li&gt;Next, you can use a simple Docker Compose &lt;a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#deploy"&gt;solution&lt;/a&gt; to automatically start the right amount of each Asynq worker server replicas, when needed;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And if that's not enough anyway, you can easily start a &lt;a href="https://redis.io/topics/cluster-tutorial"&gt;Redis Cluster&lt;/a&gt; using Asynq built-in adapter... literally in a couple of minutes!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚òùÔ∏è I won't describe the configuration process, since the Wiki page of the project has &lt;a href="https://github.com/hibiken/asynq/wiki/Redis-Cluster"&gt;detailed instructions&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-asynq-client" class="anchor"&gt;
  &lt;/a&gt;
  Creating Asynq client
&lt;/h3&gt;

&lt;p&gt;The client part can be anything, really. The main thing is that it can create new tasks and send them to the queue:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./client/main.go&lt;/span&gt;

&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"math/rand"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;

    &lt;span class="s"&gt;"tutorial-go-asynq/tasks"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/hibiken/asynq"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Create a new Redis connection for the client.&lt;/span&gt;
    &lt;span class="n"&gt;redisConnection&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RedisClientOpt&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Addr&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"localhost:6379"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// Redis server address&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Create a new Asynq client.&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redisConnection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Infinite loop to create tasks as Asynq client.&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// Generate a random user ID.&lt;/span&gt;
        &lt;span class="n"&gt;userID&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;

        &lt;span class="c"&gt;// Set a delay duration to 2 minutes.&lt;/span&gt;
        &lt;span class="n"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Minute&lt;/span&gt;

        &lt;span class="c"&gt;// Define tasks.&lt;/span&gt;
        &lt;span class="n"&gt;task1&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewWelcomeEmailTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;task2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewReminderEmailTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="c"&gt;// Process the task immediately in critical queue.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;task1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                   &lt;span class="c"&gt;// task payload&lt;/span&gt;
            &lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"critical"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c"&gt;// set queue for task&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;// Process the task 2 minutes later in low queue.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;task2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                  &lt;span class="c"&gt;// task payload&lt;/span&gt;
            &lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"low"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;     &lt;span class="c"&gt;// set queue for task&lt;/span&gt;
            &lt;span class="n"&gt;asynq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProcessIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c"&gt;// set time to process task&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#asynq-web-ui" class="anchor"&gt;
  &lt;/a&gt;
  Asynq web UI
&lt;/h2&gt;

&lt;p&gt;Unfortunately, at the moment, the Asyncq web UI installation is only available by copying the repository and building from source or by creating a Docker image. In the meantime, to install, you need to make a clone of this repository and follow the instructions in the README:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/hibiken"&gt;
        hibiken
      &lt;/a&gt; / &lt;a href="https://github.com/hibiken/asynqmon"&gt;
        asynqmon
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Real-time monitor and web admin for Asynq distributed task queue
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;üëã Author of Asyncq and myself are already working on simplifying this process for a future version (hopefully &lt;code&gt;v1.0.0&lt;/code&gt;). &lt;em&gt;If you have a desire to help, you are welcome!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The installed and running web UI will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_TSyudZj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zypiuxa7xewqngun7j4j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_TSyudZj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zypiuxa7xewqngun7j4j.png" alt="web ui hover charts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#list-of-servers-and-workers" class="anchor"&gt;
  &lt;/a&gt;
  List of servers and workers
&lt;/h3&gt;

&lt;p&gt;Shows Asynq worker server statistics with detailed information about queues and active workers:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--shR2igky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a0mcs5gqlktjuhdppo2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--shR2igky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a0mcs5gqlktjuhdppo2.png" alt="web ui servers and workers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Supports mass operations with tasks in a convenient tabular list with information on a given queue:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--udcU13FP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xziuix8jeclkg3pzf5e6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--udcU13FP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xziuix8jeclkg3pzf5e6.png" alt="web ui servers and workers mass operations"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#redis-server-information" class="anchor"&gt;
  &lt;/a&gt;
  Redis server information
&lt;/h3&gt;

&lt;p&gt;It graphically displays all the necessary information about memory usage, server uptime, the number of connected clients at the moment and much more:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SmedgmVo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36cngx300e9raf8z2uvf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SmedgmVo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36cngx300e9raf8z2uvf.png" alt="web ui redis information"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By the way, a full list of your Redis server configuration can be found at &lt;em&gt;INFO Command Output&lt;/em&gt; section at the bottom of this page (&lt;em&gt;data will be updated automatically&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adaptive-dark-theme" class="anchor"&gt;
  &lt;/a&gt;
  Adaptive dark theme
&lt;/h3&gt;

&lt;p&gt;Oh, yes! &lt;strong&gt;The future has arrived&lt;/strong&gt;. A dark theme with an adaptive mode for the most fashionable Asynq users üéâ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MKMfxW68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z349wynfk3kr7iwrirfe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MKMfxW68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z349wynfk3kr7iwrirfe.png" alt="dark theme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#asynq-cli" class="anchor"&gt;
  &lt;/a&gt;
  Asynq CLI
&lt;/h2&gt;

&lt;p&gt;Install the Asynq CLI tool by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go get &lt;span class="nt"&gt;-u&lt;/span&gt; github.com/hibiken/asynq/tools/asynq
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To see the current state of the queues and their statistics:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;asynq stats
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KOjOWyg1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qz26z9h9r3kxbwimt017.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KOjOWyg1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qz26z9h9r3kxbwimt017.gif" alt="asynq stats"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#photos-and-videos-by" class="anchor"&gt;
  &lt;/a&gt;
  Photos and videos by
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Vic Sh√≥stak &lt;a href="https://shostak.dev"&gt;https://shostak.dev&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Ken Hibino &lt;a href="https://github.com/hibiken"&gt;https://github.com/hibiken&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps" class="anchor"&gt;
  &lt;/a&gt;
  P.S.
&lt;/h2&gt;

&lt;p&gt;If you want more ‚Üí write a comment below &amp;amp; follow me. Thanks! üòò&lt;/p&gt;

</description>
      <category>go</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Simple Music Player UI</title>
      <author>annie.exe</author>
      <pubDate>Tue, 06 Apr 2021 23:47:49 +0000</pubDate>
      <link>https://dev.to/anniedotexe/simple-music-player-ui-4nn1</link>
      <guid>https://dev.to/anniedotexe/simple-music-player-ui-4nn1</guid>
      <description>&lt;p&gt;This is a minimal and simple music player UI design made with HTML, CSS, and JavaScript.&lt;/p&gt;

&lt;p&gt;This project was created to practice my frontend dev skills.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interactions" class="anchor"&gt;
  &lt;/a&gt;
  Interactions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Favorite song button&lt;/li&gt;
&lt;li&gt;Repeat / Shuffle buttons&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-to-toggle-a-color-change-on-svg-buttons" class="anchor"&gt;
  &lt;/a&gt;
  How to toggle a color change on SVG buttons
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#css" class="anchor"&gt;
  &lt;/a&gt;
  CSS
&lt;/h4&gt;

&lt;p&gt;Create a &lt;code&gt;.active&lt;/code&gt; ruleset to set the path's fill to the toggled color.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o-LSUzOa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sg1wur35zybqb5gqzntc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o-LSUzOa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sg1wur35zybqb5gqzntc.png" alt="CSS Code Block"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#javascript" class="anchor"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h4&gt;

&lt;p&gt;Have a function that gets the &lt;code&gt;div&lt;/code&gt; element by &lt;code&gt;id&lt;/code&gt; and toggles an 'active' class.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H-j2VBTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3xl5nyt0p4sx4b9dtp6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H-j2VBTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3xl5nyt0p4sx4b9dtp6.png" alt="JavaScript Code Block"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#html" class="anchor"&gt;
  &lt;/a&gt;
  HTML
&lt;/h4&gt;

&lt;p&gt;Surround the SVG with a div with an &lt;code&gt;id&lt;/code&gt; and an &lt;code&gt;onclick&lt;/code&gt; with the JavaScript function. &lt;em&gt;The div is also used for easier spacing out of elements.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5gZk71FV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jbgd2wpxds6lpt168ns8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5gZk71FV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jbgd2wpxds6lpt168ns8.png" alt="HTML Code Block"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#built-with" class="anchor"&gt;
  &lt;/a&gt;
  Built With
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;HTML5&lt;/li&gt;
&lt;li&gt;CSS3&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#code" class="anchor"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/anniedotexe"&gt;
        anniedotexe
      &lt;/a&gt; / &lt;a href="https://github.com/anniedotexe/music-player"&gt;
        music-player
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This is a minimal and simple music player UI design made with HTML, CSS, and Javascript.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#live-demo" class="anchor"&gt;
  &lt;/a&gt;
  Live Demo
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://musicplayer.anniew.xyz/"&gt;Music Player&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--US1jEedj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hrmp4damcoiiyq8jzyg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--US1jEedj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hrmp4damcoiiyq8jzyg.png" alt="Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feedback" class="anchor"&gt;
  &lt;/a&gt;
  Feedback
&lt;/h2&gt;

&lt;p&gt;Any type of feedback is welcome.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/vnGlErQHuF9BK/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/vnGlErQHuF9BK/giphy.gif" alt="Dancing Pikachu"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The end,&lt;br&gt;
annie.exe&lt;/p&gt;




&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>The Top 5 Python Frameworks for Web Development</title>
      <author>jones268</author>
      <pubDate>Tue, 06 Apr 2021 23:04:02 +0000</pubDate>
      <link>https://dev.to/jones268/the-top-5-python-frameworks-for-web-development-glg</link>
      <guid>https://dev.to/jones268/the-top-5-python-frameworks-for-web-development-glg</guid>
      <description>&lt;p&gt;&lt;a href="https://python.org"&gt;Python&lt;/a&gt; is a great programming language, and is often used to create web apps. It's one of the more popular open source languages in use today, and continues to be a favorite of developers all over the world.&lt;/p&gt;

&lt;p&gt;There are numerous Python frameworks that allow you to quickly create an app with minimal coding, and this has made it one of the most popular choices for those looking to create web applications. &lt;/p&gt;

&lt;p&gt;One advantage of Python is that a web app is very &lt;a href="https://www.pythonanywhere.com/?affiliate_id=00535ced"&gt;easy to deploy&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flask" class="anchor"&gt;
  &lt;/a&gt;
  Flask
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://pythonbasics.org/what-is-flask-python/"&gt;Flask&lt;/a&gt; is intended for getting started very quickly and was developed with best intentions in mind. With that in mind, here are some things that are noteworthy:&lt;/p&gt;

&lt;p&gt;Flask embraces the philosophy of best practices, which means we're not going to constrain ourselves to decisions that are based solely on history or personal preferences. If there is no logical or technical reason for a certain methodology, we'll try something else. &lt;/p&gt;

&lt;p&gt;It may not be the "coolest" but it will be what works best and allow you to deliver a stable product. You can use Flask in conjunction with other modules, like &lt;a href="https://python-commandments.org/flask-crud/"&gt;SQLAlchemy&lt;/a&gt; if you need a database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#django" class="anchor"&gt;
  &lt;/a&gt;
  Django
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; is one of the most popular Python frameworks for &lt;a href="https://pythonspot.com/python-web-development/"&gt;web development&lt;/a&gt;. Best known for its ease of use, many developers choose it as their first framework due to its simplicity and ease of implementation. &lt;/p&gt;

&lt;p&gt;Django comes pre-packaged with many tools that help you to develop apps quickly, and also covers some security areas that many don't. Because of this, Django is considered by some as the go-to framework of choice for beginners.&lt;/p&gt;

&lt;p&gt;However, Django does have a longer learning curve than Flask. That is because it introduces you to many concepts and there is the Django way of doing things. Nevertheless, setting up the &lt;a href="https://pythonprogramminglanguage.com/django-hello-world/"&gt;"hello world"&lt;/a&gt; app should be easy even for a beginner.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pyramid" class="anchor"&gt;
  &lt;/a&gt;
  Pyramid
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://trypyramid.com/"&gt;Pyramid&lt;/a&gt; is an excellent web framework. It's one of the original web frameworks, and has been around a long time. It's got dozens of contributors, thousands of users, and is built by a group you can trust. Pyramid combines solid software engineering, smart development practices, and sensible defaults to make real-world web application development enjoyable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bottle" class="anchor"&gt;
  &lt;/a&gt;
  Bottle
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://bottlepy.org/"&gt;Bottle&lt;/a&gt; is an easy to use, fast, and reliable WSGI implementation for Python. It allows you to quickly write web applications/services that require zero or minimal configuration. Your application can live entirely in a single file, making deployment simple.&lt;/p&gt;

&lt;p&gt;By offering a lightweight framework for building web applications, Bottle makes it easy to create scalable, secure and highly-available web applications that can run on any WSGI-compliant web server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#falcon" class="anchor"&gt;
  &lt;/a&gt;
  Falcon
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://falconframework.org/"&gt;Falcon&lt;/a&gt; is a Python Web framework for building large-scale app backends and microservices. It encourages the REST architectural style, and tries to do as little as possible while remaining highly effective.&lt;/p&gt;

&lt;p&gt;Falcon is a high-performance, minimalist WSGI library that puts the "fac" in "HTTP". It's built on top of Tornado, asyncio, and aiohttp. The goal of this library is to make building request/response APIs as fast and easy as possible.&lt;/p&gt;

</description>
      <category>python</category>
      <category>flask</category>
      <category>django</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 Beginner-Friendly Coding Livestreams to Learn Programming</title>
      <author>Amruta Ranade</author>
      <pubDate>Tue, 06 Apr 2021 22:55:26 +0000</pubDate>
      <link>https://dev.to/amrutaranade/5-beginner-friendly-coding-livestreams-to-learn-programming-1a2</link>
      <guid>https://dev.to/amrutaranade/5-beginner-friendly-coding-livestreams-to-learn-programming-1a2</guid>
      <description>&lt;p&gt;2020 has been a great year for code livestreams. Stuck at home, developers took to their OBS setups to share their coding projects with their peers. And viewers tuned in to watch a fellow developer struggle through a programming issue, get stuck, google things, and eventually figure things out, and found their coding communities in the process.&lt;/p&gt;

&lt;p&gt;But if you are a code newbie, you might find it daunting to follow along with the experienced developers' livestreams. Fear not, for you have your own peers learning new tech stacks live! Here are five of our favorite beginner-friendly streamers that you can watch to learn programming:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-fullstack-web-development-with-leon" class="anchor"&gt;
  &lt;/a&gt;
  Learn full-stack web development with Leon
&lt;/h2&gt;

&lt;p&gt;Leon Noel (&lt;a href="https://www.twitch.tv/learnwithleon"&gt;https://www.twitch.tv/learnwithleon&lt;/a&gt;) runs a free Web Dev Bootcamp live on Twitch every Tuesday and Thursday at 6:30 PM EST. The goal of the bootcamp is to help those affected by the pandemic as well as help underrepresented folks learn web development and get hired as software engineers. You can also bring your questions to the Office Hours on Saturdays at 12 PM EST.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-python-with-pachi" class="anchor"&gt;
  &lt;/a&gt;
  Learn Python with Pachi
&lt;/h2&gt;

&lt;p&gt;Pachi Carlson is currently learning Python live on her Twitch channel (&lt;a href="https://www.twitch.tv/pachicodes"&gt;https://www.twitch.tv/pachicodes&lt;/a&gt;) on Mondays and Wednesdays at 10 AM EST.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-golang-with-paul" class="anchor"&gt;
  &lt;/a&gt;
  Learn Golang with Paul
&lt;/h2&gt;

&lt;p&gt;Paul Kernfeld is currently learning Golang from scratch every Friday at 12 PM EST on Cockroach Labs' Twitch channel. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-rust-with-prince" class="anchor"&gt;
  &lt;/a&gt;
  Learn Rust with Prince
&lt;/h2&gt;

&lt;p&gt;Prince Wilson is currently learning Rust with Exercism.io on his Twitch channel (&lt;a href="https://www.twitch.tv/maxcellw"&gt;https://www.twitch.tv/maxcellw&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-javascript-with-cj" class="anchor"&gt;
  &lt;/a&gt;
  Learn Javascript with CJ
&lt;/h2&gt;

&lt;p&gt;The creator of the popular coding YouTube channel (Coding Garden) also has an excellent Twitch channel (&lt;a href="https://www.twitch.tv/codinggarden"&gt;https://www.twitch.tv/codinggarden&lt;/a&gt;) for full-stack app projects, tutorials, and Q&amp;amp;A sessions (mostly featuring Javascript).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-streams" class="anchor"&gt;
  &lt;/a&gt;
  Bonus streams
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Follow along Jeseekia Vaughn's awesome journey through 100 Days of Code: &lt;a href="https://www.twitch.tv/metadevgirl"&gt;https://www.twitch.tv/metadevgirl&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Want to get some of your own coding done? Join Mayuko (&lt;a href="https://www.twitch.tv/hellomayuko"&gt;https://www.twitch.tv/hellomayuko&lt;/a&gt;) for a chill co-working stream for pomodoro coding sprints.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>python</category>
      <category>javascript</category>
    </item>
    <item>
      <title>The Enterprise DevOps Mindset</title>
      <author>Dylan Watson</author>
      <pubDate>Tue, 06 Apr 2021 22:43:29 +0000</pubDate>
      <link>https://dev.to/dylanwatsonsoftware/the-enterprise-devops-mindset-49g2</link>
      <guid>https://dev.to/dylanwatsonsoftware/the-enterprise-devops-mindset-49g2</guid>
      <description>&lt;p&gt;Firstly, let's start with 2 commonly heard statements:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Enterprise doesn't do DevOps&lt;br&gt;
Or&lt;br&gt;
Releasing is hard&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;- signed, every enterprise developer ever&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Whilst Enterprise companies tend to have a lot of bureaucracy (especially around releasing), we should still look to improve the pace at which we deliver working software to our customers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#does-this-apply-to-my-enterprise-org" class="anchor"&gt;
  &lt;/a&gt;
  Does this apply to my Enterprise org?
&lt;/h1&gt;

&lt;p&gt;Yep. Any organisation whose customers, regulators, and developers appreciate faster, more reliable software releases with less risk can employ these thought processes.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-devops" class="anchor"&gt;
  &lt;/a&gt;
  What is DevOps?
&lt;/h1&gt;

&lt;p&gt;Let's start with a simple shared vision of what DevOps actually is.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;DevOps is&lt;br&gt;
a set of practices&lt;br&gt;
that works to&lt;br&gt;
&lt;strong&gt;automate processes&lt;/strong&gt;&lt;br&gt;
so software teams can&lt;br&gt;
&lt;strong&gt;build, test, and release&lt;/strong&gt;&lt;br&gt;
software &lt;strong&gt;faster and more reliably.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;From &lt;a href="https://www.atlassian.com/devops"&gt;Atlassian DevOps&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-target" class="anchor"&gt;
  &lt;/a&gt;
  The target
&lt;/h2&gt;

&lt;p&gt;What are we looking to achieve here?&lt;br&gt;
We are hoping to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reduce the time it takes for our work (including bug fixes) to land in our user's hands&lt;/li&gt;
&lt;li&gt;Reduce the time it takes to become aware of a problem in Production&lt;/li&gt;
&lt;li&gt;Reduce the risk and longevity of downtime due to a release&lt;/li&gt;
&lt;li&gt;Reduce the impact of any particular bug introduced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, but how?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-git-master-is-sacred" class="anchor"&gt;
  &lt;/a&gt;
  Make git master is sacred
&lt;/h2&gt;

&lt;p&gt;You must ensure that the latest version of your code is always deployable. If you need to "cut a release" and branch off master, you will be less inclined to release on a regular basis.&lt;/p&gt;

&lt;p&gt;If your code is not "ready to release" at any time, your ability to safely respond when &lt;em&gt;shit hits the fan&lt;/em&gt; is heavily affected.&lt;/p&gt;

&lt;p&gt;Think about it, if you first need to rollback your code to a "known" safe place, then this is yet another step in the process before you can even begin fixing your production incident.&lt;/p&gt;

&lt;p&gt;In order to keep master "production-ready", all merges to master must also be ready for production. &lt;/p&gt;

&lt;p&gt;This is achieved by 2 key things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Automation

&lt;ul&gt;
&lt;li&gt;Anything that gives you the confidence to release, should be automated and it should prevent branches from merging to master if they fail&lt;/li&gt;
&lt;li&gt;Your automation should make it VERY hard to accidentally break production&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Coding Practices

&lt;ul&gt;
&lt;li&gt;Write your code in a way that allows you to deploy to production safely without causing an outage due to a mistake.
&lt;/li&gt;
&lt;li&gt;Feature Toggles, Keystones, and backward compatibility are just some of the techniques that can help maintain prod readiness.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Part 3 of this series "Coding Practices will give some examples of ways to ensure your code is production-ready.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-build-it-you-run-it" class="anchor"&gt;
  &lt;/a&gt;
  You build it, you run it
&lt;/h2&gt;

&lt;p&gt;The person best placed to fix issues with a feature is the person that just wrote code for it.&lt;br&gt;
If that person is in charge of dealing with any customer issues with that piece of work they will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Better understand the problems when they occur&lt;/li&gt;
&lt;li&gt;Be more inclined to take care when writing the code&lt;/li&gt;
&lt;li&gt;Have better context and incentive to improve the supportability of that code in the future&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By getting your Devs at least involved in this process, your software quality will be given a good chance to improve, if only through empathy for the user and themselves.&lt;/p&gt;

&lt;p&gt;See Atlassian's take on &lt;a href="https://www.atlassian.com/incident-management/devops/you-built-it-you-run-it"&gt;You build it, you run it&lt;/a&gt; and another on some of their ideas around &lt;a href="https://www.atlassian.com/incident-management/devops/sre"&gt;site reliability engineering&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#small-releases-are-best" class="anchor"&gt;
  &lt;/a&gt;
  Small releases are best
&lt;/h2&gt;

&lt;p&gt;If you spend a year developing software before giving it to a user, you are spending a year building up risk. Any piece of that years (or even months) development could (and likely does) have an undiscovered bug.&lt;/p&gt;

&lt;p&gt;If anything goes wrong (and it will), you will have to sift through a whole year of code and features to discover the issue.&lt;/p&gt;

&lt;p&gt;On the other hand, if you make a single change and deploy it to production you will likely have much more confidence about deploying to production. Why? Well, if it breaks, it is much easier to have confidence around which change caused the issue... And you can simply rollback to the previous version (or even write a test, fix the bug, and redeploy).&lt;/p&gt;

&lt;p&gt;Due to our new confidence in finding issues and rolling back changes quickly, the &lt;em&gt;risk&lt;/em&gt; of any 1 change is &lt;em&gt;drastically reduced&lt;/em&gt;.  We also &lt;em&gt;massively increase&lt;/em&gt; our ability to avoid downtime due to an introduced bug.&lt;/p&gt;

&lt;p&gt;With additional confidence, we can release faster which gives us much better context when things do go wrong since, we have only just finished working on that section of the code.&lt;br&gt;
This only helps give us the confidence we need to release at an even faster cadence and so on.&lt;/p&gt;

&lt;p&gt;Simply stated: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Small change == less risk == faster to release&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For further reading here is an interesting Kent Beck article about taking small changes to the extreme: &lt;a href="https://increment.com/testing/testing-the-boundaries-of-collaboration/"&gt;Testing the boundaries of collaboration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is also an interesting read on the &lt;a href="https://betterprogramming.pub/are-pull-requests-holding-back-your-team-e8aec48986c2"&gt;usefulness of pull-requests&lt;/a&gt;, I think the key takeaway here should be that small, very short-lived branches are best. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automated-testing-is-the-key" class="anchor"&gt;
  &lt;/a&gt;
  Automated testing is the key
&lt;/h2&gt;

&lt;p&gt;The other lynchpin in our DevOps plan is testing. If we don't have sufficient automated testing to give us the confidence to release then the plan falls apart. If we rely on manual testing for this confidence, and this manual testing is performed AFTER merging to master, then your manual testing becomes a blocker to production. However, because you have merged to master, you don't just block the code your code for being released but any code merged after yours. This puts pressure on the QAs causing unnecessary delays or forcing them to drop their testing standards.. or just putting unnecessary stress on them.&lt;/p&gt;

&lt;p&gt;This is not to say that manual exploratory testing doesn't have its place. It can do.&lt;br&gt;
Just that with sufficient automated testing, manual testing shouldn't block a release. If used correctly however, it can be used to validate functionality (often best done by someone with first-hand experience in the business). Manual testing should never be used for anything that you ever want to run more than once to give you confidence you haven't broken something.&lt;/p&gt;

&lt;p&gt;For 2 very interesting points of view on appropriate automated testing levels, check out these articles by:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kent Beck&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://m.facebook.com/nt/screen/?params=%7B%22note_id%22%3A387720532357705%7D&amp;amp;path=%2Fnotes%2Fnote%2F&amp;amp;_rdr"&gt;‚ÄùUnit‚Äù tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Kent C. Dodds.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kentcdodds.com/blog/write-tests"&gt;Write tests. Not too many. Mostly integration.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Apparently, all Kents have strong feelings about tests!)&lt;/p&gt;

&lt;p&gt;However, if your QAs are finding issues that if deployed to production would impact users, then you are in luck! The next post in this series "DevOps Coding Practices" will take you through several techniques to avoid blocking production deployments, whilst still maintaining safe and reliable production environments.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-put-it-into-practice" class="anchor"&gt;
  &lt;/a&gt;
  Let's put it into practice
&lt;/h1&gt;

&lt;p&gt;Next up are some simple DevOps coding practices to follow to ensure master is ready to release at any time. (Link coming soon)&lt;/p&gt;

</description>
      <category>devops</category>
      <category>mindset</category>
      <category>enterprise</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Ditching Docker Compose for Kubernetes</title>
      <author>Paul Mooney</author>
      <pubDate>Tue, 06 Apr 2021 22:05:49 +0000</pubDate>
      <link>https://dev.to/pauldmooney/ditching-docker-compose-for-kubernetes-1jke</link>
      <guid>https://dev.to/pauldmooney/ditching-docker-compose-for-kubernetes-1jke</guid>
      <description>&lt;p&gt;When developing locally I usually incorporate Docker Compose into my local development workflow: Bringing up supporting containers needed to run databases, reverse proxies, other applications, or just to see how the container I'm developing works. Given that &lt;a href="https://www.docker.com/products/docker-desktop"&gt;Docker Desktop&lt;/a&gt; comes with a single node Kubernetes (K8s) cluster and I usually end up deploying my containers to a Kubernetes cluster, I wanted to figure out if I can switch from Docker-Compose to Kubernetes for local development. It's also a good way to work the kinks out of Kubernetes manifests or Helm charts without disrupting any shared environments.&lt;/p&gt;

&lt;p&gt;There are five things I need to be able to do in order to replace Docker-Compose with Kubernetes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#build-local"&gt;Build an image locally and run it on the Kubernetes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="#make-changes"&gt;Make changes to an app and redeploy on Kubernetes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="#volume-mount"&gt;Make an easily accessible volume mount on a container in Kubernetes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="#docker-internal-dns"&gt;Have Kubernetes apps easily communicate with host OS apps&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="#expose-app"&gt;Have host OS apps easily communicate with Kubernetes apps&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to skip to how all of this works out here's the &lt;a href="#tldr"&gt;TL;DR&lt;/a&gt; otherwise keep reading.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Warning: The rest of this post assumes some familiarity with Docker and Kubernetes.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can find sample applications that demonstrate all of this in &lt;a href="https://github.com/PaulDMooney/Local-K8s-Dev-Blog/"&gt;this monorepo&lt;/a&gt; along with an &lt;a href="https://github.com/PaulDMooney/Local-K8s-Dev-Blog/blob/main/README.md#working-with-the-local-environment"&gt;explanation to get up and running&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-an-image-locally-and-run-it-on-the-kubernetes" class="anchor"&gt;
  &lt;/a&gt;
  &lt;span id="build-local"&gt;Build an image locally and run it on the Kubernetes&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;With Docker Compose I can build an image and run it with just one simple command &lt;code&gt;docker-compose up --build&lt;/code&gt;, assuming I have my docker-compose files setup. What's the analogue of this with Kubernetes? When I build an image, how can Kubernetes pull it? Do I need a local &lt;a href="https://docs.docker.com/registry"&gt;Docker Registry&lt;/a&gt; to push my image to? &lt;/p&gt;

&lt;p&gt;The answer to that last question, luckily, is "No". When building an image locally using the standard docker build command &lt;code&gt;docker build --tag my-image:local .&lt;/code&gt; the image is stored in docker's image cache. This is the &lt;em&gt;same&lt;/em&gt; image cache Kubernetes will use because it's using the &lt;em&gt;same&lt;/em&gt; docker instance. There are two things to note here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;image&lt;/code&gt; name of a Kubernetes pod must exactly match the name given via the &lt;code&gt;--tag&lt;/code&gt; parameter of the &lt;code&gt;docker build&lt;/code&gt; command. In the example given it's &lt;code&gt;my-image:local&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;imagePullPolicy&lt;/code&gt; must be set to &lt;code&gt;Never&lt;/code&gt; or &lt;code&gt;IfNotPresent&lt;/code&gt;. It cannot be set to &lt;code&gt;Always&lt;/code&gt; otherwise Kubernetes will attempt to pull the image from a remote registry like &lt;a href="https://hub.docker.com/"&gt;Docker Hub&lt;/a&gt;, and it would fail.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-container&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;my-image:local"&lt;/span&gt;
    &lt;span class="na"&gt;imagePullPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Never&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
Container definitions would contain an `image` name that matches your build command and an `imagePullPolicy` that is not `Always`





&lt;p&gt;That covers how to build and run an image locally.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-changes-to-an-app-and-redeploy-on-kubernetes" class="anchor"&gt;
  &lt;/a&gt;
  &lt;span id="make-changes"&gt;Make Changes to an app and redeploy on Kubernetes&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;If I were making changes to the application or its image definition (ie, Dockerfile) and wanted to see it running in Docker Compose I would just run the command &lt;code&gt;docker-compose up --build&lt;/code&gt;. For kubernetes we can rebuild the image &lt;code&gt;docker build --tag my-image:local&lt;/code&gt;. That much is the same as the initial build but you will probably notice your changes aren't actually running in Kubernetes right away. &lt;/p&gt;

&lt;p&gt;The problem is there's been no signal for Kubernetes to do anything after the image was built. The solution is to delete the pod the image was running in and recreate it. If you are running single unmanaged pod (which I think is unlikely) you would have to delete it and recreate it yourself from the pod definition yaml. If you're running a deployment or a statefulset you can either delete the pods and they will automatically be recreated for you, or you can scale down the replicas to 0 and then back up again:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Delete a pod: &lt;code&gt;kubectl delete pod my-pod-xyz --force&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Scale down &lt;code&gt;kubectl scale deployment my-deployment --replicas=0&lt;/code&gt; and then back up &lt;code&gt;kubectl scale deployment my-deployment --replicas=3&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#make-an-easily-accessible-volume-mount-on-a-container-in-kubernetes" class="anchor"&gt;
  &lt;/a&gt;
  &lt;span id="volume-mount"&gt;Make an easily accessible volume mount on a container in Kubernetes&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;In Docker Compose, volumes can be fairly straightforward in that we can mount any file or subdirectory relative to the directory we are executing &lt;code&gt;docker-compose&lt;/code&gt; from. That makes it easy to find, inspect and cleanup those files. But Kubernetes is not the same. It's not running from a project's folder like Docker Compose, it's already running on the Docker Desktop Virtual Machine somewhere. So if we defined a volume to mount into a container, where would the data for that volume live? It lives in the Docker Desktop Virtual Machine somewhere (unless we're running WSL 2). Luckily Docker Desktop has file sharing setup with the host OS so we can take advantage of this to do any inspection or cleanup of persistent data.&lt;/p&gt;

&lt;p&gt;Going into the Docker Desktop dashboard under Settings/Preferences -&amp;gt; Resources -&amp;gt; File Sharing I can see and manage all of the file sharing that is available. Using this information I can create a &lt;a href="https://kubernetes.io/docs/concepts/storage/volumes/#hostpath"&gt;hostPath&lt;/a&gt; Persistent Volume that my application can &lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims"&gt;claim&lt;/a&gt; and use. In my example below I picked a path under &lt;code&gt;/Users&lt;/code&gt; since that was already shared (on MacOS):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PersistentVolume&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-volume&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;storageClassName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-volume-class&lt;/span&gt;
  &lt;span class="na"&gt;accessModes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;ReadWriteMany&lt;/span&gt;
  &lt;span class="na"&gt;capacity&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;storage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;1Gi&lt;/span&gt;
  &lt;span class="na"&gt;hostPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;/Users/Shared/my-volume"&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;DirectoryOrCreate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This volume obviously differs from what you would use in your dev or prod Kubernetes clusters, so I recommend having a folder of "local" persistent volume definition yamls like this that can be reused by team mates (or your future self) to populate their Kubernetes with. Unfortunately you may have no choice but to have different persistent volume yamls for both Mac and Windows if your team uses a mix of those.&lt;/p&gt;

&lt;p&gt;One last thing - if you ever delete the claim to this Persistent Volume, you must delete and recreate the Persistent Volume too, if you ever want to run your application again in the future. This is not unique to local Kubernetes development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#have-kubernetes-apps-easily-communicate-with-host-os-apps" class="anchor"&gt;
  &lt;/a&gt;
  &lt;span id="docker-internal-dns"&gt;Have Kubernetes apps easily communicate with host OS apps&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;Often times I will be working on an application in the host OS. Most of my primary development is done here, as you get the advantages of automatic rebuilds and IDE tooling, etc. There will be other applications that I'd like to run in Kubernetes that can talk to this application on the host OS. For example, I may have a reverse proxy like nginx running in Kubernetes that needs to serve up my host OS application. This is super easy, and done exactly the same as we would do it with just Docker or Docker Compose: with the &lt;code&gt;host.docker.internal&lt;/code&gt; DNS name. &lt;/p&gt;

&lt;p&gt;An example of my nginx config running on kubernetes that reverse proxies my app running on the host port 4200:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server {
    listen       80;
    server_name  localhost;

    location / {
        proxy_pass http://host.docker.internal:4200;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#have-host-os-apps-easily-communicate-with-kubernetes-apps" class="anchor"&gt;
  &lt;/a&gt;
  &lt;span id="expose-app"&gt;Have host OS apps easily communicate with Kubernetes apps&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;Whether I'm developing an application on the host OS that communicates with an application on Kubernetes, or if I want to access the application on Kubernetes in a web browser, or some kind of client, the application needs to be exposed. There are two ways to do this. The first, and not my recommended approach, is to use &lt;a href="https://kubernetes.io/docs/tasks/access-application-cluster/port-forward-access-application-cluster/#forward-a-local-port-to-a-port-on-the-pod"&gt;kubectl port-forwarding&lt;/a&gt;. I don't like this approach because you need to be re-run this command whenever you restart your cluster for every service that needs to be exposed. My preferred approach is to use a &lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/#nodeport"&gt;NodePort&lt;/a&gt; service.&lt;/p&gt;

&lt;p&gt;A NodePort exposes a port on the kubernetes node that you can access your application through and in Docker Desktop that exposes the port on your host OS.&lt;/p&gt;

&lt;p&gt;So I can create a service for my application like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Service&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-app-service&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;app.kubernetes.io/name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-app-service&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;NodePort&lt;/span&gt;
  &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3000&lt;/span&gt;
      &lt;span class="na"&gt;targetPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http&lt;/span&gt;
      &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TCP&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http&lt;/span&gt;
      &lt;span class="na"&gt;nodePort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;30001&lt;/span&gt; 
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;app.kubernetes.io/name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And I can access my application at &lt;code&gt;localhost:30001&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;I prefer to define my nodePort for predictability of the port, but you can leave it empty for Kubernetes to decide what it should be. Then there's less chance of a collision for an already occupied port.&lt;/p&gt;

&lt;p&gt;Chances are the application's service might be a ClusterIP or LoadBalancer type when deployed to other Kubernetes clusters, or that the nodePort will have a different value in those clusters. You can get around this by templating your service definition in &lt;a href="https://helm.sh/"&gt;Helm&lt;/a&gt;, and having different service configurations for your local Kubernetes versus other Kubernetes clusters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#helm" class="anchor"&gt;
  &lt;/a&gt;
  Helm
&lt;/h2&gt;

&lt;p&gt;Without Helm, or similar tools, using a local Kubernetes cluster for development is pointless beyond just experimentation purposes. We want to use the local Kubernetes cluster so that our running applications will mirror shared environments, like production as closely as possible. Helm lets us accomplish this by allowing us to template out our kubernetes manifests, and abstract out only the necessary environmental differences into &lt;a href="https://helm.sh/docs/chart_template_guide/values_files/"&gt;values files&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When you're using Helm you'll be creating values files for every environment. I recommend creating values files for local clusters as well that can be shared with the team. You can even create personal "overrides" values files that you can use to change some minor configurations for your own purposes (just be sure to .gitignore them). Helm lets you chain these files together, and gives precendence to the rightmost file. E.g., &lt;code&gt;helm upgrade my-app ./my-app -f values-local.yaml -f .values-override.yaml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another benefit of Helm is in it's package management. If your application requires another team's application up and running, they can publish their Helm chart to a remote repository like a &lt;a href="https://github.com/helm/chartmuseum"&gt;ChartMuseum&lt;/a&gt;. You can then install their application into your Kubernetes by naming that remote chart combined with a local values file. E.g., &lt;code&gt;helm install other-teams-app https://charts.mycompany.com/other-teams-app-1.2.3.tgz -f values-other-teams-app.yaml&lt;/code&gt;. This is convenient because it means you don't have to checkout their project and dig through it for their helm charts to get up and running - all you need to supply is your own values file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scripting" class="anchor"&gt;
  &lt;/a&gt;
  Scripting
&lt;/h2&gt;

&lt;p&gt;Working with kubernetes, and then layering in extra tools like Helm, there are a lot of commands to get to know. Most of your team will probably need some kind of containerized apps running locally, but it can be a high bar to expect them to know all of the docker and kubectl and helm commands. You will also want to take the things that are done often and condense them into some simpler scripts for your own convenience. Things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build and Install your app on the kubernetes cluster:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build --tag myimage:local \
&amp;amp;&amp;amp; kubectl apply -f my-volume.yaml \
&amp;amp;&amp;amp; my-helm install my-app ./my-app -f values-local.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Build and restart your app:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build --tag myimage:local \
&amp;amp;&amp;amp; kubectl scale deployment my-app --replicas=0 \
&amp;amp;&amp;amp; kubectl scale deployment my-app --replicas=3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Update your configuration:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;helm upgrade my-app ./my-app -f values-local.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Install another team or organization's app:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;helm install other-teams-app https://charts.mycompany.com/other-teams-app-1.2.3.tgz -f values-other-teams-app.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Clean up
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;helm uninstall my-app \
&amp;amp;&amp;amp; kubectl delete -f my-volume.yaml
&amp;amp;&amp;amp; rm -Rf /path/to/my-volume
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can script this however you like, whether it be in bash, Makefile, npm scripts, Gradle tasks. Use whatever suits your team best.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comparing-to-docker-compose" class="anchor"&gt;
  &lt;/a&gt;
  Comparing to Docker Compose
&lt;/h2&gt;

&lt;p&gt;Using Docker Compose for local development is undoubtedly more convenient than Kubernetes. For the most part you only need to be familiar with two commands to build, run, re-build and re-run, and shutdown your applications in docker: &lt;code&gt;docker-compose up --build&lt;/code&gt;, and &lt;code&gt;docker-compose down&lt;/code&gt;. For volumes, Docker Compose lets you mount a directory relative to where you execute &lt;code&gt;docker-compose&lt;/code&gt; from and in a way that works across platforms. Docker Compose is also safer - there's no chance you're going to accidentally &lt;code&gt;docker-compose up&lt;/code&gt; a mid-developed image into production!&lt;/p&gt;

&lt;p&gt;Docker Compose has the disadvantage that it's a duplication of effort to recreate an analogue of your Kubernetes manifests into docker-compose files. Considering the extra configurations, volume definitions, and scripting that needs to be added for local Kubernetes development, this is probably a negligable difference.&lt;/p&gt;

&lt;p&gt;Kubernetes, on the other hand, more accurately represents what you will be deploying into shared Kubernetes clusters or production. Using a tool like Helm gives us package manager-like features of installing externally developed manifest or dependencies without having to redefine them in your local repository. &lt;/p&gt;

&lt;p&gt;Using Kubernetes requires a good familiarity with Kubernetes and its surrounding tools, or extra scripting to hide these details. These tools like &lt;code&gt;kubectl&lt;/code&gt; and &lt;code&gt;helm&lt;/code&gt; rely on a &lt;a href="https://kubernetes.io/docs/reference/kubectl/cheatsheet/#kubectl-context-and-configuration"&gt;context&lt;/a&gt; which could be set to the wrong Kubernetes cluster, which would cause unwanted trouble! I recommend putting safeguards in place like setting up &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/"&gt;RBAC&lt;/a&gt; where possible in the shared or production Kubernetes clusters where possible. Or, work within a &lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"&gt;namespace&lt;/a&gt; locally that does not exist in other clusters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;It's possible to replace Docker Compose with Kubernetes for local development, but for the added complexity and trade-offs it may be worth using both. For most local development, Docker Compose is probably good enough, and much simpler. Using a local Kubernetes cluster is a step up in terms of complexity and effort so it is up to you if you want to take that on. It is definitely worth it for Helm Chart / Manifest development or situations where you absolutely must re-create a part of your deployment architecture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr" class="anchor"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Building and running an image on Kubernetes works because Kubernetes will pull from the same shared image cache you built from, just make sure your pull policy is not 'Always'.&lt;/p&gt;

&lt;p&gt;To re-build an image and re-run, just delete the old pods running the old image. Newly created pods will come up with the new image.&lt;/p&gt;

&lt;p&gt;Docker Deskop's file sharing locations can be found and configured in the Preferences/Settings. A Persistent Volume can be created with a hostPath to one of those locations.&lt;/p&gt;

&lt;p&gt;Applications running on Kubernetes can access applications on the host OS via the &lt;code&gt;host.docker.internal&lt;/code&gt; DNS name.&lt;/p&gt;

&lt;p&gt;Applications running on Kubernetes can be accessed by setting up &lt;a href="https://kubernetes.io/docs/tasks/access-application-cluster/port-forward-access-application-cluster/#forward-a-local-port-to-a-port-on-the-pod"&gt;kubectl port forwarding&lt;/a&gt; and then accessed using &lt;code&gt;localhost:{forwardedPort}&lt;/code&gt;. Or, even better, make the Application's service a nodePort service and access using &lt;code&gt;localhost:{nodePort}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Use Helm. Simplify the common tasks via scripting. Maybe don't ditch Docker Compose completely.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>kubernetes</category>
    </item>
    <item>
      <title>Regex? The Minimum You Need To Know.</title>
      <author>Huzaifa Rasheed</author>
      <pubDate>Tue, 06 Apr 2021 21:59:35 +0000</pubDate>
      <link>https://dev.to/huzaifa99/regex-the-minimum-you-need-to-know-496l</link>
      <guid>https://dev.to/huzaifa99/regex-the-minimum-you-need-to-know-496l</guid>
      <description>&lt;p&gt;You might have noticed when filling out an online form for email or password, you sometimes get validation errors like &lt;strong&gt;&lt;em&gt;email must be valid&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;password must be 8 digits long&lt;/em&gt;&lt;/strong&gt;. Something like this üëá  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WT9gci6O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7cpv19e34kfiyios6xvh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WT9gci6O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7cpv19e34kfiyios6xvh.PNG" alt="Regex Use Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are places where &lt;strong&gt;REGEX&lt;/strong&gt; is used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-regex" class="anchor"&gt;
  &lt;/a&gt;
  What Is Regex?
&lt;/h2&gt;

&lt;p&gt;Regex is short for Regular Expressions. &lt;/p&gt;

&lt;p&gt;A sequence of characters that specifies a search pattern. These patterns are mostly used by string-searching algorithms to &lt;strong&gt;&lt;em&gt;find&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;find and replace&lt;/em&gt;&lt;/strong&gt; character/s. Thus they can be used for validations and mostly you will be using &lt;strong&gt;&lt;em&gt;Regex&lt;/em&gt;&lt;/strong&gt; for them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-regex" class="anchor"&gt;
  &lt;/a&gt;
  How To Use Regex?
&lt;/h2&gt;

&lt;p&gt;You can use different functions for matching regex with your data. In PHP there are functions starting with &lt;code&gt;preg_&lt;/code&gt; that mostly match &lt;strong&gt;regex&lt;/strong&gt; (see &lt;strong&gt;&lt;a href="https://www.php.net/manual/en/ref.pcre.php"&gt;Regex for Php&lt;/a&gt;&lt;/strong&gt;) while In JavaScript, regex are also objects. You can see some of the regex functions for JavaScript on &lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"&gt;Javascript Regex Guide&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-validations" class="anchor"&gt;
  &lt;/a&gt;
  Basic Validations
&lt;/h2&gt;

&lt;p&gt;There are a number of online &lt;strong&gt;regex engines&lt;/strong&gt; that you can use to quickly test out your regex expression. I mostly use &lt;strong&gt;&lt;a href="https://regex101.com/"&gt;Regex101&lt;/a&gt;&lt;/strong&gt; because I like it. The following examples are tested on Regex101.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#email" class="anchor"&gt;
  &lt;/a&gt;
  Email
&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;/^(([^&amp;lt;&amp;gt;()[\]\\.,;:\s@"]+(\.[^&amp;lt;&amp;gt;()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9as9mVxx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmxf8wqsn80ul9244k6k.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9as9mVxx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmxf8wqsn80ul9244k6k.PNG" alt="Email Validation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#password" class="anchor"&gt;
  &lt;/a&gt;
  Password
&lt;/h5&gt;

&lt;p&gt;Minimum eight characters, at least one uppercase letter, one lowercase letter, and one number&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f2Xhg-eG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl9m9p3namsm2mt0fod2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f2Xhg-eG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl9m9p3namsm2mt0fod2.PNG" alt="Password Validation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more password validations, Check out the &lt;strong&gt;&lt;a href="https://stackoverflow.com/a/21456918/12579290"&gt;answer on stackoverflow&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#numbers-only" class="anchor"&gt;
  &lt;/a&gt;
  Numbers Only
&lt;/h5&gt;

&lt;p&gt;To match 0 or many numbers&lt;br&gt;
&lt;code&gt;/^[0-9]*$/&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qnOP6RUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvwwk8gfcskyh93db8sp.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qnOP6RUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvwwk8gfcskyh93db8sp.PNG" alt="Numbers 0 or many"&gt;&lt;/a&gt;&lt;br&gt;
To match 1 or many numbers&lt;br&gt;
&lt;code&gt;/^[0-9]+$/&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---QJhjL6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvcydj8giznhsdbyk33r.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---QJhjL6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvcydj8giznhsdbyk33r.PNG" alt="Numbers 1 or many"&gt;&lt;/a&gt;&lt;br&gt;
To match exactly 1 number&lt;br&gt;
&lt;code&gt;/^[0-9]$/&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9lmJjZBd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umhr6zjh4ape2r2zhjgd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9lmJjZBd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umhr6zjh4ape2r2zhjgd.PNG" alt="Numbers exactly 1"&gt;&lt;/a&gt;&lt;br&gt;
If you add one more number in the test string, the validation will fail.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#phone-numbers-only" class="anchor"&gt;
  &lt;/a&gt;
  Phone Numbers Only
&lt;/h3&gt;

&lt;p&gt;This is a little difficult to explain as different countries have different phone numbers, codes, etc., you know what I am talking about.&lt;/p&gt;

&lt;p&gt;For my number, and I have an 11 digit number(Pakistani Phone Number), I use the following &lt;strong&gt;regex&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;/^((\+92)|(0092))-{0,1}\d{3}-{0,1}\d{7}$|^\d{11}$|^\d{4}-\d{7}$/&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zlbzmbnE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23ual8brwv9o6sjhdeh7.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zlbzmbnE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23ual8brwv9o6sjhdeh7.PNG" alt="Phone Number validation country code"&gt;&lt;/a&gt;&lt;br&gt;
It validates the phone number with and without the country code like the following do pass&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;00923000000000&lt;/li&gt;
&lt;li&gt;+923000000000&lt;/li&gt;
&lt;li&gt;03000000000&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would suggest that for a good reference, check out &lt;strong&gt;&lt;a href="https://github.com/google/libphonenumber"&gt;Google's Library&lt;/a&gt;&lt;/strong&gt; for validating international phone numbers. This is not regex but it gets the job done if are on the run.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#characters-only" class="anchor"&gt;
  &lt;/a&gt;
  Characters Only
&lt;/h4&gt;

&lt;p&gt;To match for 1 or many characters&lt;br&gt;
&lt;code&gt;/^[A-Za-z]+$/&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6RHoJorf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5sn7qtel8j4ewiyx0yt.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6RHoJorf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5sn7qtel8j4ewiyx0yt.PNG" alt="Characters only 1 or many"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To match 0 or many characters you can use &lt;code&gt;/^[A-Za-z]*$/&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;To match exactly 1 character you can use &lt;code&gt;/^[A-Za-z]$/&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, there are other combinations you can explore.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#url-matching" class="anchor"&gt;
  &lt;/a&gt;
  URL Matching
&lt;/h4&gt;

&lt;p&gt;The following will mostly match the URLs you want to&lt;br&gt;
&lt;code&gt;^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,}))\.?)(?::\d{2,5})?(?:[/?#]\S*)?$&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jWElnk2P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ap47bo7izyspogfky8mt.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jWElnk2P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ap47bo7izyspogfky8mt.PNG" alt="URL Matching exmaple"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This however does not match port numbers, Like it would not match &lt;code&gt;https://regex101:9000.com/?page=1&lt;/code&gt;. So you should have a general idea of what type of URL you want to match. &lt;/p&gt;

&lt;p&gt;I suggest seeing &lt;strong&gt;&lt;a href="https://stackoverflow.com/questions/161738/what-is-the-best-regular-expression-to-check-if-a-string-is-a-valid-url"&gt;Regex For URL&lt;/a&gt;&lt;/strong&gt; that has different implementations of Php and Js that you can play with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-language-supports-regex" class="anchor"&gt;
  &lt;/a&gt;
  Which Language Supports Regex?
&lt;/h2&gt;

&lt;p&gt;Almost every major language has support for regex. &lt;/p&gt;

&lt;p&gt;To be more clear, implementations of regex functionality are called a &lt;strong&gt;&lt;em&gt;regex engine&lt;/em&gt;&lt;/strong&gt;, and a number of libraries are available for reuse which different languages do use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Regex&lt;/strong&gt; syntax may vary slightly between languages but for the most part, it is the same.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-some-theory" class="anchor"&gt;
  &lt;/a&gt;
  Now Some Theory.
&lt;/h2&gt;

&lt;p&gt;Fun is over guys, now we are moving towards the theory. Jokes aside, Most of you don't need to know everything about regex in detail, the same with a programming language, we can't learn everything about them. &lt;/p&gt;

&lt;p&gt;But you should know that üëá&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A Regex can have&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tokens&lt;/li&gt;
&lt;li&gt;Anchors&lt;/li&gt;
&lt;li&gt;Meta Sequences&lt;/li&gt;
&lt;li&gt;Quantifiers&lt;/li&gt;
&lt;li&gt;Group Constructs&lt;/li&gt;
&lt;li&gt;Character Classes&lt;/li&gt;
&lt;li&gt;Flag/Modifiers&lt;/li&gt;
&lt;li&gt;Substitution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to learn and practice them at the same time then I would again suggest, goto &lt;strong&gt;&lt;a href="https://regex101.com/"&gt;Regex101&lt;/a&gt;&lt;/strong&gt;. It has a good reference for the &lt;strong&gt;regex&lt;/strong&gt; operators. üëá&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eA_f0Wpr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qb6b7znp12zpuxriy0au.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eA_f0Wpr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qb6b7znp12zpuxriy0au.PNG" alt="Regex101 regex reference"&gt;&lt;/a&gt; and I think I don't need to explain more üòâ&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fun-part-while-writing-the-article" class="anchor"&gt;
  &lt;/a&gt;
  Fun Part While Writing The Article
&lt;/h3&gt;

&lt;p&gt;I found a &lt;strong&gt;regex&lt;/strong&gt; from StackOverflow that was matching non-ASCII characters and it matched every word I tried of any language. Even in my native language &lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/Urdu"&gt;Urdu&lt;/a&gt;&lt;/strong&gt; it matched &lt;code&gt;ÿßŸêÿ≥ŸÑÿßŸÖ€å ÿ¨ŸÖ€ÅŸàÿ±€å€Å ŸæÿßŸÉŸêÿ≥ÿ™ÿßŸÜ&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NsP-PIAd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5cwcgmo0ldd3vwn1cebn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NsP-PIAd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5cwcgmo0ldd3vwn1cebn.PNG" alt="Regex that matches every word of every language"&gt;&lt;/a&gt;&lt;br&gt;
I don't know if it's useful or not, but I will add it in the comments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tip" class="anchor"&gt;
  &lt;/a&gt;
  Tip
&lt;/h3&gt;

&lt;p&gt;More like a best practice. You should do &lt;strong&gt;regex&lt;/strong&gt; validations on both the frontend and backend of your code. Just in case someone tries to manipulate the frontend, your backend will not validate the invalid data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can also use &lt;strong&gt;&lt;a href="https://www.w3schools.com/html/html_form_input_types.asp"&gt;HTML5 Input Types&lt;/a&gt;&lt;/strong&gt; for validating some form fields on the frontend, but for the backend you need &lt;strong&gt;regex.&lt;/strong&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;So did you use regex for a complex match sometime or you just got to know about it? Also, give a üíñ or a ü¶Ñ if you like the article.&lt;/p&gt;

</description>
      <category>regex</category>
      <category>programming</category>
      <category>validations</category>
    </item>
    <item>
      <title>My First Month of Running an API-first Startup</title>
      <author>Ilya Nevolin</author>
      <pubDate>Tue, 06 Apr 2021 21:51:17 +0000</pubDate>
      <link>https://dev.to/codr/my-first-month-of-running-an-api-first-startup-3oj7</link>
      <guid>https://dev.to/codr/my-first-month-of-running-an-api-first-startup-3oj7</guid>
      <description>&lt;p&gt;Early March I was hired to run and grow &lt;a href="https://www.spurwing.io/"&gt;Spurwing&lt;/a&gt;. I am in charge of the business development, sales and marketing aspects, and co-responsible for several engineering projects. In this post I'll share my personal insights, tips and tricks from my first month at an early-stage Startup company.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-company" class="anchor"&gt;
  &lt;/a&gt;
  The company
&lt;/h2&gt;

&lt;p&gt;Our core product is the &lt;strong&gt;Appointment Scheduling API&lt;/strong&gt;. Our primary clients are engineering teams and managers. The API allows developers to innovate quicker, build cheaper and scale easier any kind of time sensitive process.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rjIYrn3u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wb08zq3mm35baedfpf7f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rjIYrn3u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wb08zq3mm35baedfpf7f.png" alt="appointment scheduling demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most common use cases we focus on are &lt;strong&gt;Time Management Solutions&lt;/strong&gt;. The most simple use cases are custom booking and scheduling widgets. The more complex solutions entail enterprise calendar management, remote team collaboration tools and supply chain management. Our products fit in any industry and can be used by most roles.&lt;/p&gt;

&lt;p&gt;We are not directly competing with products like Calendly. Our mission is providing engineering resources and tools to development teams to solve problems quicker, easier and cheaper. &lt;/p&gt;

&lt;p&gt;Spurwing is actually a spin-off product developed for &lt;a href="https://www.gethealthie.com/"&gt;Healthie Inc.&lt;/a&gt; where its technology is used to schedule and manage millions of annual bookings and events.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JCdqGjhH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ar3f9u837ky2hcew6a4x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JCdqGjhH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ar3f9u837ky2hcew6a4x.png" alt="calendar management dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-week" class="anchor"&gt;
  &lt;/a&gt;
  First week
&lt;/h2&gt;

&lt;p&gt;I have been working in software engineering, product and business development for over 10 years. So it was a fairly easy and efficient on-boarding process for me. Some of you may relate, but most of the things we do at Spurwing, and the challenges we face, I already faced before. I have a pretty solid idea of how to tackle most challenges and what it takes to execute.&lt;/p&gt;

&lt;p&gt;This being said, the first week I spent a lot of time communicating with the directors on our vision and strategy for Spurwing. The goal we set is building a large, free and &lt;a href="https://github.com/Spurwing/"&gt;open-source Marketplace&lt;/a&gt;. This marketplace will contain a ton of resources and tools for engineering teams and developers. These include API libraries, widgets, chat bots, management dashboards and many integrations with 3rd party providers.&lt;/p&gt;

&lt;p&gt;Giving away all these resources for free provides us with great marketing opportunities and a big advantage over the competition as well.&lt;/p&gt;

&lt;p&gt;Once we had our goal clearly defined, it was time to execute. I started building the libraries for the API in several programming languages: Python, NodeJS, JavaScript/Ajax and we are working on Java, C++ and C# as well. Thanks to these libraries we can now easily and quickly build new tools and platforms.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#second-week" class="anchor"&gt;
  &lt;/a&gt;
  Second week
&lt;/h2&gt;

&lt;p&gt;Research is an important activity I do on a daily basis. Specifically I research and note down all types of projects and solutions for us to work on. &lt;/p&gt;

&lt;p&gt;I started building the most crucial ones first: 1:1 appointment scheduling widgets for websites, calendar links and the like.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3MSWtJ9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bgsiie758revo4rfijne.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3MSWtJ9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bgsiie758revo4rfijne.png" alt="appointment scheduling tool"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#third-week" class="anchor"&gt;
  &lt;/a&gt;
  Third week
&lt;/h2&gt;

&lt;p&gt;I spent that week mostly on research, prospecting and talking to potential clients. Most communication happens on LinkedIn or email. LinkedIn is great, but it's not easy to get people to talk to you. Most senior engineers and managers have no time to chat with randoms. It's all about finding the ones that are active and engage with them.&lt;/p&gt;

&lt;p&gt;A quite popular solution we built that week was a Facebook Messenger Chat Bot with booking / scheduling capabilities:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1VvEwNJ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjb8cpsnvbyc3lrm8c16.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1VvEwNJ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjb8cpsnvbyc3lrm8c16.gif" alt="chat bot for scheduling demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are still in the process of improving this chat bot, enhancing the user experience and experimenting with new features. Aside from that we have several more chat bot integrations in the pipeline: Discord, Slack, WhatsApp, Skype, Intercom, Amazon Lex, Google Chat and more.&lt;/p&gt;

&lt;p&gt;We started building a CI/CD pipeline for all our libraries, widgets and tools on the marketplace. Over the years I became very proactive of Test Driven Development and the value that CI/CD pipelines provide to engineering &amp;amp; QA teams. These days I no longer build products without having some decent automated testing (and deployment) included.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fourth-week" class="anchor"&gt;
  &lt;/a&gt;
  Fourth week
&lt;/h2&gt;

&lt;p&gt;Mostly prospecting, building marketing content and researching product ideas. In addition to that we built a simple scheduling too for international teams across different time zones:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j9I1wuoQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysw09vvo7u5h89e06ela.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j9I1wuoQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysw09vvo7u5h89e06ela.png" alt="appointment scheduling for teams"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tools like these allow us to save precious time and be more productive internally. Most of our employees and partners are located at different time zones, thus setting up meetings can sometimes be a hassle. This tool allows all participants to submit their availability for a certain date range. The organizer of the event can then view a strict overlap of all the submissions and choose a time slot that works for all. It's a quite simple and basic implementation but provides a huge value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You may wonder how the heck we get so much done in just under a month. It's all about great management mixed with experience &amp;amp; expertise.&lt;/p&gt;

&lt;p&gt;We use Slack / Discord to easily and quickly communicate with all our business and engineering teams. We spend very little time on email or phone communication. We only have one dedicated video chat call per week to catch up. As you can see, we try to minimize and reduce any unnecessary bottlenecks. This allows us to be extremely productive.&lt;/p&gt;

&lt;p&gt;If you have any specific questions, post them down below!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links" class="anchor"&gt;
  &lt;/a&gt;
  Useful links
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://dev.to/spurwing"&gt;Spurwing blog on DEV&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/Spurwing/"&gt;Open-Source Marketplace&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.slideshare.net/IljaNevolin/time-management-tools-appointment-scheduling-software-and-booking-solutions-for-business-teams"&gt;Brochure&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#about-me" class="anchor"&gt;
  &lt;/a&gt;
  About me
&lt;/h3&gt;

&lt;p&gt;I'm a modest Software engineer with +10yrs of experience in building software for web, desktop and some Android stuff. Multi-Startup founder and product developer. Feel free to connect: &lt;a href="https://www.linkedin.com/in/iljanevolin/"&gt;https://www.linkedin.com/in/iljanevolin/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ciao!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>All About Closures</title>
      <author>Doaa Mahely</author>
      <pubDate>Tue, 06 Apr 2021 20:58:39 +0000</pubDate>
      <link>https://dev.to/dmahely/all-about-closures-2376</link>
      <guid>https://dev.to/dmahely/all-about-closures-2376</guid>
      <description>&lt;p&gt;I know what you're about to say. I, too, have read dozens of posts on JavaScript closures. But closures haven't really clicked for me until I read the MDN page three times then attempted to explain the concept to my mentor, &lt;a class="comment-mentioned-user" href="https://dev.to/tryggvigy"&gt;@tryggvigy&lt;/a&gt;
. Everything I learned from our conversation is written below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-closure" class="anchor"&gt;
  &lt;/a&gt;
  What is a closure
&lt;/h2&gt;

&lt;p&gt;One of the reasons I couldn't get a good grasp on closures is because they don't mean anything to me in a regular context. In plain English, a closure is the process or act of closing something, and what am I gonna close in JavaScript except for my editor when I get one too many &lt;code&gt;undefined is not a function&lt;/code&gt; errors?&lt;/p&gt;

&lt;p&gt;People have different ways of explaining what a closure is. The short version is that a closure is a function's ability to access variables that are defined outside of it. If we have a function B inside another function A, any variables that are defined in function A can be accessed by function B. That even includes variables that are defined &lt;em&gt;after&lt;/em&gt; function B.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; plus &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; equals &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;two&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above will log "1 plus 1 equals 2". This snippet calls function B inside of function A, so that function B executes whenever function A is called, such as in the last line.&lt;/p&gt;

&lt;p&gt;A useful attribute of closures is that they create variables that are private to a function. For example, the variable &lt;code&gt;one&lt;/code&gt; cannot be accessed outside of function A. This encourages us to declare variables only in the scope we need them in, and avoid unnecessary global variables.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#naming" class="anchor"&gt;
  &lt;/a&gt;
  Naming
&lt;/h2&gt;

&lt;p&gt;Now that we understand what closures are, why did they choose to call them that? Some people say that function A &lt;em&gt;closes over&lt;/em&gt; function B, since it is effectively protecting it from being read elsewhere in the code.&lt;/p&gt;

&lt;p&gt;And that's it for closures! But we can go a little bit further and relate them to two more concepts in JavaScript that are very closely related: higher order functions and lexical scope.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#higher-order-functions" class="anchor"&gt;
  &lt;/a&gt;
  Higher order functions
&lt;/h2&gt;

&lt;p&gt;Most examples I've seen online will not look like the previous one, but will instead utilize higher order functions. A higher order function is a function that returns another function. Since higher order functions include outer and inner functions by definition, this means that every higher order function uses closures. However, not every function that has a closure is a higher order function, like we saw in the first example. The same snippet can be rewritten to use higher order functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; plus &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; equals &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;two&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, using &lt;code&gt;A()&lt;/code&gt; will return the body of function B, so we're using &lt;code&gt;A()()&lt;/code&gt; in order to execute function B.&lt;/p&gt;

&lt;p&gt;I'm using ES5 syntax but all of these concepts exist in ES6 as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; plus &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; equals &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;two&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lexical-scope" class="anchor"&gt;
  &lt;/a&gt;
  Lexical scope
&lt;/h2&gt;

&lt;p&gt;The other concept is lexical scope. I'm not even sure what lexical means, but in JavaScript, a function's scope starts from its opening curly bracket and ends with its closing bracket.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ebzLftn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7w41ol275dg2x9sgfg0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ebzLftn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7w41ol275dg2x9sgfg0.png" alt="Code example showing local and lexical scopes of functions A and B"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The innermost white bracket in the image is the local scope of function B. The middle red bracket is the local scope of function A, and the identical green line is the &lt;em&gt;lexical&lt;/em&gt; scope of function B. &lt;/p&gt;

&lt;p&gt;That's because the lexical scope of a function is the function's own local scope plus the local scope of its surrounding function(s). This means that the local scope of an outer function equals the lexical scope of an inner function. &lt;/p&gt;

&lt;p&gt;Now we can rewrite our definition of closures from &lt;em&gt;a function's ability to access variables declared outside of it&lt;/em&gt; to &lt;em&gt;a function's ability to access variables in its lexical scope&lt;/em&gt;. Some definitions even equate a closure with the function's lexical scope.&lt;/p&gt;

&lt;p&gt;Every function has a closure and lexical scope, even if it doesn't have a visible outer function. For instance, in front-end JavaScript, any function that you write has access to the global &lt;code&gt;window&lt;/code&gt; variable because it's in its lexical scope.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr" class="anchor"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A closure is a function's ability to access variables declared outside of it (or in its lexical scope)&lt;/li&gt;
&lt;li&gt;By definition, all higher order functions use closures&lt;/li&gt;
&lt;li&gt;Lexical scope of a function is the function's local scope plus the local scope of any surrounding functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading! Until next time üëã&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/@pawel_czerwinski?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Pawe≈Ç Czerwi≈Ñski&lt;/a&gt; on Unsplash&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
