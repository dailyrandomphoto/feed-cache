<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Laravel Password Validation - Arr::whereNotNull() method</title>
      <author>Morcos Gad</author>
      <pubDate>Mon, 13 Dec 2021 08:52:42 +0000</pubDate>
      <link>https://dev.to/morcosgad/laravel-password-validation-arrwherenotnull-method-27k8</link>
      <guid>https://dev.to/morcosgad/laravel-password-validation-arrwherenotnull-method-27k8</guid>
      <description>&lt;p&gt;Let's get started quickly with Password Validation here to make Password more powerful&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
 &lt;span class="s1"&gt;'password'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'required'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'confirmed'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Rules\Password&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;mixedCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can enforce specific rules when validating user-supplied passwords by using the  method. It includes options for requiring letters, numbers, symbols, and more :-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VRSpXhLM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7n0mv2m8xxqjzua7zxhx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VRSpXhLM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7n0mv2m8xxqjzua7zxhx.jpg" alt="Password::defaults" width="880" height="1095"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Arr::whereNotNull() method which filters out null values from an array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Arr&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;whereNotNull&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]]);&lt;/span&gt;
&lt;span class="c1"&gt;// returns [0, false, '', []]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Source :- &lt;a href="https://www.youtube.com/watch?v=_TlQPp-dG1k"&gt;https://www.youtube.com/watch?v=_TlQPp-dG1k&lt;/a&gt;&lt;br&gt;
I hope you enjoyed the code.&lt;/p&gt;

</description>
      <category>php</category>
      <category>laravel</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Difference between Python and Node.js</title>
      <author>Krishlee</author>
      <pubDate>Mon, 13 Dec 2021 08:49:18 +0000</pubDate>
      <link>https://dev.to/itsmekrishlee/difference-between-python-and-nodejs-5ein</link>
      <guid>https://dev.to/itsmekrishlee/difference-between-python-and-nodejs-5ein</guid>
      <description>&lt;p&gt;*&lt;em&gt;An In-Depth Comparison of Node.js vs Python: *&lt;/em&gt;&lt;br&gt;
Let us dive into the comparison between Node.js and Python in three significant areas that plays a crucial role in App’s flawless functioning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speed:-&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Node.js interprets JavaScript code with the V8 engine and executes it outside the web browser. This results in the impressive speed of the App as well as being more resource-efficient. Further, its event-driven non-blocking architecture allows several requests to be processed at the same time. However, Python is single-flow, and comparatively the request processing time is high. And, unlike node.js, Python is not suitable for applications that require a lot of complex calculations. Therefore, we can conclude Node.js wins this segment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comparasion of Nod.js Vs PythonLibraries:-&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Node.js has millions of packages that make the work of &lt;a href="https://www.softsuave.com/hire-nodejs-developers"&gt;Node.js developers&lt;/a&gt; easy and streamlined.&lt;/p&gt;

&lt;p&gt;NPM (Node Package Manager) manages these libraries and packages. It is worth highlighting that NPM is the largest ecosystem of all open-source libraries and is cost-free to use. Some of the notable NPM packages are,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Express&lt;/li&gt;
&lt;li&gt;Lodash&lt;/li&gt;
&lt;li&gt;Async&lt;/li&gt;
&lt;li&gt;Moment&lt;/li&gt;
&lt;li&gt;Passport&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alternatively, Python also enjoys pip (Pip Installs Python) which is reliable, trustworthy, fast, and &lt;a href="https://www.softsuave.com/hire-python-developers"&gt;Python developers&lt;/a&gt; can use them to fasten the development. This package installer includes powerful Python packages like,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scikit- learn&lt;/li&gt;
&lt;li&gt;Pipenv&lt;/li&gt;
&lt;li&gt;Numpy&lt;/li&gt;
&lt;li&gt;Pandas&lt;/li&gt;
&lt;li&gt;Matplotlib&lt;/li&gt;
&lt;li&gt;OpenCV Python&lt;/li&gt;
&lt;li&gt;Keras&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Looking for Python Developers? Contact Soft Suave&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Scalability:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Node.js encourages lightweight communication and fast execution for each process. So, it enhances the scaling of multiple microservices. Furthermore, scalability is one of the core characteristics of Node.js. Hence, the impact of Node.js developers in developing applications that can scale both horizontally and vertically is comparatively greater than Python experts. Another interesting feature is Node.js has a built-in module cluster. This helps to implement the cloning strategy on a single server faster. Now, coming to Python, this language is not known for good scalability due to its slower execution. Moreover, it uses Global Interpreter Lock (GIL) that prevents multithreading.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Node.js vs Python: Which is Better?&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;A technology’s popularity plays a vital role in whether it’ll be used for your project. We can easily find skilled developers for popular languages or runtime environments. We should note that Node.js has an excellent reputation in industries that includes Computers Electronics, Technology, Lifestyle, Arts &amp;amp; Entertainment. On the other hand, companies from industries like Science, Education, Engineering prefer Python for its great speed and performance.&lt;/p&gt;

&lt;p&gt;Based on the stack overflow 2021 survey, Python secures third place on the list of most popular programming, scripting, and markup languages, whereas Node.js is placed sixth.&lt;/p&gt;

&lt;p&gt;Both the technologies have strong community support. The active programming communities of Node.js offer various tutorials, videos, and modules. Whereas, Python also has an active community with millions of developers. However, Python has a larger community as it entered the technical field way earlier than Node.js.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When to use Node.js over Python – Use Cases:&lt;/strong&gt;&lt;br&gt;
Since Node.js enjoys event-based architecture, Apps that require numerous concurrent requests, heavy client-side rendering can be built effortlessly. Additionally, Node.js allows frequent shuffling of data from a client to a server. These attributes make it a perfect choice for,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IoT solutions&lt;/li&gt;
&lt;li&gt;Real-time chatbots&lt;/li&gt;
&lt;li&gt;Messengers&lt;/li&gt;
&lt;li&gt;JSON API-based applications&lt;/li&gt;
&lt;li&gt;Complex single-page Apps.&lt;/li&gt;
&lt;li&gt;Streaming platforms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.softsuave.com/nodejs-development-company"&gt;Node.js App development&lt;/a&gt; is supported by a single-threaded event loop model, hence it can handle multiple clients at the same time. On the flip side, this programming language is not recommended for applications that require a lot of CPU resources.&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;When to use Python over Node.js – Use Cases: *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Python is full-stack, hence, it can support both backend and &lt;a href="https://www.softsuave.com/hire-frontend-application-developer"&gt;frontend development&lt;/a&gt;. Plus, it is cross-platform and suitable for small as well as large web projects. Besides, it enhances data analysis, visualization and is suitable for following,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data science apps&lt;/li&gt;
&lt;li&gt;Voice and face recognition systems&lt;/li&gt;
&lt;li&gt;Image-processing software&lt;/li&gt;
&lt;li&gt;Neural networks&lt;/li&gt;
&lt;li&gt;Machine learning systems&lt;/li&gt;
&lt;li&gt;3D modeling software and gamesApp.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To know more difference between Node.js VS Python, Visit : &lt;a href="https://www.softsuave.com/blog/node-js-vs-python-which-is-the-best-technology-for-web-app/"&gt;https://www.softsuave.com/blog/node-js-vs-python-which-is-the-best-technology-for-web-app/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>python</category>
      <category>productivity</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>Everything about Automation in Python: PC, Mobile, Web, Raspberry Pi</title>
      <author>Yash Makan</author>
      <pubDate>Mon, 13 Dec 2021 08:48:07 +0000</pubDate>
      <link>https://dev.to/yash_makan/everything-about-automation-in-python-pc-mobile-web-raspberry-pi-4cgh</link>
      <guid>https://dev.to/yash_makan/everything-about-automation-in-python-pc-mobile-web-raspberry-pi-4cgh</guid>
      <description>&lt;p&gt;Hi developers I am Yash Makan and today we are going to talk about automation. This will be a complete guide for automating tasks on different devices like mobile, PC and web etc. So if you are  a beginner or an expert in this automation field you'll surely learn something.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;What is Automation?&lt;/li&gt;
&lt;li&gt;Types of Automation in Python

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Software Automation&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;PC&lt;/li&gt;
&lt;li&gt;Web&lt;/li&gt;
&lt;li&gt;Mobile&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Hardware Automation&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Raspberry Pi&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Template Matching

&lt;ul&gt;
&lt;li&gt;What is Template Matching?&lt;/li&gt;
&lt;li&gt;How does it work and how to achieve template matching in Python?&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Automating PC 💻

&lt;ul&gt;
&lt;li&gt;Tools &amp;amp; Libraries

&lt;ul&gt;
&lt;li&gt;PyAutoGui&lt;/li&gt;
&lt;li&gt;OS &amp;amp; Subprocess&lt;/li&gt;
&lt;li&gt;File Management &amp;amp; shutil&lt;/li&gt;
&lt;li&gt;Template Matching&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;.pyw to run files in the background&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Automating Web 🕸

&lt;ul&gt;
&lt;li&gt;Tools &amp;amp; Libraries

&lt;ul&gt;
&lt;li&gt;requests&lt;/li&gt;
&lt;li&gt;beautifulsoup&lt;/li&gt;
&lt;li&gt;selenium&lt;/li&gt;
&lt;li&gt;asyncio &amp;amp; concurrent.futures&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Automating Mobile 📱

&lt;ul&gt;
&lt;li&gt;Tools

&lt;ul&gt;
&lt;li&gt;ADB&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;How to automate android phones using ADB?&lt;/li&gt;
&lt;li&gt;What can you automate?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;li&gt;Contact Me

&lt;ul&gt;
&lt;li&gt;Website&lt;/li&gt;
&lt;li&gt;Twitter&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--przBAY70--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2r776es3vcrvae0nibfh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--przBAY70--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2r776es3vcrvae0nibfh.png" alt="Introduction" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Humans can perform a lot of things that computers aren't very adept at yet. Exercising rigorous critical and contextual judgement, for example, or practising empathy. Computers, on the other hand, are fantastic at accomplishing things that we either can't or wouldn't want to do because of their consistency, accuracy, and rapid-fire speed. As an example, consider the performance of repeated, time-consuming tasks. We like to be challenged and rewarded for doing complex things that allow us to grow and improve in our skill sets. In general, we don't like plugging the same numbers into a spreadsheet over and over again. This is one of the best examples of a profitable co-working relationship between humans and computers. Using a programming language such as Python, we can automate the completion of repetitive operations in an efficient and effective manner.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q5gKr1BP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zz2pdmr1kbun50ik7oh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q5gKr1BP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zz2pdmr1kbun50ik7oh.png" alt="What is Automation" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-automation"&gt;
  &lt;/a&gt;
  What is Automation?
&lt;/h2&gt;

&lt;p&gt;You might have some idea of what these names refer to, but it’s always good to brush up your knowledge with a more substantial definition.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Automation&lt;/strong&gt;: A process in which a manually performed action is transformed into one that happens automatically.&lt;/p&gt;

&lt;p&gt;In our case a program, allows the task to be completed autonomously, on its own, without the need for user participation. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QOFhvr_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kba13m5szhiphtggt2jf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QOFhvr_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kba13m5szhiphtggt2jf.png" alt="Types of Automation" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-automation-in-python"&gt;
  &lt;/a&gt;
  Types of Automation in Python
&lt;/h2&gt;

&lt;p&gt;Mainly there are two types of automation programs,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Software Automation&lt;/strong&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;PC&lt;/strong&gt; - Automation scripts on the PC are very useful. These usually don't require any external library to be installed. You can automate files management and even turn your pc into a mini Jarvis of your own, creating shortcuts and commands to shorten the time on repetitive daily tasks. Some examples of automating in PC includes

&lt;ol&gt;
&lt;li&gt;File Creation: Filling out PDFs and Excel files&lt;/li&gt;
&lt;li&gt;File Conversion: Converting image files&lt;/li&gt;
&lt;li&gt;Performing quick math equations&lt;/li&gt;
&lt;li&gt;Game Automation: Python can play games for you like GTA or watchdogs&lt;/li&gt;
&lt;li&gt;Bulk file renaming and sorting etc.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Web&lt;/strong&gt; - You can automate the web using some libraries like requests, Beautiful Soup🥣, Selenium and much more. You can do a lot of things and web automation is a must know as this will help you in any career. Here are some ideas you can create on web automation

&lt;ol&gt;
&lt;li&gt;Email Automation: make a bot that can read emails and send messages when you are at work or delete email or spam mail...&lt;/li&gt;
&lt;li&gt;Bot Automation: create a bot for Twitter, Instagram. This bot can like your friend's messages or even reply to them. You can create a discord bot for your server. &lt;/li&gt;
&lt;li&gt;Trading: you can even create a trading program that can trade stocks, forex or even crypto for you. isn't this cool!&lt;/li&gt;
&lt;li&gt;There's much more you can do like news, weather, lyrics scraper programs&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Mobile&lt;/strong&gt; - Many of you guys don't know but you can even automate your mobile phones using python. Here I am talking specifically about android phones, not iPhones. You can use tools like ADB(Android Debug Bridge) to control your android phones using python and automate stuff. You can automate things like

&lt;ol&gt;
&lt;li&gt;Game Automation: Python playing temple run, subway surfer or even PUBG or COD. you just call it😮.&lt;/li&gt;
&lt;li&gt;Sending WhatsApp messages automatically&lt;/li&gt;
&lt;li&gt;SMS Automation: Send good morning messages to your relatives or even send birthday wishes early without remembering. 🐍 I got you covered bro!&lt;/li&gt;
&lt;li&gt;Any other you can imagine or any gesture like swipe, clicking you can make using python ADB automation and automate anything&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Hardware Automation&lt;/strong&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Raspberry Pi&lt;/strong&gt; - This is a little different. Raspberry pi is a little computer where you can connect servos, smart devices like lights, TV etc and control using gestures or even voice. Some cool projects ideas with raspberry pi can be

&lt;ol&gt;
&lt;li&gt;IoT Home Automation: Control lights, TV using voice command, gestures etc.&lt;/li&gt;
&lt;li&gt;Surveillance Camera with face recognition to open doors&lt;/li&gt;
&lt;li&gt;Weather station to detect rain or sunny weather. You can even predict the weather with prediction models LSTM, KNN etc&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;I am not writing about hardware automation in this article but if you are interested then do let me know in the discussion below... 🙂&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#template-matching"&gt;
  &lt;/a&gt;
  Template Matching
&lt;/h2&gt;

&lt;p&gt;It is very important to discuss template matching before explaining automation in different devices as template matching reduces many problems which usually occur while developing automated tasks. It is mainly used in automating mobile and PC. So first learn what is template matching,&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-template-matching"&gt;
  &lt;/a&gt;
  what is Template Matching?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Template matching:&lt;/strong&gt; is a technique in digital image processing for finding small parts of an image which match a template image. It can be used in manufacturing as a part of quality control, a way to navigate a mobile robot, or as a way to detect edges in images. &lt;br&gt;
&lt;em&gt;source: Wikipedia&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you are confused by the definition of template matching above then don't worry I am going to explain this in deep. To understand this let's take an example, &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---lLOoJDz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3b48jlt35molj41ruc9c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---lLOoJDz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3b48jlt35molj41ruc9c.png" alt="Template Matching 1" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I gave you a task to write a python script where the program will open the notepad and start writing a predefined text.&lt;/p&gt;

&lt;p&gt;Suppose your notepad application is located on your desktop screen on (100, 130) So you made a program to click on 100, 130 and then write the text&lt;/p&gt;

&lt;p&gt;what do you think is this approach correct? what if you change the location of your notepad application later to (500, 100). will the program still work?&lt;/p&gt;

&lt;p&gt;The answer is no. We need a universal way to open the application from the desktop, if even the user changes the location the program still automatically detects its location and click. To achieve this so that the computer can automatically detect and recognize the icon of the notepad is known as template matching.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-it-work-and-how-to-achieve-template-matching-in-python"&gt;
  &lt;/a&gt;
  How does it work and how to achieve template matching in Python?
&lt;/h3&gt;

&lt;p&gt;Let's understand this without code first. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RKlifhfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lz0sp18xito67tzrv3ge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RKlifhfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lz0sp18xito67tzrv3ge.png" alt="Template Matching 2" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here as you can see in the image there are two images sample_image &amp;amp; target_image. What we are going to do is search pixel-by-pixel in sample_image about target_image. If target_image is present in the sample_image then the function will return the (x,y) of the target_image i.e the notepad application. Then we will click on the specific location. This is how template matching works. Let's also see the python code to achieve the same we discussed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cv2&lt;/span&gt; &lt;span class="c1"&gt;# pip install opencv-python
&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sample_image&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# read screenshot image
&lt;/span&gt;    &lt;span class="n"&gt;img_rgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sample_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# convert BGR to grayscale image
&lt;/span&gt;    &lt;span class="n"&gt;img_gray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cvtColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img_rgb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COLOR_BGR2GRAY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# read target image
&lt;/span&gt;    &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# extracting height and width of target image
&lt;/span&gt;    &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[::]&lt;/span&gt;
    &lt;span class="c1"&gt;# template match using cv2
&lt;/span&gt;    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matchTemplate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img_gray&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TM_SQDIFF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# extract top_left position of target image in screenshot image
&lt;/span&gt;    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;top_left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minMaxLoc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# calculating the bottom right position of target image
&lt;/span&gt;    &lt;span class="n"&gt;bottom_right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top_left&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;top_left&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# calculating x, y postion
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top_left&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;bottom_right&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top_left&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;bottom_right&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="n"&gt;sample_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;take_screenshot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# sample_image.png
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"target_image.png"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;target_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sample_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! now you know what template matching is, how does it work and how to code it in python. Let's continue ahead...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automating-pc"&gt;
  &lt;/a&gt;
  Automating PC 💻
&lt;/h2&gt;

&lt;p&gt;Alright, now we will be discussing automating things on your PC. The tools/libraries that can be used for automating tasks in PC are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://pyautogui.readthedocs.io/en/latest/"&gt;PyAutoGUI&lt;/a&gt;: PyAutoGUI is an amazing library created by asweigart. This library has multiple features like clicking, taking screenshots, keystrokes, writing text etc. This tool is a must-have if you developing an automation script for PC. It is compatible with windows, mac &amp;amp; ubuntu.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;pip install pyautogui&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.python.org/3/library/os.html"&gt;os&lt;/a&gt; &amp;amp; &lt;a href="https://docs.python.org/3/library/subprocess.html"&gt;subprocess&lt;/a&gt;: If you want to call os commands, retrieve output use external CLI with your program, delete a file, create file or folder. Then these two libraries are very important. You don't have to install them. These are pre-installed with python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;File management &amp;amp; &lt;a href="https://docs.python.org/3/library/shutil.html"&gt;shutil&lt;/a&gt;: If you are planning to use automation for file management then &lt;code&gt;open()&lt;/code&gt; is very important. It helps you read data from any file in bytes or as text and even lets you change, append or write any data. Moreover, you can use shutil which offers a number of high-level operations on files and collections of files. In particular, functions are provided which support file copying and removal.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Template Matching&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Fun Fact: You can create a .pyw file that runs in the background so if you want to make a program something like file sorting for your downloads folder then you can write the code in the .pyw file. You can also make this .pyw file at the startup of your machine so that you don't have to run the python file again &amp;amp; again.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#automating-web-%F0%9F%95%B8"&gt;
  &lt;/a&gt;
  Automating WEB 🕸
&lt;/h2&gt;

&lt;p&gt;Knowing to automate tasks on the web is very important. This will help you in a lot of times when you don't want to do some repetitive tasks or want to scrape some data from any website. The possibilities are endless. The tools and libraries required for web automation can be&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://docs.python-requests.org/en/latest/"&gt;requests&lt;/a&gt;: Requests library is used to send requests using methods like GET, POST, PUT etc. Using this library can be used to extract HTML, JSON, XML data from any website URL. This is a very basic package and you will be using this library in one way or another. I would like to tell you that this library is not available with python. You have to install using&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;pip install requests&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://beautiful-soup-4.readthedocs.io/en/latest/"&gt;BeautifulSoup&lt;/a&gt;: This library is also very important and lets you pull data from HTML and XML files. It helps to parse the HTML file and can find any tag by id, class, XPath, CSS etc. This library can be installed by using&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;pip install beautifulsoup4&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://selenium-python.readthedocs.io/"&gt;Selenium&lt;/a&gt;: This library is very powerful. It lets you access the web like a user. The features of selenium are typing in input fields, clicking buttons, switching tabs, taking screenshots, downloading files, executing javascript and much more. It is used for little complex automation projects. Selenium uses webdriver and can run on different browsers like chrome, firefox, safari etc. Also, selenium can run headless meaning the browser window can be hidden from the user. You can install selenium using&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;pip install selenium&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://webbot.readthedocs.io/en/latest/"&gt;webbot&lt;/a&gt;: This library is developed using selenium. The only point is that selenium is a little complex with id, class, CSS &amp;amp; XPath selectors. Unlike selenium using webbot is extremely easy. You can install webbot using&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;pip install selenium&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;webdriver: As I have told you earlier webbot and selenium depends on webdriver of chrome, firefox, safari or any other browser.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#automating-mobile"&gt;
  &lt;/a&gt;
  Automating Mobile 📱
&lt;/h2&gt;

&lt;p&gt;I think most of you don't know but you can also automate tasks on your mobile phone using python. There is no such library but you have to install ADB.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://developer.android.com/studio/command-line/adb"&gt;ADB&lt;/a&gt;: ADB(Android Debug Bridge) is a command-line tool that lets you communicate with android devices.*&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#how-to-automate-android-phones-using-adb"&gt;
  &lt;/a&gt;
  How to automate android phones using ADB?
&lt;/h3&gt;

&lt;p&gt;To automate android phones with python you have to install ADB from here. After installation, we can start writing code in python.&lt;/p&gt;

&lt;p&gt;Let's First import the dependencies we will be using, as told earlier we are importing subprocess to call ADB command-line tool.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we will be assigning a function called &lt;code&gt;ADB&lt;/code&gt; in which the user will pass the os command and the function will return output from the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;adb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;proc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-can-you-automate"&gt;
  &lt;/a&gt;
  What can you automate?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;I have already created a gist for you if you want to access the ADB code. You can find the gist &lt;a href="https://gist.github.com/YashMakan/8dbbde4735bdbb534682233f3d3c6b58"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Swipe Gesture&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;swipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;duration_ms&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;adb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"adb shell input swipe {} {} {} {} {}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;duration_ms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clicking&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tap_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tap_y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;adb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"adb shell input tap {} {}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tap_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tap_y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Take Screenshots&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;take_screenshot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;final&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;adb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"adb exec-out screencap -p &amp;gt; ./images/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;final&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;.png"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send SMS&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_sms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;adb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'adb shell am start -a android.intent.action.SENDTO -d sms:&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; --es  sms_body "&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;" --ez exit_on_sent true'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calling&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;adb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"adb shell am start -a android.intent.action.CALL -d tel:&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download File from phone to PC&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;adb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"adb pull &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;output_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#/sdcard/xxx.mp4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove Dir&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;adb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"adb shell rm &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#/sdcard/...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ScreenRecord&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;screen_record&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;adb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"adb shell screenrecord /sdcard/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; --time-limit &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"/sdcard/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"./mobile/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"/sdcard/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Power On/Off&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;switch_phone_on_off&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;adb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"adb shell input keyevent 26"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keyevents (list of keyevent codes &lt;a href="https://stackoverflow.com/a/8483797/10566556"&gt;here&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;keyevent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;adb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"adb shell input keyevent &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send whatsapp message&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_whatsapp_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;adb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'adb shell am start -a android.intent.action.VIEW -d "https://api.whatsapp.com/send?phone=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;adb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ping 127.0.0.1 -n 2 &amp;gt; nul'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;adb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'adb shell input text "&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;adb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'adb shell keyevent 22'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;adb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'adb shell keyevent 22'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;adb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'adb shell input keyevent 22'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;adb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'adb shell input keyevent 22'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;adb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'adb shell input keyevent 66'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Template Matching: You can use template matching to detect icon location and position by taking a screenshot and then clicking. If you don't know template matching then I've explained that earlier in this blog.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I would like to conclude this article by saying possibilities are endless. You can automate anything you imagine if it's for your PC, mobile or for the web. I hope you like my article, if yes! then make sure to hit the ❤ icon below and also don't forget to 🔖 bookmark. If you are having trouble with anything then do let me know in the discussion below and also If you have any specific topic for my next blog then do let me know. I will add that to my bucket list 📒 as well. You can also follow me on &lt;a href="https://twitter.com/Yash_Makan"&gt;twitter&lt;/a&gt; to get notified about my blogs. With that being said I will hope to see you again. Till then b-bye!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4y5n1K-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/TfFDiw5gBuEns4ykJl/giphy.gif%3Fcid%3D790b7611431abc7a85c76da6c399a5727f24e501f9a5cae9%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4y5n1K-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/TfFDiw5gBuEns4ykJl/giphy.gif%3Fcid%3D790b7611431abc7a85c76da6c399a5727f24e501f9a5cae9%26rid%3Dgiphy.gif%26ct%3Dg" alt="https://media4.giphy.com/media/TfFDiw5gBuEns4ykJl/giphy.gif?cid=790b7611431abc7a85c76da6c399a5727f24e501f9a5cae9&amp;amp;rid=giphy.gif&amp;amp;ct=g" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contact-me"&gt;
  &lt;/a&gt;
  Contact Me
&lt;/h2&gt;

&lt;p&gt;Website: &lt;a href="http://yashmakan.co.in"&gt;yashmakan.co.in&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/Yash_Makan"&gt;@Yash_Makan&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>automation</category>
      <category>webdev</category>
      <category>mobile</category>
    </item>
    <item>
      <title>The Complete Roadmap for Becoming a Backend Developer: Step-By-Step Instructions</title>
      <author>Creative Tim</author>
      <pubDate>Mon, 13 Dec 2021 08:30:30 +0000</pubDate>
      <link>https://dev.to/creativetim_official/the-complete-roadmap-for-becoming-a-backend-developer-step-by-step-instructions-d4j</link>
      <guid>https://dev.to/creativetim_official/the-complete-roadmap-for-becoming-a-backend-developer-step-by-step-instructions-d4j</guid>
      <description>&lt;p&gt;Interested in becoming a backend developer? You’ve come to the right place. If you’ve got some coding experience but are new to programming, this guide will teach you all about backend development. It can be overwhelming to learn everything at once, which is why we break it down into steps. This way, you can learn at your own pace and get help when you need it! &lt;/p&gt;

&lt;p&gt;As a new developer, it’s essential to know the basics before moving to more advanced topics. This roadmap will provide an overview of what you need to know as a beginner getting started with backend development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table Of Content&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#1-what-is-backend-development"&gt;1. What is backend development?&lt;/a&gt;&lt;br&gt;
&lt;a href="#2-why-learn-backend-development"&gt;2. Why learn backend development?&lt;/a&gt;&lt;br&gt;
&lt;a href="#3-how-to-get-started-with-backend-development"&gt;3. How to get started with backend development&lt;/a&gt;&lt;br&gt;
&lt;a href="#4-the-roadmap-for-beginners"&gt;4. The roadmap for beginners&lt;/a&gt;&lt;br&gt;
&lt;a href="#41-basicslearn-a-language-and-database"&gt;4.1 Basics - Learn a Language and Database&lt;/a&gt;&lt;br&gt;
&lt;a href="#42-intermediatelearn-a-backend-framework"&gt;4.2 Intermediate - Learn a backend Framework&lt;/a&gt;&lt;br&gt;
&lt;a href="#43-advancedapi-caching-security-and-testing"&gt;4.3 Advanced - Api, Caching, Security, and Testing&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="#5-extra-stuffgood-to-know"&gt;5. Extra Stuff - Good to know&lt;/a&gt;&lt;br&gt;
&lt;a href="#6-next-steps"&gt;6. Next Steps&lt;/a&gt;&lt;br&gt;
&lt;a href="#7-conclusion"&gt;7. Conclusion&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-what-is-backend-development"&gt;
  &lt;/a&gt;
  1. What is backend development?
&lt;/h2&gt;

&lt;p&gt;Backend developers handle the code on the “back-end” of websites. This means that the server communicates with the database to store and retrieve information. To create a website, most of your code will be written in HTML, CSS, and JavaScript. Most people don’t know that this code is what makes your website responsive or interactive. In addition, developers use backend code to program actions on the server.&lt;/p&gt;

&lt;p&gt;For example, if you want to send an email when someone registers for your company’s newsletter, backend developers will write the code to accomplish this task. They may use PHP or Python to write the code for your website.&lt;br&gt;
Another way backend developers can help you is by optimizing the performance of your website. They can also maintain your database, write scripts in languages like Bash, and work with data. If you want to become a backend developer, these are just some of the skills you’ll need to know.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-why-learn-backend-development"&gt;
  &lt;/a&gt;
  2. Why learn backend development?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eV53WLPk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1467232004584-a241de8bcf5d%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D2669%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eV53WLPk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1467232004584-a241de8bcf5d%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D2669%26q%3D80" alt="Learn Backend Development" width="880" height="588"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to be a developer, it’s a good idea to have various skills under your belt. For example, some developers only work on the frontend, some only do the backend, and a few do a bit of both.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Backend development is an important part of programming because it’s the server-side of the process.&lt;/strong&gt; Therefore, you need to know how to write code to handle the frontend requests and communicate with databases to store data.&lt;/p&gt;

&lt;p&gt;In many cases, backend developers need to understand how clients talk to servers and vice-versa, as well as how information is stored and retrieved from databases. Plus, you still need to know the basics of programming languages.&lt;/p&gt;

&lt;p&gt;So if you’re interested in backend development, &lt;strong&gt;you’ll need a solid understanding of HTML and CSS before moving on.&lt;/strong&gt; This will ensure that you have a good foundation in front end development as well. You don’t want to spend all your time learning back-end development when your knowledge is limited.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-how-to-get-started-with-backend-development"&gt;
  &lt;/a&gt;
  3. How to get started with backend development
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qMaiN7mC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1518770660439-4636190af475%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D2670%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qMaiN7mC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1518770660439-4636190af475%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D2670%26q%3D80" alt="Get Started Backend Dev" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It can be overwhelming to learn everything at once, which is why we break it down into steps. This way, you can learn at your own pace and get help when you need it! So if you’ve never coded before, don’t worry! We’ve got you covered with the basics.&lt;/p&gt;

&lt;p&gt;Here are some key areas you need to know before you start working with backend development:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#internet"&gt;
  &lt;/a&gt;
  Internet
&lt;/h3&gt;

&lt;p&gt;a. How does the Internet work?&lt;br&gt;&lt;br&gt;
b. What is HTTP?&lt;br&gt;&lt;br&gt;
c. How do browsers work?&lt;br&gt;&lt;br&gt;
d. What is a domain and how does it work?&lt;br&gt;&lt;br&gt;
e. What is hosting?&lt;br&gt;&lt;br&gt;
f. DNS and how it works?  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontend-basics"&gt;
  &lt;/a&gt;
  Frontend Basics
&lt;/h3&gt;

&lt;p&gt;a. HTML Knowledge&lt;br&gt;&lt;br&gt;
b. Basics CSS/SCSS Knowledge&lt;br&gt;&lt;br&gt;
c. Basics Javascript Knowledge&lt;br&gt;&lt;br&gt;
d. CSS frameworks and JS frameworks basics  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#os-and-general-knowledge"&gt;
  &lt;/a&gt;
  OS and General Knowledge
&lt;/h3&gt;

&lt;p&gt;a. Terminal Usage&lt;br&gt;&lt;br&gt;
b. Memory Management&lt;br&gt;&lt;br&gt;
c. Process Management&lt;br&gt;&lt;br&gt;
d. Thread and Concurrency&lt;br&gt;&lt;br&gt;
e. Basic Terminal Commands&lt;br&gt;&lt;br&gt;
f. Version Control System (Git)  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-the-roadmap-for-beginners"&gt;
  &lt;/a&gt;
  4. The roadmap for beginners
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LbmJYJpq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1531403009284-440f080d1e12%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D2670%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LbmJYJpq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1531403009284-440f080d1e12%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D2670%26q%3D80" alt="Roadmap Backend" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a beginner, you’ll need to make sure you understand the fundamentals before moving on to more advanced topics. For example, it’s essential to know how to code before you learn how to make a REST API call.&lt;/p&gt;

&lt;p&gt;It’s also important to understand how an application is structured. &lt;strong&gt;The frontend deals with the UI, while the backend deals with the logic.&lt;/strong&gt; The frontend is what users interact with, while the backend is what creates the code behind it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.creative-tim.com/blog/educational-tech/frontend-developer-roadmap/?ref=devto"&gt;Extra Resource: The Front-end Developer Roadmap - How to Become One&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This may sound confusing, but it’s actually pretty straightforward. Think of it this way: the frontend is the person wearing the suit, while the backend is the person who makes all of the clothes. The frontend makes sure everything looks good on the outside, while the backend is making sure everything looks good on the inside.&lt;/p&gt;

&lt;p&gt;The roadmaps for each section are designed to help you understand what you should be focusing on. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#41-basics-learn-a-language-and-database"&gt;
  &lt;/a&gt;
  4.1 Basics - Learn a Language and Database
&lt;/h3&gt;

&lt;p&gt;A backend developer must learn a programming language to improve their coding skills. We start with the basics of a programming language: syntax, variables, data types, functions, objects, and execution. Besides these things, make sure to learn its quirks (Core details about its runtime e.g. concurrency, memory model).&lt;/p&gt;

&lt;p&gt;Among the most used programming languages for the backend part of an application are:&lt;/p&gt;

&lt;p&gt;a. Javascript&lt;br&gt;&lt;br&gt;
b. PHP&lt;br&gt;&lt;br&gt;
c. Python&lt;br&gt;&lt;br&gt;
d. Ruby&lt;br&gt;&lt;br&gt;
d. C#  &lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;database&lt;/strong&gt; is an organized collection of structured information, or data, typically stored electronically in a computer system. There are two major categories of database: SQL and NoSQL. SQL databases are table-based, while NoSQL databases are document, key-value, graph, or wide-column stores.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SQL Databases&lt;/strong&gt;:&lt;br&gt;&lt;br&gt;
a. PostgreSQL&lt;br&gt;&lt;br&gt;
b. MySQL&lt;br&gt;&lt;br&gt;
c. Oracle  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NoSQL Databases&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
a. Firebase&lt;br&gt;&lt;br&gt;
b. MongoDB&lt;br&gt;&lt;br&gt;
c. Cassandra&lt;br&gt;&lt;br&gt;
d. InfluxDB  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#42-intermediate-learn-a-backend-framework"&gt;
  &lt;/a&gt;
  4.2 Intermediate - Learn a backend Framework
&lt;/h3&gt;

&lt;p&gt;To be able to develop backend applications faster, frameworks have been developed over each programming language.&lt;/p&gt;

&lt;p&gt;a. &lt;strong&gt;Node.js&lt;/strong&gt; is a runtime environment that allows software developers to launch both the frontend and backend of web apps using JavaScript.&lt;br&gt;
b. &lt;strong&gt;Laravel&lt;/strong&gt; is considered as one of the best PHP frameworks for web application development. It helps build wonderful apps using an expressive but simple syntax.&lt;br&gt;
c. &lt;strong&gt;Django&lt;/strong&gt; is a collection of Python libs allowing you to quickly and efficiently create a quality Web application and is suitable for both frontend and backend.&lt;br&gt;
d. &lt;strong&gt;Rails or Ruby on Rails&lt;/strong&gt;, is an open-source framework based on the Ruby programming language. Using RoR, developers don’t have to rewrite every single piece of code in the process of web application development. &lt;br&gt;
e. &lt;strong&gt;ASP.NET&lt;/strong&gt; is a web application framework developed and marketed by Microsoft to allow programmers to build dynamic websites. It allows you to use a full-featured programming language such as C#  to build web applications easily.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#43-advanced-api-caching-security-and-testing"&gt;
  &lt;/a&gt;
  4.3 Advanced - Api, Caching, Security, and Testing
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;API&lt;/strong&gt; is the acronym for Application Programming Interface, which is a software intermediary that allows two applications to talk to each other. Backend developers use APIs to create connections between different applications or services to improve user experience through the frontend. Some of the APIs you should know about are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;REST
&lt;/li&gt;
&lt;li&gt;JSON
&lt;/li&gt;
&lt;li&gt;SOAP
&lt;/li&gt;
&lt;li&gt;GSON
&lt;/li&gt;
&lt;li&gt;XML-RPC
&lt;/li&gt;
&lt;li&gt;AES
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;A cache&lt;/strong&gt; is a high-speed data storage tier that stores a subset of data, usually transient in nature so that future requests for that data can be served faster than is possible by accessing the primary location of the data. Caching allows you to reuse previously retrieved or computed data efficiently. There are three types of caching: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CDN&lt;/li&gt;
&lt;li&gt;Server Side&lt;/li&gt;
&lt;li&gt;Client Side&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Web Secutiry Knowledge&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTPS&lt;/li&gt;
&lt;li&gt;SSL&lt;/li&gt;
&lt;li&gt;CORS&lt;/li&gt;
&lt;li&gt;Hashing Algorithms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Backend Testing&lt;/strong&gt; is a testing method that checks the server-side or database of web applications or the software. Some of the testings you should know about are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integration Testing&lt;/li&gt;
&lt;li&gt;Unit Testing&lt;/li&gt;
&lt;li&gt;Functional Testing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-extra-stuff-good-to-know"&gt;
  &lt;/a&gt;
  5. Extra stuff - Good to know
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lQZSmLwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1503437313881-503a91226402%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D3432%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lQZSmLwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1503437313881-503a91226402%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D3432%26q%3D80" alt="Good to know" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Continuous integration&lt;/strong&gt; (CI) and &lt;strong&gt;continuous delivery&lt;/strong&gt; (CD) embody a culture, set of operating principles, and collection of practices that enable application development teams to deliver code changes more frequently and reliably.&lt;/p&gt;

&lt;p&gt;An &lt;strong&gt;Architectural Pattern&lt;/strong&gt;  is a general, reusable solution to a commonly occurring problem in software architecture within a given context. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt;  is indeed the most recommended tool for all developers. It is a containerization platform that allows you to create, deploy, and run applications without any hassle with the help of containers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Web Servers&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
The &lt;strong&gt;Apache&lt;/strong&gt;, or you can say Apache HTTP Server, is an open-source cross-platform web server that was developed by the Apache Software Foundation.&lt;br&gt;
&lt;strong&gt;NGINX&lt;/strong&gt; is another open-source web server that is also being used for reverse proxying, load balancing, caching, mail proxying, and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-next-steps"&gt;
  &lt;/a&gt;
  6. Next Steps
&lt;/h2&gt;

&lt;p&gt;After you've finished all these steps, it's time for practicing. You can do this through open-source projects or, we recommend you to get an entry job. This way you will gain experience easier with the help of your senior colleagues.&lt;/p&gt;

&lt;p&gt;For this, we've prepared a comprehensive guide on &lt;strong&gt;&lt;a href="https://www.creative-tim.com/blog/education/web-developer-portfolio-website/?ref=devto"&gt;How to Build Your First Web Developer Portfolio Website.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Also, another smart way to present yourself as a developer is by using your &lt;strong&gt;&lt;a href="https://www.creative-tim.com/blog/educational-tech/how-to-create-github-profile/?ref=devto"&gt;Github profile to create a fancy CV.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-conclusion"&gt;
  &lt;/a&gt;
  7. Conclusion
&lt;/h2&gt;

&lt;p&gt;Congratulations, you’ve reached the end of the frontend development roadmap! &lt;br&gt;
Becoming a web developer can be hard. It takes time, hard work, and persistence. You have to learn how to code, how to use specific frameworks, and even when you’ve mastered all of that there’s still much more to learn. &lt;/p&gt;

&lt;p&gt;Thankfully, you don’t have to do this alone! There are many resources out there, all aimed at helping you learn these skills in an organized manner. This is why we created this roadmap for becoming a backend developer. Prioritizing roadmaps ensures that you can make the most progress possible in the shortest amount of time.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>backend</category>
    </item>
    <item>
      <title>Ho ho Oh no! Where are my variables? </title>
      <author>Anders Björkland</author>
      <pubDate>Mon, 13 Dec 2021 08:13:13 +0000</pubDate>
      <link>https://dev.to/andersbjorkland/ho-ho-oh-no-where-are-my-variables-ogg</link>
      <guid>https://dev.to/andersbjorkland/ho-ho-oh-no-where-are-my-variables-ogg</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Just the Gist&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
A simple way of debugging is to use the built-in PHP function var_dump() to print out the contents of a variable. But it's not the only way to do it. Here's a short introduction to the basics of debugging in PHP.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#just-outputting-the-variable"&gt;
  &lt;/a&gt;
  Just outputting the variable
&lt;/h2&gt;

&lt;p&gt;If you want to debug you code, you may want to know what value a variable has at a specific point in your code. There are a few functions in PHP that can help you do that. &lt;code&gt;var_dump()&lt;/code&gt;, &lt;code&gt;var_export()&lt;/code&gt; and &lt;code&gt;print_r()&lt;/code&gt; are some of the functions you can use to do that. They do their work in slightly different manners:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;function&lt;/th&gt;
&lt;th&gt;input&lt;/th&gt;
&lt;th&gt;output&lt;/th&gt;
&lt;th&gt;return value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;var_dump&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;"1.1"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string(3) "1.1"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;var_dump&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;float(1.1)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;var_export&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;"1.1"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'1.1'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;optional&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;var_export&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;optional&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;print_r&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;"1.1"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;optional&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;print_r&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;optional&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;var_dump gives us the most information by providing us information about what type of variable it is, what the value and its type is. On the other hand, it is not as flexible as &lt;code&gt;var_export&lt;/code&gt; or &lt;code&gt;print_r&lt;/code&gt; if you want to store the output of the function somewhere, as it lacks a return value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging-with-a-trace"&gt;
  &lt;/a&gt;
  Debugging with a trace
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;debug_backtrace()&lt;/code&gt; is yet another function for debugging your code. It will get you a code trace of how you ended where you are. Here's an example of a simple "Hello Mark"-program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; 

&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hello"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;"Mark"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;debug_backtrace&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$greeting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Bark"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We get the following output when we run this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;array&lt;span class="o"&gt;(&lt;/span&gt;2&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;[&lt;/span&gt;0]&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  array&lt;span class="o"&gt;(&lt;/span&gt;4&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"file"&lt;/span&gt;&lt;span class="o"&gt;]=&amp;gt;&lt;/span&gt;
    string&lt;span class="o"&gt;(&lt;/span&gt;54&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"path&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;o&lt;/span&gt;&lt;span class="se"&gt;\f&lt;/span&gt;&lt;span class="s2"&gt;ile&lt;/span&gt;&lt;span class="se"&gt;\e&lt;/span&gt;&lt;span class="s2"&gt;xample.php"&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"line"&lt;/span&gt;&lt;span class="o"&gt;]=&amp;gt;&lt;/span&gt;
    int&lt;span class="o"&gt;(&lt;/span&gt;15&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"function"&lt;/span&gt;&lt;span class="o"&gt;]=&amp;gt;&lt;/span&gt;
    string&lt;span class="o"&gt;(&lt;/span&gt;5&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"hello"&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"args"&lt;/span&gt;&lt;span class="o"&gt;]=&amp;gt;&lt;/span&gt;
    array&lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="o"&gt;[&lt;/span&gt;0]&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      string&lt;span class="o"&gt;(&lt;/span&gt;4&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"Bark"&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;[&lt;/span&gt;1]&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  array&lt;span class="o"&gt;(&lt;/span&gt;4&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"file"&lt;/span&gt;&lt;span class="o"&gt;]=&amp;gt;&lt;/span&gt;
    string&lt;span class="o"&gt;(&lt;/span&gt;54&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"path&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;o&lt;/span&gt;&lt;span class="se"&gt;\f&lt;/span&gt;&lt;span class="s2"&gt;ile&lt;/span&gt;&lt;span class="se"&gt;\e&lt;/span&gt;&lt;span class="s2"&gt;xample.php"&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"line"&lt;/span&gt;&lt;span class="o"&gt;]=&amp;gt;&lt;/span&gt;
    int&lt;span class="o"&gt;(&lt;/span&gt;18&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"function"&lt;/span&gt;&lt;span class="o"&gt;]=&amp;gt;&lt;/span&gt;
    string&lt;span class="o"&gt;(&lt;/span&gt;8&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"sayHello"&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"args"&lt;/span&gt;&lt;span class="o"&gt;]=&amp;gt;&lt;/span&gt;
    array&lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first function is added to the stack, with the latest function call added on top. We can see that the function &lt;code&gt;hello&lt;/code&gt; was called with the argument "Bark" from line 15 in our code. That means that the function was called from the function &lt;code&gt;sayHello&lt;/code&gt;, which in turn was called from line 18. We got this trace because we had added the &lt;code&gt;debug_backtrace()&lt;/code&gt; to show how we ended up trying to greet someone not named "Mark".&lt;/p&gt;

&lt;p&gt;These are somewhat static ways of debugging. There are more interactive ways to do it too, with phpdbg or xdebug, or maybe a library such as Symfony Profiler.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-you"&gt;
  &lt;/a&gt;
  What about you?
&lt;/h2&gt;

&lt;p&gt;Are you using any of these functions to debug your code? Perhaps you use &lt;code&gt;echo&lt;/code&gt; statements instead? Is there a better way to debug the code, and how would you go about doing that? Comment below and let us know what you think ✍&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;PHP Manual on &lt;code&gt;debug_backtrace&lt;/code&gt;: &lt;a href="https://www.php.net/manual/en/function.debug-backtrace.php"&gt;https://www.php.net/manual/en/function.debug-backtrace.php&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Lightweight interactive debugger: &lt;a href="https://www.php.net/manual/en/intro.phpdbg.php"&gt;https://www.php.net/manual/en/intro.phpdbg.php&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Debugging with Xdebug: &lt;a href="https://xdebug.org/"&gt;https://xdebug.org/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Symfony Profiler: &lt;a href="https://symfony.com/doc/current/profiler.html"&gt;https://symfony.com/doc/current/profiler.html&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>php</category>
      <category>webdev</category>
    </item>
    <item>
      <title>C# QR Code Generator for .NET</title>
      <author>IronSoftware</author>
      <pubDate>Mon, 13 Dec 2021 08:04:28 +0000</pubDate>
      <link>https://dev.to/ironsoftware/c-qr-code-generator-for-net-2mi6</link>
      <guid>https://dev.to/ironsoftware/c-qr-code-generator-for-net-2mi6</guid>
      <description>&lt;p&gt;As you may have read in the Creating a Barcode introductory tutorial, creating, styling, and exporting barcodes as images with Iron Barcode is incredibly simple and may often be achieved in a single line of code.&lt;/p&gt;

&lt;p&gt;In this example, we will look more in depth at QR codes, which are becoming increasingly popular in industrial applications and also in retail.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-read-and-generate-qr-codes-in-c-follow-these-5-steps"&gt;
  &lt;/a&gt;
  How to Read and Generate QR Codes in C#: Follow these 5 Steps
&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Download QR code Generator Library&lt;/li&gt;
  &lt;li&gt;Create a QR code by adding one line of code&lt;/li&gt;
  &lt;li&gt;Add your logo to a QR code&lt;/li&gt;
  &lt;li&gt;Verify your QR code is Readable&lt;/li&gt;
  &lt;li&gt;Verify your QR code is Readable&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#install-qr-code-generator-library-in-c"&gt;
  &lt;/a&gt;
  Install QR Code Generator Library in C
&lt;/h2&gt;

&lt;p&gt;Before we start we need to install the &lt;strong&gt;BarCode&lt;/strong&gt; NuGet Package.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;PM &amp;gt; Install-Package Barcode&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.nuget.org/packages/BarCode/" rel="nofollow"&gt;&lt;/a&gt;&lt;a href="https://www.nuget.org/packages/BarCode/"&gt;https://www.nuget.org/packages/BarCode/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As an alternative, the &lt;a href="https://ironsoftware.com/csharp/barcode/packages/IronBarCode.zip"&gt;IronBarCode DLL can be downloaded&lt;/a&gt; and added to your project as a reference from [.NET Barcode DLL].&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/nFExd00E5Ag"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#importing-namespaces"&gt;
  &lt;/a&gt;
  Importing NameSpaces
&lt;/h3&gt;

&lt;p&gt;For this tutorial we need to make sure our class files reference IronBarCode and also some normal system assemblies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using IronBarCode;
using System;
using System.Drawing;
using System.Linq;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-a-qr-code-with-1-line-of-code"&gt;
  &lt;/a&gt;
  Create a QR Code with 1 Line of Code
&lt;/h2&gt;

&lt;p&gt;Our first example shows us how to create a standardized barcode with some simple text, a 500 pixel square diameter, with a medium error correction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Generate a Simple BarCode image and save as PDF&lt;/span&gt;
&lt;span class="n"&gt;QRCodeWriter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateQrCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello world"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QRCodeWriter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QrErrorCorrectionLevel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Medium&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;SaveAsPng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyQR.png"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vb"&gt;&lt;code&gt;&lt;span class="c1"&gt;' Generate a Simple BarCode image and save as PDF&lt;/span&gt;
&lt;span class="n"&gt;QRCodeWriter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateQrCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello world"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;QRCodeWriter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QrErrorCorrectionLevel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Medium&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;SaveAsPng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyQR.png"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Error correction allows us to define how easy it will be for a QR code to be read in real world circumstances. Higher error correction levels create larger QR codes with more pixels and more complexity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2p-bHEFE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fcomjnwcfm8rp1xm8guh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2p-bHEFE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fcomjnwcfm8rp1xm8guh.png" alt="" width="739" height="731"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-a-logo"&gt;
  &lt;/a&gt;
  Adding a Logo
&lt;/h2&gt;

&lt;p&gt;In the second example, we will look at a use case where a company wishes to add to a logo to their QR code, which is something we see commonly these days. By using the QRCodeWriter.CreateQRCodeWithLogo method, in the code sample below you can see how easy this is.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Adding a Logo&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;MyQRWithLogo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QRCodeWriter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateQrCodeWithLogo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://ironsoftware.com/csharp/barcode/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"visual-studio-logo.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;MyQRWithLogo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ChangeBarCodeColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Drawing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DarkGreen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vb"&gt;&lt;code&gt;&lt;span class="c1"&gt;' Adding a Logo&lt;/span&gt;
&lt;span class="k"&gt;Dim&lt;/span&gt; &lt;span class="nv"&gt;MyQRWithLogo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QRCodeWriter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateQrCodeWithLogo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://ironsoftware.com/csharp/barcode/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"visual-studio-logo.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MyQRWithLogo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ChangeBarCodeColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Drawing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DarkGreen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This example adds the Visual Studio logo to the barcode. It automatically sizes it to an appropriate size where the pure code is still readable and aligns that logo to the QR code square grid, so that it looks appropriate. The next line of code colors the barcode dark green. However, it does not discolor the logo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oS_NWWq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ovu2paivq7ud0w99pfl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oS_NWWq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ovu2paivq7ud0w99pfl.png" alt="" width="880" height="885"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#save-as-image-pdf-or-html"&gt;
  &lt;/a&gt;
  Save as Image PDF or HTML
&lt;/h3&gt;

&lt;p&gt;Finally, we save that QR as a PDF. The final line of code opens the PDF in your default PDF browser for your convenience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Adding a Logo&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;MyQRWithLogo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QRCodeWriter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateQrCodeWithLogo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://ironsoftware.com/csharp/barcode/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"visual-studio-logo.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;MyQRWithLogo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ChangeBarCodeColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Drawing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DarkGreen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//Save as PDF&lt;/span&gt;
&lt;span class="n"&gt;MyQRWithLogo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SaveAsPdf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyQRWithLogo.pdf"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//Also Save as HTML&lt;/span&gt;
&lt;span class="n"&gt;MyQRWithLogo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SaveAsHtmlFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyQRWithLogo.html"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vb"&gt;&lt;code&gt;&lt;span class="c1"&gt;' Adding a Logo&lt;/span&gt;
&lt;span class="k"&gt;Dim&lt;/span&gt; &lt;span class="nv"&gt;MyQRWithLogo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QRCodeWriter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateQrCodeWithLogo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://ironsoftware.com/csharp/barcode/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"visual-studio-logo.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MyQRWithLogo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ChangeBarCodeColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Drawing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DarkGreen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;'Save as PDF&lt;/span&gt;
&lt;span class="n"&gt;MyQRWithLogo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SaveAsPdf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyQRWithLogo.pdf"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;'Also Save as HTML&lt;/span&gt;
&lt;span class="n"&gt;MyQRWithLogo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SaveAsHtmlFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyQRWithLogo.html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#verifying-qr-codes"&gt;
  &lt;/a&gt;
  Verifying QR Codes
&lt;/h2&gt;

&lt;p&gt;When adding logos to QR codes and changing colors, we want to make sure that our QR is still readable.&lt;/p&gt;

&lt;p&gt;By using the &lt;code&gt;GeneratedBarcode.Verify()&lt;/code&gt; method, we can test whether or not our barcode is still readable.&lt;/p&gt;

&lt;p&gt;In the following code example, we will see that changing a QR code to light blue actually makes it unreadable. We detect this within the code and prefer dark blue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Verifying QR Codes&lt;/span&gt;
&lt;span class="c1"&gt;// using System.Drawing;&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;MyVerifiedQR&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QRCodeWriter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateQrCodeWithLogo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://ironsoftware.com/csharp/barcode/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"visual-studio-logo.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;350&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;MyVerifiedQR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ChangeBarCodeColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LightBlue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;MyVerifiedQR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Verify&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\t LightBlue is not dark enough to be read accurately.  Lets try DarkBlue"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;MyVerifiedQR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ChangeBarCodeColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DarkBlue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;MyVerifiedQR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SaveAsHtmlFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyVerifiedQR.html"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// open the barcode htm, file in your default web browser&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Diagnostics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyVerifiedQR.html"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vb"&gt;&lt;code&gt;&lt;span class="k"&gt;Imports&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.VisualBasic&lt;/span&gt;
&lt;span class="c1"&gt;' Verifying QR Codes&lt;/span&gt;
&lt;span class="c1"&gt;' using System.Drawing;&lt;/span&gt;
&lt;span class="k"&gt;Dim&lt;/span&gt; &lt;span class="nv"&gt;MyVerifiedQR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QRCodeWriter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateQrCodeWithLogo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://ironsoftware.com/csharp/barcode/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"visual-studio-logo.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MyVerifiedQR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ChangeBarCodeColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LightBlue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;If&lt;/span&gt; &lt;span class="k"&gt;Not&lt;/span&gt; &lt;span class="n"&gt;MyVerifiedQR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Verify&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;Then&lt;/span&gt;
    &lt;span class="nb"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vbTab&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s"&gt;" LightBlue is not dark enough to be read accurately.  Lets try DarkBlue"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;MyVerifiedQR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ChangeBarCodeColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DarkBlue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="k"&gt;If&lt;/span&gt;
&lt;span class="n"&gt;MyVerifiedQR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SaveAsHtmlFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyVerifiedQR.html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;' open the barcode htm, file in your default web browser&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Diagnostics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyVerifiedQR.html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final lines of code export the QR code as a standalone HTML file with no assets and then open that HTML file in your default browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S_u85OE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nratw57o4j404a5v0a2d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S_u85OE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nratw57o4j404a5v0a2d.png" alt="" width="508" height="502"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reading-and-writing-binary-data"&gt;
  &lt;/a&gt;
  Reading and Writing Binary Data
&lt;/h2&gt;

&lt;p&gt;QR codes are an excellent format for dealing with binary data. Sometimes binary data is simply more space-efficient or more appropriate than dealing with text.&lt;/p&gt;

&lt;p&gt;In this example, we will encode some binary data from a string, write that to a barcode in QR format, and then read that back as a bit array of binary data. You will note that this feature is not common to many barcode libraries, making Iron Barcode unique in this capacity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Reading and Writing Binary Data&lt;/span&gt;
&lt;span class="c1"&gt;// using System.Linq;&lt;/span&gt;
&lt;span class="c1"&gt;//Create Some Binary Data - This example equally well for Byte[] and System.IO.Stream&lt;/span&gt;
&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;BinaryData&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UTF8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://ironsoftware.com/csharp/barcode/"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//WRITE QR with Binary Content&lt;/span&gt;
&lt;span class="n"&gt;QRCodeWriter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateQrCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BinaryData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;SaveAsImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyBinaryQR.png"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//READ QR with Binary Content&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;MyReturnedData&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BarcodeReader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;QuicklyReadOneBarcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyBinaryQR.png"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BinaryData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SequenceEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyReturnedData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BinaryValue&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\t Binary Data Read and Written Perfectly"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Corrupted Data"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vb"&gt;&lt;code&gt;&lt;span class="k"&gt;Imports&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.VisualBasic&lt;/span&gt;
&lt;span class="c1"&gt;' Reading and Writing Binary Data&lt;/span&gt;
&lt;span class="c1"&gt;' using System.Linq;&lt;/span&gt;
&lt;span class="c1"&gt;'Create Some Binary Data - This example equally well for Byte[] and System.IO.Stream&lt;/span&gt;
&lt;span class="k"&gt;Dim&lt;/span&gt; &lt;span class="nv"&gt;BinaryData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="kt"&gt;Byte&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UTF8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://ironsoftware.com/csharp/barcode/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;'WRITE QR with Binary Content&lt;/span&gt;
&lt;span class="n"&gt;QRCodeWriter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateQrCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BinaryData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;SaveAsImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyBinaryQR.png"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;'READ QR with Binary Content&lt;/span&gt;
&lt;span class="k"&gt;Dim&lt;/span&gt; &lt;span class="nv"&gt;MyReturnedData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BarcodeReader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QuicklyReadOneBarcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyBinaryQR.png"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;If&lt;/span&gt; &lt;span class="n"&gt;BinaryData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SequenceEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyReturnedData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BinaryValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;Then&lt;/span&gt;
    &lt;span class="nb"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vbTab&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s"&gt;" Binary Data Read and Written Perfectly"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;Else&lt;/span&gt;
    &lt;span class="k"&gt;Throw&lt;/span&gt; &lt;span class="k"&gt;New&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Corrupted Data"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="k"&gt;If&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tFzWeTre--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yjl8xmdfxbz4ujjoe3l5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tFzWeTre--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yjl8xmdfxbz4ujjoe3l5.png" alt="Image description" width="740" height="744"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In summary, the &lt;a href="https://ironsoftware.com/csharp/barcode/use-case/barcode-library-csharp/"&gt;Barcode C# Library&lt;/a&gt; is specifically designed with real world QR code usage in mind. Not only does it read QR codes quickly and accurately, but it allows us to style them, add logos, verify barcodes, and encode them with binary data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reading-qr-codes"&gt;
  &lt;/a&gt;
  Reading QR Codes
&lt;/h2&gt;

&lt;p&gt;To save you jumping between tutorials I will add a code sample for my favorite way to read QR codes using Iron BarCode.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;IronBarCode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Drawing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="n"&gt;BarcodeResult&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BarcodeReader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;QuicklyReadOneBarcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"QR.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BarcodeEncoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QRCode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QRResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vb"&gt;&lt;code&gt;&lt;span class="k"&gt;Imports&lt;/span&gt; &lt;span class="nn"&gt;IronBarCode&lt;/span&gt;
&lt;span class="k"&gt;Imports&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;Imports&lt;/span&gt; &lt;span class="nn"&gt;System.Drawing&lt;/span&gt;
&lt;span class="c1"&gt;'...&lt;/span&gt;
&lt;span class="k"&gt;Private&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="n"&gt;BarcodeResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BarcodeReader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QuicklyReadOneBarcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"QR.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BarcodeEncoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QRCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;If&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="ow"&gt;IsNot&lt;/span&gt; &lt;span class="k"&gt;Nothing&lt;/span&gt; &lt;span class="k"&gt;Then&lt;/span&gt;
    &lt;span class="nb"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QRResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="k"&gt;If&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A more advanced form also exists with more developer control:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;IronBarCode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Drawing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="n"&gt;BarcodeResult&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BarcodeReader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ReadASingleBarcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"QR.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;BarcodeEncoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QRCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BarcodeReader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BarcodeRotationCorrection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Low&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BarcodeReader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BarcodeImageCorrection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QRResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;VB:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vb"&gt;&lt;code&gt;&lt;span class="k"&gt;Imports&lt;/span&gt; &lt;span class="nn"&gt;IronBarCode&lt;/span&gt;
&lt;span class="k"&gt;Imports&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;Imports&lt;/span&gt; &lt;span class="nn"&gt;System.Drawing&lt;/span&gt;
&lt;span class="c1"&gt;'...&lt;/span&gt;
&lt;span class="k"&gt;Private&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="ow"&gt;As&lt;/span&gt; &lt;span class="n"&gt;BarcodeResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BarcodeReader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadASingleBarcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"QR.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BarcodeEncoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QRCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BarcodeReader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BarcodeRotationCorrection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Low&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BarcodeReader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BarcodeImageCorrection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;If&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="ow"&gt;IsNot&lt;/span&gt; &lt;span class="k"&gt;Nothing&lt;/span&gt; &lt;span class="k"&gt;Then&lt;/span&gt;
    &lt;span class="nb"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QRResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;End&lt;/span&gt; &lt;span class="k"&gt;If&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#moving-forward"&gt;
  &lt;/a&gt;
  Moving Forward
&lt;/h2&gt;

&lt;p&gt;To learn more about this example and working with &lt;a href=""&gt;QR does in C#&lt;/a&gt;, we encourage you to fork it on out GitHub page or download the source code from our site.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#source-code-downloads"&gt;
  &lt;/a&gt;
  Source Code Downloads
&lt;/h3&gt;

&lt;p&gt;Download this C# QR Code Generator Tutorial and DLL&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Github Repository&lt;/li&gt;
&lt;li&gt;Source Code Zip&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#further-documentation"&gt;
  &lt;/a&gt;
  Further Documentation
&lt;/h3&gt;

&lt;p&gt;You may also find the &lt;a href="https://ironsoftware.com/csharp/barcode/object-reference/api/IronBarCode.QRCodeWriter.html"&gt;QRCodeWriter&lt;/a&gt; and &lt;a href="https://ironsoftware.com/csharp/barcode/object-reference/api/IronBarCode.BarcodeWriter.html"&gt;BarcodeReader&lt;/a&gt; classes within the API Reference of interest.&lt;/p&gt;

&lt;p&gt;They document the full feature set of Iron Barcode, a &lt;a href="https://ironsoftware.com/csharp/barcode/use-case/vb-net-barcode/"&gt;VB .NET Barcode Generator&lt;/a&gt;, which could not possibly be packed into a single tutorial&lt;/p&gt;




</description>
    </item>
    <item>
      <title>Monitoring Performance </title>
      <author>Bernd Wechner</author>
      <pubDate>Mon, 13 Dec 2021 07:56:26 +0000</pubDate>
      <link>https://dev.to/thumbone/monitoring-performance-1l7i</link>
      <guid>https://dev.to/thumbone/monitoring-performance-1l7i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#aka-how-often-shall-we-defer-to-the-ui"&gt;
  &lt;/a&gt;
  (a.k.a. How often shall we defer to the UI?)
&lt;/h2&gt;

&lt;p&gt;In my effort to build a simple &lt;a href="https://dev.to/thumbone/copy-to-clipboard-first-cut-1j5j"&gt;clipboard copy button&lt;/a&gt;, I found the need to &lt;a href="https://dev.to/thumbone/in-lining-styles-client-side-9oi"&gt;in-line styles&lt;/a&gt; if they are to survive emailing, and that in-lining could, for very large elements be &lt;a href="https://dev.to/thumbone/html-style-in-lining-performance-and-what-to-about-it-4a55"&gt;rather costly&lt;/a&gt; (in time), of which was born a need to let UI events happen while doing the job. &lt;/p&gt;

&lt;p&gt;With all that under my belt, knowing how long it was likely to take would also be nice, a bit of UI feedback on progress of the style in-lining operation. Basically, a progress bar ...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--USwsFglW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45rgp3d3h4itz35orh8t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--USwsFglW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45rgp3d3h4itz35orh8t.png" alt="Progress Bar" width="880" height="234"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Progress bars were once a problem in JavaScript, with lots of tips, tricks and 3rd party solutions. But no more, we now have the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress"&gt;progress&lt;/a&gt; element and it's a breeze. We can just add: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;progress value="0"/&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to a button, or elsewhere, and style it as we wish, display it as needed and update it's &lt;code&gt;max&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; to suit. The default width, it seems, when we put I  on my page was around the 150 pixels mark, but it can be styled as desired.&lt;/p&gt;

&lt;p&gt;And that answers our "How often shall we defer to the UI?" question implicitly. While not a fault-free, universally-suitable answer, it's not a bad start to update no more often than it takes to advance that progress bar by one pixel (i.e to make a visible change to it). &lt;/p&gt;

&lt;p&gt;For 100,000 elements say and a 150 pixel bar that's an ominous &lt;a href="https://en.wikipedia.org/wiki/666_%28number%29"&gt;666&lt;/a&gt; elements per pixel. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DDkZBRX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jq37izkf5p784xhr355x.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DDkZBRX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jq37izkf5p784xhr355x.jpg" alt="666" width="600" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we drop the frequency of deferrals to the UI to once every 666 elements they are in-lined in &lt;a href="https://en.wikipedia.org/wiki/Phrases_from_The_Hitchhiker%27s_Guide_to_the_Galaxy#The_Answer_to_the_Ultimate_Question_of_Life,_the_Universe,_and_Everything_is_42"&gt;42&lt;/a&gt; seconds (an auspicious figure). Much improved performance.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ESBkhf1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/377av6uykw2oz2y4ui4s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ESBkhf1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/377av6uykw2oz2y4ui4s.jpg" alt="42" width="400" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To recap: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;30 seconds with a locked UI, &lt;/li&gt;
&lt;li&gt;11 minutes if we defer to the UI after ever element (~100,000 times - i.e. 30 seconds of style processing an 10+minutes of promise management), and &lt;/li&gt;
&lt;li&gt;42 seconds if we temper the UI deferrals to 150 times over the duration of in-lining (for a 150pixel progress bar). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Empirical tests confirm that, during those 42 seconds, the UI is admirably responsive, no noticeable lag and so we're content!&lt;/p&gt;

&lt;p&gt;But still, in 42 seconds the element being copied might change! That is, because we are deferring to the UI and maintaining responsive UI while in-lining styles, user events processed can change the element that we're copying! So we need to both know something has changed and start again if it has, but that is another chapter of &lt;a href="https://dev.to/thumbone/the-thing-is-on-awesomeness-and-motivation-2i0j"&gt;The Thing Is ...&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Advent of PBT 2021 - Day 13 - Solution</title>
      <author>Nicolas DUBIEN</author>
      <pubDate>Mon, 13 Dec 2021 07:54:35 +0000</pubDate>
      <link>https://dev.to/dubzzz/advent-of-pbt-2021-day-13-solution-3bhn</link>
      <guid>https://dev.to/dubzzz/advent-of-pbt-2021-day-13-solution-3bhn</guid>
      <description>&lt;p&gt;Our algorithm was: &lt;strong&gt;nonogramSolver&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://dev.to/dubzzz/advent-of-pbt-2021-day-13-21e5"&gt;Go to the subject itself for more details&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CodeSandbox with a possible set of properties you may have come with: &lt;a href="https://codesandbox.io/s/advent-of-pbt-day-13-solution-2hyoz?file=/src/index.spec.ts&amp;amp;previewwindow=tests"&gt;https://codesandbox.io/s/advent-of-pbt-day-13-solution-2hyoz?file=/src/index.spec.ts&amp;amp;previewwindow=tests&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#property-1-should-respect-the-constraints-when-filling-the-grid"&gt;
  &lt;/a&gt;
  Property 1: should respect the constraints when filling the grid
&lt;/h2&gt;

&lt;p&gt;I initially wanted to check that the solver was building THE right grid. But actually there is no unicity of the solution (from time to time). So instead of checking if we get the right grid, we can check that the grid follows the requirements.&lt;/p&gt;

&lt;p&gt;In other words if the row number 1 requires: [1, 2], then I should have one "cross" then one or many "dots" then two "crosses".&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;for any constraints&lt;br&gt;
it should follows the constraints&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;for any already filled grid&lt;br&gt;
if I compute the constraints followed by this grid&lt;br&gt;
and pass them to the solver&lt;br&gt;
then the answer of the solver should also result in the same constraints&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Written with fast-check:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should respect the constraints when filling the grid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;fc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;fc&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;numRows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
          &lt;span class="na"&gt;numColumns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;numRows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numColumns&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;fc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;fc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;constantFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;minLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;numColumns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;maxLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;numColumns&lt;/span&gt;
            &lt;span class="p"&gt;}),&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;minLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;numRows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;maxLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;numRows&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialGrid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Arrange&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;constraints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gridToConstraints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialGrid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Act&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;solution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nonogramSolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;constraints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;constraints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Assert&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;gridSolution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;solution&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gridToConstraints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gridSolution&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;constraints&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only thing missing is the helper &lt;code&gt;gridToConstraints&lt;/code&gt; extracting the constraints for an already filled grid. I drafted a dummy implementation for it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;gridToConstraints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[][]&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[][];&lt;/span&gt; &lt;span class="nl"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[][]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[][]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rowIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;rowIndex&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;rowIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;colIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;colIndex&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;colIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rowIndex&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;colIndex&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;numX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numX&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numX&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;numX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[][]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;colIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;colIndex&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;colIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rowIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;rowIndex&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;rowIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rowIndex&lt;/span&gt;&lt;span class="p"&gt;]?.[&lt;/span&gt;&lt;span class="nx"&gt;colIndex&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;numX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numX&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numX&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;numX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;columns&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we might probably have something even simpler and less error-prone to build this one.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://dev.to/dubzzz/advent-of-pbt-2021-13ee"&gt;Back to "Advent of PBT 2021"&lt;/a&gt; to see topics covered during the other days and their solutions.&lt;/p&gt;

&lt;p&gt;More about this serie on &lt;a href="https://twitter.com/ndubien"&gt;@ndubien&lt;/a&gt; or with the hashtag &lt;a href="https://twitter.com/search?q=%23AdventOfPBT"&gt;#AdventOfPBT&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>adventofpbt</category>
      <category>testing</category>
      <category>code</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Advent of PBT 2021 - Day 13</title>
      <author>Nicolas DUBIEN</author>
      <pubDate>Mon, 13 Dec 2021 07:54:28 +0000</pubDate>
      <link>https://dev.to/dubzzz/advent-of-pbt-2021-day-13-21e5</link>
      <guid>https://dev.to/dubzzz/advent-of-pbt-2021-day-13-21e5</guid>
      <description>&lt;p&gt;Our algorithm today is: &lt;strong&gt;nonogramSolver&lt;/strong&gt;.&lt;br&gt;
It comes with the following documentation and prototype:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Solver of nonograms.
 *
 * Nonogram is a game in which the user is asked to colorize a grid
 * based on hints. A cell in the grid will be either filled or not.
 *
 * For instance, the grid below:
 *
 *        12
 *      3211
 *
 * 1 2  ????
 * 1 1  ????
 *   3  ????
 * 1 1  ????
 *
 * Will result in:
 *
 *        12
 *      3211
 *
 * 1 2  x.xx
 * 1 1  x..x
 *   3  xxx.
 * 1 1  .x.x
 *
 * To define this grid you'll have to pass:
 * - rows:    [[1,2],[1,1],[3],[1,1]]
 * - columns: [[3],[2],[1,1],[2,1]]
 *
 * @param rows - For each row, the set of hints concerning the
 *               number of filled cells
 * @param columns - For each column, the set of hints concerning
 *                  the number of filled cells
 */&lt;/span&gt;
&lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;nonogramSolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[][],&lt;/span&gt;
  &lt;span class="nx"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[][]&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We already wrote some examples based tests for it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should be able to solve our nonogram&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Arrange&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;expectedSolution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;expectedSolution&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x.xx&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;expectedSolution&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x..x&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;expectedSolution&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;xxx.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;expectedSolution&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.x.x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Act&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;solution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nonogramSolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Assert&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;solution&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expectedSolution&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should be able to solve nonogram with non unique solution&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Arrange&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;expectedSolutionA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;expectedSolutionA&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.x&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;expectedSolutionA&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;expectedSolutionB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;expectedSolutionB&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;expectedSolutionB&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Act&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;solution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nonogramSolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Assert&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;solution&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;expectedSolutionA&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;solution&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;expectedSolutionB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isA&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;isB&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How would you cover it with Property Based Tests?&lt;/p&gt;

&lt;p&gt;In order to ease your task we provide you with an already setup CodeSandbox, with examples based tests already written and a possible implementation of the algorithm: &lt;a href="https://codesandbox.io/s/advent-of-pbt-day-13-r03cn?file=/src/index.spec.ts&amp;amp;previewwindow=tests"&gt;https://codesandbox.io/s/advent-of-pbt-day-13-r03cn?file=/src/index.spec.ts&amp;amp;previewwindow=tests&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You wanna see the solution? Here is the set of properties I came with to cover today's algorithm: &lt;a href="https://dev.to/dubzzz/advent-of-pbt-2021-day-13-solution-3bhn"&gt;https://dev.to/dubzzz/advent-of-pbt-2021-day-13-solution-3bhn&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://dev.to/dubzzz/advent-of-pbt-2021-13ee"&gt;Back to "Advent of PBT 2021"&lt;/a&gt; to see topics covered during the other days and their solutions.&lt;/p&gt;

&lt;p&gt;More about this serie on &lt;a href="https://twitter.com/ndubien"&gt;@ndubien&lt;/a&gt; or with the hashtag &lt;a href="https://twitter.com/search?q=%23AdventOfPBT"&gt;#AdventOfPBT&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>adventofpbt</category>
      <category>testing</category>
      <category>code</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Bypassing CORS via custom proxy backend</title>
      <author>Alen Duda</author>
      <pubDate>Mon, 13 Dec 2021 07:53:07 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/bypassing-cors-via-custom-proxy-backend-2po</link>
      <guid>https://dev.to/bornfightcompany/bypassing-cors-via-custom-proxy-backend-2po</guid>
      <description>&lt;p&gt;As a frontend developer, sooner or later you will encounter a CORS error, something like this:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Access to XMLHttpRequest at 'https://...' from origin 'https://...' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WRxBh1KO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xu6jrxx4qxwmart8xf7i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WRxBh1KO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xu6jrxx4qxwmart8xf7i.jpg" alt="CORS error in console" width="880" height="60"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cors-intro"&gt;
  &lt;/a&gt;
  CORS intro
&lt;/h2&gt;

&lt;p&gt;Plainly, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;Cross-Origin Resource Sharing&lt;/a&gt; is a security mechanism which enables web browsers to access data from &lt;em&gt;domain2.com&lt;/em&gt; while browsing &lt;em&gt;domain1.com&lt;/em&gt;. It can also be used to restrict access only to predefined domains. Basically, it requires the backend and frontend to be on the same server or to specifically set allowed origins which can access the backend.&lt;/p&gt;

&lt;p&gt;CORS is disabled by default and, if you have access to the server-side code, there are &lt;a href="https://enable-cors.org/server.html"&gt;ways to enable it&lt;/a&gt;. If you are in a school group project with a backend dev, be sure to remind him/her to enable CORS or you might be stuck with mock data (speaking from experience).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inspiration"&gt;
  &lt;/a&gt;
  Inspiration
&lt;/h2&gt;

&lt;p&gt;I first encountered the red CORS error in the browser console on a university project one saturday night when I tried to connect to our Java Spring backend and couldn't get it to work, even though it worked from Postman. Since Java (and specifically Spring) was (and is) almost as Ancient Greek to me, I wanted to try a way to bypass this error. Since CORS is on the browser level, an idea popped up: why not build a simple(r) JS backend which does the same API request, but has CORS enabled so I could connect to it instead of the original Java backend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#express-backend"&gt;
  &lt;/a&gt;
  Express backend
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://expressjs.com/"&gt;Express.js&lt;/a&gt; is the first node.js web framework I encountered and is well-suited for this task. We will create a minimal node/express backend application which uses &lt;a href="https://axios-http.com/docs/intro"&gt;axios &lt;/a&gt;as the http library and the &lt;a href="https://www.npmjs.com/package/cors"&gt;cors&lt;/a&gt; package to enable CORS on our server (otherwise this whole ordeal would be pointless).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-setup-and-package-installation"&gt;
  &lt;/a&gt;
  Project setup and package installation
&lt;/h3&gt;

&lt;p&gt;After creating a folder for our project, open a terminal and navigate to it. We initialize the most basic package.json file with&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;npm init -y&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once done, we install the required packages:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;npm i express cors axios&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before starting to code, we need a file which will be run. Common names are &lt;code&gt;server.js&lt;/code&gt; or &lt;code&gt;app.js&lt;/code&gt;. Since this project will have all the code in a single file (not the best practice, but for demonstration purposes), we can simply use &lt;code&gt;index.js&lt;/code&gt;. Create that file and modify the package.json file so the scripts key looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node index"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#coding-time"&gt;
  &lt;/a&gt;
  Coding time
&lt;/h3&gt;

&lt;p&gt;Finally, time to code! Open &lt;code&gt;index.js&lt;/code&gt; (or whatever you called it in the previous step) so we can create our server. I will copy all the code required here, along with the comments for (almost) each line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// packages import&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// enable CORS&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// set the port on which our app wil run&lt;/span&gt;
&lt;span class="c1"&gt;// important to read from environment variable if deploying&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// basic string route to prevent Glitch error&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// the route we're working with&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// replace with a custom URL as required&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;backendUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// return the data without modification&lt;/span&gt;
    &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;backendUrl&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// console text when app is running&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server listening at http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that is it! You can use the above code and upload it to &lt;a href="https://glitch.com"&gt;Glitch&lt;/a&gt;, for example, so it can be hosted and accessed if you deploy your frontend app. That's why we require reading the PORT from environment variable (if available) and set a root route to return a simple string, otherwise Glitch would belive the app has an error since nothing is returned.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;"/users"&lt;/code&gt; route contains the main code we need to connect to the backend which doesn't have CORS access enabled and returns the same, unmodified data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-bonus-data-modification"&gt;
  &lt;/a&gt;
  Additional bonus: data modification
&lt;/h3&gt;

&lt;p&gt;While you can return the data as-is, nothing stops you from modifying the original response to be more adapted to your frontend app's needs. If there is a lot of data and modifications required, that could improve the frontend app's performance on lower-end devices and slower connections, since less &lt;em&gt;noise&lt;/em&gt; data will be received and less modifications are required client-side.&lt;/p&gt;

&lt;p&gt;Example response from original backend API:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dD3AA9ug--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/blit2ijzl5etd0vdqn43.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dD3AA9ug--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/blit2ijzl5etd0vdqn43.jpg" alt="Original API response" width="750" height="1026"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code snippet for modifying this is pretty straightforward (assuming the response has the same data structure as above):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;backendUrl&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastEpisodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastAvailableEpisodes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastEpisodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;episode&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;episode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contentItemId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;episode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;caption&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;audioFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;episode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;
        &lt;span class="p"&gt;}));&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shows&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example custom API response after modification:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rm5a-kYn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjapn34f0kzbp7ztpsav.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rm5a-kYn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjapn34f0kzbp7ztpsav.jpg" alt="Custom API response" width="803" height="257"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I believe you agree that the second response is much cleaner and easier to follow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This was a very basic example of using a custom, bare-bones backend as a proxy to bypass CORS-restricted content you would generally have access to. It also follows a so-called &lt;em&gt;happy path&lt;/em&gt;, meaning there is no error handling, but that would detract from the topic. The whole process from creating the project, modifying the response and deployment to Glitch can take less than 10 minutes, which is much quicker than waiting for your backend-dev colleague to wake up the next morning when the inspiration is gone.&lt;/p&gt;

</description>
      <category>engineeringmonday</category>
      <category>cors</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Premium multi layout Jekyll theme</title>
      <author>Gabriel N Voicu</author>
      <pubDate>Mon, 13 Dec 2021 07:44:11 +0000</pubDate>
      <link>https://dev.to/ngvoicu/premium-multi-layout-jekyll-theme-322h</link>
      <guid>https://dev.to/ngvoicu/premium-multi-layout-jekyll-theme-322h</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Premium theme using Jekyll version 4.1.2 &amp;amp; Bootstrap 5&lt;/li&gt;
&lt;li&gt;Multipurpose (multiple homepage layouts)&lt;/li&gt;
&lt;li&gt;Fully ready for production within minutes&lt;/li&gt;
&lt;li&gt;Responsive, SEO Friendly, and Mobile optimized&lt;/li&gt;
&lt;li&gt;Step by step documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;USE: ZEESPIREHOLIDAYS code to get 35$ discount&lt;/p&gt;

&lt;p&gt;&lt;a href="https://shop.zeespire.com/"&gt;Checkout our demos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Support: &lt;a href="mailto:office@zeespire.com"&gt;office@zeespire.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Three homepage designs which you can choose from&lt;/li&gt;
&lt;li&gt;Easily create and use your own Bootstrap designs&lt;/li&gt;
&lt;li&gt;Includes multiple blog posts and frontpage as sample content&lt;/li&gt;
&lt;li&gt;Customizable through config files and properties:&lt;/li&gt;
&lt;li&gt;show/hide authors&lt;/li&gt;
&lt;li&gt;show/hide dates&lt;/li&gt;
&lt;li&gt;show/hide social integrations&lt;/li&gt;
&lt;li&gt;show/hide watermark&lt;/li&gt;
&lt;li&gt;show/hide selected posts on the front page&lt;/li&gt;
&lt;li&gt;change footer color&lt;/li&gt;
&lt;li&gt;Has Authors, Posts, Categories features&lt;/li&gt;
&lt;li&gt;Supports multiple image sizes for fast loading&lt;/li&gt;
&lt;li&gt;Lightbox and Image galleries support&lt;/li&gt;
&lt;li&gt;Code snippets highlight&lt;/li&gt;
&lt;li&gt;Git helper scripts (.bat) for easy GIT interaction&lt;/li&gt;
&lt;li&gt;Jekyll helper scripts (.bat) to easily build or start HTTP server locally&lt;/li&gt;
&lt;li&gt;100% Responsive&lt;/li&gt;
&lt;li&gt;Many SEO features; Open Graph protocol; schema.org using Microdata; meta tags&lt;/li&gt;
&lt;li&gt;No dependency on external resources&lt;/li&gt;
&lt;li&gt;Track your visitors with Google Tag Manager or Google Analytics integration&lt;/li&gt;
&lt;li&gt;YouTube and other video website support for embedded videos&lt;/li&gt;
&lt;li&gt;Pinterest integration&lt;/li&gt;
&lt;li&gt;Links and icons to other social platforms like YouTube, Facebook, Instagram, Medium, TikTok, Pinterest (hidden if not needed)&lt;/li&gt;
&lt;li&gt;Search feature&lt;/li&gt;
&lt;li&gt;Clean code&lt;/li&gt;
&lt;li&gt;Favicons for all types of devices&lt;/li&gt;
&lt;li&gt;.htaccess redirects with HTTPS support&lt;/li&gt;
&lt;li&gt;Minimized HTML CSS and JS code on build for super speed&lt;/li&gt;
&lt;li&gt;Sitemap with latest modification date&lt;/li&gt;
&lt;li&gt;RSS feed&lt;/li&gt;
&lt;li&gt;Great documentation and support in max. 48 hours&lt;/li&gt;
&lt;li&gt;Easy to upgrade Jekyll and Bootstrap version&lt;/li&gt;
&lt;li&gt;Easy to deploy, customize and extend&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>jekyll</category>
      <category>html</category>
      <category>bootstrap</category>
      <category>seo</category>
    </item>
    <item>
      <title>Go Concurrency Patterns - Wait For Task</title>
      <author>b0r</author>
      <pubDate>Mon, 13 Dec 2021 07:39:41 +0000</pubDate>
      <link>https://dev.to/b0r/go-concurrency-patterns-wait-for-task-34de</link>
      <guid>https://dev.to/b0r/go-concurrency-patterns-wait-for-task-34de</guid>
      <description>&lt;p&gt;To improve my Go Programming skills and become a better Go engineer, I have recently purchased an excellent on-demand education from &lt;a href="https://www.ardanlabs.com/education/"&gt;Ardan Labs&lt;/a&gt;. Materials are created by an expert Go engineer, &lt;a href="https://twitter.com/goinggodotnet"&gt;Bill Kennedy&lt;/a&gt;.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ohpow5Jt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1349881840220450826/pGwOq5tz_normal.jpg" alt="Bill Kennedy : MIA/-5 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Bill Kennedy : MIA/-5
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @goinggodotnet
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      If you've been looking for a book on &lt;a href="https://twitter.com/hashtag/golang"&gt;#golang&lt;/a&gt; and not sure what to pick, check out the Ultimate Go Notebook. &lt;br&gt;&lt;br&gt;If you want to read it first before you make a decision to buy it, send me an email.&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/jHjuJQUUz4"&gt;courses.ardanlabs.com/courses/ultima…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:46 PM - 30 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1443663502808395780" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1443663502808395780" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1443663502808395780" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I have decide to record my process of learning how to write more idiomatic code, following Go best practices and design philosophies. &lt;/p&gt;

&lt;p&gt;This series of posts will describe concurrency patterns used for orchestration/signaling in Go via goroutines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wait-for-task-pattern"&gt;
  &lt;/a&gt;
  Wait For Task Pattern
&lt;/h2&gt;

&lt;p&gt;The main idea behind &lt;strong&gt;Wait For Task&lt;/strong&gt; pattern is to have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a channel that provides a signaling semantics&lt;/li&gt;
&lt;li&gt;a goroutine that &lt;strong&gt;waits for task&lt;/strong&gt; so it can do some work &lt;/li&gt;
&lt;li&gt;a goroutine that sends work to the previous goroutine&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;In this example we have an &lt;code&gt;employee&lt;/code&gt; (&lt;code&gt;a&lt;/code&gt; goroutine) that doesn't know immediately what to do. The &lt;code&gt;employee&lt;/code&gt; waits for &lt;code&gt;manager&lt;/code&gt; to give him some work to do. &lt;br&gt;
Once &lt;code&gt;manager&lt;/code&gt; finds some work for the &lt;code&gt;employee&lt;/code&gt;, it notifies &lt;code&gt;employee&lt;/code&gt; by sending a signal (&lt;code&gt;paper&lt;/code&gt;) via communication channel &lt;code&gt;ch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Feel free to try the example on &lt;a href="https://play.golang.com/p/WUrCw1C8d7C"&gt;Go Playground&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"math/rand"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// make channel of type string which provides signaling semantics&lt;/span&gt;
    &lt;span class="c"&gt;// unbuffered channel provides a guarantee that the &lt;/span&gt;
    &lt;span class="c"&gt;// signal being sent is received&lt;/span&gt;
    &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// goroutine 'a' that waits for some work =&amp;gt; employee&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// employee waits for signal that it has some work to do&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"employee : received signal : "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="c"&gt;// simulate the idea of unknown latency (do not use in production)&lt;/span&gt;
    &lt;span class="c"&gt;// e.g. manager is thinking what work to pass to the employee&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Millisecond&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="c"&gt;// when work is ready, send signal form manager to the employee&lt;/span&gt;
    &lt;span class="c"&gt;// sender (employee) has a guarantee that the worker (employee)&lt;/span&gt;
    &lt;span class="c"&gt;// has received a signal&lt;/span&gt;
    &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;"paper"&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"manager : sent signal"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#result-1st-execution"&gt;
  &lt;/a&gt;
  Result (1st execution)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go run main.go
manager : sent signal
employee : received signal :  paper
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, wait for task concurrency pattern was described. In addition, simple implementation was provided.&lt;/p&gt;

&lt;p&gt;Readers are encouraged to check out excellent &lt;a href="https://www.ardanlabs.com/education/"&gt;Ardan Labs&lt;/a&gt; education materials to learn more.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h4&gt;

&lt;p&gt;Depending on the country you are coming from, &lt;a href="https://www.ardanlabs.com/education/"&gt;Ardan Labs&lt;/a&gt; education might be a little bit expensive. In that case you can always contact them and they will provide you a link to their scholarship form. &lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.ardanlabs.com/"&gt;Ardan Labs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pexels.com/photo/radio-telescope-against-sky-with-stars-6325001/"&gt;Cover image by Igor Mashkov from Pexels&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>go</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
