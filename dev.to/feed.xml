<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Can $this be Used Outside Class (PHP)</title>
      <author>Shoaiyb Sysa</author>
      <pubDate>Sun, 21 Nov 2021 10:08:53 +0000</pubDate>
      <link>https://dev.to/shoaiyb/can-this-be-used-outside-class-php-l29</link>
      <guid>https://dev.to/shoaiyb/can-this-be-used-outside-class-php-l29</guid>
      <description>&lt;p&gt;Yes it's possible to use $this outside class with php, But how?&lt;br&gt;
It can be done by including the file that contains &lt;code&gt;$this&lt;/code&gt; inside the class, Just like below.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;class.php&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$say&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'I didn\'t say anything!'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;say&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/test.php'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;say&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;$MyClass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$MyClass&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;hear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;test.php&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;say&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'I Said Using $this Outside Class Is Possible!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>php</category>
    </item>
    <item>
      <title>Cool Neural Networks that You Can Try RightÂ Now</title>
      <author>Mark Vassilevskiy</author>
      <pubDate>Sun, 21 Nov 2021 10:02:13 +0000</pubDate>
      <link>https://dev.to/abstract/cool-neural-networks-that-you-can-try-right-now-1i19</link>
      <guid>https://dev.to/abstract/cool-neural-networks-that-you-can-try-right-now-1i19</guid>
      <description>&lt;p&gt;A neural network is an adaptive system that can change its internal structure based on incoming information. Today neural networks help actively create new technologies and develop existing ones. They are actively used for machine vision (autopilots on cars), generating random faces or sounds, improving image or video quality, and even generating logos and names for your business&lt;/p&gt;

&lt;p&gt;I tried to find the most useful ones and present them to you&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#removebg"&gt;
  &lt;/a&gt;
  RemoveBg
&lt;/h2&gt;

&lt;p&gt;One of the most popular neural networks and one of the most useful too. You may have noticed from the title that it removes the background of your image. All that you need is to just upload your image or picture on the main page and it will automatically do the work. Even if there are two people and many details&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pG2DfYmJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vv49asjf1s92i9tp487x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pG2DfYmJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vv49asjf1s92i9tp487x.png" alt="Image description" width="800" height="390"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#namelix"&gt;
  &lt;/a&gt;
  Namelix
&lt;/h2&gt;

&lt;p&gt;This is a neural network that generates names for your brand, logo, and also what the merch will look like. If you don't know what to call your brand and don't want to pay for a good logo either, you can do the next three steps and then just pick the design that you like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Write a few keywords.&lt;/li&gt;
&lt;li&gt;Then select a length of the name.&lt;/li&gt;
&lt;li&gt;And finally, choose a style for your brand. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1I0DNYq2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7pllpbjd6u4el24h8j1f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1I0DNYq2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7pllpbjd6u4el24h8j1f.png" alt="Image description" width="800" height="390"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gnod"&gt;
  &lt;/a&gt;
  GNOD
&lt;/h2&gt;

&lt;p&gt;This is a brilliant neural network. It helps you find recommendations for music, cinema, literature, artists, and even equipment like a phone, a computer, etc. All you need to do is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Press the "Discover" button.&lt;/li&gt;
&lt;li&gt;Write three of your favorite music bands or singers(if you've chosen music).&lt;/li&gt;
&lt;li&gt;It will generate random singers or bands depending on your tastes and you just need to click "I like it", "I don't like it" or "I don't know".&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OLetQHsH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/902dbjya4q1ouvz3e36y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OLetQHsH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/902dbjya4q1ouvz3e36y.png" alt="Image description" width="800" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thispersondoesnotexist"&gt;
  &lt;/a&gt;
  ThisPersonDoesNotExist
&lt;/h2&gt;

&lt;p&gt;This is one of the funniest neural networks because it randomly generates faces of people that never existed and to look at a new "never-existed face", you just need to reload the page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xZBZT0Ip--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oe2ep2s4a1c48bisd91c.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xZBZT0Ip--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oe2ep2s4a1c48bisd91c.jpeg" alt="Image description" width="800" height="800"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#autodraw"&gt;
  &lt;/a&gt;
  AutoDraw
&lt;/h2&gt;

&lt;p&gt;It helps you to draw. You can draw whatever you want and this neural network will offer you the thing that you were drawing. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FrYE6nnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cz4xo2qmao0tukm6qqx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FrYE6nnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cz4xo2qmao0tukm6qqx.png" alt="Image description" width="600" height="290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1TSYdFuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avwfzvn4enprm1owj8az.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1TSYdFuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avwfzvn4enprm1owj8az.png" alt="Image description" width="600" height="288"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reflect"&gt;
  &lt;/a&gt;
  Reflect
&lt;/h2&gt;

&lt;p&gt;It can replace the faces of some people with others while preserving metadata (depth, lighting, sharpness, environment, etc). You can upload your own images and do whatever you want. That's fun, isn't it? I replaced Elon Musk's face with that of Will Smith.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zb1-LcCl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c19x6wofoqjzpv6bhzzu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zb1-LcCl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c19x6wofoqjzpv6bhzzu.png" alt="Image description" width="800" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#colorize"&gt;
  &lt;/a&gt;
  Colorize
&lt;/h2&gt;

&lt;p&gt;This neural network allows you to make a color image from a black and white image. It determines where the grass, sky, people, etc are located. Personally, I tried it and it works fine.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--95IIW_ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iefwl8t51uzp3zujgx4j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--95IIW_ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iefwl8t51uzp3zujgx4j.png" alt="Image description" width="800" height="393"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bigjpg"&gt;
  &lt;/a&gt;
  Bigjpg
&lt;/h2&gt;

&lt;p&gt;I used this neural network myself for around one year and I can tell you that it really works. It upgrades the resolution of your photo/artwork. Choose Upscalling:4x and Noise Reduction: High or Highest. And that's all. Just wait till your image is ready and then download it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TkyfropJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m22un7744q56ss4cevw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TkyfropJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m22un7744q56ss4cevw.png" alt="Image description" width="800" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thanks a lot for reading this article. I hope you enjoyed this article and that you find these neural networks useful.&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>ai</category>
      <category>programming</category>
      <category>opensource</category>
    </item>
    <item>
      <title>WhereHas() In Laravel</title>
      <author>Marcos Gad</author>
      <pubDate>Sun, 21 Nov 2021 09:41:32 +0000</pubDate>
      <link>https://dev.to/marcosgad/wherehas-in-laravel-1laa</link>
      <guid>https://dev.to/marcosgad/wherehas-in-laravel-1laa</guid>
      <description>&lt;p&gt;Let's get started quickly&lt;br&gt;
You may want to base your results on the existence of a relationship. For example, imagine that you want to retrieve all projects that have project_one starting with ,CSS. To do this, you can pass the name of the relationship to the whereHas() method and specify additional query constraints for has queries&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Project&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;whereHas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'project_one'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Builder&lt;/span&gt; &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'like'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'CSS%'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;use with() method with WhereHas()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Project&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'project_one'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;whereHas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'project_one'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Builder&lt;/span&gt; &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'like'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'CSS%'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, Let's be more professional&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;scopeWithWhereHas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$relation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$constraint&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;whereHas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$relation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$constraint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nv"&gt;$relation&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$constraint&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Project&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;withWhereHas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'project_one'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
     &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'like'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'CSS%'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since this query builder may be needed in many Models in AppServiceProvider::boot()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Builder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;macro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'withWhereHas'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$relation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$constraint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
   &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;whereHas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$relation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$constraint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nv"&gt;$relation&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$constraint&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you enjoy the code.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>php</category>
      <category>laravel</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Different ways to connect react frontend and node backend</title>
      <author>Rakesh Potnuru</author>
      <pubDate>Sun, 21 Nov 2021 09:33:08 +0000</pubDate>
      <link>https://dev.to/rakeshpotnuru/different-ways-to-connect-react-frontend-and-node-backend-1pik</link>
      <guid>https://dev.to/rakeshpotnuru/different-ways-to-connect-react-frontend-and-node-backend-1pik</guid>
      <description>&lt;p&gt;There are different ways to connect react backend and NodeJS frontend. In this blog, I am going to tell you three ways how you can connect backend and frontend. These are the ways most of the developers prefer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;React and NodeJS&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#1-single-server"&gt;
  &lt;/a&gt;
  1. Single server
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iwfVBzGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idd985nerinfgag58dkd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iwfVBzGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idd985nerinfgag58dkd.jpg" alt="Single server" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first way is having a single server that serves both Node API and React SPA under same domain. Here data is still exchanged through JSON. As you can see in the above picture, all the routes which do not start with &lt;strong&gt;/api&lt;/strong&gt; will be handled by React SPA.&lt;br&gt;
This is a simple way and you don't need to worry about those &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;CORS&lt;/a&gt; errorsð¥¶.&lt;br&gt;
Here's how you can do it-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Copy &lt;code&gt;build&lt;/code&gt; folder files from react app and paste them in &lt;code&gt;public&lt;/code&gt; folder of NodeJS server.&lt;/li&gt;
&lt;li&gt;Now server the static &lt;code&gt;index.html&lt;/code&gt; which in the &lt;code&gt;public&lt;/code&gt; folder
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;express&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;static&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;join&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;)));&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sendFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__dirname&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Single server.&lt;/li&gt;
&lt;li&gt;No more CORS errors ð&lt;/li&gt;
&lt;li&gt;Ideal for small applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;As both frontend and backend will be handled by the same server, you may face performance issues.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-two-separated-servers"&gt;
  &lt;/a&gt;
  2. Two separated servers
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H0LcSXFx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4r735kh5mzslxq4l0yf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H0LcSXFx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4r735kh5mzslxq4l0yf.jpg" alt="Two separated servers" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Here we need two separate servers. One server servers static React SPA and another server serves Node API. Data will be exchanged through JSON.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;As we use two different servers for backend and frontend, we get better performance.&lt;/li&gt;
&lt;li&gt;Ideal for bigger applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Have to maintain two different servers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-template-engines"&gt;
  &lt;/a&gt;
  3. Template engines
&lt;/h3&gt;

&lt;p&gt;The third way and the least preferred way is server-side rendering with template engines like &lt;a href="https://ejs.co/"&gt;ejs&lt;/a&gt;, &lt;a href="https://handlebarsjs.com/"&gt;handlebars&lt;/a&gt;, &lt;a href="https://pugjs.org/"&gt;pugjs&lt;/a&gt; etc... Here we don't create any REST API.&lt;br&gt;
We render different html pages for different http requests and use react to pre-render some parts of the page.&lt;br&gt;
This is not preferred way to connect React and Node because we don't get the power of reactive user experience. &lt;/p&gt;




&lt;p&gt;So, what other ways you know and what is your preferred way? Comment below ð&lt;/p&gt;




&lt;p&gt;Hope this helps you!&lt;br&gt;
Save for reference.&lt;br&gt;
Connect with me on &lt;a href="https://twitter.com/rakesh_at_tweet"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/rakesh-potnuru-067a8b1b1/"&gt;LinkedIn&lt;/a&gt;. Follow me for more ð.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>node</category>
      <category>react</category>
    </item>
    <item>
      <title>Random Color Generator in HTML CSS and JS </title>
      <author>SnowBit</author>
      <pubDate>Sun, 21 Nov 2021 09:33:07 +0000</pubDate>
      <link>https://dev.to/snowbit/random-color-generator-3jbe</link>
      <guid>https://dev.to/snowbit/random-color-generator-3jbe</guid>
      <description>&lt;p&gt;Hello everyone, I am back here with an amazing article ð&lt;/p&gt;

&lt;p&gt;In this article, I am going to talk about creating a &lt;strong&gt;Random Color Article&lt;/strong&gt; which might help you to improve your front end dev skills.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#purpose-of-making-this"&gt;
  &lt;/a&gt;
  Purpose of making this
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You will feel more self-confident&lt;/li&gt;
&lt;li&gt;If you are a beginner you will learn something new from this tutorial, and if you are not a beginner then you will just practice a new thing &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, let's gets started&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#make-sure-to-check-out-this-video"&gt;
  &lt;/a&gt;
  Make sure to check out this video
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wQlRHnJFtYk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;index.html&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;center&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"color"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"getRandomColor()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/center&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;style.css&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#color&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;90px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;900&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;mix-blend-mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;difference&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For &lt;strong&gt;JavaScript&lt;/strong&gt;, make sure to check out the &lt;a href="https://youtu.be/wQlRHnJFtYk"&gt;video&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congrats you have made &lt;strong&gt;Random Color Generator&lt;/strong&gt; in HTML CSS and JavaScript ð¥³&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Create Awesome README File For Your GitHub Repository</title>
      <author>Mohmed Ishak</author>
      <pubDate>Sun, 21 Nov 2021 07:55:24 +0000</pubDate>
      <link>https://dev.to/ishakmohmed/how-to-create-awesome-readme-file-for-your-github-repository-4i92</link>
      <guid>https://dev.to/ishakmohmed/how-to-create-awesome-readme-file-for-your-github-repository-4i92</guid>
      <description>&lt;p&gt;Hello, devs! If your README file doesn't look good, no one will be interested on your repo. So, how do you create nice READMEs? One way is to learn markdown format and use your creativity to make amazing READMEs, but in my opinion, this is waste of time because markdowns are not used directly in your app, but only for documentation reasons. What is there's a tool that lets you create cool READMEs real quick without you having to learn or know the boring markdown?&lt;/p&gt;

&lt;p&gt;Luckily, there's a tool that allows you to do exactly that with a WYSIWYG editor. You just need to click some buttons, drag and drop, and type the content of your README without writing confusing markdown symbols, and that tool is....&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#readmeso"&gt;
  &lt;/a&gt;
  readme.so
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V_MadwYJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ladz78gzpe9w0udtnhph.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V_MadwYJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ladz78gzpe9w0udtnhph.PNG" alt="Mohmed Ishak" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this tool, you just have to select a component from the section to your left such as installation component or feedback component, and this site will give you boilerplate with markdown template, and you just need to edit the content to your liking. The view on your very right shows how the actual README file will look like once published. When you're happy, just copy the entire code and paste it in your repo's README. &lt;/p&gt;

&lt;p&gt;Yeah, thank you.&lt;/p&gt;

</description>
      <category>github</category>
      <category>documentation</category>
    </item>
    <item>
      <title>I'll Be Writing PHP Functions In Here Just For Fun!</title>
      <author>Shoaiyb Sysa</author>
      <pubDate>Sun, 21 Nov 2021 07:46:06 +0000</pubDate>
      <link>https://dev.to/shoaiyb/php-for-fun-2kc9</link>
      <guid>https://dev.to/shoaiyb/php-for-fun-2kc9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#strsprintf"&gt;
  &lt;/a&gt;
  STR_SPRINTF
&lt;/h2&gt;

&lt;p&gt;An alternative to the default function &lt;code&gt;sprintf&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;_sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$format&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;mixed&lt;/span&gt; &lt;span class="mf"&gt;...&lt;/span&gt;&lt;span class="nv"&gt;$values&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$values&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'%'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$format&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$format&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;_sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'I am %0 and so %1 now!'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'tired'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'hungry'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns: I am tired and so hungry now!&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#search"&gt;
  &lt;/a&gt;
  _SEARCH
&lt;/h2&gt;

&lt;p&gt;What I use to add search functionality to my php sites!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$in&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$_search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;strtolower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$search&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$in&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;strtolower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;str_contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$_search&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;is_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Ohh no! No search result have been found!'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nb"&gt;print_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Old'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'New Post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Old Post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'New Page'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Old Page'&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>php</category>
      <category>fun</category>
    </item>
    <item>
      <title>Types of Web API</title>
      <author>Kunal Kumar</author>
      <pubDate>Sun, 21 Nov 2021 07:38:06 +0000</pubDate>
      <link>https://dev.to/kunalkumar007/types-of-web-api-m04</link>
      <guid>https://dev.to/kunalkumar007/types-of-web-api-m04</guid>
      <description>&lt;p&gt;Hello there, everyone. I'm Kunal, and I prefer to share information with as many people as possible so that everyone can learn alongside me.&lt;br&gt;
I was recently studying about APIs and their various varieties, which I'd like to share with you.&lt;/p&gt;

&lt;p&gt;There are four types of APIs:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Public API&lt;/strong&gt;:- Public APIs are available to any developers with a low or moderate level of authentication and authorisation. Any public API must be stable. Any modifications to the public API, such as introducing a new parameter, may cause apps that rely on that API to fail.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Private API&lt;/strong&gt;:- Private APIs, also known as Internal APIs, are exclusively available to developers within a company or organisation.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Private APIs are used for a variety of purposes, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data Access Across Departments &lt;/li&gt;
&lt;li&gt;Establishing An App-Enabled Business&lt;/li&gt;
&lt;li&gt;Enabling Contractors to Construct Features&lt;/li&gt;
&lt;li&gt;Effectively manage the supply chain&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Partner API&lt;/strong&gt;:- Business partners have access to partner APIs. They are not accessible to the general public and require specific authentication to have access to them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Composite API&lt;/strong&gt;:- Composite API is a design strategy in which numerous API calls are combined into a single API query.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of this information was obtained via Rapid API. Please check them out and share any thoughts you have in the Comments / Discussions. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>"`&lt;!--&lt;script&gt;`" in &lt;script&gt; will break your front end</title>
      <author>Labnan</author>
      <pubDate>Sun, 21 Nov 2021 07:21:43 +0000</pubDate>
      <link>https://dev.to/labnan/a-string-that-might-break-your-front-end-1pgp</link>
      <guid>https://dev.to/labnan/a-string-that-might-break-your-front-end-1pgp</guid>
      <description>&lt;p&gt;Lets say you have this string in a variable (case insensitive):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;`etc etc etc&amp;lt;!-- etc etc&amp;lt;scRipT&amp;gt; etc`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will break any html tag after it.&lt;/p&gt;

&lt;p&gt;Or lets say you divided that into some variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const first = `etc etc etc &amp;lt;!--`;
const second = `anything`;
const third = `&amp;lt;script&amp;gt;`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will also break the html page.&lt;/p&gt;

&lt;p&gt;Therefore please carefully assign any string that contains&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;`&amp;lt;!--&amp;lt;script&amp;gt;` 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or similar into a variable, if it is inside &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jsfiddle.net/egjaodwz/"&gt;jsifddle Example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to ask any question related to this in the comments :)&lt;/p&gt;

</description>
      <category>security</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>Bitcoin Technology Fundamentals - Tutorial 4 â Bitcoin Improvement Proposals</title>
      <author>AMITESH RAIKWAR</author>
      <pubDate>Sun, 21 Nov 2021 07:10:46 +0000</pubDate>
      <link>https://dev.to/amiteshraikwar/bitcoin-technology-fundamentals-tutorial-4-bitcoin-improvement-proposals-2o1</link>
      <guid>https://dev.to/amiteshraikwar/bitcoin-technology-fundamentals-tutorial-4-bitcoin-improvement-proposals-2o1</guid>
      <description>&lt;p&gt;Youtube video - &lt;a href="https://www.youtube.com/watch?v=5Dpxk5f6BaA"&gt;https://www.youtube.com/watch?v=5Dpxk5f6BaA&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bitcoin-cryptocurrencies-cryptocurrency-cryptonews-cryptotrading-cryptocurrencies-cryptoadoption-bitcointrading-bitcoinmining-bitcoins-bitcoincash-bitcoinvalue-bitcoin"&gt;
  &lt;/a&gt;
  Bitcoin, #cryptocurrencies, #cryptocurrency, #cryptonews, #cryptotrading, #cryptocurrencies, #cryptoadoption, #bitcointrading, #bitcoinmining, #bitcoins, #bitcoincash, #bitcoinvalue, #Bitcoin,
&lt;/h1&gt;

&lt;p&gt;Bitcoin Technology Fundamentals&lt;/p&gt;

&lt;p&gt;In this video series, we will cover Basic to advanced bitcoin technology.&lt;/p&gt;




&lt;p&gt;I am Amitesh Raikwar.&lt;br&gt;
Master of Technology in Electronics &amp;amp; Communication Engineering&lt;br&gt;
Bachelor of Engineer in Electronics &amp;amp; Communication Engineering&lt;/p&gt;

&lt;p&gt;I also have Blockchain certification from IBM.&lt;/p&gt;

&lt;p&gt;Issued on: 06 JAN 2019 | Issued by: IBM&lt;br&gt;
Verify: &lt;a href="https://www.credly.com/go/Ulzl1eEi"&gt;https://www.credly.com/go/Ulzl1eEi&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you wanna support our channel please donate in the below-given link of Paypal / Paytm&lt;/p&gt;




&lt;p&gt;Paypal&lt;br&gt;
:- &lt;a href="https://paypal.me/amiteshraikwar?coun"&gt;https://paypal.me/amiteshraikwar?coun&lt;/a&gt;...&lt;/p&gt;

&lt;p&gt;Paytm &lt;br&gt;
:-  Rs. 100/-   - &lt;a href="https://paytm.me/d-OGoZn"&gt;https://paytm.me/d-OGoZn&lt;/a&gt;&lt;br&gt;
  Rs. 1001/-  &lt;a href="https://paytm.me/MgL-psh"&gt;https://paytm.me/MgL-psh&lt;/a&gt;&lt;br&gt;
  Rs. 5000/-  &lt;a href="https://paytm.me/PR-YL5c"&gt;https://paytm.me/PR-YL5c&lt;/a&gt;&lt;/p&gt;

</description>
      <category>bitcoin</category>
      <category>blockchain</category>
      <category>cryptocurrency</category>
      <category>digitalcurrency</category>
    </item>
    <item>
      <title>Bitcoin Technology Fundamentals - Tutorial 3 â Bitcoin Mining</title>
      <author>AMITESH RAIKWAR</author>
      <pubDate>Sun, 21 Nov 2021 07:10:26 +0000</pubDate>
      <link>https://dev.to/amiteshraikwar/bitcoin-technology-fundamentals-tutorial-3-bitcoin-mining-49hm</link>
      <guid>https://dev.to/amiteshraikwar/bitcoin-technology-fundamentals-tutorial-3-bitcoin-mining-49hm</guid>
      <description>&lt;p&gt;Youtube video - &lt;a href="https://www.youtube.com/watch?v=WZv7G3j1dN8&amp;amp;t=95s"&gt;https://www.youtube.com/watch?v=WZv7G3j1dN8&amp;amp;t=95s&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bitcoin-cryptocurrencies-cryptocurrency-cryptonews-cryptotrading-cryptocurrencies-cryptoadoption-bitcointrading-bitcoinmining-bitcoins-bitcoincash-bitcoinvalue-bitcoin"&gt;
  &lt;/a&gt;
  Bitcoin, #cryptocurrencies, #cryptocurrency, #cryptonews, #cryptotrading, #cryptocurrencies, #cryptoadoption, #bitcointrading, #bitcoinmining, #bitcoins, #bitcoincash, #bitcoinvalue, #Bitcoin
&lt;/h1&gt;

&lt;p&gt;Bitcoin Technology Fundamentals&lt;/p&gt;

&lt;p&gt;In this video series, we will cover Basic to advanced bitcoin technology.&lt;/p&gt;




&lt;p&gt;I am Amitesh Raikwar.&lt;br&gt;
Master of Technology in Electronics &amp;amp; Communication Engineering&lt;br&gt;
Bachelor of Engineer in Electronics &amp;amp; Communication Engineering&lt;/p&gt;

&lt;p&gt;I also have Blockchain certification from IBM.&lt;/p&gt;

&lt;p&gt;Issued on: 06 JAN 2019 | Issued by: IBM&lt;br&gt;
Verify: &lt;a href="https://www.credly.com/go/Ulzl1eEi"&gt;https://www.credly.com/go/Ulzl1eEi&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you wanna support our channel please donate in the below-given link of Paypal / Paytm&lt;/p&gt;




&lt;p&gt;Paypal&lt;br&gt;
:- &lt;a href="https://paypal.me/amiteshraikwar?coun"&gt;https://paypal.me/amiteshraikwar?coun&lt;/a&gt;...&lt;/p&gt;

&lt;p&gt;Paytm &lt;br&gt;
:-  Rs. 100/-   - &lt;a href="https://paytm.me/d-OGoZn"&gt;https://paytm.me/d-OGoZn&lt;/a&gt;&lt;br&gt;
  Rs. 1001/-  &lt;a href="https://paytm.me/MgL-psh"&gt;https://paytm.me/MgL-psh&lt;/a&gt;&lt;br&gt;
  Rs. 5000/-  &lt;a href="https://paytm.me/PR-YL5c"&gt;https://paytm.me/PR-YL5c&lt;/a&gt;&lt;/p&gt;

</description>
      <category>bitcoin</category>
      <category>blockchain</category>
      <category>cryptocurrency</category>
      <category>digitalcurrency</category>
    </item>
    <item>
      <title>Ways to create Singletons and the tradeoffs between them</title>
      <author>Abhinav Pandey</author>
      <pubDate>Sun, 21 Nov 2021 07:00:03 +0000</pubDate>
      <link>https://dev.to/abh1navv/ways-to-create-singletons-and-the-tradeoffs-between-them-ofd</link>
      <guid>https://dev.to/abh1navv/ways-to-create-singletons-and-the-tradeoffs-between-them-ofd</guid>
      <description>&lt;p&gt;The singleton pattern is used to ensure that a class has only one instance, and provide a global point of access to it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-use-cases"&gt;
  &lt;/a&gt;
  Common use cases
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Logging&lt;/strong&gt; - A singleton logger is used to log messages to a file.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Database connection&lt;/strong&gt; - A singleton database connection is used to connect to a database.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Configuration&lt;/strong&gt; - A singleton configuration object is used to store application configuration.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cache&lt;/strong&gt; - A singleton cache is used to store application data.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are able to see a pattern here, these are all system-wide concerns. &lt;br&gt;
This makes understanding Singletons very important for any developer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/5rjEsJnmsUF2CxGg5e/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/5rjEsJnmsUF2CxGg5e/giphy.gif" alt="There can be only one" width="480" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ways-to-implement-the-singleton-pattern"&gt;
  &lt;/a&gt;
  Ways to implement the singleton pattern:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#the-simplest-way-to-create-a-singleton-private-static-instance"&gt;
  &lt;/a&gt;
  The simplest way to create a singleton - Private static instance
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// data fields&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// more public methods&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doSomething&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means that a static singleton instance is created when the class is loaded.&lt;br&gt;
This is the most common implementation but it is not memory efficient. If the class is not used, the singleton will still be created and if the singleton is heavy, it will consume a lot of memory.&lt;/p&gt;

&lt;p&gt;Let's look at some of the important concerns while creating a singleton.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Thread safety&lt;/strong&gt; - Since singletons are created to be used by multiple threads, they need to be thread safe. Being thread safe can be viewed in two ways.

&lt;ul&gt;
&lt;li&gt;Ensure that the singleton is not created more than once&lt;/li&gt;
&lt;li&gt;If the singleton holds data, like in a cache, ensure that the data is thread safe. Methods that update the data should be synchronized.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Efficiency&lt;/strong&gt; - We need to ensure optimal memory usage and performance.

&lt;ul&gt;
&lt;li&gt;Memory leaks - If the singleton is heavy and is not used, it will consume a lot of memory. &lt;/li&gt;
&lt;li&gt;Resource usage - If the singleton consumes system resources, it will consume a lot of CPU cycles. In this case, unless the singleton is used, the system will be underutilized.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Deserialization&lt;/strong&gt; - If the singleton is serialized and deserialized, it will be recreated in which case multiple instances will be created. It is not common to serialize singletons however, it is important to understand this.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So let's see if our earlier singleton implementation takes these concerns into account.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Thread safe in terms of instance creation - Yes, because static instances are only created once when the class is loaded.&lt;/li&gt;
&lt;li&gt;Memory usage is not optimal since the singleton is created when the class is loaded and not when it is used.&lt;/li&gt;
&lt;li&gt;Does not prevent the singleton from being serialized and deserialized.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now let's see some other ways one by one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#private-static-instance-with-lazy-initialization"&gt;
  &lt;/a&gt;
  Private static instance with lazy initialization
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More memory efficient.&lt;br&gt;
This means that the singleton is not created until the first time it is accessed. &lt;/p&gt;

&lt;p&gt;However, this does not take care of the other concerns and loses out on thread safety.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#private-static-instance-with-synchronized-getinstance-method"&gt;
  &lt;/a&gt;
  Private static instance with synchronized getInstance() method
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;synchronized&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Memory efficient + thread safe instantiation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This solves the problem of multiple threads trying to create the singleton at the same time. However, this also has a small trade-off. The synchronized method will make the singleton slower because it will block the calling thread if another thread is currently requesting the singleton.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's improve on this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#private-static-instance-with-doublechecked-locking"&gt;
  &lt;/a&gt;
  Private static instance with double-checked locking
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;synchronized&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Memory efficient + thread safe.&lt;br&gt;
This is more efficient because the synchronized block is only entered once and not when an already created instance is accessed.&lt;/p&gt;

&lt;p&gt;Another way to implement this is by using the Singleton Holder pattern.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#singleton-holder-pattern"&gt;
  &lt;/a&gt;
  Singleton Holder Pattern
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SingletonHolder&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;SingletonHolder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Focus on the SingletonHolder.instance call. When it is first called, the SingletonHolder class is loaded. &lt;br&gt;
The class loader will then create the static singleton instance and return it.&lt;br&gt;
This makes the SingletonHolder class thread safe since it holds a static instance.&lt;/p&gt;

&lt;p&gt;A common pitfall of all the above implementations is that they are not immune to serialization or reflection.&lt;/p&gt;

&lt;p&gt;There are two ways to prevent this:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementing-readresolve"&gt;
  &lt;/a&gt;
  Implementing readResolve()
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;synchronized&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;readResolve&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By implementing a &lt;code&gt;readResolve()&lt;/code&gt; method, the singleton will be deserialized as the same instance which is already created.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enum-singleton"&gt;
  &lt;/a&gt;
  Enum singleton
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="no"&gt;INSTANCE&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doSomething&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Enums can only have a certain number of instances/variations. This makes it possible to implement a singleton with an enum with only one possible instance.&lt;/li&gt;
&lt;li&gt;Enums are immune to serialization and reflection. When an enum is deserialized, the instance will be the same as the only possible instance which already exists.&lt;/li&gt;
&lt;li&gt;Enum instantiation is thread-safe by design.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Trade-off - Enums are not memory efficient.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#which-singleton-implementation-is-best-for-your-use-case"&gt;
  &lt;/a&gt;
  Which singleton implementation is best for your use case?
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;If memory is not an issue or the singleton instance is light, simply use an enum singleton. &lt;/li&gt;
&lt;li&gt;If memory is an issue, use a lazy initialization singleton.

&lt;ul&gt;
&lt;li&gt;Further if thread safety is an issue, use a double-checked locking singleton or a holder pattern.&lt;/li&gt;
&lt;li&gt;Further if you need to prevent the singleton from being serialized, use a double-checked locking singleton with readResolve().&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Thanks for reading! Hope this provides you different ways to implement a singleton in Java and the trade-offs associated with them.&lt;br&gt;
If you want to connect with me, you can find me on Twitter &lt;a href="https://twitter.com/abh1navv"&gt;@abh1navv&lt;/a&gt; &lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>codequality</category>
      <category>oop</category>
    </item>
  </channel>
</rss>
