<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to clip elements in CSS using clip-path</title>
      <author>Chris Bongers</author>
      <pubDate>Mon, 26 Jul 2021 06:26:06 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/how-to-clip-elements-in-css-using-clip-path-4akm</link>
      <guid>https://dev.to/dailydevtips1/how-to-clip-elements-in-css-using-clip-path-4akm</guid>
      <description>&lt;p&gt;I've never really learned the clip-path concept, and this article is a change in that habit.&lt;br&gt;
I'll go through the learning process of the CSS clip-path property to make some fantastic shapes with CSS.&lt;/p&gt;

&lt;p&gt;To give you some more background: back in my day, when we worked on CSS, a lot of the shaping was done by overlaying elements and hiding them among other shapes above it.&lt;br&gt;
The clip-path property existed but didn't have massive support back then.&lt;/p&gt;

&lt;p&gt;That is, of course, changed, but my habits did not change, so let's refresh my brain 🧠 by exploring the CSS clip-path property.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#understanding-basic-clipping-with-clippath"&gt;
  &lt;/a&gt;
  Understanding basic clipping with clip-path
&lt;/h2&gt;

&lt;p&gt;Let's first look at the central concept of clipping.&lt;br&gt;
We'll start off by defining a sample box that is 200 by 200 pixels and has a background:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--azCK7G2s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626759308804/C_oBIKi45.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--azCK7G2s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626759308804/C_oBIKi45.png" alt="Basic HTML structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nothing crazy yet, but let's see what happens when we add clip-path in the mix.&lt;/p&gt;

&lt;p&gt;We'll put the clip-path on the box class, and we'll start by clipping a circle in the middle of our box.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IWk6l0pk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626759566473/tNjiB8iS9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IWk6l0pk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626759566473/tNjiB8iS9.png" alt="CSS Clip-path"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've made the clipped piece less transparent for you to see, the actual clip-path only shows the circle bit, but this should give you an idea of what the clipping does.&lt;br&gt;
It masks on top of an existing item.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-shape-of-you-clippath"&gt;
  &lt;/a&gt;
  The shape of you "clip-path"
&lt;/h2&gt;

&lt;p&gt;There are a couple of shapes we can use as clip-paths. Let's have a look at those and how they work.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#circle"&gt;
  &lt;/a&gt;
  Circle
&lt;/h3&gt;

&lt;p&gt;The circle we have already seen in the basic example comes with the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;circle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;radius&lt;/span&gt; &lt;span class="nt"&gt;at&lt;/span&gt; &lt;span class="nt"&gt;posX&lt;/span&gt; &lt;span class="nt"&gt;posY&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The default position will be center, so we can also use a circle like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;clip-path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;circle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will make a circle that fills the whole box since the circle is half of the box.&lt;br&gt;
And place it in the center by default.&lt;/p&gt;

&lt;p&gt;However, we can offset the circle like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;clip-path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;circle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;at&lt;/span&gt; &lt;span class="err"&gt;70&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;20&lt;/span&gt;&lt;span class="o"&gt;%);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which in turn, results in this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--35it3Np0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626759976640/lno0Cgyzs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--35it3Np0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626759976640/lno0Cgyzs.png" alt="Offset mask"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've added the box as a transparent element so you can see what part is being clipped by our circle.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ellipse"&gt;
  &lt;/a&gt;
  Ellipse
&lt;/h3&gt;

&lt;p&gt;A shape that works similarly is the ellipse, which has two values for the radius.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;ellipse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;radiusX&lt;/span&gt; &lt;span class="nt"&gt;radiusY&lt;/span&gt; &lt;span class="nt"&gt;at&lt;/span&gt; &lt;span class="nt"&gt;posX&lt;/span&gt; &lt;span class="nt"&gt;posY&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use it to clip our box:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;clip-path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;ellipse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;25&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;at&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Resulting in a shape like such:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TazV1vCV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760224433/sVD58nfQ7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TazV1vCV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760224433/sVD58nfQ7.png" alt="Clip path ellipse shape"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inset"&gt;
  &lt;/a&gt;
  Inset
&lt;/h3&gt;

&lt;p&gt;Another great option is the inset value. This can be used to inset from the box bounding.&lt;/p&gt;

&lt;p&gt;In basic it works like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;inset&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;top&lt;/span&gt; &lt;span class="nt"&gt;right&lt;/span&gt; &lt;span class="nt"&gt;bottom&lt;/span&gt; &lt;span class="nt"&gt;left&lt;/span&gt; &lt;span class="nt"&gt;round&lt;/span&gt; &lt;span class="nt"&gt;roundX&lt;/span&gt; &lt;span class="nt"&gt;roundY&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's try out a quite extreme issue to showcase what happens:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;clip-path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;inset&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;10&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;20&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;30&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;40&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="nt"&gt;round&lt;/span&gt; &lt;span class="err"&gt;15&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Resulting in a shape like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--25D2QFi---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760737372/v8s3pvw37.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--25D2QFi---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626760737372/v8s3pvw37.png" alt="CSS Inset shape"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#polygon"&gt;
  &lt;/a&gt;
  Polygon
&lt;/h3&gt;

&lt;p&gt;The last one is super versatile. It's called the polygon and accepts pairs of x/y coordinates.&lt;br&gt;
Making it possible to create impressive shapes with this.&lt;/p&gt;

&lt;p&gt;The basic properties work like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;polygon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;x1&lt;/span&gt; &lt;span class="nt"&gt;y1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;x2&lt;/span&gt; &lt;span class="nt"&gt;y2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's make a star shape and see how that works:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;clip-path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;polygon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="err"&gt;61&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;35&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="err"&gt;98&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;35&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="err"&gt;68&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;57&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="err"&gt;79&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;91&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;70&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="err"&gt;21&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;91&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="err"&gt;32&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;57&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;35&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;
  &lt;span class="err"&gt;39&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;35&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Resulting in a star shape like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7_9jJT1n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626761026204/i4xN0yNWV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7_9jJT1n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626761026204/i4xN0yNWV.png" alt="Clip path polygon star shape"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#svg-paths"&gt;
  &lt;/a&gt;
  SVG Paths
&lt;/h3&gt;

&lt;p&gt;The last resource we can use is an SVG path. Yes, you heard that right.&lt;/p&gt;

&lt;p&gt;Let's see how that works.&lt;/p&gt;

&lt;p&gt;First, we'll need a HTML resource that has a &lt;a href="https://daily-dev-tips.com/posts/svg-sprites/"&gt;SVG clip path&lt;/a&gt; definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"svg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;clipPath&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"triangle"&lt;/span&gt; &lt;span class="na"&gt;clipPathUnits=&lt;/span&gt;&lt;span class="s"&gt;"objectBoundingBox"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M0.05,0.05 h1 v1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/clipPath&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;clip-path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;#triangle&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Resulting in a shape like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xa_qvm68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626761778277/ZFagtNmSk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xa_qvm68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626761778277/ZFagtNmSk.png" alt="CSS Triangle shape"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#animating-clippaths"&gt;
  &lt;/a&gt;
  Animating clip-paths
&lt;/h2&gt;

&lt;p&gt;Another really cool thing we can do is animate the clip-paths.&lt;/p&gt;

&lt;p&gt;We can use these to animate our clip-paths, however, make sure they are compatible shapes.&lt;br&gt;
Meaning when using a polygon, for instance, keep the same amount of points to animate with.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;move&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="m"&gt;75%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;75%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="m"&gt;25%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can try this animate and all the other described properties on this Codepen.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/bGWrdwP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-resources"&gt;
  &lt;/a&gt;
  More resources
&lt;/h2&gt;

&lt;p&gt;Thank you for reading this article. I do hope you learned something new about clip-paths in CSS.&lt;/p&gt;

&lt;p&gt;If you are eager to read some more about this, check out these fantastic resources.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bennettfeely.com/clippy/"&gt;Clippy to make clip-paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tryshape.vercel.app/"&gt;TryShape by Tapas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path"&gt;MDN Clip-path docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
    </item>
    <item>
      <title>How to become a Microsoft Learn Student Ambassador (MLSA)</title>
      <author>Tarun Singh</author>
      <pubDate>Mon, 26 Jul 2021 06:12:34 +0000</pubDate>
      <link>https://dev.to/tarunsinghofficial/how-to-become-a-microsoft-learn-student-ambassador-mlsa-760</link>
      <guid>https://dev.to/tarunsinghofficial/how-to-become-a-microsoft-learn-student-ambassador-mlsa-760</guid>
      <description>&lt;p&gt;Want to be a part of world's largest student developer community? Want to learn, empower and lead in your college campus? Want to Grow your skills and build your reputation as a tech insider? &lt;/p&gt;

&lt;p&gt;Then this blog will tell you all about the Microsoft Learn student Ambassador (MLSA) program!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-microsoft-learn-student-ambassador-program"&gt;
  &lt;/a&gt;
  What is Microsoft Learn student Ambassador program?
&lt;/h2&gt;

&lt;p&gt;Microsoft Learn student Ambassador or MLSA is a program for students around the world to lead a community of technical people and students to grow and develop their technical and career skills for the future. &lt;br&gt;
The student ambassadors can connect with other students, host digital events, offer guidance to other students. Ambassadors also get support from Microsoft mentors, gets the opportunity to show off thier work in local and global challenges like the &lt;strong&gt;Microsoft Imagine Cup&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-is-a-microsoft-learn-student-ambassador"&gt;
  &lt;/a&gt;
  Who is a Microsoft Learn Student Ambassador?
&lt;/h2&gt;

&lt;p&gt;A Student Ambassador is leader who leads in thier commmunity to help their peers in learning new microsoft technology or invites in attending virtual events held by subject matter experts from Microsoft or the student ambassadors. They also gets the opportunity to develop their leadership and entrepreneurship skills through hosting events on their campus, networking with other students and Microsoft professionals, and building interdisciplinary skills such as public speaking, social media and personal branding, and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-you-eligible"&gt;
  &lt;/a&gt;
  Are you Eligible?
&lt;/h2&gt;

&lt;p&gt;All applying students must&lt;br&gt;
 Be at least 16 years old at the time of submission.&lt;br&gt;
 Be enrolled full-time in an accredited academic institution (e.g. College, University).&lt;br&gt;
 Have valid identification.&lt;br&gt;
Experience in Coding/Technology can be an advantage but it's not required. There are students from different backgrounds who get selected and after that they start learning new skills and technologies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-benefits-of-mlsa"&gt;
  &lt;/a&gt;
  What are the Benefits of MLSA?
&lt;/h2&gt;

&lt;p&gt;The student ambassadors gets a lot of benefits while being an community member of Microsoft like they get access to unique resources like the world's largest student network, a Microsoft 365 account, and some additional benefits that are listed below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You connect with other students worldwide and share each others passion in the leagues.&lt;/li&gt;
&lt;li&gt;You get the trainings and certifications from Microsoft, support for organising events, etc.&lt;/li&gt;
&lt;li&gt;You get recognized all over the community which you can share it in your resume.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-milestones-in-mlsa"&gt;
  &lt;/a&gt;
  What are the Milestones in MLSA?
&lt;/h2&gt;

&lt;p&gt;There are 3 milestones in this program and the benefits of these are given below:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-new-student-ambassador"&gt;
  &lt;/a&gt;
  1. New Student Ambassador-
&lt;/h3&gt;

&lt;p&gt;First, after acceptance to the program, you need to start with some learning paths and start engaged into the leagues to get promoted and unlock to the next level i.e, Alpha. You get some amazing benefits at this level which are given below:&lt;br&gt;
i. Access to Office 365&lt;br&gt;
ii. TechSmith Snagit and Camtasia screen capture and recording software &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-alpha"&gt;
  &lt;/a&gt;
  2. Alpha-
&lt;/h3&gt;

&lt;p&gt;This is basically your first official milestone as a MLSA in which you come after unlocking the new student ambassador level. You get some amazing benefits at this level which are given below:&lt;br&gt;
i. Free Linkedin Learning Premium Subscription&lt;br&gt;
ii. Free Microsoft Technical Certification (MTC) voucher&lt;br&gt;
iii. USD150 monthly azure credits&lt;br&gt;
iv. Visual Studio Enterprise Subscription&lt;br&gt;
v. Name.com domain name&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-beta"&gt;
  &lt;/a&gt;
  3. Beta-
&lt;/h3&gt;

&lt;p&gt;You can unlock Beta level after organizing and host a virtual event by demonstrating a Microsoft Technology. Once, you unlocked this level you get event supports from microsoft. You also get an invitation to attend the Microsoft Learn Student Ambassadors Summit&lt;br&gt;
You get some amazing benefits at this level which are given below:&lt;br&gt;
i. You get all above benefits.&lt;br&gt;
ii. Swags like, T-shirt, MLSA ID, etc.&lt;br&gt;
iii. Mentorship Support&lt;br&gt;
iv. Event Support&lt;br&gt;
v. Access to MLSA Summit&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-gold"&gt;
  &lt;/a&gt;
  4. Gold-
&lt;/h3&gt;

&lt;p&gt;Students who going above and beyond in hosting multiple events, serving regularly in the community, etc are invited to Gold level milestone. This level has multiple benefits which are given below:&lt;br&gt;
i. All Alpha and Beta benefits&lt;br&gt;
ii. You get access to special events and speaking engagements&lt;br&gt;
iii. Program Leadership opportunities&lt;br&gt;
iv. Participate in pilot programs&lt;br&gt;
v. Microsoft Most Valuable Professional (MVP) Mentorship&lt;br&gt;
vi. May be invited to MVP program&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Checkout the picture given below:&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VlQmMFN9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/59vbeciviluc07u0pfm1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VlQmMFN9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/59vbeciviluc07u0pfm1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-apply"&gt;
  &lt;/a&gt;
  How to Apply?
&lt;/h2&gt;

&lt;p&gt;The application process is opened throughout the year and you can apply anytime but the application is accepted in 4 quarters and it is quite easy to apply.&lt;br&gt;&lt;br&gt;
The application form includes the sections like a written sample, technology skills, and a short video introduction to know you and why you’re passionate about becoming a Microsoft Learn Student Ambassador.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Below are the steps with which you can apply:&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step1-visit-the-official-mlsa-site"&gt;
  &lt;/a&gt;
  Step1: Visit the Official MLSA site
&lt;/h3&gt;

&lt;p&gt;First go to &lt;a href="https://studentambassadors.microsoft.com/en-US/apply"&gt;https://studentambassadors.microsoft.com/en-US/apply&lt;/a&gt; and Log in to your microsoft account or just Create a new one (If you didn't have already!). Now, Click on Apply Now button.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--94XLdJ-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t81wyn8h3fmc0ehbe9rg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--94XLdJ-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t81wyn8h3fmc0ehbe9rg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step2-logging-in-to-the-application-form"&gt;
  &lt;/a&gt;
  Step2: Logging in to the Application Form
&lt;/h3&gt;

&lt;p&gt;Once you have logged in successfully, You will prompt with some Application Notification section which tells you about the Applications timeline. Just Read Once.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ybF0imPc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bngpg2pxyqc88ddlr8d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ybF0imPc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bngpg2pxyqc88ddlr8d.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step3-checking-privacy-and-terms"&gt;
  &lt;/a&gt;
  Step3: Checking Privacy and Terms
&lt;/h3&gt;

&lt;p&gt;Click Next, and Read and Accept all Privacy and Terms Agreement and move on to next step. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JZ02GqBL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/luwgiazamj5mqzgc97nf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JZ02GqBL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/luwgiazamj5mqzgc97nf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step4-filling-personal-information"&gt;
  &lt;/a&gt;
  Step4: Filling Personal Information
&lt;/h3&gt;

&lt;p&gt;At this stage, you'll be asked to fill out your personal information like, Name, DOB, Gender, Contact, etc. as shown in the below picture. Once, you've filled all info., move on to next step.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YUp8jiGG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxduynvihpzjojyjwqhv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YUp8jiGG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxduynvihpzjojyjwqhv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step5-filling-academic-details"&gt;
  &lt;/a&gt;
  Step5: Filling Academic Details
&lt;/h3&gt;

&lt;p&gt;Now, here you've to fill you academic details like College Name, Year of Graduation, etc. Fill all information carefully.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QGlBo-rJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6dli4h8bppq5k9nsn29.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QGlBo-rJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6dli4h8bppq5k9nsn29.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step6-answering-application-questions"&gt;
  &lt;/a&gt;
  Step6: Answering Application Questions
&lt;/h3&gt;

&lt;p&gt;Now comes, the main section which will decide your chances of getting selected ie., You have to answer 3 questions which should include 1 video of any one given question and 2 written answers of other questions. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#questions-are-given-below"&gt;
  &lt;/a&gt;
  Questions are given below:
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;What excites you about technology and why do you want other students to learn and explore?&lt;/li&gt;
&lt;li&gt;How would you take a technical concept and teach it to a friend or peer that has never heard of it?&lt;/li&gt;
&lt;li&gt;If you're hosting an event at your school, how would you get  students to attend?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5IaTjMx5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ci4dmnqea7orhijmdf34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5IaTjMx5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ci4dmnqea7orhijmdf34.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are some of my Tips with which you can succeed:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First of all, Be genuine in answering the questions and answer with honesty.&lt;/li&gt;
&lt;li&gt;Include all your achievements, your skills, your inspiration in technology, etc.&lt;/li&gt;
&lt;li&gt;Make sure your voice is clear and your communications skills should be good in the video.&lt;/li&gt;
&lt;li&gt;Tell why you want to become a member of this community and what and how can you help others.&lt;/li&gt;
&lt;li&gt;Tell them about your previous events that you had organised and how you got the participants to attend.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#step7-filling-social-media-details"&gt;
  &lt;/a&gt;
  Step7: Filling Social Media Details
&lt;/h3&gt;

&lt;p&gt;Now, here you have to give your all social media platforms details like Linkedin, Instagram, Twitter, Github Repository, etc. Make sure you make accounts if you haven't on any platform.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ahRGG26Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eofx0chf7k30v8ud4d3i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ahRGG26Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eofx0chf7k30v8ud4d3i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step8-additional-information"&gt;
  &lt;/a&gt;
  Step8: Additional Information
&lt;/h3&gt;

&lt;p&gt;Here you have to answer some additional information like, which technology interests you and any other information you would like to share with microsoft.&lt;/p&gt;

&lt;p&gt;Now click on Submit button to complete your application.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9o7Wz1pL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/535bapbzs8dxgv8f9z31.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9o7Wz1pL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/535bapbzs8dxgv8f9z31.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's all! Now you have completed the Application form! Just Wait for your result to come.&lt;/p&gt;

&lt;p&gt;Wait you also get your personalized Profile at Microsoft website like this one:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dAZPQy6m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7tv6137ezl9zdkd3669.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dAZPQy6m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7tv6137ezl9zdkd3669.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any doubt in filling this form, contact me on Linkedin- &lt;a href="https://www.linkedin.com/in/tarunsingh24/"&gt;https://www.linkedin.com/in/tarunsingh24/&lt;/a&gt; or Twitter- &lt;a href="https://twitter.com/itsTarun24"&gt;https://twitter.com/itsTarun24&lt;/a&gt;, I'll definitely help you in that.&lt;/p&gt;

&lt;p&gt;Thanks for reading this article! I hope it helps.&lt;/p&gt;

</description>
      <category>microsoft</category>
      <category>msftstudentambassadors</category>
      <category>mlsa</category>
      <category>msp</category>
    </item>
    <item>
      <title>Getting Started with React useContext Hook and React Context</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 26 Jul 2021 06:01:14 +0000</pubDate>
      <link>https://dev.to/alexdevero/getting-started-with-react-usecontext-hook-and-react-context-1dmi</link>
      <guid>https://dev.to/alexdevero/getting-started-with-react-usecontext-hook-and-react-context-1dmi</guid>
      <description>&lt;p&gt;React context makes it easy to create globally accessible data, and states. The useContext hook allows you to work with React contexts from anywhere and pass its data throughout your app. This tutorial will show you how to create new context, how to get values from it and how to change them.&amp;lt;!--more--&amp;gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-context-global-states-prop-drilling"&gt;
  &lt;/a&gt;
  React context, global states, prop drilling
&lt;/h2&gt;

&lt;p&gt;When you work with data they are usually one of two types, global or local. Global can be accessed from anywhere. Local only from the place where they are defined, and down the tree. This also applies to states. You can have global states and you can have local states. Which one is the best choice depends on situation.&lt;/p&gt;

&lt;p&gt;React context API makes it easy to create these global states. That said, there is one problem with these global states. They are often difficult to use in nested components. It can take a lot of &lt;a href="https://kentcdodds.com/blog/prop-drilling"&gt;prop drilling&lt;/a&gt; to get the data from the top to where you need them. You may have to pass these data through multiple components.&lt;/p&gt;

&lt;p&gt;One way to solve this is making those data local. However, this would lead to duplicate code. It would also go against the idea of having one source of truth that is globally accessible. Another solution is to skip all prop drilling and simply reach to the context from the component where you need those data.&lt;/p&gt;

&lt;p&gt;This is the goal of the React useContext hook. The React useContext hook promises to help you with two things. First, to help you reach out to any context and from anywhere. Second, to work with values exposed through this context. This includes both, getting those values as well as changing them. Let's take a look at how it works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-context"&gt;
  &lt;/a&gt;
  The context
&lt;/h2&gt;

&lt;p&gt;Using React context requires getting done few things. First, you have to create a context. You achieve this by using &lt;code&gt;createContext()&lt;/code&gt; method shipped with React. This context will be the global state available for use across the app. Well, at least one them because your React app can contain infinite number of contexts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// context.jsx&lt;/span&gt;

&lt;span class="c1"&gt;// Import createContext() method from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create new context:&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that we are declaring the context as empty, basically assigning it &lt;code&gt;undefined&lt;/code&gt;. Don't worry. This doesn't mean this context will be empty forever. It will be empty just for now when you create it. Later, in the next step, you will add values to it. Also notice that we are exporting the context.&lt;/p&gt;

&lt;p&gt;The reason for this is simple. The useContext hook accepts a context as a parameter. So, if we want to use the useContext hook to access the context anywhere in the app the context itself must be also accessible anywhere. This means we must export it from where it is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-context-provider"&gt;
  &lt;/a&gt;
  The context provider
&lt;/h2&gt;

&lt;p&gt;The second thing you have to do is to create a provider for your new context. This provider is a component that provides your app with the value(s) stored inside the context. Provider wraps all components that should be able to access the context. This is important to remember.&lt;/p&gt;

&lt;p&gt;Components will be able to communicate with provider only if they are provider's children. It doesn't matter where in the component tree they are. What matters is that the provider is used as a wrapper somewhere in the tree above. In general, provider is used as a wrapper for the entire app.&lt;/p&gt;

&lt;p&gt;This guarantees that any component in the app will be able to communicate with the provider. If you have multiple providers, you can wrap one inside another while keeping the app as the last child. This will ensure the app has access to all providers up the tree. Now, let's create the provider.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-context-provider"&gt;
  &lt;/a&gt;
  Creating the context provider
&lt;/h3&gt;

&lt;p&gt;Creating the provider is similar to creating a regular React component. Nowadays, provider is usually created as a function component. You give this component some name. It is a good practice to end the name with "Provider". It makes it easier to understand the code when you read it.&lt;/p&gt;

&lt;p&gt;Inside this component, you can use any react hook you want. For example, you can use &lt;a href="https://blog.alexdevero.com/react-usestate-hook-in-action/"&gt;useState hook&lt;/a&gt; to create new state for the provider. You can then expose this state by setting it as a value for the provider. This will make it available for any component wrapped with the provider.&lt;/p&gt;

&lt;p&gt;You can also use &lt;a href="https://blog.alexdevero.com/react-usecallback-hook/"&gt;useCallback hook&lt;/a&gt; to create memoized functions. These functions can work with the state, update its values. You can also expose these functions by setting them as values for the provider. Again, this will make them available for components wrapped with the provider.&lt;/p&gt;

&lt;p&gt;The most important part is where the rendering happens, what follows the &lt;code&gt;return&lt;/code&gt; statement. Here, you will use the context for the first time. The context you've previously created also contains a provider component your new provider will render. You can access this provider component using object dot notation (&lt;code&gt;newContext.Provider&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Since we want to use this provider as a wrapper, it should render any children it wraps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// context.jsx&lt;/span&gt;

&lt;span class="c1"&gt;// Import createContext() method from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create new context:&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// Create new provider component:&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NewProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Render Provider provided by previously created context: */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;newContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Render Provider's children: */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;newContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to also export your new Provider component so you can use it where you need it. The next step is to take the Provider and use it as a wrapper for the components for which you want to make the data provided by this provider accessible. You can also use it to wrap the main app component.&lt;/p&gt;

&lt;p&gt;This will make anything exposed by the provider accessible to any component in the app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.jsx&lt;/span&gt;

&lt;span class="c1"&gt;// Import React and React-dom:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StrictMode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Import the NewProvider component:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NewProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./context&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Import app component:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create the main component:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Use the NewProvider to wrap the whole app: */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NewProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* The app component rendering all other components: */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;NewProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;rootElement&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adding-state-to-the-context-provider"&gt;
  &lt;/a&gt;
  Adding state to the context provider
&lt;/h3&gt;

&lt;p&gt;The provider itself is useless if it doesn't provide any value, or values, to the app. In order to fix this, you need two things. First, you need some value, some data, you want to be available through the provider. Second, you have to make this data accessible from the provider.&lt;/p&gt;

&lt;p&gt;The first can be fixed by creating new local state inside the provider. The useState hook will be perfect for this. The value of this state will be what you want to share across the app. Since useState hook also creates an update function, this will also give you a way to update this shared state.&lt;/p&gt;

&lt;p&gt;To fix the second thing, you have to add &lt;code&gt;value&lt;/code&gt; attribute to the &lt;code&gt;myContext.Provider&lt;/code&gt; component returned by the &lt;code&gt;NewProvider&lt;/code&gt; component. The value of this attribute can be anything from a &lt;a href="https://blog.alexdevero.com/javascript-basics-data-types-pt1/"&gt;primitive data type&lt;/a&gt; to an object. If you want to share a single value, the first will be sufficient.&lt;/p&gt;

&lt;p&gt;If you want to share multiple values, or values and functions, it will be better to use an object. It is nice to make values available across the app. Even better is to also allow changing these values across the app. So, let's go with the object. Let's create new state and expose both, the state and its update function via the provider.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// context.jsx&lt;/span&gt;

&lt;span class="c1"&gt;// Import createContext() method and useState hook from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create new context:&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// Create new provider component:&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NewProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create local state:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Prepare values to share:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// The state itself&lt;/span&gt;
    &lt;span class="nx"&gt;setState&lt;/span&gt; &lt;span class="c1"&gt;// The state update function&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Set "val" as the value for "value" attribute: */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;newContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;newContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#accessing-context-with-the-usecontext-hook"&gt;
  &lt;/a&gt;
  Accessing context with the useContext hook
&lt;/h2&gt;

&lt;p&gt;You are almost done. You have context, you have provider and you have something to share via the provider. You have also wrapped the app with the provider and exposed some value via the Provider's &lt;code&gt;value&lt;/code&gt; attribute. You can now access the state and setState function exposed via the provider anywhere in the app.&lt;/p&gt;

&lt;p&gt;To achieve this, you need just two things. The first thing is the React useContext hook. The second thing is the exported context, the one you created in the beginning with the &lt;code&gt;createContext()&lt;/code&gt; method. When you combine these two you will have immediate access to &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;setState&lt;/code&gt; you created in &lt;code&gt;NewProvider&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;Let's create the main &lt;code&gt;App&lt;/code&gt; component. You saw this component in the &lt;code&gt;index.jsx&lt;/code&gt; file as the direct child of the provider (Creating the context provider section). This component will be simple. It will contain two components: heading showing welcome message and current value of &lt;code&gt;state&lt;/code&gt; and input to update the &lt;code&gt;state&lt;/code&gt; via &lt;code&gt;setState&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You will get both, &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;setState&lt;/code&gt;, from the &lt;code&gt;newContext&lt;/code&gt; context. Remember that this context is provided by the &lt;code&gt;NewProvider&lt;/code&gt; component. You will get those values by calling the React useContext hook and passing the &lt;code&gt;newContext&lt;/code&gt; context as an argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import useContext hook from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Import newContext context:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;newContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./context&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create the App component:&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Access the state and setState values in newContext:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Display the value of "state" */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Change name:&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*
        Use "setState" update function to update the current value
        of "state" with the current value of input:
      */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#multiple-contexts"&gt;
  &lt;/a&gt;
  Multiple contexts
&lt;/h2&gt;

&lt;p&gt;There is basically no limit to how many contexts, and providers, you can have in your React app. You can have as many as you want, as long as you remember to add each provider as a wrapper. For example, we can add additional context for email to this simple sample app. This will require new context and new Provider component.&lt;/p&gt;

&lt;p&gt;First, let's create new context for email. This will be almost a mirror copy of the context you already have. You will mostly change just the names.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// email-context.jsx&lt;/span&gt;

&lt;span class="c1"&gt;// Import createContext() method from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create new context:&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emailContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// Create new email provider component:&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;EmailProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create local state for email:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Prepare values for sharing:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Render emailContext.Provider exposing "val" variable:&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;emailContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Render children components: */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;emailContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, you have to import the email context in the main file, where you render the &lt;code&gt;App&lt;/code&gt; to the root element. When you have multiple providers their order doesn't really matter. Important thing that the app, or some component where you want to use data from those providers, is wrapped with those providers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StrictMode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NewProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./context&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Import new email provider:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;EmailProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./email-context&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Add email provider as another wrapper of the App component: */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EmailProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NewProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;NewProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;EmailProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;rootElement&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that, you can now use the React useContext hook with &lt;code&gt;emailContext&lt;/code&gt; to access the &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;setEmail&lt;/code&gt; anywhere in the app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;newContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./context&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Import new email context:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;emailContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./email-context&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Access the email and setEmail values in emailContext:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Render the value of "email": */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Hello &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;, &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Change name:&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Change email:&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*
        Allow to to update the current value of "email"
        via the "setEmail" update function and text input:
      */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-getting-started-with-react-usecontext-hook-and-react-context"&gt;
  &lt;/a&gt;
  Conclusion: Getting started with React useContext hook and react context
&lt;/h2&gt;

&lt;p&gt;Creating global states with React context is very easy. With the help of React useContext hook it is also easy to access these contexts and their data. I hope that this tutorial helped you understand how to create contexts and their providers and how to use useContext hook to communicate with them.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The most overlooked skill to improve developer productivity</title>
      <author>Jelle Smeets</author>
      <pubDate>Mon, 26 Jul 2021 05:58:07 +0000</pubDate>
      <link>https://dev.to/smeetsmeister/the-most-overlooked-skill-to-improve-developer-productivity-5g5i</link>
      <guid>https://dev.to/smeetsmeister/the-most-overlooked-skill-to-improve-developer-productivity-5g5i</guid>
      <description>&lt;p&gt;If you would ask a developer how they can be more productive you would probably get a lot of technical things. Speed up the pipeline, make sure the tests run faster, have fewer meetings. But besides all the technical things that can be improved, there is one on a personal level that is usually overlooked. Do you know some senior developers that have tons of experience but still use the hunt and peck (or the two-finger typing) method? That's right, fast type learning, or learning how to touch type can boost your productivity tremendously!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-fast-type-learning"&gt;
  &lt;/a&gt;
  Benefits of fast type learning
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#improving-your-workspeed"&gt;
  &lt;/a&gt;
  Improving your workspeed
&lt;/h4&gt;

&lt;p&gt;The obvious benefit of fast typing is to increase your work speed. With touch typing, you are no longer limited to your fingers keeping up with your thinking. This helps in writing code, Writing documentation, responding to emails/slack messages, or writing awesome blog posts. Imagine the productivity gains if everything you do with a keyboard happens twice as fast?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mental-capacity"&gt;
  &lt;/a&gt;
  Mental capacity
&lt;/h4&gt;

&lt;p&gt;Another great benefit of touch typing is that over time you can type without giving it thought. With the infamous hunt and pecker method, you need to take your concentration away from what you are doing, to look at the keyboard. With touch typing, all your valuable focus can stay on what you are doing!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#accuracy"&gt;
  &lt;/a&gt;
  Accuracy
&lt;/h4&gt;

&lt;p&gt;Besides just faster typing, and less focus drain, the last big benefit is accuracy. With touch typing, you will make fewer mistakes, which also decreases the time you will need to correct those mistakes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--czZZcCfb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30zzc8bz5jjt9zyvmyme.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--czZZcCfb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30zzc8bz5jjt9zyvmyme.jpg" alt="Speed of typing"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;How fast you can look using touch typing&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools"&gt;
  &lt;/a&gt;
  Tools
&lt;/h2&gt;

&lt;p&gt;There are several tools that can help you in learning how to type fast.&lt;/p&gt;

&lt;p&gt;It is good to know your starting point. How many words per minute can you type? The average is around 40 words per minute. You can use &lt;a href="https://10fastfingers.com/"&gt;10 Fast Fingers&lt;/a&gt; to determine what you score. My score is 98 words per minute. Did you beat me?&lt;/p&gt;

&lt;p&gt;There are several great resources on the internet that can teach you touch typing. Surprisingly the one I did when I was in elementary school is still around, but I won't recommend it unless you are twelve, like space, and most importantly want to learn it in Dutch. A great free option is &lt;a href="https://www.typingclub.com/"&gt;Typing Club&lt;/a&gt;. But there are many other options depending on your budget.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Touch typing can give your productivity a big boost! Touch typing results in code being written faster, less focus slipping away because you have to look at your keyboard, and fewer typing mistakes to correct! A win-win!&lt;/p&gt;

&lt;p&gt;Do you already know how to touch type, and you are proud of the words you can type per minute? Or are you a master of the hunt and peck method? Let me know in the comments below.&lt;/p&gt;

&lt;p&gt;If you are interested in similar posts, I recommend checking the &lt;a href="https://blog.jellesmeets.nl/articles/remote-onboarding-with-the-buddy-system/"&gt;Onboarding with the buddy system&lt;/a&gt; page. or following me on &lt;a href="https://twitter.com/smeetsmeister"&gt;Twitter&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>productivity</category>
      <category>improvement</category>
    </item>
    <item>
      <title>The Curated List of Ultimate Java Resources 🧵</title>
      <author>Neha Soni</author>
      <pubDate>Mon, 26 Jul 2021 05:48:03 +0000</pubDate>
      <link>https://dev.to/nehasoni__/the-curated-list-of-ultimate-java-resources-5amk</link>
      <guid>https://dev.to/nehasoni__/the-curated-list-of-ultimate-java-resources-5amk</guid>
      <description>&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt; is one of the best and most widely used programming language. The main reason for this is because it is safe, portable, maintainable, and comes with better high-level concurrency tools. If you are getting started with Java or a senior Java developer and looking for the best Java resources to learn then you have come to the right place. In this blog post, I am going to share the ultimate java resources. &lt;/p&gt;

&lt;p&gt;Java documentation has all the information you need to make your project a smashing success. Refer to this link to navigate to  &lt;a href="https://docs.oracle.com/en/java/"&gt;Java Official Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-java-ide"&gt;
  &lt;/a&gt;
  1.) Java IDE
&lt;/h1&gt;

&lt;p&gt;An integrated development environment (IDE) is software for building applications that combines common developer tools into a single graphical user interface. An IDE normally consists of at least a source code editor, build automation tools and a debugger.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Download Link&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Eclipse&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.eclipse.org/downloads/"&gt;Download Now&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache NetBeans&lt;/td&gt;
&lt;td&gt;&lt;a href="https://netbeans.apache.org//"&gt;Download Now&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BlueJ&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.bluej.org/"&gt;Download Now&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IntelliJ IDEA&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.jetbrains.com/idea/"&gt;Download Now&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Codeenvy&lt;/td&gt;
&lt;td&gt;&lt;a href="https://developers.redhat.com/products/codeready-workspaces/overview"&gt;Download Now&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JDeveloper&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.oracle.com/tools/downloads/jdeveloper-12c-downloads.html"&gt;Download Now&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JBoss Forge&lt;/td&gt;
&lt;td&gt;&lt;a href="https://forge.jboss.org/"&gt;Download Now&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JCreator&lt;/td&gt;
&lt;td&gt;&lt;a href="http://www.jcreator.org/download.htm"&gt;Download Now&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;My Eclipse&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.genuitec.com/products/myeclipse/"&gt;Download Now&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#2-best-websites-to-learn-java"&gt;
  &lt;/a&gt;
  2.) Best Websites to Learn Java
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://www.coursera.org/courses?query=java"&gt;Coursera&lt;/a&gt; (Paid Courses)&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.codecademy.com/catalog/language/java"&gt;Codecademy&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.w3schools.com/java/default.asp"&gt;w3schools.com&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.programiz.com/java-programming"&gt;Programiz&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.tutorialspoint.com/java/index.htm"&gt;Tutorials Point&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.udemy.com/topic/java/"&gt;Udemy&lt;/a&gt; (Paid Courses)&lt;/li&gt;
&lt;li&gt; &lt;a href="https://teamtreehouse.com/"&gt;Treehouse&lt;/a&gt; (Paid Courses)&lt;/li&gt;
&lt;li&gt; &lt;a href="https://javalessons.com/"&gt;Java Lessons&lt;/a&gt; (Paid Courses)&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.geeksforgeeks.org/java/"&gt;Geeks for Geeks&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.studytonight.com/java/"&gt;Studytonight&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://javabeginnerstutorial.com/core-java-tutorial/"&gt;Java Beginners Tutorial&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://progate.com/courses/java"&gt;Progate&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.javatpoint.com/java-tutorial"&gt; javatpoint&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.learnjavaonline.org/"&gt;Oracle Java Tutorials&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.sanfoundry.com/java-programming-examples/"&gt;Sanfoundry&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.java-examples.com/"&gt;Java Examples&lt;/a&gt;(Great source of Java Coding Ques)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#3-java-coding-practice-platforms"&gt;
  &lt;/a&gt;
  3.) Java Coding Practice Platforms
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.hackerrank.com/dashboard"&gt;HackerRank&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.coderbyte.com/"&gt;Coderbyte&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.codeabbey.com/index/task_list"&gt;CodeAbbey&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://codingbat.com/java"&gt;CodingBat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problemset/all/"&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codechef.com/problems/easy/"&gt;CodeChef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codewars.com/collections/java-basics"&gt;Codewars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hackerrank.com/contests/projecteuler/challenges"&gt;ProjectEuler+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codegym.cc/tasks"&gt;CODEGYM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#4-youtube-channels-for-java-developers"&gt;
  &lt;/a&gt;
  4.) YouTube Channels for Java Developers
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/user/java"&gt;Java&lt;/a&gt; (Oracle’s YouTube channel) &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/c/ThoughtsOnJava/videos"&gt;Thoughts on Java&lt;/a&gt; (Hibernate tutorials)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLE7E8B7F4856C9B19"&gt;Derek Banas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=eIrMbAQSU34"&gt;Programming with Mosh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=hBh_CC5y8-s"&gt;Edureka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=8cm1x4bC610"&gt;Telusko&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=grEKMHGYyns"&gt;freeCodeCamp.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/thenewboston/playlists"&gt;The New Boston&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/SpringSourceDev"&gt;Spring Developer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCT0bL2CQIk1eANeXk57mxaA"&gt;NightHacking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=VHbSopMyc4M&amp;amp;list=PLBlnK6fEyqRjKA_NuK9mHmlk0dZzuP1P5"&gt;Neso Academy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=CFD9EFcNZTQ"&gt;Simplilearn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#5-best-courses-to-learn-java"&gt;
  &lt;/a&gt;
  5.) Best Courses to Learn Java
&lt;/h1&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Course Name&lt;/th&gt;
&lt;th&gt;Provider&lt;/th&gt;
&lt;th&gt;Link&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Java Programming for Complete Beginners&lt;/td&gt;
&lt;td&gt;Udemy&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.eclipse.org/downloads/"&gt;Click Here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java In-Depth: Become a Complete Java Engineer&lt;/td&gt;
&lt;td&gt;Udemy&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.udemy.com/course/java-in-depth-become-a-complete-java-engineer/"&gt;Click Here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Object Oriented Programming in Java&lt;/td&gt;
&lt;td&gt;Coursera&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.coursera.org/learn/object-oriented-java"&gt;Click Here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java Programming Masterclass covering Java 11 &amp;amp; Java 17&lt;/td&gt;
&lt;td&gt;Udemy&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.udemy.com/course/java-the-complete-java-developer-course/"&gt;Click Here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java Fundamentals&lt;/td&gt;
&lt;td&gt;Pluralsight&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.pluralsight.com/courses/java-fundamentals-language"&gt;Click Here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data Structures and Algorithms: Deep Dive Using Java&lt;/td&gt;
&lt;td&gt;Udemy&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.udemy.com/course/data-structures-and-algorithms-deep-dive-using-java/"&gt;Click Here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Basics of Java with Data Structures and Algorithms&lt;/td&gt;
&lt;td&gt;Coding Ninjas&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.codingninjas.com/v2/courses/online-java-course"&gt;Click Here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#6-java-books"&gt;
  &lt;/a&gt;
  6.) Java Books
&lt;/h1&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Book Name&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;th&gt;Link&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Head First Java&lt;/td&gt;
&lt;td&gt;Kathy Sierra &amp;amp; Bert Bates&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.amazon.in/Head-First-Java-Kathy-Sierra/dp/0596009208?tag=hackr0df-21&amp;amp;geniuslink=true"&gt;Buy Now&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Beginning Programming with Java For Dummies (5th Edition)&lt;/td&gt;
&lt;td&gt;Barry Burd&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.amazon.com/Beginning-Programming-Java-Dummies-Computer/dp/1119235537"&gt;Buy Now&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Core Java Volume I – Fundamentals&lt;/td&gt;
&lt;td&gt;Cay S. Horstmann&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.amazon.in/Core-Java-I-Fundamentals-11th-Horstmann/dp/0135166306?tag=hackr0df-21&amp;amp;geniuslink=true"&gt;Buy Now&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java - The Complete Reference&lt;/td&gt;
&lt;td&gt;Herbert Schildt&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.amazon.in/Java-Complete-Reference-Eleventh/dp/1260440230?tag=hackr0df-21&amp;amp;geniuslink=true"&gt;Buy Now&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Head First Object-Oriented Analysis Design&lt;/td&gt;
&lt;td&gt;Brett D. McLaughlin, Gary Pollice &amp;amp; David West&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.amazon.in/Head-First-Object-Oriented-Analysis-Design/dp/0596008678?tag=hackr0df-21&amp;amp;geniuslink=true"&gt;Buy Now&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java Generics and Collections&lt;/td&gt;
&lt;td&gt;Maurice Naftalin, Philip Wadler&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.oreilly.com/library/view/java-generics-and/0596527756/"&gt;Buy Now&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java: Programming Basics for Absolute Beginners&lt;/td&gt;
&lt;td&gt;Nathan Clark&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.amazon.com/Java-Programming-Beginners-Step-Step/dp/1978104472/"&gt;Buy Now&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Think Data Structures: Algorithms and Information Retrieval in Java&lt;/td&gt;
&lt;td&gt;Allen B. Downey&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.amazon.in/Think-Data-Structures-Allen-Downey/dp/1491972394"&gt;Buy Now&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Thinking in Java&lt;/td&gt;
&lt;td&gt;Bruce Eckel&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.amazon.com/Thinking-Java-4th-Bruce-Eckel/dp/0131872486/"&gt;Buy Now&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cracking the Coding Interview&lt;/td&gt;
&lt;td&gt;Gayle Laakmann McDowell&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.amazon.in/Cracking-Coding-Interview-Programing-Questions/dp/0984782850"&gt;Buy Now&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#7-java-frameworks-for-web-development"&gt;
  &lt;/a&gt;
  7.) Java Frameworks for Web Development
&lt;/h1&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Resources&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Spring&lt;/td&gt;
&lt;td&gt;-  &lt;a href="https://spring.io/guides#tutorials"&gt;Tutorials&lt;/a&gt;  &lt;br&gt; - &lt;a href="https://www.javatpoint.com/spring-boot-tutorial"&gt;Learn Spring Boot Tutorial - javatpoint&lt;/a&gt; &lt;br&gt; - &lt;a href="https://www.youtube.com/watch?v=9SGDpanrc8U"&gt;Spring Boot Tutorial - Full Course [2021]&lt;/a&gt; (Video Tutorial)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hibernate&lt;/td&gt;
&lt;td&gt;- &lt;a href="https://www.javatpoint.com/hibernate-tutorial"&gt;Learn Hibernate Tutorial - javatpoint&lt;/a&gt; &lt;br&gt; - &lt;a href="https://howtodoinjava.com/hibernate-tutorials/"&gt;Hibernate Tutorial - HowToDo InJava&lt;/a&gt; &lt;br&gt; - &lt;a href="https://www.javacodegeeks.com/hibernate-tutorials"&gt;Hibernate Tutorials :  Java Code Geeks - 2021&lt;/a&gt; &lt;br&gt; - &lt;a href="https://www.youtube.com/watch?v=0KCKBv6rbkc"&gt;Hibernate Full Course - Simplilearn&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JSF(Java Server Faces)&lt;/td&gt;
&lt;td&gt;- &lt;a href="https://www.tutorialspoint.com/jsf/index.htm"&gt;JavaServer Faces (JSF) Tutorial&lt;/a&gt;  &lt;br&gt; - &lt;a href="https://www.udemy.com/course/jsf-tutorial/"&gt;JSF 2.2 - Java Server Faces for Beginners - Build a DB App&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Struts&lt;/td&gt;
&lt;td&gt;- &lt;a href="https://www.journaldev.com/2134/struts-tutorial-for-beginners"&gt;Struts Tutorial for Beginners&lt;/a&gt;  &lt;br&gt; - &lt;a href="https://www.codejava.net/struts-tutorials"&gt;Struts Framework Tutorials - CodeJava.net&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Play&lt;/td&gt;
&lt;td&gt;- &lt;a href="https://www.javacodegeeks.com/play-framework-tutorials"&gt; Play Framework Tutorials : Java Code Geeks - 2021&lt;/a&gt;   &lt;br&gt; - &lt;a href="https://dvirf1.github.io/play-tutorial/"&gt;Play Framework Tutorial&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spark&lt;/td&gt;
&lt;td&gt;- &lt;a href="https://sparkjava.com/documentation#getting-started"&gt;Documentation - Spark Framework&lt;/a&gt; &lt;br&gt; - &lt;a href="https://www.youtube.com/watch?v=dY5099JlQV8"&gt;Spark Java Tutorial &lt;/a&gt; (Video Tutorial)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Google Web Toolkit&lt;/td&gt;
&lt;td&gt;- &lt;a href="http://www.gwtproject.org/doc/latest/tutorial/index.html"&gt;GWT: Tutorials&lt;/a&gt; &lt;br&gt; - &lt;a href="https://www.javatpoint.com/gwt-tutorial"&gt;Learn GWT Tutorial - javatpoint&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#8-java-github-repositories"&gt;
  &lt;/a&gt;
  8.) Java GitHub Repositories
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://github.com/in28minutes/java-a-course-for-beginners"&gt;Java a course for beginners&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/iluwatar/java-design-patterns"&gt;Java Design Patterns&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/TheAlgorithms/Java"&gt;TheAlgorithms/Java&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/akullpp/awesome-java"&gt;Awesome Java&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/winterbe/java8-tutorial"&gt;Java8-tutorial&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/spring-projects/spring-framework"&gt;spring framework&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#9-java-project-ideas"&gt;
  &lt;/a&gt;
  9.) Java Project Ideas
&lt;/h1&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Project Name&lt;/th&gt;
&lt;th&gt;Source Code&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Currency Convertor Mini Project&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/projectworldsofficial/currency-converter-in-java"&gt;Click Here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Airline Ticket Reservation System&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/Hasindu1/Airline-Ticket-Reservation-System-Java-Swing"&gt;Click Here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OnlineBookStore Website Using Java&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/shashirajraja/onlinebookstore"&gt;Click Here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Snake Game&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/janbodnar/Java-Snake-Game"&gt;Click Here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Online Examination System project&lt;/td&gt;
&lt;td&gt;&lt;a href="https://projectsgeek.com/2014/06/online-examination-system-project-java.html"&gt;Click Here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Speech To Text Conversion using Java API&lt;/td&gt;
&lt;td&gt;&lt;a href="https://cse.mini-projects.in/a/78-speech-to-text-conversion-using-java-api.html"&gt;Click Here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Inventory Management System&lt;/td&gt;
&lt;td&gt;&lt;a href="https://itsourcecode.com/free-projects/java-projects/inventory-management-system-java-project-with-source-code/"&gt;Click Here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hospital Management System&lt;/td&gt;
&lt;td&gt;&lt;a href="https://itsourcecode.com/free-projects/java-projects/project-on-hospital-management-system-in-java-with-source-code/"&gt;Click Here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;URL Shortner&lt;/td&gt;
&lt;td&gt;&lt;a href="https://gist.github.com/rakeshsingh/64918583972dd5a08012"&gt;Click Here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chatting Application&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://www.youtube.com/watch?v=0JgfnMdNt5Q&amp;amp;list=PL5BFcXE899zyMaBM7o3MPwd2d5qv1l4AR"&gt;Click Here&lt;/a&gt; (Video Tutorial)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Creating an Online Quiz Application Using JSP Servlet&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.edureka.co/blog/creating-an-online-quiz-application-using-jsp-servlet/"&gt;Click Here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Course Management System&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.codewithc.com/course-management-system-java-project/"&gt;Click Here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Simple Food Order System&lt;/td&gt;
&lt;td&gt;&lt;a href="https://code-projects.org/simple-food-order-system-in-java-with-source-code/"&gt;Click Here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tic-Tac-Toe Game&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/nishusharma1608/tic-tac-toe"&gt;Click Here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Smart City Project&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.codewithc.com/smart-city-java-project/"&gt;Click Here&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#10-best-hosting-platforms-for-java-projects"&gt;
  &lt;/a&gt;
  10.) Best Hosting Platforms for Java Projects
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;  &lt;a href="https://aws.amazon.com/"&gt;AWS&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.bluehost.com/"&gt;Bluehost&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://cloud.google.com/gcp/"&gt;Google Cloud&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.inmotionhosting.com/"&gt;InMotion Hosting&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.hostinger.com/vps-hosting"&gt;Hostinger&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://azure.microsoft.com/en-in/develop/java/"&gt;Azure&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#11-blogging-platforms-where-you-can-read-and-get-updates-about-java"&gt;
  &lt;/a&gt;
  11.) Blogging Platforms where you can read and get Updates about Java
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://blogs.oracle.com/java/"&gt;Oracle Blog&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.java2s.com/Tutorials/Java/"&gt;Java Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://javapapers.com/category/java/"&gt;Javapapers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://java2blog.com/core-java-tutorial-for-beginners-experienced/"&gt;Java2Blog&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.infoworld.com/category/java/"&gt;JAVAWORLD&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/#axzz71dnICuke"&gt;Javarevisited &lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://blog.frankel.ch/"&gt;A Java Geek&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Inspired by &lt;a class="mentioned-user" href="https://dev.to/ayushi7rawat"&gt;@ayushi7rawat&lt;/a&gt;
 's blog post  &lt;a href="https://ayushirawat.com/the-ultimate-python-resource-hub"&gt;The Ultimate Python Resource hub&lt;/a&gt;&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;If you want me to add anything, feel free to post your suggestion in the comments box. If you enjoyed learning and find it useful please do like and share so that, it reaches others as well 🤝&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading 😃
&lt;/h3&gt;

&lt;p&gt;I would ❤ to connect with you at  &lt;a href="https://twitter.com/nehasoni__"&gt;Twitter&lt;/a&gt;  |  &lt;a href="https://www.linkedin.com/in/neha-soni-70a6231b1/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/nehasoni05"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You should definitely check out my other Blogs:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/top-10-useful-github-repos-for-self-development-25c0"&gt;Top 10 Useful GitHub Repos for Self-Development&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/how-to-setup-billing-alarm-in-aws-4144"&gt;How to SetUp Billing Alarm in AWS&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/amazon-web-services-an-overview-2okc"&gt;Amazon Web Services- An Overview&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/cloud-computing-an-overview-4ib3"&gt;Cloud Computing- An Overview&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/plasma-donation-website-using-mern-stack-26f5"&gt;Plasma Donation Website&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/random-quote-generator-using-html-css-and-javascript-3gbp"&gt;Random Quote Generator Using HTML, CSS, and JavaScript&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/digital-clock-using-javascript-2648"&gt;Digital Clock using JavaScript&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/introduction-to-javascript-basics-g6n"&gt;Introduction to JavaScript: Basics&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/playing-with-javascript-objects-k4h"&gt;Playing with JavaScript Objects&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nehasoni__/7-javascript-data-structures-you-must-know-57ah"&gt;7 JavaScript Data Structures you must know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/digital-clock-using-javascript-2648"&gt;Digital Clock using JavaScript&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See you in my next Blog article, Take care!!&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Happy Learning😃😃&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>The Simple Guide to Programming Paradigms</title>
      <author>Tamerlan Gudabayev</author>
      <pubDate>Mon, 26 Jul 2021 05:44:38 +0000</pubDate>
      <link>https://dev.to/tamerlang/the-simple-guide-to-programming-paradigms-36o</link>
      <guid>https://dev.to/tamerlang/the-simple-guide-to-programming-paradigms-36o</guid>
      <description>&lt;p&gt;I've published over 30 articles this past year, with that comes a lot of research and I've seen so many different programming paradigms that I just have to write about it. &lt;/p&gt;

&lt;p&gt;But before we begin, we first got to know what is a programming paradigm. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#programming-paradigms"&gt;Programming Paradigms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#the-dark-ages"&gt;The Dark Ages&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#structured-programming"&gt;Structured Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#imperative-programming"&gt;Imperative Programming&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#procedural-programming"&gt;Procedural Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#object-oriented%20programming"&gt;Object-Oriented Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#declarative-programming"&gt;Declarative Programming&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#logic-programming"&gt;Logic Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#functional-programming"&gt;Functional Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reactive-programming"&gt;Reactive Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#programming-paradigms"&gt;
  &lt;/a&gt;
  Programming Paradigms
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BQYYAHol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ij9stms106ts6ktycq5f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BQYYAHol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ij9stms106ts6ktycq5f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As developers our number one enemy is complexity. &lt;/p&gt;

&lt;p&gt;I'm sure you've heard the term, "If I had more time, I would've made the program simpler". &lt;/p&gt;

&lt;p&gt;Because simpler code is more maintainable and can be easily debugged. &lt;/p&gt;

&lt;p&gt;In a nutshell: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Complexity is the enemy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To battle complexity, software developers have created different &lt;strong&gt;programming paradigms or styles of programming&lt;/strong&gt;, similar to martial arts. It's not bound to a specific programming language, but some languages are more suited to one style.&lt;/p&gt;

&lt;p&gt;Let's go over the history of these paradigms.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-dark-ages"&gt;
  &lt;/a&gt;
  The Dark Ages
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kSXyhkOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c056nmideoatd6uipcus.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kSXyhkOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c056nmideoatd6uipcus.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The earliest known programming paradigm was called &lt;strong&gt;non-structured&lt;/strong&gt;. It was barbaric due to the use of &lt;a href="https://en.wikipedia.org/wiki/Goto"&gt;goto&lt;/a&gt; statements to literally jump to different areas of the code. &lt;/p&gt;

&lt;p&gt;It got the job done, but at what cost?&lt;/p&gt;

&lt;p&gt;Unreadable or spaghetti code. &lt;/p&gt;

&lt;p&gt;Many people complained about the brutality of non-structured programming, it was horrible to maintain and debug. &lt;/p&gt;

&lt;p&gt;Until one day, a man by the name of &lt;a href="https://en.wikipedia.org/wiki/Edsger_W._Dijkstra"&gt;Edsger W. Dijkstra&lt;/a&gt; advocated against using &lt;a href="https://en.wikipedia.org/wiki/Goto"&gt;goto&lt;/a&gt; or equivalent. &lt;/p&gt;

&lt;p&gt;Thus creating his own style of programming called &lt;strong&gt;structured programming&lt;/strong&gt; and ending the dark ages of non-structured.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#structured-programming"&gt;
  &lt;/a&gt;
  Structured Programming
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mIRnk-L5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3y4aorg9rbrh0umndil.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mIRnk-L5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3y4aorg9rbrh0umndil.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The school of structured programming brought many successes. &lt;/p&gt;

&lt;p&gt;Computer programs had more clarity, quality, and were made faster than ever. &lt;/p&gt;

&lt;p&gt;Structured programming advocated the use of structured control flow such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Conditionals&lt;/strong&gt; — &lt;code&gt;if/then/else&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Repetition&lt;/strong&gt; — &lt;code&gt;while/for&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Block Structures&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Functions&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They also completely rejected the use of dark arts, such as &lt;a href="https://en.wikipedia.org/wiki/Goto"&gt;goto&lt;/a&gt; or its equivalent. &lt;/p&gt;

&lt;p&gt;Structured programming was the default, and many new programming languages were created with structured programming in mind. &lt;/p&gt;

&lt;p&gt;Eventually, structured programming advanced so much that it was too divided into two new styles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#imperative-programming"&gt;
  &lt;/a&gt;
  Imperative Programming
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Db5vFbgv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zkasn2kvenilalfo6hsz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Db5vFbgv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zkasn2kvenilalfo6hsz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first of these new styles was imperative programming. &lt;/p&gt;

&lt;p&gt;Imperative programming is a programming paradigm that uses statements to change the programs state. It focuses on the &lt;strong&gt;HOW&lt;/strong&gt; by showing you the solution step by step. &lt;/p&gt;

&lt;p&gt;For example, let's say we were tasked to return even numbers from a list of integers.&lt;/p&gt;

&lt;p&gt;Imperatively we would solve it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here we know exactly what's happening, we can simply follow the code, and see how the solution works. &lt;/p&gt;

&lt;p&gt;Within imperative programming, there are also another two inner-schools.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#procedural-programming"&gt;
  &lt;/a&gt;
  Procedural Programming
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EXvPMUtm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxga2f90py7hqi1peufq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EXvPMUtm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxga2f90py7hqi1peufq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Procedural programming is a subset of imperative programming where we split the step by step instructions into procedures. &lt;/p&gt;

&lt;p&gt;But what is a procedure?&lt;/p&gt;

&lt;p&gt;A procedure is basically a function that &lt;strong&gt;DOESN'T&lt;/strong&gt; return any value, and &lt;strong&gt;ACHIEVES&lt;/strong&gt; some sort of side effect. &lt;/p&gt;

&lt;p&gt;A good example would be the classic loop in most programming languages.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It's essentially a function that doesn't return anything but causes side effects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits of Procedural Programming:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Excellent for general-purpose programming&lt;/li&gt;
&lt;li&gt;Because of the simplicity of the code, it's easier to implement compilers and interpreters&lt;/li&gt;
&lt;li&gt;Simplicity&lt;/li&gt;
&lt;li&gt;Ability to be highly modular&lt;/li&gt;
&lt;li&gt;The memory requirement is slow, making it fast and efficient&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Languages that support Procedural Programming:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C&lt;/li&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;Javascript&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#objectoriented-programming"&gt;
  &lt;/a&gt;
  Object-Oriented Programming
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J8loybZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jxsbqqrur15uk4xg0vi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J8loybZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jxsbqqrur15uk4xg0vi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Object-Orientated Programming is a subset of imperative programming where you structure your code in objects that can hold data (in form of fields) and code (in form of methods).&lt;/p&gt;

&lt;p&gt;Object-Oriented Programming is by far one of the most popular and widely used programming paradigms in our times. &lt;/p&gt;

&lt;p&gt;There are four main principles in Object Orientated Programming:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Encapsulation&lt;/strong&gt; - Binds data and it's related methods together within a class. It also protects the data by making fields private and giving access to them only through their related methods.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Abstraction&lt;/strong&gt; - It's the concept of object-oriented programming that "shows" only essential attributes and "hides" unnecessary information.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Inheritance&lt;/strong&gt; - It's the mechanism of basing an object or class upon another object or class, retaining similar implementation.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Polymorphism&lt;/strong&gt; - It's the ability of an object to take on many forms.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have another article, with an in-depth explanation for each of these principles. &lt;/p&gt;

&lt;p&gt;You can read it here.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/tamerlang" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mh3C64Gy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Wv8X9Koq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/536054/cc45dfd4-294a-458b-80eb-a1f8d155109d.jpeg" alt="tamerlang"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/tamerlang/oop-principles-for-dummies-2mbd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;OOP Principles For Dummies&lt;/h2&gt;
      &lt;h3&gt;Tamerlan Gudabayev ・ Mar 21 ・ 11 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#computerscience&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Benefits of Object Orientated Programming:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reusability due to inheritance&lt;/li&gt;
&lt;li&gt;Flexibility due to Polymorphism&lt;/li&gt;
&lt;li&gt;Security due to Encapsulation and Abstraction&lt;/li&gt;
&lt;li&gt;Lower costs due to reusability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Languages that support Object-Oriented Programming:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#declarative-programming"&gt;
  &lt;/a&gt;
  Declarative Programming
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--top2c0m9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k95ro2boqd5ubefikcr6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--top2c0m9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k95ro2boqd5ubefikcr6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the other hand of the spectrum we have declarative programming, it also comes from structured programming but unlike imperative programming where it focuses on the &lt;strong&gt;HOW&lt;/strong&gt;, declarative programming focuses on the &lt;strong&gt;WHAT&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;An example of a declarative programming language would be SQL (Structured Query Language). &lt;/p&gt;

&lt;p&gt;So let's say for example you want to get all rows from a table called &lt;code&gt;users&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You don't really care how &lt;code&gt;SELECT&lt;/code&gt; works, you simply want to get all users. &lt;/p&gt;

&lt;p&gt;Similar to imperative programming, declarative programming also has four inner schools.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#logic-programming"&gt;
  &lt;/a&gt;
  Logic Programming
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CgyTxRLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmkqdzzxxnidmwwkla2p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CgyTxRLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmkqdzzxxnidmwwkla2p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Logic Programming is a programming paradigm based on formal logic. Meaning that you have a bunch of facts/statements, and you get new statements that comply with the original facts.&lt;/p&gt;

&lt;p&gt;A classical example would be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Socrates is a Man&lt;/li&gt;
&lt;li&gt;All Men Are Mortal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From these two statements, we can conclude that Socrates is also mortal. &lt;/p&gt;

&lt;p&gt;But how is this expressed in code?&lt;/p&gt;

&lt;p&gt;Take a look at an example made in Prolog:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight prolog"&gt;&lt;code&gt;&lt;span class="ss"&gt;man&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Socrates&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="ss"&gt;mortal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:-&lt;/span&gt; &lt;span class="ss"&gt;man&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;span class="o"&gt;?-&lt;/span&gt; &lt;span class="ss"&gt;mortal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Socrates&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break this down:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first line expresses that Socrates is a man. &lt;/li&gt;
&lt;li&gt;The second line says "X is mortal if X is a man". &lt;/li&gt;
&lt;li&gt;The third line is our question that says "Is Socrates mortal?" which will return &lt;code&gt;yes&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Benefits of Logic Programming:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple to write code&lt;/li&gt;
&lt;li&gt;Easy to debug&lt;/li&gt;
&lt;li&gt;Fast development&lt;/li&gt;
&lt;li&gt;Ideal for expressing complex ideas and algorithms&lt;/li&gt;
&lt;li&gt;Allows data to be represented both extensionally and intentionally&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Languages that support Logic Programming:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prolog&lt;/li&gt;
&lt;li&gt;Absys&lt;/li&gt;
&lt;li&gt;ALF (algebraic logic functional programming language)&lt;/li&gt;
&lt;li&gt;Alice&lt;/li&gt;
&lt;li&gt;Ciao&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#functional-programming"&gt;
  &lt;/a&gt;
  Functional Programming
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zMCBh1lv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4c7ggnxprtu8i8s3m9m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zMCBh1lv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4c7ggnxprtu8i8s3m9m.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Functional Programming is by far the most used declarative programming paradigm, the basic premise is that programs are constructed by applying and composing functions. &lt;/p&gt;

&lt;p&gt;Let's take a look at this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Generating a Fibonnaci sequence&lt;/span&gt;
&lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Functional Programming has to follow a set of principles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Pure Functions&lt;/strong&gt; — All functions must be pure, meaning that it should have no side effects and it should be deterministic, returns the same result if given the same arguments&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Immutability&lt;/strong&gt; — When data is immutable, its state cannot change after it’s created. If you want to change an immutable object, you can’t. Instead, you create a new object with a new value.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Referential Transparency&lt;/strong&gt; — Basically because we got pure functions and immutability, we can replace all function calls with their underlying return values and the program would still work.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Functions as First-Class Entities&lt;/strong&gt; — It means that functions can be passed to other functions as arguments.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Higher-Order Functions&lt;/strong&gt; — Higher-Order functions are basically functions that accept other functions as arguments and returns a function as its result.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Benefits of Functional Programming:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It helps us to solve problems effectively in a simpler way.&lt;/li&gt;
&lt;li&gt;Improves modularity.&lt;/li&gt;
&lt;li&gt;Allows us to implement lambda calculus to solve complex problems.&lt;/li&gt;
&lt;li&gt;Reduces complex problems into simple pieces.&lt;/li&gt;
&lt;li&gt;Debugging is easy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Languages that support Functional Programming:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Haskell&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Scala&lt;/li&gt;
&lt;li&gt;Erlang&lt;/li&gt;
&lt;li&gt;Lisp&lt;/li&gt;
&lt;li&gt;Clojure&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#reactive-programming"&gt;
  &lt;/a&gt;
  Reactive Programming
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BZy3bFz9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjjzfjz1wzbuxwr0z237.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BZy3bFz9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjjzfjz1wzbuxwr0z237.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reactive programming is a programming paradigm that is concerned with data streams, and how it reacts to it. &lt;/p&gt;

&lt;p&gt;For example, you can have multiple streams (also called observers)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click events&lt;/li&gt;
&lt;li&gt;HTTP requests&lt;/li&gt;
&lt;li&gt;Ingested messages&lt;/li&gt;
&lt;li&gt;Availability notifications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For each stream, you have a subscriber that responds accordingly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits of Reactive Programming:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple to do asynchronous work&lt;/li&gt;
&lt;li&gt;Avoid “callback hell”&lt;/li&gt;
&lt;li&gt;Simple to compose streams of data&lt;/li&gt;
&lt;li&gt;Simplifies complex threading&lt;/li&gt;
&lt;li&gt;Cleaner and maintainable code&lt;/li&gt;
&lt;li&gt;Easy to implement back-pressure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Languages that support Reactive Programming:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scala&lt;/li&gt;
&lt;li&gt;Haskell&lt;/li&gt;
&lt;li&gt;Elm&lt;/li&gt;
&lt;li&gt;Javascript&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There aren't all the programming paradigms available, there are many others I couldn't cover in this article. But I covered the main ones at the least, and I hope you have a better understanding of each. &lt;/p&gt;

&lt;p&gt;Thanks for reading, and don't forget to follow me on Twitter.&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>beginners</category>
      <category>programming</category>
      <category>theory</category>
    </item>
    <item>
      <title>Anatomy of  a Flutter App</title>
      <author>Praveen Varma</author>
      <pubDate>Mon, 26 Jul 2021 04:22:23 +0000</pubDate>
      <link>https://dev.to/geekyprawins/anatomy-of-a-flutter-app-56g7</link>
      <guid>https://dev.to/geekyprawins/anatomy-of-a-flutter-app-56g7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#widgets-widgets-and-widgets"&gt;
  &lt;/a&gt;
  Widgets, widgets and widgets!
&lt;/h2&gt;

&lt;p&gt;So, as I mentioned before, everything inside a &lt;strong&gt;Flutter&lt;/strong&gt; app is a &lt;em&gt;&lt;a href="https://flutter.dev/docs/development/ui/widgets-intro"&gt;widget&lt;/a&gt;&lt;/em&gt;. And you build widgets upon widgets just like Lego blocks on Lego blocks in order to create your app.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--czph8SdM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyiacr5px1qcfiu9ffuk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--czph8SdM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyiacr5px1qcfiu9ffuk.jpg" alt="lego-blocks"&gt;&lt;/a&gt;&lt;br&gt;
So let's say that we decided to create a brand new app.&lt;/p&gt;

&lt;p&gt;The first thing we might do is we might create a &lt;em&gt;&lt;a href="https://api.flutter.dev/flutter/material/Scaffold-class.html"&gt;Scaffold&lt;/a&gt;&lt;/em&gt;. And this is just a blank screen for our app. And inside the scaffold, we're going to add an app bar at the top. And this is a pre-built widget that simply looks like an app bar and acts like an app bar. And it's also super easy to create.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--agIOr8Xp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9bnzyhkvc9yjhd9rm08.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--agIOr8Xp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9bnzyhkvc9yjhd9rm08.png" alt="flutter-appbar-layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, the other thing I'm going to put into my scaffold is a container. And this container is just a box and it's going to contain the content of my app. Now, the container is going to have a column. So this is a column. And so now we can put widgets inside the column that stack vertically.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JjBGT4jp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b7kj4tpi4uad58f87e1x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JjBGT4jp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b7kj4tpi4uad58f87e1x.png" alt="flutter-container"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, for example, the first thing I might put into my column - at the top - is a row. And the second thing is - I might put in - a piece of text. So now I have a column with two items - with two widgets: a row at the top and some text at the bottom. Now I can go deeper into my widget tree. And in my row, I'm going to add some text and an icon.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yPZjIhtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gs88debfocogruxizmuf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yPZjIhtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gs88debfocogruxizmuf.png" alt="phone"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So when I want widgets to be positioned vertically - one on top of the other - then I'll use a column to lay them out. If I want widgets to be side by side horizontally, then I'll use a row. And if I wanted to add in a piece of text, then I would use a text widget. If I wanted to add an icon, then I would use an icon widget. If I want to add an image, then I would use an image widget.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sZW9YYg_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wejuwm9psttfnhchij0l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sZW9YYg_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wejuwm9psttfnhchij0l.png" alt="0_7hLwrQ9PjkOa_hFQ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So you get the point.&lt;/p&gt;

&lt;p&gt;And by the end of building our app, we end up with a widget tree like what you see on the right here&lt;br&gt;
Now, our widget tree is just a whole bunch of widgets that are nested within each other.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KnhBWprc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1v5kwucqtzxxzrv86vk.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnhBWprc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1v5kwucqtzxxzrv86vk.PNG" alt="widgets"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for the read,&lt;br&gt;
Praveen Varma :)&lt;br&gt;
More Flutter repos can be found &lt;a href="https://github.com/geekyprawins"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>android</category>
      <category>ios</category>
      <category>dart</category>
    </item>
    <item>
      <title>Top 5 coolest VsCode Themes you should try.</title>
      <author>Dhruv Bansal</author>
      <pubDate>Mon, 26 Jul 2021 03:50:24 +0000</pubDate>
      <link>https://dev.to/thesmartdeveloper/top-5-coolest-vscode-themes-you-should-try-3031</link>
      <guid>https://dev.to/thesmartdeveloper/top-5-coolest-vscode-themes-you-should-try-3031</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-shades-of-purple"&gt;
  &lt;/a&gt;
  1) Shades of Purple
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x4HtnrTr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nnxu6bw1se7i7jrzrgba.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x4HtnrTr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nnxu6bw1se7i7jrzrgba.gif" alt="Shades of Purple"&gt;&lt;/a&gt;&lt;br&gt;
If you are a fan of purple, you are absolutely gonna love this theme. It was one of the first 'Shades of X' themes. Nowadays, you can find shades of orange, blue, pink, etc very easily in the Cs Code marketplace. Even if you are not a purple fan, this theme is worth giving a try.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=ahmadawais.shades-of-purple"&gt;Check it out here.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-synthwave-84"&gt;
  &lt;/a&gt;
  2) SynthWave 84
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UsxMes5t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlm27ew1lx55wt3uedl7.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UsxMes5t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlm27ew1lx55wt3uedl7.jpeg" alt="SynthWave"&gt;&lt;/a&gt;&lt;br&gt;
If you ever dreamt about neon themes in Vs Code, congrats, because your dreams just came true. This is the neon theme for VS Code, for all the Neon lovers. It can be customized as well as the neon glow can be turned on or off. &lt;br&gt;
According to me(and apparently a lot of other devs), this is the coolest VS Code theme ever developed.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=RobbOwen.synthwave-vscode"&gt;Check it out here.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-cyberpunk-2077-themes"&gt;
  &lt;/a&gt;
  3) Cyberpunk 2077 themes
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zcIK4l2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cx5rcdkp6saq3o4yifgz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zcIK4l2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cx5rcdkp6saq3o4yifgz.png" alt="Cyberpunk"&gt;&lt;/a&gt;&lt;br&gt;
This, as the name indicates, is inspired from the Cyberpunk 2077 game which was launched in 2020 last year. It looks super cool and will make you code even more and inspire you every day. It is worth a try.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=max-SS.cyberpunk"&gt;Check it out here.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-material-themes"&gt;
  &lt;/a&gt;
  4) Material Themes
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7BWSnjAC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ve72c4g7u3g3gg79uom.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7BWSnjAC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ve72c4g7u3g3gg79uom.jpeg" alt="Material"&gt;&lt;/a&gt;&lt;br&gt;
This is just a must have, and if you only want to install one theme from all the 5 i am telling about, this would be it. This theme is a collection of several themes flavoured to different styles like material oceanic, material palenight, etc. It merges well with the code and the syntax highlighting looks good.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=Equinusocio.vsc-material-theme"&gt;Check it out here.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-bearded-themes"&gt;
  &lt;/a&gt;
  5) Bearded Themes
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CwIsp3Zq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4066vpgmy5krxvqyoud.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CwIsp3Zq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4066vpgmy5krxvqyoud.png" alt="Bearded"&gt;&lt;/a&gt;&lt;br&gt;
Don't get fooled by its fancy name, this theme is a collection of 20 themes for different people and for different needs. It support syntax highlighting well and works well and is quite a  fast one.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=BeardedBear.beardedtheme"&gt;Check it out here.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There are 1000s of other themes available out there. But i thought these to be the most interesting ones and significantly different ones. So go ahead try out few themes and then go with the ones you love.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CZQgKI9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52mnl0jtmx08rt6tztao.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CZQgKI9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52mnl0jtmx08rt6tztao.gif" alt="That's a wrap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comment-your-favorite-vs-code-themes-below-and-let-me-as-well-as-others-know"&gt;
  &lt;/a&gt;
  Comment your favorite VS Code themes below and let me as well as others know.
&lt;/h2&gt;

&lt;p&gt;ThankYou.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>themes</category>
      <category>productivity</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>5 Easy Ways To Make Money As A Developer</title>
      <author>Suhail Kakar</author>
      <pubDate>Mon, 26 Jul 2021 03:43:53 +0000</pubDate>
      <link>https://dev.to/suhailkakar/5-easy-ways-to-make-money-as-a-developer-na8</link>
      <guid>https://dev.to/suhailkakar/5-easy-ways-to-make-money-as-a-developer-na8</guid>
      <description>&lt;p&gt;In this article, I’ll show you 5 easy ways to make money as a developer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-freelancing"&gt;
  &lt;/a&gt;
  1. Freelancing
&lt;/h3&gt;

&lt;p&gt;For many developers, freelancing is profitable source of income.  Some people take it as a full-time job, while others do it as a part-time job to earn additional cash. Some platforms like Fiverr, Upwork, and many more offer a great opportunity for anyone to start freelancing, but there is a lot of competition there, so be sure to stand out among them &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--siwkWih---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627268254795/dKcE2b7c5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--siwkWih---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627268254795/dKcE2b7c5.png" alt="image (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-sell-an-ebook"&gt;
  &lt;/a&gt;
  2. Sell an Ebook
&lt;/h3&gt;

&lt;p&gt;Writing an ebook is one of those things that may pay off for a long time. You can write a highly useful ebook as a developer that covers a certain topic of software development. Alternatively, you may opt to describe a programming language in such a way that your readers will have a better understanding of it.&lt;/p&gt;

&lt;p&gt;Writing books is also a wonderful method to build your brand and demonstrate your expertise in the area. Once you have completed writing you Ebook, You can start selling it online &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uSTZF7UT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627268654011/BMjFw9Uhx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uSTZF7UT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627268654011/BMjFw9Uhx.png" alt="image (2).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-teach-people"&gt;
  &lt;/a&gt;
  3. Teach People
&lt;/h3&gt;

&lt;p&gt;Teaching other people how to code is the greatest and possibly easiest method to generate money as a developer. You may accomplish this in a variety of ways. The first is to develop and market online course.You may offer courses on your own website or on sites like Udemy and Pluralsight. You can also teach people individually, that can be online or in person. If you teach people in this way, you’ll earn a lot more money. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F5kVkHKA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627269072235/khc8cftxE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F5kVkHKA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627269072235/khc8cftxE.png" alt="image (3).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-sell-templates"&gt;
  &lt;/a&gt;
  4. Sell Templates
&lt;/h3&gt;

&lt;p&gt;Selling templates is another way to generate money. You may accomplish this by visiting websites such as Themeforest, where anybody can sell their designs for a nominal charge each transaction. Selling online courses is quite similar to this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Na49H6vO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627269268065/bJsXxylG1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Na49H6vO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627269268065/bJsXxylG1.png" alt="image (4).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-application-development"&gt;
  &lt;/a&gt;
  5. Application Development
&lt;/h3&gt;

&lt;p&gt;As a developer, you may put your coding abilities to use by creating and selling computer and mobile applications. With a solid understanding of Swift, JavaScript Objective-C, you can quickly create a useful iOS application.&lt;/p&gt;

&lt;p&gt;You may profit from it by releasing it on the app store for anybody to download and purchase.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h6Zxt6HE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627269801175/UMHT_PPlmP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h6Zxt6HE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627269801175/UMHT_PPlmP.png" alt="image (5).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;These are many other ways that you can use to make money as a developer. These are not all the ways that exist, but these are the most easiest ones.&lt;/p&gt;

&lt;p&gt;I hope you found this articles helpful. If you need any help please let me know at comment section&lt;/p&gt;

&lt;p&gt;Let's connect on  &lt;a href="https://twitter.com/suhailkakar"&gt;Twitter&lt;/a&gt;  and  &lt;a href="https://www.linkedin.com/in/suhailkakar/"&gt;LinkedIn&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;👋 Thanks for reading, See you next time&lt;/p&gt;

</description>
      <category>programming</category>
      <category>datascience</category>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>Drop CAP effect / Changing the style of the first letter in a paragraph using CSS.</title>
      <author>Kritika</author>
      <pubDate>Mon, 26 Jul 2021 02:32:23 +0000</pubDate>
      <link>https://dev.to/kritikapattalam/drop-cap-effect-changing-the-style-of-the-first-letter-in-a-paragraph-using-css-4dl3</link>
      <guid>https://dev.to/kritikapattalam/drop-cap-effect-changing-the-style-of-the-first-letter-in-a-paragraph-using-css-4dl3</guid>
      <description>&lt;p&gt;As part of this blog, we are going to see how we can style the first letter of a paragraph different from the remaining words or letter. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-style-the-first-letter-in-a-paragraph"&gt;
  &lt;/a&gt;
  How to style the first letter in a paragraph
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;::first letter is a pseudo element which will apply styles just to the first letter of the first line of any block level element.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p&amp;gt;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.&amp;lt;/p&amp;gt;
&amp;lt;style&amp;gt;
    p::first-letter {
       font-size: 40px;
       color: orange;
    }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above piece of code, paragraph tag is a block level element. To the first letter of the paragraph tag which is "L" font-size 40px and color orange would be applied.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gNwm6-ee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sws4byxpu1az9tgj6cf4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gNwm6-ee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sws4byxpu1az9tgj6cf4.jpeg" alt="FIRST-LETTER"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's see how we can make  a dropcap effect i.e the same first letter big enough such that it as long as three or so lines, and the remaining content just flows around it. This can be done in two ways.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using CSS initial-letter property&lt;/li&gt;
&lt;li&gt;Adding some customization to the first-letter by adding float, adjusting the line-height and font-size of the letter.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#1-css-initialletter"&gt;
  &lt;/a&gt;
  1. CSS initial-letter
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Using css initial-letter property - you can produce a drop cap effect i.e make the letter occupy specified number of lines in a paragraph.&lt;/li&gt;
&lt;li&gt;This accepts only a positive integer. Eg: In the below snippet, letter "L" will span/sink four lines.&lt;/li&gt;
&lt;li&gt;Note - This is only supported by safari at the moment.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p::first-letter {
   -webkit-initial-letter: 4;
   initial-letter: 4;
   font-size: 40px;
   color: orange;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qRZ1_JdP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1rnt048mkzxb6365lmv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qRZ1_JdP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1rnt048mkzxb6365lmv.jpeg" alt="initial-letter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-customize-the-font-of-the-firstletter"&gt;
  &lt;/a&gt;
  2. Customize the font of the first-letter
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p::first-letter {
   float: left;
   font-size: 75px;
   line-height: 60px;
   padding: 3px;
   color: orange;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above piece of code, to the first letter of the paragraph increase the font-size, line-height and float it in such a way that it spans to the number of lines you required. And by adding padding you can adjust the spacing of the first-letter as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H1uYs8UC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwugmfhxnb7kl6t6iare.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H1uYs8UC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwugmfhxnb7kl6t6iare.jpeg" alt="first-letter-customized"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#are-you-more-of-a-twitter-person-then-you-can-read-the-same-thing-in-the-below-thread"&gt;
  &lt;/a&gt;
  Are you more of a Twitter person?. Then you can read the same thing in the below thread
&lt;/h4&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PokxJe4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E5ZaYJFX0AgQNYk.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ekBt-sq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1404918039922057218/ECiKGVPB_normal.jpg" alt="Kritika profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Kritika
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/kritikapattalam"&gt;@kritikapattalam&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      How to style first letter in a paragraph using CSS?.&lt;br&gt;Thread (Thread). &lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/CSS"&gt;#CSS&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/DEVCommunity"&gt;#DEVCommunity&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/WomenWhoCode"&gt;#WomenWhoCode&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:08 PM - 03 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1411416678827704328" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1411416678827704328" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1411416678827704328" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Now you should know how to &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add styles to just the first letter of a paragraph&lt;/li&gt;
&lt;li&gt;Add a drop cap effect to the first letter using CSS initial property or by customizing the fonts of the first letter.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For browser compatability , check  &lt;a href="https://caniuse.com/"&gt;canisuse.com&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::first-letter"&gt;first letter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/initial-letter"&gt;initial letter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Follow me on  &lt;a href="https://twitter.com/KritikaPattalam"&gt;Twitter&lt;/a&gt;  | &lt;a href="https://www.linkedin.com/in/kritika-p-296739155/"&gt;LinkedIn&lt;/a&gt; for more web development related tips and posts.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>html</category>
    </item>
    <item>
      <title>✨🥞 Rust Visualized: The Stack, the Heap, and Pointers</title>
      <author>ender minyard</author>
      <pubDate>Mon, 26 Jul 2021 02:14:12 +0000</pubDate>
      <link>https://dev.to/ender_minyard/rust-visualized-the-stack-the-heap-and-pointers-a5c</link>
      <guid>https://dev.to/ender_minyard/rust-visualized-the-stack-the-heap-and-pointers-a5c</guid>
      <description>&lt;p&gt;The part of your operating system that allocates memory for a program as well as loading its code and data into memory is called a &lt;strong&gt;loader&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;The loader defines four different areas of memory for a program: &lt;em&gt;code&lt;/em&gt;, &lt;em&gt;static&lt;/em&gt;, &lt;em&gt;stack&lt;/em&gt;, and &lt;em&gt;heap&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The static segment contains global variables, the code segment contains machine code, and the stack segment contains local variables that are defined inside functions. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iskBa56y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htsmaows5pttp2mr9lrp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iskBa56y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htsmaows5pttp2mr9lrp.png" alt="code snippet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the function &lt;code&gt;foo&lt;/code&gt; goes on the call stack, its stack frame must store &lt;code&gt;foo&lt;/code&gt;'s arguments, local variables, and return address. &lt;/p&gt;

&lt;p&gt;The memory layout of a stack frame is fixed, so the size of variables needs to be known at compile time. The size of variables on the stack cannot grow or shrink. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dYOmzcRQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzvuitthesm20123ejb2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dYOmzcRQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzvuitthesm20123ejb2.png" alt="memory structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stacks are a simple but common data structure. Like a pile of pancakes, the last pancakes that go on a stack are the first pancakes to leave the stack. When you add to a stack, you always add to the top.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a2pWihHn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjsnto1av1q9kacbf7e8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a2pWihHn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjsnto1av1q9kacbf7e8.gif" alt="stack frames"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The call stack consists of stack frames, which contain arguments, local variables, and return addresses. Let's look inside the stack frame on the call stack when &lt;code&gt;main&lt;/code&gt; is called.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sqy7sysM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rm35u7t5w1cbrkgesbgc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sqy7sysM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rm35u7t5w1cbrkgesbgc.png" alt="1o"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we look inside the stack frames on the call stack when &lt;code&gt;foo(y)&lt;/code&gt; is called, we notice that the arguments, local variables, and variable addresses of &lt;code&gt;foo&lt;/code&gt; have been added to the top of the stack. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FY_NV0X4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8zwdgb0atp0tucqh852.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FY_NV0X4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8zwdgb0atp0tucqh852.png" alt="2o"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The heap is dedicated to variables whose size is not known at compile time. You have a lot more freedom with variables stored on the heap, but you lose speed. You can control the lifetime of variables on the heap as well as assign them an arbitrary size. &lt;/p&gt;

&lt;p&gt;In Rust, you can allocate memory on the heap using types like &lt;a href="https://doc.rust-lang.org/rust-by-example/std/box.html"&gt;Box&lt;/a&gt; or &lt;a href="https://doc.rust-lang.org/book/vectors.html"&gt;Vec&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;A &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; stores a pointer to heap data on the stack. The type of this Box is type &lt;code&gt;T&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pointers are an important concept, because we often reference variables in Rust using &lt;code&gt;&amp;amp;&lt;/code&gt; syntax. When you reference a variable, you are pointing to that variable's location in memory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VNmY-ARK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n90xu57sqmzka0gx9ipt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VNmY-ARK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n90xu57sqmzka0gx9ipt.gif" alt="borrowing in rust"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>rust</category>
      <category>beginners</category>
      <category>computerscience</category>
      <category>programming</category>
    </item>
    <item>
      <title>Best Nodejs Project For Beginners | Every Beginners should try</title>
      <author>coders</author>
      <pubDate>Mon, 26 Jul 2021 02:10:54 +0000</pubDate>
      <link>https://dev.to/coderzway/best-nodejs-project-for-beginners-every-beginners-should-try-35l3</link>
      <guid>https://dev.to/coderzway/best-nodejs-project-for-beginners-every-beginners-should-try-35l3</guid>
      <description>&lt;p&gt; Node.js&lt;span&gt; is an open-source framework for building real-world server-side and networking applications. It not only allows you to create a dynamic website as it is built on chrome’s JavaScript Runtime. Node.js is widely used to make large scale with rapid development widely used in backend programming. It uses a driven model to allow the creation of highly scalable and lightweight web apps. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;If you’d like to build an impressive portfolio and hone your Node.js skills, we are sharing some project ideas on Node.js focused on beginners that would likely help you get hired.&lt;/p&gt;
&lt;p&gt;Before getting started with coding or building your first project, create a repository for each project, which will be useful as a future reference. Learning some additional frameworks, like Express.js, Nest.js, Socket.io, etc. can make Node.js development more comfortable and faster. &lt;/p&gt;
&lt;p&gt;Here are some of the exciting Node.js project ideas that you can practice to enhance your development skills. &lt;/p&gt;
&lt;p&gt;&lt;b&gt;Please visit originally Published site to read More&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Originally Published&lt;/b&gt;: &lt;b&gt;&lt;span&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/best-nodejs-projects-for-beginners/&amp;amp;ved=2ahUKEwil1-DB0__xAhWB73MBHZ14DNMQFjAJegQIGxAC&amp;amp;usg=AOvVaw3RB4VpwDtt1caJIyiSk34S&amp;amp;cshid=1627265362788"&gt;Node Js Project For Beginners&lt;/a&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;











</description>
      <category>javascript</category>
    </item>
  </channel>
</rss>
