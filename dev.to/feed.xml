<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to get an A+ Security Grade For Your Website on Mozilla Observatory (Part 2 - Nginx)</title>
      <author>Jeremy</author>
      <pubDate>Mon, 08 Nov 2021 02:24:00 +0000</pubDate>
      <link>https://dev.to/jeremyling/how-to-get-an-a-security-grade-on-mozilla-observatory-part-2-nginx-47fg</link>
      <guid>https://dev.to/jeremyling/how-to-get-an-a-security-grade-on-mozilla-observatory-part-2-nginx-47fg</guid>
      <description>&lt;p&gt;After rewriting the FormBlob website with Hugo, I wanted to ensure that the website adhered to security best practices and was not vulnerable to any known issues. I began looking for a measure for website security and found Mozilla Observatory. On my very first scan, I received a C grade. While not particularly bad, I wanted to rectify any flaws found to achieve the best score I could. It was also an opportunity to learn a little more about website security.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-what-is-mozilla-observatory"&gt;
  &lt;/a&gt;
  So what is Mozilla Observatory?
&lt;/h3&gt;

&lt;p&gt;The following quote is taken directly from the FAQ at &lt;a href="https://observatory.mozilla.org/faq" rel="noopener"&gt;&lt;/a&gt;&lt;a href="https://observatory.mozilla.org/faq"&gt;https://observatory.mozilla.org/faq&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Observatory tests for preventative measure against cross-site scripting attacks, man-in-the-middle attacks, cross-domain information leakage, cookie compromise, content delivery network compromise, and improperly issued certificates.&lt;/p&gt;

&lt;p&gt;However, it does not test for outdated software versions, SQL injection vulnerabilities, vulnerable content management system plugins, improper password creation policies or storage procedures, and more. These are just as important as what the Observatory tests for, and site operators should not be neglectful of them simply because they score well on the Observatory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While it may sound like a mouthful, these tests largely measure how vulnerable your website is to some of the most common malicious attacks that prey on a website developer's negligence in setting up secure networking configurations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#formblob-setup"&gt;
  &lt;/a&gt;
  FormBlob Setup
&lt;/h3&gt;

&lt;p&gt;I will split the discussion in this article into two parts - one for &lt;a href="https://formblob.com"&gt;https://formblob.com&lt;/a&gt; and another for &lt;a href="https://build.formblob.com"&gt;https://build.formblob.com&lt;/a&gt;. This is because the main site is a static site built using Hugo and deployed on Netlify, while the form builder site is a React app deployed on AWS ECS behind an elastic load balancer (ELB).&lt;/p&gt;

&lt;p&gt;This is part two of the article discussing how you would set up Nginx to achieve an A+ grade. For part one discussing how to set up Netlify, &lt;a href="https://formblob.com/resources/how-i-got-an-a-security-grade-on-mozilla-observatory-netlify"&gt;click here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h3&gt;

&lt;p&gt;In order to improve your grade for Mozilla Observatory scans, you'll need to add HTTP response headers. To add HTTP response headers to Nginx, you will need to edit the server context in the &lt;code&gt;nginx.conf&lt;/code&gt; file. Here, I assume that you are familiar enough with Nginx to set up the config file. I list the full list of headers and config added to achieve an A+ grade below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;server &lt;span class="o"&gt;{&lt;/span&gt;
  listen 80&lt;span class="p"&gt;;&lt;/span&gt;
  ...

  &lt;span class="k"&gt;return &lt;/span&gt;301 https://&lt;span class="nv"&gt;$host$request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

server &lt;span class="o"&gt;{&lt;/span&gt;
  listen 443:
  ...

  &lt;span class="c"&gt;# Only connect to this site and subdomains via HTTPS for the next two years&lt;/span&gt;
  add_header Strict-Transport-Security &lt;span class="s2"&gt;"max-age=63072000; includeSubDomains; preload"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;# Only allow my site to frame itself&lt;/span&gt;
  add_header X-Frame-Options &lt;span class="s2"&gt;"SAMEORIGIN"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;# Prevent browsers from incorrectly detecting non-scripts as scripts&lt;/span&gt;
  add_header X-Content-Type-Options &lt;span class="s2"&gt;"nosniff"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;# Block pages from loading when they detect reflected XSS attacks&lt;/span&gt;
  add_header X-Xss-Protection &lt;span class="s2"&gt;"1; mode=block"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;# Only send the shortened referrer to a foreign origin, full referrer to a local host&lt;/span&gt;
  add_header Referrer-Policy &lt;span class="s2"&gt;"strict-origin-when-cross-origin"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;# Configue CSP&lt;/span&gt;
  add_header Content-Security-Policy &lt;span class="s2"&gt;"default-src 'self' formblob.com *.formblob.com fblob.me *.fblob.me; connect-src 'self' formblob.com *.formblob.com wss://*.formblob.com fblob.me *.fblob.me https://sockjs-mt1.pusher.com firebase.googleapis.com firebaseinstallations.googleapis.com https://www.googleapis.com/webfonts/ www.google-analytics.com; font-src 'self' https://fonts.gstatic.com; img-src https: data: blob: www.googletagmanager.com https://ssl.gstatic.com https://www.gstatic.com; media-src https: data: blob:; script-src 'self' 'unsafe-eval' js.stripe.com https://www.googletagmanager.com https://www.google.com/recaptcha/ https://www.gstatic.com/recaptcha/ 'sha256-TQ+edvHvrQ4+h8G+tZQdFsQSrUAeSfwE/D8KjAzDnT0='; style-src 'self' 'unsafe-inline' fonts.googleapis.com; frame-src 'self' formblob.com *.formblob.com fblob.me *.fblob.me js.stripe.com https://www.google.com/recaptcha/ https://recaptcha.google.com/recaptcha/; frame-ancestors 'self' formblob.com *.formblob.com fblob.me *.fblob.me;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  ...
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#test-scores"&gt;
  &lt;/a&gt;
  Test Scores
&lt;/h3&gt;

&lt;p&gt;Mozilla Observatory scores your website on a predefined set of tests. Let's go through each of the tests individually.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1cqyVGma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i21r8559mhinokxtllss.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1cqyVGma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i21r8559mhinokxtllss.png" alt="Test Scores" width="880" height="591"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#content-security-policy"&gt;
  &lt;/a&gt;
  Content Security Policy
&lt;/h4&gt;

&lt;p&gt;Content Security Policy (CSP) gives you fine-grained control over which resources can be loaded on your website and from where such resources are allowed. It aims to protect your website from cross-site scripting (XSS) vulnerabilities. XSS vulnerabilities stem from unsafe inline Javascript and disabling this effectively eliminates most XSS attacks. However, disabling unsafe inline also means that &lt;em&gt;all&lt;/em&gt; Javascript must be loaded from &lt;code&gt;&amp;lt;script src=""&amp;gt;&lt;/code&gt; tags. Javascript inside &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags but not loaded via &lt;code&gt;src&lt;/code&gt; will fail to execute.&lt;/p&gt;

&lt;p&gt;Configuring CSP is a tedious process that requires you to evaluate the sources of all the scripts and styles loaded on your website. Before we dive into each policy, here's a look at the complete CSP I deployed on FormBlob. Note that I split each directive onto a separate line here for readability. When deploying, the entire CSP must be in a single line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;/&lt;span class="k"&gt;*&lt;/span&gt;
  &lt;span class="c"&gt;# Configure CSP&lt;/span&gt;
  add_header Content-Security-Policy &lt;span class="s2"&gt;"
    default-src 'self' formblob.com *.formblob.com fblob.me *.fblob.me;
    connect-src 'self' formblob.com *.formblob.com wss://*.formblob.com fblob.me *.fblob.me https://sockjs-mt1.pusher.com firebase.googleapis.com firebaseinstallations.googleapis.com https://www.googleapis.com/webfonts/ www.google-analytics.com;
    font-src 'self' https://fonts.gstatic.com;
    img-src https: data: blob: www.googletagmanager.com https://ssl.gstatic.com https://www.gstatic.com;
    media-src https: data: blob:;
    script-src 'self' 'unsafe-eval' js.stripe.com https://www.googletagmanager.com https://www.google.com/recaptcha/ https://www.gstatic.com/recaptcha/ 'sha256-TQ+edvHvrQ4+h8G+tZQdFsQSrUAeSfwE/D8KjAzDnT0=';
    style-src 'self' 'unsafe-inline' fonts.googleapis.com;
    frame-src 'self' formblob.com *.formblob.com fblob.me *.fblob.me js.stripe.com https://www.google.com/recaptcha/ https://recaptcha.google.com/recaptcha/;
    frame-ancestors 'self' formblob.com *.formblob.com fblob.me *.fblob.me;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I used a subset of the full list of directives that are relevant to FormBlob. I will limit my discussion here to only these directives and a few others that are common. You can read more about the &lt;a href="https://developers.google.com/web/fundamentals/security/csp"&gt;full list of directives here&lt;/a&gt;. Also, as a start, I recommend using the header &lt;code&gt;Content-Security-Policy-Report-Only&lt;/code&gt; instead of &lt;code&gt;Content-Security-Policy&lt;/code&gt; to get a report of all the violations without breaking your website.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/default-src"&gt;&lt;code&gt;default-src&lt;/code&gt;&lt;/a&gt; is a fallback directive for the other fetch directives. Directives that are specified have no inheritance, while directives that are not specified will fall back to the value of &lt;code&gt;default-src&lt;/code&gt;. Here, you want to include 'self' (the origin site with the same scheme and port) and other trusted domains. The recommended setting for this is &lt;code&gt;none&lt;/code&gt;, which will require you to set almost every other directive.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/connect-src"&gt;&lt;code&gt;connect-src&lt;/code&gt;&lt;/a&gt; provides control over fetch requests, XHR, eventsource, beacon and websockets connections. This defines any resources that you need to connect to. For websocket connections, you will have to set the relevant scheme. For example, wss://*.formblob.com.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/font-src"&gt;&lt;code&gt;font-src&lt;/code&gt;&lt;/a&gt; specifies which URLs to load fonts from. If you are using Google Fonts, this directive should include &lt;code&gt;https://fonts.gstatic.com data:&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/img-src"&gt;&lt;code&gt;img-src&lt;/code&gt;&lt;/a&gt; specifies the URLs that images can be loaded from. If you use Google Tag Manager, this directive should include &lt;code&gt;www.googletagmanager.com https://ssl.gstatic.com https://www.gstatic.com&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/media-src"&gt;&lt;code&gt;media-src&lt;/code&gt;&lt;/a&gt; specifies the URLs from which video, audio and text track resources can be loaded from.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/manifest-src"&gt;&lt;code&gt;manifest-src&lt;/code&gt;&lt;/a&gt; specifies the URLs that application manifests may be loaded from.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src"&gt;&lt;code&gt;script-src&lt;/code&gt;&lt;/a&gt; specifies the locations from which a script can be executed from. If you use Google Tag Manager, the recommended approach is to use the &lt;a href="https://developers.google.com/tag-manager/web/csp"&gt;nonce method&lt;/a&gt; for GTM scripts. I include the &lt;code&gt;'unsafe-eval'&lt;/code&gt; keyword here because FormBlob uses a heavily sanitized &lt;code&gt;Function()&lt;/code&gt; method to evaluate previously set fields to personalise the experience for users completing forms. This is a quintessential feature across all form builders.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In this directive, I also include a hash keyword &lt;code&gt;'sha256-TQ+edvHvrQ4+h8G+tZQdFsQSrUAeSfwE/D8KjAzDnT0='&lt;/code&gt;. You may use the hashed script as a keyword to allow any script to be loaded. This hash is automatically generated in the report in the console for any script that violates the directive. You can copy the hash together with the single quotes directly into the directive to allow the script.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/style-src"&gt;&lt;code&gt;style-src&lt;/code&gt;&lt;/a&gt; controls from where styles get applied to a document. This includes &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; elements, &lt;code&gt;@import&lt;/code&gt; rules, and requests originating from a &lt;code&gt;Link&lt;/code&gt; HTTP response header field. You may notice that I include the &lt;code&gt;'unsafe-inline'&lt;/code&gt; keyword. This is because I directly alter inline styles using Material UI. Again, this is a potential vulnerability that you should avoid if you can. If using Google Fonts and/or Google Tag Manager, you should include these &lt;code&gt;fonts.googleapis.com &lt;a href="https://tagmanager.google.com"&gt;https://tagmanager.google.com&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-src"&gt;&lt;code&gt;frame-src&lt;/code&gt;&lt;/a&gt; restricts the URLs that can be embedded on the site.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/form-action"&gt;&lt;code&gt;form-action&lt;/code&gt;&lt;/a&gt; restricts the URLs which the forms can submit to.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors"&gt;&lt;code&gt;frame-ancestors&lt;/code&gt;&lt;/a&gt; restricts the URLs that can embed the requested resource inside of &lt;code&gt;&amp;lt;frame&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;embed&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;applet&amp;gt;&lt;/code&gt; elements. This directive does not fallback to default-src directive. If this is set, X-Frame-Options is ignored by user agents.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/upgrade-insecure-requests"&gt;&lt;code&gt;upgrade-insecure-requests&lt;/code&gt;&lt;/a&gt; instructs user agents to rewrite URL schemes, changing HTTP to HTTPS. This directive is for websites with large numbers of old URL's that need to be rewritten.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#cookies"&gt;
  &lt;/a&gt;
  Cookies
&lt;/h4&gt;

&lt;p&gt;For FormBlob all cookies used are created on the API server for the purpose of session tracking, and I do not set any cookies on the frontend server hosting the website. However, if you do need to set cookies using Nginx, ensure that your cookies use the &lt;code&gt;Secure&lt;/code&gt; flag and set the appropriate &lt;code&gt;SameSite&lt;/code&gt; attribute. Session cookies should also have the &lt;code&gt;HttpOnly&lt;/code&gt; flag. Cookies should also have an expiration as soon as is necessary.&lt;/p&gt;

&lt;p&gt;For the &lt;code&gt;SameSite&lt;/code&gt; attribute, this is a direct quote from &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie"&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Strict means that the browser sends the cookie only for same-site requests, that is, requests originating from the same site that set the cookie. If a request originates from a URL different from the current one, no cookies with the SameSite=Strict attribute are sent.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;br&gt;
Lax means that the cookie is not sent on cross-site requests, such as on requests to load images or frames, but is sent when a user is navigating to the origin site from an external site (for example, when following a link). This is the default behavior if the SameSite attribute is not specified.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Add a cookie with [name] and [value] that expires in 1 day (86400 seconds)&lt;/span&gt;
&lt;span class="c"&gt;# and restricted to formblob.com and its subdomains&lt;/span&gt;
add_header Set-Cookie &lt;span class="s2"&gt;"[name]=[value]; Max-Age=86400; Path=/; Domain=formblob.com HttpOnly; Secure"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#crossorigin-resource-sharing"&gt;
  &lt;/a&gt;
  Cross-origin Resource Sharing
&lt;/h4&gt;

&lt;p&gt;Cross-origin Resource Sharing (CORS) is not needed for most websites and FormBlob is no exception. This should not be set unless specifically needed.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#http-public-key-pinning"&gt;
  &lt;/a&gt;
  HTTP Public Key Pinning
&lt;/h4&gt;

&lt;p&gt;HTTP Public Key Pinning is only required for maximum risk sites. It is not recommended for most sites and you would probably not need it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#http-strict-transport-security"&gt;
  &lt;/a&gt;
  HTTP Strict Transport Security
&lt;/h4&gt;

&lt;p&gt;HTTP Strict Transport Security (HSTS) notifies user agents to only connect to a given site over HTTPS, even if the scheme chosen was HTTP. It works in tandem with HTTP to HTTPS redirects and should be set on response headers from the HTTPS request. The recommended setting is &lt;code&gt;Strict-Transport-Security: max-age=63072000; includeSubdomains&lt;/code&gt;. If the &lt;code&gt;includeSubdomains&lt;/code&gt; flag is present, all requests to subdomains will also be upgraded to HTTPS. Ensure that all subdomains can handle HTTPS traffic before including this flag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Only connect to this site and subdomains via HTTPS for the next two years&lt;/span&gt;
add_header Strict-Transport-Security &lt;span class="s2"&gt;"max-age=63072000; includeSubDomains; preload"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#https-redirection"&gt;
  &lt;/a&gt;
  HTTPS Redirection
&lt;/h4&gt;

&lt;p&gt;Sites that listen on port 80 should redirect to the same resource on HTTPS. Once the redirection has occurred, HSTS ensures that all future HTTP requests are instead sent directly to the secure site. The setting below redirects all HTTP traffic to the exact same resource on HTTPS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;server &lt;span class="o"&gt;{&lt;/span&gt;
  listen 80&lt;span class="p"&gt;;&lt;/span&gt;
  ...

  &lt;span class="k"&gt;return &lt;/span&gt;301 https://&lt;span class="nv"&gt;$host$request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#referrer-policy"&gt;
  &lt;/a&gt;
  Referrer Policy
&lt;/h4&gt;

&lt;p&gt;There are four options for this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;no-referrer&lt;/code&gt;: never send the Referer header&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;same-origin&lt;/code&gt;: send referrer, but only on requests to the same origin&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;strict-origin&lt;/code&gt;: send referrer to all origins, but only the URL sans path (e.g. &lt;a href="https://example.com/"&gt;https://example.com/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;strict-origin-when-cross-origin&lt;/code&gt;: send full referrer on same origin, URL sans path on foreign origin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, you would want to use &lt;code&gt;strict-origin-when-cross-origin&lt;/code&gt;. This protects user privacy on cross-origin requests but allows you to track users using analytics within your own site.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Only send the shortened referrer to a foreign origin, full referrer to a local host&lt;/span&gt;
add_header Referrer-Policy &lt;span class="s2"&gt;"strict-origin-when-cross-origin"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#subresource-integrity"&gt;
  &lt;/a&gt;
  Subresource Integrity
&lt;/h4&gt;

&lt;p&gt;Subresource integrity (SRI) protects against attackers modifying the contents of Javascript libraries hosted on content delivery networks (CDNs) in order to create vulnerabilities in websites that make use of that hosted library. SRI uses a hash of the library's content to verify that a library has not been changed. If it has, the website will refuse to load the library. &lt;a href="https://www.srihash.org/"&gt;Here's a good resource to generate SRI hashes&lt;/a&gt;. Below is an example of an embedded form from FormBlob using SRI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script
  &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/@jeremyling/form-renderer@0.4.16/dist/web.min.js"&lt;/span&gt;
  &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha512-27spyugyD2KOU0tPev6hnJ2bCeKPh5WpMzEWna4uXXCSlSQcFRDxAKZDfBhJ21lF0hyBbTD1KoOXmXJwKU5NHQ=="&lt;/span&gt;
  &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#xcontenttypeoptions"&gt;
  &lt;/a&gt;
  X-Content-Type-Options
&lt;/h4&gt;

&lt;p&gt;X-Content-Type-Options is a header supported by Internet Explorer, Chrome and Firefox 50+ that tells user agents not to load scripts and stylesheets unless the server indicates the correct MIME type. Without this header, these browsers can incorrectly detect files as scripts and stylesheets, leading to XSS attacks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Prevent browsers from incorrectly detecting non-scripts as scripts&lt;/span&gt;
add_header X-Content-Type-Options &lt;span class="s2"&gt;"nosniff"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#xframeoptions"&gt;
  &lt;/a&gt;
  X-Frame-Options
&lt;/h4&gt;

&lt;p&gt;X-Frame-Options controls where your site may be framed within an iframe. This helps to prevent clickjacking, in which an attacker frames your site within a malicious platform that tricks users into clicking on links which the attacker has control over.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Only allow my site to frame itself&lt;/span&gt;
add_header X-Frame-Options &lt;span class="s2"&gt;"SAMEORIGIN"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#xxssprotection"&gt;
  &lt;/a&gt;
  X-XSS-Protection
&lt;/h4&gt;

&lt;p&gt;X-XSS-Protection is a feature of Internet Explorer and Chrome that stops pages from loading when they detect reflected XSS attacks. While a strong CSP may make this header redundant, it protects users on older browsers that do not support CSP.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Block pages from loading when they detect reflected XSS attacks&lt;/span&gt;
add_header X-Xss-Protection &lt;span class="s2"&gt;"1; mode=block"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#complete-nginxconf-configuration"&gt;
  &lt;/a&gt;
  Complete nginx.conf Configuration
&lt;/h3&gt;

&lt;p&gt;We have successfully gone through each of the tests and set up configurations to help us pass them. If you have followed along, you should receive at least an A grade with this setup. Here's a recap of the full configuration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;server &lt;span class="o"&gt;{&lt;/span&gt;
  listen 80&lt;span class="p"&gt;;&lt;/span&gt;
  ...

  &lt;span class="k"&gt;return &lt;/span&gt;301 https://&lt;span class="nv"&gt;$host$request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

server &lt;span class="o"&gt;{&lt;/span&gt;
  listen 443:
  ...

  &lt;span class="c"&gt;# Only connect to this site and subdomains via HTTPS for the next two years&lt;/span&gt;
  add_header Strict-Transport-Security &lt;span class="s2"&gt;"max-age=63072000; includeSubDomains; preload"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;# Only allow my site to frame itself&lt;/span&gt;
  add_header X-Frame-Options &lt;span class="s2"&gt;"SAMEORIGIN"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;# Prevent browsers from incorrectly detecting non-scripts as scripts&lt;/span&gt;
  add_header X-Content-Type-Options &lt;span class="s2"&gt;"nosniff"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;# Block pages from loading when they detect reflected XSS attacks&lt;/span&gt;
  add_header X-Xss-Protection &lt;span class="s2"&gt;"1; mode=block"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;# Only send the shortened referrer to a foreign origin, full referrer to a local host&lt;/span&gt;
  add_header Referrer-Policy &lt;span class="s2"&gt;"strict-origin-when-cross-origin"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;# Configue CSP&lt;/span&gt;
  add_header Content-Security-Policy &lt;span class="s2"&gt;"default-src 'self' formblob.com *.formblob.com fblob.me *.fblob.me; connect-src 'self' formblob.com *.formblob.com wss://*.formblob.com fblob.me *.fblob.me https://sockjs-mt1.pusher.com firebase.googleapis.com firebaseinstallations.googleapis.com https://www.googleapis.com/webfonts/ www.google-analytics.com; font-src 'self' https://fonts.gstatic.com; img-src https: data: blob: www.googletagmanager.com https://ssl.gstatic.com https://www.gstatic.com; media-src https: data: blob:; script-src 'self' 'unsafe-eval' js.stripe.com https://www.googletagmanager.com https://www.google.com/recaptcha/ https://www.gstatic.com/recaptcha/ 'sha256-TQ+edvHvrQ4+h8G+tZQdFsQSrUAeSfwE/D8KjAzDnT0='; style-src 'self' 'unsafe-inline' fonts.googleapis.com; frame-src 'self' formblob.com *.formblob.com fblob.me *.fblob.me js.stripe.com https://www.google.com/recaptcha/ https://recaptcha.google.com/recaptcha/; frame-ancestors 'self' formblob.com *.formblob.com fblob.me *.fblob.me;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  ...
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#concluding-remarks"&gt;
  &lt;/a&gt;
  Concluding Remarks
&lt;/h3&gt;

&lt;p&gt;With an A+ security grade, &lt;a href="https://formblob.com"&gt;FormBlob&lt;/a&gt; ranks as the most secure form building platform in the market. FormBlob respects data privacy and aims to ensure all data is secure from malicious attacks. We make an effort to meet and exceed all established security requirements. While not officially HIPAA or NIST certified due to how new we currently are, our infrastructure and security setup meet these requirements and we are confident of getting certified in the long run. Here are the Mozilla Observatory results of other popular form builders that we benchmark against.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X5fxWBJj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ugmruztm4tgf5x78a7kl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X5fxWBJj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ugmruztm4tgf5x78a7kl.jpg" alt="Benchmarks" width="880" height="571"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>security</category>
      <category>tutorial</category>
      <category>nginx</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Virtual interview tips to win any job</title>
      <author>Ryo Naruse</author>
      <pubDate>Mon, 08 Nov 2021 01:40:23 +0000</pubDate>
      <link>https://dev.to/ryy/virtual-interview-tips-to-win-any-job-2a3f</link>
      <guid>https://dev.to/ryy/virtual-interview-tips-to-win-any-job-2a3f</guid>
      <description>&lt;p&gt;You came to know your interview date. You are excited but are you not nervous? “What will ask, what will happen if I can’t answer, how to prepare myself” -- hundreds of such questions are swirling in your mind. &lt;/p&gt;

&lt;p&gt;Hmm, I understand. I can feel that. I used to feel the same way before the interview. But now I know the solution. &lt;/p&gt;

&lt;p&gt;No worries, my dear. Great virtual interview tips are waiting for you that you have never thought of before in this way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtual-interview-tips"&gt;
  &lt;/a&gt;
  Virtual interview tips:
&lt;/h2&gt;

&lt;p&gt;Copy my &lt;strong&gt;virtual interview&lt;/strong&gt; tips, and you will see the unbelievable result.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-are-you-focusing"&gt;
  &lt;/a&gt;
  Where are you focusing:
&lt;/h3&gt;

&lt;p&gt;Are you focusing on yourself? Do you want your interviewer to like you? Are you placing your attention on what you want to get from the position? If your answer is yes, -- you’ll feel worried, nervous, and a lot of fear. &lt;/p&gt;

&lt;p&gt;So, how to lessen your fear? Just pay attention to the interviewer’s needs and the organization’s goal. &lt;/p&gt;

&lt;p&gt;This simple technique can lessen your interview fear. Do you know why it is possible?&lt;/p&gt;

&lt;p&gt;Just because you have moved your attention to another external thing, it is essential to place your attention. It will determine how much fear you have. &lt;/p&gt;

&lt;p&gt;It would be best to focus on the hiring manager and organization’s needs when interviewing (before and during). Try to show your experiences that match those needs.&lt;/p&gt;

&lt;p&gt;Do not try to show your hiring manager that you are intelligent, great etc. All you need to do is focus on the company needs. &lt;/p&gt;

&lt;p&gt;This way, you can avoid fear from an interview.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#embrace-rejection"&gt;
  &lt;/a&gt;
  Embrace rejection:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Embrace rejection!&lt;/strong&gt; Why? You may think, what type of &lt;strong&gt;virtual interview tips&lt;/strong&gt; is this? &lt;/p&gt;

&lt;p&gt;The truth is rejection is part of success. Successful people know rejection is unavoidable. Think of it this way: you may be the sweetest man in this world, but some people do not like sweet.&lt;/p&gt;

&lt;p&gt;Yes, I know rejection can hurt you. The truth is it can be a possible outcome. &lt;br&gt;
If you have a solid mindset to embrace interview rejection, you will not be worried about the interview rejection (before and during). Cheers! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dress-is-important"&gt;
  &lt;/a&gt;
  Dress is important:
&lt;/h2&gt;

&lt;p&gt;Imagine, today, you have to face an in-person interview. What kind of clothes would you wear then? Formal dress. &lt;/p&gt;

&lt;p&gt;In the same way, you have to think in the case of a video interview. You have to get dressed as you would be for an in-person interview. &lt;/p&gt;

&lt;p&gt;If you don’t, your hiring manager may get the wrong message about your interest in the role.&lt;/p&gt;

&lt;p&gt;One more thing, please make sure your outfit looks good on camera. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recheck-your-tech"&gt;
  &lt;/a&gt;
  Recheck your tech:
&lt;/h2&gt;

&lt;p&gt;Dear reader,I have already given you three important &lt;strong&gt;virtual interview tips.&lt;/strong&gt;  I think you have found them essential.&lt;/p&gt;

&lt;p&gt;Want to read more? Are these tips beneficial? Okay then, please keep reading. &lt;/p&gt;

&lt;p&gt;Think, your video interview has been started. The hiring manager has asked you a question. You are going to answer. When you are answering, you see that your microphone is not working. &lt;/p&gt;

&lt;p&gt;Think about the situation. &lt;/p&gt;

&lt;p&gt;So, it is crucial to test your tech before any virtual interview. Make sure you can hear and be heard and see and be seen. &lt;/p&gt;

&lt;p&gt;So, recheck your setup before any interview. You can talk with your friend using the same platform (for example, zoom) that the organization will use for rechecking your tech set up ahead of your interview. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-your-frame"&gt;
  &lt;/a&gt;
  Set up your frame:
&lt;/h2&gt;

&lt;p&gt;Your background frame should be a room without a lot of distracting clutter. A blank wall can be an excellent decision for a background. &lt;/p&gt;

&lt;p&gt;----- Choose a calm area for your interview.&lt;/p&gt;

&lt;p&gt;----- Consider the natural light if possible. If not, then you can invest in ring light and place it behind the camera.&lt;/p&gt;

&lt;p&gt;Remember, a decent setup helps to grow a positive impression in the interviewer’s mind.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sitting-distance"&gt;
  &lt;/a&gt;
  Sitting distance:
&lt;/h2&gt;

&lt;p&gt;Maintain a standard distance from your computer to your sitting chair. You may ask me how you will understand the standard distance.&lt;/p&gt;

&lt;p&gt;Hmm, it’s a good question. But the answer is straightforward.&lt;/p&gt;

&lt;p&gt;Set your chair at such a distance from your computer that you are not looking too huge or too tiny on your screen. &lt;/p&gt;

&lt;p&gt;Please check that your shoulders and upper chest are visible and keep a bit of space on your computer screen above your head. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#eye-contact"&gt;
  &lt;/a&gt;
  Eye contact:
&lt;/h2&gt;

&lt;p&gt;Let’s imagine a scene. You are talking with a friend about an important matter. After a couple of minutes, you notice your friend is looking at your shoulders or somewhere else when talking with him.&lt;/p&gt;

&lt;p&gt;How do you feel if it happens? You will assume he is not listening to you or not paying attention to the matters. A negative impression will grow. &lt;/p&gt;

&lt;p&gt;The same will happen if you do so as a candidate during the interview. So, eye contact is a crucial part of the interview. The hiring manager will feel you are paying attention to him.&lt;/p&gt;

&lt;p&gt;Yes, actual eye contact is not possible in the case of a video interview. I agree with that, but you can look at your interviewer’s face. This is enough to feel them you are listening or engaged with what they are saying. &lt;/p&gt;

&lt;p&gt;Look at your camera in such a way during an interview that you do at the time of natural conversation. This is enough to show your seriousness to your employer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#practice-before-a-video-interview"&gt;
  &lt;/a&gt;
  Practice before a video interview:
&lt;/h2&gt;

&lt;p&gt;One point I forgot to write in this article (virtual interview tips to win any job”). Guess what it can be? That is nothing but a rehearsal. &lt;/p&gt;

&lt;p&gt;You may ask me, “Hey writer, is it a drama? Why do I need rehearsal before any interview?”&lt;/p&gt;

&lt;p&gt;Not a wrong question, but yes, it’s a drama. An interviewer not only judge your knowledge related to the post but also your behavior, your conversation style, your posture and gesture and more.&lt;/p&gt;

&lt;p&gt;How can your rehearsal be?&lt;/p&gt;

&lt;p&gt;Your career coach or an expert can take your interview as like an actual interview. Record this practice and find out the problems (if any) when you will watch that record. &lt;/p&gt;

&lt;p&gt;If you find, you look away from the camera often then solve it. If you find your posture is wrong, then make adjustments accordingly. &lt;/p&gt;

&lt;p&gt;That’s how you can prepare yourself before the actual interview. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#digital-handshake"&gt;
  &lt;/a&gt;
  Digital handshake:
&lt;/h2&gt;

&lt;p&gt;You may be not familiar with the word “digital handshake.” Before explaining, I need to say something. &lt;/p&gt;

&lt;p&gt;In the in-person interview, it’s possible to meet with the interviewer physically and shake hands. You can make small talk.&lt;/p&gt;

&lt;p&gt;But in the case of a video interview, this is not possible. So, try a digital handshake!  I mean, say “hello” and add a smile. This small step helps a lot to make a connection and translates warmth and openness. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-you-sound-is-vital"&gt;
  &lt;/a&gt;
  How you sound is vital:
&lt;/h2&gt;

&lt;p&gt;You may be surprised after reading this point. Is it one of the virtual interview tips? Yes, my dear. &lt;/p&gt;

&lt;p&gt;Maximum candidates are too much concerned with how they look in a video interview. &lt;/p&gt;

&lt;p&gt;Yes, looking formal is essential, but they forget about how they sound. How fast you speak, pause, and voice tone—all these things need to be practiced. Always try to speak clearly, but keep it natural. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#join-a-couple-of-minutes-early"&gt;
  &lt;/a&gt;
  Join a couple of minutes early:
&lt;/h2&gt;

&lt;p&gt;You know where your video interview will take place. Open that platform (Zoom, Google Meet etc.) 5 minutes beforehand. &lt;/p&gt;

&lt;p&gt;There are hundreds of interview software to check your shot. Use any of those before you fully enter the meeting for an interview. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;Dear reader, follow these virtual interview tips properly, and you will be far ahead of other candidates. Pay attention to your hiring manager’s needs, and grow a mentality to accept rejection. These two will help you to lessen your interview fear. Practice before the interview and record that practising video. If you need to improve anywhere, like posture, gesture etc., adjust accordingly. Recheck your hardware, such as microphone, camera, etc., and select a calm and quiet place for video interviews to avoid distraction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#related-article"&gt;
  &lt;/a&gt;
  Related Article
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://remoteful.dev/blog/remote-work-mean-tips"&gt;What Does Remote Work Mean | 10 Tips for remote work for YOU&lt;/a&gt;&lt;/p&gt;

</description>
      <category>remote</category>
      <category>remotejobs</category>
      <category>jobs</category>
      <category>remotework</category>
    </item>
    <item>
      <title>my lua experience</title>
      <author>scoopydevy</author>
      <pubDate>Mon, 08 Nov 2021 01:39:46 +0000</pubDate>
      <link>https://dev.to/scoopydevy/my-lua-experience-5gm9</link>
      <guid>https://dev.to/scoopydevy/my-lua-experience-5gm9</guid>
      <description>&lt;p&gt;got to try the lua programming language and the love2d game framework for the first time... here are my thoughts...&lt;/p&gt;

&lt;p&gt;lua -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;its a cool lang&lt;/li&gt;
&lt;li&gt;the syntax is weird&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;love2d -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;its ez to implement things&lt;/li&gt;
&lt;li&gt;alot of open source stuff&lt;/li&gt;
&lt;li&gt;overall its a great game framework for beginners&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;my overall review is 8/10&lt;/p&gt;

&lt;p&gt;heres what i made: &lt;a href="https://github.com/scoopydevy/zelda-lua"&gt;https://github.com/scoopydevy/zelda-lua&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>gamedev</category>
      <category>github</category>
      <category>lua</category>
    </item>
    <item>
      <title>Bash script to make ECS Exec (aws ecs execute-command) useful</title>
      <author>yuki777</author>
      <pubDate>Mon, 08 Nov 2021 01:22:03 +0000</pubDate>
      <link>https://dev.to/yuki777/bash-script-to-make-ecs-exec-aws-ecs-execute-command-useful-1lba</link>
      <guid>https://dev.to/yuki777/bash-script-to-make-ecs-exec-aws-ecs-execute-command-useful-1lba</guid>
      <description>&lt;p&gt;Translated from &lt;a href="https://qiita.com/yuki777/items/e7bcb80e32eca355ddac"&gt;qiita.com&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source"&gt;
  &lt;/a&gt;
  Source
&lt;/h2&gt;

&lt;p&gt;Bash script(&lt;a href="https://gist.github.com/yuki777/640cba3e0a68587c36165b8a87d25390"&gt;gist&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c"&gt;# Bash script to run ecs-exec on Amazon ECS Fargate containers.&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# Usage: See --help.&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# Installation: Download the script and `chmod u+x the script`.&lt;/span&gt;
&lt;span class="c"&gt;#  curl https://gist.githubusercontent.com/yuki777/640cba3e0a68587c36165b8a87d25390/raw/5bfa8242ba00ed336da76711d602e6df4f76a452/sssh -o sssh &amp;amp;&amp;amp; chmod u+x sssh&lt;/span&gt;
&lt;span class="c"&gt;#  ./sssh&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# Prerequisites (validated)&lt;/span&gt;
&lt;span class="c"&gt;# - aws cli&lt;/span&gt;
&lt;span class="c"&gt;# - session-manager-plugin&lt;/span&gt;
&lt;span class="c"&gt;# - jq&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# Special thanks to contributor&lt;/span&gt;
&lt;span class="c"&gt;# - leewc&lt;/span&gt;

&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-eu&lt;/span&gt;

selectProfile&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="c"&gt;# profile parameter not supplied.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-z&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;+x&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="c"&gt;# only works with AWS CLIv2.&lt;/span&gt;
        &lt;span class="k"&gt;select &lt;/span&gt;selected &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;aws configure list-profiles&lt;span class="sb"&gt;`&lt;/span&gt;
        &lt;span class="k"&gt;do
            &lt;/span&gt;&lt;span class="nb"&gt;break
        &lt;/span&gt;&lt;span class="k"&gt;done
        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$selected&lt;/span&gt;
    &lt;span class="k"&gt;else
        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$profile&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

params&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;profileParam&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;regionParam&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

profileParam&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$profile&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &amp;amp;&amp;gt;/dev/null &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"--profile &lt;/span&gt;&lt;span class="nv"&gt;$profile&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

regionParam&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$region&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &amp;amp;&amp;gt;/dev/null &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"--region &lt;/span&gt;&lt;span class="nv"&gt;$region&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

selectCluster&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;select &lt;/span&gt;selected &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;aws ecs list-clusters &lt;span class="si"&gt;$(&lt;/span&gt;params&lt;span class="si"&gt;)&lt;/span&gt;|jq &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s2"&gt;".clusterArns[]"&lt;/span&gt;|sort|cut &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; 2&lt;span class="si"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;do
        &lt;/span&gt;&lt;span class="nb"&gt;break
    &lt;/span&gt;&lt;span class="k"&gt;done
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$selected&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

selectService&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;select &lt;/span&gt;selected &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;aws ecs list-services &lt;span class="si"&gt;$(&lt;/span&gt;params&lt;span class="si"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;--cluster&lt;/span&gt; &lt;span class="nv"&gt;$cluster&lt;/span&gt;|jq &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s2"&gt;".serviceArns[]"&lt;/span&gt;|sort&lt;span class="si"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;do
        &lt;/span&gt;&lt;span class="nb"&gt;break
    &lt;/span&gt;&lt;span class="k"&gt;done
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$selected&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

selectTask&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;select &lt;/span&gt;selected &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;aws ecs list-tasks &lt;span class="si"&gt;$(&lt;/span&gt;params&lt;span class="si"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;--cluster&lt;/span&gt; &lt;span class="nv"&gt;$cluster&lt;/span&gt; &lt;span class="nt"&gt;--service-name&lt;/span&gt; &lt;span class="nv"&gt;$service&lt;/span&gt; &lt;span class="nt"&gt;--desired-status&lt;/span&gt; RUNNING |jq &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s1"&gt;'.taskArns[]'&lt;/span&gt;|sort&lt;span class="si"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;do
        &lt;/span&gt;&lt;span class="nb"&gt;break
    &lt;/span&gt;&lt;span class="k"&gt;done
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$selected&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

selectContainer&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;select &lt;/span&gt;selected &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;aws ecs describe-tasks &lt;span class="si"&gt;$(&lt;/span&gt;params&lt;span class="si"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;--cluster&lt;/span&gt; &lt;span class="nv"&gt;$cluster&lt;/span&gt; &lt;span class="nt"&gt;--tasks&lt;/span&gt; &lt;span class="nv"&gt;$task&lt;/span&gt; | jq &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s2"&gt;".tasks[].containers[].name"&lt;/span&gt;|sort&lt;span class="si"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;do
        &lt;/span&gt;&lt;span class="nb"&gt;break
    &lt;/span&gt;&lt;span class="k"&gt;done
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$selected&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

colorEcho&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="nv"&gt;red&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'\033[0;31m'&lt;/span&gt;
    &lt;span class="nv"&gt;green&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'\033[0;32m'&lt;/span&gt;
    &lt;span class="nv"&gt;yellow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'\033[0;33m'&lt;/span&gt;
    &lt;span class="nv"&gt;reset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'\033[0m'&lt;/span&gt;

    &lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt; | egrep &lt;span class="nt"&gt;-q&lt;/span&gt; &lt;span class="s2"&gt;"prd|prod|production"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
        &lt;/span&gt;&lt;span class="nv"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$red&lt;/span&gt;
    &lt;span class="k"&gt;elif &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt; | egrep &lt;span class="nt"&gt;-q&lt;/span&gt; &lt;span class="s2"&gt;"stg|stage|staging|beta|devo"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
        &lt;/span&gt;&lt;span class="nv"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$yellow&lt;/span&gt;
    &lt;span class="k"&gt;else
        &lt;/span&gt;&lt;span class="nv"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$green&lt;/span&gt;
    &lt;span class="k"&gt;fi

    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;color&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;reset&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

echo_stderr&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&amp;amp;2
&lt;span class="o"&gt;}&lt;/span&gt;

die&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    echo_stderr &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;exit &lt;/span&gt;1
&lt;span class="o"&gt;}&lt;/span&gt;

validatePrereq&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; jq  &amp;amp;&amp;gt;/dev/null &lt;span class="o"&gt;||&lt;/span&gt; die &lt;span class="s2"&gt;"jq not installed on host. Please install jq. See https://stedolan.github.io/jq/download/"&lt;/span&gt;
    &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; session-manager-plugin &amp;amp;&amp;gt;/dev/null &lt;span class="o"&gt;||&lt;/span&gt; die &lt;span class="s2"&gt;"session-manager-plugin not installed. See https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html"&lt;/span&gt;
    &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; aws &amp;amp;&amp;gt;/dev/null &lt;span class="o"&gt;||&lt;/span&gt; die &lt;span class="s2"&gt;"AWS CLI not found, AWS CLI version 1.16.12 or later must be installed. See https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html"&lt;/span&gt;
    &lt;span class="c"&gt;# Checks if AWS CLI is outdated or not., v1 of AWS CLI pipes to std error, redirect&lt;/span&gt;
    &lt;span class="nv"&gt;AWS_CLI_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;aws &lt;span class="nt"&gt;--version&lt;/span&gt; 2&amp;gt;&amp;amp;1 | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print $1 }'&lt;/span&gt; | &lt;span class="nb"&gt;cut&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt;/ &lt;span class="nt"&gt;-f2&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
    echo_stderr &lt;span class="s2"&gt;"You have AWS CLI v&lt;/span&gt;&lt;span class="nv"&gt;$AWS_CLI_VERSION&lt;/span&gt;&lt;span class="s2"&gt; installed."&lt;/span&gt;
    &lt;span class="c"&gt;# Do a best effort check for v1 (so that it's at least 1.10 and up.&lt;/span&gt;
    &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$AWS_CLI_VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ ^1.1[0-9] &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$AWS_CLI_VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ ^2 &lt;span class="o"&gt;]]&lt;/span&gt; &amp;amp;&amp;gt;/dev/null &lt;span class="o"&gt;||&lt;/span&gt; die &lt;span class="s2"&gt;"AWS CLI version 1.16.12 or later must be installed to support ecs-exec, Run 'aws --version' to see what you have. See https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;print_help&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&amp;amp;2 &lt;span class="o"&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class="no"&gt;END&lt;/span&gt;&lt;span class="sh"&gt;

This script simplifies the process of getting the required information to drop into an
interactive shell script on your container hosted on Fargate/ECS.

Example:

./sssh --region us-west-2
./sssh --profile default

Supported input parameters:
 -r | --region  : AWS Region to fetch the cluster, service, task
 -p | --profile : AWS Profile for credentials and region.
 -c | --command : Command to execute, defaults to '/bin/sh'/

The default command executed on the selected container is '/bin/sh'.
If a region is not provided, the script will attempt to use your region set in the profile.
If you want to execute a different command or shell, you can pass it in like so:

./sssh --command '/bin/bash'

You need active (unexpired) AWS credentials, otherwise, the script will crash.

Updates on https://gist.githubusercontent.com/leewc/e4c3a16551b06c2b0b4640fa5a3d9c00
&lt;/span&gt;&lt;span class="no"&gt;
END
&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;

main&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'/bin/sh'&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"$#"&lt;/span&gt; &lt;span class="nt"&gt;-gt&lt;/span&gt; 0 &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
        case&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="nt"&gt;-h&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;--help&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                print_help
                &lt;span class="nb"&gt;exit&lt;/span&gt;
                &lt;span class="p"&gt;;;&lt;/span&gt;
            &lt;span class="nt"&gt;-r&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;--region&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nb"&gt;shift
                &lt;/span&gt;&lt;span class="nv"&gt;region&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;:?Region&lt;span class="p"&gt; must be specified in --region&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
                &lt;span class="nb"&gt;shift&lt;/span&gt;
                &lt;span class="p"&gt;;;&lt;/span&gt;
            &lt;span class="nt"&gt;-p&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;--profile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nb"&gt;shift
                &lt;/span&gt;&lt;span class="nv"&gt;profile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;:?Profile&lt;span class="p"&gt; must be specified in --profile&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
                &lt;span class="nb"&gt;shift&lt;/span&gt;
                &lt;span class="p"&gt;;;&lt;/span&gt;
            &lt;span class="nt"&gt;-c&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;--command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nb"&gt;shift
                command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;:?Command&lt;span class="p"&gt; must be specified in --command&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
                &lt;span class="nb"&gt;shift&lt;/span&gt;
                &lt;span class="p"&gt;;;&lt;/span&gt;
            &lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                die &lt;span class="s2"&gt;"Unknown param &lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
                &lt;span class="p"&gt;;;&lt;/span&gt;
        &lt;span class="k"&gt;esac&lt;/span&gt;
    &lt;span class="k"&gt;done

    &lt;/span&gt;echo_stderr &lt;span class="s2"&gt;"Validating pre-requisites...."&lt;/span&gt;
    validatePrereq

    &lt;span class="c"&gt;# spaces matter :)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$AWS_CLI_VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ ^2 &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
        &lt;/span&gt;echo_stderr &lt;span class="s2"&gt;"Select AWS Profile."&lt;/span&gt;
        &lt;span class="nv"&gt;profile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;selectProfile&lt;span class="sb"&gt;`&lt;/span&gt;
        colorEcho profile: &lt;span class="nv"&gt;$profile&lt;/span&gt;
    &lt;span class="k"&gt;else &lt;/span&gt;echo_stderr &lt;span class="s2"&gt;"[INFO] AWS CLI is not v2, unable to select profile. --region or --profile must be set."&lt;/span&gt;
    &lt;span class="k"&gt;fi
    &lt;/span&gt;echo_stderr

    echo_stderr &lt;span class="s2"&gt;"Select cluster."&lt;/span&gt;
    &lt;span class="nv"&gt;cluster&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;selectCluster&lt;span class="sb"&gt;`&lt;/span&gt;
    colorEcho cluster: &lt;span class="nv"&gt;$cluster&lt;/span&gt;
    echo_stderr

    echo_stderr &lt;span class="s2"&gt;"Select service."&lt;/span&gt;
    &lt;span class="nv"&gt;service&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;selectService&lt;span class="sb"&gt;`&lt;/span&gt;
    colorEcho service: &lt;span class="nv"&gt;$service&lt;/span&gt;
    echo_stderr

    echo_stderr &lt;span class="s2"&gt;"Select task."&lt;/span&gt;
    &lt;span class="nv"&gt;task&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;selectTask&lt;span class="sb"&gt;`&lt;/span&gt;
    colorEcho task: &lt;span class="nv"&gt;$task&lt;/span&gt;
    echo_stderr

    echo_stderr &lt;span class="s2"&gt;"Select container."&lt;/span&gt;
    &lt;span class="nv"&gt;container&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;selectContainer&lt;span class="sb"&gt;`&lt;/span&gt;
    colorEcho container: &lt;span class="nv"&gt;$container&lt;/span&gt;
    echo_stderr

    echo_stderr &lt;span class="s2"&gt;"Executing command (you might have to upgrade your AWS CLI if this fails)"&lt;/span&gt;
    &lt;span class="nv"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"aws ecs execute-command &lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;params&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; --cluster &lt;/span&gt;&lt;span class="nv"&gt;$cluster&lt;/span&gt;&lt;span class="s2"&gt; --container &lt;/span&gt;&lt;span class="nv"&gt;$container&lt;/span&gt;&lt;span class="s2"&gt; --task &lt;/span&gt;&lt;span class="nv"&gt;$task&lt;/span&gt;&lt;span class="s2"&gt; --interactive --command '&lt;/span&gt;&lt;span class="nv"&gt;$command&lt;/span&gt;&lt;span class="s2"&gt;'"&lt;/span&gt;
    colorEcho &lt;span class="nv"&gt;$cmd&lt;/span&gt;

    &lt;span class="nv"&gt;$cmd&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Execute main function and pass all params over&lt;/span&gt;
main &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Download it, save it any name you like, `chmod` it.&lt;/span&gt;
curl https://gist.githubusercontent.com/yuki777/640cba3e0a68587c36165b8a87d25390/raw/5bfa8242ba00ed336da76711d602e6df4f76a452/sssh &lt;span class="nt"&gt;-o&lt;/span&gt; sssh
&lt;span class="nb"&gt;chmod &lt;/span&gt;744 sssh
./sssh

&lt;span class="c"&gt;# Select aws profile from `aws configure list-profiles`&lt;/span&gt;
Select aws profile.
1&lt;span class="o"&gt;)&lt;/span&gt; default
2&lt;span class="o"&gt;)&lt;/span&gt; foo-bar
&lt;span class="c"&gt;#? 2&lt;/span&gt;
profile: foo-bar

&lt;span class="c"&gt;# Select cluster from `aws ecs list-clusters`&lt;/span&gt;
Select cluster.
1&lt;span class="o"&gt;)&lt;/span&gt; dev-foo-bar-cluster          9&lt;span class="o"&gt;)&lt;/span&gt; prod-foo-app-cluster
2&lt;span class="o"&gt;)&lt;/span&gt; prd-foo-hoge-ad-cluster      10&lt;span class="o"&gt;)&lt;/span&gt; stg-foo-app-cluster
3&lt;span class="o"&gt;)&lt;/span&gt; prd-foo-hoge-cluster         11&lt;span class="o"&gt;)&lt;/span&gt; stg-foo-hoge-cluster
4&lt;span class="o"&gt;)&lt;/span&gt; prd-foo-piyo2021-ad-cluster  12&lt;span class="o"&gt;)&lt;/span&gt; stg-foo-piyo2021-cluster
5&lt;span class="o"&gt;)&lt;/span&gt; prd-foo-piyo2021-cluster     13&lt;span class="o"&gt;)&lt;/span&gt; stg-foo-bar-cluster
6&lt;span class="o"&gt;)&lt;/span&gt; prd-foo-bar-ad-cluster       14&lt;span class="o"&gt;)&lt;/span&gt; stg-foo-tags-cluster
7&lt;span class="o"&gt;)&lt;/span&gt; prd-foo-bar-cluster          15&lt;span class="o"&gt;)&lt;/span&gt; hoge-foo-bar-cluster
8&lt;span class="o"&gt;)&lt;/span&gt; prd-foo-tags-cluster
&lt;span class="c"&gt;#? 1&lt;/span&gt;
cluster: dev-foo-bar-cluster

&lt;span class="c"&gt;# Select service from `aws ecs list-services`&lt;/span&gt;
 1&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1125-service
 2&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1206-service
 3&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1249-service
 4&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1275-service
 5&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1323-service
 6&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1348-service
 7&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1349-service
 8&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1384-service
 9&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1386-service
10&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1391-service
11&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1397-service
12&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1399-service
13&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1412-service
14&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1413-service
15&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1419-service
16&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1420-service
17&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-service
&lt;span class="c"&gt;#? 16&lt;/span&gt;
service: arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-bar-qa-1420-service

&lt;span class="c"&gt;# Select task from `aws ecs list-tasks`&lt;/span&gt;
1&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:task/dev-foo-bar-cluster/&lt;span class="k"&gt;********************************&lt;/span&gt;
&lt;span class="c"&gt;#? 1&lt;/span&gt;
task: arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:task/dev-foo-bar-cluster/&lt;span class="k"&gt;********************************&lt;/span&gt;

&lt;span class="c"&gt;# Select container from `aws ecs describe-tasks`&lt;/span&gt;
1&lt;span class="o"&gt;)&lt;/span&gt; container-foo
2&lt;span class="o"&gt;)&lt;/span&gt; container-bar
3&lt;span class="o"&gt;)&lt;/span&gt; container-hoge
4&lt;span class="o"&gt;)&lt;/span&gt; container-piyo
&lt;span class="c"&gt;#? 1&lt;/span&gt;
container: container-foo

&lt;span class="c"&gt;# Show command&lt;/span&gt;
aws ecs execute-command &lt;span class="nt"&gt;--profile&lt;/span&gt; foo-bar &lt;span class="nt"&gt;--cluster&lt;/span&gt; dev-foo-bar-cluster &lt;span class="nt"&gt;--container&lt;/span&gt; container-foo &lt;span class="nt"&gt;--task&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:task/dev-foo-bar-cluster/&lt;span class="k"&gt;********************************&lt;/span&gt; &lt;span class="nt"&gt;--interactive&lt;/span&gt; &lt;span class="nt"&gt;--command&lt;/span&gt; &lt;span class="s1"&gt;'/bin/sh'&lt;/span&gt;

The Session Manager plugin was installed successfully. Use the AWS CLI to start a session.

&lt;span class="c"&gt;# Start your session and run command from `aws ecs execute-command`&lt;/span&gt;
Starting session with SessionId: ecs-execute-command-&lt;span class="k"&gt;*****************&lt;/span&gt;
/path/to/home &lt;span class="c"&gt;# :)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>What were your favourite GitHub Universe moments? Here's mine</title>
      <author>Michelle Mannering</author>
      <pubDate>Mon, 08 Nov 2021 01:19:09 +0000</pubDate>
      <link>https://dev.to/github/what-were-your-favourite-github-universe-moments-heres-mine-25fi</link>
      <guid>https://dev.to/github/what-were-your-favourite-github-universe-moments-heres-mine-25fi</guid>
      <description>&lt;p&gt;GitHub Universe is now finished. What were your favourite moments? If you missed our post on all things Universe, check it out.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/github" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pM6fmKzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7fGFlBNG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2575/3da37f64-b46e-4fa5-bf86-01b63ba5f57b.png" alt="GitHub" width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Rph_F4D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ak56TdXS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/397557/4eb4ece3-2832-407c-b933-f1b4b58829e6.jpg" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/github/what-you-missed-at-github-universe-the-latest-feature-announcements-190l" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What you missed at GitHub Universe, the latest feature announcements&lt;/h2&gt;
      &lt;h3&gt;Michelle Mannering for GitHub ・ Oct 29 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#product&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;If you haven't already, read all the cool announcements we made, and let us know your favourites. We had our &lt;a href="https://www.twitch.tv/videos/1189130769"&gt;APAC Watch parties&lt;/a&gt; and we loved all the things we saw.&lt;/p&gt;

&lt;p&gt;Here's my top announcements, as well as a few other awesome moments from GitHub Universe.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#codespaces"&gt;
  &lt;/a&gt;
  Codespaces
&lt;/h2&gt;

&lt;p&gt;I love the fact anyone can open Codespaces on their computer, laptop, iPad, phone, even a Tesla, and deploy fixes. I can do this anytime, anywhere in the world (as long as I have an internet connection). All my dependencies are added, and I can still use my VS Code settings. This has been a game changer for our team who works all over the world.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sX1KpLZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FDILcrGX0AcnAqc.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8p_8E6Z1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1410632439370641409/Pt-7RucE_normal.jpg" alt="Visual Studio Code profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Visual Studio Code
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @code
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Check out what's new with Codespaces and how to more easily set it up for you and your team in this video from @GitHub Universe–with @2percentsilk and &lt;a href="https://twitter.com/notbaileybrooks"&gt;@notbaileybrooks&lt;/a&gt;&lt;br&gt;Watch now 👉 &lt;a href="https://t.co/c4DbxQ4S3P"&gt;youtube.com/watch?v=X9Z-rU…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      18:20 PM - 01 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1455238220237754374" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1455238220237754374" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1455238220237754374" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#copilot"&gt;
  &lt;/a&gt;
  Copilot
&lt;/h2&gt;

&lt;p&gt;GitHub Copilot has been an incredible asset in my coding journey. Copilot makes suggestions to my code on what I should include next, and even helps me write whole functions. It's super useful when starting out, or, if you're like me, and still learning along the way.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8JjVNFc2kK4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-github-issues"&gt;
  &lt;/a&gt;
  New GitHub Issues
&lt;/h2&gt;

&lt;p&gt;We've been using the new GitHub Issues for a while and they have been amazing. It's been great using the new project boards and tables, and being able to convert tasks to Issues. We've been tracking project ideas and building lists of things we might like to do in future. Once we're ready to put a list item into action, we convert it into an Issue and we're off planning.&lt;/p&gt;

&lt;p&gt;It's definitely a game changer for project planning!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ha1KHcPMAEk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-discussions"&gt;
  &lt;/a&gt;
  GitHub Discussions
&lt;/h2&gt;

&lt;p&gt;Discussions are a loved feature among the community. Maintainers use them to connect to their contributors, and many others use Discussions to collect ideas. The new features added to Discussions such as labels and announcements is something we've been using on a number of our repos. I can't wait until polls are implemented! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#papercuts"&gt;
  &lt;/a&gt;
  Papercuts
&lt;/h2&gt;

&lt;p&gt;There's never a GitHub Universe without announcing several changes to help make all our lives easier. The new table of contents to help navigate markdown files makes my life a whole lot better. I'm always looking at READMEs, and being able to navigate them easily is so useful.&lt;/p&gt;

&lt;p&gt;Being able to copy large pieces of code is perfect when looking through tutorials. And navigating the GitHub web got a whole lot easier with the Command Palette. I'll be pressing CTRL+K (yes I use Windows) all the time now!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-goodies-from-universe"&gt;
  &lt;/a&gt;
  Other Goodies from Universe
&lt;/h2&gt;

&lt;p&gt;It wouldn't be a GitHub Universe without a few other goodies. Whilst these aren't major feature announcements, these are all amazing things happening in the developer community and relevant to developers. Here's my favourites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#devops"&gt;
  &lt;/a&gt;
  DevOps
&lt;/h3&gt;

&lt;p&gt;This &lt;em&gt;What is DevOps&lt;/em&gt; video by &lt;a href="https://twitter.com/editingemily"&gt;Emily Freeman&lt;/a&gt; is epic! There's a lot of Easter eggs in this one, plus quirky analogies. This video (shown on Day 2 of Universe) certainly gave us a lot of laughs.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kBV8gPVZNEE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#it-depends"&gt;
  &lt;/a&gt;
  It Depends
&lt;/h3&gt;

&lt;p&gt;One of our GitHub Stars, &lt;a href="https://twitter.com/cassidoo"&gt;Cassidy Williams&lt;/a&gt;, did an awesome video for Universe. She went back in time and spoke to her younger self. The catch, "it depends". Sadly (or luckily), most things in life 'depend' on something else. This funny and loveable interaction had us all laughing, and resonating!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aMWh2uLO9OM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Fun fact, this one was filmed in one of the meeting rooms at GitHub. Yes, this is an actual room which exists... for meetings!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#djs-and-coding"&gt;
  &lt;/a&gt;
  DJs and coding
&lt;/h3&gt;

&lt;p&gt;At our last two Universe events, we've been lucky enough to have live performances from some DJ-coding extraordinaires. This year was no different. We had some amazing music produced for all our entertainment. Check out one of these awesome sets by DJ Dave.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/JDxhkdm_t1U"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-universe"&gt;
  &lt;/a&gt;
  GitHub Universe
&lt;/h2&gt;

&lt;p&gt;You'll find plenty more videos, cuts, and the full Universe live streams on our &lt;a href="https://www.youtube.com/channel/UC7c3Kb6jYCRj4JOHHZTxKsQ"&gt;GitHub YouTube channel&lt;/a&gt;. There are more being added, so make sure you like and subscribe so you don't miss out.&lt;/p&gt;

&lt;p&gt;What was your favourite Universe moment or feature announcement?&lt;/p&gt;

</description>
      <category>event</category>
      <category>github</category>
      <category>devops</category>
    </item>
    <item>
      <title>Top 10 Smart Contract &amp; Solidity Developer Learning Resources </title>
      <author>Patrick Collins</author>
      <pubDate>Mon, 08 Nov 2021 01:04:39 +0000</pubDate>
      <link>https://dev.to/patrickalphac/top-10-smart-contract-solidity-developer-learning-resources-46db</link>
      <guid>https://dev.to/patrickalphac/top-10-smart-contract-solidity-developer-learning-resources-46db</guid>
      <description>&lt;p&gt;Learning to &lt;a href="https://betterprogramming.pub/how-to-become-a-blockchain-engineer-fa4386a0504f"&gt;become a Smart Contract and Blockchain Developer&lt;/a&gt; can seem like a daunting task, but it doesn't have to be!&lt;/p&gt;

&lt;p&gt;Just set aside some time each week, and get cracking on any of the tutorials and pieces of content below. Don't be afraid to ask a ton of questions, and don't feel imposter syndrome! Just by reading this article, you are already a welcomed member of the blockchain community. &lt;/p&gt;

&lt;p&gt;If anytime you get stuck, feel free to refer to &lt;a href="https://docs.chain.link/docs/getting-help/"&gt;this document&lt;/a&gt; on how to get unstuck in the blockchain space. It applies to everything in open source!&lt;/p&gt;

&lt;p&gt;In any case, let's go ahead and get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-solidity-blockchain-and-smart-contract-course-beginner-to-expert-python-tutorial"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.youtube.com/watch?v=M576WGiDBdQ"&gt;Solidity, Blockchain, and Smart Contract Course – Beginner to Expert Python Tutorial&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/M576WGiDBdQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now I'm a bit biased here, since I made this course! But I must say, it has everything you need. It goes through all the basics at the start, and then gets deeper and deeper into more and more advanced concepts like upgradeability, efficient testing, full stack development, and more. It's a project based learning resource, so at the end of each "lesson", you'll have a full project you can show off on your GitHub!&lt;/p&gt;

&lt;p&gt;Ideally it's for engineers who have a little bit of python in their back pocket, but &lt;a href="https://www.youtube.com/watch?v=rfscVS0vtbw"&gt;freecodecamp has a remedy for that&lt;/a&gt; as well! &lt;/p&gt;

&lt;p&gt;A lot of information is packed into this course, so don't do it all in one go! Remember to take breaks, and jump into the &lt;a href="https://github.com/smartcontractkit/full-blockchain-solidity-course-py"&gt;GitHub discussions&lt;/a&gt; and ask questions, or on Stack Overflow! This is easily one of, if not the most dense blockchain tutorial on the planet. &lt;/p&gt;

&lt;p&gt;Oh, and I have a javascript version on the distant horizon. Be sure to follow me on &lt;a href="https://twitter.com/PatrickAlphaC"&gt;Twitter&lt;/a&gt; and &lt;a href="https://medium.com/@patrick.collins_58673"&gt;Medium&lt;/a&gt; for updates!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-cryptozombies"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://cryptozombies.io/"&gt;Cryptozombies&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://cryptozombies.io/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bxFmQJfS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yntxcg2yqgskf21bh10p.png" alt="Cryptozombies" width="880" height="567"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the longest time, Cryptozombies has been one of the go-to courses for learning blockchain &amp;amp; solidity. This gamified platform brings you step by step through solidity programming as you build your zombie army!&lt;/p&gt;

&lt;p&gt;This course has a wonderful user interface that's fun for people of any age, and is one of the most approachable content on this list. The Cryptozombies team does a tremendous job showing NFTs, inheritance, and everything you'd need in basic solidity. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-dapp-university"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://www.youtube.com/watch?v=XLahq4qyors"&gt;Dapp University&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/XLahq4qyors"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;YouTube university strikes again! Gregory has been making top quality content in the blockchain space for years now, and continues to do so. With a focus on both solidity / smart contracts and full stack development, taking his videos and his more hands-on bootcamp will for sure turn you into a "blockchain master". &lt;/p&gt;

&lt;p&gt;He has tons of videos on his youtube that can help you learn just about anything in this space, as well as a paid for bootcamp with him and his team. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-chainshot"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://www.chainshot.com/courses"&gt;Chainshot&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.chainshot.com/courses"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yRwsD_Po--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndmnx3w8xgm8b7ja8pvl.png" alt="Chainshot Website Homepage" width="880" height="585"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chainshot has everything you need, javascript tutorials, solidity tutorials, DeFi tutorials with &lt;a href="https://aave.com/"&gt;Aave&lt;/a&gt; and one of the best bootcamps this space has ever seen. &lt;/p&gt;

&lt;p&gt;Not only does Chainshot have self-paced courses, but they also have an on-hands bootcamp. Bootcamps are important for people who want to have that hands-on guided learning, and can be the difference in having "it all make sense". I highly recommend checking out their bootcamps if you want to take it another step. This team is incredibly knowledgeable about this space, and are an incredibly talented team at teaching people how to get their careers going in the blockchain world. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-consensys-bootcamp"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://consensys.net/academy/bootcamp/"&gt;Consensys Bootcamp&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://consensys.net/academy/bootcamp/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jrVfT1EU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9q46322og0w2kcug6k67.png" alt="Consensys Bootcamp Webpage" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is another bootcamp that just always knocks it out of the park. &lt;/p&gt;

&lt;p&gt;The Consensys team is one of the teams that has been around from basically the start of this whole thing. They consistently deliver on bringing in some of the best in the space to give guest lectures to the students, have top quality content, and are another bootcamp that I highly recommend to anyone looking to get into this space with a hands-on learning approach, and a team to guide them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-ivan-on-tech-moralis"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://www.youtube.com/channel/UCgWS9Q3P5AxCWyQLT2kQhBw"&gt;Ivan On Tech / Moralis&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/txHnWDRB728"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCrYmtJBtLdtm2ov84ulV-yg"&gt;Ivan on Tech&lt;/a&gt; and his team at &lt;a href="https://moralis.io/"&gt;Moralis&lt;/a&gt; have just about everything.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://academy.moralis.io/"&gt;Moralis Academy&lt;/a&gt; | Blockchain courses&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://moralis.io/"&gt;Moralis&lt;/a&gt; | A tool designed for end-to-end Dapp building&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCgWS9Q3P5AxCWyQLT2kQhBw"&gt;YouTube Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Moralis team helps engineers do and learn everything under the sun when it comes to full stack development in blockchain. The focus a little less on the solidity and smart contract implementations, but they focus a lot on user experience so once you build your smart contracts, others can interact with them. Moralis is a must know tool for people looking to do anything in the blockchain space for full stack.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-ethernaut"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://ethernaut.openzeppelin.com/"&gt;Ethernaut&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://ethernaut.openzeppelin.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1VGian2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9g2jscu08ooydg5f1or.png" alt="Ethernaut Home Page" width="880" height="566"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the harder pieces in this space is Ethernaut. You need a little bit of a javascript background, but trudging your way through this course will teach you a lot of the ins and outs and "gotchas" of solidity, and is one of the quickest ways to become "advanced" in the ways of solidity. &lt;/p&gt;

&lt;p&gt;This was created by the &lt;a href="https://openzeppelin.com/"&gt;Openzeppelin&lt;/a&gt; team, who are top auditors and security researchers in the blockchain space, and they make contracts for people to fork into their own projects. Anyone in the blockchain space worth their "salt" knows who Openzeppelin is and how to work with their tools!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-the-ethereum-org-list"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://ethereum.org/en/developers/learning-tools/"&gt;The Ethereum Org List&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://ethereum.org/en/developers/learning-tools/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Et_CK5j3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pandr9ci7fz3kkwdtmzq.png" alt="Ethereum Org Site" width="880" height="943"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What better way to learn about web3 and Ethereum than from the community itself! &lt;/p&gt;

&lt;p&gt;The Ethereum org website is JAM packed with content, tutorials, and submissions from around the globe, in exactly the manner you'd expect. You can find just about anything here to &lt;a href="https://ethereum.org/en/developers/tutorials/"&gt;learn and grow&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-useweb3"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://www.useweb3.xyz/"&gt;useWeb3&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.useweb3.xyz/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E1am5msz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqsioftnx9v1pt4ej77f.png" alt="useWeb3 Homepage" width="880" height="577"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;useWeb3, like the Ethereum org website, is dedicated to being a living document of updated courses and content to teach people how to build in the blockchain space. &lt;/p&gt;

&lt;p&gt;This open sourced project is constantly updated, and really any of the projects listed on their site is worthwhile for you to check and and put to the test!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-there-are-so-many"&gt;
  &lt;/a&gt;
  10. There are so many!!
&lt;/h2&gt;

&lt;p&gt;Ok, so I fibbed, this article has way more than just 10!!! Here is a list of tons of different places you can get started learning solidity, smart contracts, and blockchain. It doesn't matter where you go, just pick one, and go!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://eattheblocks.com/"&gt;EatTheBlocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chain.link/bootcamp"&gt;Chainlink Bootcamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UCn-3f8tw_E1jZvhuHatROwA"&gt;Patrick Collins&lt;/a&gt; (That's me!)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/austingriffith"&gt;Austin Griffith&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/boyindasouth"&gt;Nader Dabit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://buildspace.so/"&gt;Buildspace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learnxinyminutes.com/docs/solidity/"&gt;Learn X in Y Minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://remix.ethereum.org/"&gt;Remix with Learn ETH Plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And so much more.&lt;/p&gt;

&lt;p&gt;Well, as always, be sure to follow me on &lt;a href="https://twitter.com/PatrickAlphaC"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.youtube.com/channel/UCn-3f8tw_E1jZvhuHatROwA"&gt;YouTube&lt;/a&gt;, &lt;a href="https://medium.com/@patrick.collins_58673"&gt;Medium&lt;/a&gt;, and &lt;a href="https://github.com/PatrickAlphaC"&gt;GitHub&lt;/a&gt;, and I hope to see you in the community!&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>programming</category>
      <category>solidity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>100 días de código: 4 y 5, a veces los días son mas ocupados de lo que crees.</title>
      <author>Daro</author>
      <pubDate>Mon, 08 Nov 2021 00:49:39 +0000</pubDate>
      <link>https://dev.to/darito/100-dias-de-codigo-4-y-5-a-veces-los-dias-son-mas-ocupados-de-lo-que-crees-4go3</link>
      <guid>https://dev.to/darito/100-dias-de-codigo-4-y-5-a-veces-los-dias-son-mas-ocupados-de-lo-que-crees-4go3</guid>
      <description>&lt;p&gt;¡Hey hey hey!&lt;/p&gt;

&lt;p&gt;Bienvenidos a este nuevo blog despues de haberme saltado un día, he descubierto que a veces tengo el día demasiado ocupado. Apenas me pude permitir 4 horas de mi tiempo para codificar en estos dos días!!!! y eso para mi es una tragedia ya que es mi actividad favorita. &lt;/p&gt;

&lt;p&gt;Ahora volvamos al pasado para contarles el día de ayer...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XkUj2mWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pg630sftmqoxayma6ylt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XkUj2mWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pg630sftmqoxayma6ylt.jpg" alt="delorean" width="640" height="640"&gt;&lt;/a&gt;&lt;br&gt;
Photo by &lt;a href="https://unsplash.com/@deloreanrental?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Delorean Rental&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/back-to-the-future?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ayer"&gt;
  &lt;/a&gt;
  Ayer:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Diseñe algunos componentes de la interfaz móvil de mi portfolio.&lt;/li&gt;
&lt;li&gt;Aprendí que en diseño normalmente se crean paletas de color y de esas paletas se obtienen distintos tintes y sombras de cada color de la paleta. &lt;/li&gt;
&lt;li&gt;Aprendí las leyes de Gestalt las cuales son: Ley de figura y fondo, de semejanza, de proximidad, de la continuidad, de simetría o dirección común, de la simplicidad y ley de la continuidad.&lt;/li&gt;
&lt;li&gt;Aprendí a crear un servidor y a ejecutarlo en desarrollo.&lt;/li&gt;
&lt;li&gt;Aprendí las peticiones &lt;code&gt;http&lt;/code&gt; como son &lt;code&gt;post&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt; y &lt;code&gt;delete&lt;/code&gt; con express en un servidor de nodejs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#hoy"&gt;
  &lt;/a&gt;
  Hoy:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Aprendí los códigos de estado de respuesta se agrupan por números de los cuales 

&lt;ul&gt;
&lt;li&gt;Las respuestas informativas van del código 100 al 199.&lt;/li&gt;
&lt;li&gt;Las respuestas satisfactorias van del 200 al 299.&lt;/li&gt;
&lt;li&gt;Las respuestas de redirección van 300 al 399.&lt;/li&gt;
&lt;li&gt;Las respuestas de error del cliente van del 400 al 499.&lt;/li&gt;
&lt;li&gt;Las respuestas de error de servidor van del 500 al 599.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Comencé a realizar pruebas de funciones asíncronas en una api backend.&lt;/li&gt;
&lt;li&gt;Obtener los parámetros de ruta personalizados y aprender el uso de los middlewares en el backend con nodejs y express.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ahora si regresemos al día de hoy...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xmcVJHK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ckmc1gu0uli0mhny7yq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xmcVJHK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ckmc1gu0uli0mhny7yq.jpg" alt="meme back to the future" width="880" height="549"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No mencionare lo de ayer porque directamente esta en la parte de arriba 👆 pero si lo que realice...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hoy"&gt;
  &lt;/a&gt;
  Hoy:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Termine el diseño de mi pagina web en móvil y en Tablet.&lt;/li&gt;
&lt;li&gt;Aumente mi puntuación en &lt;em&gt;Problem solving&lt;/em&gt; en HackerRank.&lt;/li&gt;
&lt;li&gt;Comencé a ver algunos frameworks de Css tailwind, SASS, Foundation, Bulma y SemanticUI.&lt;/li&gt;
&lt;li&gt;Aprendí que Tailwind Css solo se puede instalar en &lt;code&gt;Nextjs&lt;/code&gt;, &lt;code&gt;Vuejs&lt;/code&gt;, &lt;code&gt;Laravel&lt;/code&gt;, &lt;code&gt;Nuxtjs&lt;/code&gt; &lt;code&gt;React&lt;/code&gt; y &lt;code&gt;Gatsby&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;También comprendí despues de estos días que hay que establecer una serie de metas en el desarrollo semanales o mensuales para realizar un seguimiento del uso del tiempo asi que mañana comenzare con una planeación para la semana. &lt;/p&gt;

&lt;p&gt;¡Que tengan un gran día o noche y mucho éxito con sus proyectos!&lt;br&gt;
No olviden sonreír y es todo, hasta mañana.&lt;/p&gt;

</description>
      <category>spanish</category>
      <category>webdev</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>How I Manipulate Files on the Command line</title>
      <author>Dolamu Asipa</author>
      <pubDate>Mon, 08 Nov 2021 00:22:41 +0000</pubDate>
      <link>https://dev.to/dolamu/7-easy-tips-to-manipulate-files-on-the-linux-command-line-2glf</link>
      <guid>https://dev.to/dolamu/7-easy-tips-to-manipulate-files-on-the-linux-command-line-2glf</guid>
      <description>&lt;p&gt;I found the linux command line quite intimidating when I first started learning to code. It seemed to require extensive and comprehensive knowledge and understanding of commands and keyboard shortcuts. However, as I read more about it and practiced what I learned, I realized that it isn't as scary as it seemed; that It only requires a lot of constant practice. I also discovered that others &lt;a href="https://hackernoon.com/linux-survival-guide-for-beginners-c18bfd982036"&gt;feel the same way&lt;/a&gt;, which made me realise that I wasn't alone.&lt;/p&gt;

&lt;p&gt;The other thing I discovered during this period is that we are all beginners and sharing is helpful, since no one is an island. So I decided to &lt;a href="https://dev.to/dolamu/10-linux-commands-every-newbie-should-know-hpj"&gt;share my experience&lt;/a&gt; with others starting out as well. As we all know, learning is never-ending. There will always be new tools and new commands to learn, especially when you're a beginner. The following tips will help you navigate through files and directories on the command line. 👇&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#manipulating-files-and-directories"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Manipulating Files and Directories&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;to print a string of characters to your screen, use the &lt;code&gt;echo&lt;/code&gt; command by typing 👉 &lt;code&gt;echo &amp;lt;string&amp;gt;&lt;/code&gt; e.g. &lt;code&gt;echo Hello world&lt;/code&gt;. To print without a newline being inserted, use the &lt;code&gt;-n&lt;/code&gt; option as follows; type 👉 &lt;code&gt;echo -n &amp;lt;string&amp;gt;&lt;/code&gt;. To print a string of characters to a file without using a text editor, use the &lt;em&gt;redirect operator&lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; by typing 👉 &lt;code&gt;echo "string" &amp;gt; filename&lt;/code&gt; e.g. &lt;code&gt;echo "this prints to file" &amp;gt; index.html&lt;/code&gt;. To add a new string of characters to the next line of same file, use the &lt;em&gt;append operator&lt;/em&gt; &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; and type 👉 &lt;code&gt;echo "string" &amp;gt;&amp;gt; filename&lt;/code&gt;.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to dump the contents of a file to your screen, use the &lt;code&gt;cat&lt;/code&gt; command and type 👉 &lt;code&gt;cat &amp;lt;filename&amp;gt;&lt;/code&gt; e.g &lt;code&gt;cat book.txt&lt;/code&gt;. To facilitate the comparison of files that are similar but not identical, use the &lt;code&gt;diff&lt;/code&gt; command, type 👉 &lt;code&gt;diff &amp;lt;filename1&amp;gt; &amp;lt;filename2&amp;gt;&lt;/code&gt;. Note that when there is no difference between two files, &lt;code&gt;diff&lt;/code&gt; simply outputs nothing. To dump the contents of a file (or to combine the contents of multiple files) into a separate one, direct the output of the &lt;code&gt;cat&lt;/code&gt; command to the new file using the redirect &lt;code&gt;&amp;gt;&lt;/code&gt; operator, type 👉 &lt;code&gt;cat filename(s) &amp;gt; newfile&lt;/code&gt;.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to abort the current task and regain user-control of the terminal, press 👉 &lt;code&gt;Ctrl-C&lt;/code&gt;. If this command fails, hit the &lt;code&gt;Esc&lt;/code&gt; key. To be able to move quickly within the command line, press 👉 &lt;code&gt;Ctrl-A&lt;/code&gt; to get to the beginning of the line; &lt;code&gt;Ctrl-E&lt;/code&gt; to get to the end of the line and; &lt;code&gt;Ctrl-U&lt;/code&gt; to clear the entire line and start over.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to learn more details about a command, type 👉 &lt;code&gt;man &amp;lt;command name&amp;gt;&lt;/code&gt;  e.g &lt;code&gt;man cat&lt;/code&gt;. Note that &lt;code&gt;man&lt;/code&gt; pages use the same interface as the &lt;code&gt;less&lt;/code&gt; command so you can navigate through both using the same key shortcuts. To open a new terminal tab (or window), press 👉 &lt;code&gt;Ctrl+Shift+T&lt;/code&gt; and &lt;code&gt;Ctrl+Shift+N&lt;/code&gt; respectively. To clear your screen, type 👉 &lt;code&gt;clear&lt;/code&gt; or press 👉 &lt;code&gt;Ctrl-L&lt;/code&gt;. To exit a terminal window (or tab), press 👉 &lt;code&gt;Ctrl-D&lt;/code&gt; or &lt;code&gt;Ctrl+Shift+W&lt;/code&gt; or type 👉 &lt;code&gt;exit&lt;/code&gt;.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to run the previous command exactly as written, use the exclamation point &lt;code&gt;!&lt;/code&gt; (pronounced bang) and type &lt;code&gt;!!&lt;/code&gt;. Another way to repeat previous commands is by typing &lt;code&gt;!&lt;/code&gt; followed by a character (or number of characters), which runs the last command that started with those characters. For example, to run the last &lt;code&gt;ls&lt;/code&gt; command issued, type 👉 &lt;code&gt;! l&lt;/code&gt;. Another powerful technique is to press 👉 &lt;code&gt;Ctrl+R&lt;/code&gt;. This allows you to search interactively through your previous commands, and then optionally edit the result before executing.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to create a hard link to a file; use the &lt;code&gt;ln&lt;/code&gt; command by first typing the name of the file you want to link to (i.e the source file), followed by the name of the linked file you want to create (i.e the target) for example 👉 &lt;code&gt;ln letter.doc book.doc&lt;/code&gt;. To force a link &lt;em&gt;(say, to an existing file)&lt;/em&gt; (or to execute a command without having to confirm it) use the &lt;code&gt;-f&lt;/code&gt; flag e.g &lt;code&gt;ln -f letter.doc index.html&lt;/code&gt;. &lt;br&gt;&lt;br&gt;&lt;br&gt;
The default type of link that gets created when using the &lt;code&gt;ln&lt;/code&gt; command is the hard link. Hard links create an identical copy of the linked file on disk, that gets updated automatically as the source file is updated. However, this type of link does not work for directories.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to create a link to a directory, use the &lt;code&gt;-s&lt;/code&gt; flag to create a symbolic link. This flag can also be used for linking to files as well, not just directories for example, &lt;code&gt;ln -s letter.doc index.html&lt;/code&gt;. Symbolic links can also link to files or directories on other file systems. &lt;em&gt;File systems refer to directories and files&lt;/em&gt;.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#inspecting-files"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Inspecting Files&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;to open a file or a directory or access a URL, type 👉 &lt;code&gt;xdg-open &amp;lt;filename&amp;gt;/&amp;lt;directory&amp;gt;/&amp;lt;URL&amp;gt;&lt;/code&gt;. To download a file from the internet, use the &lt;code&gt;curl&lt;/code&gt; utility which allows you to interact with URLs at the command line; type 👉 &lt;code&gt;curl -OL &amp;lt;URL&amp;gt;&lt;/code&gt;. To fetch the HTTP header of a site, type 👉 &lt;code&gt;curl -I &amp;lt;URL&amp;gt;&lt;/code&gt;.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to view the beginning and end of a file, use the &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;tail&lt;/code&gt; commands by typing 👉 &lt;code&gt;head &amp;lt;filename&amp;gt;&lt;/code&gt; and &lt;code&gt;tail &amp;lt;filename&amp;gt;&lt;/code&gt; respectively. They show the first and last 10 lines of the file, as aplicable. To print the first &lt;em&gt;n&lt;/em&gt; lines of a file (instead of the first 10), type 👉 &lt;code&gt;head -n &amp;lt;number&amp;gt; &amp;lt;filename&amp;gt;&lt;/code&gt;.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to count the number of lines in a file, type 👉 &lt;code&gt;wc &amp;lt;filename&amp;gt;&lt;/code&gt;. The output shows three separate figures, indicating the number of lines, words, and bytes in the file. To view a file that is actively changing, type 👉 &lt;code&gt;tail -f &amp;lt;filename&amp;gt;&lt;/code&gt;. This command is mostly executed when monitoring files used to log the activity of web servers for instance, in  a practice known as 'tailing the log file'.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to easily navigate through the contents of a large file, use 👉 the &lt;code&gt;less&lt;/code&gt; command for example type 👉 &lt;code&gt;less &amp;lt;filename&amp;gt;&lt;/code&gt;. While in &lt;code&gt;less&lt;/code&gt; mode; press the &lt;code&gt;spacebar&lt;/code&gt; or &lt;code&gt;Ctrl+F&lt;/code&gt; to move forward a page; the &lt;code&gt;arrow keys&lt;/code&gt; to move one line up or down; &lt;code&gt;Ctrl+B&lt;/code&gt; to move a page up; press 👉 &lt;code&gt;1G&lt;/code&gt; and &lt;code&gt;G&lt;/code&gt; to move to the beginning and end of the file respectively (to go directly to a specific line, type 👉 &lt;code&gt;&amp;lt;linenumber&amp;gt;G&lt;/code&gt;); to search through the file for a string/word, use the forward slash key &lt;code&gt;/&lt;/code&gt;, e.g. type 👉 &lt;code&gt;/&amp;lt;word&amp;gt;&lt;/code&gt;; press 👉 &lt;code&gt;n&lt;/code&gt; to move to the next search result and &lt;code&gt;N&lt;/code&gt; to the previous search result and to quit the &lt;code&gt;less&lt;/code&gt; command, press 👉 &lt;code&gt;q&lt;/code&gt;.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to search directly for a word/string in a file, use the &lt;code&gt;grep&lt;/code&gt; command, type 👉 &lt;code&gt;grep &amp;lt;word&amp;gt; &amp;lt;filename&amp;gt;&lt;/code&gt;. To search for a word/string in a file when you aren't sure where the file is, use the &lt;code&gt;-r&lt;/code&gt; flag and type 👉 &lt;code&gt;grep -r &amp;lt;word&amp;gt;&lt;/code&gt;.To perform case-insensitive search using &lt;code&gt;grep&lt;/code&gt; use the &lt;code&gt;-i&lt;/code&gt; flag by typing 👉 &lt;code&gt;grep -i &amp;lt;word&amp;gt; &amp;lt;filename&amp;gt;&lt;/code&gt;. To exclude a word/string from a search term when using &lt;code&gt;grep&lt;/code&gt;, use the &lt;code&gt;-v&lt;/code&gt; option as follows 👉  &lt;code&gt;grep &amp;lt;search term&amp;gt; &amp;lt;filename&amp;gt; | grep -v &amp;lt;word&amp;gt;&lt;/code&gt;.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to find the line number(s) in a file where a word appears, type 👉 &lt;code&gt;grep -n &amp;lt;word&amp;gt; &amp;lt;filename&amp;gt;&lt;/code&gt;. To print the first 'n' lines of a search result, pipe to the &lt;code&gt;head&lt;/code&gt; command as follows 👉 &lt;code&gt;grep -i &amp;lt;word&amp;gt; &amp;lt;filename&amp;gt; | head &amp;lt;-n&amp;gt;&lt;/code&gt;.  To count the number of lines containing references to a search term/string, use the pipe &lt;code&gt;|&lt;/code&gt; and word count&lt;code&gt;wc&lt;/code&gt; commands as follows 👉 &lt;code&gt;grep &amp;lt;word&amp;gt; &amp;lt;filename&amp;gt; | wc&lt;/code&gt;.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to print the history of commands you have previously executed in your terminal shell, use the &lt;code&gt;history&lt;/code&gt; command and pipe &lt;code&gt;|&lt;/code&gt; it to &lt;code&gt;less&lt;/code&gt; as follows 👉 &lt;code&gt;history | less&lt;/code&gt;. To execute a specific command in your command history, type 👉 &lt;code&gt;!n&lt;/code&gt; where &lt;em&gt;n&lt;/em&gt; represents the command number e.g. the 43rd command in your history. &lt;br&gt;&lt;br&gt;&lt;br&gt;
Lastly, to modify system files or directories and execute tasks as &lt;em&gt;root&lt;/em&gt;, use the &lt;code&gt;sudo&lt;/code&gt; command.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;As always, thanks for reading!&lt;/em&gt;  👋 👋&lt;/p&gt;

</description>
      <category>linux</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Day 2 of #100daysofcode: An exercise in React Modularity</title>
      <author>Ryan Whelchel</author>
      <pubDate>Mon, 08 Nov 2021 00:01:12 +0000</pubDate>
      <link>https://dev.to/rydwhelchel/day-2-of-100daysofcode-an-exercise-in-react-modularity-252b</link>
      <guid>https://dev.to/rydwhelchel/day-2-of-100daysofcode-an-exercise-in-react-modularity-252b</guid>
      <description>&lt;p&gt;Life happens, so today will be a short post following a relatively short time period of practice today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#todays-progress"&gt;
  &lt;/a&gt;
  Today's Progress
&lt;/h2&gt;

&lt;p&gt;Following yesterdays post, I used my time today to focus on learning more about how to be more modular in React and Javascript. You might recall that this project is the very first time I have been exposed to JS, let alone React... So my code was extremely ugly. &lt;/p&gt;

&lt;p&gt;I spent some free time today watching bits and pieces of the &lt;a href="https://www.youtube.com/watch?v=w7ejDZ8SWv8"&gt;React JS Crash Course&lt;/a&gt; by Traversy Media. I would be shocked if you haven't seen or heard of it by now, but the tutorial lives up to its reputation. One of the best tutorials for any language or framework I have ever seen.&lt;/p&gt;

&lt;p&gt;I used what I learned to help shrink down and simplify the code in my project. I reduced the monstrous, main return statement of my &lt;code&gt;App.js&lt;/code&gt; from around 70 lines to just under 10. I also was able to move &lt;em&gt;all&lt;/em&gt; the state variables from &lt;code&gt;App.js&lt;/code&gt; to the relevant components. I still feel like I have too many state variables, but we're still making progress on cleaning up. &lt;/p&gt;

&lt;p&gt;Here's the results of my great Fall code-cleaning:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NHpSESoo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/ZdvXfFR/Screen-Shot-2021-11-07-at-6-50-25-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NHpSESoo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/ZdvXfFR/Screen-Shot-2021-11-07-at-6-50-25-PM.png" alt="Image displaying a shortened version of App.js" width="880" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tomorrows-plans"&gt;
  &lt;/a&gt;
  Tomorrow's Plans
&lt;/h2&gt;

&lt;p&gt;I have more open time tomorrow, so barring any extraneous circumstances I will be making much more progress. Here's what is on the docket:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Re-review my components and see if any further simplification/modularization can be done&lt;/li&gt;
&lt;li&gt;Re-review my states, see if any states can be cleverly merged (I suspect that they can)&lt;/li&gt;
&lt;li&gt;Start digging on React-bootstrap and get to styling! Step 1 of this process will be finding a good way to split up the information into at least 2 columns&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#recommendations"&gt;
  &lt;/a&gt;
  Recommendations?
&lt;/h2&gt;

&lt;p&gt;As usual, I want to ask &lt;em&gt;you&lt;/em&gt; for your recommendations. I see that a lot you are very skilled at React and JS and I'd love to hear from you! If you have any suggested readings, tutorials, ideas for my project or journey, I'd love to hear about it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources-and-suggested-readingwriting"&gt;
  &lt;/a&gt;
  Resources and Suggested Reading/Writing
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=w7ejDZ8SWv8"&gt;React JS Crash Course 2021&lt;/a&gt;&lt;br&gt;
&lt;a href="https://react-bootstrap.github.io/"&gt;React-bootstrap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for today!&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>python</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>100 Days of Code</title>
      <author>Breno Lopes do Carmo</author>
      <pubDate>Sun, 07 Nov 2021 23:49:02 +0000</pubDate>
      <link>https://dev.to/ztrolly/100-days-of-code-419</link>
      <guid>https://dev.to/ztrolly/100-days-of-code-419</guid>
      <description>&lt;p&gt;I really want to start this project but i don't know how to make the first step. You guys have some &lt;strong&gt;tips&lt;/strong&gt; or a &lt;strong&gt;roadmap&lt;/strong&gt; for this project?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Remember, be awesome&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>productivity</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Week 11 Blog Post</title>
      <author>Francesca Ansell</author>
      <pubDate>Sun, 07 Nov 2021 22:45:47 +0000</pubDate>
      <link>https://dev.to/francescaansell/week-11-blog-post-76d</link>
      <guid>https://dev.to/francescaansell/week-11-blog-post-76d</guid>
      <description>&lt;p&gt;Time and money control everything in our lives. Have you ever thought about what you would do if neither where an issue? If I had the opportunity I would create an app to identify areas of need and direct supplies there. Now more than ever our healthcare industry is struggling to support the amount of people who need care, whether it be support with physical supplies or technologies to intake patient information. Often these 'supplies' are actually people like nurses. This application could help establish areas that need traveling nurses and connect potential employees there. In states of emergency hospitals could donate or sell extra equipment, ppe, etc. to hospitals in need. An application of this type would need multiple hospitals/facilities to adopt it for it to be useful. Or it could be used within networks of hospitals for example UPMC, or Allegany Health Network. I would not personally use this app but a company I work for in the future may use this app.  &lt;/p&gt;

&lt;p&gt;I have the programing skills, and knowledge of the healthcare industry to see this project through. I also have the user interface design, user experience, and software development life cycle skills. I know what areas of healthcare to target and the geographic areas that need the most attention, such as rural areas. I also have the leadership skills to identify what people, and resources are needed to make this app successful. &lt;/p&gt;

&lt;p&gt;I believe that technology has the power to improve the healthcare industry if used correctly. The most glaring issue now seems to be lack of communication between hospitals and doctor due to competition. Hospital administration often cares more about making money and bringing in new patients than perfecting the outcomes of their existing patients. Although this is not always true the bottom line is that hospitals need to make money to keep there doors open at all. &lt;/p&gt;

&lt;p&gt;I truly don't believe my life would drastically change if time and money where no issue. I would still want to be a UX/UI designer that works on the EHR system. Possibly I would pick a smaller, more patient oriented company that in the real world would offer less pay. If time where no issue I would be able to dedicate my life to my career and not have to worry about delegating my time for my family or friends.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>React Split Components: A new way of Function Components without Hooks</title>
      <author>南小北</author>
      <pubDate>Sun, 07 Nov 2021 22:30:53 +0000</pubDate>
      <link>https://dev.to/nanxiaobei/react-split-components-a-new-way-of-function-components-without-hooks-2aem</link>
      <guid>https://dev.to/nanxiaobei/react-split-components-a-new-way-of-function-components-without-hooks-2aem</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-the-problem-of-function-components-and-hooks"&gt;
  &lt;/a&gt;
  1. The Problem of Function Components and Hooks
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Why Function Components?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Why does React officially promote Functional Components? Class Components isn't "unusable".&lt;/p&gt;

&lt;p&gt;Because Functional Components are more in line with React's philosophy &lt;code&gt;UI = f(state)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So Hooks came, bringing "internal variables" and "side effects" to Function Components, making them fully functional. it's also a "logical sharing" solution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. The problem of Function Components&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because every time the function is called, all the internal variables are created again, which is a bit wrong in the development intuition.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;UI = f(state)&lt;/code&gt; looks like a pure function, pass &lt;code&gt;state&lt;/code&gt; and return &lt;code&gt;UI&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Like &lt;code&gt;rice = electricCooker(rice)&lt;/code&gt;, but if the &lt;code&gt;electricCooker&lt;/code&gt; rebuilds its "circuit system" every time it cooks, it's counter-intuitive.&lt;/p&gt;

&lt;p&gt;We hope that &lt;code&gt;f&lt;/code&gt; is simply "cooking", and other functions are already "carried" instead of "create" every time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. The problem of Hooks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To solve the problem of re-creating variables, React provides &lt;code&gt;useState&lt;/code&gt;, &lt;code&gt;useCallback&lt;/code&gt;, &lt;code&gt;useMemo&lt;/code&gt;, &lt;code&gt;useRef&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;State needs to be created with &lt;code&gt;useState&lt;/code&gt;. For complex data types (function, array, object) passed to sub-components, use &lt;code&gt;useCallback&lt;/code&gt;, &lt;code&gt;useMemo&lt;/code&gt; to wrap (for large calculations, use &lt;code&gt;useMemo&lt;/code&gt; too). To keep a variable, wrap it with &lt;code&gt;useRef&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the implementation of &lt;code&gt;useEffect&lt;/code&gt;, &lt;code&gt;useCallback&lt;/code&gt; and &lt;code&gt;useMemo&lt;/code&gt;, there must be a thing called &lt;code&gt;deps&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All the above makes Hooks very counter-intuitive to write. Don't I just use a variable or a function, why do I have to wrap it?&lt;/p&gt;

&lt;p&gt;Can't write code like Svelte?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XIjSunVw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s6.jpg.cm/2021/11/06/IjfqGp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XIjSunVw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s6.jpg.cm/2021/11/06/IjfqGp.jpg" alt="" width="800" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-solve-the-problem"&gt;
  &lt;/a&gt;
  2. Solve the Problem
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. The most intuitive &lt;code&gt;UI = f(state)&lt;/code&gt;:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. This is how React works:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. If the component needs to "carry" state and functions, instead of creating new ones each time, it cannot be written in the component:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Writing separately destroys the unity, which is not good. Is there a way to make the component hold external variables, and also write together in one function?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Naturally, we thought of closure (note that the component are returned internally):&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createDemo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDemo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simplified writing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the &lt;code&gt;onClick&lt;/code&gt; function doesn't need to be wrapped with &lt;code&gt;useCallback&lt;/code&gt; because it will never be re-created. With closure, &lt;strong&gt;we successfully lifted the dependency on &lt;code&gt;useCallback&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So far, I'm actually finished... Huh? How to use this component?!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-make-abilities-complete"&gt;
  &lt;/a&gt;
  3. Make Abilities Complete
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Solve &lt;code&gt;useState&lt;/code&gt; and component update:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Public helper function&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useRender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRender&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;setState&lt;/code&gt;, which is only in the component, is "re-assigned" to the external variable &lt;code&gt;render&lt;/code&gt; for use outside the component. If you need to update, manually call &lt;code&gt;render()&lt;/code&gt; (Of course, the function name is arbitrary, such as &lt;code&gt;update&lt;/code&gt;, here is the design pattern, there are no constraints on the specific implementation).&lt;/p&gt;

&lt;p&gt;As a result, &lt;strong&gt;we successfully lifted the dependency on &lt;code&gt;useState&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Above is already a usable component, try it here: &lt;a href="https://codesandbox.io/s/react-split-components-1-ycw80?file=/src/App.js"&gt;codesandbox.io/s/react-split-components-1-ycw80&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Solve &lt;code&gt;useMemo&lt;/code&gt;, &lt;code&gt;useRef&lt;/code&gt;, solve props:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPower&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;power&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getPower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// for useMemo&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;countRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;current&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// for useRef&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// "props" deconstruction must be written inside function,&lt;/span&gt;
    &lt;span class="c1"&gt;// because external initial value of "props" is undefined&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;power&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getPower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRender&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;countRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;power&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;props&lt;/code&gt; is passed out as "re-assignment" like &lt;code&gt;render&lt;/code&gt;. Then we think about it carefully: through closure, &lt;code&gt;useMemo&lt;/code&gt; and &lt;code&gt;useRef&lt;/code&gt; are actually no longer needed.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;useMemo&lt;/code&gt; and &lt;code&gt;useRef&lt;/code&gt; are because variables are created every time and need to be wrapped. With closure, variables won't be re-created, the component will naturally hold updated values of variables. All of these are the operating mechanism of JS, naturally.&lt;/p&gt;

&lt;p&gt;The calculation mechanism like computed of &lt;code&gt;useMemo&lt;/code&gt;, can be changed to manual trigger. Change declarative writing of &lt;code&gt;useMemo&lt;/code&gt;, to the imperative writing of "manual call", which is more intuitive (just like Class Components).&lt;/p&gt;

&lt;p&gt;Therefore, &lt;strong&gt;we successfully lifted the dependence on &lt;code&gt;useMemo&lt;/code&gt; and &lt;code&gt;useRef&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Try the above code here: &lt;a href="https://codesandbox.io/s/react-split-components-2-wl46b?file=/src/App.js"&gt;codesandbox.io/s/react-split-components-2-wl46b&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Solve &lt;code&gt;useEffect&lt;/code&gt; and &lt;code&gt;useLayoutEffect&lt;/code&gt;:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useRender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Omit other code...&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;layoutUpdated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLayoutUpdated&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;updated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUpdated&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;layoutUpdated&lt;/span&gt;&lt;span class="p"&gt;?.(),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;layoutUpdated&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;updated&lt;/span&gt;&lt;span class="p"&gt;?.(),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;updated&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;onUpdated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isLayoutUpdate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Omit other code...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;onUpdated&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLayoutUpdate&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;setLayoutUpdated&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;setUpdated&lt;/span&gt;&lt;span class="p"&gt;)(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;onUpdated&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Will be called in useEffect&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRender&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use the existing &lt;code&gt;render&lt;/code&gt; function to implement &lt;code&gt;useEffect&lt;/code&gt;, which is more concise (of course you can add another function).&lt;/p&gt;

&lt;p&gt;Now &lt;code&gt;render()&lt;/code&gt; can be called directly, or passed in parameters &lt;code&gt;render(onUpdated, isLayoutUpdate)&lt;/code&gt;, &lt;code&gt;isLayoutUpdate&lt;/code&gt; determines &lt;code&gt;onUpdated&lt;/code&gt; called in &lt;code&gt;useEffect&lt;/code&gt; or &lt;code&gt;useLayoutEffect&lt;/code&gt;. Note: In theory &lt;code&gt;render&lt;/code&gt; can be called multiple times, but React only triggers one update, so if &lt;code&gt;onUpdated&lt;/code&gt; is passed in each time, only the last one will call.&lt;/p&gt;

&lt;p&gt;As a result, &lt;strong&gt;we successfully lifted the dependency on &lt;code&gt;useEffect&lt;/code&gt; and &lt;code&gt;useLayoutEffect&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Try it here: &lt;a href="https://codesandbox.io/s/react-split-components-3-zw6tk?file=/src/App.js"&gt;codesandbox.io/s/react-split-components-3-zw6tk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Solve "useMount"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React components have a very basic requirement. Send API requests in didMount. After Hooks unified didMount and didUpdate to &lt;code&gt;useEffect&lt;/code&gt;, there was an additional step to understand this requirement, so "useMount" was implemented in countless projects.&lt;/p&gt;

&lt;p&gt;In the above scheme, external variables will be assigned after the first render of the component. This brings a problem: &lt;code&gt;render&lt;/code&gt; is only available after the first &lt;code&gt;useEffect&lt;/code&gt; (so the parameter is named as &lt;code&gt;onUpdated&lt;/code&gt;), then how to achieve "useMount"? Let's use the parameter of &lt;code&gt;useRender&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useRender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onMounted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isLayoutMount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Omit other code...&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;layoutMountedRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLayoutMount&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;onMounted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mountedRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isLayoutMount&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;onMounted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;layoutMountedRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;?.(),&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;mountedRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;?.(),&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="c1"&gt;// Omit other code...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onMounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRender&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onMounted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it, try it here: &lt;a href="https://codesandbox.io/s/react-split-components-4-y8hn8?file=/src/App.js"&gt;codesandbox.io/s/react-split-components-4-y8hn8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Other Hooks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So far, we have solved &lt;code&gt;useState&lt;/code&gt;, &lt;code&gt;useEffect&lt;/code&gt;, &lt;code&gt;useCallback&lt;/code&gt;, &lt;code&gt;useMemo&lt;/code&gt;, &lt;code&gt;useRef&lt;/code&gt;, &lt;code&gt;useLayoutEffect&lt;/code&gt;, these are the most commonly used in development. There are 4 remaining official Hooks: &lt;code&gt;useContext&lt;/code&gt;, &lt;code&gt;useReducer&lt;/code&gt;, &lt;code&gt;useImperativeHandle&lt;/code&gt;, &lt;code&gt;useDebugValue&lt;/code&gt;, I will not deal with them one by one.&lt;/p&gt;

&lt;p&gt;Make it simply: &lt;strong&gt;If a variable can only be obtained in the component, needs to be used outside, pass it out by re-assignment&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this design mode, any existing requirement can be realized, so-called "abilities complete".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-introducing-react-split-components-ric"&gt;
  &lt;/a&gt;
  4. Introducing React Split Components (RiC)
&lt;/h2&gt;

&lt;p&gt;Just like Higher-Order Components, this design pattern needs a name.&lt;/p&gt;

&lt;p&gt;Considering that closure splits "variables + logics" and "component code", learning the naming style of React Server Components, I named it &lt;strong&gt;React Split Components&lt;/strong&gt;, which can be abbreviated as &lt;strong&gt;RiC&lt;/strong&gt;, the small &lt;strong&gt;&lt;code&gt;i&lt;/code&gt;&lt;/strong&gt; here is a good expression of the "split" feature (Mainly after searching, I found that RSC, RPC, RLC, RTC are all occupied. Oh, the "split" has only 5 letters.).&lt;/p&gt;

&lt;p&gt;Features of React Split Components:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Remove the dependence on Hooks, but not purely Functional Components&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Through closure, no Hooks are required to wrap. This allows React developers to free themselves from the "counter-intuition of Functional Components" and "cumbersomeness of Hooks" and write pure JS intuitive code similar with Svelte.&lt;/p&gt;

&lt;p&gt;After all, closure is a natural feature of JS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Only at the writing level, no need for ESLint support&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In fact, when designing the implementation of &lt;code&gt;useEffect&lt;/code&gt;, I thought of a way to use existing code: change &lt;code&gt;useEffect(fn, deps)&lt;/code&gt; to &lt;code&gt;watch(deps, fn)&lt;/code&gt;. But if like this, the &lt;code&gt;deps&lt;/code&gt; of &lt;code&gt;watch&lt;/code&gt; will need an ESLint plugin to support (because Hooks &lt;code&gt;deps&lt;/code&gt; needs plugin support, otherwise it will easy to make mistake).&lt;/p&gt;

&lt;p&gt;If not necessary, do not add entity. We want to achieve as natural as possible, as simple as possible, as intuitive as possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Like High-Order Components, it's a "design pattern", not API, no lib needed&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It's not an official React API, doesn't need to be support by building tools (such as React Server Components).&lt;/p&gt;

&lt;p&gt;It doesn't need 3rd-party lib support (&lt;code&gt;useRender&lt;/code&gt; can be encapsulated to a npm package, but considering that everyone has different habits and needs, you can implement the helper function yourself, the above code can be a reference).&lt;/p&gt;

&lt;p&gt;React Split Components final code demo: &lt;a href="https://codesandbox.io/s/react-split-components-final-9ftjx?file=/src/App.js"&gt;codesandbox.io/s/react-split-components-final-9ftjx&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-hello-ric"&gt;
  &lt;/a&gt;
  5. Hello, RiC
&lt;/h2&gt;

&lt;p&gt;React Split Components (RiC) example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRender&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How Svelte, how intuitive, How performance is auto optimized and bye bye Hooks.&lt;/p&gt;

&lt;p&gt;GitHub: &lt;a href="https://github.com/nanxiaobei/react-split-components"&gt;github.com/nanxiaobei/react-split-components&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
    </item>
  </channel>
</rss>
