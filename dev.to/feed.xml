<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10 Best Resources to Learn Spring Framework in 2022</title>
      <author>javinpaul</author>
      <pubDate>Fri, 10 Dec 2021 07:49:27 +0000</pubDate>
      <link>https://dev.to/javinpaul/10-best-resources-to-learn-spring-framework-in-2022-jl</link>
      <guid>https://dev.to/javinpaul/10-best-resources-to-learn-spring-framework-in-2022-jl</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/courses/web-application-software-architecture-101?affiliate_id=5073518643380224"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Azb8VyWF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.educative.io/v2api/editorpage/5790781156622336/image/6068735501664256" alt="best Educative courses to learn Spring framework" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello Java developers, if you want to learn Spring Framework and looking for the best resources like books, online courses, code katas, and tutorials then you have come to the right place. &lt;/p&gt;

&lt;p&gt;Earlier, I have shared the &lt;a href="https://www.java67.com/2018/06/5-best-courses-to-learn-spring-boot-in.html"&gt;best Spring Boot courses&lt;/a&gt; and today, I Am going to share the best Spring Framework resources for Java developers. This includes to learn Spring, course, code katas and interactive study material. &lt;/p&gt;

&lt;p&gt;If you don't know, &lt;a href="https://spring.io/projects/spring-framework"&gt;Spring Framework&lt;/a&gt; is one of the world's most popular development frameworks for using enterprise Java. &lt;/p&gt;

&lt;p&gt;It is used by millions of developers for creating easily testable, reusable, and high-performance code and it is also one of the essential skills for Java developers. &lt;/p&gt;

&lt;p&gt;If you are a Java developer and not familiar with the Spring framework then this should be the first thing you should learn in 2022.&lt;/p&gt;

&lt;p&gt;One of the main advantages of the Spring Framework is that it is open-source. It was first created by Rod Johnson in 2003 and released under the Apache 2.0 license. &lt;/p&gt;

&lt;p&gt;It is also highly flexible and lightweight when it comes to size. You can install the basic version of the Spring Framework right now and it will only set you back about 2MB in storage.&lt;/p&gt;

&lt;p&gt;Spring Framework has a host of amazing features for building Java applications as well as many extensions that can be used for building web applications using the Java EE platform. The USP of Spring Framework is to make J2EE development easier for programmers and enable a POJO-based programming model.&lt;/p&gt;

&lt;p&gt;If you use POJOs, it essentially means that you don't need a server for your application. You will be able to use robust servlet containers like Tomcat or other commercial products. &lt;a href="https://www.java67.com/2017/11/top-5-free-core-spring-mvc-courses-learn-online.html"&gt;Spring&lt;/a&gt; has also revolutionized a lot of the existing technologies like ORM frameworks, logging frameworks, JEE, Quartz, and JDK Timers.&lt;/p&gt;

&lt;p&gt;Since the Spring Framework also contains environment-dependent code, it is far easier to test your code and debug it. The presence of JavaBeanstyle POJOs also means that you can use dependency injection for injecting test data.&lt;/p&gt;

&lt;p&gt;Btw, if you are in hurry and want to learn Spring for fullstack development then I also suggest you to checkout &lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Ffull-stack-application-with-spring-boot-and-react%2F"&gt;&lt;strong&gt;Go Java Full Stack with Spring Boot and React&lt;/strong&gt;&lt;/a&gt; course by Ranga Karnam, a fellow blogger and spring instructor. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Ffull-stack-application-with-spring-boot-and-react%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ogDNiVtH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2Ai5wQ5OHuTRMa_LHzlMXIHg.png" alt="10 Best Online Courses to become a Fullstack Java Programmer" width="880" height="529"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#10-best-spring-framework-resources-for-beginners-in-2022"&gt;
  &lt;/a&gt;
  10 Best Spring Framework Resources for Beginners in 2022
&lt;/h2&gt;

&lt;p&gt;Now, you must be wondering where you can learn more about the Spring Framework, right? Don't worry, we have got you covered. We scoured the far reaches of the internet and came up with a list of the Best Spring Framework Courses available on the web right now. Check out the list below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-spring-in-action-5th-edition-book"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.amazon.com/Spring-Action-Craig-Walls/dp/1617294942?tag=javamysqlanta-20"&gt;Spring in Action 5th Edition - Book &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This should be one of the first few books to read in 2021, of course, only after you finish the &lt;a href="http://www.java67.com/2018/01/effective-java-3rd-edition-by-joshua-bloch-must-read-book-for-java-develoeprs.html"&gt;Effective Java 3rd edition&lt;/a&gt; if you haven't already.&lt;/p&gt;

&lt;p&gt;Though Spring in Action doesn't need any introduction or recommendation and hands down the best book to learn Spring framework now, it is also updated to Spring 5 which means you can use this to learn and discover what's new in Spring Framework 5, like Reactive Spring, &lt;a href="https://medium.com/javarevisited/7-best-webflux-and-reactive-spring-boot-courses-for-java-programmers-33b7c6fa8995"&gt;WebFlux&lt;/a&gt;, etc.&lt;/p&gt;

&lt;p&gt;It will also teach you how to use the Spring Framework with &lt;a href="http://www.java67.com/2018/02/5-online-courses-to-learn-java-9-better.html"&gt;Java 9&lt;/a&gt; and aster data access and transactions, work with the new functional web framework and create microservices and other web services using Spring Boot and other cloud technology.&lt;/p&gt;

&lt;p&gt;I suggest you follow this book if you are learning the Spring framework in 2021. It's more up-to-date and follows the latest practices for developing a Java application with Spring. &lt;/p&gt;

&lt;p&gt;If you want, you can also combine this book with &lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fspring-framework-5-beginner-to-guru%2F"&gt;&lt;strong&gt;Spring Framework 5: Beginner to Guru&lt;/strong&gt;&lt;/a&gt; course on Udemy, which is also the most up-to-date course to learn Spring framework in 2021.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.com/Spring-Action-Craig-Walls/dp/1617294942?tag=javamysqlanta-20"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T6qxMQpm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://3.bp.blogspot.com/-YaVumSMsG8A/XCl8Hlh6BaI/AAAAAAAAMzA/9H7W4-f0nK8vzj9Yb_h3mpvmkAilJUwQwCLcBGAs/s320/Spring%252Bin%252BAction%252B5th%252BEdition.png" alt="best book to learn Spring 5" width="255" height="320"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-spring-framework-masterclass-java-spring-the-modern-way-udemy"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fspring-tutorial-for-beginners%2F"&gt;Spring Framework Masterclass: Java Spring the Modern Way&lt;/a&gt; [Udemy]
&lt;/h3&gt;

&lt;p&gt;The main highlight of this course is that you will be using real projects to learn the Spring Framework. This means that you will get a more practical and hands-on experience of Spring, enabling you to learn quicker.&lt;/p&gt;

&lt;p&gt;This course is perfect for people with some programming experience in Java but is completely new to Spring. You will be introduced to the many features of Spring and Spring Modules like JDBC, AOP, and Data JPA. This course will be your perfect gateway into the amazing world of Spring.'&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Course Duration: 12 hours&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Rating: 4.5 stars out of 5&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Instructor: in28Minutes Official&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Price: $14&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once you purchase this course, you will get lifetime access to 12 hours of on-demand video lectures, 13 articles, and 1 downloadable educational resource. The entire course content is divided into 14 sections and 139 lectures.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fspring-tutorial-for-beginners%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kDGdksbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-SgsMmzr4NgY/YaJRykIWQUI/AAAAAAAAqVE/iSsqy5aOIeU89GVr5U6sha5QOQpd2ButwCLcBGAsYHQ/w449-h258/difference%252Bbetween%252BController%252Bvs%252BService%252Bvs%252BRepository%252Bin%252BSpring.png" alt="5 Best Spring Framework Courses for Beginners to Learn Online" width="448" height="258"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-web-development-with-java-spring-framework-coursera"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Flearn%2Fweb-development-with-java-spring-framework"&gt;Web Development with Java Spring Framework&lt;/a&gt; [Coursera]&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;As the title suggests, this course is more focused on the web development side of things using the popular Web Java Framework. You will learn how Spring's libraries can be used for creating technologies like streaming TV, connected cars, and online shopping.&lt;/p&gt;

&lt;p&gt;Almost all the developers agree that Spring is the future of app development, and having it in your toolkit can be valuable and may be the difference between losing and landing your dream job. &lt;/p&gt;

&lt;p&gt;This course will cover the main parts of Spring and enable you to develop RESTFUL Web Services using &lt;a href="https://medium.com/javarevisited/my-favorite-spring-mvc-courses-for-java-developers-5ede7f85dd88"&gt;Spring MVC&lt;/a&gt; and &lt;a href="https://medium.com/javarevisited/top-5-hibernate-online-training-courses-for-beginners-and-advance-java-programmers-469460596b2b"&gt;Hibernate CRUD&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Course Duration: 19 hours&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Rating: 3.7 stars out of 5&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Instructor: Martyshkin Alexey Ivanovich&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Price: $15&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you complete the course, you will have a firm grasp of things like Dependency Injection, Inversion of Control, and accessing data using Hibernate.&lt;/p&gt;

&lt;p&gt;By the way, if you find Coursera courses useful, which they are because they are created by reputed companies and universities around the world, I suggest you join the &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fcourseraplus"&gt;Coursera Plus&lt;/a&gt;&lt;/strong&gt;, a subscription plan from Coursera which gives you unlimited access to their most popular courses, specialization, professional certificate, and guided projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Flearn%2Fweb-development-with-java-spring-framework"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OByDOCs---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-CwmWrYa1yT4/YaJLIduQYpI/AAAAAAAAqU4/MZzthcGoE683ueoEN0Nge2_7FU9onaGXACLcBGAsYHQ/w398-h209/XDP%25257ECOURSE%252521%25257Eweb-development-with-java-spring-framework.jpeg" alt="Best Coursera Course to learn Spring Framework" width="398" height="208"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It cost around $59/year but it's definitely worth it. They also provide &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fcourseraplus"&gt;7 days free trial&lt;/a&gt;&lt;/strong&gt; At the moment, you can also get Coursera Plus for just $1 for one month.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-code-katas-for-learning-spring%C2%AE-and-spring-boot"&gt;
  &lt;/a&gt;
  4. Code katas for learning Spring® and Spring Boot.
&lt;/h3&gt;

&lt;p&gt;The Spring course consists of two related tutorials that teach developers about Spring Framework and then Spring Boot by solving code katas. &lt;/p&gt;

&lt;p&gt;This whole course is on github and you can access it for free. The courses lay out examples that are discussed via documentation, located under the &lt;code&gt;assets\docs&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;The best way to take this course is to checkout the entire project locally, then view:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/BNYMellon/spring-kata/blob/main/spring-framework/README.adoc"&gt;&lt;strong&gt;Spring Framework Docs&lt;/strong&gt;&lt;/a&gt;: for the Spring Framework tutorial&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/BNYMellon/spring-kata/blob/main/spring-boot/README.adoc"&gt;&lt;strong&gt;Spring Boot Docs&lt;/strong&gt;&lt;/a&gt;: for a Spring Boot tutorial.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The courses are fairly independent, someone who knows Spring framework well, need only visit the Spring Boot tutorial to get up to speed. &lt;/p&gt;

&lt;p&gt;However, it is worth hitting a refresher and going through the Spring Framework content (even if solving the exercises is not attempted).&lt;/p&gt;

&lt;p&gt;They also cover most of the important Spring topics like core Spring, Spring Boot, Spring Data JPA, Spring REST, Hibernate and much more&lt;/p&gt;

&lt;p&gt;I found them very good in learning Spring framework in depth and practice writing Java code using spring framework. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/BNYMellon/spring-kata"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h1Tu2O3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0ttwvept34vant4djk9.png" alt="best resources to learn spring framework" width="526" height="506"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-spring-the-big-picture-pluralsight"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. &lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fspring-big-picture"&gt;Spring: The Big Picture&lt;/a&gt; [Pluralsight]&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This course will take you into the amazing world of Spring Framework, Spring Boot, and other Spring-related projects, and has an astounding 5-star rating on the &lt;a href="https://javarevisited.blogspot.com/2019/10/udemy-vs-pluralsight-review-which-is-better-to-learn-code.html"&gt;Pluralsight platform&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;All the people who have even a basic understanding of enterprise Java development will agree that it is quite useless without a thorough understanding of Spring Framework.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Course Duration: 2 hours&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Rating: 5 stars out of 5&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Instructor: Dustin Schultz&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Price: $149 for an annual subscription&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this course, you will receive a broad, high-level overview of all the aspects of Spring Framework. You will start off by learning what Spring is, before exploring &lt;a href="https://medium.com/javarevisited/top-10-courses-to-learn-spring-boot-in-2020-best-of-lot-6ffce88a1b6e"&gt;Spring Boot&lt;/a&gt; and &lt;a href="https://www.java67.com/2019/06/core-spring-professional-50-topics-guide-java-developers.html"&gt;Spring Framework&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you are finished with this course, you will have a foundational understanding of Spring Framework that will enable you to become a successful enterprise Java developer.&lt;/p&gt;

&lt;p&gt;By the way, you would need a &lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fpricing%2Ffree-trial"&gt;Pluralsight membership&lt;/a&gt; to join this course which costs around $29 per month or $299 per year (14% discount). They are also offering a 40% discount now on their annual plan which means you can get it for just $149.&lt;/p&gt;

&lt;p&gt;I highly recommend this subscription to all programmers as it provides instant access to more than 7000+ online courses to learn any tech skill. Alternatively, you can also use their &lt;strong&gt;&lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fpricing%2Ffree-trial"&gt;10-day-free-pass&lt;/a&gt;&lt;/strong&gt; to watch this course for FREE.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fspring-big-picture"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EYHD-_Bs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEjzHL-_wKtnzZMxCIUbbiPQrwONLpH0Py8DHKO2FBalTuBz_tqgzz6dDtPTXWqLEUApYcoZ_UW7C3I15yhXaaev66BLHpmaEBlu-Ni7M48lW9bM29nn8BF180nLOy5U3S_TfU8HdwKSkjOpgLsFWZ8_SHXwyOZekFRJg-iPmVPn_kF7q16GHDOyjf2A%3Dw395-h221" alt="Best Pluralsight Course to learn Spring Framework" width="300" height="168"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#6-spring-framework-5-beginner-to-guru-udemy"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fspring-framework-5-beginner-to-guru%2F"&gt;Spring Framework 5: Beginner to Guru [Udemy]&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The main USP of this course is that it has been designed by John Thompson, who is a best-selling instructor and has also worked as a Spring Framework Consultant for huge companies like Visa, Kohls, Federal Home Loan Bank, and Belk Department Stores. What this means is that you get to pick the mind of one of the leading experts in the field.&lt;/p&gt;

&lt;p&gt;As the title suggests, this course is completely focused on Spring Framework 5, which is the latest version of Spring. You will start the course by seeing how to start a Spring Boot project and then create a simple Book/Author application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Course Duration: 57 hours&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Rating: 4.5 stars out of 5&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Instructor: John Thompson&lt;/strong&gt;&lt;br&gt;
*&lt;em&gt;Course Price: $14 *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The entire course content is divided into 35 sections and 526 lectures. It's also one of my favorite courses to learn Spring framework because it covers almost all the important spring modules like Spring Boot, &lt;a href="https://medium.com/javarevisited/3-best-spring-security-books-and-resources-for-java-programmers-653d05c8afd4"&gt;Spring Security&lt;/a&gt;, &lt;a href="https://medium.com/hackernoon/top-5-spring-boot-and-spring-cloud-books-for-java-developers-75df155dcedc"&gt;Spring Boot&lt;/a&gt;, &lt;a href="https://medium.com/javarevisited/5-best-spring-data-jpa-courses-for-java-developers-45e6438be3c9"&gt;Spring Data JPA&lt;/a&gt;, and &lt;a href="https://javarevisited.blogspot.com/2021/04/best-reactive-spring-and-webflux-courses-for-java-developers.html"&gt;Reactive Spring&lt;/a&gt;, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fspring-framework-5-beginner-to-guru%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nD0PDXUx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEjituj4Zy-ymWa7yb-VktQOIeBIJsou5fRUABSmnVC5x_N3cGz1MOxJf0H8kXF7hWXRZhsbfXpiI9YsT5J4CE1yS8og1Vwj9hKgPeRUwj9uZJGgQ7KSQD8oDY_l9oX7hKLjlkSEII4vrjNMCWx1B7LF99s_5JeNgQkTHvwl84Ln7rZFwxjNUCxeFhpD%3Dw372-h209" alt="Best Udemy Course to learn Reactive Spring and WebFlux" width="240" height="135"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#7-spring-framework-in-depth-linkedin-learning"&gt;
  &lt;/a&gt;
  &lt;strong&gt;7. &lt;a href="http://linkedin-learning.pxf.io/c/1193463/449670/8005?u=https%3A%2F%2Fwww.linkedin.com%2Flearning%2Fspring-framework-in-depth-2"&gt;Spring: Framework in Depth&lt;/a&gt; [LinkedIn Learning]&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is an intermediate-level course that will provide you a comprehensive overview of Spring Framework. The course has been designed by Frank Moley, who is an expert &lt;a href="https://www.java67.com/2019/09/top-5-courses-to-learn-system-design.html"&gt;software architect&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This course will enable you to develop applications and web services with Spring, and you will also learn how to configure the ApplicationContext, which is the interface for accessing components and loading files. You will also get a practical understanding of the Java workflow and the Spring lifecycle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Course Duration: 2 hours&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Course Instructor: Frank Moley&lt;/strong&gt;&lt;br&gt;
*&lt;em&gt;Course Price: $12 per month for an annual subscription *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;By the way, you would need a LinkedIn Learning membership to watch this course which costs around $19.99 per month but you can also watch this course for FREE by taking their &lt;strong&gt;&lt;a href="http://linkedin-learning.pxf.io/c/1193463/449670/8005?u=https%3A%2F%2Fwww.linkedin.com%2Flearning%2Fsubscription%2Fproducts"&gt;1-month-free-trail&lt;/a&gt;&lt;/strong&gt; which is a great way to explore their 16000+ online courses on the latest technology.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://linkedin-learning.pxf.io/c/1193463/449670/8005?u=https%3A%2F%2Fwww.linkedin.com%2Flearning%2Fspring-framework-in-depth-2"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FPJZ9J2P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogger.googleusercontent.com/img/a/AVvXsEi88L1zyNwu88a_8tau1irZpuvHAFGIc_j_xhIDidZgrjLamRfEjDAlknb7COYsib7qQc-KonqvdpMQocxW7Ysz-lANJyVVxthjmATeQnuZ_k5ec0-hz3_LiEcjPHz_XaqHDnahR3wIHfhOGhRo1PYnJYT4h5DJyH1BQcFT6dXtT9wb8wS2WkwBm10l%3Dw462-h259" alt="Best LinkedIn Learning Course for Spring Framework" width="300" height="168"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#9-getting-started-guide-on-springioofficial"&gt;
  &lt;/a&gt;
  9. Getting Started Guide on Spring.io[Official]
&lt;/h3&gt;

&lt;p&gt;Spring Framework's official website Spring.io also have many getting started guide which you can use to learn a specific task on Spring framework. &lt;/p&gt;

&lt;p&gt;These guides provides step by step process to accomplish a common development task in a Spring application for example how to upload a file or how to consume a RESTful web services using Spring. &lt;/p&gt;

&lt;p&gt;If you want to learn Spring framework in depth then these guides can help, the whole page is worth bookmarking and revisiting again and again to become a better Java developer&lt;/p&gt;

&lt;p&gt;&lt;a href="https://spring.io/guides"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hp7fOXXC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f2hffgzibyxgjysprk6w.png" alt="Best Spring framework resources for java developers" width="880" height="522"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#10-learn-spring-the-certification-class-baeldung"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://courses.baeldung.com/p/ls-certification-class?utm_source=javarevisited&amp;amp;utm_medium=web&amp;amp;utm_campaign=lss&amp;amp;affcode=22136_bkwjs9xa"&gt; Learn Spring: The Certification Class&lt;/a&gt; [Baeldung]
&lt;/h3&gt;

&lt;p&gt;This is another high-quality spring framework course Java developers can join to learn both Spring and Spring Boot in 2022. Eugen doesn't need any introduction as he has been teaching and practicing spring for the last 9 years and this course is the best resource to learn Spring 5 and Spring Boot 2 from scratch, in a guided, code-focused way.&lt;/p&gt;

&lt;p&gt;This Spring course starts from very basic and you learn both Spring and Spring boot from scratch. They provide step-by-step videos and practical lessons to guide you along the way. &lt;/p&gt;

&lt;p&gt;This is also a very hands-on course and you will be building a full-fledged project along the course.&lt;/p&gt;

&lt;p&gt;This is also the most up-to-date course and Eugen has updated it recently and added several new modules covering the latest changes to make the course even better. For example, he has added a lesson to learn how to use Spring Boot with Docker and how to implement Spring Security Authorization&lt;/p&gt;

&lt;p&gt;Here is a full list of new changes in the course&lt;/p&gt;

&lt;p&gt;In Module 2 - Dependency Injection and the Spring Context:&lt;/p&gt;

&lt;p&gt;Lesson 9: Spring Wiring - @Resource and @Inject &lt;br&gt;
Lesson 10: Debugging and Solving Wiring Exceptions&lt;/p&gt;

&lt;p&gt;In Module 3 - Project Configuration:&lt;/p&gt;

&lt;p&gt;Lesson 7: Spring Boot Default Properties&lt;br&gt;
Lesson 8: Deploying the Boot 2 Application - Other Options&lt;/p&gt;

&lt;p&gt;In Module 5: Persistence and Data Access:&lt;/p&gt;

&lt;p&gt;Lesson 6: Introduction to the JdbcTemplate - theory &lt;br&gt;
Lesson 7: Introduction to the JdbcTemplate - implementation&lt;/p&gt;

&lt;p&gt;In Module 6: Web Basics and Spring MVC:&lt;/p&gt;

&lt;p&gt;Lesson 6: Servlets and the DispatcherServlet&lt;/p&gt;

&lt;p&gt;In Module 8: Building a REST API:&lt;/p&gt;

&lt;p&gt;Lesson 7: Intro to the HTTP Message Converters in Spring MVC&lt;/p&gt;

&lt;p&gt;In Module 9: Advanced Features in Spring:&lt;/p&gt;

&lt;p&gt;Lesson 7: Spring Security Authorization&lt;br&gt;
Lesson 9: Spring Boot with Docker&lt;/p&gt;

&lt;p&gt;Because of these recent updates, he is also increasing the price of the course by $40 on top of the &lt;strong&gt;current price of $297&lt;/strong&gt; but you can still grab the course for the original price. Yes, the course may look a bit expensive if you compare this with Udemy and Coursera's spring course but it's worth it. &lt;/p&gt;

&lt;p&gt;They also have different options, for example, if the price is a concern then you can also go for &lt;strong&gt;&lt;a href="https://www.baeldung.com/learn-spring-course?affcode=22136_bkwjs9xa"&gt;Learn Spring Masterclass&lt;/a&gt;&lt;/strong&gt; which is less costly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.baeldung.com/learn-spring-course?affcode=22136_bkwjs9xa"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QiYEfIEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-V_w1M8i5gkY/YaOS6YFxN4I/AAAAAAAAqWI/gcpTMrx92d4Ol2Cex59RvbUIJG2-BHsTQCLcBGAsYHQ/w441-h248/zbDEyB5PS0auWcd3X6D2.jpg" alt="Best Course to learn Spring and Spring Boot from Baeldung" width="441" height="248"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#frequently-asked-questions-about-learning-spring-framework"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Frequently Asked Questions about Learning Spring Framework&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Now, let me answer a few questions which often comes as a doubt to Java developer who wants to learn the Spring framework for Java development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. What is Spring Framework?&lt;/strong&gt;&lt;br&gt;
Spring Framework is one of the world's most popular development frameworks for using enterprise Java. Spring is used by millions of developers for creating easily testable, reusable, and high-performance code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. What are the different Spring Frameworks?&lt;/strong&gt;&lt;br&gt;
The Spring Framework is divided into seven different modules. These are Spring Core, Spring AOP, Spring Web MVC, Spring DAO, ORM, Context, and Web Flow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Is Spring easy to learn?&lt;/strong&gt;&lt;br&gt;
Since the Spring Framework is designed to work around POJOs, it is quite simple and easy to learn.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;That's all about the best Spring Framework resources  for Java developers. As I said, these courses are the best option if you are looking to master the Spring Framework in 2022. You will transform from a complete beginner to a Spring expert within a matter of weeks and your skills will be in huge demand in the job market.&lt;/p&gt;

&lt;p&gt;Other &lt;strong&gt;Spring MVC articles&lt;/strong&gt; you may like to explore&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/10-best-online-courses-to-learn-spring-framework-in-2020-f7f73599c2fd"&gt;10 Best Spring Framework Courses for Beginners&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/05/top-20-spring-boot-interview-questions-answers.html"&gt;20+ Spring Boot Interview Questions for Java developers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2021/01/spring-data-jpa-interview-questions-answers-java.html"&gt;15 Spring Data and JPA Interview Questions&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/05/top-20-spring-boot-interview-questions-answers.html"&gt;20 Spring Boot Testing Interview Questions with Answers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/10-advanced-spring-boot-courses-for-experienced-java-developers-5e57606816bd"&gt;10 Advanced Spring Boot Courses for Experienced Developers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2021/03/spring-aop-interview-questions-answers.html#axzz6nwXUSoGH"&gt;17 Spring AOP Interview Questions with Answers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/10-best-java-microservices-courses-with-spring-boot-and-spring-cloud-6d04556bdfed"&gt;Top 10 Courses to Learn Microservices with Spring Boot&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2021/01/spring-cloud-interview-questions-with-answers-java.html"&gt;15 Spring Cloud Interview Questions with Answers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2017/05/how-to-enable-spring-security-in-java-web-application.html"&gt;How to enable Spring security in a Java web application?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2017/08/difference-between-restcontroller-and-controller-annotations-spring-mvc-rest.html"&gt;Difference between @RestController and @Controller in Spring MVC?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2017/06/how-spring-mvc-framework-works-web-flow.html"&gt;How Spring MVC works internally?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2017/06/what-is-use-of-dispatcherservlet-in-spring-mvc.html"&gt;What is the use of DispatcherServlet in Spring MVC?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2021/02/microservices-interview-questions-answers-java-spring.html"&gt;Top 15 Microservice Interview Questions with Answers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2021/02/spring-boot-actuator-interview-questions-answers-java.html"&gt;13 Spring Boot Actuator Questions for interviews&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you liked this list of the Best Spring Framework Resources and online Courses, books, and katas then feel free to share it with your friends and family. Also, drop a comment if you have any doubts or questions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P. S. -&lt;/strong&gt; If you are keen to learn the Spring framework and become a full-stack Java developer but are looking for a free online course, you can check this &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fbuild-an-angular-and-spring-mvc-web-application%2F"&gt;&lt;strong&gt;Angular and Spring MVC course&lt;/strong&gt;&lt;/a&gt; on Udemy. It's complete, and all you need is a free Udemy account to join this course.&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>springframework</category>
      <category>development</category>
    </item>
    <item>
      <title>Integrate Live Chat to your WordPress, Shopify &amp; Webflow sites!</title>
      <author>Sankalp Swami</author>
      <pubDate>Fri, 10 Dec 2021 05:34:42 +0000</pubDate>
      <link>https://dev.to/aviyel/integrate-live-chat-to-your-wordpress-shopify-webflow-sites-3g35</link>
      <guid>https://dev.to/aviyel/integrate-live-chat-to-your-wordpress-shopify-webflow-sites-3g35</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3sYXoLtz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639052337466-event-announcement-8-resized.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3sYXoLtz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639052337466-event-announcement-8-resized.png" alt="wordpress shopify webflow" width="760" height="380"&gt;&lt;/a&gt;&lt;br&gt;
Whether you’re starting out as a small business or you are already the owner of a well-established company, integrating live chat into your business website will help to convert visitors into loyal customers. Join Aviyel as we talk about how to integrate this live chat in your WordPress, Shopify, and Webflow sites.&lt;/p&gt;

&lt;p&gt;Live Chat comes with numerous benefits for your business. With the help of Live Chat, you can boost your customer team’s productivity. Live Chat is an awesome tool for customer acquisition. And nowadays customers prefer Live Chat as Live Chat is super fast and efficient. Join this event to know more about Live Chat &amp;amp; &lt;a href="https://www.chatwoot.com/"&gt;Chatwoot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why should one join this event?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You’ll understand how live chat increases sales and retention in your business.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You’ll learn how to utilize this live chat for maximum impact.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You’ll learn how to integrate the live chat into your &lt;a href="https://wordpress.com/"&gt;WordPress&lt;/a&gt;, &lt;a href="https://www.shopify.in/"&gt;Shopify&lt;/a&gt;, and &lt;a href="https://webflow.com/"&gt;Webflow&lt;/a&gt; site using &lt;a href="https://aviyel.com/projects/6/chatwoot"&gt;Chatwoot&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Join Victor Eke in this episode as he helps you understand the benefits of adding a live chat to your business website, understand how live chat helps with conversion and retention, and finally, best practices for integrating the live chat. Victor is a Frontend developer from Nigeria who is passionate about building helpful projects and software in open source communities. He loves cloning websites and contributing to various open-source projects. Victor also has a passion for creating technical content that helps developers like himself.&lt;/p&gt;

&lt;p&gt;Join us to get hands-on experience with &lt;a href="https://www.chatwoot.com/"&gt;Chatwoot&lt;/a&gt;, open-source, and learn to increase sales on your business website!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Date: December 18th, 2021&lt;br&gt;
Time: 08 AM PST | 11 AM EST&lt;br&gt;
Register here:&lt;/strong&gt; &lt;a href="https://bit.ly/3DzE9X7"&gt;https://bit.ly/3DzE9X7&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Impressed? Check out the rest of our &lt;a href="https://aviyel.com/events"&gt;events&lt;/a&gt;!&lt;br&gt;
Let’s build open-source together! 🎉&lt;br&gt;
Team Aviyel&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Victor Eke Socials!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/evavic44"&gt;evavic44&lt;/a&gt;&lt;br&gt;
GitHub: &lt;a href="https://github.com/Evavic44"&gt;evavic44&lt;/a&gt;&lt;br&gt;
Hashnode: &lt;a href="https://eke.hashnode.dev/"&gt;eke&lt;/a&gt;&lt;br&gt;
LinkedIn: &lt;a href="https://www.linkedin.com/in/evavic44"&gt;Victor Eke&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>programming</category>
      <category>wordpress</category>
    </item>
    <item>
      <title>Introduction to computer networking for Interviews and Self-learning</title>
      <author>Mohammed Muzammil</author>
      <pubDate>Fri, 10 Dec 2021 05:08:07 +0000</pubDate>
      <link>https://dev.to/mohammedahmed17/introduction-to-computer-networking-for-interviews-and-self-learning-2da1</link>
      <guid>https://dev.to/mohammedahmed17/introduction-to-computer-networking-for-interviews-and-self-learning-2da1</guid>
      <description>&lt;p&gt;Before starting the topic let me tell you why I started writing about computer networks. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I am currently pursuing my final year Engineering degree. I had this topic (Computer Networking) in my 3rd year. Unfortunately due to covid, we were having classes online, so I couldn't get most from the subject. I felt the subject was a bit difficult to learn so I left it without much bothering about it. But when I started attending my interviews I got to know that computer networking is an important topic to learn. so let me share my learnings with you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#defining-a-network-"&gt;
  &lt;/a&gt;
  Defining a Network :
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;let's start with defining a network. what exactly is a network?&lt;/em&gt; &lt;br&gt;
 if you would have asked me  6months ago I would have said that: &lt;br&gt;
&lt;em&gt;a network is a connection where computers are connected with each other(a definition I learned from college).&lt;/em&gt;&lt;br&gt;
Yes, it's quite true that &lt;br&gt;
&lt;strong&gt;a network is nothing more than two or more computers connected by a cable or by a wireless radio connection so that they can exchange resources and information.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can create a simple computer network of your own by hooking together all the computers in your office/home with cables and using the computer’s network interface (an electronic circuit that resides inside your computer and has a special jack on the computer’s backside). I will speak about network interface in my next blog, but for now, let's just assume that the network interface helps a computer in connecting to the network. Then you tweak a few simple settings in the computer’s operating system (OS) software, and — &lt;strong&gt;yo!&lt;/strong&gt; — you have a working network. &lt;/p&gt;

&lt;p&gt;If you don’t want to mess with cables, you can create a wireless network instead.&lt;br&gt;
In a wireless network, the computers use wireless network adapters that communicate via radio signals. All modern laptop computers have built-in wireless&lt;br&gt;
network adapters, as do most desktop computers. (If yours doesn’t, you can purchase a separate wireless network adapter that plugs into one of the computer’s USB ports.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Network adapter&lt;/strong&gt;: A network adapter is the component of a computer's internal hardware that is used for communicating over a network with another computer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MKrf3F6h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639036153257/LchwkcBRiD.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MKrf3F6h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639036153257/LchwkcBRiD.jpeg" alt="Mydoc-1.jpg" width="880" height="622"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;the above figure shows a typical network with four computers. You can see that all four computers are connected by a network cable to a central network device: the &lt;strong&gt;switch&lt;/strong&gt;. You can also see that Faizan’s computer has a fancy laser printer attached to it. Because of the network, Maaz, Muiz, and the Ruman can also use this laser printer.&lt;br&gt;
Don't worry about switch, for now, we will discuss it later. but just for now, I want you to have a clear image of a word network.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-benefit-of-having-a-network"&gt;
  &lt;/a&gt;
  What is the benefit of having a network?
&lt;/h3&gt;

&lt;p&gt;Frankly, computer networks are a bit of a pain to set up. So, why bother? Because the benefits of having a network outweigh the difficulties of setting one up.&lt;/p&gt;

&lt;p&gt;You don't have to be a PhD to understand the benefits of networking. In fact, we all have learned we need to know in our kindergarten. Networks are all about sharing. Specifically, networks are about sharing three things: files, resources, and programs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sharing Files&lt;/strong&gt; : &lt;br&gt;
Networks enable you to share information with other computers on the network. One of the methods of sharing files is to copy the file to a disk on another computer and then tell your friend where you&lt;br&gt;
put the file so that your friend can retrieve it later. One way or the other, the data travels to your friend’s computer over the network cable and not on a CD or DVD. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sharing Resources&lt;/strong&gt;:&lt;br&gt;
You can set up certain computer resources such as hard drives or printers so that all computers on the network can access them. For example, the laser printer attached to Faizan’s computer in the above figure is a shared resource, which means that anyone on the network can use it. Without the network, Maaz, Muiz, and the Ruman would have to buy their own laser printers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sharing Programs&lt;/strong&gt;:&lt;br&gt;
Instead of keeping separate copies of programs on each person’s computer, put programs on a drive that everyone shares. For example, if ten computer users all use a particular program, you can purchase and install ten copies of the program, one for each computer. Or you can purchase a ten-user license for the program&lt;br&gt;
and then install just one copy of the program on a shared drive. Each of the ten users can then access the program from the shared hard drive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Servers and Clients&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's move ahead with the most commonly used terms in computer networking named servers and clients.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The computer which is connected to a network that contains the hard drives, printers, and other resources that are shared with other network computers is a server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Any computer that's not a server is a client or the network computer which tends to use the resources of other network computers is a client.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In many networks, a computer functions as either a server or a client, not both. For the sake of an efficient network, a server can't be a client, nor can a client become a server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Usually smaller networks can be more evenhanded by allowing any&lt;br&gt;
computer in the network to be a server and allowing any computer to be both a server and a client at the same time &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#types-of-networks-"&gt;
  &lt;/a&gt;
  Types of Networks :
&lt;/h3&gt;

&lt;p&gt;I was having many misconceptions about this topic in my college days. Let's get a clear picture of it.&lt;/p&gt;

&lt;p&gt;Networks come in all sizes and shapes. In fact, networks are commonly based on the geographical size they cover, as described below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Local area networks (LANs)&lt;/strong&gt;:&lt;br&gt;
In this type of network, computers are relatively close together, such as within the same office or building. Don't let the word "local" fool you. A LAN doesn’t imply that a network is small. A LAN can contain hundreds or even thousands of computers. What makes a network a LAN is that all its connected computers are located within close space. Usually, a LAN is contained within a single building, but a LAN can extend to several buildings on campus, provided that the buildings are close to each other.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Wide area networks (WANs)&lt;/strong&gt;: &lt;br&gt;
These networks span a large geographic territory, such as an entire city or a region, or even a country. WANs are typically used to connect two or more LANs that are relatively far apart. For example, a WAN may connect an office in San Francisco with an office in New York. The geographic distance, not the number of computers involved, makes a network a WAN. If an office in San Francisco and an office in New York each has only one computer, the WAN will have a grand sum of two computers — but will span more than 3,000 miles.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Metropolitan area networks (MANs):&lt;/strong&gt;&lt;br&gt;
This kind of network is smaller than a typical WAN but larger than a LAN. Typically, a MAN connects two or more LANs within the same city that are far enough apart that the networks can’t be connected via a simple cable or wireless connection.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#understanding-network-topology-"&gt;
  &lt;/a&gt;
  Understanding network topology :
&lt;/h3&gt;

&lt;p&gt;I think this is one of the topics in computer networking that students can easily understand, including me.&lt;/p&gt;

&lt;p&gt;The term network topology refers to the shape of how the computers and other network components are connected to each other. There are several different types of network topologies, each with advantages and disadvantages.&lt;/p&gt;

&lt;p&gt;Before going forward, let's just look at some important terms :  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;» Node&lt;/strong&gt;: A node is a device that’s connected to the network. For your purposes here, a node is the same as a computer. Network topology deals with how the nodes of a network are connected to each other.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;» Packet&lt;/strong&gt;: A packet is a message that’s sent over the network from one node to another node. The packet includes the address of the node that sent the packet, the address of the node the packet is being sent to, and data.&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;1. Bus Topology: *&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ewQUQVfI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639037956780/oe5kT8Txt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ewQUQVfI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639037956780/oe5kT8Txt.jpeg" alt="bus.jpg" width="880" height="297"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think all have loved bus topology from the start including me.&lt;br&gt;
In this topology, the nodes are connected to a single cable as shown in the figure above. The key to understanding how a bus topology works is to think of the entire network as a single cable, with each node “tapping” into the cable so it can listen in on the packets being sent over that cable. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In a bus topology, every node on the network can see every packet that’s sent on the cable.&lt;/li&gt;
&lt;li&gt;Each node looks at each packet to determine whether the packet is intended for it. If so, the node claims the packet. If not, the node ignores the packet.&lt;/li&gt;
&lt;li&gt;This way, each computer can respond to data sent to it and ignore data sent to other computers on the network.&lt;/li&gt;
&lt;li&gt;If the cable in a bus network breaks, the entire network is effectively disabled.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. Star Topology:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hq9pa1bP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639037969439/2POQb0eXo.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hq9pa1bP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639037969439/2POQb0eXo.jpeg" alt="start.jpg" width="800" height="568"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a star topology, each node is connected to a central device called a hub or a switch, as shown in the figure below. Star topologies are commonly used with LANs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If a cable in a star network breaks, only the node connected to that cable is isolated from the network. The other nodes can continue to operate without interruption unless, of course, the node that’s isolated because of the break happens to be the file server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think this is the best place to talk about the hub and a switch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hub&lt;/strong&gt;: Hub is a device that can connect many computers together to form a network. A hub doesn’t know anything about the computers that are connected to each of its ports. So when a computer connected to the hub sends a packet to a computer that’s connected to another port, the hub sends a duplicate copy of the packet to all its ports. It's like sending a message to everyone who is connected to me regardless of the fact to whom that message was intended.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Switch&lt;/strong&gt;: Switch is similar to the hub but the main difference is that a switch knows which computer is connected to each of its ports. As a result, when a switch receives a packet intended for a particular computer, it sends the packet only to the port that the recipient is connected to.&lt;/p&gt;

&lt;p&gt;Strictly speaking, only networks that use switches have a true star topology. If the network uses a hub, the network topology has the physical appearance of a star, but it’s actually a bus. That’s because when a hub is used, each computer on the network sees all the packets sent over the network, just like in a bus topology. In a&lt;br&gt;
true star topology, as when a switch is used, each computer sees only those packets that were sent specifically to it, as well as packets that were specifically sent to all computers on the network (those types of packets are called broadcast packets).&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;3. Ring Topology: *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gEdf2LYS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639037982648/ubUNZehqC.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gEdf2LYS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639037982648/ubUNZehqC.jpeg" alt="ring.jpg" width="751" height="570"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The third type of network topology is called a ring (see figure).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In a ring topology, packets are sent around the circle from computer to computer.&lt;/li&gt;
&lt;li&gt;Each computer looks at each packet to decide whether the packet was intended for it. If not, the packet is passed on to the next computer in the ring.&lt;/li&gt;
&lt;li&gt;In this data travels in unidirectional forms means in only one direction but it can also do bidirectional by having 2 connections between each Network Node, it is called Dual Ring Topology.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4. Mesh Topology:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_lmr-W9k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639038046231/UtvomTf-Z.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_lmr-W9k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639038046231/UtvomTf-Z.jpeg" alt="mesh.jpg" width="880" height="362"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The fourth type of network topology, known as mesh, has multiple connections between each of the nodes on the network, as shown in the figure.&lt;/li&gt;
&lt;li&gt;The advantage of a mesh topology is that if one cable breaks, the network can use an alternative route to deliver its packets.&lt;/li&gt;
&lt;li&gt;Mesh networks aren’t very practical in a LAN setting. For example, to network eight computers in a mesh topology, each computer would have to have seven network interface cards, and 28 cables would be required to connect each computer to the seven other computers in the network. This type isn’t very scalable.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;In this blog, I have tried to provide a clear picture of what is a network and its benefits, I have also discussed types of networks and types of topologies. I have also discussed server, client, hub, and switch. Hope you find it helpful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reference : &lt;br&gt;
           Networking all in one for dummies 7th edition by Doug Lowe&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
    </item>
    <item>
      <title>How to Get Your Household Items Ready for Warehouse Storage</title>
      <author>devendrappa</author>
      <pubDate>Fri, 10 Dec 2021 04:44:02 +0000</pubDate>
      <link>https://dev.to/devendrappa/how-to-get-your-household-items-ready-for-warehouse-storage-15kd</link>
      <guid>https://dev.to/devendrappa/how-to-get-your-household-items-ready-for-warehouse-storage-15kd</guid>
      <description>&lt;p&gt;Whether you need temporary storage till you locate your dream house in a new location or a long-term storage option for your office/factory items, there are various storage places that are both cost-effective and handy. However, before you transfer your items to a storage facility, make sure you know how to properly prepare and pack them for storage.&lt;/p&gt;

&lt;p&gt;Conduct Some Background Study on Storage Restrictions: First, do some background research on what can and cannot be stored in a storage unit. The warehouse facility provider should supply you with a list of &lt;a href="https://landsec.com/sites/default/files/2019-01/Appendix_D3_-_Prohibited_Materials_List.pdf&amp;lt;br&amp;gt;%0A!%5BImage%20description%5D(https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgtexwca2am2631bdd5x.jpg)"&gt;prohibited materials&lt;/a&gt; such as gasoline, chemicals, paint, pyrotechnics, explosives, drugs, propane tanks, combustible, perishable food, medication, plants, and so on, but if they don't, make sure you ask for all the rules and regulations.&lt;/p&gt;

&lt;p&gt;Pick What Items to Store: The more you keep, the more it will cost you. To save money, sort out undesirable products and decide what you will store in the warehouse. If the item isn't emotional, valuable, or helpful, consider donating or selling it.&lt;/p&gt;

&lt;p&gt;Make an inventory: It's possible to forget what you put in storage, so write a note of everything you're going to store before you start packing. This will help you keep track of your stuff. You may also give a copy of the inventory to the person in charge of the storage unit so that when you retrieve your belongings, you can ensure that nothing is missing.&lt;/p&gt;

&lt;p&gt;Deep Clean Your Belongings: When you bring your goods back from storage, they will be dusty and may stink up your house with their mildew dour. To avoid this, clean all goods before shipping them to storage, such as washing down all surfaces with a cleaning spray, vacuuming couch and cushions, disinfecting appliances with disinfectant wipes, and so on. Because they will not stink if they are clean before storing.&lt;/p&gt;

&lt;p&gt;Categorize and organize: Divide your goods into distinct categories, such as delicate, kitchen items, electronics, and so on, and begin packing them according to their packaging needs. You must use multi-layer protective wrapping, place gadgets in their own boxes, and so on.&lt;/p&gt;

&lt;p&gt;When &lt;a href="https://www.assureshift.in/blog/household-warehouse-storage-tips"&gt;hiring a storage facility&lt;/a&gt;, make sure they have insurance coverage for your items so that if an unexpected event occurs, such as a fire or natural disaster, you may seek reimbursement for your losses. We hope that the recommendations we provided on how to prepare your products for storage warehouse will assist you in securely storing your things in a storage unit.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Xdebug in VSCode with Docker</title>
      <author>Jack Miras</author>
      <pubDate>Fri, 10 Dec 2021 04:08:09 +0000</pubDate>
      <link>https://dev.to/jackmiras/xdebug-in-vscode-with-docker-379l</link>
      <guid>https://dev.to/jackmiras/xdebug-in-vscode-with-docker-379l</guid>
      <description>&lt;p&gt;In my last post, I've talked about how to configure a &lt;a href="https://dev.to/jackmiras/docker-compose-for-a-laravel-app-ie7"&gt;development&lt;/a&gt; environment and how it extends a Dockerfile made for production.&lt;/p&gt;

&lt;p&gt;Now, I would like to share how we can build upon our previous Dockerfile in a way that Xdebug can run directly from Docker and also connect it with Visual Studio Code.&lt;/p&gt;

&lt;p&gt;By choosing this approach, we substantially reduce the amount of setup that each team member has to do on their machine to get the project up and running, which means that we can start writing code faster.&lt;/p&gt;

&lt;p&gt;So, why is this so important? A recent &lt;a href="https://www.jetbrains.com/lp/devecosystem-2021/php/#PHP_how-do-you-usually-debug-php-code"&gt;research from JetBrains&lt;/a&gt; shows that 68% of the PHP developers debug their code using var_dump(), die(), dd() and dump(). From my perspective, there isn't anything wrong with that if you are doing it by choice and not lacking knowledge.&lt;/p&gt;

&lt;p&gt;I'm included in the 68% of developers debugging their code with auxiliary functions instead of using a full-featured debug solution such as Xdebug. Not for lack of knowledge but because I'm a heavy Neovim user and I didn't adapt quite well using Neovim with Xdebug, to me, is just easier and faster to use my code snippets around the dd() function.&lt;/p&gt;

&lt;p&gt;But from time to time, I caught myself in situations where it would be faster to jump into Visual Studio Code and just use Xdebug, especially when I'm working with other people that aren't familiarized with Vim/Neovim.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#content"&gt;
  &lt;/a&gt;
  Content
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#xdebug-config-file"&gt;XDebug config file&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="//#explaining-xdebug.ini"&gt;Explaining xdebug.ini&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.tovscode"&gt;Visual Studio Code&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="//#explaining-launch.json"&gt;Explaining launch.json&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#xdebug-config-file"&gt;
  &lt;/a&gt;
  Xdebug config file
&lt;/h3&gt;

&lt;p&gt;Before jumping into Visual Studio Code, first we have to clear a few things about Xdebug to fully grasp the changes we're going to make on the IDE. The information got first introduced on the topic about the &lt;a href="https://dev.to/jackmiras/docker-compose-for-a-laravel-app-ie7#app-command-directive"&gt;directive command&lt;/a&gt; in post, you will notice that at some point a xdebug.ini file gets copied from a local &lt;strong&gt;.docker&lt;/strong&gt; folder into &lt;strong&gt;/etc/php8/conf.d/50_xdebug.ini&lt;/strong&gt; at the container.&lt;/p&gt;

&lt;p&gt;Even though the content of the file got shown, I intentionally didn't explain its content so that we could explore the debugging topic all at once, going all the way from configuring Xdebug to using  it with an IDE.&lt;/p&gt;

&lt;p&gt;Down below, we have the same Xdebug config file, from the previous post, living under &lt;strong&gt;.docker/xdebug.ini&lt;/strong&gt; at the root of our Laravel project. The file directives will be explained further, but in case you want to know every configuration that you can add in this file, check the &lt;a href="https://xdebug.org/docs/all_settings"&gt;Xdebug documentation&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;zend_extension&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;xdebug.so
xdebug.mode&lt;span class="o"&gt;=&lt;/span&gt;develop,coverage,debug,profile
xdebug.idekey&lt;span class="o"&gt;=&lt;/span&gt;docker
xdebug.start_with_request&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;yes
&lt;/span&gt;xdebug.log&lt;span class="o"&gt;=&lt;/span&gt;/dev/stdout
xdebug.log_level&lt;span class="o"&gt;=&lt;/span&gt;0
xdebug.client_port&lt;span class="o"&gt;=&lt;/span&gt;9003
xdebug.client_host&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;YOUR_COMPUTER_IP&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#explaining-xdebugini"&gt;
  &lt;/a&gt;
  Explaining xdebug.ini
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;zend_extension=xdebug.so&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A Zend extension hooks into “lower level” languages, a single extension can be both a PHP and a Zend extension, despite being very uncommon it's possible and Xdebug is a good example of it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;xdebug.mode=develop,coverage,debug,profile&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This setting controls which Xdebug features are enabled, according to the documentation the following values are accepted:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- develop
    Enables Development Helpers, including the overloaded var_dump().
- coverage
    Enables Code Coverage Analysis to generate code coverage reports, mainly with PHPUnit.
- debug
    Enables Step Debugging. This can be used to step through your code while it is running, and analyze values of variables.
- profile
    Enables Profiling, with which you can analyze performance bottlenecks with tools like CacheGrind.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;xdebug.idekey=docker&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Controls which IDE Key Xdebug should pass on to the debugging client or proxy. The IDE Key is only important for use with the DBGp Proxy Tool, although some IDEs are incorrectly picky as to what its value is. The default is based on the DBGP_IDEKEY environment setting. If it is not present, the default falls back to an empty string.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;xdebug.start_with_request=yes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The functionality starts when the PHP request starts, and before any PHP code getting executed. For example, xdebug.mode=trace and xdebug.start_with_request=yes starts a Function Trace for the whole request.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;xdebug.log=/dev/stdout&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Configure Xdebug's log file, but in here, we are redirecting the log content to the default stdout of our container.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In case you don't want to see these logs you can comment out this line of your &lt;strong&gt;.docker/xdebug.ini&lt;/strong&gt; file by changing the line to &lt;code&gt;;xdebug.log=/dev/stdout&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;xdebug.log_level=0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Configures which logging messages should be added to the log file. In here we are instructing Xdebug to log only errors in the configuration, in case you want to see more information you can use the level 7 for log info or the level 10 for log debug.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;xdebug.client_port=9003&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The port to which Xdebug tries to connect on the remote host. Port 9003 is the default for both Xdebug and the Command Line Debug Client. As many clients use this port number, it is best to leave this setting unchanged.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;xdebug.client_host=&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Configures the IP address or hostname where Xdebug will attempt to connect to when initiating a debugging connection. This address should be the address of the machine where your IDE or debugging client is listening for incoming debugging connections.&lt;/p&gt;

&lt;p&gt;Down below, you can see how to correctly get your IP address in the main OS developers use. In case you are using a different OS, the commands may serve you as base to try to extrapolate a solution for your use case.&lt;/p&gt;

&lt;p&gt;macOS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ipconfig getifaddr en1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Windows with WSL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;grep &lt;/span&gt;nameserver /etc/resolv.conf | &lt;span class="nb"&gt;cut&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="nt"&gt;-f2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Linux (Debian based distros):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;hostname&lt;/span&gt; &lt;span class="nt"&gt;-I&lt;/span&gt; | &lt;span class="nb"&gt;cut&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="nt"&gt;-f1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you correctly found your IP address, you can place him into the xdebug.client_host as mentioned before, and that will leave you with a directive looking similar to this xdebug.client_host=192.168.0.158.&lt;/p&gt;

&lt;p&gt;In summary, you've instructed Xdebug to start from a request and try to send the debug events to the host with the IP 192.168.0.158 on the port 9003. Since the IP represents your computer, these means that when configuring Visual Studio Code to connect into Xdebug, the configuration will be extremely similar to when connecting to the localhost.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visual-studio-code"&gt;
  &lt;/a&gt;
  Visual Studio Code
&lt;/h3&gt;

&lt;p&gt;As you may already know, Visual Studio Code or, VSCode for short, is a source-code editor made by Microsoft for Windows, Linux, and macOS. Features include support for debugging, syntax highlighting, intelligent code completion, snippets, code refactoring, and embedded Git.&lt;/p&gt;

&lt;p&gt;With that being said, you may be wondering… what do we need to have VSCode with all the aspects of an IDE with full-featured debug?&lt;/p&gt;

&lt;p&gt;For starters, we will need to install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-debug"&gt;PHP Debug&lt;/a&gt; plugin from Felix Becker:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_BUfn8IY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rz3bku4a3g3qhy0evqjm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_BUfn8IY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rz3bku4a3g3qhy0evqjm.png" alt="Image description" width="546" height="577"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thereafter, a file called launch.json have to be generated, this file gets used by the debugger in any language, which means that a part of this process can be reused when configuring the debugger on VSCode for other languages.&lt;/p&gt;

&lt;p&gt;You can generate the file by clicking in &lt;em&gt;Run and Debug &amp;gt; create a launch.json file &amp;gt; Docker: Debug in Container&lt;/em&gt;, as the following the screenshot shows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9I67c-kx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84a6bxw68hsue3oszlrz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9I67c-kx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84a6bxw68hsue3oszlrz.png" alt="Image description" width="880" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, the &lt;strong&gt;launch.json&lt;/strong&gt; file will be created with a specification of &lt;code&gt;version&lt;/code&gt; and  an empty &lt;code&gt;configurations&lt;/code&gt; array, just like the next screenshot shows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zmf33iH9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4h3txx86nuyuugxnk3vv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zmf33iH9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4h3txx86nuyuugxnk3vv.png" alt="Image description" width="800" height="366"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, to properly configure the &lt;strong&gt;launch.json&lt;/strong&gt; file you have to add in the &lt;code&gt;configurations&lt;/code&gt; array an object with the properties name, type, request, port, and pathMappings which will leave you with a file looking like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"configurations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Listen for XDebug on Docker"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"php"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"request"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"launch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"port"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;9003&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"pathMappings"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"/var/www/html/"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"${workspaceFolder}"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#explaining-launchjson"&gt;
  &lt;/a&gt;
  Explaining launch.json
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Indicates the name given to a configuration object.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;type&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Indicates the underlying debugger being used.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;request&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Indicates whether the configuration is intended to &lt;em&gt;launch&lt;/em&gt; the program or &lt;em&gt;attach&lt;/em&gt; to an already running instance.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;port&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Indicates the port on which to listen for Xdebug&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pathMappings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Indicates a mapping of server paths to local paths.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When using /var/www/html/ as key, VSCode knows that the files at the container are under that path, and by using the ${workspaceFolder} as value, VSCode knows that locally the project files are under the current opened directory.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;I encourage you to leave this launch.json file with its content in the project, so other team members can just clone the project, run the containers and enjoy a full-featured debug solution running in a container environment.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>php</category>
      <category>xdebug</category>
      <category>vscode</category>
      <category>docker</category>
    </item>
    <item>
      <title>Frontend Challenge #7, Article Preview Component</title>
      <author>JC Smiley</author>
      <pubDate>Fri, 10 Dec 2021 04:06:12 +0000</pubDate>
      <link>https://dev.to/jcsmileyjr/frontend-challenge-7-article-preview-component-15b5</link>
      <guid>https://dev.to/jcsmileyjr/frontend-challenge-7-article-preview-component-15b5</guid>
      <description>&lt;p&gt;Follow me as I briefly describe my coding journey to build the Article Preview component from &lt;a href="https://www.frontendmentor.io/home"&gt;Frontend Mentors&lt;/a&gt;.  I’m a firm believer in learning in public, sacrificing perfection while learning, and each day improving by 1%. I welcome feedback from several tech communities (aka, if you see where I can improve please leave a comment) and will update the final project as time allow. Frontend Mentors is a online platform that provide front-end challenges that include professional web designs.&lt;/p&gt;

&lt;p&gt;The goal is to build this: &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A_6aqvNT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zet5x3ewv75e0g62dvc2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A_6aqvNT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zet5x3ewv75e0g62dvc2.jpg" alt="mobile design given by Frontend mentor" width="375" height="667"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-setup-responsive-design-layout"&gt;
  &lt;/a&gt;
  Step 1: Setup responsive design layout
&lt;/h2&gt;

&lt;p&gt;As always, the first todo item is structuring the initial layout to be mobile and desktop design responsive. My go to is everything below 600px width is mobile. After that is break-points for tablet, regular desktop, and super wide desktops. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Iso74HwA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7byfo4dbl1jlmubjvc2o.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iso74HwA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7byfo4dbl1jlmubjvc2o.PNG" alt="Screen shot of responsive design with the image section done" width="880" height="383"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-build-out-the-mobile-design"&gt;
  &lt;/a&gt;
  Step 2: Build out the mobile design
&lt;/h2&gt;

&lt;p&gt;The next agenda was adding the content to the layout and styling for a responsive mobile layout based on the given design.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SYcoyk9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8nsksr2sqc16rf4zwxp.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SYcoyk9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8nsksr2sqc16rf4zwxp.PNG" alt="Screen-shot of mobile design only" width="421" height="724"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3:
&lt;/h2&gt;

&lt;p&gt;This was followed by adding styling for a responsive desktop layout. I assumed this would be the easy part but three days of responsive design tweaking showed me styling is HARD. I don't think I learned anything other then I must have done something wrong in step two. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The profile image wouldn't stay in its container. &lt;/li&gt;
&lt;li&gt;The layout didn't resize elegantly for different non-mobile sizes. &lt;/li&gt;
&lt;li&gt;The bottom section needed to be totally redesign to separate the textual content from the area that changes from an active state when clicked. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What I should have done in step one was made two primary sections with the bottom section containing two separate areas.(include image)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vYjITmzw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwcn5v6aowigvxhjwh8z.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vYjITmzw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwcn5v6aowigvxhjwh8z.PNG" alt="Screen shot of a broken desktop layout" width="786" height="328"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-final-outcome"&gt;
  &lt;/a&gt;
  Step 4: Final Outcome
&lt;/h2&gt;

&lt;p&gt;I think stepping away and coming back fresh really helped. I was able to quickly redesign the content section, add the active state, and have decent design responsiveness. You can play with the project &lt;a href="https://jcsmileyjr.github.io/Artical-Preview/"&gt;here&lt;/a&gt; and view the code &lt;a href="https://github.com/jcsmileyjr/Artical-Preview"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GIF showing active state&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P5SI7TWH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y2q6msl0k28z2rxxakwb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P5SI7TWH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y2q6msl0k28z2rxxakwb.gif" alt="GIF showing the active state of the component" width="375" height="581"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Final desktop preview&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ujVZc-XN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8jiuatmacpbj3yxcd3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ujVZc-XN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8jiuatmacpbj3yxcd3h.png" alt="Screen shot of mobile and desktop final outcome" width="880" height="510"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  Thank you for reading
&lt;/h2&gt;

&lt;p&gt;Thank you for reading my learning journey and if you have tips, please DM me on &lt;a href="https://twitter.com/JCSmiley4"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/jcsmileyjr/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>challenge</category>
    </item>
    <item>
      <title>Some insights into the low-level workflow of the Django framework</title>
      <author>Angelo H</author>
      <pubDate>Fri, 10 Dec 2021 03:42:55 +0000</pubDate>
      <link>https://dev.to/angeloschert/some-insights-into-the-low-level-workflow-of-the-django-framework-3p85</link>
      <guid>https://dev.to/angeloschert/some-insights-into-the-low-level-workflow-of-the-django-framework-3p85</guid>
      <description>&lt;h2&gt;
  &lt;a href="#running-flow"&gt;
  &lt;/a&gt;
  Running flow
&lt;/h2&gt;

&lt;p&gt;You can use multiple methods to run a Django app, one of which is &lt;code&gt;runserver&lt;/code&gt; which uses the web server of Django itself, and it is mostly used in the development and testing phases. Another is using protocols like &lt;code&gt;fastcgi&lt;/code&gt; and &lt;code&gt;uWSGI&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-runserver"&gt;
  &lt;/a&gt;
  1. runserver
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: &lt;code&gt;python3 manage.py runserver&lt;/code&gt;, this command is run under port 8080 by default. If you investigate into the source codes of &lt;code&gt;manage.py&lt;/code&gt;, you will find that this line is actually executed through the internal &lt;code&gt;runserver&lt;/code&gt; command in &lt;code&gt;execute_from_command_line&lt;/code&gt;, and this command mostly does two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Parse the parameters, and get the &lt;code&gt;wsgi handler&lt;/code&gt; by &lt;code&gt;django.core.servers.basehttp.get_internal_wsgi_application&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Generate a &lt;code&gt;WSGIServer&lt;/code&gt; object according to your IP address and port, and then accept the user's requests. The source codes of &lt;code&gt;get_internal_wsgi_application&lt;/code&gt; is as followed:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_internal_wsgi_application&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
    &lt;span class="n"&gt;app_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'WSGI_APPLICATION'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;app_path&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;get_wsgi_application&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;import_by_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;app_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;error_prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"WSGI application '%s' could not be loaded; "&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;app_path&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By the above we know that, &lt;code&gt;Django&lt;/code&gt; will first obtain the &lt;code&gt;handler&lt;/code&gt; via &lt;code&gt;WSGI_APPLICATION&lt;/code&gt; in &lt;code&gt;settings&lt;/code&gt;. While building the &lt;code&gt;project&lt;/code&gt;, &lt;code&gt;Django&lt;/code&gt; will create a &lt;code&gt;wsgi.py&lt;/code&gt; by default.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-uwsgi"&gt;
  &lt;/a&gt;
  2. uWSGI
&lt;/h3&gt;

&lt;p&gt;Another approach is the most prevalent one while running Django in production, it uses Ngnix combined with uWSGI. To dive more deeply into this method, we would need to learn more about two protocols: &lt;code&gt;WSGI&lt;/code&gt; and &lt;code&gt;uWSGI&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;WSGI&lt;/strong&gt; is short for &lt;strong&gt;Web Server Gateway Interface&lt;/strong&gt;. It is a universally applicable interface that bridges python-based web servers and web apps/framworks, and is designed based on the current CGI standard. &lt;code&gt;WSGI&lt;/code&gt; is actually a gateway, which helps conversion between multiple protocols.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;uWSGI&lt;/strong&gt; is a web server which supports protocols like WSGI protocol, UWSGI protocol and HTTP Protocol, etc. It is known for rapid transmission, low memory usage and its excellence in multi-app management.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#http-request-process"&gt;
  &lt;/a&gt;
  HTTP Request Process
&lt;/h2&gt;

&lt;p&gt;Django's RESTful workflow is similar to other web frameworks: Receiving requests and returning responses. Let's see the details in the following:&lt;/p&gt;

&lt;p&gt;When Django is creating the project via &lt;code&gt;django-admin&lt;/code&gt;, it will automatically create some default files including &lt;code&gt;settings.py&lt;/code&gt; and &lt;code&gt;manage.py&lt;/code&gt;, and execute the following command before building the WSGIServer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;During the execution of the above command, Django will read the &lt;code&gt;DjANGO_SETTINGS_MODULE&lt;/code&gt; config info in &lt;code&gt;os.environ&lt;/code&gt; and load the config files before creating the &lt;code&gt;setting&lt;/code&gt; object. Therefore, inside the &lt;code&gt;manage.py&lt;/code&gt;, it will first add the path of project settings to the os path before obtaining the WSGIServer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-creating-the-wsgiserver"&gt;
  &lt;/a&gt;
  1. Creating the WSGIServer
&lt;/h3&gt;

&lt;p&gt;No matter you are running your Django project with runserver or uWSGI, Django will always call &lt;code&gt;run()&lt;/code&gt; in &lt;code&gt;django.core.servers.basehttp&lt;/code&gt; during the start-up, creating an instance of &lt;code&gt;WSGIServer&lt;/code&gt;, and later call its &lt;code&gt;serve_forever()&lt;/code&gt; to start the HTTP services. Below is the source codes of &lt;code&gt;run()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wsgi_handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ipv6&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="n"&gt;server_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;httpd_cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'WSGIServer'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socketserver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ThreadingMixIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WSGIServer&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;httpd_cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WSGIServer&lt;/span&gt;
        &lt;span class="n"&gt;httpd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;httpd_cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server_address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WSGIRequestHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ipv6&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ipv6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Sets the callable application as the WSGI application that will receive requests
&lt;/span&gt;        &lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wsgi_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the above, we see that: While creating the &lt;code&gt;WSGIServer&lt;/code&gt; instance, &lt;code&gt;WSGIRequestHandler&lt;/code&gt; is used to designate the HTTP request handler. When the user's request arrives at the server, &lt;code&gt;WSGIServer&lt;/code&gt;will create a &lt;code&gt;WSGIRequestHandler&lt;/code&gt; instance, using its &lt;code&gt;handler&lt;/code&gt; function to process the http request, and actually in the end it calls &lt;code&gt;run()&lt;/code&gt; in &lt;code&gt;wsgiref.handlers.BaseHandler&lt;/code&gt;. With &lt;code&gt;set_app()&lt;/code&gt;, &lt;code&gt;WSGIServer&lt;/code&gt; set up a callable object as an application. The above mentioned &lt;code&gt;handler&lt;/code&gt; function will call this application to process the request and return the response. Besides, &lt;code&gt;WSGIServer&lt;/code&gt; inherits from &lt;code&gt;wsgiref.simple_server.WSGIServer&lt;/code&gt;, but &lt;code&gt;WSGIRequestHandler&lt;/code&gt; inherits from &lt;code&gt;wsgiref.simple_server.WSGIRequestHandler&lt;/code&gt;, &lt;code&gt;wsgiref&lt;/code&gt; is the reference implementation of &lt;code&gt;WSGI&lt;/code&gt; from the Python standard library.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-process-the-request"&gt;
  &lt;/a&gt;
  2. Process the request
&lt;/h3&gt;

&lt;p&gt;In Django, the aforementioned &lt;code&gt;application&lt;/code&gt; is in general an object of &lt;code&gt;wsgi.WSGIHandler&lt;/code&gt; in &lt;code&gt;django.core.handlers&lt;/code&gt;. &lt;code&gt;WSGIHandler&lt;/code&gt; inherits from &lt;code&gt;base.BaseHandler&lt;/code&gt; and it creates a &lt;code&gt;WSGIRequest&lt;/code&gt; instance which further inherits from &lt;code&gt;http.HttpRequest&lt;/code&gt;. These are the essenial logics on how Django processes the request.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-return-the-response"&gt;
  &lt;/a&gt;
  3. Return the response
&lt;/h3&gt;

&lt;p&gt;There is a &lt;code&gt;get_response&lt;/code&gt; method in &lt;code&gt;BaseHandler&lt;/code&gt; and it initially loads the &lt;code&gt;ROOT_URLCONF&lt;/code&gt; in the Django project and then find out corresponding &lt;code&gt;view&lt;/code&gt; methods or classes according to the url rules. The logics in the &lt;code&gt;view&lt;/code&gt; functions/classes will create and return specific responses through the request instance.&lt;/p&gt;

&lt;p&gt;After Django returns the results, the &lt;code&gt;run()&lt;/code&gt; in &lt;code&gt;wsgiref.handlers.BaseHandler&lt;/code&gt; will call &lt;code&gt;finish_response&lt;/code&gt; to end the request, and return the contents to the user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EgyyL0OR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5m528j1i3u1dexslgs4h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EgyyL0OR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5m528j1i3u1dexslgs4h.png" alt="Image description" width="467" height="525"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jyJnQT10--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1xycdlvuq6rlhr5xop4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jyJnQT10--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1xycdlvuq6rlhr5xop4.png" alt="Image description" width="531" height="699"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Seeing from the above image. 1-9 represent 9 steps, and the first steo is to send the request from a page, which reaches the &lt;code&gt;Request&lt;/code&gt; middleware in the 2nd step. In the 3rd step, &lt;code&gt;URLConf&lt;/code&gt; is querying for the corresponding &lt;code&gt;View&lt;/code&gt; in &lt;code&gt;url.py&lt;/code&gt;, and later the &lt;code&gt;View&lt;/code&gt;s are called to answer the request with their functions invoked. During the 6th step, the &lt;code&gt;view&lt;/code&gt; will access the model information and any interactions between model and databases are done by a built-in manager. Here &lt;code&gt;View&lt;/code&gt;s can have contexts if needed, and if there is any context, it will be passed to &lt;code&gt;Template&lt;/code&gt; for further rendering.&lt;/p&gt;

&lt;p&gt;Processes a-e are done mostly in &lt;code&gt;Template&lt;/code&gt;s. First filters and tags are used to render the output, which is later returned to &lt;code&gt;View&lt;/code&gt;s. At the same time, &lt;code&gt;Response&lt;/code&gt; will receive instances of &lt;code&gt;HTTPResponse&lt;/code&gt;, and any response could add up new information or simply return a brand new body. In the end, user could receive the response from the browser.&lt;/p&gt;

&lt;p&gt;Two most important components in these procedures are: Middleware and URLConf, and below we will briefly walk through them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#middleware"&gt;
  &lt;/a&gt;
  Middleware
&lt;/h1&gt;

&lt;p&gt;Middleware does not exclusively belong to Django, but also exist in other frameworks. In Django, middleware could participate in 4 phases in the RESTful process: request, view, response, exception. Accordingly, every class of middleware has the following 4 methods in the pattern of: &lt;code&gt;process_x&lt;/code&gt;, where x are &lt;code&gt;request&lt;/code&gt;, &lt;code&gt;view&lt;/code&gt;, &lt;code&gt;response&lt;/code&gt; and &lt;code&gt;exception&lt;/code&gt; You can define one or more of these methods depending on which stage you want the middleware to put effect on, and every method returns a response object.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#urlconf"&gt;
  &lt;/a&gt;
  URLConf
&lt;/h1&gt;

&lt;p&gt;URLconf is the mapping of the websites supported by Django. Basically, it is a mapping table between the URL pattern and the &lt;code&gt;view&lt;/code&gt; functions.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;p&gt;[1] &lt;a href="https://hitesh.in/2009/django-flow/"&gt;https://hitesh.in/2009/django-flow/&lt;/a&gt;&lt;br&gt;
[2] &lt;a href="https://stackoverflow.com/questions/1836627/diagrams-explanations-of-django-request-processing"&gt;https://stackoverflow.com/questions/1836627/diagrams-explanations-of-django-request-processing&lt;/a&gt;&lt;br&gt;
[3] &lt;a href="https://docs.djangoproject.com/en/3.2/topics/http/urls/"&gt;https://docs.djangoproject.com/en/3.2/topics/http/urls/&lt;/a&gt;&lt;br&gt;
[4] &lt;a href="https://docs.djangoproject.com/en/3.2/topics/http/middleware/"&gt;https://docs.djangoproject.com/en/3.2/topics/http/middleware/&lt;/a&gt;&lt;br&gt;
[5] &lt;a href="https://docs.djangoproject.com/en/3.2/topics/templates/"&gt;https://docs.djangoproject.com/en/3.2/topics/templates/&lt;/a&gt;&lt;br&gt;
[6] &lt;a href="https://medium.com/@jvdali966/understanding-djangos-work-flow-1ee521422092"&gt;https://medium.com/@jvdali966/understanding-djangos-work-flow-1ee521422092&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How and why you should store React UI state in the URL</title>
      <author>Sidney Alcantara</author>
      <pubDate>Fri, 10 Dec 2021 02:50:19 +0000</pubDate>
      <link>https://dev.to/notsidney/how-and-why-you-should-store-react-ui-state-in-the-url-34pi</link>
      <guid>https://dev.to/notsidney/how-and-why-you-should-store-react-ui-state-in-the-url-34pi</guid>
      <description>&lt;h3&gt;
  &lt;a href="#deep-linking-in-react-as-simple-as-usestate"&gt;
  &lt;/a&gt;
  Deep linking in React, as simple as useState
&lt;/h3&gt;

&lt;p&gt;Have you ever used a complex web app with many features, modal windows, or side panels? Where you get to the perfect state with just the right information on the screen after a few clicks through different screens, but then you accidentally close the tab? (Or Windows decides to update?)&lt;/p&gt;

&lt;p&gt;It would be great if there were a way to return to this state without going through the same tedious process. Or be able to share that state so a teammate can work on the same thing you are.&lt;/p&gt;

&lt;p&gt;This problem could be solved with deep linking, which is used today in mobile apps to open the app to a specific page or UI state. But why does this not exist in many web apps?&lt;/p&gt;

&lt;p&gt;⏭ &lt;a href="#heading-the-code"&gt;Click here to skip to the solution and code snippets.&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bring-back-deep-linking-on-the-web"&gt;
  &lt;/a&gt;
  Bring back deep linking on the web
&lt;/h2&gt;

&lt;p&gt;The emergence of single-page applications (SPAs) has allowed us to craft new user experiences that are instantly interactive on the web. By doing more on the client side using JavaScript, we can respond to user events immediately, from opening custom dialog windows to live text editors like Google Docs.&lt;/p&gt;

&lt;p&gt;Traditional server-rendered websites send a request to get a new HTML page every single time. An excellent example is Google, which sends a request to its servers with the user’s search query in the URL: &lt;a href="https://www.google.com/search?q=your+query+here"&gt;https://www.google.com/search?&lt;strong&gt;q=your+query+here&lt;/strong&gt;&lt;/a&gt;. What’s great about this model is that if I filter by results from the past week, I can share the same search query by simply sharing the URL: &lt;a href="https://www.google.com/search?q=react+js&amp;amp;tbs=qdr:w"&gt;https://www.google.com/search?q=react+js&amp;amp;&lt;strong&gt;tbs=qdr:w&lt;/strong&gt;&lt;/a&gt;. And this paradigm is entirely natural for web users—sharing links has been part of the world wide web ever since it was invented!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--skixaD5A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x20gr9ovgelp6o8avmbu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--skixaD5A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x20gr9ovgelp6o8avmbu.png" alt="Annotated screenshot of a Google search page. The search term input is highlighted and an arrow points to the corresponding part in the URL that stores the search term. The results are filtered to only show those from the past week, and another arrow points to the corresponding part in the URL that stores this data." width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When SPAs came along, we didn’t need to store this data in the URL since we no longer need to make a server request to change what is displayed on the screen (hence &lt;em&gt;single-page&lt;/em&gt;). But this made it easy to lose a unique experience of the web, the shareable link. Desktop and mobile apps never really had a standardized way to link to specific parts of the app, and modern implementations of deep linking rely on URLs on the web. So when we build web apps that function more like native apps, why would we throw away the deep linking functionality of URLs that we’ve had for decades?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deadsimple-deep-linking"&gt;
  &lt;/a&gt;
  Dead-simple deep linking
&lt;/h2&gt;

&lt;p&gt;When building a web app that has multiple pages, the minimum you should do is change the URL when a different page is displayed, such as &lt;code&gt;/login&lt;/code&gt; and &lt;code&gt;/home&lt;/code&gt;. In the React ecosystem, &lt;a href="https://reactrouter.com/"&gt;React Router&lt;/a&gt; is perfect for client-side routing like this, and &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; is an excellent fully-featured React framework that also supports server-side rendering.&lt;/p&gt;

&lt;p&gt;But I’m talking about &lt;em&gt;deep&lt;/em&gt; linking, right down to the UI state after a few clicks and keyboard inputs. This is a killer feature for productivity-focused web apps, as it allows users to return right to the exact spot they were at even after closing the app or sharing it with someone else so they can start work without any friction.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sO30iNYa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3o4grhdkx1g2dzw1zatb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sO30iNYa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3o4grhdkx1g2dzw1zatb.gif" alt='Screen recording of a modal window being opened, causing the URL to update to add `#modal="webhooks"`, which is the internal state that triggers the modal to open.' width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;


Notice how the URL updates to add `#modal="webhooks"` as the modal opens.





&lt;p&gt;You could use npm packages like &lt;a href="https://www.npmjs.com/package/query-string"&gt;query-string&lt;/a&gt; and write a basic React Hook to sync URL query parameters to your state, and there are &lt;a href="https://medium.com/swlh/using-react-hooks-to-sync-your-component-state-with-the-url-query-string-81ccdfcb174f"&gt;plenty&lt;/a&gt; of &lt;a href="https://www.npmjs.com/package/use-query-params"&gt;tutorials&lt;/a&gt; for &lt;a href="https://dev.to/gaels/an-alternative-to-handle-global-state-in-react-the-url--3753"&gt;this&lt;/a&gt;, but there’s a more straightforward solution.&lt;/p&gt;

&lt;p&gt;While exploring modern state management libraries for React for an architecture rewrite of our React app &lt;a href="https://rowy.io/?utm_source=dev.to&amp;amp;utm_medium=blog&amp;amp;utm_campaign=How%20and%20why%20you%20should%20store%20React%20UI%20state%20in%20the%20URL"&gt;Rowy&lt;/a&gt;, I came across &lt;a href="https://jotai.org/"&gt;Jotai&lt;/a&gt;, a tiny atom-based state library based on the React team’s &lt;a href="https://recoiljs.org/"&gt;Recoil&lt;/a&gt; library. The main benefit of this model is that state atoms are declared independent from the component hierarchy and can be manipulated from anywhere in the app. This solves the issue with React Context causing unnecessary re-renders, which I &lt;a href="https://betterprogramming.pub/how-to-useref-to-fix-react-performance-issues-4d92a8120c09"&gt;previously worked around with &lt;code&gt;useRef&lt;/code&gt;&lt;/a&gt;. You can read more about the atomic state concept in &lt;a href="https://jotai.org/docs/basics/concepts"&gt;Jotai’s docs&lt;/a&gt; and a more technical version in &lt;a href="https://recoiljs.org/docs/introduction/motivation"&gt;Recoil’s&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The code
&lt;/h2&gt;

&lt;p&gt;Jotai has a type of atom called &lt;a href="https://jotai.org/docs/api/utils#atom-with-hash"&gt;&lt;code&gt;atomWithHash&lt;/code&gt;&lt;/a&gt;, which syncs the state atom to the URL hash.&lt;/p&gt;

&lt;p&gt;Suppose we want a modal’s open state stored in the URL. Let’s start by creating an atom:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Then in the modal component itself, we can use this atom just like &lt;code&gt;useState&lt;/code&gt;:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;And here’s how it looks:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1YOt00Ga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gq08ssz4b61wl2pu4n2g.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1YOt00Ga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gq08ssz4b61wl2pu4n2g.gif" alt="Screen recording of a modal being opened, causing the URL to update to reflect the UI state, with #modalOpen=true being appended. When the modal is closed, it is replaced with modalOpen=false." width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that’s it! It’s that simple.&lt;/p&gt;

&lt;p&gt;What’s fantastic about Jotai’s &lt;code&gt;atomWithHash&lt;/code&gt; is that it can store any data that &lt;code&gt;useState&lt;/code&gt; can, and it automatically stringifies objects to be stored in the URL. So I can store a more complex state in the URL, making it sharable.&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://rowy.io/?utm_source=dev.to&amp;amp;utm_medium=blog&amp;amp;utm_campaign=How%20and%20why%20you%20should%20store%20React%20UI%20state%20in%20the%20URL"&gt;Rowy&lt;/a&gt;, we used this technique to implement a UI for cloud logs. We’re building an open-source platform that makes backend development easier and eliminates friction for common workflows. So, reducing friction for sharing logs was perfect for us. You can see this in action on our demo, where I can link you to a specific deploy log: &lt;a href="https://demo.rowy.io/table/roadmap#modal=%22cloudLogs%22&amp;amp;cloudLogFilters=%7B%22type%22%3A%22build%22%2C%22timeRange%22%3A%7B%22type%22%3A%22days%22%2C%22value%22%3A7%7D%2C%22buildLogExpanded%22%3A1%7D"&gt;https://demo.rowy.io/table/roadmap#modal="cloudLogs"&amp;amp;cloudLogFilters={"type"%3A"build"%2C"timeRange"%3A{"type"%3A"days"%2C"value"%3A7}%2C"buildLogExpanded"%3A1}&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DmDj3dp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638925723546/qT9qAZ0YZ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DmDj3dp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638925723546/qT9qAZ0YZ.gif" alt="Screen recording of the deep link opening the Rowy demo web app to the cloud logs modal being open." width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Decoding the URL component reveals the exact state used in React:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;A side effect of &lt;code&gt;atomWithHash&lt;/code&gt; is that it pushes the state to the browser history by default, so the user can click the back and forward buttons to go between UI states.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fdw9_ruB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638925771468/ZyUEGiWcn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fdw9_ruB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638925771468/ZyUEGiWcn.gif" alt="Screen recording of the user clicking the back button in the browser repeatedly, causing the UI state to change with modals being opened and closed." width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This behavior is optional and can be disabled using the &lt;code&gt;replaceState&lt;/code&gt; option:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;p&gt;Thanks for reading! I hope this has convinced you to expose more of your UI state in the URL, making it easily shareable and reducing friction for your users—especially since it’s effortless to implement.&lt;/p&gt;

&lt;p&gt;You can follow me on Twitter &lt;a href="https://twitter.com/nots_dney"&gt;@nots_dney&lt;/a&gt; for more articles and Tweet threads about front-end engineering.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/rowyio"&gt;
        rowyio
      &lt;/a&gt; / &lt;a href="https://github.com/rowyio/rowy"&gt;
        rowy
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Open-source Airtable-like experience for your database (Firestore) with GCP's scalability. Build any automation or cloud functions for your product. ⚡️✨
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/rowyio/rowysrc/assets/logo-sticker.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gjaz7yQn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rowyio/rowysrc/assets/logo-sticker.svg" alt="Rowy" height="69"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h1&gt;
✨ Modern Backend Stack ✨ &lt;br&gt;
&lt;/h1&gt;

&lt;h3&gt;
Build prototypes that scale on Google Cloud Platform in minutes
&lt;/h3&gt;

&lt;p&gt;
Manage Firestore data in a spreadsheet-like UI, write Cloud Functions effortlessly in the browser, and connect to your favorite third party platforms such as SendGrid, Twilio, Algolia, Slack and more
&lt;/p&gt;

&lt;div&gt;
&lt;p&gt;&lt;a href="https://discord.gg/B8yAD5PDX4" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6dd327ede435fa2675b694e66ceca0c8e3f44d863a45b32e9f181cc3c8f39390/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3835333439383637353438343831393437363f636f6c6f723d253233343230304646266c6162656c3d43686174253230776974682532307573266c6f676f3d646973636f7264266c6f676f436f6c6f723d253233464646464646267374796c653d666f722d7468652d6261646765" alt="Discord"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
    &lt;a href="http://www.rowy.io" rel="nofollow"&gt;&lt;b&gt;Website&lt;/b&gt;&lt;/a&gt; •
    &lt;a href="http://docs.rowy.io" rel="nofollow"&gt;&lt;b&gt;Documentation&lt;/b&gt;&lt;/a&gt; •
    &lt;a href="https://discord.gg/B8yAD5PDX4" rel="nofollow"&gt;&lt;b&gt;Discord&lt;/b&gt;&lt;/a&gt; • 
    &lt;a href="https://twitter.com/rowyio" rel="nofollow"&gt;&lt;b&gt;Twitter&lt;/b&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rowyio/rowy/blob/main/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/6fbaf79b7cc87b723985a9e7469929e909bb032ce246852daa542b3f9120714b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f726f7779696f2f726f7779" alt="License"&gt;&lt;/a&gt;
&lt;a href="https://github.com/rowyio/rowy/commits/rc"&gt;&lt;img src="https://camo.githubusercontent.com/e322594629f502e65323f025bacd13336911d97dd95f085da18f2d0d6bd342fe/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f726f7779696f2f726f77792f7263" alt="Last commit"&gt;&lt;/a&gt;
&lt;a href="https://github.com/rowyio/rowy/stargazers/"&gt;&lt;img src="https://camo.githubusercontent.com/a1e3cefce46ee2314e926fee61f3a56e18516894696188d50ddbe066caf508da/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f726f7779696f2f726f7779" alt="GitHub stars"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/2600c32c6be5d0408b83200d8da7932d521329a32641fd686586c615f3f06667/68747470733a2f2f666972656261736573746f726167652e676f6f676c65617069732e636f6d2f76302f622f726f7779696f2e61707073706f742e636f6d2f6f2f7075626c696344656d6f253246526f777925323057656273697465253230566964656f253230474946253230536d616c6c2e6769663f616c743d6d6564696126746f6b656e3d33663639396138662d633166322d343034362d386564352d653466663636393437636438"&gt;&lt;img width="100%" src="https://camo.githubusercontent.com/2600c32c6be5d0408b83200d8da7932d521329a32641fd686586c615f3f06667/68747470733a2f2f666972656261736573746f726167652e676f6f676c65617069732e636f6d2f76302f622f726f7779696f2e61707073706f742e636f6d2f6f2f7075626c696344656d6f253246526f777925323057656273697465253230566964656f253230474946253230536d616c6c2e6769663f616c743d6d6564696126746f6b656e3d33663639396138662d633166322d343034362d386564352d653466663636393437636438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
Live Demo&lt;/h2&gt;

&lt;p&gt;💥 Check out the &lt;a href="https://demo.rowy.io/" rel="nofollow"&gt;live demo&lt;/a&gt; of Rowy 💥&lt;/p&gt;

&lt;h2&gt;
Quick Deploy&lt;/h2&gt;

&lt;p&gt;Set up Rowy on your Google Cloud Platform project with this one-click deploy
button.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://deploy.cloud.run/?git_repo=https://github.com/rowyio/rowyRun.git" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5832b6a44b19b13a5a84f8e89d646780a5ec646a0dfeef52f001134caca93511/68747470733a2f2f6465706c6f792e636c6f75642e72756e2f627574746f6e2e737667" alt="Run on Google Cloud"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://deploy.cloud.run/?git_repo=https://github.com/rowyio/rowyRun.git" rel="nofollow"&gt;https://deploy.cloud.run/?git_repo=https://github.com/rowyio/rowyRun.git&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Documentation&lt;/h2&gt;
&lt;p&gt;You can find the full documentation with how-to guides
&lt;a href="http://docs.rowy.io/" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;h3&gt;
Powerful spreadsheet interface for Firestore&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CRUD operations&lt;/li&gt;
&lt;li&gt;Sort and filter by row values&lt;/li&gt;
&lt;li&gt;Lock, Freeze, Resize, Hide and Rename columns&lt;/li&gt;
&lt;li&gt;Multiple views for the same collection&lt;/li&gt;
&lt;li&gt;Bulk import or export data - csv, json&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Automate with cloud functions and ready made extensions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Effortlessly build cloud functions on field level triggers right in the browser
&lt;ul&gt;
&lt;li&gt;Use any NPM…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/rowyio/rowy"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>4 Ways To Be Constantly Improving Your Code</title>
      <author>Grant McNamara</author>
      <pubDate>Fri, 10 Dec 2021 02:29:07 +0000</pubDate>
      <link>https://dev.to/grantrocks/4-ways-to-be-constantly-improving-your-code-15om</link>
      <guid>https://dev.to/grantrocks/4-ways-to-be-constantly-improving-your-code-15om</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;A Follow Helps Everyone &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No Really if you follow now, more and better quality content will be published. Also follow medium so you don't miss out.&lt;br&gt;
See more amazing content here: &lt;a href="https://theoverpoweredpc.medium.com"&gt;https://theoverpoweredpc.medium.com&lt;/a&gt;&lt;br&gt;
Not much of world’s population is made up of programmers. In fact, only 22.1% of the population are programmers. This might make you think, “How is that possible? How can there be so little programmers but so many programs and apps?,” well at least it got me thinking. If there are so little programmers what could 1 programmer do to make their code be like a team of 100 programmers. There are 4 simple ways to easily improve your code.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stay Organized&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is no way to describe how important keeping your code in an organized manner is. The organization of your code will give you a much more readable piece of software and it will also be a lot easier to fix bugs and or improve performance. Not only will it be easier to read but it will also be easier to spot out something that seems of or unwanted. When you have more organized code people are more willing to pitch in some ideas too because they will be able to understand what is going on and be able to help if they want to.&lt;/p&gt;

&lt;p&gt;Keeping your code organized will also improve the development of your program because it will be easier to find things to edit, add, remove, change, etc. I am not just talking about the code but also the files and the directory’s because that will also help you out when you are trying to find a script that is external that you need to link to your current script.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Read Documentation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I know that reading documentation may not be the funnest thing to do but it can really help you out with a problem or struggle. Say you are trying to connect to a database for say Mongo DB, you are not going to know how to do it instantly by heart. You need to learn how to use the SDK and how to integrate it into your code for your program to work. It also really helps you out when you need help with something for say a tutorial, in our case, on how to connect to Mongo DB and read and write data to it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stack Overflow&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This may sound ridiculous, but it is not. Stack overflow is a site where people can share information on software and programs of all kinds, and you can also ask a question about a problem that you have and get an answer speedy fast. It may also seem like people do not know what they are doing there but plenty of people out there that got their jobs on stack overflow.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tools&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using simple tools to help your code is another fantastic way to improve your code. The tools that are out there can help you find and solve bugs, organize, script, lower lines of code for better performance, etc. Tools are also another wonderful way to find some code library’s that you may have never heard of before. For example, the site replit they have a smart code ide which I consider a tool that helped me out and I discovered jQuery and I accessed a whole new level of programming.&lt;br&gt;
Find the article also on my medium site: &lt;a href="https://theoverpoweredpc.medium.com/4-ways-to-be-constantly-improving-your-code-f5b05ddac433"&gt;https://theoverpoweredpc.medium.com/4-ways-to-be-constantly-improving-your-code-f5b05ddac433&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codequality</category>
      <category>help</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Getters and Setters in Javascript: What's the POINT?</title>
      <author>Toby Parent</author>
      <pubDate>Fri, 10 Dec 2021 02:08:45 +0000</pubDate>
      <link>https://dev.to/parenttobias/getters-and-setters-in-javascript-whats-the-point-43bo</link>
      <guid>https://dev.to/parenttobias/getters-and-setters-in-javascript-whats-the-point-43bo</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-why"&gt;
  &lt;/a&gt;
  The Why
&lt;/h2&gt;

&lt;p&gt;Mentoring on FreeCodeCamp and The Odin Project, you'll often see the &lt;code&gt;Thermometer&lt;/code&gt; project as an introduction to getters and setters in javascript. You know the one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Thermostat&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fahrenheit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tempInC&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tempInC&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;thermos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Thermostat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Setting in Fahrenheit scale&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;thermos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 24.44 in Celsius&lt;/span&gt;
&lt;span class="nx"&gt;thermos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;thermos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 26 in Celsius&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's lovely. Does exactly what we want, defines a pretty &lt;em&gt;interface&lt;/em&gt; for the &lt;code&gt;temperature&lt;/code&gt; property on the &lt;code&gt;Thermostat&lt;/code&gt; object. But it's &lt;em&gt;terrible&lt;/em&gt;, in that not only is that &lt;code&gt;temperature&lt;/code&gt; an exposed property, so is the &lt;code&gt;fahrenheit&lt;/code&gt;. Given that the properties are public anyway, what's the point of getters and setters?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-why"&gt;
  &lt;/a&gt;
  More Why
&lt;/h2&gt;

&lt;p&gt;We &lt;em&gt;could&lt;/em&gt; sidestep the issue by using ES6's private properties, simply doing this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Thermostat&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fahrenheit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tempInC&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tempInC&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, from the outside, &lt;code&gt;Thermostat.fahrenheit&lt;/code&gt; no longer exists. Its a private property. Thank you, ES6!&lt;/p&gt;

&lt;p&gt;And yet, I am not a fan. Private properties or methods (and private static properties or methods) just feel like a hacky duct-tape solution to a problem that doesn't actually exist. Why? Because we already &lt;em&gt;had&lt;/em&gt; private properties.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-what"&gt;
  &lt;/a&gt;
  The What
&lt;/h2&gt;

&lt;p&gt;Private "sandboxes" for our data are nothing new. Javascript has always kept a private &lt;em&gt;scope&lt;/em&gt; for functions. And if you've been at this a bit, you'll see reference to &lt;em&gt;closures&lt;/em&gt;. A closure is composed of two separate parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A private scope, contained within a function, and&lt;/li&gt;
&lt;li&gt;Some means of accessing variables within that scope.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You see, functions execute, create their private scope, set up their variables, do their instructions, then quietly get swept out with the trash. As soon as nothing is observing the variables in a function, its data becomes available for garbage collection, freeing that memory for other code.&lt;/p&gt;

&lt;p&gt;But we don't &lt;em&gt;have&lt;/em&gt; to allow that. By returning something that continues to observe that function's scope, &lt;em&gt;even after the function is done executing&lt;/em&gt;, we can continue to maintain and update the values contained within it.&lt;/p&gt;

&lt;p&gt;Let's take a look at that &lt;code&gt;Thermometer&lt;/code&gt; example again, this time with a closure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Thermostat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// here, we have the variable fahrenheit.&lt;/span&gt;
  &lt;span class="c1"&gt;//  completely hidden from the outside world.&lt;/span&gt;

  &lt;span class="c1"&gt;// we'll define those same getters and setters&lt;/span&gt;
  &lt;span class="c1"&gt;// but note we access the variable, not a property&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fahrenheit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tempInC&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="nx"&gt;fahrenheit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tempInC&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// note this: we aren't using Thermometer as an&lt;/span&gt;
&lt;span class="c1"&gt;//  object constructor, simply as an executed function.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;thermos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Thermostat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// and from here on, it works exactly the same!&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;thermos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 24.44 in Celsius&lt;/span&gt;
&lt;span class="nx"&gt;thermos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;thermos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 26 in Celsius&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we &lt;em&gt;have&lt;/em&gt; private data within that closure, in the variables. And we define an accessor object, and return that. That defines the &lt;strong&gt;interface&lt;/strong&gt; we use to talk to that private data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-gotcha"&gt;
  &lt;/a&gt;
  The Gotcha
&lt;/h2&gt;

&lt;p&gt;Again, when fielding questions on The Odin Project's Discord server, I'll field this same gotcha multiple times a week. It's a biggie, and it doesn't always make sense. Consider this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TicTacToe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;board&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;player1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Margaret&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;X&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;player2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;O&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentPlayer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;player1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;switchPlayers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentPlayer&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="nx"&gt;player1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="nx"&gt;currentPlayer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;player2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;currentPlayer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;player1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// and our return interface:&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;switchPlayers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;currentPlayer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;board&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// let's make a board!&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;game&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TicTacToe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// And let's play a little!&lt;/span&gt;
&lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentPlayer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// [null, null, null, null, 'X', null, null, null, null]&lt;/span&gt;

&lt;span class="c1"&gt;// switch to player2...&lt;/span&gt;
&lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;switchPlayers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentPlayer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// ['X', null, null, null, 'X', null, null, null, null]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Did you note that last return? &lt;code&gt;game.board[0]&lt;/code&gt;, which we set to &lt;code&gt;game.currentPlayer.icon&lt;/code&gt;, is the wrong player! Did our &lt;code&gt;game.switchPlayers()&lt;/code&gt; not work?&lt;/p&gt;

&lt;p&gt;Actually, it did. If you were to open the browser's dev tools and inspect the variables inside that closure, you'd see that &lt;code&gt;currentPlayer===player2&lt;/code&gt;. &lt;strong&gt;But&lt;/strong&gt; &lt;code&gt;game.currentPlayer&lt;/code&gt; is still referring to &lt;code&gt;player1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is because, when we created the object that we returned inside our closure, we referred to the variable as a static reference to the value at the moment we created it. We took a snapshot of that primitive. Then we update the variable, pointing it to a new memory location, but the object property is completely disconnected from the variable!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"Yeah, but what about the &lt;code&gt;game.board&lt;/code&gt;? We're updating that on the object and it's updating the variable, right?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You're absolutely right. We do &lt;code&gt;game.board[4]='X'&lt;/code&gt;, and that is updating &lt;em&gt;both&lt;/em&gt; the variable, and the returned object property. The reason? We're &lt;em&gt;mutating&lt;/em&gt; that array. We're mucking about with its insides, but we are leaving the variable and property &lt;em&gt;reference&lt;/em&gt; alone. Suppose we wanted to reset the board, we could do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Clears the &lt;code&gt;game.board&lt;/code&gt;, all set for another! And what we've just done is the same problem in reverse. We've changed the thing that &lt;code&gt;game.board&lt;/code&gt; refers to, pointed it at a new location in memory, &lt;em&gt;but the variable still refers to the original&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Well, that isn't our intent at all!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#once-more-with-the-why"&gt;
  &lt;/a&gt;
  Once More With the Why
&lt;/h2&gt;

&lt;p&gt;Why did that happen? Because we sort of abandoned one of the principle tenets of Object Oriented development. There are three:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Encapsulation &lt;em&gt;(how can we hide our stuff?)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Communication &lt;em&gt;(how can we set and get our hidden stuff?)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Late Instantiation *(can we dynamically make new stuff as we execute?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have the third one down pat, but we've sort of trampled on the first two. By exposing our data directly on the returned object, it is no longer encapsulated, and our communcation is questionable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-how"&gt;
  &lt;/a&gt;
  The How
&lt;/h2&gt;

&lt;p&gt;The solution? We create an &lt;em&gt;interface&lt;/em&gt; and return that! We want to be able to &lt;code&gt;switchPlayers&lt;/code&gt;, and we want to be able to get the &lt;code&gt;currentPlayer&lt;/code&gt;. We also want to see the &lt;em&gt;state&lt;/em&gt; of the &lt;code&gt;board&lt;/code&gt; at any point, but we should &lt;em&gt;never&lt;/em&gt; set that directly. We might also want to be able to reset the board at some point.&lt;/p&gt;

&lt;p&gt;So let's think about an interface:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For the player, we likely want to be able to get their name and icon. That's pretty much it.&lt;/li&gt;
&lt;li&gt;For the board, it'd be nice to be able to get or set a value at a particular cell, reset the board, and get the value of the board as a whole.&lt;/li&gt;
&lt;li&gt;For the game, how about we expose that board (the interface, not the data), create that switchPlayers function, and make currentPlayer an interface method, rather than directly exposing the data?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's pretty much it. We could add the &lt;code&gt;checkForWin&lt;/code&gt; functionality to either the board or the game, but that isn't really relevant to this as an exercise in data encapsulation.&lt;/p&gt;

&lt;p&gt;With that, let's code!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Board&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;board&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// .at will be an interface method,&lt;/span&gt;
  &lt;span class="c1"&gt;//  letting us get and set a board member&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;];}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TicTacToe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;player1Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;player2Name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;board&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Board&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;player1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;player1Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;X&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;player2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;player2Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;O&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentPlayer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;player1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;switchPlayers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentPlayer&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="nx"&gt;player1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="nx"&gt;currentPlayer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;player2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;currentPlayer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;player1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// and our return interface:&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;switchPlayers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;currentPlayer&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentPlayer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// now we can:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;game&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TicTacToe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Margaret&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentPlayer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ['','','','','X','','','','']&lt;/span&gt;

&lt;span class="c1"&gt;// all good so far, but now:&lt;/span&gt;
&lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;switchPlayers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentPlayer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ['O','','','','X','','','','']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nice! Now, because we are not working with the data &lt;strong&gt;directly&lt;/strong&gt;, we can manipulate the data by a clean, consistent interface. If we work with the &lt;code&gt;board&lt;/code&gt; interface methods, we consistently refer to the internal &lt;em&gt;state&lt;/em&gt; data, rather than the exposed &lt;em&gt;reference&lt;/em&gt; point.&lt;/p&gt;

&lt;p&gt;Now, there is a serious gotcha to consider here. What might happen if we did this?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that, we've again broken the connection between the internal &lt;code&gt;board&lt;/code&gt; variable and the exposed &lt;code&gt;board&lt;/code&gt; interface. We haven't solved &lt;strong&gt;ANYTHING&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Well, we &lt;em&gt;have&lt;/em&gt;, but we're missing a step. We need to protect our data. So a small change to all of our factory methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Board&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// all the same code here...&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;];}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TicTacToe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;player1Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;player2Name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// all this stays the same...&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;switchPlayers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;currentPlayer&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentPlayer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By applying &lt;code&gt;Object.freeze()&lt;/code&gt; to each of those factories' returned objects, we prevent them from being overwritten or having methods added unexpectedly. An added benefit, our getter methods (like the &lt;code&gt;board.value&lt;/code&gt;) are truly read-only.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-recap"&gt;
  &lt;/a&gt;
  The Recap
&lt;/h2&gt;

&lt;p&gt;So getters and setters in the context of a factory are very sensible to me, for a number of reasons. First, they're object methods that are interacting with truly private variables, making them &lt;em&gt;privileged&lt;/em&gt;. Second, by defining just a getter, we can define read-only properties quickly and easily, again going back to a solid interface.&lt;/p&gt;

&lt;p&gt;Two more less obvious points I really like about getters and setters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When we &lt;code&gt;Object.freeze()&lt;/code&gt; our objects, &lt;strong&gt;any primitive data on that object is immutable&lt;/strong&gt;. This is really useful, but our exposed setters? Yeah, they still work. They're a method, rather than a primitive.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;BUT&lt;/strong&gt;, when we &lt;code&gt;typeof game.board.at&lt;/code&gt;, we will be told that it's data of type &lt;code&gt;function&lt;/code&gt;. When we &lt;code&gt;typeof game.board.at(0).value&lt;/code&gt;, we will be told that it's data of type &lt;code&gt;string&lt;/code&gt;. &lt;strong&gt;Even though we know it's a function&lt;/strong&gt;!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This second point is wildly useful, and often unappreciated. Why? Because when we &lt;code&gt;JSON.stringify(game)&lt;/code&gt;, all of its &lt;code&gt;function&lt;/code&gt; elements will be removed. &lt;code&gt;JSON.stringify()&lt;/code&gt; crawls an object, discards all functions, and then turns nested objects or arrays into strings. So, if we do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cm"&gt;/****
 * we get this:
 *
 *{
 *  "board": {
 *    "value": [
 *      "O",
 *      "",
 *      "",
 *      "",
 *      "X",
 *      "",
 *      "",
 *      "",
 *      ""
 *    ]
 *  },
 *  "currentPlayer": {
 *    "name": "Bert",
 *    "icon": "O"
 *  }
 *}
 ****/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This seems silly, maybe - but what it means is, with well-defined getters, we can have a saveable state for our objects. From this, we could re-create most of the &lt;code&gt;game&lt;/code&gt; later. We might want to add a &lt;code&gt;players&lt;/code&gt; getter, giving us an array of the players themselves, but the point remains... getters and setters are more useful than we think at first glance!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Writing and deploying Rust Lambda function to AWS: Image glitch as a service</title>
      <author>Kirill Vasiltsov</author>
      <pubDate>Fri, 10 Dec 2021 01:46:15 +0000</pubDate>
      <link>https://dev.to/virtualkirill/writing-and-deploying-rust-lambda-function-to-aws-image-glitch-as-a-service-l4l</link>
      <guid>https://dev.to/virtualkirill/writing-and-deploying-rust-lambda-function-to-aws-image-glitch-as-a-service-l4l</guid>
      <description>&lt;p&gt;Japanese version: &lt;a href="https://tech.prog-8.com/entry/2021/11/16/174709"&gt;https://tech.prog-8.com/entry/2021/11/16/174709&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ever since AWS released &lt;a href="https://aws.amazon.com/blogs/opensource/rust-runtime-for-aws-lambda/"&gt;Rust runtime for AWS lambda&lt;/a&gt; I've been wanting to try it out. In this article I am going to walk you through every step required to write and deploy a lambda written in Rust to AWS. &lt;/p&gt;

&lt;p&gt;To avoid making this article too big I assume you are familiar with basic Rust, Docker and Node. Also make sure you have Rust toolchain, Docker and Node.js installed in your environment.&lt;/p&gt;

&lt;p&gt;To avoid building yet another boring hello-world-like handler, we will build a &lt;em&gt;n a n o s e r v i c e&lt;/em&gt; that takes an image and returns a glitched version of it (which you can use as a profile picture etc. but that is up to you). Pretty useless in isolation but still fun and just enough for a good walkthrough.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-a-fresh-rust-project"&gt;
  &lt;/a&gt;
  Start a fresh Rust project
&lt;/h2&gt;

&lt;p&gt;Let's begin with a fresh Rust project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cargo new glitch
cd glitch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's build the core of our API: a glitch function. Actually, two glitch functions. I must warn you that I'm not a professional glitch artist and that there is a lot of depth to glitch art, but the two simple tricks below will suffice. One trick is to just take a byte of the image you want to glitch and replace it with some random byte. Another trick is to take an arbitrary &lt;em&gt;sequence&lt;/em&gt; of bytes and sort it. Rust does not come with a random number generator so we need to install it first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[dependencies]&lt;/span&gt;
&lt;span class="py"&gt;rand&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.8.4"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's the byte-replacing glitch function. We put it in &lt;code&gt;src/lib.rs&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Rng&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;glitch_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;u8&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;rng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;thread_rng&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="nf"&gt;.len&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rand_idx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rng&lt;/span&gt;&lt;span class="nf"&gt;.gen_range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..=&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rand_idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rng&lt;/span&gt;&lt;span class="nf"&gt;.gen_range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nothing extraordinary here, we just take a reference to our image as a mutable slice of bytes and replace one. Next is the sort glitch:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;CHUNK_LEN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;glitch_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;u8&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;rng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;thread_rng&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="nf"&gt;.len&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;split_idx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rng&lt;/span&gt;&lt;span class="nf"&gt;.gen_range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..=&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;CHUNK_LEN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="nf"&gt;.split_at_mut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split_idx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;glitched&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="nf"&gt;.split_at_mut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHUNK_LEN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;glitched&lt;/span&gt;&lt;span class="nf"&gt;.sort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again there is nothing complicated here. Note a very convenient &lt;code&gt;split_at_mut&lt;/code&gt; method that easily lets us select the chunk we want to sort. &lt;code&gt;CHUNK_LEN&lt;/code&gt; is a variable in the sense that you can try different values and expected different glitch outcomes. I randomly chose 19.&lt;/p&gt;

&lt;p&gt;Finally, for more noticeable effect we apply these two functions multiple times as steps of one big glitch job.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;glitch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;u8&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;glitch_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nf"&gt;glitch_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nf"&gt;glitch_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nf"&gt;glitch_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nf"&gt;glitch_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nf"&gt;glitch_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nf"&gt;glitch_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we move on to building a lambda.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cargotoml-download-required-dependencies"&gt;
  &lt;/a&gt;
  Cargo.toml: Download required dependencies
&lt;/h2&gt;

&lt;p&gt;These are the minimal dependencies we'll need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[dependencies]&lt;/span&gt;
&lt;span class="py"&gt;lambda_http&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.4.1"&lt;/span&gt;
&lt;span class="py"&gt;lambda_runtime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.4.1"&lt;/span&gt;
&lt;span class="py"&gt;tokio&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1.12.0"&lt;/span&gt;
&lt;span class="py"&gt;rand&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.8.4"&lt;/span&gt;
&lt;span class="py"&gt;jemallocator&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.3.2"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;lambda_runtime&lt;/code&gt; is the runtime for our functions. This is required because Rust is not (yet) in the list of default runtimes at the time of writing. It possible, however to BYOR (bring your own runtime) to AWS and that's what we're doing here. &lt;code&gt;lambda_http&lt;/code&gt; is a helper library that gives us type definitions for the request and context of the lambda. &lt;code&gt;tokio&lt;/code&gt; is an async runtime. Our handler is so simple that we don't need &lt;code&gt;async&lt;/code&gt; but &lt;code&gt;lambda_runtime&lt;/code&gt; requires it so we have no choice but to play along. Just in case you are unfamiliar with it think of it as a library that runs Rust futures. We won't need to worry much about async apart from defining our functions as &lt;code&gt;async&lt;/code&gt;. Finally, there is &lt;code&gt;jemallocator&lt;/code&gt;. We will get to it later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mainrs-handler"&gt;
  &lt;/a&gt;
  main.rs: Handler
&lt;/h2&gt;

&lt;p&gt;Alright, we have a glitch function but how do use it in our request handler? Let us define &lt;code&gt;apply_glitch&lt;/code&gt; handler that takes the request, extracts image bytes from the body and copies the glitched version into the response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;lambda_http&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;lambda_http&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;lambda_http&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;IntoResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;apply_glitch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;IntoResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="nf"&gt;.body_mut&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nn"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;Binary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;glitch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="nf"&gt;.to_owned&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c"&gt;// Ideally you want to handle Text and Empty cases too.&lt;/span&gt;
        &lt;span class="c"&gt;// We use a special macro unimplemented!() that prevents the compiler from failing without all cases handled.&lt;/span&gt;
        &lt;span class="mi"&gt;_&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nd"&gt;unimplemented!&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the useful &lt;code&gt;IntoResponse&lt;/code&gt; trait that allows us to just return things like &lt;code&gt;String&lt;/code&gt;s and &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt;s without thinking much about response headers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mainrs-main"&gt;
  &lt;/a&gt;
  main.rs: Main
&lt;/h2&gt;

&lt;p&gt;Next, we need to simply wrap our actual handler in a &lt;code&gt;lambda_http::handler&lt;/code&gt;. This creates an actual lambda that can be run by the lambda runtime we installed. Literally two lines of code to hook everything up.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;lambda_runtime&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;lambda_http&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="n"&gt;jemallocator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;#[global_allocator]&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;ALLOC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;jemallocator&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Jemalloc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;jemallocator&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Jemalloc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;#[tokio::main]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apply_glitch&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nn"&gt;lambda_runtime&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget the &lt;code&gt;#[tokio::main]&lt;/code&gt; bit. This is an &lt;a href="https://doc.rust-lang.org/reference/procedural-macros.html"&gt;attribute macro&lt;/a&gt; from &lt;code&gt;tokio&lt;/code&gt; that does some magic under the hood to make our &lt;code&gt;main&lt;/code&gt; function async. The &lt;code&gt;#[global_allocator]&lt;/code&gt; part is also needed to make the lambda work but we will get to it later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-to-aws"&gt;
  &lt;/a&gt;
  Deploying to AWS
&lt;/h2&gt;

&lt;p&gt;There are multiple ways to deploy this to AWS. One of them is using the AWS console. I find the console confusing for many tasks, even simple ones, so I am very excited that there exists another way: CDK. It is a Node.js library that allows us to define the required AWS resources declaratively with real code. It comes with TypeScript type definitions so in a lot of cases we don't even need to look into the documentation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cdk-project"&gt;
  &lt;/a&gt;
  CDK project
&lt;/h2&gt;

&lt;p&gt;The only downside of CDK is that it requires a couple things in our local environment: &lt;a href="https://aws.amazon.com/cli/"&gt;&lt;code&gt;aws&lt;/code&gt; CLI&lt;/a&gt; and Node.js. Make sure the CLI is configured with your credentials. Next, install CDK:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g aws-cdk
cdk --version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CDK requires that some resources exist prior to any deployments like buckets that your CDK output (which is basically a CloudFormation stack) and other artifacts like Lambda functions are uploaded to. This is done with &lt;code&gt;bootstrap&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk bootstrap aws://ACCOUNT-NUMBER/REGION
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are ready to create a new CDK project which is responsible for deploying our lambda to the cloud. Create a &lt;code&gt;lambda&lt;/code&gt; folder (or choose whatever name you want) in the root of your Rust project and execute the following command in it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk init app --language=typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will generate all the files we'll need. Open &lt;code&gt;lambda\lib\lambda-stack.ts&lt;/code&gt; which should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@aws-cdk/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;LambdaStack&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stack&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Construct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StackProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// The code that defines your stack goes here&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's check that everything is OK by running &lt;code&gt;cdk synth&lt;/code&gt; which does a dry run and shows you the CloudFormation code it would generate. Right now, there is not much we can do without installing additional &lt;em&gt;constructs&lt;/em&gt; - the basic building blocks of AWS CDK apps, so let's do it first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @aws-cdk/aws-lambda @aws-cdk/aws-apigatewayv2-integrations @aws-cdk/aws-apigatewayv2 @aws-cdk/aws-apigatewayv2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Import these in your &lt;code&gt;lambda/lib/lambda-stack.ts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;apigw&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@aws-cdk/aws-apigatewayv2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;intg&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@aws-cdk/aws-apigatewayv2-integrations&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@aws-cdk/aws-lambda&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@aws-cdk/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can actually &lt;em&gt;define&lt;/em&gt; a lambda function inside the &lt;code&gt;constructor&lt;/code&gt; above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;glitchHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GlitchHandler&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromAsset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../artifacts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;unrelated&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PROVIDED_AL2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;code&lt;/code&gt; is where our binary lies (we will get to it soon). &lt;code&gt;handler&lt;/code&gt;, normally, is the name of the actual function to call but it seems to be irrelevant when using custom runtimes, so just choose any string you want. Finally, &lt;code&gt;runtime&lt;/code&gt; is &lt;code&gt;PROVIDED_AL2&lt;/code&gt; which simply means we bring our own runtime (which we earlier installed as a Rust dependency) that will work on Amazon Linux 2. Just a lambda is not enough, however. Lambdas are not publicly accessible from outside of the cloud by default and we need to use API Gateway to connect the function to the outside world. To do this, add the following to your CDK code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;glitchApi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;apigw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HttpApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GlitchAPI&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Image glitching API&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;defaultIntegration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;intg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LambdaProxyIntegration&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;glitchHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code is pretty self-explanatory. It creates an HTTP API Gateway that will trigger our lambda, &lt;code&gt;glitchHandler&lt;/code&gt;, which we defined above, on incoming requests. Note how CDK makes it easy to refer to other resources: by using actual references within code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-binary"&gt;
  &lt;/a&gt;
  Building a binary
&lt;/h2&gt;

&lt;p&gt;We're almost ready but we need to make sure that CDK can see and upload our lambda binary. Normally Rust puts the build output inside &lt;code&gt;target/&lt;/code&gt; folder and gives it the same name as your package name:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[package]&lt;/span&gt;
&lt;span class="py"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"glitch"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One weird thing about AWS Rust lambdas is that the binary needs to be named &lt;code&gt;bootstrap&lt;/code&gt;. To do this, we need to add some settings to &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[package]&lt;/span&gt;
&lt;span class="py"&gt;autobins&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;

&lt;span class="nn"&gt;[[bin]]&lt;/span&gt;
&lt;span class="py"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"bootstrap"&lt;/span&gt;
&lt;span class="py"&gt;path&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"src/main.rs"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This takes care of the name. Next, we could also change the output folder to &lt;code&gt;artifacts&lt;/code&gt; so CDK can see it and &lt;code&gt;cargo build&lt;/code&gt; the project directly but let's imagine that you want to work on this project in different environments. The &lt;code&gt;bootstrap&lt;/code&gt; binary actually MUST be built with &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt; target. This is not possible on e.g. Windows, so let's use Docker!&lt;/p&gt;

&lt;p&gt;If you've ever used Docker with Rust you probably know that compiling can be painfully slow. This is because there is no &lt;code&gt;cargo&lt;/code&gt; option to &lt;a href="https://github.com/rust-lang/cargo/issues/2644"&gt;build only dependencies&lt;/a&gt; at the moment of writing.&lt;br&gt;
Luckily, there is a very good project &lt;a href="https://crates.io/crates/cargo-chef"&gt;cargo-chef&lt;/a&gt; that provides a workaround. Here's how we use it in our Dockerfile (mostly copy-paste from the project's README):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; lukemathwalker/cargo-chef:latest-rust-1.53.0 AS chef&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; chef AS planner&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;cargo chef prepare &lt;span class="nt"&gt;--recipe-path&lt;/span&gt; recipe.json

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; chef AS builder &lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=planner /app/recipe.json recipe.json&lt;/span&gt;
&lt;span class="c"&gt;# Build dependencies - this is the caching Docker layer!&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;cargo chef cook &lt;span class="nt"&gt;--release&lt;/span&gt; &lt;span class="nt"&gt;--recipe-path&lt;/span&gt; recipe.json
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;cargo build &lt;span class="nt"&gt;--release&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; scratch AS export&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=builder /app/target/release/bootstrap /&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this, if we run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build -o artifacts .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Docker will build a &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt; binary and put it inside &lt;code&gt;artifacts&lt;/code&gt; folder. Finally, CDK has all it needs to successfully deploy our lambda! So let's do it (you need to be inside the &lt;code&gt;lambda&lt;/code&gt; folder):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ideally we want to know the URL of our API Gateway immediately and there is a nice way to make CDK output this info by writing a couple more lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CfnOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;glitchApi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;glitchApi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if we add the &lt;code&gt;--outputs-file&lt;/code&gt; option to the &lt;code&gt;cdk&lt;/code&gt; command like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk deploy --outputs-file cdk-outputs.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we will see a &lt;code&gt;lambda/cdk-outputs.json&lt;/code&gt; file that has the URL inside:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"LambdaStack"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"glitchApi"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://your-gateway-api-url.amazonaws.com/"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#glitch"&gt;
  &lt;/a&gt;
  Glitch!
&lt;/h2&gt;

&lt;p&gt;That was a lot of work but now we can finally call our glitch API. It would be mean of me to not share a working link here as well. So here's the command that you can try right now to get a feel of the API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -X POST https://ifzc7embya.execute-api.ap-northeast-1.amazonaws.com --data-binary "@pic.jpg" -o "glitches/$(date +%s).jpg"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I cannot guarantee that the service is going to be always up, though.&lt;/p&gt;

&lt;p&gt;Generally, to use the API ypu need to prepare an image file you want to glitch and do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -X POST https://your-gateway-api-url.amazonaws.com --data-binary "@pic.jpg" -o glitched.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see a &lt;code&gt;glitched.jpg&lt;/code&gt; file that is glitched and hopefully looks aesthetically pleasing! Now that everything is working, you can play with the settings like the number and order of glitches, the size of the chunk that is sorted etc. If you know other simple ways to achieve nice-looking glitches, feel free to &lt;a href="https://twitter.com/virtualkirill"&gt;tell me on Twitter&lt;/a&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;p&gt;Here are some of my favorite glitches I generated while playing with the API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s3eBYFyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.kirillvasiltsov.com/writing/write-deploy-lambda-image-glitch/glitch1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s3eBYFyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.kirillvasiltsov.com/writing/write-deploy-lambda-image-glitch/glitch1.png" alt="glitch1" width="880" height="661"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1E5ozDNw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.kirillvasiltsov.com/writing/write-deploy-lambda-image-glitch/glitch2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1E5ozDNw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.kirillvasiltsov.com/writing/write-deploy-lambda-image-glitch/glitch2.png" alt="glitch2" width="880" height="661"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3N2qB0KD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.kirillvasiltsov.com/writing/write-deploy-lambda-image-glitch/glitch3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3N2qB0KD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.kirillvasiltsov.com/writing/write-deploy-lambda-image-glitch/glitch3.png" alt="glitch3" width="880" height="661"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zFsuE6O_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.kirillvasiltsov.com/writing/write-deploy-lambda-image-glitch/glitch4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zFsuE6O_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.kirillvasiltsov.com/writing/write-deploy-lambda-image-glitch/glitch4.png" alt="glitch4" width="880" height="661"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wait...what about &lt;code&gt;jemallocator&lt;/code&gt;? Oh yes, I promised to explain this as well. So, it seems that for quite a long time AWS lambdas needed to be built for &lt;code&gt;x86_64-unknown-linux-musl&lt;/code&gt; target. This was a pain because it needed a &lt;code&gt;musl&lt;/code&gt; toolchain which is not available by default. However, it looks like now you &lt;a href="https://umccr.org/blog/aws-bioinformatics-rust/"&gt;CAN&lt;/a&gt; use &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt; but with a caveat: you need to use &lt;code&gt;jemallocator&lt;/code&gt;. This is literally just one install and one more line to your code. The default allocator Rust uses on Unix platforms is &lt;code&gt;malloc&lt;/code&gt;. I do not know if this limitation will disappear in the future.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>tutorial</category>
      <category>datastructures</category>
    </item>
    <item>
      <title>Why Moving to Linux is My Best Decision in 2021</title>
      <author>Melvin Liu</author>
      <pubDate>Fri, 10 Dec 2021 01:35:35 +0000</pubDate>
      <link>https://dev.to/melvnl/why-moving-to-linux-is-my-best-decision-in-2021-18md</link>
      <guid>https://dev.to/melvnl/why-moving-to-linux-is-my-best-decision-in-2021-18md</guid>
      <description>&lt;h3&gt;
  &lt;a href="#backstory"&gt;
  &lt;/a&gt;
  Backstory
&lt;/h3&gt;

&lt;p&gt;I was lucky enough to be accepted as an intern at the &lt;a href="https://about.bukalapak.com/en/"&gt;first unicorn in my country that goes IPO&lt;/a&gt; for software engineer position, as a large tech e-commerce company that exist for 11 years the technology used behind must be quite mature, and more complex than usual (micro-frontend, micro-services, different virtual private network to access certain repository, private npm library, etc.).&lt;/p&gt;

&lt;p&gt;I've been using windows since my first day of college as a computer science student, and I should say that there is a few moment where I'm really stressed spending hours setting up the development environment (PATH, and mostly adjusting incompatible library). But I hit my breaking point a few weeks ago, due to incompatibility with my company codebase that is developed in UNIX operating system (like Mac or Linux), here's the list of my main problem :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Incompatible or missing packages, for instance &lt;a href="https://stackoverflow.com/questions/12917569/cmd-patch-is-not-recognised-as-an-internal-external-command-operable-program/18851897"&gt;this&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/link-module-alias"&gt;this&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Failed to install dependencies due to &lt;a href="https://stackoverflow.com/questions/45801457/node-js-python-not-found-exception-due-to-node-sass-and-node-gyp/53009640#53009640"&gt;node-gyp error&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Illegal file name in windows, but allowed in UNIX&lt;/li&gt;
&lt;li&gt;A few more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My friend keep suggesting me to implement dual boot, but I'm quite afraid that my machine will break down, or something will go wrong during the installation since I'm using a quite old machine (ASUS x550j from 2016). Hence I'm looking for alternative solutions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#trying-wsl-windows-subsystem-for-linux"&gt;
  &lt;/a&gt;
  Trying WSL (Windows Subsystem for Linux)
&lt;/h3&gt;

&lt;p&gt;I still want to play valorant during my work hours #oops. Hence I tried WSL, unfortunately I had a difficult time setting up openvpn in WSL due to certain networking issue. Without vpn I couldn't run the repository that I was working on. After a few cup of coffees, I finally give in to dual boot.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-dual-booth"&gt;
  &lt;/a&gt;
  Using Dual Booth
&lt;/h3&gt;

&lt;p&gt;In the end , I decided to implement dual boot in my machine. I'm following this tutorial from &lt;a href="https://www.youtube.com/watch?v=-iSAyiicyQY&amp;amp;t=622s"&gt;youtube&lt;/a&gt; to install Ubuntu along with my windows OS. Now, why Ubuntu ? why not arch-Linux? or other cool distros? Simple, I'm not a hardcore Linux fanboy, and there is this class in my 4th semester that teach terminal with Ubuntu, hence I've previous familiarity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-like-after-a-week-using-linux"&gt;
  &lt;/a&gt;
  What is like after a week using Linux
&lt;/h3&gt;

&lt;p&gt;Here is few things that I noticed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;My laptop's fan is much calmer (Usually it often make annoying noises, especially when I'm using an IDE)&lt;/li&gt;
&lt;li&gt;I also noticed that when I'm idle, Linux doesn't eat as much RAM as Windows does.&lt;/li&gt;
&lt;li&gt;and the most important is that I haven't face any incompatibility problem so far&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;As an engineer, I highly suggest you to move from windows to UNIX based like Linux or Mac as soon as you can. Here ! Have some Linus Trovalds Meme!.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2S3mcqhP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usyzcxrtl18yu7497luw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2S3mcqhP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usyzcxrtl18yu7497luw.png" alt="Linux Trovalds mad at Nvidia" width="639" height="349"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>ubuntu</category>
    </item>
  </channel>
</rss>
