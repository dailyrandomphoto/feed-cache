<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Front-End VS Back-End Web Development</title>
      <author>Lanre Fagbeyiro</author>
      <pubDate>Thu, 11 Feb 2021 23:25:21 +0000</pubDate>
      <link>https://dev.to/lanrewaju/front-end-vs-back-end-web-development-4olb</link>
      <guid>https://dev.to/lanrewaju/front-end-vs-back-end-web-development-4olb</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GahPtryq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613085156996/HpflGoMbb.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GahPtryq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613085156996/HpflGoMbb.jpeg" alt="photo-1571171637578-41bc2dd41cd2.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by  &lt;a href="https://unsplash.com/@ffstop?utm_source=medium&amp;amp;utm_medium=referral"&gt;Fotis Fotopoulos&lt;/a&gt; on &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are a developer just learning to code with a desire to focus on web development but confused on what path to take. Be that front-end or back-end web development or perhaps you have already started your journey and are questioning whether you are on the right path? This would be a good article for you to read. It’s important to have a good understanding of both front-end and back-end web development when starting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Front-end development is commonly referred to as client-side development and that focuses on everything that you see, experience, and interact with on a website or an application.&lt;br&gt;
On the flip side of things, we have back-end development, and it’s commonly referred to as server-side development and that’s going to be things that are more focused on functionality, data, algorithms, and such.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontend-development" class="anchor"&gt;
  &lt;/a&gt;
  Front-End Development
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Front-end web development is the practice of converting data to a graphical interface, through the use of HTML, CSS, and JavaScript, so that users can view and interact with that data.&lt;/p&gt;

&lt;p&gt;― Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Front-end development encompasses everything on the website or application that you’re used to seeing. Things like layouts, dropdown menus, buttons, and responsive design. The core three languages you’ll need to learn if you want to do front-end development are HTML, CSS, and JavaScript. These technologies all enable us to design our website and also allow for interaction on the client-side which is the browser. Also, there are front-end frameworks like Bootstrap, Foundation, Stylus, Semantic UI, Tailwind CSS, and so on for CSS which speeds up workflow. React, Vue, and Angular for JavaScript, are tools developers leverage to develop advanced web applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BYVN9PWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613084576262/OhA4JGeRF.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BYVN9PWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613084576262/OhA4JGeRF.jpeg" alt="pexels-photo-3800536.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by  &lt;a href="https://www.pexels.com/@olly"&gt;Andrea Piacquadio&lt;/a&gt;  on  &lt;a href="https://www.pexels.com/"&gt;Pexels&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;A great analogy to describe front-end development is kind of like a restaurant. There’s the dining room which is the main restaurant where a client sits down, a serving staff brings the menu, the client reads, makes an order, and their food is served. This is client-side, this is what the user sees in the browser, they can interact with the website using JavaScript and see the information that’s been displayed using HTML and CSS.&lt;/p&gt;

&lt;p&gt;Enough said about front-end development, now let’s move on to back-end development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#backend-development" class="anchor"&gt;
  &lt;/a&gt;
  Back-End Development
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Back-end web development is the core computational logic of a website, software, or information system. A back-end developer creates components and features that are indirectly accessed by a user through a front-end application or system.&lt;/p&gt;

&lt;p&gt;― Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The back-end is the structure and processes behind the curtains that make everything run, these include storing and organizing data, creating algorithms and complex logic for a seamless experience on the front-end. The languages a back-end developer should be well versed in are Python, PHP, Ruby, or Java, and also, it’s interesting to note that JavaScript can also be used as a back-end language with something like NodeJS which allows you to execute JavaScript not just in the browser but in a back-end environment. Also, there are frameworks like Express for NodeJS, Ruby on Rails, Flask/Django for Python, and these speed up development using the particular back-end technology you chose. The main job of these frameworks is simply to reduce the amount of repetitive stuff that a developer has to do. They make our lives as developers so much easier by cutting down some of the grinch work and saving us a lot of time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OK7rbwkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613084943848/FYc2b_EOH.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OK7rbwkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1613084943848/FYc2b_EOH.jpeg" alt="photo-1524491561693-20766fdcd934.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by  &lt;a href="https://unsplash.com/@kennyluoping?utm_source=medium&amp;amp;utm_medium=referral"&gt;Kenny Luo&lt;/a&gt;  on  &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Moving forward with our analogy, on the back-end, we’ve got the kitchen, and this is analogous to our server, this is the place where all of our dishes get prepared and served. When the client asks for pizza, that order gets sent to the server, the server should be able to send back what it was that the client ordered, which is the actual pizza.&lt;/p&gt;

&lt;p&gt;And finally, the larder where all the ingredients are stored is of course the database, this is where all of our user data, our event data, all of the data that makes our website work is stored. So, this is where the divide between the front end and back end happens. It’s between the dining room of the restaurant and the kitchen and larder.&lt;/p&gt;

&lt;p&gt;Back-end technologies such as Node.js, MongoDB, etc, enable us to interact with databases and have business logic on a server and a whole lot more.&lt;/p&gt;

&lt;p&gt;The back-end consists of things such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A server that will serve up your files that’s your HTML, CSS, and JavaScript.&lt;/li&gt;
&lt;li&gt;A database that can store your user data as their logins and passwords,&lt;/li&gt;
&lt;li&gt;Applications which are where you create your business logic, you determine how your web applications work, for example, things such as calculating flight prices or making payments, that sort of stuff.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s assume you want to book a ticket for an event on a website and you enter your name and buy a ticket, now that information which consists of your name, how many tickets you bought, and your registration details such as your email gets saved to the website’s database. You can just imagine these databases as these giant excellent spreadsheets living somewhere, and almost all of your data that you’ve entered gets saved onto these spreadsheets, and that means that when you come back at a later date, you’re able to log back on to the website and it would be able to retrieve from its database all of the data that is associated with your account, in this case, it would retrieve your tickets to the event.&lt;/p&gt;

&lt;p&gt;Finally, we also have what we call full-stack developers, and you can tell by the name that it’s the combination of both front-end and back-end development. It is the flexibility of working with the front and back end that makes you so much more desirable as a developer.&lt;/p&gt;

&lt;p&gt;Thanks for reading, I hope having a basic understanding of this will help you choose the right path.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Top 5 DEV Comments from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Thu, 11 Feb 2021 22:26:05 +0000</pubDate>
      <link>https://dev.to/devteam/top-5-dev-comments-from-the-past-week-3a4p</link>
      <guid>https://dev.to/devteam/top-5-dev-comments-from-the-past-week-3a4p</guid>
      <description>&lt;p&gt;This is a weekly roundup of awesome DEV comments that you may have missed.  You are welcome and encouraged to boost posts and comments yourself using the &lt;strong&gt;&lt;a href="https://dev.to/t/bestofdev"&gt;#bestofdev&lt;/a&gt;&lt;/strong&gt; tag.&lt;/p&gt;




&lt;p&gt;Good addition to the "underrated developer YouTubers" discussion  &lt;a href="https://dev.to/karan316/3-underrated-web-dev-youtubers-you-should-check-out-24pm"&gt;win of the week&lt;/a&gt;, &lt;a class="comment-mentioned-user" href="https://dev.to/jadenconcord"&gt;@jadenconcord&lt;/a&gt;
!&lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/jadenconcord"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--4E2J88c6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z7gGVpxJ--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/549755/d3c25637-f19c-4ae8-9bf4-807c56f7ed8f.png" alt="jadenconcord profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/jadenconcord"&gt;
        &lt;span class="comment-username"&gt;Jaden Concord&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;
&lt;a href="https://dev.to/jadenconcord/comment/1b8fo" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Feb  7
  &lt;/time&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;Fireship is good too&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/sanspanic"&gt;@sanspanic&lt;/a&gt;
 has to Google this every time... and there's no shame in that! &lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/sanspanic"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--V82j42Ce--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--TYMEuwDd--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/569219/418b7e5f-ad9c-404c-9487-15c568e0b944.png" alt="sanspanic profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/sanspanic"&gt;
        &lt;span class="comment-username"&gt;Sandra Spanik&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;
&lt;a href="https://dev.to/sanspanic/comment/1b85m" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Feb  7
  &lt;/time&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;How to center pretty much anything 🥲&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;If you were the new CEO of Amazon Web Services what would be your first executive order? That's the fantastic question &lt;a class="comment-mentioned-user" href="https://dev.to/andrewbrown"&gt;@andrewbrown&lt;/a&gt;
 raised in &lt;a href="https://dev.to/andrewbrown/if-you-were-the-new-ceo-of-amazon-web-services-what-would-be-your-first-executive-order-1ik7"&gt;this&lt;/a&gt; post. Equally fantastic is &lt;a class="comment-mentioned-user" href="https://dev.to/spetnik"&gt;@spetnik&lt;/a&gt;
's response. &lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/spetnik"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ZG-r--a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mvNnqRpE--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/575450/aacfa6aa-b8cd-4f15-bf21-7e1c19aa6350.png" alt="spetnik profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/spetnik"&gt;
        &lt;span class="comment-username"&gt;Aaron J Spetner&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;
&lt;a href="https://dev.to/spetnik/comment/1b8j7" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Feb  7
  &lt;/time&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;AWS Snowblower: Move files from on-prem to the cloud using a swarm of drones.&lt;br&gt;
AWS Hot Tub: A much better name for Aurora Serverless's "warm pools"&lt;br&gt;
AWS Interstellar: New regions in the Alpha Centauri and Sirius systems to eliminate downtime in the event the sun unexpectedly explodes.&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Welcome to DEV, &lt;a class="comment-mentioned-user" href="https://dev.to/davidlipschitz"&gt;@davidlipschitz&lt;/a&gt;
! It's always great to have a mentor make themselves available here. &lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/davidlipschitz"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--sSgBTccv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Cprhg6yf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/574510/9fe45995-ead3-43b6-9a85-5ec3cf1434c4.jpeg" alt="davidlipschitz profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/davidlipschitz"&gt;
        &lt;span class="comment-username"&gt;David Lipschitz&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;
&lt;a href="https://dev.to/davidlipschitz/comment/1b7co" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Feb  6
  &lt;/time&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;Just arrived. A 56 year old developer. Started 40 years ago. Hoping to go for at least another 40 years. Currently developing mainly with Oracle Apex, htp.p (HTML, JavaScript and CSS from inside Oracle), Oracle PL/SQL, and Microsoft Power BI (especially slicers). Currently writing an Indicator Performance Management System for the Western Cape Government; long term client is Achievement Awards Group where I maintain their accounting systems and write some incentive and loyalty software.&lt;/p&gt;

&lt;p&gt;Happy to help anyone. Feel free to ask questions. I've made lots of mistakes and also had lots of success. Remember to persevere, don't give up, and always be prepared to ask the "stupid questions." It's these questions that have got us past the "obvious" way of doing things, called dogma. Scientists ask questions and have hypotheses that they seek to prove or disprove. Be a scientist.&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Congrats on this win of the week, &lt;a class="comment-mentioned-user" href="https://dev.to/mitchpommers"&gt;@mitchpommers&lt;/a&gt;
! Looking forward to reading the accompanying post. &lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/mitchpommers"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--L4zb6mJC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--PZnw3lh5--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/194709/f0c124fe-5b86-4a14-aa27-a28cd0034117.png" alt="mitchpommers profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/mitchpommers"&gt;
        &lt;span class="comment-username"&gt;Mitch Pomery (he/him)&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2"&gt;•&lt;/span&gt;
&lt;a href="https://dev.to/mitchpommers/comment/1b78j" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Feb  5
  &lt;/time&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;My current project is basically complete AND already have people interested in the post for it that I am still writing out!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G39J4Upp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/alptbpxh74kp6k3uxu08.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T39AqSIC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--G39J4Upp--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/alptbpxh74kp6k3uxu08.jpg" alt="A tube filled with a grainy substance with different coloured bands of light on it"&gt;&lt;/a&gt;&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;See you next week for more great comments ✌&lt;/p&gt;

</description>
      <category>bestofdev</category>
    </item>
    <item>
      <title>Docker Tips And Best Practices</title>
      <author>Meir Gabay</author>
      <pubDate>Thu, 11 Feb 2021 21:19:31 +0000</pubDate>
      <link>https://dev.to/unfor19/docker-tips-and-best-practices-n9</link>
      <guid>https://dev.to/unfor19/docker-tips-and-best-practices-n9</guid>
      <description>&lt;p&gt;Curious about &lt;a href="https://www.docker.com/why-docker"&gt;Docker&lt;/a&gt;? Eager to strengthen your skills with containers?&lt;/p&gt;

&lt;p&gt;In this blog-post, I'll share five (5) tips, tricks, and best practices for using Docker. Let's start with a short analogy for everything that will be covered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#analogy" class="anchor"&gt;
  &lt;/a&gt;
  Analogy
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://docs.docker.com/engine/reference/builder/"&gt;Dockerfile&lt;/a&gt; is a recipe for creating &lt;a href="https://docs.docker.com/get-started/overview/#docker-objects"&gt;Docker images&lt;/a&gt;. Hence it should be treated as if it's the recipe for your favorite cake 🍰. It should be concise, readable, and easy to follow; this will make the whole baking (development) process easier.&lt;/p&gt;

&lt;p&gt;As part of writing an "easy" recipe (Dockerfile), it's important to enable baking (building) the cake (Docker image) in any kitchen (machine and any &lt;a href="https://geek-university.com/linux/uid-user-identifier-gid-group-identifier/"&gt;UID:GID&lt;/a&gt;). After all, if the cake is so good, we'll want to bake (build) the same cake (Docker image) over and over again, anywhere, and speed up 🚀 the baking (build) process over time by memorizing parts of the recipe (&lt;a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#minimize-the-number-of-layers"&gt;layers&lt;/a&gt;) in our heads (&lt;a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#leverage-build-cache"&gt;cache&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;It's best to split ✂️ the baking (building) process into steps (&lt;a href="https://docs.docker.com/develop/develop-images/multistage-build/"&gt;multi-stage build&lt;/a&gt;), where the final product (Docker image) includes only the relevant contents. We don't want to serve (publish) the cake (Docker image) with a bag of sugar (source-code) or with an oven (build packages/compilers) as it might be embarrassing (and heavy). 🙄&lt;/p&gt;

&lt;p&gt;Other than that, keeping the cake (Docker image/container) secured and safe 🔒 from unwanted people or animals 🐈 (hackers) should be taken care of as part of the process of baking the cake (writing a Dockerfile).&lt;/p&gt;

&lt;p&gt;And finally, if the cake's recipe (Dockerfile) contains reusable keywords (&lt;a href="https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact"&gt;ARG&lt;/a&gt;) such as "double sweet" 🍫 for "2 sugar", and it is used repeatedly in the recipe (Dockerfile), it should be declared once at the top of the recipe (Dockerfile Global ARGs) which will make it possible to use it as a reference ($MY_ARG).&lt;/p&gt;

&lt;p&gt;Enough with that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sXlloaiC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lean.org/LeanPost/Images/156_large.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sXlloaiC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lean.org/LeanPost/Images/156_large.jpg" alt="show-me-the-money"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#topics" class="anchor"&gt;
  &lt;/a&gt;
  Topics
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Order Of Commands&lt;/li&gt;
&lt;li&gt;Multi-Stage Build&lt;/li&gt;
&lt;li&gt;Run As A Non-Root User&lt;/li&gt;
&lt;li&gt;Mind The UID GID&lt;/li&gt;
&lt;li&gt;Global ARGs&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#order-of-commands" class="anchor"&gt;
  &lt;/a&gt;
  Order Of Commands
&lt;/h2&gt;

&lt;p&gt;A &lt;a href="https://docs.docker.com/engine/reference/builder/#from"&gt;Docker command&lt;/a&gt; (ARG, ENV, RUN, etc.) that is not supposed to be executed when the source-code is changing, should be pushed to the top as much as possible. When comparing to cakes, the base of the cake is the bottom layer, while in a Dockerfile the base of the image is at the top of the file.&lt;/p&gt;

&lt;p&gt;The cache of the "requirements packages" should be purged only if a package was added, removed, or its version was changed, but not when something in the code was changed because that happens a lot.&lt;/p&gt;

&lt;p&gt;In the following code snippet, the source-code is copied to the image, followed by the installation of requirements (packages). This means that every time one of the source-code files was modified, all the "requirements packages" will be installed. This results in purging the cache of the "requirements packages" on any change in the source-code, which is &lt;strong&gt;bad&lt;/strong&gt; since we want to cache them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# BAD&lt;/span&gt;

&lt;span class="c"&gt;# Copy everything from the build context&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . /code/&lt;/span&gt;

&lt;span class="c"&gt;# Install packages - on any change in the source-code&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--user&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s2"&gt;"requirements.txt"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A &lt;strong&gt;good example&lt;/strong&gt; for caching the requirements layer would be first copying the &lt;code&gt;requirements.txt&lt;/code&gt; file, or any other lock-file (&lt;a href="https://docs.npmjs.com/cli/v6/configuring-npm/package-lock-json"&gt;package-lock.json&lt;/a&gt;, &lt;a href="https://classic.yarnpkg.com/en/docs/yarn-lock/"&gt;yarn.lock&lt;/a&gt;, &lt;a href="https://blog.golang.org/using-go-modules"&gt;go.mod&lt;/a&gt;, etc.) followed by the installation of the &lt;code&gt;requirements.txt&lt;/code&gt;, and only then to copy the source-code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# GOOD&lt;/span&gt;

&lt;span class="c"&gt;# Copy and install requirements - only if requirements.txt was changed&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; requirements.txt /code/&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--user&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s2"&gt;"requirements.txt"&lt;/span&gt;

&lt;span class="c"&gt;# Copy everything from the build context&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . /code/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, there's an "extra" command (&lt;code&gt;COPY&lt;/code&gt;) that copies the &lt;code&gt;requirements.txt&lt;/code&gt; twice. This might look like a bad thing if you see it for the first time. Its beauty is that it caches the installation of the "requirements packages" and only then copies the source-code. Amazing!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: Docker will cache commands that haven't affected the file-system during the build process. This is why the order of  &lt;code&gt;RUN&lt;/code&gt;, &lt;code&gt;WORKDIR&lt;/code&gt;, and &lt;code&gt;COPY&lt;/code&gt; is crucial.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#multistage-build" class="anchor"&gt;
  &lt;/a&gt;
  Multi-Stage Build
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.docker.com/develop/develop-images/multistage-build/"&gt;Multi-Stage Build&lt;/a&gt; enables releasing slim images, including only packages and artifacts the application needs.&lt;/p&gt;

&lt;p&gt;Let's investigate the following Dockerfile&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# BAD - Not that bad, but it could be better&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.9.1-slim&lt;/span&gt;

&lt;span class="c"&gt;# Upgrade pip and then install build tools&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--upgrade&lt;/span&gt; pip &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--upgrade&lt;/span&gt; wheel setuptools wheel check-wheel-contents

&lt;span class="c"&gt;# Copy and install requirements - better caching&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; requirements.txt /code/&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--user&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s2"&gt;"requirements.txt"&lt;/span&gt;

&lt;span class="c"&gt;# Copy everything from the build context&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . /code/&lt;/span&gt;

&lt;span class="c"&gt;### Build the application&lt;/span&gt;
&lt;span class="c"&gt;### COMMANDS ...&lt;/span&gt;

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["app"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A few things about this solution&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Includes packages that are used only during the build stage, for example, &lt;code&gt;setup&lt;/code&gt;, &lt;code&gt;wheel&lt;/code&gt;, and &lt;code&gt;check-wheel-contents&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The source code is included in the image&lt;/li&gt;
&lt;li&gt;The container will run as the &lt;code&gt;root&lt;/code&gt; user; I'll cover it in the next topic&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With Multi-Stage Build, it's possible to create an intermediate image, let's call it &lt;code&gt;build&lt;/code&gt;, including the source-code and required packages for &lt;strong&gt;building&lt;/strong&gt;. The &lt;code&gt;build&lt;/code&gt; stage is followed by the &lt;code&gt;app&lt;/code&gt; stage, which is the "final image" that will be published to the Docker registry (&lt;a href="https://hub.docker.com/"&gt;DockerHub&lt;/a&gt;, &lt;a href="https://aws.amazon.com/ecr/"&gt;ECR&lt;/a&gt;, &lt;a href="https://azure.microsoft.com/en-us/services/container-registry/"&gt;ACR&lt;/a&gt;, &lt;a href="https://cloud.google.com/container-registry"&gt;GCR&lt;/a&gt;, etc.) and eventually deployed to the Cloud or On-Premise infrastructure.&lt;/p&gt;

&lt;p&gt;Now let's break the above snippet into a Multi-Stage Build pattern.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# GOOD&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.9.1-slim as build&lt;/span&gt;

&lt;span class="c"&gt;# Upgrade pip and then install build tools&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--upgrade&lt;/span&gt; pip &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--upgrade&lt;/span&gt; wheel setuptools wheel check-wheel-contents

&lt;span class="c"&gt;### Consider the comments as commands&lt;/span&gt;
&lt;span class="c"&gt;# Copy and install requirements - better caching&lt;/span&gt;
&lt;span class="c"&gt;# Copy the application from Docker build context to WORKDIR&lt;/span&gt;
&lt;span class="c"&gt;# Build the application, validate wheel contents and install the application&lt;/span&gt;


&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.9.1-slim as app&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /myapp/&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=build /dist/ /myapp/&lt;/span&gt;

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["app"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In general, the last &lt;code&gt;FROM&lt;/code&gt; command in a Dockerfile indicates that this is the final image. This is how we know to name it &lt;code&gt;app&lt;/code&gt; (or &lt;code&gt;prod&lt;/code&gt;) and make sure that it contains only the relevant contents. I called it &lt;code&gt;app&lt;/code&gt; even though it's not used anywhere else in the code; this is just for brevity and better documentation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you're curious why I didn't need to install anything in the final image, it's because the build process includes all the packages in the &lt;code&gt;/dist/lib&lt;/code&gt; directory. This is by design, and I totally recommend adopting this practice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#run-as-a-nonroot-user" class="anchor"&gt;
  &lt;/a&gt;
  Run As A Non-Root User
&lt;/h2&gt;

&lt;p&gt;The code snippets above didn't mention anything about which user is running the commands. The default user is &lt;code&gt;root&lt;/code&gt;, so all the commands to build the application are executed with superuser permissions, which is okay since this stage is done behind the scenes. What troubles me is - why should I allow the user to run the application (container) to execute everything as a superuser (root)?&lt;/p&gt;

&lt;p&gt;Picture this - your application is running in the cloud, and you haven't followed the &lt;a href="https://en.wikipedia.org/wiki/Principle_of_least_privilege"&gt;principle of least privilege&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;John, the nifty hacker, was able to hack into your application. Do you realize that John can execute &lt;code&gt;apt-get install ANYTHING&lt;/code&gt;? If John is really good at what he's doing, he can access any back-end service exposed to your application. Let's take some "negligible" service, such as your database, where John can install &lt;code&gt;mysql&lt;/code&gt; and communicate with your database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ExOqZP6t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k0jujqwgkjswwazr6uyr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ExOqZP6t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k0jujqwgkjswwazr6uyr.png" alt="docker-tips-and-best-practices-john-happy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To solve this problem, you can use the &lt;code&gt;USER&lt;/code&gt; command in the Dockerfile to switch the user from &lt;code&gt;root&lt;/code&gt; to some &lt;code&gt;appuser&lt;/code&gt; whose sole purpose (and permission) is to execute the application, nothing more.&lt;/p&gt;

&lt;p&gt;Omitting the build stage, let's focus on the app stage&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# GOOD&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.9.1-slim as app&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /myapp/&lt;/span&gt;

&lt;span class="c"&gt;# Creates `appuser` and `appgroup` and sets permissions on the app`s directory&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;addgroup appgroup &lt;span class="nt"&gt;--gid&lt;/span&gt; 1000 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    useradd appuser &lt;span class="nt"&gt;--uid&lt;/span&gt; 1000 &lt;span class="nt"&gt;--gid&lt;/span&gt; appgroup &lt;span class="nt"&gt;--home-dir&lt;/span&gt; /myapp/ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nb"&gt;chown&lt;/span&gt; &lt;span class="nt"&gt;-R&lt;/span&gt; appuser:appgroup /myapp/


&lt;span class="c"&gt;# All the following commands will be executed by `appuser`, instead of `root`&lt;/span&gt;
&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="s"&gt; appuser&lt;/span&gt;

&lt;span class="c"&gt;# Copy artifacts from the build stage and set `appuser` as the owner&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=build --chown=appuser:appgroup /myapp/&lt;/span&gt;

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["app"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Back to John, the nifty hacker; John tries to execute &lt;code&gt;apt-get install ANYTHING&lt;/code&gt;, and fails, since &lt;code&gt;apt-get&lt;/code&gt; requires super-user permissions. John tries to write malicious code in &lt;code&gt;/root/&lt;/code&gt; and gets &lt;code&gt;permission denied&lt;/code&gt; because this directory's permissions set is &lt;code&gt;700&lt;/code&gt; - read, write and execute by the owner (&lt;code&gt;root:&lt;/code&gt;) or group (&lt;code&gt;:root&lt;/code&gt;) and nothing more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_yw6rkH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/utoxbuhbvgta1eh55vzp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_yw6rkH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/utoxbuhbvgta1eh55vzp.png" alt="docker-tips-and-best-practices-john-frustrated"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm sure that if John is very talented, he'll still be able to do some harm, but still, it's best to minimize the collateral damage and isolate applications as much as possible. We also don't want John to laugh about the fact that we could've prevented him from using &lt;code&gt;apt-get install ANYTHING&lt;/code&gt;, and we simply didn't do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mind-the-uid-gid" class="anchor"&gt;
  &lt;/a&gt;
  Mind The UID GID
&lt;/h2&gt;

&lt;p&gt;As you can see in the code snippet above, I used &lt;code&gt;--uid 1000&lt;/code&gt; and &lt;code&gt;--gid 1000&lt;/code&gt;. The values &lt;code&gt;1000:1000&lt;/code&gt; are the default values for creating a new user or group in Ubuntu, and I used &lt;code&gt;1000:1000&lt;/code&gt; because I'm on &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10"&gt;WSL2 Ubuntu:20.04&lt;/a&gt;, so I could've just omitted those arguments. Here's how my user looks like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /etc/passwd | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;whoami&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
myuser:x:1000:1000:,,,:/home/myuser:/bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If the numbers are not the same as those on your machine, then adjusting them with &lt;code&gt;--uid UID&lt;/code&gt; and &lt;code&gt;--gid GID&lt;/code&gt; will ease the development process. Sounds interesting, right? ...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8u1fuLhS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://memegenerator.net/img/instances/84712300.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8u1fuLhS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://memegenerator.net/img/instances/84712300.jpg" alt="put-their-names-to-the-test"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll use a real containerized Python application; here's the Dockerfile of &lt;a href="https://github.com/unfor19/frigga/blob/master/Dockerfile"&gt;unfor19/frigga/Dockerfile&lt;/a&gt; (yes, yes, I wrote it). Imagine that I hadn't used the &lt;code&gt;USER&lt;/code&gt; command in the Dockerfile; let's imagine it together by enforcing the container to run as &lt;code&gt;root&lt;/code&gt; with &lt;code&gt;docker run --user=root ...&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# BAD&lt;/span&gt;
&lt;span class="c"&gt;# Reminder - My machine's UID:GID is 1000:1000&lt;/span&gt;

&lt;span class="c"&gt;# root UID:GID is 0:0&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="nv"&gt;$PWD&lt;/span&gt;/:/code/ &lt;span class="nt"&gt;--user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root &lt;span class="nt"&gt;--workdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/code/ &lt;span class="nt"&gt;--entrypoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;bash unfor19/frigga

root@987c5784a52e:/code# &lt;span class="nb"&gt;cat&lt;/span&gt; /etc/passwd | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;whoami&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
root:x:0:0:root:/root:/bin/bash
&lt;span class="c"&gt;# UID:GID = 0:0&lt;/span&gt;

root@987c5784a52e:/code# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"root contents"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; root-file.txt
root@987c5784a52e:/code# &lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lh&lt;/span&gt; root-file.txt
&lt;span class="c"&gt;# -rw-r--r-- 1 root root 14 Feb 12 14:03 root-file.txt&lt;/span&gt;
root@987c5784a52e:/code# &lt;span class="nb"&gt;exit&lt;/span&gt;

&lt;span class="c"&gt;# Local machine&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lh&lt;/span&gt; root-file.txt 
&lt;span class="c"&gt;# -rw-r--r-- 1 root root 14 Feb 12 14:04 root-file.txt&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"more contents"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; root-file.txt
&lt;span class="c"&gt;# bash: root-file.txt: Permission denied&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The above could be resolved by adding &lt;code&gt;sudo&lt;/code&gt; before the &lt;code&gt;echo&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo echo&lt;/span&gt; &lt;span class="s2"&gt;"more contents"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; root-file.txt
&lt;span class="c"&gt;# success&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But do we really want to use &lt;code&gt;sudo&lt;/code&gt; for editing files? What about our IDE? Do we need to run it with &lt;code&gt;sudo&lt;/code&gt; to edit files? I hope not. A better approach would be adjusting the application's (container) UID:GID according to the local machine's UID:GID. In my case, I didn't have to use &lt;code&gt;--uid&lt;/code&gt; and &lt;code&gt;--gid&lt;/code&gt; in the Dockerfile, since I'm using the same IDs as my application (container) uses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# GOOD&lt;/span&gt;
&lt;span class="c"&gt;# Reminder - My machine's UID:GID is 1000:1000&lt;/span&gt;

&lt;span class="c"&gt;# frigga's user UID:GID - 1000:1000&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="nv"&gt;$PWD&lt;/span&gt;/:/code/ &lt;span class="nt"&gt;--workdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/code/ &lt;span class="nt"&gt;--entrypoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;bash unfor19/frigga

appuser@52ad885a9ad5:/code&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"file contents"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; some-file.txt
appuser@52ad885a9ad5:/code&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lh&lt;/span&gt; some-file.txt
&lt;span class="c"&gt;# -rw-r--r-- 1 appuser appgroup 28 Feb 12 14:15 some-file.txt&lt;/span&gt;
appuser@52ad885a9ad5:/code&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;

&lt;span class="c"&gt;# Local machine&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lh&lt;/span&gt; some-file.txt 
&lt;span class="c"&gt;# -rw-r--r-- 1 meir meir 14 Feb 12 14:16 some-file.txt&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"more contents"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; some-file.txt
&lt;span class="c"&gt;# success&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The file &lt;code&gt;some-file.txt&lt;/code&gt; is set with the following permissions &lt;code&gt;rw-r-r&lt;/code&gt; (644), so only the file owner can edit this file. Luckily (or is it?), my UID and GID are also 1000, so I'm able to edit the file with my current user, without adding &lt;code&gt;sudo&lt;/code&gt; every time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#global-args" class="anchor"&gt;
  &lt;/a&gt;
  Global ARGs
&lt;/h2&gt;

&lt;p&gt;Going back to the Dockerfile - it's possible to declare global ARGs and pass them along to the Stages. This helps with following the &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;Don't Repeat Yourself (DRY) principle&lt;/a&gt;. For example, providing the &lt;code&gt;PYTHON_VERSION&lt;/code&gt; as a global argument, instead of hardcoding it for each Stage is superb! Let's see it in action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# BAD - 3.9.1 is hardcoded&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.9.1-slim as build&lt;/span&gt;
&lt;span class="c"&gt;# Build stage commands&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.9.1-slim as app&lt;/span&gt;
&lt;span class="c"&gt;# App stage commands&lt;/span&gt;
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["app"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Consider this instead-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# GOOD - 3.9.1 is declared once at the top of the file&lt;/span&gt;
&lt;span class="k"&gt;ARG&lt;/span&gt;&lt;span class="s"&gt; PYTHON_VERSION="3.9.1"&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:"$PYTHON_VERSION"-slim as build&lt;/span&gt;
&lt;span class="c"&gt;# Build stage commands&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:"$PYTHON_VERSION"-slim as app&lt;/span&gt;
&lt;span class="c"&gt;# App stage commands&lt;/span&gt;
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["app"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-words" class="anchor"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h2&gt;

&lt;p&gt;If you are here, then it means you're really into it. See a full example of a containerized Python application, essentially a CLI, see &lt;a href="https://github.com/unfor19/frigga"&gt;unfor19/frigga&lt;/a&gt;. I've implemented all the best practices I could think of in this project, and to take it even further check the &lt;a href="https://github.com/unfor19/frigga/actions"&gt;GitHub Actions (CI/CD)&lt;/a&gt; of this project, I added a fully blown test-suite to make sure that frigga can run on both docker-compose and Kubernetes, so you might find it handy. &lt;/p&gt;

&lt;p&gt;That would be all. Feel free to ask questions or leave a comment with your best practices for using Docker.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k42k7zlX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://30nevermind.files.wordpress.com/2014/02/memegen.jpg%3Fw%3D358%26h%3D202" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k42k7zlX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://30nevermind.files.wordpress.com/2014/02/memegen.jpg%3Fw%3D358%26h%3D202" alt="thank-you"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>docker</category>
      <category>tips</category>
      <category>tutorial</category>
      <category>bestpractice</category>
    </item>
    <item>
      <title>Getting in the FlowState with Standing Desks</title>
      <author>Jess Lee (she/her)</author>
      <pubDate>Thu, 11 Feb 2021 21:16:40 +0000</pubDate>
      <link>https://dev.to/devteam/getting-in-the-flowstate-with-standing-desks-3kid</link>
      <guid>https://dev.to/devteam/getting-in-the-flowstate-with-standing-desks-3kid</guid>
      <description>&lt;p&gt;&lt;a href="https://www.flowstate.to/"&gt;FlowState&lt;/a&gt; is a community of health, fitness, and wellbeing enthusiasts. It’s built on Forem and is definitely worth checking out if you're looking for some great fitness conversations and advice! &lt;/p&gt;

&lt;p&gt;With more and more developers working from home due to a combination of personal preference, the COVID-19 pandemic, and shifting work cultures, many of us are pushing code into production while pulling nerves in our back — it's &lt;em&gt;hard&lt;/em&gt; to maintain proper ergonomics outside of the traditional office environment. &lt;/p&gt;

&lt;p&gt;This FlowState convo is full of opinions on the merits of standing desks! And when it comes to office setups, I don't need to tell &lt;em&gt;you&lt;/em&gt; that we developers are an opinionated lot 🙃&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#what-are-your-thoughts-about-the-benefits-of-standing-desks-by-ildi-on-dev-and-flowstate" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://www.flowstate.to/ildi/what-are-your-thoughts-about-the-benefits-of-standing-desks-13nh"&gt;"What are your thoughts about the benefits of standing desks?"&lt;/a&gt; by ildi (on &lt;a href="https://www.dev.to/ildi"&gt;DEV&lt;/a&gt; and &lt;a href="https://www.flowstate.to/ildi"&gt;FlowState&lt;/a&gt;)&lt;/strong&gt;
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you’ve been thinking about investing in a standing desk or you already have one and want to share advice on using one, don’t miss this discussion on FlowState! &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#" class="anchor"&gt;
  &lt;/a&gt;
  🌱
&lt;/h4&gt;

</description>
      <category>discuss</category>
      <category>meta</category>
      <category>productivity</category>
      <category>wellness</category>
    </item>
    <item>
      <title>Replacing query-string with Native URLSearchParams</title>
      <author>nerdyman</author>
      <pubDate>Thu, 11 Feb 2021 19:33:29 +0000</pubDate>
      <link>https://dev.to/nerdyman/replacing-query-string-with-native-urlsearchparams-4kdg</link>
      <guid>https://dev.to/nerdyman/replacing-query-string-with-native-urlsearchparams-4kdg</guid>
      <description>&lt;p&gt;&lt;a href="https://www.npmjs.com/package/query-string"&gt;&lt;code&gt;query-string&lt;/code&gt;&lt;/a&gt; is an awesome package which allows you to parse URL parameters, however, you may not need it anymore.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams"&gt;&lt;code&gt;URLSearchParams&lt;/code&gt;&lt;/a&gt; is a &lt;strong&gt;native&lt;/strong&gt; interface to easily parse and construct URL parameters in both Node and the browser!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;The syntax is &lt;em&gt;slightly&lt;/em&gt; more verbose than &lt;code&gt;query-string&lt;/code&gt; in places, however, the benefit of a native solution to that of an external dependency outweighs the verbosity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-parameters" class="anchor"&gt;
  &lt;/a&gt;
  Setting Parameters
&lt;/h3&gt;

&lt;p&gt;Parameters can be set both at and after instantiation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// { foo: "" }&lt;/span&gt;
&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// { foo: "", hello: "world" }&lt;/span&gt;
&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// { foo: "bar", hello: "world" }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#getting-parameters" class="anchor"&gt;
  &lt;/a&gt;
  Getting Parameters
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;URLSearchParams&lt;/code&gt; returns an &lt;code&gt;iterator&lt;/code&gt; to get values.&lt;/p&gt;

&lt;p&gt;The simplest way to get the parameters as an Object is to use &lt;code&gt;Object.FromEntries&lt;/code&gt; with &lt;code&gt;.entries&lt;/code&gt; on the interface:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;?one&amp;amp;foo=bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Get all values.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parsedParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromEntries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// { one: "", foo: "bar" }&lt;/span&gt;

&lt;span class="c1"&gt;// Get a specific value.&lt;/span&gt;
&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// "bar"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#differences-in-implementation" class="anchor"&gt;
  &lt;/a&gt;
  Differences in Implementation
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#symbols" class="anchor"&gt;
  &lt;/a&gt;
  Symbols
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;query-string&lt;/code&gt; removes leading &lt;code&gt;#&lt;/code&gt; symbols - &lt;code&gt;URLSearchParams&lt;/code&gt; does not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;querystring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#foo=bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// { foo: "bar" } &lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#foo=bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// { #foo: "bar" } &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#implicit-parameter-values" class="anchor"&gt;
  &lt;/a&gt;
  Implicit Parameter Values
&lt;/h4&gt;

&lt;p&gt;Implicit parameters (parameters without &lt;code&gt;=&lt;/code&gt;) will evaluate to  &lt;code&gt;null&lt;/code&gt; with &lt;code&gt;query-string&lt;/code&gt; and an empty string with &lt;code&gt;URLSearchParams&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;querystring&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;?implicit&amp;amp;explicit=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// { implicit: null, explicit: "" }&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;?implicit&amp;amp;explicit=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// { implicit: "", explicit: "" }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#array-values" class="anchor"&gt;
  &lt;/a&gt;
  Array Values
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;query-string&lt;/code&gt; has advanced utilities to parse array values, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;queryString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;?foo[]=bar&amp;amp;foo[]=baz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;arrayFormat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bracket&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;//=&amp;gt; {foo: ['1', '2', '3']}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;URLSearchParams&lt;/code&gt; doesn't ship with array utilities so you need to roll your own function to get the full values back from arrays.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Convert `URLSearchParams` `[]` properties to array objects.
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arrayParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;?foo[]=bar&amp;amp;foo[]=baz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// { foo: ["bar", "baz"] } &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Otherwise, you'll end up with a single &lt;code&gt;[]&lt;/code&gt; property with the first value supplied.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;?foo[]=bar&amp;amp;foo[]=baz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;entries&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromEntries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// { foo[]: "bar" }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you only need to get a specific value you can use the &lt;code&gt;.getAll&lt;/code&gt; method directly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;?foo[]=bar&amp;amp;foo[]=baz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ["bar", "baz"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#node-and-browser-support" class="anchor"&gt;
  &lt;/a&gt;
  Node and Browser Support
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;URLSearchParams&lt;/code&gt; is supported by Node 10+ and browser support is prettay prettay prettay pretty good - It works with Edge 17+ and all evergreen browsers have supported it since 2016~2017.&lt;/p&gt;

&lt;p&gt;A &lt;a href="https://www.npmjs.com/package/@ungap/url-search-params"&gt;polyfill&lt;/a&gt; is also available for the unfortunate souls who need to support legacy browsers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vOQZbD0b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4pdbae0pbcbacabylg9l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vOQZbD0b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4pdbae0pbcbacabylg9l.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#live-example" class="anchor"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/urlsearchparams-vs-query-string-tflmb"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;The native &lt;code&gt;URLSearchParams&lt;/code&gt; interface removes the need for &lt;code&gt;query-string&lt;/code&gt;. One fewer dependency 🥳&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links" class="anchor"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams"&gt;URLSearchParams on MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://caniuse.com/urlsearchparams"&gt;URLSearchParams on Can I Use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
      <category>npm</category>
    </item>
    <item>
      <title>How I Reverted My Addiction to YouTube</title>
      <author>Minh Trinh</author>
      <pubDate>Thu, 11 Feb 2021 18:04:14 +0000</pubDate>
      <link>https://dev.to/anhtm/how-i-reverted-my-addiction-to-youtube-2nhl</link>
      <guid>https://dev.to/anhtm/how-i-reverted-my-addiction-to-youtube-2nhl</guid>
      <description>&lt;p&gt;I was addicted to YouTube and social media, like, &lt;em&gt;alarmingly&lt;/em&gt; addicted. Talk about wasting 3-4 hours a day just watching endless YouTube videos. I had no control over my life or my time. I knew I had to do something about it.&lt;/p&gt;

&lt;p&gt;A few weeks ago, I picked up &lt;a href="https://www.calnewport.com/books/digital-minimalism/"&gt;Digital Minimalism&lt;/a&gt; by Cal Newport. In the book, he suggested removing all optional technology in 30 days - including any online service, news or apps that do not prevent you from functioning on a day-to-day basis. This process is called "digital decluttering". It aims to give you time to reflect on what matters.&lt;/p&gt;

&lt;p&gt;Following his guide, I decided to cut down YouTube for 30 days.&lt;/p&gt;

&lt;p&gt;Leaving YouTube was difficult. It was my primary source of entertainment. It was where I've learned pretty much anything - from learning a new language, coding to unclogging the sink.&lt;/p&gt;

&lt;p&gt;To my surprise, after a month and a series of steps that I took to discourage myself from using YouTube, I no longer have the urge to use it anymore. It's just not &lt;em&gt;that&lt;/em&gt; interesting to go and browse videos and watch them. I managed to reduce my YouTube time to less than 15 minutes on average per day. That equals to one YouTube video. &lt;/p&gt;

&lt;p&gt;With COVID and quarantine life, I might not be alone in this battle against the infinite loop of excessive streaming habit and inner scream for help. Here is the list of my strategies and I hope you might benefit from it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-find-alternative-hobbies" class="anchor"&gt;
  &lt;/a&gt;
  1.  Find alternative hobbies
&lt;/h3&gt;

&lt;p&gt;This first step is the most important. It is crucial to find other hobbies to not relapse back to YouTube. There are a few criteria for a high-quality hobby:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Analog&lt;/em&gt;: I highly recommend you find a few hobbies that don't need technology to function. This will create distance between you and your phone, which means less opportunity to pick up the phone and watch a random video. &lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Fun&lt;/em&gt;: It should be fun for you. It should spark interest, curiosity, passion - whatever floats your boat. It should be rewarding. I've started to read much more books than I used to. I also enjoy walking outdoor more, especially during COVID when nothing is open.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Requires skills&lt;/em&gt;: Find something that requires skills that you hold valuable - something you need to work on to "level up". They can be physical or mental. For example, learning a new instrument requires both physical and intellectual capability. A few examples: learning to sew, playing a new sport, playing chess, running, writing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you have a hobby that you need to invest your time and energy in, you tend to stick to it more to reap the rewards. Also, if you want to reintroduce YouTube back, you now have a set of topics in mind that YouTube can help open horizon. YouTube will then become your tool and will serve you instead of manipulating your attention.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mWhiO1zB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uhi7s5k07x378pvlcaef.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mWhiO1zB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uhi7s5k07x378pvlcaef.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I picked up my long lost hobby - playing the piano! It's great for the brain and soothes my soul.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;My recommendation is to find at least two fun and analog hobbies, and one of the two should require skills.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-remove-youtube-from-your-phone" class="anchor"&gt;
  &lt;/a&gt;
  2.  Remove YouTube from your phone
&lt;/h3&gt;

&lt;p&gt;Once you've acquired a few new hobbies, remove YouTube from your phone. This step seems obvious, but I feel the need to include it here. I'm just a normal human with all of the desires and without any tremendous amount of willpower, so I have to create external barriers to not rely on my inner self-control.&lt;/p&gt;

&lt;p&gt;Having YouTube available at your fingertips is dangerous. In a split second of boredom, our brain will activate a subconscious urge to order our hand to open the app. This also gives YouTube permission to send notifications by default. That would equal constant distraction and allow YouTube to sneak in and steal our time without us even realizing it. Of course, you can disable the notifications from the settings, but in my experience, not having YouTube at all on the phone allows me to &lt;em&gt;forget&lt;/em&gt; about its existence altogether. &lt;/p&gt;

&lt;p&gt;If you use an Android device, it's impossible to uninstall the app (uhh Google, please fix this 🤦‍♀️). The most you can do is disable YouTube, and in doing so, YouTube will no longer show up in your applications list. You'll probably receive a warning when trying to disable it, but don't worry, nothing will go out of order if you do so. Google will try its best to keep us hooked, and remember, it's always easy to enable it back on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-opt-out-of-activity-tracking" class="anchor"&gt;
  &lt;/a&gt;
  3.  Opt out of activity tracking
&lt;/h3&gt;

&lt;p&gt;In other words, &lt;em&gt;make YouTube&lt;/em&gt; &lt;em&gt;dumb&lt;/em&gt;. I stumbled upon this feature while tinkering with my privacy settings on Google, and it honestly changed the game!&lt;/p&gt;

&lt;p&gt;By opting out of YouTube activity tracking, Google will stop saving your watch history &amp;amp; search history in the future. There's also an option to delete my past data so I went ahead and deleted all my history.&lt;/p&gt;

&lt;p&gt;After this change, I noticed YouTube still proposes videos that would interest me, but the recommendation engine would show more videos that I've already watched. As a result, YouTube became a bit duller and less engaging than it used to be.&lt;/p&gt;

&lt;p&gt;To do so, all you need to do is go to &lt;a href="https://myactivity.google.com/"&gt;https://myactivity.google.com/&lt;/a&gt; &amp;gt; &lt;em&gt;YouTube History&lt;/em&gt; and toggle off the YouTube History option: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vDCFRcqk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ajgynbu0jyp6svfik5ul.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vDCFRcqk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ajgynbu0jyp6svfik5ul.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's an extra step if you want to delete your data. Just go to the &lt;em&gt;Manage activity&lt;/em&gt; tab and choose which date range you want to delete your data from.&lt;/p&gt;

&lt;p&gt;With this simple switch off, it takes me &lt;em&gt;less&lt;/em&gt; effort and willpower to get over YouTube.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-block-youtube-from-your-browser" class="anchor"&gt;
  &lt;/a&gt;
  4. Block YouTube from your browser
&lt;/h3&gt;

&lt;p&gt;I use &lt;a href="https://blocksite.co/"&gt;BlockSite&lt;/a&gt;, which essentially is just a tool that blocks your access to certain websites of your choice. When a site is blocked, you don't have instant access to it by default and have to type in your password to access the site. There are also options to add even more friction such as adding extra challenges to unblock the page. Remember, make it inconvenient.&lt;/p&gt;

&lt;p&gt;This is what I see when I type &lt;code&gt;youtube.com&lt;/code&gt; in my browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rughg0Dq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4wik6ahzwn2efa1sqqz4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rughg0Dq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4wik6ahzwn2efa1sqqz4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I intentionally set my password to something ridiculous and difficult to remember and, funnily enough, I forgot my password 😜. Thanks to my laziness, I didn't bother resetting the password and stopped visiting YouTube altogether.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-schedule-your-watch-time" class="anchor"&gt;
  &lt;/a&gt;
  5. Schedule your watch time
&lt;/h3&gt;

&lt;p&gt;Another effective strategy is to plan your watch time. Ask yourself a few questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When am I going to watch YouTube?&lt;/li&gt;
&lt;li&gt;For how long am I going to use it?&lt;/li&gt;
&lt;li&gt;What am I going to watch?&lt;/li&gt;
&lt;li&gt;Do I watch it alone or with somebody else?&lt;/li&gt;
&lt;li&gt;Why do I want to watch YouTube?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, I set out my schedule as follows: watch YouTube for a maximum of 30 minutes a day, after dinner at around 9 PM. Watch 1 or 2 chess game analysis videos from @agadmator because I want to follow what's going on in the current chess tournament.&lt;/p&gt;

&lt;p&gt;By setting myself up to a specific plan, I'm less likely to go down the YouTube rabbit hole. I don't feel guilty for watching YouTube anymore because it now has become a tool. I regain control of my time and only use YouTube to follow my fostered hobbies.&lt;/p&gt;

&lt;p&gt;Next, keep this schedule in a spot that's easy to see so that you have a constant reminder of your intention. For example, write it on a piece of paper and stick it on the wall. Or put a sticky note on your laptop.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-track-your-progress-but-dont-beat-yourself-up" class="anchor"&gt;
  &lt;/a&gt;
  6. Track your progress, but don't beat yourself up
&lt;/h3&gt;

&lt;p&gt;YouTube has a handy built-in digital wellbeing tool called "Time watched profile" for tracking daily YouTube watch time. It also keeps track of your historical data for the last seven days and the rolling average. A good start would be getting into the habit of checking your watch time daily and becoming more aware of your time spent on the app.&lt;/p&gt;

&lt;p&gt;Additionally, I keep track of my screen time with the &lt;em&gt;Digital Wellbeing&lt;/em&gt; app on Android (or &lt;em&gt;Screen Time&lt;/em&gt; for iOS users). Every day, I note my screen time on an external app to have a concentrated data source and further recognize my patterns. I use Notion to track progress, but you can use pretty much anything - an Excel table or even a paper calendar works too!&lt;/p&gt;

&lt;p&gt;I don't think it's necessary to set a specific goal, like "spending less than 1 hour on YouTube". The primary purpose of progress tracking is to help you shift your focus to mindfulness. Results will come when we are intentional in our actions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5JhTnhNv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x34rm3pircbqots9jgv1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5JhTnhNv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x34rm3pircbqots9jgv1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I keep track of other wellbeing factors besides screen time, but you don't have to if that's too much for you. The general idea here is to be mindful of your actions.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Finally, have fun with it! Don't beat yourself up if you don't remember your progress for one day, or if you used YouTube 1 hour more than you should today. Just remind yourself to get back to it tomorrow. Every new day is a fresh start 🎉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;These are the solutions that I've tried and have worked for me personally. Some of these ideas might work for you while some might not. I'd suggest trying them out one by one and give yourself some time to get familiar with this new "regime". It's going to be difficult for the first week or two. You'll likely feel a strong sense of boredom and an urge to open up YouTube or any other time-sucking apps like Reddit or Twitter. It's completely normal to feel that way. Just remind yourself that you have a handful of hobbies to cultivate that will give you much more joy and satisfaction than spending 2+ hours on YouTube.&lt;/p&gt;

&lt;p&gt;I hope this article proves to be useful in any way to you. Let me know in the comments!&lt;/p&gt;

&lt;p&gt;Good luck 🍀&lt;/p&gt;




&lt;p&gt;Sources&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cover &lt;span&gt;Photo by &lt;a href="https://unsplash.com/@vmxhu?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Szabo Viktor&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/youtube?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/span&gt; &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>productivity</category>
    </item>
    <item>
      <title>What's the difference between Typescript, Babel, and Coffeescript?</title>
      <author>LeviathanProgramming</author>
      <pubDate>Thu, 11 Feb 2021 16:34:15 +0000</pubDate>
      <link>https://dev.to/conner1115/what-s-the-difference-between-typescript-babel-and-coffeescript-2jo</link>
      <guid>https://dev.to/conner1115/what-s-the-difference-between-typescript-babel-and-coffeescript-2jo</guid>
      <description>&lt;p&gt;I now that babel, typescript, and I &lt;em&gt;think&lt;/em&gt; coffeescript are different than javascript in some ways in allowing more ES6 usage.  I don't know the exact differences between them all and would like an explanation.&lt;/p&gt;

&lt;p&gt;Can you please explain what each one is and how they differ from Javascript and each other?&lt;br&gt;
Thanks for reading.&lt;br&gt;
Happy Coding.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>babel</category>
      <category>typescript</category>
      <category>explainlikeimfive</category>
    </item>
    <item>
      <title>How to build a Dice Roller in Python</title>
      <author>Rishabh Singh ⚡</author>
      <pubDate>Thu, 11 Feb 2021 15:45:52 +0000</pubDate>
      <link>https://dev.to/mindninjax/how-to-build-a-dice-roller-in-python-18j3</link>
      <guid>https://dev.to/mindninjax/how-to-build-a-dice-roller-in-python-18j3</guid>
      <description>&lt;p&gt;Hello everyone, today we are going to create a &lt;strong&gt;Dice Roller in Python&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pEnvef6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m9qf728jshctdnouta10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pEnvef6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m9qf728jshctdnouta10.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work" class="anchor"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;In the real world, we use dice to get a random number ranging from 1- 6 so we can proceed with the game accordingly. Our program is going to work similarly. Every time we will run our program, it will return us a random number between 1 &amp;amp; 6. Now let's jump to coding and make this project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-code" class="anchor"&gt;
  &lt;/a&gt;
  Let's Code
&lt;/h2&gt;

&lt;p&gt;The first thing we are gonna do is import the required modules. &lt;/p&gt;

&lt;p&gt;For this project, we need only one module which is &lt;strong&gt;&lt;code&gt;random&lt;/code&gt;&lt;/strong&gt; module which helps us to generate random values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We have successfully imported &lt;strong&gt;&lt;code&gt;random&lt;/code&gt;&lt;/strong&gt; module.&lt;/p&gt;

&lt;p&gt;Now we may need to use the Dice Roller multiple times hence it will be a good idea to use an &lt;strong&gt;&lt;code&gt;while&lt;/code&gt;&lt;/strong&gt; loop in order to keep our code running for as long as user wishes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we go! Here is the basic syntax of the &lt;strong&gt;&lt;code&gt;while&lt;/code&gt;&lt;/strong&gt; loop. We will substitute that &lt;strong&gt;&lt;code&gt;pass&lt;/code&gt;&lt;/strong&gt; keyword with our remaining code.&lt;/p&gt;

&lt;p&gt;Now let's give our code the ability to generate a random number between 1 to 6.&lt;/p&gt;

&lt;p&gt;Here we will make use of one of the functions of our &lt;strong&gt;&lt;code&gt;random&lt;/code&gt;&lt;/strong&gt; module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"The value is "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;code&gt;random.randint(START_VALUE, END_VALUE)&lt;/code&gt;&lt;/strong&gt; is the function we are going to use.&lt;/p&gt;

&lt;p&gt;As previously mentioned, this function will take an &lt;strong&gt;&lt;code&gt;START_VALUE&lt;/code&gt;&lt;/strong&gt; &amp;amp; an &lt;strong&gt;&lt;code&gt;END_VALUE&lt;/code&gt;&lt;/strong&gt; which will be &lt;strong&gt;&lt;code&gt;1&lt;/code&gt;&lt;/strong&gt; &amp;amp; &lt;strong&gt;&lt;code&gt;6&lt;/code&gt;&lt;/strong&gt; in our case, since we need a value between 1 &amp;amp; 6.&lt;/p&gt;

&lt;p&gt;We are also using an &lt;strong&gt;&lt;code&gt;print()&lt;/code&gt;&lt;/strong&gt; function along with &lt;strong&gt;&lt;code&gt;f-string&lt;/code&gt;&lt;/strong&gt; to directly print the output on the console, rather than storing it in a variable.&lt;/p&gt;

&lt;p&gt;We are almost done!&lt;/p&gt;

&lt;p&gt;Now let's add one line to ask the user if he/she wishes to roll the dice again or would like the end the program instead. This is pretty simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;repeat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Roll Dice again? 'y' for yes &amp;amp; 'n' for no: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;repeat&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'n'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we are simply using input() function to ask the user and the user can reply in either &lt;strong&gt;yes&lt;/strong&gt; or &lt;strong&gt;no&lt;/strong&gt;. And we are using an &lt;strong&gt;&lt;code&gt;if&lt;/code&gt;&lt;/strong&gt; statement so that if the user replies &lt;strong&gt;no&lt;/strong&gt;, then the loop will terminate otherwise the loop will continue to run forever.&lt;/p&gt;

&lt;p&gt;Finally here's how our &lt;strong&gt;&lt;code&gt;while&lt;/code&gt;&lt;/strong&gt; loop will look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Rolling Dice..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"The value is "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;repeat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Roll Dice again? 'y' for yes &amp;amp; 'n' for no: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;repeat&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'n'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we have also added an optional &lt;strong&gt;&lt;code&gt;print()&lt;/code&gt;&lt;/strong&gt; function to indicate the rolling of the dice.&lt;/p&gt;

&lt;p&gt;You did it! 🤩&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-code" class="anchor"&gt;
  &lt;/a&gt;
  Source Code
&lt;/h2&gt;

&lt;p&gt;You can find the complete source code of this project here -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mindninjaX/Python-Projects-for-Beginners/tree/master/Dice%20Roller"&gt;mindninjaX/Python-Projects-for-Beginners&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support" class="anchor"&gt;
  &lt;/a&gt;
  Support
&lt;/h2&gt;

&lt;p&gt;Thank you so much for reading! I hope you found this beginner project useful. &lt;/p&gt;

&lt;p&gt;If you like my work please consider &lt;a href="https://buymeacoff.ee/mindninjaX"&gt;Buying me a Coffee&lt;/a&gt; so that I can bring more projects, more articles for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SNezDmj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5irx7eny4412etlwnc64.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SNezDmj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5irx7eny4412etlwnc64.png" alt="https://dev-to-uploads.s3.amazonaws.com/i/5irx7eny4412etlwnc64.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also if you have any questions or doubts feel free to contact me on &lt;a href="https://twitter.com/mindninjaX"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/mindninjax/"&gt;LinkedIn&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/mindninjaX"&gt;GitHub&lt;/a&gt;. Or you can also post a comment/discussion &amp;amp; I will try my best to help you :D&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 JavaScript Projects You Should Consider To Build As A Frontend Dev.</title>
      <author>Ankur Tyagi</author>
      <pubDate>Thu, 11 Feb 2021 15:22:06 +0000</pubDate>
      <link>https://dev.to/tyaga001/5-javascript-projects-you-should-consider-to-build-as-a-frontend-dev-3jpd</link>
      <guid>https://dev.to/tyaga001/5-javascript-projects-you-should-consider-to-build-as-a-frontend-dev-3jpd</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Side projects are a great way to show your skills to land your first job as Front-end Developer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#5-javascript-projects-you-should-consider-to-build-as-a-frontend-dev" class="anchor"&gt;
  &lt;/a&gt;
  5 JavaScript Projects You Should Consider To Build as a Frontend Dev.
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#1-build-a-tictactoe-game-with-pure-javascript" class="anchor"&gt;
  &lt;/a&gt;
  1. Build a Tic-tac-toe game with Pure JavaScript
&lt;/h3&gt;

&lt;p&gt;Building a game in a browser can be a great exercise to test your JavaScript skills. You will have to react to user events, interact with DOM, and store game data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-build-a-blog-template-with-html-and-css" class="anchor"&gt;
  &lt;/a&gt;
  2. Build a Blog Template with HTML and CSS
&lt;/h3&gt;

&lt;p&gt;When you just start learning front-end development it’s important to consolidate your knowledge about HTML and CSS. Building a Blog Template is a good idea for your first bigger project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-location-sharing-with-pure-javascript-and-maps-service" class="anchor"&gt;
  &lt;/a&gt;
  3. Location sharing with Pure JavaScript and Maps Service
&lt;/h3&gt;

&lt;p&gt;A simple app where you can share location with your friend can be both a demanding project. In this project, you will use JavaScript to interact with external services for maps (ex. Google Maps or OpenStreetMap).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-build-tv-series-tracker-with-js-framework-react-vue-angular-or-other" class="anchor"&gt;
  &lt;/a&gt;
  4. Build TV Series Tracker with JS Framework (React, Vue, Angular or other)
&lt;/h3&gt;

&lt;p&gt;This project will help every TV Series fan, track premieres new episodes. It will be a great opportunity to use a JavaScript framework you are comfortable with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-home-budget-app-with-js-framework-react-vue-angular-or-other" class="anchor"&gt;
  &lt;/a&gt;
  5. Home Budget App with JS Framework (React, Vue, Angular or other)
&lt;/h3&gt;

&lt;p&gt;Creating a home budget App will be an ultimate check for your skills as a Junior Front-end Developer. It will check your ability to create forms and store information, but it can also help you save money!&lt;/p&gt;

&lt;p&gt;Remember, you don’t have to mimic the above examples 1-to-1.&lt;/p&gt;

&lt;p&gt;Feel free to change, add or remove any detail you like.&lt;/p&gt;

&lt;p&gt;If you have older projects you used for learning new skills you can always refactor them and put them in your portfolio. &lt;/p&gt;

&lt;p&gt;Good Luck!&lt;/p&gt;

&lt;p&gt;That's it for today, If you like my recommendations, then I encourage you to sign up for my weekly “2-1-1” Friday newsletter&lt;/p&gt;

&lt;p&gt;And don't forget to follow me for more killer content in 2021.&lt;/p&gt;

&lt;p&gt;Sign up 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codelifefitness.com/"&gt;2-1-1 Friday Newsletter&lt;/a&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Don't just code</title>
      <author>Alvaro Montoro</author>
      <pubDate>Thu, 11 Feb 2021 14:41:35 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/don-t-just-practice-coding-n0d</link>
      <guid>https://dev.to/alvaromontoro/don-t-just-practice-coding-n0d</guid>
      <description>&lt;p&gt;You are preparing to become a Software Developer. And you are coding, practicing, completing exercises, following tutorials online, learning JavaScript, algorithms, React, loops, Java, variables... and that is great, but you may be missing something along your path.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p86TAaCk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/737w26mhkxkbjykbpg8q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p86TAaCk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/737w26mhkxkbjykbpg8q.png" alt="Cartoon of a man and a woman looking confused at a dotted line that represents the path to a software dev position, it has many stops (algorithms, variables, classes...) a big question mark over their heads"&gt;&lt;/a&gt;&lt;/p&gt;

This path seems solid, but something's missing




&lt;h2&gt;
  &lt;a href="#soft-skills" class="anchor"&gt;
  &lt;/a&gt;
  Soft skills
&lt;/h2&gt;

&lt;p&gt;Coding is fundamental for a developer, but there's more to it than just that: &lt;strong&gt;soft skills are essential too!&lt;/strong&gt; Actually, social and communication skills are almost as critical and not as easy to master.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anyone can get to a Junior Developer level in a matter of weeks or months&lt;/strong&gt; and, with some time and experience, master their coding skills... but coding is not everything.&lt;/p&gt;

&lt;p&gt;Empathy, creativity, open-mindedness, good communication, critical thinking, teamwork mentality... they complement the technical knowledge and will take you to the next level.&lt;/p&gt;

&lt;p&gt;The good news is you may have those soft skills already! And trust me, we need them in our industry. We really do.&lt;/p&gt;

&lt;p&gt;Some people have these skills naturally. Some others need to practice them a little (...or a lot). But we must work on them to grow as developers (and as people in general).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pdr3cB1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/71gsaj056c9sfv48yz7v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pdr3cB1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/71gsaj056c9sfv48yz7v.png" alt="Cartoon of a smiling man and woman looking at a dotted line that represents the path to a software dev position, it has many stops (algorithms, variables, classes...), and it also had some other handwritten steps in between (empathy, critical thinking, communication skills...)"&gt;&lt;/a&gt;&lt;/p&gt;

This path leads to better results and success




&lt;p&gt;Here's a little &lt;em&gt;secret&lt;/em&gt;: you are not being evaluated just for your technical knowledge in a technical interview. By the time you make it to the technical interview, you should have passed a technical screening, and we have a general idea of your coding abilities.&lt;/p&gt;

&lt;p&gt;We also want to make sure that you'd be a good fit for the team and organization, and look for other types of skills: communication, creativity, critical thinking... do they ring a bell?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#listening" class="anchor"&gt;
  &lt;/a&gt;
  Listening
&lt;/h2&gt;

&lt;p&gt;While the soft skills are very different among them, there is a common factor that can help improve many of them at once: &lt;strong&gt;Listening&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Notice that I use listening in a wider sense, which includes listening, reading, observing, and even writing (which is really useful for solidifying knowledge and improving communication skills.)&lt;/p&gt;

&lt;p&gt;Seriously. &lt;strong&gt;Do you...&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;...want better communication skills?&lt;/strong&gt; Listen to people. It will help following the conversation better, will make you more secure and able to answer. Even if they are not talking to you: listen and pay attention to how senior coworkers present the topics and learn from how they do it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;...want to boost empathy?&lt;/strong&gt; Listen to people. Understand how they feel, what they are going through, what they think. It will help you understand their needs better, and it will improve the team mentality.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;...want to be more creative?&lt;/strong&gt; Listen to (creative) people. Get ideas, inspiration, challenges... Every artist has been influenced by previous artists. To improve your creativity, search for and listen to other creative people.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;...want to improve teamwork skills?&lt;/strong&gt; Listen to your teammates! Not only to what they have to say but also to how they present things: read their tickets carefully, make sure that you have all requirements... more listening later translates into fewer bugs and missing features and faster review cycles.&lt;/li&gt;
&lt;li&gt;...want to...?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do you see the pattern?&lt;/p&gt;

&lt;p&gt;Of course, there are many other ways to improve soft skills, but I find that a good one is following Vanilla Ice's advice: "&lt;em&gt;Alright: stop, collaborate, and listen&lt;/em&gt;." :P&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Technologies come and go. Programming languages rise and fall. The same language/library changes from one version to the next... but being assertive, having empathy, knowing how to present ideas... those are things that will be with you always. And they will open many doors.&lt;/p&gt;

&lt;p&gt;While you prepare for your Software Developer career, don't just focus on coding and also set some time to invest in your soft skills. It will go a long way.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>career</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Amazing image placeholders with blurhash</title>
      <author>Karan Pratap Singh</author>
      <pubDate>Thu, 11 Feb 2021 13:25:49 +0000</pubDate>
      <link>https://dev.to/karanpratapsingh/amazing-image-placeholders-with-blurhash-11ok</link>
      <guid>https://dev.to/karanpratapsingh/amazing-image-placeholders-with-blurhash-11ok</guid>
      <description>&lt;p&gt;Few weeks ago I was playing around with &lt;a href="https://wolt.com/en"&gt;Wolt&lt;/a&gt; iOS app, I was really impressed by how the app handled image load and placeholders. After looking around I finally found &lt;a href="https://blurha.sh"&gt;Blurhash&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-would-i-need-it" class="anchor"&gt;
  &lt;/a&gt;
  Why would I need it?
&lt;/h2&gt;

&lt;p&gt;Blurhash can help with transforming boring image placeholders into something more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9lm2FMS_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oxy902cd021lo5tdv32i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9lm2FMS_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oxy902cd021lo5tdv32i.png" alt="Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;&lt;a href="https://blurha.sh/"&gt;source&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-with-typescript-and-react" class="anchor"&gt;
  &lt;/a&gt;
  Using with TypeScript and React
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#install" class="anchor"&gt;
  &lt;/a&gt;
  Install
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add blurhash
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#encode-an-image" class="anchor"&gt;
  &lt;/a&gt;
  Encode an image
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;encode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blurhash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loadImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLImageElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getImageData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HTMLImageElement&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;ImageData&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;canvas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getImageData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;encodeImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HTMLImageElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;loadImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;imageData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ImageData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getImageData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;imageData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;imageData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;imageData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#store-blurhash-alongside-your-images" class="anchor"&gt;
  &lt;/a&gt;
  Store blurhash alongside your images
&lt;/h4&gt;

&lt;p&gt;When storing images to S3 bucket, I usually run encode function on the image from S3 and store it alongside the image url in the database so that it's easier. &lt;/p&gt;

&lt;p&gt;Personally I store image in it's own object representation as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"image"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://project-uploads.s3.amazonaws.com/i/..."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"blurhash"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"LKO2?U%2Tw=w]~RBVZRi};RPxuwH"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#using-with-react" class="anchor"&gt;
  &lt;/a&gt;
  Using with React
&lt;/h4&gt;

&lt;p&gt;After storing the hash on the server, it's quite easier to use it with React without any manual decoding with &lt;a href="https://github.com/woltapp/react-blurhash"&gt;react-blurhash&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BlurhashCanvas&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-blurhash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Blurhash&lt;/span&gt;
  &lt;span class="na"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;image_hash&amp;gt;'&lt;/span&gt;
  &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;resolutionX&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;resolutionY&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;i&gt;Note: you can also decode the hash manually, checkout &lt;a href="https://github.com/woltapp/blurhash"&gt;blurhash docs&lt;/a&gt; for more details&lt;/i&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#experiment-online" class="anchor"&gt;
  &lt;/a&gt;
  Experiment online!
&lt;/h2&gt;

&lt;p&gt;There's an online generator available if would like to try it out yourself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B-1wKVxs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bww7xkxb2izzt56nu6vw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B-1wKVxs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bww7xkxb2izzt56nu6vw.png" alt="generator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding 🎉 &lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Deploying Docker containers on AWS ECS 🏗</title>
      <author>Raphael MANSUY</author>
      <pubDate>Thu, 11 Feb 2021 13:02:58 +0000</pubDate>
      <link>https://dev.to/raphaelmansuy/deploy-a-docker-app-to-aws-using-ecs-3i1g</link>
      <guid>https://dev.to/raphaelmansuy/deploy-a-docker-app-to-aws-using-ecs-3i1g</guid>
      <description>&lt;h1&gt;
  &lt;a href="#deploy-a-docker-app-to-aws-using-ecs" class="anchor"&gt;
  &lt;/a&gt;
  Deploy a Docker App to AWS using ECS
&lt;/h1&gt;

&lt;p&gt;AWS proposes two container orchestrations services: &lt;strong&gt;ECS&lt;/strong&gt; and &lt;strong&gt;Kubernete&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Well integrated with the AWS ecosystem, ECS is the proprietary version.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-we-will-build" class="anchor"&gt;
  &lt;/a&gt;
  What we will build
&lt;/h2&gt;

&lt;p&gt;In this tutorial we will explain how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Package and build a node application and package a simple node application with Docker&lt;/li&gt;
&lt;li&gt;Create an ECR repository to store our Docker Image&lt;/li&gt;
&lt;li&gt;Upload the Docker image to the repository&lt;/li&gt;
&lt;li&gt;Create and launch an Elastic Container Cluster (ECR)&lt;/li&gt;
&lt;li&gt;Launch our application as a task within the Elastic Container Cluster&lt;/li&gt;
&lt;li&gt;Expose and open this application on the internet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j9ifaFwd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/schema01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j9ifaFwd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/schema01.png" alt="Workflow Shema"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.docker.com"&gt;Docker&lt;/a&gt; is a technology that helps to package and ship applications easily in production.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/ecs/?whats-new-cards.sort-by=item.additionalFields.postDateTime&amp;amp;whats-new-cards.sort-order=desc&amp;amp;ecs-blogs.sort-by=item.additionalFields.createdDate&amp;amp;ecs-blogs.sort-order=desc"&gt;ECS&lt;/a&gt; stands for Elastic Container Service. It is a fully managed container orchestration service&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/what-is-ecr.html"&gt;ECR&lt;/a&gt; stands for Elastic Container Repository. ECR allows storage of Docker Images on AWS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A cluster is a logical grouping of hardware resources.&lt;/li&gt;
&lt;li&gt;A task is a set of metadata (memory, CPU, port mapping, environmental variables, etc) that describes how a container should be deployed.&lt;/li&gt;
&lt;li&gt;Services are responsible for managing advanced configurations such as load balancing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-nodejs-application-to-deploy" class="anchor"&gt;
  &lt;/a&gt;
  The &lt;a href="https://nodejs.org"&gt;NodeJS&lt;/a&gt; application to deploy
&lt;/h2&gt;

&lt;p&gt;We want to deploy a basic express node application that displays the current time each time the index page is refreshed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-packagejson-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;package.json&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"docker_web_app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Node.js on Docker"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Raphaël MANSUY raphael.mansuy+contact@gmail.com&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"server.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node server.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"express"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.17.1"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-serverjs-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;server.js&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Constants&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HOST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0.0.0.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;// App&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello World - &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Running on http://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://nodejs.org/en/docs/guides/nodejs-docker-webapp/"&gt;https://nodejs.org/en/docs/guides/nodejs-docker-webapp/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#package-the-nodejs-application-with-a-docker-file" class="anchor"&gt;
  &lt;/a&gt;
  Package the node.js application with a Docker file
&lt;/h2&gt;

&lt;p&gt;In the same directory of this application, we can create a &lt;code&gt;Dockerfile&lt;/code&gt; that explains how to build a container with this application:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-dockerfile-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;Dockerfile&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:14&lt;/span&gt;
&lt;span class="c"&gt;# Create app directory&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /usr/src/app&lt;/span&gt;
&lt;span class="c"&gt;# Install app dependencies&lt;/span&gt;
&lt;span class="c"&gt;# A wildcard is used to ensure both package.json AND package-lock.json are copied&lt;/span&gt;
&lt;span class="c"&gt;# where available (npm@5+)&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package*.json ./&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;span class="c"&gt;# If you are building your code for production&lt;/span&gt;
&lt;span class="c"&gt;# RUN npm ci --only=production&lt;/span&gt;

&lt;span class="c"&gt;# Bundle app source&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8080&lt;/span&gt;

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "node", "server.js" ]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;This file defines the following steps:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;start from the node:14 image&lt;/li&gt;
&lt;li&gt;create a directory &lt;code&gt;/usr/src/ap&lt;/code&gt; inside the container&lt;/li&gt;
&lt;li&gt;copy the local file with pattern &lt;code&gt;package*.json&lt;/code&gt; in the container&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;npm install&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;copy all the local files to the container&lt;/li&gt;
&lt;li&gt;expose the port &lt;code&gt;8080&lt;/code&gt; inside the container&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;node&lt;/code&gt; with the file &lt;code&gt;server.js&lt;/code&gt; when the container starts&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#building-the-image" class="anchor"&gt;
  &lt;/a&gt;
  Building the image
&lt;/h2&gt;

&lt;p&gt;Run the following command to build an image with the tag &lt;code&gt;node-web-app&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker build &lt;span class="nt"&gt;-t&lt;/span&gt; node-web-app &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#running-the-image" class="anchor"&gt;
  &lt;/a&gt;
  Running the image
&lt;/h2&gt;

&lt;p&gt;Run the following command to start the application in detached mode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-p&lt;/span&gt; 80:8080 &lt;span class="nt"&gt;-d&lt;/span&gt; node-web-app
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The container is now running and the 8080 port within the container is exposed as the 80 port on your local machine.&lt;/p&gt;

&lt;p&gt;We can now test the application with the &lt;a href="https://curl.se/"&gt;CURL command&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl http://localhost:80
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Hello World - 2021-02-11T05:06:12.739Z
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We are now ready to deploy this container to the cloud.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-to-amazonecr" class="anchor"&gt;
  &lt;/a&gt;
  Connect to AmazonECR
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/cli/"&gt;&lt;code&gt;aws cli&lt;/code&gt;&lt;/a&gt; must be installed&lt;/li&gt;
&lt;li&gt;your &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html"&gt;aws profile&lt;/a&gt; must be configured and have ECS admin rights enabled&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws ecr get-login-password &lt;span class="nt"&gt;--region&lt;/span&gt; us-west-2 | docker login
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you have access, you should have this displayed on the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Authenticating with existing credentials...
Login Succeeded

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-your-amazonecr-in-the-aws-console" class="anchor"&gt;
  &lt;/a&gt;
  Create your AmazonECR in the AWS Console
&lt;/h2&gt;

&lt;p&gt;Connect to the AWS Console and to the ECS Administration screen to create a new repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R6_sjJun--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R6_sjJun--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr1.png" alt="ECR Step1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Create Repository&lt;/strong&gt; and choose &lt;code&gt;testrepository&lt;/code&gt; as a name for your repository:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nl5DghnB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nl5DghnB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr2.png" alt="ECR Step2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ECR repository has now been created:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xgtT0h6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xgtT0h6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr3.png" alt="ECR Step3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#upload-the-image-on-aws-ecr" class="anchor"&gt;
  &lt;/a&gt;
  Upload the image on AWS ECR
&lt;/h2&gt;

&lt;p&gt;Click now on the &lt;code&gt;push commands button&lt;/code&gt; on the repository screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tln0ogAa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tln0ogAa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr4.png" alt="ECR Step4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy and execute each command on your machine:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iE3Jc7Dy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iE3Jc7Dy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr5.png" alt="ECR Step5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;connect&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws ecr get-login-password &lt;span class="nt"&gt;--region&lt;/span&gt; us-west-2 | docker login &lt;span class="nt"&gt;--username&lt;/span&gt; AWS &lt;span class="nt"&gt;--password-stdin&lt;/span&gt; 3680199100XXX.dkr.ecr.us-west-2.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;build&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker build &lt;span class="nt"&gt;-t&lt;/span&gt; testrepository &lt;span class="nb"&gt;.&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;build&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker tag testrepository:latest 3680199100XXX.dkr.ecr.us-west-2.amazonaws.com/testrepository:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;push to ECR&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker push 3680199100XXX.dkr.ecr.us-west-2.amazonaws.com/testrepository:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The image is now published and available on ECR ready to be deployed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IgZ0tQyr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IgZ0tQyr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr6.png" alt="ECR Step6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you look at AmazonECR, repositories we can see the newly created image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6kFjHiOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr6_1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6kFjHiOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr6_1.png" alt="ECR Step6-1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NsiuM5nw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr6_2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NsiuM5nw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr6_2.png" alt="ECR Step6-2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy the image URI: we need to keep this to create a task definition for the following steps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;368019910004.dkr.ecr.us-west-2.amazonaws.com/testrepository:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-an-ecs-cluster" class="anchor"&gt;
  &lt;/a&gt;
  Create an ECS Cluster
&lt;/h2&gt;

&lt;p&gt;Go to the ECS home page and click on the &lt;code&gt;create cluster&lt;/code&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NclFE-k_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NclFE-k_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr7.png" alt="ECR Step7"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose &lt;code&gt;EC2 Linux + Networking&lt;/code&gt; and then click next:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FtcI5WSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FtcI5WSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr8.png" alt="ECR Step8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then enter the following information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;name of the cluster: &lt;code&gt;ecs01&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;EC2 instance type: &lt;code&gt;t3-micro&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Number of instances: &lt;code&gt;1&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OGk4IPxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OGk4IPxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr9.png" alt="ECR Step9"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then choose:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Default VPC&lt;/li&gt;
&lt;li&gt;Auto assign IP: &lt;code&gt;Enabled&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Security group: &lt;code&gt;default&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Choose one of the subnet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fPEOu826--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fPEOu826--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr10.png" alt="ECR Step10"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And then next press &lt;code&gt;Enter&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-new-task-definition" class="anchor"&gt;
  &lt;/a&gt;
  Create a new Task definition
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A task is a set of metadata (memory, CPU, port mapping, environmental variables, etc) that describes how a container should be deployed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Click on new &lt;code&gt;Task definition&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A6qglrsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A6qglrsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr11.png" alt="ECR Step11"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose &lt;code&gt;EC2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DcmyU_8g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DcmyU_8g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr12.png" alt="ECR Step12"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then &lt;code&gt;next&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Choose &lt;code&gt;NodeWebAppTask&lt;/code&gt; for the name of the task definition.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KShWCyht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr13.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KShWCyht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr13.png" alt="ECR Step13"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter &lt;code&gt;128&lt;/code&gt;for memory size.&lt;/p&gt;

&lt;p&gt;Click Add Container:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hPaYELPC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hPaYELPC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr14.png" alt="ECR Step14"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add the name of the container: &lt;code&gt;NodeWebApp&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Set the image URI that we have saved to add the end of the &lt;code&gt;add image&lt;/code&gt; step&lt;/li&gt;
&lt;li&gt;Set the port mappings 80:8080&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eKZDyrcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eKZDyrcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr15.png" alt="ECR Step15"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;code&gt;create&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AJnfvHsW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr16.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AJnfvHsW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr16.png" alt="ECR Step16"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then go to &lt;code&gt;Run Task&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1M-l0ZVS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr17.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1M-l0ZVS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr17.png" alt="ECR Step17"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--24hei4db--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--24hei4db--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr18.png" alt="ECR Step18"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The task is now running:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cY81Vaa3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr19.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cY81Vaa3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr19.png" alt="ECR Step19"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we click on the container instance:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gzYTTX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr20.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gzYTTX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr20.png" alt="ECR Step20"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can modify the security group associated with the instance to open the port &lt;code&gt;80&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bakrtxj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bakrtxj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr21.png" alt="ECR Step21"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O2dKQnCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr22.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O2dKQnCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr22.png" alt="ECR Step22"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add 80 to the inbound rule for the security group:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qSj_zbM5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr23.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qSj_zbM5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr23.png" alt="ECR Step23"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we try now to open the url: &lt;code&gt;http://ec2-52-38-113-251.us-west-2.compute.amazonaws.com&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---CxH4_eA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---CxH4_eA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr24.png" alt="ECR Step24"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#et-voil%C3%A0" class="anchor"&gt;
  &lt;/a&gt;
  Et voilà
&lt;/h2&gt;

&lt;p&gt;Our cluster and node application is now deployed.&lt;/p&gt;

&lt;p&gt;🎉 🎉 🎉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits" class="anchor"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;The picture was taken in February 2021 on the top of Peak Victoria in Hong Kong.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>node</category>
      <category>aws</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
