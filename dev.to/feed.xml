<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Part 1:  Short introduction to RabbitMQ</title>
      <author>TheDailyTechTalk</author>
      <pubDate>Sun, 12 Sep 2021 08:05:29 +0000</pubDate>
      <link>https://dev.to/thedailytechtalk/part-1-short-introduction-to-rabbitmq-52nl</link>
      <guid>https://dev.to/thedailytechtalk/part-1-short-introduction-to-rabbitmq-52nl</guid>
      <description>&lt;p&gt;If you like what I wrote and want to support me, please follow me on &lt;a href="https://twitter.com/TheDailyTechTa1"&gt;Twitter&lt;/a&gt; to learn more about programming and similar topics. Also check out my blog with more details about this topic &lt;a href="//www.thedailytechtalk.com"&gt;here&lt;/a&gt;❤️❤️&lt;/p&gt;

&lt;p&gt;In this blog post, we are going to cover an overview of what RabbitMQ is and give an example of when you would apply this technology.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-rabbitmq"&gt;
  &lt;/a&gt;
  What is RabbitMQ?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;RabbitMq is an open source message broker software. sometimes called message-oriented middleware, that originally implemented the Advanced Message Queuing Protocol or &amp;gt;AMQp for short, and has since been extended with a plug-in architecture to support Streaming Text Oriented Messaging Protocol (STOMP), Message Queuing Telemetry &amp;gt;Transport (MQTT), and other protocols.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The simplest way of putting it would be RabbitMQ is used to distribute long-running task that doesn’t require immediate user feedback into a separate process.&lt;/p&gt;

&lt;p&gt;Now since we have a good understanding of the definition let’s dive deep into the components of RabbitMq, it’s topology and how we can use it.&lt;/p&gt;

&lt;p&gt;RabbitMq has 5 different exchanges:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Direct exchange&lt;/li&gt;
&lt;li&gt;Fanout exchange&lt;/li&gt;
&lt;li&gt;Header exchange&lt;/li&gt;
&lt;li&gt;Dead Letter exchange&lt;/li&gt;
&lt;li&gt;Topic exchange&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#basic-components-of-rabbitmq"&gt;
  &lt;/a&gt;
  Basic components of RabbitMq
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#exchanges"&gt;
  &lt;/a&gt;
  Exchanges
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Exchange&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Direct&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Direct exchange&lt;/strong&gt; delivers messages to queues based on a message routing key.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Fanout&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Fanout exchange&lt;/strong&gt; routes messages to all of the queues that are bound to it and the routing key is ignored.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Header&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Headers exchange&lt;/strong&gt; routes messages based on arguments containing headers and optional values. Headers exchanges are very similar to topic exchanges, but route messages based on header values instead of routing keys.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Dead Letter Exchange&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Provides the functionality to capture messages that are not deliverable.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Topic&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Topic exchanges&lt;/strong&gt; route messages to queues based on wildcard matches between the routing key and the routing pattern, which is specified by the queue binding. Messages are routed to one or many queues based on a matching between a message routing key and this pattern.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Exchange&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Binding&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Binding&lt;/strong&gt; is a “link” that you set up to bind a queue to an exchange.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Routing key&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Routing key&lt;/strong&gt; The routing key is a message attribute. The exchange might look at this key when deciding how to route the message to queues (depending on exchange type).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Producers&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Job of the &lt;strong&gt;producer&lt;/strong&gt; is to send a new message to the exchange.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Message&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Message&lt;/strong&gt; represents value you want the consumer to recieve and process.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Queue&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Queues&lt;/strong&gt; are ordered collections of messages.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Exchange&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Exchange&lt;/strong&gt; routes the message to the right queue.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Consumers&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Consumers&lt;/strong&gt; is a client that receives messages.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#direct-exchange"&gt;
  &lt;/a&gt;
  Direct exchange
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZeGMYr_h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hh2s0px8uwq6bphimuvc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZeGMYr_h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hh2s0px8uwq6bphimuvc.jpg" alt="Direct exchange topology"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A direct exchange delivers messages to queues based on a message routing key. The routing key is a message attribute added to the message header by the producer. Think of the routing key as an "address" that the exchange is using to decide how to route the message. &lt;strong&gt;A message goes to the queue(s) with the binding key that exactly matches the routing key of the message.&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fanout-exchange"&gt;
  &lt;/a&gt;
  Fanout exchange
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--85D1QVrh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikr1ku35qsvejf1b0d3f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--85D1QVrh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikr1ku35qsvejf1b0d3f.png" alt="Fanout exchange topology"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A fan-out topology is when the producer sends a message to the exchange and the exchanges ignore the routing key and just sends the task directly to &lt;strong&gt;all&lt;/strong&gt; of the queues that are available. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#topic-exchange"&gt;
  &lt;/a&gt;
  Topic exchange
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KQmYzAca--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qsy29vit1gewdry6xcu1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KQmYzAca--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qsy29vit1gewdry6xcu1.png" alt="Topic exchange topology"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The logic behind the topic exchange is similar to a direct one - a message sent with a particular routing key will be delivered to all the queues that are bound with a matching binding key. There are two important special cases for binding keys:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;*&lt;/strong&gt;  can substitute for exactly one word.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;#&lt;/strong&gt;  can substitute for zero or more words.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#dead-letter-exchange"&gt;
  &lt;/a&gt;
  Dead Letter exchange
&lt;/h2&gt;

&lt;p&gt;There are three identified situations where a message becomes undeliverable after reaching RabbitMQ:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A message is negatively acknowledged by the consumer&lt;/li&gt;
&lt;li&gt;The TTL of a message expires&lt;/li&gt;
&lt;li&gt;The queue reaches capacity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, the broker drops these messages. Publishing is successful, however, the RabbitMQ consumer never handles or has a change to handle the message successfully. &lt;/p&gt;

&lt;p&gt;Queues attached to a dead letter exchange collect dropped messages, with the next steps determined by developer. In other words - it's up to you to decide how to handle messages in the dead letter queue. When implemented correctly, information is almost never lost. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#header-exchange"&gt;
  &lt;/a&gt;
  Header exchange
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KlipTnAO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ddpjhah35t7vpxd1b6py.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KlipTnAO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ddpjhah35t7vpxd1b6py.png" alt="Header exchange topology"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Headers exchange is an exchange which route messages to queues based on message header values instead of routing key. Producer adds some values in a form of key-value pair in message header and sends it to headers exchange. After receiving a message, exchange try to match all or any (based on the value of “x-match”) header value with the binding value of all the queues bound to it.&lt;/p&gt;

&lt;p&gt;If you like what I write and want to support me, please follow me on &lt;a href="https://twitter.com/TheDailyTechTa1"&gt;Twitter&lt;/a&gt; to learn more about programming and similar topics ❤️❤️&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The Dark Side of Blogging</title>
      <author>Eevis (she/her)</author>
      <pubDate>Sun, 12 Sep 2021 08:04:11 +0000</pubDate>
      <link>https://dev.to/eevajonnapanula/the-dark-side-of-blogging-1kaj</link>
      <guid>https://dev.to/eevajonnapanula/the-dark-side-of-blogging-1kaj</guid>
      <description>&lt;p&gt;Lately, I've seen multiple excellent posts about why developers should blog. They list very good reasons, and I wholeheartedly agree with them. Blogging is good for many things, it's fun, and you learn a lot during the process.&lt;/p&gt;

&lt;p&gt;However, there are downsides to blogging as well, especially if you write about controversial topics. This blog post will discuss some of these downsides, tell my own experiences, and share tips on conquering those not-so-great things. I'm writing the tips for myself as advice I would have needed to hear, so they might not all apply to you, but I hope you'll get at least something out of this post!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-background"&gt;
  &lt;/a&gt;
  Some Background
&lt;/h2&gt;

&lt;p&gt;I started actively blogging about a year ago. My motivator was, at first, to write blog posts 16 weeks in a row to get the 16-weeks badge from Dev. I earned the badge, and if you're interested, I wrote a blog post about what I learned from that journey:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/eevajonnapanula" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FpXj8uGX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--CEbP3D7X--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/201004/e005d101-0ca8-4346-86eb-91bf162b30c4.png" alt="eevajonnapanula"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/eevajonnapanula/checkpoint-16-weeks-of-blogging-2ofj" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Checkpoint: 16 Weeks of Blogging &lt;/h2&gt;
      &lt;h3&gt;Eevis (she/her) ・ Feb 21 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#learning&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#womenintech&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Blogging is something I like a lot. It has given me a way to construct my thoughts through writing and learn in the process. I already have a good archive of articles I've written. It hasn't been once or twice that I've had the opportunity to refer to one of my blog posts in a conversation.&lt;/p&gt;

&lt;p&gt;However, as much I like this, there have been downsides as well. And during the past year, I've been struggling with stuff - as I would imagine most of us have because of Covid and all the isolation it causes. I'm also recovering from a brain injury, which makes me prone to fatigue. So these things have significantly slowed my speed of writing, especially in 2021.&lt;/p&gt;

&lt;p&gt;So, let's have a look at the downsides and some advice!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-quality-content-takes-time"&gt;
  &lt;/a&gt;
  Writing Quality Content Takes Time
&lt;/h2&gt;

&lt;p&gt;If you want to write some quality content, it takes time. Suppose you're creating a tutorial of some sort, building the end result, testing it, and writing the blog post. It can take a long time from the start to publishing it.&lt;/p&gt;

&lt;p&gt;In Dev, I've come across multiple posts that are basically just (short) lists of links. There is time and place for those lists, but at least I like to read longer posts with some actual content, and from the discussions I've seen in Dev, I'm not the only one. And writing longer posts takes more time.&lt;/p&gt;

&lt;p&gt;Editing is another part of the writing process that requires time. Of course, it is possible to just write and then publish. But parts of writing &lt;em&gt;quality&lt;/em&gt; content are editing, proofreading, and all those moments when you might need to delete half of your blog post and start over.&lt;/p&gt;

&lt;p&gt;So, my advice for this would be to &lt;strong&gt;give yourself time&lt;/strong&gt;. In life, all kinds of things can happen. It is okay if you don't write every week, especially if you're writing for yourself and not, for example, as a job. And when you do have time and energy, purposely &lt;strong&gt;book time for writing, editing, and all that&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-pressure"&gt;
  &lt;/a&gt;
  The Pressure
&lt;/h2&gt;

&lt;p&gt;You also might feel pressured to write and publish. For some, this is not an issue, but at least for me, it has been. When I was blogging for 16 weeks, publishing a blog post a week, I often felt pressure in the back of my mind.&lt;/p&gt;

&lt;p&gt;Okay, it was me wanting to keep the streak going, and nobody else was asking me to do anything. Nevertheless, it really stressed me out sometimes. After the 16 weeks passed and I got my Dev-badge, the publishing pace slowed significantly down until, in the summer, I've published maybe a couple of posts. Well, depending on how you define "summer."&lt;/p&gt;

&lt;p&gt;It's also possible that the pressure comes from outside; if you write for a company or a commissioned piece, then it's not just you anymore. There are deadlines, and someone else is depending on you.&lt;/p&gt;

&lt;p&gt;As mentioned, there was no one else pressuring me on this, at least on purpose. I'm the one who makes me feel like I need to write. Sometimes I don't even know why; there is just that nagging feeling that I haven't published anything in ages.&lt;/p&gt;

&lt;p&gt;There is another kind of pressure as well: writing about specific topics. I mean, my blog posts have been mostly about accessibility topics, but there have been some other themes as well. Still, sometimes I feel like I need to "stay in my lane." Now that I think of it, I've actually been told that when writing about equality-related topics. But I think there's richness in being able to explore different themes.&lt;/p&gt;

&lt;p&gt;So what kind of advice would I give to combat the pressure of writing? First of all, &lt;strong&gt;be merciful and compassionate to yourself&lt;/strong&gt;. No one's life is depending on your writing, and it is okay to take your time. And &lt;strong&gt;it is also okay to branch out and write about other topics as well&lt;/strong&gt;. These might feel like a bit obvious pieces of advice, but at least I need to hear them once in a while.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#responses-to-controversial-topics"&gt;
  &lt;/a&gt;
  Responses to Controversial Topics
&lt;/h2&gt;

&lt;p&gt;As I mentioned, I've been mostly writing about accessibility and front-end development. Once in a while, I've thrown in some posts related to controversial topics. Good examples of these are language and being a woman in an industry where women haven't had space for a long time.&lt;/p&gt;

&lt;p&gt;Recently I wrote about why I don't want to be referred to with the phrase "you guys." First, I shared it on LinkedIn, and the response I got was pretty much supportive, with a couple of not-so-supportive comments. I thought, okay, "let's publish this on Dev." I wasn't prepared for the flood of comments it received.&lt;/p&gt;

&lt;p&gt;In the comments, there were some encouraging comments, and then some comments with good critique and conversation. But then the negative comments started coming, and I felt paralyzed. I wanted to answer the ones with encouragement and good commentary, but the negativity just drained me. So I want to apologize to anyone who was waiting for my answer and never got it! I had to draw a line to protect my mental health.&lt;/p&gt;

&lt;p&gt;Some of the negative comments were clear trolls; some of them clearly tried, but it felt like they hadn't read anything more but the title of the blog post. And the mansplaining. Oh, the mansplaining! For those who are offended by the word, I do not mean that all opposing views were mansplaining. As said, some good comments challenged my points, and they definitely don't fall under the term mansplaining. But then again, some comments definitely were mansplaining.&lt;/p&gt;

&lt;p&gt;As said, those comments drained me. I was contemplating removing the whole post from Dev, but in the end, two things kept me from deleting it. First was all the encouraging comments I received in the post, and the second was the support I got from the Dev's team (Thank you again, Michael, for reaching out! It meant a lot!).&lt;/p&gt;

&lt;p&gt;So what I learned from this, and what tips could I give? First, suppose you write about controversial topics and receive a similar reception. In that case, &lt;strong&gt;it is totally okay not to answer the comments&lt;/strong&gt;. You and your health come first. And &lt;strong&gt;it's okay to draw lines and keep them&lt;/strong&gt;. You don't owe anything to anyone. This is especially true for people from a minority, as they tend to get more trolling and negative comments just because of their background.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summing-up-the-tips"&gt;
  &lt;/a&gt;
  Summing Up The Tips
&lt;/h2&gt;

&lt;p&gt;So, to sum up, what I've been discussing, here are the tips from the previous sections:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Give yourself time. &lt;/li&gt;
&lt;li&gt;Book time for the writing process.&lt;/li&gt;
&lt;li&gt;Be merciful to yourself. &lt;/li&gt;
&lt;li&gt;It's okay not to answer all comments.&lt;/li&gt;
&lt;li&gt;Draw lines, and keep them.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/@marcobian?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Marco Bianchetti&lt;/a&gt; on &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>writing</category>
      <category>career</category>
      <category>womenintech</category>
      <category>mentalhealth</category>
    </item>
    <item>
      <title>What did you teach this week? </title>
      <author>Aatmaj</author>
      <pubDate>Sun, 12 Sep 2021 07:56:31 +0000</pubDate>
      <link>https://dev.to/aatmaj/what-did-you-teach-this-week-g1c</link>
      <guid>https://dev.to/aatmaj/what-did-you-teach-this-week-g1c</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-did-you-teach-this-week"&gt;
  &lt;/a&gt;
  What did you teach this week?
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;To teach is to learn twice over.&lt;br&gt;
– Joseph Joubert&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Teaching is the best way to reinforce the concepts learnt. Teaching increases our knowledge as well as that of others. We simultaneously learn from others too! So why not give an helping hand in this give and take of knowledge? Let us all begin a wave of positivity by encouraging everyone to teach!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--saZyZyrJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ghar8u2u60vjcn9tdxu.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--saZyZyrJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ghar8u2u60vjcn9tdxu.gif" alt="teach-teaching"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Whatever you have taught this week, however small, counts as a big help to the entire community!&lt;br&gt;
So please comment below, your teachings in this week!&lt;/p&gt;

</description>
      <category>teachingthisweek</category>
      <category>discuss</category>
      <category>teaching</category>
    </item>
    <item>
      <title>Using WebSockets with React</title>
      <author>Murat Can Yüksel</author>
      <pubDate>Sun, 12 Sep 2021 07:15:20 +0000</pubDate>
      <link>https://dev.to/muratcanyuksel/using-websockets-with-react-50pi</link>
      <guid>https://dev.to/muratcanyuksel/using-websockets-with-react-50pi</guid>
      <description>&lt;p&gt;For my last project, I had to use Websockets to create a website that displays real-time trading data. I didn't know anything about WebSockets, and it took a couple of dreading hours to get to start with it. That's the only problem, actually, to start with it; the rest is pretty clear. This short article hopes to help others save the time it took for me to understand the basics of it.&lt;/p&gt;

&lt;p&gt;Most of the tutorials on the web mention a "require" syntax. You know it. When you want to use a certain tool, component, or image in your component in JS or React, you'd do something like const something = require ("./folder/something"). Now, as I said, most of the tutorials I've found on the web start with this very syntax, that pushes you to start working with WebSockets using the require syntax. This is unnecessary, and maybe even wrong in the present day. I'm not sure about whether it works in any way or not, but I'm certain that the way I use works perfectly as I write this article on 12/09/2021. So, without further ado, let's talk about how we can make use of this protocol.&lt;/p&gt;

&lt;p&gt;This article supposes that you have a working knowledge of Vanilla JS and React.js, you know how to deal with json format, and asynchronous code.&lt;/p&gt;

&lt;p&gt;I initiate my app with vite (with the following command: npm init vite@latest and choose react from the menu), but you can use your own structure, or create-react-app. It doesn't matter really.&lt;/p&gt;

&lt;p&gt;For a more in-depth introduction on WebSocket, visit &lt;a href="https://javascript.info/websocket"&gt;javascript.info&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-well-build"&gt;
  &lt;/a&gt;
  What we'll build?
&lt;/h3&gt;

&lt;p&gt;We're going to build a very simple, one-page React.js application that takes continuous-data from bitstamp.net and displays it on the page. The data will be changing all the time.&lt;/p&gt;

&lt;p&gt;It doesn't really matter which service you're using, as long as it's WebSockets, the rest is plain Javascript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-the-app"&gt;
  &lt;/a&gt;
  Building the app
&lt;/h3&gt;

&lt;p&gt;Let's start with connecting to bitstamp's WebSocket protocol by writing the following code &lt;code&gt;const ws = new WebSocket("wss://ws.bitstamp.net");&lt;/code&gt; Now, using this ws constant, we can subscribe to any channel that's defined on bitstamp's website and get continuous-data from there. You can find any information regarding the channels, properties, and all from &lt;a href="https://www.bitstamp.net/websocket/v2/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's subscribe to a channel. I'll subscribe to oder_book_v2 channel and specify that I want to see btc/usd exchange rates. This call is defined in bitstamp's guide. You can change the channel and the currencies as you wish. Here's is the call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; const apiCall = {
    event: "bts:subscribe",
    data: { channel: "order_book_btcusd" },
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to send this call to the server on open =&amp;gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  ws.onopen = (event) =&amp;gt; {
    ws.send(JSON.stringify(apiCall));
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we want to do something with each data. So, whenever we receive a message from the server, we'll do something. Let's write an async code with try/catch&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
ws.onmessage = function (event) {
const json = JSON.parse(event.data);
console.log(`[message] Data received from server: ${json}`);
try {
if ((json.event = "data")) {

        console.log(json.data);
      }
    } catch (err) {
      // whatever you wish to do with the err
    }

};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we opened the console, we'd see a large amount of data coming from the server. That's it, actually. We got the data, it's coming in a stream, and we can do whatever we want to do with it. It's that easy.&lt;/p&gt;

&lt;p&gt;I want to display the data in a particular manner though. Let me paste the code and I'll explain immediately after:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from "react";

function  App() {
  //give an initial state so that the data won't be undefined at start
  const [bids, setBids] = useState([0]);

  const ws = new WebSocket("wss://ws.bitstamp.net");

  const apiCall = {
    event: "bts:subscribe",
    data: { channel: "order_book_btcusd" },
  };

  ws.onopen = (event) =&amp;gt; {
    ws.send(JSON.stringify(apiCall));
  };

  ws.onmessage = function (event) {
    const json = JSON.parse(event.data);
    try {
      if ((json.event = "data")) {
        setBids(json.data.bids.slice(0, 5));
      }
    } catch (err) {
      console.log(err);
    }
  };
  //map the first 5 bids
  const firstBids = bids.map((item) =&amp;gt; {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt; {item}&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  });

  return &amp;lt;div&amp;gt;{firstBids}&amp;lt;/div&amp;gt;;
}

export default  App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, what's going on here? As you can see, it's a very basic React.js App component. I use useState hook so I import it also with react.&lt;/p&gt;

&lt;p&gt;I define the state and give it an initial value.&lt;/p&gt;

&lt;p&gt;I proceed as indicated before- except, I set the state to json.data.bids (bids being a property of the live order channel and indicated on bitstamp's page) and restrict the amount of data I'll receive to 5, for the sake of convenience.&lt;/p&gt;

&lt;p&gt;I map the data I receive, saved in state (as you know, React asks for a key for each item. I won't be using it here. I usually use uniqid for that, you can check it out yourself.)&lt;/p&gt;

&lt;p&gt;I return the mapped data and voilà! If you did the same, you should see exactly 5 rows of constantly changing data on the screen.&lt;/p&gt;

&lt;p&gt;I hope this article helps someone.&lt;/p&gt;

&lt;p&gt;All the best and keep coding!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>websockets</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Data Structures Interview Problem - Rotate a Matrix by 90 degrees (anticlockwise)</title>
      <author>The Nerdy Dev</author>
      <pubDate>Sun, 12 Sep 2021 07:05:19 +0000</pubDate>
      <link>https://dev.to/thenerdydev/data-structures-interview-problem-rotate-a-matrix-by-90-degrees-anticlockwise-2ekj</link>
      <guid>https://dev.to/thenerdydev/data-structures-interview-problem-rotate-a-matrix-by-90-degrees-anticlockwise-2ekj</guid>
      <description>&lt;p&gt;Hey guys 👋🏻,&lt;/p&gt;

&lt;p&gt;I just released a new video on solving an interview problem : &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rotate a Matrix by 90 degrees (anticlockwise)&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;In this video, we will solve the problem of rotating the matrix by 90 degree in anticlockwise direction. We will first understand the approach that we will be taking for solving this question. So we will be using the Two Pointer Approach for solving this problem. So for this problem, we will first need to compute the transpose of the matrix and then we need to do a reversal of columns using the Two Pointer approach.&lt;br&gt;&lt;br&gt;
Once we are done with the understanding of the approach, we will implement it together. After the implementation, we will do a quick dry run analysis of the code.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5kJ1SWu84-M"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Support my channel:&lt;br&gt;
💜 Join the Discord community 👨‍👩‍👧‍👦: &lt;a href="https://discord.gg/fgbtN2a"&gt;https://discord.gg/fgbtN2a&lt;/a&gt; &lt;/p&gt;




&lt;p&gt;Follow me on:&lt;br&gt;
👉 Twitter: &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt;&lt;br&gt;
👉 Instagram: &lt;a href="https://instagram.com/thenerdydev"&gt;https://instagram.com/thenerdydev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading! 🙏&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Creating a Notion page through a Node express app</title>
      <author>Chris Bongers</author>
      <pubDate>Sun, 12 Sep 2021 07:05:03 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/creating-a-notion-page-through-a-node-express-app-3aa0</link>
      <guid>https://dev.to/dailydevtips1/creating-a-notion-page-through-a-node-express-app-3aa0</guid>
      <description>&lt;p&gt;Now that we have seen how to update a Notion page through our Node express front-end website, I thought it would be cool to see how we can add a new page.&lt;/p&gt;

&lt;p&gt;For this, we will use the following flow of events:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User types name of a movie&lt;/li&gt;
&lt;li&gt;JavaScript handles form submit&lt;/li&gt;
&lt;li&gt;Submits a post request to our Node server&lt;/li&gt;
&lt;li&gt;Node server calls our Notion script&lt;/li&gt;
&lt;li&gt;Notion API executes create function&lt;/li&gt;
&lt;li&gt;We refresh our movies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the complete example will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JOenTwuZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631430284017/_mhhExg-k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JOenTwuZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631430284017/_mhhExg-k.png" alt="Creating a Notion page through a Node express app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-notion-api-post-function"&gt;
  &lt;/a&gt;
  Creating the Notion API post function
&lt;/h2&gt;

&lt;p&gt;Let's start by creating the actual function first. In our case, we'll only focus on creating a page based on one field, the title.&lt;br&gt;
However, we can opt to enhance this later on.&lt;/p&gt;

&lt;p&gt;Open up the &lt;code&gt;modules/notion.js&lt;/code&gt; file and create a new function called &lt;code&gt;createMovie&lt;/code&gt;. This function takes one argument being the title.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;createMovie&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;notion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;database_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;databaseId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is quite the nesting going on, and in this case, it's needed to set the actual title fields value.&lt;br&gt;
As you can see, it takes the parent, in our case, our table id. And the properties, in our case, the &lt;code&gt;Name&lt;/code&gt; field.&lt;/p&gt;

&lt;p&gt;We can now use this function in the following way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;createMovie&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./modules/notion&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-the-middleware-node-post-method"&gt;
  &lt;/a&gt;
  Creating the middleware Node post method
&lt;/h2&gt;

&lt;p&gt;Now let's create a node post route that our front end can use to post actual data.&lt;/p&gt;

&lt;p&gt;Open up your &lt;code&gt;server.js&lt;/code&gt; file and create a new &lt;code&gt;POST&lt;/code&gt; route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Add the createMovie export&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getDatabase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toggleMovie&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createMovie&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./modules/notion&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// New post route&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/movie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;done&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nothing crazy here. It's the implementation as described above.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-new-notion-page-through-our-node-express-front-end"&gt;
  &lt;/a&gt;
  Creating a new Notion page through our node express front end
&lt;/h2&gt;

&lt;p&gt;Now it's time to focus on the front-end. Let's first add a small input header that we can use as our input.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex justify-center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt;
    &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/movie"&lt;/span&gt;
    &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt;
    &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"create-movie"&lt;/span&gt;
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex p-6 m-6 bg-gray-200 rounded-lg shadow-xl"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
      &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
      &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;
      &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"movie-title"&lt;/span&gt;
      &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex-1 p-4 mr-2 border-2 rounded-lg"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Add"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"px-4 text-white bg-green-400 rounded-lg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've created a form element and inside added input and button.&lt;br&gt;
We will hijack the form submit based on the form's ID and get the title value from our input field.&lt;/p&gt;

&lt;p&gt;Now we need to make some changes to our front-end script.&lt;/p&gt;

&lt;p&gt;Let's start by creating a post-movie function that we can use to post to our node server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createMovie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`http://localhost:8000/movie/`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;movieTitleField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function does the basic &lt;code&gt;POST&lt;/code&gt; to our node API.&lt;/p&gt;

&lt;p&gt;Let's also define the two elements we need, being the form and the title field.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;create-movie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;movieTitleField&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;movie-title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next up, we'll need to hijack the form, submit and do our JavaScript posting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;createMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;movieTitleField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;showMovies&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;movieTitleField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We add a new event listener to our form and attach it to the submit event.&lt;br&gt;
Then we use the &lt;code&gt;preventDefault&lt;/code&gt; form the actual form submitting.&lt;br&gt;
Then we call our &lt;code&gt;createMovies&lt;/code&gt; function and pass the value of our title field.&lt;br&gt;
And as a callback, we call the &lt;code&gt;showMovies&lt;/code&gt; function again. This will reload the movies, including our newly added one.&lt;/p&gt;

&lt;p&gt;We can use this to quickly add a new movie and update information on our Notion page.&lt;/p&gt;

&lt;p&gt;I like how easy it is to use the Notion API and how fun it is to build something with it.&lt;/p&gt;

&lt;p&gt;I hope you also enjoyed this article and got some inspiration for building with the Notion API.&lt;/p&gt;

&lt;p&gt;You can find the complete code on &lt;a href="https://github.com/rebelchris/notion-app/tree/post-to-notion"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>database</category>
    </item>
    <item>
      <title>Serverless Technology Choices in Azure</title>
      <author>geetcloud</author>
      <pubDate>Sun, 12 Sep 2021 06:47:19 +0000</pubDate>
      <link>https://dev.to/geetcloud/serverless-technology-choices-in-azure-333d</link>
      <guid>https://dev.to/geetcloud/serverless-technology-choices-in-azure-333d</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Which Azure Serverless Technology is the best choice for your business requirements?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h3&gt;

&lt;p&gt;The objective of this article is to understand the basics and help you to choose the best Azure Serverless Technology for a general set of business requirements.  &lt;/p&gt;

&lt;p&gt;This is assuming the users who reading this article have some basic knowledge on workflow, orchestration, and application programming. If not, I would suggest those to read more on said foundation topics before you jump into this article. :)  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-serverless-computing"&gt;
  &lt;/a&gt;
  What is Serverless Computing?
&lt;/h3&gt;

&lt;p&gt;Serverless computing is a cloud-hosted execution environment with a single or group of servers that runs your code, but abstracts the underlying hosting environment. The main concept is that we are not responsible for the infrastructure or the maintenance of the server. And we don’t have to worry about the outages or increase in demand during peak instances situations like the holidays or for black friday season ;) . The cloud provider takes care of maintenance, scalability, and everything else for you.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You just create an instance of the service and add your code in any desired language. That’s it!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Today we are going to see the two most popular and commonly used Azure Serverless technologies: Azure Functions and Azure Logic Apps.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#azure-functions"&gt;
  &lt;/a&gt;
  Azure Functions
&lt;/h3&gt;

&lt;p&gt;With the Azure Functions service, you can host a single method or function by using a popular programming language in the cloud that runs in response to an event. An example of an event might be an HTTP request, a new message on a queue, or a message on a timer.  &lt;/p&gt;

&lt;p&gt;Functions can be written in many common programming languages, such as C#, Python, JavaScript, Typescript, Java, and PowerShell.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#key-features"&gt;
  &lt;/a&gt;
  Key Features
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;  Scales automatically&lt;/li&gt;
&lt;li&gt;  Charges are applied only when the function is triggered&lt;/li&gt;
&lt;li&gt;  It is the best choice when demands are variable&lt;/li&gt;
&lt;li&gt;  Perform orchestration tasks using extension called Durable functions&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#azure-logic-apps"&gt;
  &lt;/a&gt;
  Azure Logic Apps
&lt;/h3&gt;

&lt;p&gt;Logic Apps is a low-code/no-code development platform hosted as a cloud service. This service helps you automate and orchestrate tasks, business processes, and workflows when you need to integrate apps, data, systems, and services across enterprises or organizations  &lt;/p&gt;

&lt;p&gt;We build an app by linking triggers to actions with connectors.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A  &lt;strong&gt;trigger&lt;/strong&gt;  is an event (such as a timer) that causes an app to execute.  &lt;/p&gt;

&lt;p&gt;An  &lt;strong&gt;action&lt;/strong&gt;  is a task or step that can execute. (Available in different programming languages)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To build enterprise integration solutions with Azure Logic Apps, you can choose from a growing gallery of over 200 connectors. The gallery includes services such as Salesforce, SAP, Oracle DB, and file shares.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#differences"&gt;
  &lt;/a&gt;
  Differences
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://1.bp.blogspot.com/-skwFKbML25A/YSce71oKY7I/AAAAAAAAAKk/H_HMbfwKtGMMGNyOKaWdAMehpMSPa6OXQCLcBGAsYHQ/w640-h480/Green%2Band%2BBlack%2BCorporate%2BComparison%2BChart.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DzAJM9TP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-skwFKbML25A/YSce71oKY7I/AAAAAAAAAKk/H_HMbfwKtGMMGNyOKaWdAMehpMSPa6OXQCLcBGAsYHQ/w640-h480/Green%252Band%252BBlack%252BCorporate%252BComparison%252BChart.png" alt="Difference between Azure Functions and Azure Logic Apps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-use-cases"&gt;
  &lt;/a&gt;
  Example Use Cases
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#when-to-choose-azure-functions"&gt;
  &lt;/a&gt;
  When to choose Azure Functions
&lt;/h4&gt;

&lt;p&gt;Code-based, you write and test the code. Will be able to debug without involving or provisions test resources in the cloud.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  If you have your code / logic / automated tasks already ready in your desired language, it is easy to just put the code in Azure Functions than to create it from scratch using Azure logic apps&lt;/li&gt;
&lt;li&gt;  If you need to perform some complex logic or specialized data parting, Azure Functions is the best since you have full control of the code and visualizing performing complex logic workflows is tough in Azure Logic Apps&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#when-to-choose-azure-logic-apps"&gt;
  &lt;/a&gt;
  When to choose Azure Logic Apps
&lt;/h4&gt;

&lt;p&gt;GUI based. Preferable if we don’t want to get involved with developer resources and instead want to use GUI. Best suited for integration since lots of connectors are available out of the box.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  If we need to perform more orchestration tasks from different APIs, go for Azure Logic Apps.&lt;/li&gt;
&lt;li&gt;  If we need a visual workflow, Azure Logic Apps is the best choice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Combination of both is also a best choice for large scale enterprise cloud environments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In this article, we have just covered the high level overview and the differences between Azure Functions and Azure Logic Apps. Please go through the official Microsoft documentation cited in Reference section for further learning.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/learn/modules/serverless-fundamentals/"&gt;https://docs.microsoft.com/en-us/learn/modules/serverless-fundamentals/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-compare-logic-apps-ms-flow-webjobs"&gt;https://docs.microsoft.com/en-us/azure/azure-functions/functions-compare-logic-apps-ms-flow-webjobs&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading-this-post"&gt;
  &lt;/a&gt;
  Thanks for reading this post!
&lt;/h3&gt;

&lt;p&gt;I hope this article is informative and helpful in some way. If it is, please like and share this article. Follow me on &lt;a href="https://twitter.com/geetcloud"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/sangeetha-karthik/"&gt;LinkedIn&lt;/a&gt; for more related tips and posts.&lt;/p&gt;

&lt;p&gt;Happy learning! &lt;/p&gt;

</description>
      <category>azure</category>
      <category>serverless</category>
      <category>cloud</category>
    </item>
    <item>
      <title>How to send request to join a organization in github</title>
      <author>Darsh</author>
      <pubDate>Sun, 12 Sep 2021 06:40:04 +0000</pubDate>
      <link>https://dev.to/programmerno24/how-to-send-request-to-join-a-organization-in-github-1if</link>
      <guid>https://dev.to/programmerno24/how-to-send-request-to-join-a-organization-in-github-1if</guid>
      <description>&lt;p&gt;I found an organization in github which I want to join but I dont know how to send request to the organization to let me join the organization.&lt;/p&gt;

&lt;p&gt;If you know and you reply to me then it would be a greate help.&lt;/p&gt;

&lt;p&gt;Thanks for reading my post. Please press the like and the unicorn button while going.&lt;br&gt;
Thank you.&lt;br&gt;
Darsh kulthia.&lt;/p&gt;

</description>
      <category>github</category>
      <category>request</category>
      <category>organization</category>
    </item>
    <item>
      <title>1 thing that got me software developer job</title>
      <author>Thu Htet Tun</author>
      <pubDate>Sun, 12 Sep 2021 06:19:41 +0000</pubDate>
      <link>https://dev.to/thuhtetdev/1-thing-that-got-me-software-developer-job-1epf</link>
      <guid>https://dev.to/thuhtetdev/1-thing-that-got-me-software-developer-job-1epf</guid>
      <description>&lt;p&gt;Hello dev!&lt;/p&gt;

&lt;p&gt;There is one important thing that got me first software developer job.&lt;/p&gt;

&lt;p&gt;I'm not going to explain with long letters. But will tell you the key point. It is not hard work or dedication or any others.&lt;/p&gt;

&lt;p&gt;For me, it was that I coded programs for free. &lt;/p&gt;

&lt;p&gt;I learned first. I applied it with small projects.&lt;br&gt;
Then, I asked for real-world projects from my friends' family businesses and others sources.&lt;/p&gt;

&lt;p&gt;Actually, I did not get paid from it. &lt;br&gt;
I did not ask for it also.&lt;br&gt;
But I got a lot of experience from building that projects.&lt;br&gt;
Also, I'm more confident to apply software developer job application.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
The key point to get a job for me is doing real-world projects with FREE. &lt;br&gt;
&lt;br&gt;&lt;br&gt;
In this way, I got client networks, developer networks, experiences, and jobs. &lt;/p&gt;

&lt;p&gt;I hope this will help you to see my way to get a job. &lt;/p&gt;

&lt;p&gt;Pls Share us How you get your first job in this comment section.&lt;/p&gt;

&lt;p&gt;Thanks for your time.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>career</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Concat() Array Method in JavaScript 🚀 </title>
      <author>Shubham Jadhav</author>
      <pubDate>Sun, 12 Sep 2021 05:37:48 +0000</pubDate>
      <link>https://dev.to/dev_shubham/concat-array-method-in-javascript-5b58</link>
      <guid>https://dev.to/dev_shubham/concat-array-method-in-javascript-5b58</guid>
      <description>&lt;p&gt;Can we merge two arrays in one array in JavaScript??? &lt;br&gt;
  Yes, It's definitely possible by concat() array method. &lt;br&gt;
  So, Let's start to learn what is concat() array method and how it works. &lt;/p&gt;

&lt;p&gt;• What is Concat() Array &lt;br&gt;
  method ?&lt;br&gt;
=&amp;gt; In this method two or more &lt;br&gt;
   than two arrays merge into &lt;br&gt;
   a single array.&lt;br&gt;
   The new array serialized &lt;br&gt;
   according to original &lt;br&gt;
   arrays.&lt;/p&gt;

&lt;p&gt;• Syntax of Concat() method&lt;br&gt;
  array1.concat(array2)&lt;/p&gt;

&lt;p&gt;• Example &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xSD6FZL5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eb4esdvcjw6md5omh6hb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xSD6FZL5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eb4esdvcjw6md5omh6hb.jpg" alt="example 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;• Explanation :-&lt;br&gt;
  (1) In the above example I &lt;br&gt;
      simply created two &lt;br&gt;
      arrays and name of &lt;br&gt;
      arrays are 'arr1' and &lt;br&gt;
     'arr2' respectively.&lt;/p&gt;

&lt;p&gt;(2) Then I stored some &lt;br&gt;
     values in that arrays and &lt;br&gt;
     values are [1,2] and &lt;br&gt;
     [3,4].&lt;/p&gt;

&lt;p&gt;(3) Now I was used cancat() &lt;br&gt;
     method to merge both &lt;br&gt;
     arrays. &lt;/p&gt;

&lt;p&gt;(4) According to above &lt;br&gt;
    example I wrote arr1 first &lt;br&gt;
    and then used concat() &lt;br&gt;
    method and pass as &lt;br&gt;
    parameter second array and &lt;br&gt;
    the output is [1,2,3,4].  &lt;/p&gt;

&lt;p&gt;(5) Because doing this it's &lt;br&gt;
    return arr1 first then &lt;br&gt;
    arr2. If I wrote arr2 &lt;br&gt;
    first then concat method &lt;br&gt;
    used the output is &lt;br&gt;
    different. See below code&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;![example 2](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otzxwn7tdcfjn8c7eeyz.jpg)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;(6) Now, you can see the &lt;br&gt;
    output different, output &lt;br&gt;
    is [3,4,1,2].&lt;/p&gt;

&lt;p&gt;• The concat() methods also take individual as arguments like below. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lkPBff_M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7f2x1xc6b213lah0dnp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lkPBff_M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7f2x1xc6b213lah0dnp.jpg" alt="example 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy coding.... &lt;br&gt;
👉 Stay tuned with us for more &lt;br&gt;
  JavaScript topics.&lt;br&gt;
🙏 Thanks for reading... &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Execute Async Server Function from Client Side</title>
      <author>Xen</author>
      <pubDate>Sun, 12 Sep 2021 05:22:53 +0000</pubDate>
      <link>https://dev.to/xencodes/execute-server-function-from-client-side-3m2l</link>
      <guid>https://dev.to/xencodes/execute-server-function-from-client-side-3m2l</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Execute server's asynchronous functions from client-side&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Often it happens while writing web application that you need to make HTTP requests to fetch, create, update or delete data from database.&lt;/p&gt;

&lt;p&gt;With RealSync, you wouldn't have to remember all those HTTP endpoints, and perform actions as if you're executing server functions from client-side.&lt;/p&gt;

&lt;p&gt;RealSync uses web socket to make contact with the server and execute asynchronous function and returns promise which you can await in the client side. Here is an example of a server code, you can connect it with &lt;code&gt;Express&lt;/code&gt; or &lt;code&gt;Koa&lt;/code&gt;, if you want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RealSync&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../packages/server/lib&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;realsync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RealSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;realsync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;

    &lt;span class="c1"&gt;// Sleep 2 seconds, then return the answer [async]&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sum = &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;

&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;8080&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will register a service “add” in realsync and accept two parameters, &lt;strong&gt;a&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And here is a client demonstration using React:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RealSync&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@realsync/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;realsync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RealSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:8080&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;realsync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Sum&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I would love to have feedback forum you guys. I’ve more to add in this library.&lt;/p&gt;

&lt;p&gt;GitHub: &lt;a href="https://GitHub.com/xencodes/realsync"&gt;https://GitHub.com/xencodes/realsync&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>socket</category>
      <category>express</category>
      <category>node</category>
    </item>
    <item>
      <title>Understanding React Hooks - Part Three</title>
      <author>Srivastava Bodakunti</author>
      <pubDate>Sun, 12 Sep 2021 05:11:56 +0000</pubDate>
      <link>https://dev.to/srivastava295/understanding-react-hooks-part-three-2n96</link>
      <guid>https://dev.to/srivastava295/understanding-react-hooks-part-three-2n96</guid>
      <description>&lt;p&gt;The blog post I have written is at &lt;a href="https://velocitybytes.com/understanding-react-hooks-part-three"&gt;https://velocitybytes.com/understanding-react-hooks-part-three&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
    </item>
  </channel>
</rss>
