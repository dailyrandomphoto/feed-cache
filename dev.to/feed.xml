<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Introduction to mutation testing with PiTest</title>
      <author>Cédric Teyton</author>
      <pubDate>Fri, 26 Nov 2021 10:44:51 +0000</pubDate>
      <link>https://dev.to/promyze/introduction-to-mutation-testing-with-pitest-3lgo</link>
      <guid>https://dev.to/promyze/introduction-to-mutation-testing-with-pitest-3lgo</guid>
      <description>&lt;h2&gt;
  &lt;a href="#mutation-testing"&gt;
  &lt;/a&gt;
  Mutation testing❓
&lt;/h2&gt;

&lt;p&gt;Write tests for your software has many advantages: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It ensures your business requirements are satisfied&lt;/li&gt;
&lt;li&gt;It's a security net against regressions&lt;/li&gt;
&lt;li&gt;If you practice &lt;a href="https://dev.to/promyze/setup-mocha-in-watch-mode-for-tdd-in-node-js-1mah"&gt;TDD&lt;/a&gt;, it guides your implementation thanks to an emerging design. That's what we promote at &lt;a href="https://promyze.com?utm_source=DevTo"&gt;Promyze&lt;/a&gt; since it helped us a lot.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we said that, the most challenging part of the works comes in: writing &lt;strong&gt;valuable and relevant&lt;/strong&gt; tests. &lt;/p&gt;

&lt;p&gt;It's one thing to say, "&lt;em&gt;We have a bunch of unit tests and a high code coverage rate&lt;/em&gt;." But it's another thing to have relevant tests that do not run only to increase this metric beloved by non-technical people 😉&lt;/p&gt;

&lt;p&gt;Mutation testing is a discipline that aims at improving the quality of our tests suite. Let's see the basic principles and a concrete example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-concept-of-code-mutation"&gt;
  &lt;/a&gt;
  The concept of code mutation
&lt;/h2&gt;

&lt;p&gt;Using a mutation testing framework will run many executions of your test suite with some &lt;strong&gt;modifications&lt;/strong&gt; to your business code. These modifications are called &lt;strong&gt;mutants&lt;/strong&gt; and can have the following form: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An arithmetic (+, -, *, /, %) operator is changed to another value&lt;/li&gt;
&lt;li&gt;Some statements are removed.&lt;/li&gt;
&lt;li&gt;Boolean literals are reversed&lt;/li&gt;
&lt;li&gt;Assignment expressions are changed (+= to -=) for instance&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The idea is straightforward: if your tests &lt;strong&gt;survive&lt;/strong&gt; mutants' introduction, they're not robust enough. If your tests failed, the mutants have been killed ✅ !&lt;/p&gt;

&lt;p&gt;A mutation testing framework will identify for you which mutants survived, questioning the relevance of these lines and also the scope of your tests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-example-with-pitest-in-java"&gt;
  &lt;/a&gt;
  An example with PiTest in Java
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://pitest.org"&gt;PIT&lt;/a&gt; is a mutation testing framework for Java. This is how you can include it your pom.xml file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
        ...
        &lt;span class="nt"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.pitest&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;pitest-maven&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.7.2&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'll take a straightforward example here to illustrate the concept.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.promyze.shop&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.ArrayList&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.List&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Basket&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;addProduct&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;products&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;computePrice&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;products&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mapToInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;Product:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;getPrice&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;computePriceWithDiscount&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;discount&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;computePrice&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;discount&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;discount&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this test suite was written with JUnit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.promyze.shop.test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.promyze.shop.Basket&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.promyze.shop.Product&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Test&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;junit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;framework&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BasketTest&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Test&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testProductPrice&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Basket&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Basket&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addProduct&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"orange"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addProduct&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"apple"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

        &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;computePrice&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Test&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testBasketPriceWithDiscount&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Basket&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Basket&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addProduct&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"orange"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addProduct&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"apple"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

        &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;computePriceWithDiscount&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Test&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testBasketPriceWithDiscountWhenDiscountIsHigherThanBasketPrice&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
       &lt;span class="nc"&gt;Basket&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Basket&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
       &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addProduct&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"apple"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

       &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;computePriceWithDiscount&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's now run PIT with the following maven command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mvn &lt;span class="nb"&gt;test &lt;/span&gt;pitest:mutationCoverage pitest:report &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; pom.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;⏲️ One important thing to know is that mutation testing may require a &lt;strong&gt;long execution time&lt;/strong&gt; depending on the size of your codebase. You won't get an instant result, just be aware of that. &lt;/p&gt;

&lt;p&gt;An HTML report is now available in the target/pit-reports folder, and you can navigate through the result. The report indicates which mutants were introduced and whether they were killed or survived (hover the Markers on the left side).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JHK-83vL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8pa3gnldck4svfi2az3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JHK-83vL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8pa3gnldck4svfi2az3.png" alt="PiTest" width="880" height="187"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, it probably changed "&amp;lt;" to "≤, " and the test still passed. I could indeed reinforce my test suite with another test or change that condition! &lt;/p&gt;

&lt;p&gt;That's all for the intro; I think you got the concept now 🤗 !&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-i-kill-all-mutants"&gt;
  &lt;/a&gt;
  Should I kill all mutants?
&lt;/h2&gt;

&lt;p&gt;There's no silver bullet here since the fact that mutants survived may not imply an issue with your tests. You should review each mutant to figure out if an action is necessary. &lt;/p&gt;

&lt;p&gt;To go further, you'll find a curated list of open-source mutation testing frameworks on this &lt;a href="https://awesomeopensource.com/projects/mutation-testing"&gt;link&lt;/a&gt;. You can also discover another post we made on &lt;a href="https://dev.to/promyze/improve-our-code-with-the-property-based-testing-and-fast-check-10p1"&gt;Property-based Testing&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>codequality</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Understanding The Building Blocks Of Android</title>
      <author>Surhid Amatya</author>
      <pubDate>Fri, 26 Nov 2021 10:39:35 +0000</pubDate>
      <link>https://dev.to/surhidamatya/understanding-the-building-blocks-of-android-17ig</link>
      <guid>https://dev.to/surhidamatya/understanding-the-building-blocks-of-android-17ig</guid>
      <description>&lt;p&gt;App components are the essential building blocks of an Android app. Each component is an entry point through which the system or a user can enter app. Some components depend on others.In this post we are going to discuss about the four fundamental building blocks from which all the android applications are built. These building blocks are implemented as Java classes.&lt;/p&gt;

&lt;p&gt;There are four major building blocks of Android, let's understand them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#activity"&gt;
  &lt;/a&gt;
  Activity
&lt;/h3&gt;

&lt;p&gt;Anything that is visible to the user has an activity. Basically, activity is defined to present the graphical user interface to the user and capture user's interaction through that interface. An activity should support a single focused thing that the user can do. eg: any UI visible in the app.Basically, it is an entry point for interacting with user.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#services"&gt;
  &lt;/a&gt;
  Services
&lt;/h3&gt;

&lt;p&gt;Unlike activities, services don't require any user interface and runs in the background thread. We basically place long running operations in services. They provide a way for different processes to request operations and share data. eg: music application, while we play a song, it is still playing in the background even though the app is closed.We can say, Service is an entry point for keeping an application to run in background.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#broadcast-receiver"&gt;
  &lt;/a&gt;
  Broadcast Receiver
&lt;/h3&gt;

&lt;p&gt;Broadcast receivers are the fundamental components that listens to and responds to events. Broadcast receiver acts as a subscriber that listens to its required Intents and respond to it. eg: messaging app which shows a notification when a message is received.A broadcast receiver is a component/entry point that enables the system to deliver events to the app outside of a regular user flow, allowing the app to respond to system-wide broadcast announcements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#content-provider"&gt;
  &lt;/a&gt;
  Content Provider
&lt;/h3&gt;

&lt;p&gt;If an application manages data and needs to expose that data to other applications, we use Content Providers. Content Providers allows applications to store and share data. If an application needs to access data from another application this is done through Content Provider of that application. The access might be read or write or both operations. Similarly, content provider is used to provide data to the same containing application as well. Thus, we can say content provider is a database style component that handles interprocess communication between applications. eg: messaging app which can explore our contacts through contacts application.&lt;br&gt;
You must declare all app components using the following elements:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;activity&amp;gt; elements for activities.&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;&amp;lt;service&amp;gt; elements for services.&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;&amp;lt;receiver&amp;gt; elements for broadcast receivers.&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;&amp;lt;provider&amp;gt; elements for content providers.&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Activities, services, and content providers that you include in your source but do not declare in the manifest are not visible to the system and, consequently, can never run. However, broadcast receivers can be either declared in the manifest or created dynamically in code as BroadcastReceiver objects and registered with the system by&lt;br&gt;
&lt;em&gt;callingregisterReceiver().&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference:
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://developer.android.com/guide/components/fundamentals"&gt;https://developer.android.com/guide/components/fundamentals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/SiddheshPalkar1/building-blocks-of-android"&gt;https://www.slideshare.net/SiddheshPalkar1/building-blocks-of-android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/stacklearning/basic-building-blocks-of-android-8a346570033"&gt;https://medium.com/stacklearning/basic-building-blocks-of-android-8a346570033&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://acadgild.com/blog/android-components-basic-building-block"&gt;https://acadgild.com/blog/android-components-basic-building-block&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>android</category>
      <category>mobiledevelopment</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Day 71-72/100 HTTP and Forms</title>
      <author>Rio Cantre</author>
      <pubDate>Fri, 26 Nov 2021 10:29:30 +0000</pubDate>
      <link>https://dev.to/riocantre/day-71-72100-http-and-forms-2bjj</link>
      <guid>https://dev.to/riocantre/day-71-72100-http-and-forms-2bjj</guid>
      <description>&lt;p&gt;"Communication must be stateless in nature [...] such that each request from client to server must contain all of the information necessary to understand the request, and cannot take advantage of any stored context on the server."&lt;/p&gt;

&lt;p&gt;– Roy Fielding, Architectural Styles and the Design of Network-based Software Architectures&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7-05NdYt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9ptkwu4bc64l5o6vium.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7-05NdYt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9ptkwu4bc64l5o6vium.png" alt="script" width="880" height="570"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>programming</category>
      <category>challenge</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Lessons For Newbie Developers from The War of Art</title>
      <author>Vignesh</author>
      <pubDate>Fri, 26 Nov 2021 10:22:36 +0000</pubDate>
      <link>https://dev.to/ckvignesh/lessons-for-newbie-developers-from-the-war-of-art-15la</link>
      <guid>https://dev.to/ckvignesh/lessons-for-newbie-developers-from-the-war-of-art-15la</guid>
      <description>&lt;p&gt;In October, I challenged myself to take up the #100DaysofCode challenge after I read about &lt;a href="https://www.freecodecamp.org/news/the-crazy-history-of-the-100daysofcode-challenge-and-why-you-should-try-it-for-2018-6c89a76e298d/"&gt;Alex Kallaway's journey&lt;/a&gt; on freeCodeCamp. On my journey, I have faced many ups and downs. Some parts of the journey were easy and some were really hard. But, I never stopped learning.&lt;/p&gt;

&lt;p&gt;Becoming a software developer is no easy job. It's a continuous journey of learning. When the journey is easy, it's a pleasure to travel. But, the real test of grit, perseverance and patience takes place when the odds are against you. That's when I came across an article by &lt;a href="https://www.freecodecamp.org/news/learning-to-code-when-it-gets-dark-e485edfb58fd/#.yjh0fehje"&gt;Alex Kallaway&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I believe most developers out there are self-taught (at least most of the ones I personally know).&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;The best engineers I’ve worked with learned to code before or after college, rarely during.&lt;/p&gt;— Sahil (&lt;a class="mentioned-user" href="https://dev.to/shl"&gt;@shl&lt;/a&gt;
) &lt;a href="https://twitter.com/shl/status/1266731956059824128?ref_src=twsrc%5Etfw"&gt;May 30, 2020&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;Alex Kallaway mentioned 3 books in his article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The War of Art: Winning the Inner Creative Battles&lt;/li&gt;
&lt;li&gt;The Power of Habit: Why We Do What We Do in Life and Business&lt;/li&gt;
&lt;li&gt;The Obstacle Is the Way: The Timeless Art of Turning Trials into Triumph&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I read &lt;code&gt;The War of Art: Winning the Inner Creative Battles&lt;/code&gt; in less than half a day. It's a small book that's crystal clear and something that'll make the reader feel it was written for them.&lt;/p&gt;

&lt;p&gt;It's written in 3 parts. The first one deals with the bad guy - &lt;code&gt;Resistance&lt;/code&gt;. Alex talks about it in his article. The second one is about how to deal with the bad guy &lt;code&gt;Turning Pro&lt;/code&gt;. The third one is about inspiration. The book is a treat for those who are spiritual. If you aren't, no problem it'll still teach you many invaluable lessons.&lt;/p&gt;

&lt;p&gt;Here are some lessons I have learnt from it and every developer or an aspiring developer needs to know. (I'm not a fan of the &lt;code&gt;aspiring developer&lt;/code&gt; label. Either you're a developer or not) &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-beating-raw-resistance-endraw-is-not-difficult-but-boring"&gt;
  &lt;/a&gt;
  1. Beating &lt;code&gt;resistance&lt;/code&gt; is not difficult but boring.
&lt;/h3&gt;

&lt;p&gt;Steven starts the book with how he spends his day. As a writer, he has to rely on creativity to get going. But, this is where Resistance comes to play. He wins over it by following a routine. Though there's nothing extraordinary or fancy in it, he describes how he wins over &lt;code&gt;resistance&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There's a secret that real writers know that wannabe writers don't, and the secret is this: It's not the writing part that's hard. What's hard is sitting down to write. What keeps us from sitting down is Resistance. - Steven Pressfield (The War of Art)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It can get boring to solve javascript coding problems or even learn HTML and CSS. Most of the work that happens in production is boring too. But, the boring tasks need a lot of practice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-understand-that-everyone-struggles-with-raw-resistance-endraw-"&gt;
  &lt;/a&gt;
  2. Understand that everyone struggles with &lt;code&gt;resistance&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Comparison is the thief of joy. It's easy to compare yourselves to a senior and established developer and feel that you can never be like that. &lt;/p&gt;

&lt;p&gt;Remember, they also went through the same fears, struggles and feelings. Who knows, they may also be going through self-doubt and anxiety! As a developer, your main goal is to learn to code, not focus on what others are doing.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Everyone who has a body experiences Resistance - Steven Pressfield (The War of Art)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Do not look up and get overwhelmed. If you're a beginner developer, looking at complex projects and apps can demotivate you. That's because you're trying to see the hilltop from a valley. Do not focus on becoming someone. Try to do something.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Grandiose fantasies are a symptom of Resistance. They're the sign of an amateur. The professional has learned that success, like happiness, comes as a by-product of work. - Steven Pressfield (The War of Art)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#3-its-not-a-oneday-battle"&gt;
  &lt;/a&gt;
  3. It's not a one-day battle
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Resistance&lt;/code&gt; has to be fought anew, every day. Not every day is the same. Some days are really overwhelming. Some of you may be learning to code with a full-time job or other responsibilities. Every day is a new day and a chance to move ahead.&lt;/p&gt;

&lt;p&gt;Had a bad day, yesterday? Forget it and start afresh.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;RESISTANCE NEVER SLEEPS - Steven Pressfield (The War of Art)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#4-the-best-opportunity-is-most-likely-one-step-ahead-of-your-worst-setback"&gt;
  &lt;/a&gt;
  4. The best opportunity is most likely one step ahead of your worst setback
&lt;/h3&gt;

&lt;p&gt;We all have problems. Some of them seem like the worst and can be devastating. The COVID Pandemic was one that caused a lot of distress at a collective level. &lt;/p&gt;

&lt;p&gt;But, all this can be conquered when you conquer &lt;code&gt;Resistance&lt;/code&gt;. Keep this in mind - the fight is not over as long as you're alive.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;RESISTANCE IS MOST POWERFUL AT THE FINISH LINE - Steven Pressfield (The War of Art)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#5-do-not-rationalize"&gt;
  &lt;/a&gt;
  5. Do not Rationalize.
&lt;/h3&gt;

&lt;p&gt;Rationalization means &lt;code&gt;attempt to explain or justify (behaviour or an attitude) with logical reasons, even if these are not appropriate&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;As a developer struggling to learn a new technology or programming language, understand that it's hard. It's going to be tough and that should not be an excuse for you to drop it or go in search of an easier technology.&lt;/p&gt;

&lt;p&gt;Many of you may be trying to juggle a full-time job, personal responsibilities and study. But, remember to keep your eyes on your goal - becoming an expert Developer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What Resistance leaves out, of course, is that all this mean s diddly. Tolstoy had thirteen kids and wrote War and Peace. - Steven Pressfield (The War of Art)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#6-put-yourself-out-there-and-cut-through-criticism"&gt;
  &lt;/a&gt;
  6. Put yourself out there and cut through criticism
&lt;/h3&gt;

&lt;p&gt;Are you learning web development? Share your journey publicly. Are you building projects? Talk about it. Make connections. People out there must know you exist.&lt;/p&gt;

&lt;p&gt;It can be difficult. You may get criticized and mocked by people who don't even know to write a "Hello World" program. Be your own critic.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Individuals who are realized in their own lives almost never criticize others. If they speak at all, it is to offer encouragement. - Steven Pressfield (The War of Art)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There's a slight difference between showing off and putting yourself out there. The former is mostly boastful and condescending. It may border being unethical too if you try to show off things that you can't do.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A professional's work has style; it is distinctively his own. But he doesn't let his signature grandstand for him. His style serves the material. He does not impose it as a means of drawing attention to himself. - Steven Pressfield (The War of Art)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#7-the-path-to-mastery-is-alone-at-first-but-not-always"&gt;
  &lt;/a&gt;
  7. The path to mastery is alone at first but not always
&lt;/h3&gt;

&lt;p&gt;When you embark on a new journey, you may be alone. But, fret not, you'll soon discover similar people and some may even join you. Keep the faith and go ahead.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here's the trick: We're never alone. As soon as we step outside the campfire glow, our Muse lights on our shoulder like a butterfly. The act of courage calls forth infallibly that deeper part of ourselves that supports and sustains us. - Steven Pressfield (The War of Art)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#8-fall-down-if-you-must-but-once-not-more-than-that"&gt;
  &lt;/a&gt;
  8. Fall down if you must but once. Not more than that.
&lt;/h3&gt;

&lt;p&gt;There may be some bad days that force you to miss practice or work for a day. If it's something real and needs more than a day - gladly take it. But if it's lethargy or aimlessness that forces you to do it, don't skip studying/building for more than a day.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The professional has learned better. He respects Resistance. He knows if he caves in today, no matter how plausible the pretext, he'll be twice as likely to cave in tomorrow. - Steven Pressfield (The War of Art)&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Creating transactions, mining rewards, mint and gas fee </title>
      <author>FreakCdev</author>
      <pubDate>Fri, 26 Nov 2021 10:16:38 +0000</pubDate>
      <link>https://dev.to/freakcdev297/creating-transactions-mining-rewards-mint-and-gas-fee-5hhf</link>
      <guid>https://dev.to/freakcdev297/creating-transactions-mining-rewards-mint-and-gas-fee-5hhf</guid>
      <description>&lt;p&gt;Hi all, in the &lt;a href="https://dev.to/freakcdev297/creating-a-blockchain-in-60-lines-of-javascript-5fka"&gt;previous article&lt;/a&gt;, I have covered how to create a simple Blockchain in just 60 lines of code. So today, I will start working on the second part of the series - transactions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please read the previous article first if you haven't known anything about blockchains yet.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Also, you should definitely check out this tutorial on my new videos on Youtube for detailed information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Part 1: &lt;a href="https://youtu.be/cFx6DCw0D3Q%0AYouTube"&gt;Building a Blockchain (proof of work) in 60 lines of Javascript&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href="https://youtu.be/ng1GClVAXdo"&gt;Creating Transaction, Mining reward, Mint and Gas fee on the Blockchain in Javascript&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-we-are-trying-to-achieve"&gt;
  &lt;/a&gt;
  What we are trying to achieve
&lt;/h2&gt;

&lt;p&gt;Basically, we need to have a representation of a transaction that includes the sender's wallet address, the receiver's wallet address and the amount we are sending. We will add it to a transaction pool, and when we create a new block, we will move all pending transactions to that block's data.&lt;/p&gt;

&lt;p&gt;To prevent faulty transactions, we will use a signing mechanism along with a key pair. That key pair will include 2 keys: a private key, and a public key. The public key can be shown to others as a wallet address, the private key is used for signing transactions. Because only you hold the private key, only you can sign your account's transactions, ensuring safety.&lt;/p&gt;

&lt;p&gt;We will talk about some other stuff like minting, initial coin release and gas fee.&lt;/p&gt;

&lt;p&gt;No more saying, let's start coding!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-transaction-class"&gt;
  &lt;/a&gt;
  The transaction class
&lt;/h2&gt;

&lt;p&gt;So we will have a basic class like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#mining-transactions"&gt;
  &lt;/a&gt;
  Mining transactions
&lt;/h2&gt;

&lt;p&gt;Moving back to the &lt;code&gt;Blockchain&lt;/code&gt; class, first of all, we need a transactions pool which holds all the pending transactions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transactions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we will have a method to create a transaction:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;addTransaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mining the transactions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;mineTransactions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transactions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We just basically pass in the pending transactions and then clear the current pending transactions pool.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mining-reward"&gt;
  &lt;/a&gt;
  Mining reward
&lt;/h3&gt;

&lt;p&gt;No one would like to lose their computational power to mine transactions for you for free, so you need to have some form of reward for the miners/validators.&lt;/p&gt;

&lt;p&gt;First, we will have a mining reward property, you can set it to whatever you like, I'll set it to 297 for no real reason.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;297&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we shall create a transaction that transfers the reward to the miner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;mineTransactions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rewardAddress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CREATE_REWARD_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rewardAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reward&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;

        &lt;span class="c1"&gt;// Right now, we are just going assume the "from" address is something like this,&lt;/span&gt;
        &lt;span class="c1"&gt;// we will get back to this later in the next part of the article.&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transactions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#minting"&gt;
  &lt;/a&gt;
  Minting
&lt;/h3&gt;

&lt;p&gt;This is a well-known term in blockchain development, it simply refers to the act of adding more coins, or printing more money to be simple. When the chain gives miners reward, it is actually minting coins in the mean time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#signing"&gt;
  &lt;/a&gt;
  Signing
&lt;/h2&gt;

&lt;p&gt;We can't miss the signing mechanism, it's ESSENTIAL!&lt;/p&gt;

&lt;p&gt;Before we proceed, it's important to do some research about &lt;code&gt;signing&lt;/code&gt; first, it's a popular mechanism in cryptography.&lt;/p&gt;

&lt;p&gt;I will use an algorithm used by Bitcoin and Ethereum - secp256k1 for generating key pairs.&lt;/p&gt;

&lt;p&gt;Since we are staying simple, we wouldn't want to implement the algorithm on our own since it's terribly long and can even be longer than this article. &lt;/p&gt;

&lt;p&gt;We are using a package called &lt;code&gt;elliptic&lt;/code&gt;, note that elliptic also supports &lt;code&gt;Curve25519&lt;/code&gt; and other algorithms.&lt;/p&gt;

&lt;p&gt;Install it through npm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i elliptic
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#generate-a-keypair"&gt;
  &lt;/a&gt;
  Generate a keypair
&lt;/h3&gt;

&lt;p&gt;This is an example of generating a key pair:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;EC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;elliptic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;secp256k1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;keyPair&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;genKeyPair&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// public key: keyPair.getPublic("hex")&lt;/span&gt;
&lt;span class="c1"&gt;// private key: keyPair.getPrivate("hex")&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#signing-transactions"&gt;
  &lt;/a&gt;
  Signing transactions
&lt;/h3&gt;

&lt;p&gt;Create a &lt;code&gt;sign&lt;/code&gt; method in the &lt;code&gt;Transaction&lt;/code&gt; class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyPair&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Check if the public key matches the "from" address of the transaction&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyPair&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPublic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Sign the transaction&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;keyPair&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SHA256&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;base64&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toDER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#validation"&gt;
  &lt;/a&gt;
  Validation
&lt;/h2&gt;

&lt;p&gt;The chain is valid when all blocks have valid transactions, transactions are valid only when:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From, to, amount are not empty.&lt;/li&gt;
&lt;li&gt;Sender's address has more money than the amount sent.&lt;/li&gt;
&lt;li&gt;The signature matches with the data of the transaction.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First, we will create a method in the &lt;code&gt;Blockchain&lt;/code&gt; class to get an address's balance for convenience.&lt;/p&gt;

&lt;p&gt;We can implement a method to get an address's balance based on the transaction history of the chain:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;getBalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;block&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// Because if you are the sender, you are sending money away, so your balance will be decremented.&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;// But if you are the receiver, you are receiving money, so your balance will be incremented.&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we will have a method like this in our &lt;code&gt;Transaction&lt;/code&gt; class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span class="nx"&gt;ec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyFromPublic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SHA256&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the &lt;code&gt;Block&lt;/code&gt; class, create a method to check if it has valid transactions or not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;hasValidTransactions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update the &lt;code&gt;isValid&lt;/code&gt; method of the &lt;code&gt;Blockchain&lt;/code&gt; class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;currentBlock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;currentBlock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getHash&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; 
        &lt;span class="nx"&gt;prevBlock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;currentBlock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prevHash&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; 
        &lt;span class="nx"&gt;currentBlock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasValidTransactions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blockchain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we also need to check if a transaction is valid before pushing it to the pool:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;addTransaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's get back to &lt;code&gt;minting&lt;/code&gt; as I have promised. First, I'll create an address just for minting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MINT_KEY_PAIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;genKeyPair&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MINT_PUBLIC_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;MINT_KEY_PAIR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPublic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;New method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;mineTransactions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rewardAddress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Create a mint transaction for reward.&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rewardTransaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MINT_PUBLIC_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rewardAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reward&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;rewardTransaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MINT_KEY_PAIR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// We will add the reward transaction into the pool.&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rewardTransaction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transactions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Chain's address will have an exception: Its balance will not be checked since we are printing money, so we need to update &lt;code&gt;Transaction.isValid&lt;/code&gt; as well. Also, its amount must be the exact same as the defined reward.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;MINT_PUBLIC_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reward&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span class="nx"&gt;ec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyFromPublic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SHA256&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#releasing-the-first-few-coins-ever"&gt;
  &lt;/a&gt;
  Releasing the first few coins ever
&lt;/h2&gt;

&lt;p&gt;Going back to the &lt;code&gt;Blockchain&lt;/code&gt; class, we will make some changes to our genesis block. We will mint some coins for one address (creating a max diluted marketcap). If anyone wants to buy our currency, they will lend us some money, and we will send them coins. This is also called a contract.&lt;/p&gt;

&lt;p&gt;Create the keyPair first&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;holderKeyPair&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;genKeyPair&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the genesis block, simply create a transaction for inital coin release.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;// We will release 100000 coin&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initalCoinRelease&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MINT_PUBLIC_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;holderKeyPair&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPublic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;initalCoinRelease&lt;/span&gt;&lt;span class="p"&gt;])];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-problem-with-minting"&gt;
  &lt;/a&gt;
  The problem with minting
&lt;/h2&gt;

&lt;p&gt;If you are wondering if anyone can access the minting address, can't we print out a lot and a lot faulty money? You would be right, but we are going to handle all of our problems with a peer-to-peer server, which I'm going to make in the next article.&lt;/p&gt;

&lt;p&gt;The peer-to-peer server handles this problem by simply dismissing the chain of which block:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Has more or less than 1 transaction for minting.&lt;/li&gt;
&lt;li&gt;Has lower than 1 transaction other than the mint transaction, it basically means that he's constantly minting blocks without actually producing some real transactions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#gas-fees"&gt;
  &lt;/a&gt;
  Gas fees
&lt;/h2&gt;

&lt;p&gt;There is also a kind of miner's reward called &lt;code&gt;gas fee&lt;/code&gt;, but it's a little different. It's basically user's reward for miners. This makes mining more appealing to miners, and it also pays for the energy used for mining, and people would have to pay a higher gas fee to be picked by miners quicker.&lt;/p&gt;

&lt;p&gt;We are adding the &lt;code&gt;gas&lt;/code&gt; property into our &lt;code&gt;Transaction&lt;/code&gt; class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Gas will be set to 0 because we are making it optional&lt;/span&gt;
        &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;gas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyPair&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyPair&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPublic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// Add gas&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;keyPair&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SHA256&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;base64&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toDER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                &lt;span class="c1"&gt;// Add gas&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gas&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;MINT_PUBLIC_ADDRESS&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reward&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                &lt;span class="nx"&gt;ec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyFromPublic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SHA256&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will update the &lt;code&gt;getBalance&lt;/code&gt; method too:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;getBalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;block&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="nx"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gas&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we should give the gas fee to the miner:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;mineTransactions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rewardAddress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;gas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;gas&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rewardTransaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MINT_PUBLIC_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rewardAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reward&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;rewardTransaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MINT_KEY_PAIR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Prevent people from minting coins and mine the minting transaction.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rewardTransaction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transactions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Your original balance is 100000&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;girlfriendWallet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;genKeyPair&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Create a transaction&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;holderKeyPair&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPublic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;girlfriendWallet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPublic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Sign the transaction&lt;/span&gt;
&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;holderKeyPair&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Add transaction to pool&lt;/span&gt;
&lt;span class="nx"&gt;JeChain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addTransaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Mine transaction&lt;/span&gt;
&lt;span class="nx"&gt;JeChain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mineTransactions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;holderKeyPair&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPublic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// Prints out balance of both address&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your balance:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JeChain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;holderKeyPair&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPublic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your girlfriend's balance:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JeChain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;girlfriendWallet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPublic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should look like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c5Y5QZqL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnha03ejwod4rj9uuuut.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c5Y5QZqL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnha03ejwod4rj9uuuut.png" alt="Image description" width="880" height="509"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, that's it! Here's the full source code if you want:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;Find me on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nguyenphuminh"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/NguynPhMinh8"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCfoL6jxesUq0urUHBqXY1WA"&gt;Youtube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://viblo.asia/u/freakcdev"&gt;Viblo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out the Youtube version of this article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/ng1GClVAXdo"&gt;Creating Transaction, Mining reward, Mint and Gas fee on the Blockchain in Javascript&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>blockchain</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>How to crack FAANG Interviews?</title>
      <author>Nomadev💻🔱</author>
      <pubDate>Fri, 26 Nov 2021 10:12:49 +0000</pubDate>
      <link>https://dev.to/thenomadevel/how-to-crack-faang-interviews-3889</link>
      <guid>https://dev.to/thenomadevel/how-to-crack-faang-interviews-3889</guid>
      <description>&lt;p&gt;Hello, everyone  &lt;a href="https://twitter.com/thenomadevel"&gt;Nomadev&lt;/a&gt;  here, back with another blog on tech. Today we will be discussing in brief about How to crack FAANG interviews or how to start preparing for big product-based companies?&lt;/p&gt;

&lt;p&gt;FAANG stands for  &lt;a href="https://about.facebook.com/meta/"&gt;Facebook(now meta)&lt;/a&gt;,  &lt;a href="https://www.amazon.com"&gt;Amazon&lt;/a&gt;,  &lt;a href="https://www.apple.com/"&gt;Apple&lt;/a&gt; ,  &lt;a href="https://www.netflix.com"&gt;Netflix&lt;/a&gt; ,  &lt;a href="https://www.google.com"&gt;Google&lt;/a&gt;. These are well known for their great work culture and high salaries. &lt;br&gt;
This is a fact that many of them do not want you to have expertise in any specific language or framework, they just want you to be a great problem solver and have logical thinking. Even your approach will play a very important role in your selection. wondering how to be one? let's start. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CfdDjwfM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637914261576/5nfYC7vz_.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CfdDjwfM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637914261576/5nfYC7vz_.gif" alt="lets start.gif" width="480" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#programming-language"&gt;
  &lt;/a&gt;
  Programming Language
&lt;/h2&gt;

&lt;p&gt;You can start by learning a programming language. This can be C, C ++, Python, Java, or any other of your choice. You need to learn a language that is easy for you to understand and use. Remember the thing that, understanding logic is more important than just mugging up the syntax, so learn wisely. You should not try to learn all languages, one language is more than is enough.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nMphu6W0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637849960266/L9Jt10l1rt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nMphu6W0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637849960266/L9Jt10l1rt.png" alt="programminglanugage.png" width="620" height="258"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-structure-and-algorithms"&gt;
  &lt;/a&gt;
  Data Structure and Algorithms
&lt;/h2&gt;

&lt;p&gt;Now you know all the basics of the language of your choice. The next step is to learn the Data Structure and Algorithms. These are the very fundamentals of computer science, and remember the thing that these are not language-specific, you just have to understand that you have to understand the logic, and mugging up the syntax will simply give you nothing, language is just used for the implementation of those Data structures and Algorithms.&lt;br&gt;
Data structures are named locations that you can use to store and organize your data. And an algorithm is a collection of steps to solve a particular problem. By learning data structures and algorithms, you can create efficient and optimized computer programs.&lt;br&gt;
Understanding of space and time complexity can be great kick-start, so chime in.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--60t2BfQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637914458918/sFvkEDP_-.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--60t2BfQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637914458918/sFvkEDP_-.jpeg" alt="dsa.jpeg" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-more-you-practice-the-more-you-learn"&gt;
  &lt;/a&gt;
  The more you practice, the more you learn
&lt;/h2&gt;

&lt;p&gt;Always stay motivated enough to solve problems and this will help to improve your problem-solving skills. Some good online platforms, where you can practice are  &lt;a href="https://leetcode.com/"&gt;LeetCode&lt;/a&gt; ,  &lt;a href="https://www.codechef.com/"&gt;CodeChef&lt;/a&gt; ,  &lt;a href="https://www.hackerrank.com/"&gt;HackerRank&lt;/a&gt; . &lt;br&gt;
  When you have gained enough confidence, you can participate in various online contests on  &lt;a href="https://www.codechef.com/"&gt;CodeChef&lt;/a&gt;,  &lt;a href="https://codeforces.com/"&gt;Codeforces&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aqWKki-h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637915159002/AyKNro1qq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aqWKki-h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637915159002/AyKNro1qq.jpeg" alt="dex.jfif" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mock-interview"&gt;
  &lt;/a&gt;
  Mock Interview
&lt;/h2&gt;

&lt;p&gt;Give mock interviews as they help you to learn how to explain your logic, develop interview strategies, improve your communication skills, and reduce stress levels before the actual interview.&lt;br&gt;
You should give as many mock interviews on platforms like  &lt;a href="https://www.myinterviewbuddy.com/"&gt;InterviewBuddy&lt;/a&gt;,  &lt;a href="https://www.pramp.com/#/"&gt;Pramp&lt;/a&gt;, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lOaMbMaP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637852584019/lLlZo52x8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lOaMbMaP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637852584019/lLlZo52x8.jpeg" alt="mock.jpg" width="612" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-other-important-topics"&gt;
  &lt;/a&gt;
  Some other important topics
&lt;/h2&gt;

&lt;p&gt;You also need to have a good understanding of DBMS, operating system, and network. Apart from good coding skills, you should also bear good communication skills. if you get failed in explaining how your approach looks like, that would definitely make a bad impression of you on them.&lt;/p&gt;

&lt;p&gt;So this was it, All the very best for your upcoming interviews.&lt;br&gt;
 If you liked this blog make sure to follow me on  &lt;a href="https://twitter.com/thenomadevel"&gt;Twitter&lt;/a&gt; where I post daily threads on Programming, Open Source, and on Getting better remote job opportunities.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GGmbU6we--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637395103449/aVaT64w2l.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GGmbU6we--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637395103449/aVaT64w2l.gif" alt="good-twitter.gif" width="220" height="165"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#here-are-a-few"&gt;
  &lt;/a&gt;
  Here are a few
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://twitter.com/thenomadevel/status/1448187696367636483"&gt;Top 10 Websites where you can master programming for Free&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/thenomadevel/status/1460938027920887808"&gt;TOP 5 GitHub Repo to Master Javascript&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://twitter.com/thenomadevel/status/1451082698500362244"&gt;The Best VS Code Extensions to Supercharge Your Git&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/thenomadevel/status/1450355811268448261"&gt;Top 5 Sites To Find Remote Developer Jobs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://twitter.com/thenomadevel/status/1449253111235629057"&gt;MOST USED GIT COMMANDS YOU MUST LEARN &lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;



&lt;br&gt;
If you want to support me you can &lt;a href="https://www.buymeacoffee.com/nomadevel"&gt;buy me a coffee&lt;/a&gt;. &lt;strong&gt;Your appreciation is my motivation.&lt;/strong&gt;&lt;br&gt;
Happy Coding

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ll5Gzsgk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637828125223/kRdCEMEMA.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ll5Gzsgk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637828125223/kRdCEMEMA.jpeg" alt="coffee.jfif" width="880" height="441"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#announcement"&gt;
  &lt;/a&gt;
  Announcement
&lt;/h2&gt;

&lt;p&gt;Very soon I will be publishing a &lt;strong&gt;mega article on git commands&lt;/strong&gt; so if you haven't followed me here or on  &lt;a href="https://twitter.com/thenomadevel"&gt;Twitter&lt;/a&gt;, make sure to do it for all the updates and Keep supporting for more awesome content.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>webdev</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>React js Developer To Build Out the e-commerce Application </title>
      <author>Amelia Smith</author>
      <pubDate>Fri, 26 Nov 2021 10:07:30 +0000</pubDate>
      <link>https://dev.to/amelias26018837/react-js-developer-to-build-out-the-e-commerce-application-47bf</link>
      <guid>https://dev.to/amelias26018837/react-js-developer-to-build-out-the-e-commerce-application-47bf</guid>
      <description>&lt;p&gt;React for eCommerce is trending nowadays as it offers many benefits to businesses. Today, there are more than 900,000 live websites using React.js. Without any doubt, Reactjs is the most used UI library that builds many web applications with less effort and minimal coding. &lt;/p&gt;

&lt;p&gt;Moreover, features such as component-driven approach, high speed, atomic design principles make React js the first choice for developing eCommerce web applications.  &lt;/p&gt;

&lt;p&gt;Are you looking to &lt;a href="https://www.bacancytechnology.com/hire-reactjs-developer"&gt;hire React developer&lt;/a&gt;, right? But before that, we need to look out the core benefits of React for eCommerce that you leverage more advantage while building web applications. &lt;/p&gt;

&lt;p&gt;The benefits we can leverage from &lt;em&gt;React.js for eCommerce&lt;/em&gt; with understanding the key principles of its working. So, let's get started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Componentization&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;React offers the building of a front-end website where the feature or components are responsible for the UI functionality like buttons or data calls. While this react component is the modular pieces of code that will be reused with different websites or eCommerce apps in multiple locations. &lt;/p&gt;

&lt;p&gt;This approach will also accelerate development time with maintaining the customer experience. Moreover, it abolishes the need of developers by decreasing the work on code from scratch, faster to debug and scale easily. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DOM - Virtual Document Object Model&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Virtual DOM is important for interactive websites that have a lot of user engagement. Without the Reactjs website, it depends on the HTML for the updation of DOM. While the UI component clicks then, it requires the page to refresh and the entire DOM to reload.  &lt;/p&gt;

&lt;p&gt;Due to React.js, the library constructs the representation of the page in the virtual memory and uses the reconciliation algorithm that ensures the minimum number of operations will be held to render the page with updates. This helps with the superior performance of web applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;React offers many tools that help you in inspecting React components tree in firefox and chrome. It also shows the developer warning that also spots the developer's mistake easily. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speed&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Reactjs has a component-based approach that provides the ability developers to can reuse the code snippets with all eCommerce apps or multiple web applications. This provides new touchpoints and makes the change easier, and also debugs existing ones. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developer Experience&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;In React js the code is easy to maintain because of the component-based nature. As it saves time and effort as a long-term perspective. The tools also boost the productivity of developers by offering testing efficiency. &lt;/p&gt;

&lt;p&gt;React.js is used in Facebook as a backend so, the components and available library are growing, and it is easy to learn and build a small or large eCommerce ecosystem.  &lt;/p&gt;

&lt;p&gt;Apart from the features, there are many eCommerce websites that are built with React. Here are some websites that you can look at before developing your eCommerce website. &lt;/p&gt;

&lt;p&gt;&lt;a href="http://shopping.com/"&gt;Shopping.in&lt;/a&gt;&lt;br&gt;
&lt;a href="http://hayneedle.com/"&gt;Hayneedle.com&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="http://petsmart.com/"&gt;Petsmart.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://shop.jaguars.com/"&gt;Shop.jaguars.com&lt;/a&gt;&lt;br&gt;
&lt;a href="http://shop.snopes.com/"&gt;Shop.noes.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.searspartsdirect.com/"&gt;Searspartsdirect.com&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;I hope you get the best examples and benefits that you can take utmost advantage of while building eCommerce websites with React. Moreover, there is no doubt that &lt;em&gt;React for e-commerce&lt;/em&gt; brings the out-of-the-box change by offering many business benefits.   &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Fix slow tests with Jest in Github Actions</title>
      <author>Rafael Garcia Lara</author>
      <pubDate>Fri, 26 Nov 2021 10:07:05 +0000</pubDate>
      <link>https://dev.to/ddoice/fix-slow-tests-with-jest-in-github-actions-5h00</link>
      <guid>https://dev.to/ddoice/fix-slow-tests-with-jest-in-github-actions-5h00</guid>
      <description>&lt;p&gt;At &lt;a href="https://bob.io"&gt;bob.io&lt;/a&gt; we were migrating a ton of repositories from our oldie Jenkins to GitHub Actions and everything was going really smooth, in some of our tests with mocha and chai we shaved a nice 40% running time, and with the matrix strategy, we can run a lot of test in parallel removing a lot of friction from our CI process.&lt;/p&gt;

&lt;p&gt;We were in heaven until we migrated a frontend app with tests made in Jest.&lt;/p&gt;

&lt;p&gt;On our first try the tests took a hefty amount of time&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G7cuXMz9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uguk96s70ed64zph3l93.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G7cuXMz9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uguk96s70ed64zph3l93.png" alt="Image description" width="392" height="119"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For reference the same tests in Jenkins 🤔&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cgNWDlbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/juz2tt33sjgzadf5b3k7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cgNWDlbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/juz2tt33sjgzadf5b3k7.png" alt="Image description" width="146" height="237"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The same tests on my computer 🚀&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kZtBlDIP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5323pc59fugrnuz85zof.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kZtBlDIP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5323pc59fugrnuz85zof.png" alt="Image description" width="321" height="83"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At first glance, it appeared that is CPU bound, but in mocha and chai the history was the opposite, we reduced the run times, so I did a small investigation using the time command like this:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/usr/bin/time -v npm run test&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;In my computer the tests were parallelized and used a good amount of CPU power&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LEBtjGlw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6bg95pdant3sxx84gdu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LEBtjGlw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6bg95pdant3sxx84gdu.png" alt="Image description" width="299" height="76"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Meanwhile, in the Github runners, the history was different&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LT3H5cTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rc86zvl4zsmp819m4au1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LT3H5cTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rc86zvl4zsmp819m4au1.png" alt="Image description" width="406" height="97"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looks like, under the hood, Jest checks the number of cores available and uses as much as possible but never uses all the cores, the instances running our test have 2 cores available but Jest only uses 1.&lt;/p&gt;

&lt;p&gt;After digging into the Jest documentation I found the &lt;a href="https://jestjs.io/es-ES/docs/cli#--maxworkersnumstring"&gt;maxWorkers&lt;/a&gt; option which allows you to control the number of CPU cores used.&lt;/p&gt;

&lt;p&gt;I tried to run the same test but forced the workers to fully use the available cores in the runner:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/usr/bin/time -v npm run test -- --maxWorkers=2&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Not 200% but better CPU usage:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rpfTaanN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bq3korhcy2ktm3dvwn47.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rpfTaanN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bq3korhcy2ktm3dvwn47.png" alt="Image description" width="541" height="99"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And even better run times:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ku2RkyRV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pr1odede1rw8ffp13ejg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ku2RkyRV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pr1odede1rw8ffp13ejg.png" alt="Image description" width="393" height="164"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just for the sake of curiosity, I tested with 3 workers and it took 1:34 so we left it with 2 workers.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>github</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Join Git Commit Show on 27th and 28th &amp; enjoy giveaways worth $100K! </title>
      <author>Saurabh Rai</author>
      <pubDate>Fri, 26 Nov 2021 09:56:49 +0000</pubDate>
      <link>https://dev.to/srbhr/join-git-commit-show-on-27th-and-28th-enjoy-giveaways-worth-100k-3149</link>
      <guid>https://dev.to/srbhr/join-git-commit-show-on-27th-and-28th-enjoy-giveaways-worth-100k-3149</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-day-to-go"&gt;
  &lt;/a&gt;
  🗓️ 1 day to go
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#join-git-commit-show-now-an-online-live-show-for-developers-to-achieve-mastery-this-weekend-nov-2728-satsun"&gt;
  &lt;/a&gt;
  Join Git Commit Show now, an online live show for developers to achieve mastery. This weekend Nov 27-28, Sat-Sun.
&lt;/h2&gt;

&lt;p&gt;Register now for free: &lt;a href="https://gitcommit.show/"&gt;gitcommit.show&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get the free💙 tickets for the show : &lt;a href="http://push.gitcommit.show/"&gt;http://push.gitcommit.show/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What to expect? 👉&lt;/p&gt;

&lt;p&gt;🧑‍💻 &lt;strong&gt;6x Masterclass sessions&lt;/strong&gt;: Learn from engineers and researchers via live &amp;amp; interactive talk. Covering topics such as git, web development, quantum computing, accessibility, automation, reactjs, kubernetes, etc.&lt;/p&gt;

&lt;p&gt;💼 &lt;strong&gt;6x CareerTalk sessions&lt;/strong&gt;: Witness experienced leaders sharing their journey of choosing different career paths and how they navigated their challenges. Covering topics such as - publishing book, data journalism, personal branding, research publications and more career hacks.&lt;/p&gt;

&lt;p&gt;💻 &lt;strong&gt;6x Showcase sessions&lt;/strong&gt;: Learn what's latest in tech and learn how these innovators solved different engineering challenges. You'll have to be there at the online conference on Sun morning to know what's in there.&lt;/p&gt;

&lt;p&gt;💰 &lt;strong&gt;$100k worth giveaways&lt;/strong&gt;: Exclusive rewards for developers. From swags to cloud credits for deploying your next server or training your next ML model.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cQ2XNbxH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kv86vdf649tttlhjviho.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cQ2XNbxH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kv86vdf649tttlhjviho.png" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Free Bootstrap Button Generators</title>
      <author>Sajan</author>
      <pubDate>Fri, 26 Nov 2021 09:43:58 +0000</pubDate>
      <link>https://dev.to/sajanmangattu/free-bootstrap-button-generators-26i9</link>
      <guid>https://dev.to/sajanmangattu/free-bootstrap-button-generators-26i9</guid>
      <description>&lt;p&gt;Bootstrap button generator tools helps developers to create buttons with different shapes, colors, and sizes without any programming knowledge. The tool selects the appropriate button for the developer’s needs and generates the code to get it done.&lt;/p&gt;

&lt;p&gt;There are many advantages of making use of these tools. One major benefit is that it saves time by automatically selecting the appropriate size, shape, color or icon for a particular button according to developer’s needs.&lt;/p&gt;

&lt;p&gt;Custom bootstrap buttons are time consuming job in setting up and in development. These tools make the job lot easier and faster in creating custom bootstrap buttons in no time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cssauthor.com/free-bootstrap-button-generators/"&gt;https://cssauthor.com/free-bootstrap-button-generators/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to build a static HTML blog in 10 minutes with squido</title>
      <author>Mark Moffat</author>
      <pubDate>Fri, 26 Nov 2021 09:26:24 +0000</pubDate>
      <link>https://dev.to/mrvautin/how-to-build-a-static-html-blog-in-10-minutes-with-squido-2m0n</link>
      <guid>https://dev.to/mrvautin/how-to-build-a-static-html-blog-in-10-minutes-with-squido-2m0n</guid>
      <description>&lt;p&gt;Static websites built using &lt;a href="https://jamstack.org/"&gt;Jamstack&lt;/a&gt; architecture offer a way to create a modern website with incredible performance, cheap to host, and easy to maintain. You can see move benefits of Static HTML websites &lt;a href="https://blog.squido.org/why-static-html/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today we will be using &lt;a href="https://squido.org"&gt;squido&lt;/a&gt; to build a static HTML blog in less than 10 minutes showing all the steps needed to get going.&lt;/p&gt;

&lt;p&gt;There are many static website generators but none as easy-to-use as featured packed by default as &lt;a href="https://squido.org"&gt;squido&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;Things you will need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://git-scm.com/downloads"&gt;Git&lt;/a&gt; installed.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org/en/download/"&gt;Node.js&lt;/a&gt; installed.&lt;/li&gt;
&lt;li&gt;A text editor, like &lt;a href="https://code.visualstudio.com/download"&gt;Visual Studio Code&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Open your Terminal and install &lt;a href="https://squido.org"&gt;squido&lt;/a&gt; globally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# npm i -g https://github.com/mrvautin/squido.git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Speed things up by cloning the example blog Git repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# git clone https://github.com/mrvautin/squido-blog-example my-blog&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building"&gt;
  &lt;/a&gt;
  Building
&lt;/h2&gt;

&lt;p&gt;Enter your new blog directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# cd my-blog&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Build your blog:&lt;br&gt;
Note: The serve command creates a local web server to view your new blog. The &lt;code&gt;-b&lt;/code&gt; flag is to build, the &lt;code&gt;-w&lt;/code&gt; is to watch for changes and rebuild if needed and the &lt;code&gt;-c&lt;/code&gt; flag is to clean old files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# squido serve -b -w -c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now view your blog by opening the following URL in a browser:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;http://localhost:4965
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HcXLbfpN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojb3hsnsg5ljeqk284m1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HcXLbfpN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojb3hsnsg5ljeqk284m1.png" alt="squido demo" width="880" height="708"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you open up your new blog directory in a text editor, you should see:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IRZGRK4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iejpda65hwt5au79x535.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IRZGRK4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iejpda65hwt5au79x535.png" alt="squido directory structure" width="880" height="693"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;build:&lt;/strong&gt; This is the generated directory that will contain your blog HTML files&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;source:&lt;/strong&gt; The actual source files used to generate your blog&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;content:&lt;/strong&gt; Contains the javascript, CSS, and image files for your blog&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;layouts:&lt;/strong&gt; Contains the layout file which has the basic structure&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;posts:&lt;/strong&gt; Contains the markdown files which contain the actual content of your blog posts/pages&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;404.hbs&lt;/strong&gt;, &lt;strong&gt;index.hbs&lt;/strong&gt;, &lt;strong&gt;page.hbs&lt;/strong&gt;, &lt;strong&gt;post.hbs&lt;/strong&gt;, &lt;strong&gt;tag.hbs&lt;/strong&gt;: Are all template files used to drive the layout of those pages&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;config.js:&lt;/strong&gt; Contains the config of your blog, including name, description, URL, pagination, and more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's clear out the old &lt;code&gt;lorem ipsum&lt;/code&gt; example markdown files from the &lt;code&gt;/source/posts&lt;/code&gt; folder by selecting, right-clicking and &lt;code&gt;Delete&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xZqCTdwp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6co8ksxl6letkcu98hqt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xZqCTdwp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6co8ksxl6letkcu98hqt.png" alt="delete demo posts" width="880" height="488"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then create a new file called &lt;code&gt;hello-world.markdown&lt;/code&gt; in the &lt;code&gt;/source/posts&lt;/code&gt; folder with the following text:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Hello&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;world"&lt;/span&gt;
&lt;span class="na"&gt;permalink&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;hello-world&lt;/span&gt;
&lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Hello&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;world"&lt;/span&gt;
&lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;2021-06-16&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;19:17:00'&lt;/span&gt;
&lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;hello&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;world&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;

&lt;span class="c1"&gt;## Hello world&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your blog will automatically rebuild and refreshing your browser will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m4iqJACw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/43ebwhl1twcspbp2jt9o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m4iqJACw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/43ebwhl1twcspbp2jt9o.png" alt="hello world demo" width="880" height="437"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can now edit the templates with your custom layout, change the logo, add your CSS colors later. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deployment"&gt;
  &lt;/a&gt;
  Deployment
&lt;/h2&gt;

&lt;p&gt;Back in your terminal, initialize your local Git repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# git init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new &lt;a href="https://github.com"&gt;Github&lt;/a&gt; repository to make deploying your blog even easier: Visit &lt;a href="https://github.com"&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Jump back into your Terminal and link your new &lt;a href="https://github.com"&gt;Github&lt;/a&gt; repository to your local one. &lt;br&gt;
First, run a Git status:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# git status&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sUiabQbe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4isrntpahn0b9uidz8dk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sUiabQbe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4isrntpahn0b9uidz8dk.png" alt="Netlify deploy" width="880" height="540"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This shows all our deletions and our new &lt;code&gt;hello-world.markdown&lt;/code&gt; file. &lt;/p&gt;

&lt;p&gt;Add the changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# git add .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create your first Commit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# git commit -m "Init"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change the branch to main:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# git branch -M main&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add your remote &lt;a href="https://github.com"&gt;Github&lt;/a&gt; repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# git remote add origin git@github.com:&amp;lt;username&amp;gt;/my-blog.git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Push your changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# git push -u origin main&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deploy-to-netlify"&gt;
  &lt;/a&gt;
  Deploy to Netlify
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://netlify.com"&gt;Netlify&lt;/a&gt; is a specialty static website host which will allow you to host your blog for free in a matter of minutes. There is no server management or complicated setup. &lt;/p&gt;

&lt;p&gt;After you have created a &lt;a href="https://netlify.com"&gt;Netlify&lt;/a&gt; account, click the &lt;code&gt;New site from Git&lt;/code&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mqsdwf-b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rodnrq0mq91qeebuqzrs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mqsdwf-b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rodnrq0mq91qeebuqzrs.png" alt="Netlify deploy" width="880" height="429"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;a href="https://github.com"&gt;Github&lt;/a&gt; from the &lt;code&gt;Continuous deployment&lt;/code&gt; section. Authorize &lt;a href="https://github.com"&gt;Github&lt;/a&gt;, and select your &lt;code&gt;my-blog&lt;/code&gt; repository. Change the Publish directory to &lt;code&gt;/build&lt;/code&gt;. Click &lt;code&gt;Advanced&lt;/code&gt; and set a new variable &lt;code&gt;NODE_ENV&lt;/code&gt; to &lt;code&gt;production&lt;/code&gt;. Finally, click the &lt;code&gt;Deploy site&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;The result should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LO5s9t1G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wgir9wcgod8y7rsjwe5d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LO5s9t1G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wgir9wcgod8y7rsjwe5d.png" alt="Netlify deploy" width="880" height="969"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will have to wait a few seconds to a minute for your blog to deploy. You can then view your blog by clicking the link:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZZ0-vi91--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4iip4h4pn4l9fs2c91g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZZ0-vi91--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4iip4h4pn4l9fs2c91g.png" alt="Netlify deploy" width="880" height="439"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can finish here. However, by clicking &lt;code&gt;Domain settings&lt;/code&gt; you can set up your own custom domain you have purchased from a domain register. &lt;/p&gt;

&lt;p&gt;Click Add custom domain and follow the steps to set up your DNS records to point to your new &lt;a href="https://netlify.com"&gt;Netlify&lt;/a&gt; blog. &lt;/p&gt;

&lt;p&gt;There are other &lt;a href="https://docs.squido.org/deployment-and-hosting/"&gt;deployment options&lt;/a&gt; on the &lt;a href="https://squido.org"&gt;squido&lt;/a&gt; &lt;a href="https://docs.squido.org/"&gt;documentation&lt;/a&gt;. There is also other help and guides on &lt;a href="https://docs.squido.org/configuration/"&gt;customizing&lt;/a&gt; your blog over on the squido &lt;a href="https://docs.squido.org/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Fully Isolating Resources in a Multi-Tenant SaaS on Google Cloud using a Token Vending Machine</title>
      <author>Brian Burton</author>
      <pubDate>Fri, 26 Nov 2021 09:22:45 +0000</pubDate>
      <link>https://dev.to/brianburton/fully-isolating-resources-in-a-multi-tenant-saas-on-google-cloud-using-a-token-vending-machine-f25</link>
      <guid>https://dev.to/brianburton/fully-isolating-resources-in-a-multi-tenant-saas-on-google-cloud-using-a-token-vending-machine-f25</guid>
      <description>&lt;p&gt;If you're building a multi-tenant SaaS, securely isolating customer data not only from other customers but from your own developers is a conversation that you'll have sooner or later.  Here at &lt;a href="https://skribe.ai"&gt;Skribe&lt;/a&gt; our customers' data is highly confidential and we go to extreme efforts to protect it both from inadvertent exposure caused by software bugs and internal access by employees unless absolutely necessary.&lt;/p&gt;

&lt;p&gt;For a hybrid pool/silo architecture like Skribe's, my favorite security strategy to achieve this is one that AWS promotes known as the &lt;a href="https://aws.amazon.com/blogs/apn/isolating-saas-tenants-with-dynamically-generated-iam-policies/"&gt;Token Vending Machine&lt;/a&gt; that leverages IAM to isolate customer data.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uFt69bfy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hs9wc9xhaq72celc4qq9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uFt69bfy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hs9wc9xhaq72celc4qq9.png" alt="Example of the Token Vending Machine" width="880" height="599"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Essentially an authorized user &lt;em&gt;(1)&lt;/em&gt; makes an API request through the API Gateway &lt;em&gt;(2)&lt;/em&gt;, which calls a custom authorizer to validate the credentials and generate a dynamic IAM policy &lt;em&gt;(3)&lt;/em&gt;. The dynamic IAM policy is passed to the handler function &lt;em&gt;(4)&lt;/em&gt; that locks all further processes into a specific set of resources &lt;em&gt;(5)&lt;/em&gt;.  The elegance of this solution is that it removes the burden of handling tenant security from the developers' hands and moves it down to the platform level. The threat of inadvertently exposing tenant data even at the hands of a malicious developer is almost completely mitigated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;Skribe is a primarily built on Google Cloud in a hybrid pooled/siloed architecture, and for what felt like an eternity, I'd been researching methods to implement this same strategy on GCP.  It had seemed impossible given the limitations of their managed services.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Endpoints and API Gateway don't support custom authorizers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dynamically generated IAM policies aren't supported.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The proposed solutions you'll find on StackOverflow, Reddit and even GCP's own whitepapers all basically say the same thing: "Tenant security should be handled at the app level."&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yuck!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But after days of trial and error, we found a solution that gives us the highly secure tenant isolation we needed on Google Cloud!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wN6gRXDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvzsmc20goa0htpojaks.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wN6gRXDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvzsmc20goa0htpojaks.png" alt="Strategy to fully isolate tenants in an multi-tenant environment on Google Cloud using a Token Vending Machine" width="856" height="791"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similarly as before, the user in Tenant A &lt;em&gt;(1)&lt;/em&gt; makes an authorized request to list the users in their tenant &lt;em&gt;(2)&lt;/em&gt;. The API Gateway passes that to the &lt;code&gt;UsersEndpoint&lt;/code&gt; service &lt;em&gt;(3)&lt;/em&gt; that has no inherit permission to access any database, so it passes the user's auth token to the &lt;code&gt;TokenVendingMachine&lt;/code&gt; &lt;em&gt;(4)&lt;/em&gt;. The &lt;code&gt;TokenVendingMachine&lt;/code&gt; validates the token and based on the custom claims retrieves the tenant's Service Account key file from our secure bucket &lt;em&gt;(5)&lt;/em&gt; and returns it to the &lt;code&gt;UsersEndpoint&lt;/code&gt; service.  Finally we can call our database using the key file &lt;em&gt;(6)&lt;/em&gt; and return the results to the user.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-1-onboarding"&gt;
  &lt;/a&gt;
  Step 1: Onboarding
&lt;/h4&gt;

&lt;p&gt;When a new tenant is created, a tenant-specific Service Account is asynchronously created and the JSON key file is stored in a highly-secured bucket containing tenant key files.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-2-authentication"&gt;
  &lt;/a&gt;
  Step 2: Authentication
&lt;/h4&gt;

&lt;p&gt;We use the Identity Platform with multi-tenancy enabled to authenticate users.  When a user logs in they exchange their initial token with a custom token containing custom claims such as the user's tenant and role, and that custom token is sent with every subsequent request.&lt;/p&gt;

&lt;p&gt;Those custom claims look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  tn: 'tn-xyz987',
  rl: 'editor',
  rg: 1,
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The claims identify the user's tenant, their role and the region that their data resides in.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-3-api-requests"&gt;
  &lt;/a&gt;
  Step 3: API Requests
&lt;/h4&gt;

&lt;p&gt;When a user's authenticated request hits the API Gateway, it's sent to a Cloud Run service that runs our API.  The database and storage buckets are abstracted behind like-named services and require a valid JSON key file in order to access any resource.&lt;/p&gt;

&lt;p&gt;So if a user requests a list of users within their tenant, the API's code can be as simple as this pseudocode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.run('/users', (res: Request, res: Response) =&amp;gt; {
  // Create a new instance of our TokenVendingMachine class
  const tvm = new TokenVendingMachine();

  // Request the key file using the user's auth token
  tvm.get(req.headers.authorization)
    .then(async (key: Credentials) =&amp;gt; {
      // The tenant's database name has been embedded in the key
      const db = new Database(key);

      const rows = await db.query("SELECT ...");

      res.json(rows);
    })
    .catch((e: any) =&amp;gt; res.status(403));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Main Takeaway:&lt;/strong&gt; The developers can write code as if this is a single-tenant environment!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-know-what-youre-going-to-say"&gt;
  &lt;/a&gt;
  I know what you're going to say...
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Why not issue short lived service account credentials?&lt;/strong&gt;&lt;br&gt;
Latency. Retrieving an existing key file from a GCS bucket is extremely fast compared to requesting new credentials on each request. Sure you could cache those short-lived credentials, but it creates a new set of problems of storing those securely if your goal is total isolation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why not use the Secrets Manager to store the key files?&lt;/strong&gt;&lt;br&gt;
In a word, cost.  At $0.03 per 10,000 operations the costs will add up fast for an API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Isn't a storage bucket full of key files dangerous?&lt;/strong&gt;&lt;br&gt;
Not if properly secured.  The &lt;code&gt;TokenVendingMachine&lt;/code&gt; service has read only access to all objects in that bucket and another service that generates the key file during the onboarding process has write access. There's also have a backend service that regularly cycles the keys so that they don't live on in perpetuity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;What's important is that by separating tenant security from the app level, we achieve reliable, secure storage and access of our customers' data while removing the responsibility of tenant security from our developers' hands.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
