<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Permalink - A Complete Guide</title>
      <author>Bhavyashah</author>
      <pubDate>Thu, 25 Nov 2021 11:59:58 +0000</pubDate>
      <link>https://dev.to/bhavyashah/permalink-a-complete-guide-4d57</link>
      <guid>https://dev.to/bhavyashah/permalink-a-complete-guide-4d57</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-permalinks"&gt;
  &lt;/a&gt;
  What is Permalinks?
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Permalinks are the permanent URLs that point to your blog post&lt;/strong&gt;. As soon as you publish a blog post, a permalink for it is created on your blog. You can change or modify it at any time. Some blogger prefer to keep the default permalinks while others delete it and create their own custom permalink structure.&lt;/p&gt;

&lt;p&gt;There are &lt;strong&gt;5 different type of permalinks&lt;/strong&gt; like:&lt;/p&gt;

&lt;p&gt;1) Plain Permalink&lt;br&gt;
2) Day &amp;amp; Name Permalink&lt;br&gt;
3) Month &amp;amp; Name permalink&lt;br&gt;
4) Numeric Permalink&lt;br&gt;
5) Post Name Permalink&lt;/p&gt;

&lt;p&gt;&lt;b&gt;In Most of Post of blogger implement post name permalink method&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YK2PAfwt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ib1u0tsgqt4z7g3il2z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YK2PAfwt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ib1u0tsgqt4z7g3il2z.png" alt="Types of Permalinks" width="880" height="391"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Permalink Tools Generator&lt;/h2&gt;

&lt;p&gt;Creating a good permalink structure for your website can be tricky. If you're not careful, they can mess up your internal linking or cause duplicate content issues. Never fear; we've got your back. Here are free tools to help you create PERFECT permalinks. 👇👇👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.blogtriggers.com/p/permalink-generator-blog-triggers.html"&gt;Permalink Generator&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#important-of-permalink"&gt;
  &lt;/a&gt;
  Important of Permalink?
&lt;/h2&gt;

&lt;p&gt;Permalink is important for search engine ranking. SEO expert advice to use SEO title permalink structure. This helps make your permalinks keyword-rich. It makes it simpler for search engines to determine the topic of your content, and it will help your website rank higher in SERPs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#important-things-to-understand-about-permalink-structure"&gt;
  &lt;/a&gt;
  Important things to Understand about Permalink Structure
&lt;/h2&gt;

&lt;p&gt;When creating permalinks it is important to remember that the structure must be compatible with your chosen blogging platform. This mostly means making sure you do not include any illegal characters like Underscore(_), slash(/), comma(.), etc...&lt;/p&gt;

&lt;p&gt;The length of a permalink URL is important to the structure of a page's permalink. If you use more than sixty characters, you interfere with a page's ability to rank on Google search results.&lt;/p&gt;

&lt;p&gt;If you want to know about how to add &lt;a href="https://www.blogtriggers.com/2021/07/full-information-on-permalink-in-blogger.html"&gt;permalink in blogger&lt;/a&gt;? then visit once.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>blogger</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to handle JWT &amp; Http-Only Cookies Authentication with Next.js</title>
      <author>@calebbenjin</author>
      <pubDate>Thu, 25 Nov 2021 11:35:46 +0000</pubDate>
      <link>https://dev.to/calebbenjin/how-to-handle-jwt-http-only-cookies-authentication-with-nextjs-3bc3</link>
      <guid>https://dev.to/calebbenjin/how-to-handle-jwt-http-only-cookies-authentication-with-nextjs-3bc3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary.
&lt;/h2&gt;

&lt;p&gt;Greeting! folks, If you don't want to save your JWT-token in the client side then I believe that's why you're here, So welcome. In this article am going to show you how to handle authentication, JWT &amp;amp; HttpOnly Cookies with Next.js. This example will go with any API endpoints you are using. &lt;br&gt;
In order to follow along with the project, I create a starter project where all the styling is done so we can just focus on handling all the required Authentications in our application. You can grab it here &lt;a href="https://github.com/calebbenjin/starter-jwtauth-nextjs"&gt;Starter files&lt;/a&gt;  &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-were-going-to-cover"&gt;
  &lt;/a&gt;
  What We're Going To Cover
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What Is JWT?&lt;/li&gt;
&lt;li&gt;JSON Web Token Dos and Don't&lt;/li&gt;
&lt;li&gt;Our JWT Strategy Explained&lt;/li&gt;
&lt;li&gt;Cloning And Setting Up Our Project&lt;/li&gt;
&lt;li&gt;Setting Up AuthContext&lt;/li&gt;
&lt;li&gt;Login And Get JWT&lt;/li&gt;
&lt;li&gt;Store JWT In Server HttpOnly Cookie&lt;/li&gt;
&lt;li&gt;Persist Logged in User&lt;/li&gt;
&lt;li&gt;Logout And Destroy Cookie&lt;/li&gt;
&lt;li&gt;Register User&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#what-is-jwt"&gt;
  &lt;/a&gt;
  What Is JWT?
&lt;/h4&gt;

&lt;p&gt;A JSON Web Token (JWT) is really just a way to transmit information between two parties. One party might be your frontend React application and another party might be your API. The real value of JSON Web Tokens is they include a security feature. That is you can be sure that the information that was transmitted in the token wasn't tampered with along the way.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#json-web-token-dos-and-dont"&gt;
  &lt;/a&gt;
  JSON Web Token Dos And Don't
&lt;/h4&gt;

&lt;p&gt;I wanted to outline some do's and don'ts. Let's start with the don'ts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first don't that I've got is don't store your tokens in Local Storage. The reason that it's risky to keep them in local storage is that local storage is easily scriptable.&lt;/li&gt;
&lt;li&gt;The next don't that I've got is don't keep these secret keys that go into signing your tokens in the browser. The only place that you should be keeping your secret keys is on your backend, because browsers are public clients. Any time a user loads up a website or an application, they get all of the code that goes into powering that application.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;
  &lt;a href="#now-for-the-dos"&gt;
  &lt;/a&gt;
  Now for the Do's,
&lt;/h5&gt;

&lt;p&gt;Do keep long, strong, unguessable secrets. Keep something that is super long, strong, and unguessable.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#our-jwt-strategy-explained"&gt;
  &lt;/a&gt;
  Our JWT Strategy Explained
&lt;/h4&gt;

&lt;p&gt;Now what we are going to do in our application is create an API routes within Nextjs which run on the server-side. We are going to have routes that we can hit, then from there we will make our request to the API Endpoint, get the token and then we will set the cookie on the server-side, what's called the Http-Only Cookie, that means it can't be accessed via the browser (local Storage) so that's a saver way to go. So let's dive into code and start to create our API routes.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#cloning-and-setting-up-our-project"&gt;
  &lt;/a&gt;
  Cloning And Setting Up Our Project
&lt;/h4&gt;

&lt;p&gt;So like l said I have already created a starter files so Jump right in and clone it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://github.com/calebbenjin/starter-jwtauth-nextjs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After cloning the app, open it in your VScode and press &lt;code&gt;crtl+J&lt;/code&gt; your terminal will open then type &lt;code&gt;yarn add or npm install&lt;/code&gt; to install all necessary dependences. After that type &lt;code&gt;npm run dev or yarn run dev&lt;/code&gt;: &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9PTMTnzL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spbjd2y473sx5ucapqua.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9PTMTnzL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spbjd2y473sx5ucapqua.png" alt="Your app will look this" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#setting-up-authcontext"&gt;
  &lt;/a&gt;
  Setting Up AuthContext
&lt;/h4&gt;

&lt;p&gt;Now we want to create our context, we are going to use the Context-API, where we can store all our Authentication methods, our users and also any errors that comes from authentication.&lt;br&gt;
So we are going to create a new folder in the &lt;code&gt;root&lt;/code&gt; called &lt;code&gt;context&lt;/code&gt; then inside the context we're going to create a file called &lt;code&gt;AuthContext.js&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BAF2nGRX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhytgrcssktd0p78ksbn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BAF2nGRX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhytgrcssktd0p78ksbn.png" alt="your application should look like this" width="335" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So We want to basically create a context using &lt;code&gt;createContext&lt;/code&gt; from react. So now go inside your &lt;code&gt;AuthContext&lt;/code&gt; file and fill it with this code snippet below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState, useEffect, createContext } from 'react'
import { useRouter } from 'next/router'
import {NEXT_URL} from '../config/index'

const AuthContext = createContext()

export const AuthProvider = ({children}) =&amp;gt; {
  const [user, setUser] = useState(null)
  const [error, setError] = useState(null)
  const [isLoading, setIsLoading] = useState(false)

  const router = useRouter()

  // Register user
  const register = async ({ fullname, email, password }) =&amp;gt; {
    setIsLoading(true)
    console.log(fullname, email, password)
  }

  // Login user
const login = async ({email, password}) =&amp;gt; {
  setIsLoading(true)
  console.log(email, password)
}

  // Logout user
  const logout = () =&amp;gt; {
    console.log("User Logged out")
  }

  // Check if user id Logged in
  const checkedUserLoggedIn = async (user) =&amp;gt; {
    console.log('Checked')
  }

  return (
    &amp;lt;AuthContext.Provider value={{ register, login, logout, isLoading, user, error}}&amp;gt;
      {children}
    &amp;lt;/AuthContext.Provider&amp;gt;
  )
}


export default AuthContext
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let me explain the code above. We imported some necessary hooks from react like &lt;code&gt;{ useState, useEffect, createContext }&lt;/code&gt; and also &lt;code&gt;{useRouter}&lt;/code&gt; from &lt;code&gt;next/router&lt;/code&gt;, Next we imported our &lt;code&gt;{API_URL}&lt;/code&gt; this will be your API endpoint URL of choice. Next we create a context by creating a variable called &lt;code&gt;AuthContext&lt;/code&gt; and set it to &lt;code&gt;createContext&lt;/code&gt;.&lt;br&gt;
Next we created a provider that needs to wrap around our application so we can provides certain functions to our application and whatever component needed. Next we created some state &lt;code&gt;[user, setUser]&lt;/code&gt; and &lt;code&gt;[error, setError]&lt;/code&gt; and we set the default to null. Next we created some methods like &lt;code&gt;register, login, logout, checkUserLoggedIn&lt;/code&gt; which we will use to hit our backend routes. Then as you can see we are exposing all the methods created so it can be accessible all over the application. So let's do that by going into our &lt;code&gt;_app.js&lt;/code&gt; file in the pages folder and bring in our &lt;code&gt;AuthProvider&lt;/code&gt; as you can see below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import '../styles/globals.css'
import Navbar from '../components/Navbar'
import {AuthProvider} from '../context/AuthContext'

function MyApp({ Component, pageProps }) {
  return (
    &amp;lt;AuthProvider&amp;gt;
      &amp;lt;Navbar /&amp;gt;
      &amp;lt;Component {...pageProps} /&amp;gt;
    &amp;lt;/AuthProvider&amp;gt;
  )
}

export default MyApp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#login-amp-get-jwt"&gt;
  &lt;/a&gt;
  Login &amp;amp; Get JWT
&lt;/h3&gt;

&lt;p&gt;So in this section we are going to setup our login functionality and get the JWT token, we're not going to store it just yet but what we want to do is to create an &lt;code&gt;api-route&lt;/code&gt; to connect to and in that &lt;code&gt;api-route&lt;/code&gt; is were we are going to communicate with our backend-endpoint, we are going to send our request from there get the token and then our next step is to save the Http-Only Cookie. So let's dive right in by getting into our api folder and create a new file called &lt;code&gt;login.js&lt;/code&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WxiH-LVg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m13egb7eauy9gb6p7rls.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WxiH-LVg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m13egb7eauy9gb6p7rls.jpg" alt="api-route folder" width="326" height="572"&gt;&lt;/a&gt;&lt;br&gt;
Now copy the code below and paste in the &lt;code&gt;login.js&lt;/code&gt; file you have created, I will explain things in details below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { API_URL} from '../config/index'

export default async (req, res) =&amp;gt; {
  if(req.method === 'POST') {

  } else {
    res.setHeader('Allow', ['POST'])
    res.status(405).json({message: `Method ${req.method} not allowed`})
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we import our &lt;code&gt;API_URL&lt;/code&gt; this can be your &lt;code&gt;api url of choice&lt;/code&gt;&lt;br&gt;
Next we create an &lt;code&gt;async&lt;/code&gt; function and pass in our &lt;code&gt;(req res)&lt;/code&gt;&lt;br&gt;
Next we want to make sure if is the &lt;code&gt;req.method&lt;/code&gt; is equal to &lt;code&gt;POST&lt;/code&gt;, else we want to &lt;code&gt;res.setHeader('Allow', ['POST']&lt;/code&gt; and set the status &lt;code&gt;res.status(405)&lt;/code&gt; which is method not allowed and send a &lt;code&gt;.json({message:&lt;/code&gt;Method ${req.method} not allowed&lt;code&gt;})&lt;/code&gt;.&lt;br&gt;
Next after making sure is a post request we want to get the email, and password from the &lt;code&gt;req.body&lt;/code&gt; so we do that by destructuring the email and password from &lt;code&gt;req.body&lt;/code&gt;. &lt;br&gt;
Now in this our &lt;code&gt;api route&lt;/code&gt; this were we want to login our user with actual &lt;code&gt;backend api-endpoint&lt;/code&gt; or l should say fetch our token. Now go ahead and paste the code below inside of your code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   // destructure email, and password
    const { email, password } = req.body

    // Making a post request to hit our backend api-endpoint
    const apiRes = await fetch(`${API_URL}/your url of choice`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email,
        password
      })
    })

    const data = await apiRes.json()

    if(apiRes.ok) {
      // @todo - Set Cookie

      res.status(200).json({user: data.user})
    } else {
      res.status(data.statusCode).json({message: data.message})
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So if you're following correctly your code show look like this below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { API_URL} from '../config/index'

export default async (req, res) =&amp;gt; {
  if(req.method === 'POST') {
    const { email, password } = req.body

    const apiRes = await fetch(`${API_URL}/your url of choice`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email,
        password
      })
    })

    const data = await apiRes.json()

    console.log(data.jwt)

    if(apiRes.ok) {
      res.status(200).json({user: data.user})
    } else {
      res.status(data.statusCode).json({message: data.message})
    }

  } else {
    res.setHeader('Allow', ['POST'])
    res.status(405).json({message: `Method ${req.method} not allowed`})
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what we have done so far, which is creating this &lt;code&gt;api-endpoint&lt;/code&gt; inside our Nextjs app, is like a middle man between our frontend and the backend-api, and then we are doing this so we can set &lt;code&gt;Http-Only Cookie&lt;/code&gt; with token. &lt;br&gt;
You can &lt;code&gt;console.log(data.jwt)&lt;/code&gt; to see it.&lt;br&gt;
Next let's head over to &lt;code&gt;AuthContext&lt;/code&gt; and go to the &lt;code&gt;login&lt;/code&gt; method we create so we can make a request to our &lt;code&gt;api/login&lt;/code&gt; api-endpoint we have created. So paste these code inside of the &lt;code&gt;login&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const res = await fetch(`${NEXT_URL}/api/login`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      email,
      password
    })
  })

  const data = await res.json()

  if(res.ok) {
    setUser(data.user)
    router.push('/dashboard')
  } else {
    setError(data.message)
    setError(null)
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are fetching the data from the api route we create in &lt;code&gt;api/login&lt;/code&gt;. After that we check if the request is okay then we setUser(data.user) and make a redirect to our dashboard using &lt;code&gt;next/router&lt;/code&gt;, But if is not &lt;code&gt;Ok&lt;/code&gt; then we want to setError(data.message) and also setError(null) so the error will not remain in our state.&lt;br&gt;
Next let's head on to our login page and bring in our login method from &lt;code&gt;AuthProvider&lt;/code&gt;, so now update your login page with these code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import AuthContext from '../context/AuthContext'

  const { login, error, user, isLoading } = useContext(AuthContext)

  const handleLoginSubmit = async ({ email, password }) =&amp;gt; {
    login({email, password})
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are importing our AuthContext, then we destructure out &lt;code&gt;login, error, user, isLoading&lt;/code&gt; from it. Then in our handleLoginSubmit function we then call in the &lt;code&gt;login({email, password})&lt;/code&gt; and then pass in &lt;code&gt;email, and password&lt;/code&gt;.&lt;br&gt;
Now at this point our app should be working very fine, next we are going to go head and store our jwt in the server httpOnly Cookie. Let's dive in.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#store-jwt-in-server-httponly-cookie"&gt;
  &lt;/a&gt;
  Store JWT In Server HttpOnly Cookie
&lt;/h3&gt;

&lt;p&gt;Now what we want to do is set the Cookies, there's quite a few ways to do this, but we are going to use a package called &lt;code&gt;cookie&lt;/code&gt; that let's us easily set cookie on the server-side, if you check in our &lt;code&gt;package.json&lt;/code&gt; file you will see that l have install it already, or you can install it @ &lt;code&gt;yard add cookie&lt;/code&gt; or &lt;code&gt;npm install cookie&lt;/code&gt; if you are not using the start file.&lt;br&gt;
Next we going to bring in our &lt;code&gt;api/login.js&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import cookie from 'cookie'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So go down the code where we have our &lt;code&gt;@todo Set Cookie&lt;/code&gt; comment and add these code there.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  res.setHeader(
    'Set-Cookie',
    cookie.serialize('token', String(apiRes.data.token), {
      httpOnly: true,
      secure: process.env.NODE_ENV !== 'development',
      maxAge: 60 * 60 * 24 * 7, // 1 week
      sameSite: 'strict',
      path: '/'
    })
 )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now as you can see we are setting res.setHeader that's coming with &lt;code&gt;'Set-Cookie'&lt;/code&gt; and a second parameter of &lt;code&gt;cookie.serialize()&lt;/code&gt; then we set the name of the cookie to be &lt;code&gt;cookie.serialize('token')&lt;/code&gt; and the value is going to be &lt;code&gt;cookie.serialize('token', String(apiRes.data.token)&lt;/code&gt; and we also have an object option which is the &lt;code&gt;httpOnly: true&lt;/code&gt; and &lt;code&gt;secure&lt;/code&gt; since is going to be https and we want that to be &lt;code&gt;true&lt;/code&gt; on &lt;code&gt;production&lt;/code&gt; not &lt;code&gt;development&lt;/code&gt; then we are going to set it to &lt;code&gt;process.env.NODE_ENV !== 'development',&lt;/code&gt; and also check the node environment and see if that's not equal to &lt;code&gt;development&lt;/code&gt; if is equal to &lt;code&gt;development&lt;/code&gt; then is going to be false, if is in &lt;code&gt;production&lt;/code&gt; is going to be true. Then we do &lt;code&gt;maxAge&lt;/code&gt; is set to a week &lt;code&gt;maxAge: 60 * 60 * 24 * 7, // 1 week&lt;/code&gt;. then we set &lt;code&gt;sameSite&lt;/code&gt; to strict and &lt;code&gt;path&lt;/code&gt; is set to '/' because we want it to be accessible everywhere. So this will set the cookie on the server-side once we login our app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#persist-logged-in-user"&gt;
  &lt;/a&gt;
  Persist Logged in User
&lt;/h3&gt;

&lt;p&gt;Now we are going to persist the user and that is going to happen with the &lt;code&gt;checkUserLoggedIn&lt;/code&gt; function we created in our &lt;code&gt;AuthContext&lt;/code&gt;. Now this &lt;code&gt;checkUserLoggedIn&lt;/code&gt; is going to hit a new route called &lt;code&gt;user&lt;/code&gt; so go ahead and create a &lt;code&gt;user.js&lt;/code&gt; file inside of our &lt;code&gt;api folder&lt;/code&gt;. Basically what we are going to do in this &lt;code&gt;user.js&lt;/code&gt; is to hit the users endpoint of your api, what we can do is we can send our token which we have in our cookie right now, once we send the token it will give you back the user for that token, then what we do with in &lt;code&gt;AuthContext&lt;/code&gt; is set the &lt;code&gt;user&lt;/code&gt;. Now go head and copy the code and paste in the &lt;code&gt;user.js&lt;/code&gt; file you have created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { API_URL } from '@/lib/index'
import cookie from 'cookie'

export default = async (req, res) =&amp;gt; {
  if (req.method === 'GET') {
    if (!req.headers.cookie) {
      res.status(403).json({message: 'Not Authorized'})
      return
    }

    const { token } = cookie.parse(req.headers.cookie)

    const apiRes = await fetch(`${API_URL}/user`, {
      method: 'GET',
      headers: {
        Authorization: `Bearer ${token}`
      }
    })

    const user = await apiRes.json()

    if(apiRes.ok) {
      res.status(200).json({user})
    } else {
      res.status(403).json({message: 'User forbidden'})
    }
  } else {
    res.setHeader('Allow', ['POST'])
    res.status(405).json({ message: `Method ${req.method} not allowed` })
  }
}


export default user

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now inside our function we are first checking to see if the cookie exist &lt;code&gt;(!req.headers.cookie)&lt;/code&gt; if that's not there then &lt;code&gt;res.status(403).json({message: 'Not Authorized'})&lt;/code&gt; and then we &lt;code&gt;return&lt;/code&gt;.&lt;br&gt;
But if is found then we need to pass the cookie and get the token. we then destructure the  token &lt;code&gt;const { token } = cookie.parse(req.headers.cookie)&lt;/code&gt; this will put the token into a variable and then we can send into our backend-Api. Once we get the user back. and then check if the apiRes.ok then we want to set the &lt;code&gt;status(200)&lt;/code&gt; and send the user object. else the user is forbidden &lt;code&gt;res.status(403).json({message: 'User forbidden'})&lt;/code&gt;.&lt;br&gt;
Now let's save that and hit this api-route with &lt;code&gt;checkUserLoggedIn&lt;/code&gt;. now let's go to our &lt;code&gt;AuthContext&lt;/code&gt; and fill in out &lt;code&gt;checkUserLoggedIn&lt;/code&gt; with this code, just a simple get request&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; const checkUserLoggedIn = async () =&amp;gt; {
    const res = await fetch(`${NEXT_URL}/api/user`)
    const data = await res.json()

    if (res.ok) {
      setUser(data.user.data.user)
    } else {
      setUser(null)
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are checking that if everything goes ok then we're setting &lt;code&gt;setUser(data.user.data.user)&lt;/code&gt; the user we get back from our &lt;code&gt;backend-api&lt;/code&gt; else we are going to &lt;code&gt;setUser&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt; and then we want to call this up here in a &lt;code&gt;useEffect&lt;/code&gt; so let's go under our state and call the useEffect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  useEffect(() =&amp;gt; checkUserLoggedIn(), [])

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#logout-and-destroy-cookie"&gt;
  &lt;/a&gt;
  Logout And Destroy Cookie
&lt;/h3&gt;

&lt;p&gt;Now we are going to have another api route for this because we need to destroy the cookie that's going to happened in our server which in our api route. So let's create a &lt;code&gt;logout.js&lt;/code&gt; in our api folder. after we have done that, go ahead and paste the code inside of the &lt;code&gt;logout.js&lt;/code&gt; file we just create. I will explain the code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import cookie from 'cookie'

export default = async (req, res) =&amp;gt; {
  if (req.method === 'POST') {
    // DESTROY COOKIE
    res.setHeader(
      'Set-Cookie',
      cookie.serialize('token', '', {
        httpOnly: true,
        secure: process.env.NODE_ENV !== 'development',
        expires: new Date(0),
        sameSite: 'strict',
        path: '/'
      })
    )

    res.status(200).json({ message: "Success"})

  } else {
    res.setHeader('Allow', ['POST'])
    res.status(405).json({ message: `Method ${req.method} not allowed` })
  }
}

export default logout

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All we are doing here is just to destroy the cookie. Now if you look at the &lt;code&gt;cookie.serialize('token', '',)&lt;/code&gt; you will see that the token is now set to an empty string.&lt;br&gt;
Next we replace the &lt;code&gt;maxAge&lt;/code&gt; with &lt;code&gt;expires&lt;/code&gt; and we want to set it to something that's pass and we did that by passing a new data and pass in zero. And that's it this should destroy the cookie.&lt;br&gt;
Now from our logout function in out &lt;code&gt;AuthContext&lt;/code&gt; we just want to call that &lt;code&gt;api/logout.js&lt;/code&gt; Now add these code inside of the &lt;code&gt;logout&lt;/code&gt; function inside of the &lt;code&gt;AuthContext&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
  const logout = async () =&amp;gt; {
    const res = await fetch(`${NEXT_URL}/api/logout`, {
      method: 'POST',
    })

    if (res.ok) {
      setUser(null)
      router.push('/login')
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we are doing here is simply hitting that &lt;code&gt;api/logout&lt;/code&gt; route and we then &lt;code&gt;setUser(null)&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt;, this will remove our cookie, and redirect the user to the login page. Now let's go to our &lt;code&gt;Navbar&lt;/code&gt; components and bring in the &lt;code&gt;logout&lt;/code&gt; method from &lt;code&gt;AuthContext&lt;/code&gt;, So now update your &lt;code&gt;navbar&lt;/code&gt; component with this code below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useContext } from 'react'

const { logout, user } = useContext(AuthContext)

{user ? &amp;lt;&amp;gt;
  &amp;lt;Link href="/dashboard"&amp;gt;
    &amp;lt;a&amp;gt;Dashboard&amp;lt;/a&amp;gt;
  &amp;lt;/Link&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;a onClick={() =&amp;gt; logout()}&amp;gt;Logout&amp;lt;/a&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/&amp;gt; : null}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now once you click on logout everything should be working very fine, the cookie will be destroy.&lt;br&gt;
Now the next thing is the register page, basically this will do the same thing as login except it will create the user and then it will send back the token basically do the same thing the login response does.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#register-user"&gt;
  &lt;/a&gt;
  Register User
&lt;/h3&gt;

&lt;p&gt;Now let's go to our &lt;code&gt;api&lt;/code&gt; folder and create our &lt;code&gt;register.js&lt;/code&gt; file.&lt;br&gt;
Now go ahead and copy these code and paste inside of your &lt;code&gt;register.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { API_URL } from '../../config/index'
import cookie from 'cookie'

const register = async (req, res) =&amp;gt; {
  if (req.method === 'POST') {

    const {fullname, email, password} = req.body

    const apiRes = await fetch(`${API_URL}/your register endpoint`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        fullname,
        email,
        password
      }),
    })

    const resData = await apiRes.json()

    // console.log(resData.data.token)

    if (apiRes.ok) {
      // Set Cookie
      res.setHeader(
        'Set-Cookie',
        cookie.serialize('token', String(resData.data.token), {
          httpOnly: true,
          secure: process.env.NODE_ENV !== 'development',
          maxAge: 60 * 60 * 24 * 7, // 1 week
          sameSite: 'strict',
          path: '/'
        })
      )

      res.status(200).json({ user: resData.data })
    } else {
      res.status(500).json({message: resData.message})
    }
  } else {
    res.setHeader('Allow', ['POST'])
    res.status(405).json({ message: `Method ${req.method} not allowed` })
  }
}


export default register

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you take a close look you will see that we are doing the same thing as the login route, the little difference here is that we are accepting an extra field which is &lt;code&gt;fullname&lt;/code&gt;. So next let's dive right into the &lt;code&gt;AuthContext&lt;/code&gt; and handle our &lt;code&gt;register&lt;/code&gt; route we have just created. You can copy these code below and paste it in the &lt;code&gt;register async function we created.&lt;br&gt;
&lt;/code&gt;`&lt;code&gt;&lt;br&gt;
 // Resister user&lt;br&gt;
  // ====================================&lt;br&gt;
  const signup = async ({ fullname, email, password }) =&amp;gt; {&lt;br&gt;
    const res = await fetch(&lt;/code&gt;${NEXT_URL}/api/register`, {&lt;br&gt;
      method: 'POST',&lt;br&gt;
      headers: {&lt;br&gt;
        'Content-Type': 'application/json',&lt;br&gt;
      },&lt;br&gt;
      body: JSON.stringify({ fullname, email, password }),&lt;br&gt;
    })&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const resData = await res.json()

if (res.ok) {
  setUser(resData.user)
  router.push('/dashboard')
} else {
  setIsError(resData.message)
  setIsError(null)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;br&gt;
&lt;code&gt;`&lt;br&gt;
Now we are hitting the `api/register.js` route that we just created, we are sending along the user object which is the `fullname, email, password` then we check to see if the response is ok, if is okay then we set the user and push/redirect to the dashboard and if there's an error we set that in the state.&lt;br&gt;
Now let's go inside the `register` and update our `handleRegisterSubmit` with these code&lt;br&gt;
`&lt;/code&gt;&lt;br&gt;
const handleRegisterSubmit = async ({ fullname, email, password }) =&amp;gt; {&lt;br&gt;
    register({ fullname, email, password })&lt;br&gt;
  }&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;br&gt;
Now you can go ahead and test your app, everything should be working very fine now.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;So having these API routes and being able to set an HTTP only cookie is another big benefit of using Next.Js because is not something you can do with just React. &lt;br&gt;
Where to store a JSON Web Tokens has always been kind of an issue with front end development. So this does give us one solution.&lt;/p&gt;

&lt;p&gt;Hello, I hope you liked the article. I am Caleb, a JavaScript Developer. It takes a lot of work to research and write such an article, and a clap or a follow 👏 from you means the entire world 🌍to me. It takes less than 10 seconds for you, and it helps me with reach! You can also ask me any questions, or point out anything, or just drop a “Hey” 👇 down there.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>nextjs</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Testing the new AWS ARM CPU's with k6</title>
      <author>Carlos Ruiz Lantero</author>
      <pubDate>Thu, 25 Nov 2021 11:17:55 +0000</pubDate>
      <link>https://dev.to/k6/testing-the-new-aws-arm-cpus-with-k6-1ffb</link>
      <guid>https://dev.to/k6/testing-the-new-aws-arm-cpus-with-k6-1ffb</guid>
      <description>&lt;p&gt;Recently &lt;a href="https://www.zdnet.com/article/aws-makes-arm-powered-lambda-functions-generally-available/"&gt;AWS made the new ARM processors for Lambda functions generally available&lt;/a&gt;. With that change Serverless functions now use Graviton2, said to offer better performance at lower cost.&lt;/p&gt;

&lt;p&gt;I built a sample API on AWS using API Gateway and Lambda, and I wrote two endpoints, one &lt;a href="https://gist.github.com/Lantero/53409874583c68336bae04c14e6c4986"&gt;CPU-intensive&lt;/a&gt; (calculating Pi using Leibniz's formula), the other a typical &lt;a href="https://gist.github.com/Lantero/00bcde883c014a5a31640f76921a8ec5"&gt;data transfer&lt;/a&gt; endpoint (returning an arbitrary number of bytes). Two very different endpoints for my experiment.&lt;/p&gt;

&lt;p&gt;One hard limit on the size of my experiment was that my personal AWS account allows me no more than 50 unreserved concurrency, which roughly means I cannot have more than 50 Lambda instances running in parallel. However, you don't need big numbers in order to gain insights. &lt;br&gt;
​&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-tests"&gt;
  &lt;/a&gt;
  The tests
&lt;/h2&gt;

&lt;p&gt;​&lt;br&gt;
I deployed both endpoints in both x86_64 (Intel) and arm64 (Graviton2). The tests were largely the same, ramp up type tests. For the CPU-intensive one I used a large number of iterations of the Leibniz formula (half a million to be precise). The data tranfer one requested 100 kilobytes.&lt;br&gt;
​&lt;br&gt;
The CPU-intensive test:&lt;br&gt;
​&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Parts omitted&lt;/span&gt;
&lt;span class="err"&gt;​&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;scenarios&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;x86&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Parts omitted&lt;/span&gt;
            &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;ARCH&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x86&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;ITERATIONS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;500000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Parts omitted&lt;/span&gt;
            &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;ARCH&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;arm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;ITERATIONS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;500000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;​&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Parts omitted&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`/pi/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;__ENV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ARCH&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;searchParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;iterations&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ITERATIONS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Parts omitted&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;​&lt;br&gt;
And the data transfer test:&lt;br&gt;
​&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Parts omitted&lt;/span&gt;
&lt;span class="err"&gt;​&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;scenarios&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;x86&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Parts omitted&lt;/span&gt;
            &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;ARCH&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x86&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;102400&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Parts omitted&lt;/span&gt;
            &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;ARCH&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;arm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;102400&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;​&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Parts omitted&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`/zerobytes/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;__ENV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ARCH&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;searchParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;count&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Parts omitted&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;​&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#results-data-transfer"&gt;
  &lt;/a&gt;
  Results (data transfer)
&lt;/h3&gt;

&lt;p&gt;​&lt;br&gt;
The test results for the data tranfer endpoint were roughly what I had expected. Little difference between the two architectures, seeing that the endpoint doesn't really push the CPU to do much.&lt;/p&gt;

&lt;p&gt;The one interesting thing to note though is that the response time starts at 250ms before stabilizing at 100ms. This is typical for &lt;a href="https://mikhail.io/serverless/coldstarts/aws/"&gt;Lambda cold start&lt;/a&gt;, Lambda cold start lays within the ~100/200ms range. When you first trigger a Lambda function, AWS needs to spin up the infrastructure underneath, likely a container. Once you have your instances running, all your subsequent requests take much less time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3hSnaZDy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ktsijr7por854bdusqra.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3hSnaZDy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ktsijr7por854bdusqra.png" alt="data-transfer-results" width="880" height="234"&gt;&lt;/a&gt;&lt;br&gt;
​&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#results-cpu-load"&gt;
  &lt;/a&gt;
  Results (CPU load)
&lt;/h3&gt;

&lt;p&gt;​&lt;br&gt;
For our CPU-intensive endpoint again we see that cold start, although the graph isn't as steep as in the previous example, due to regular response time being much bigger in comparison. What's interesting here though is that x86 is 20% faster than the new chips, which is exactly the opposite of what AWS claims.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OLRlrWSI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi17aruxrxni2e3shfdh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OLRlrWSI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi17aruxrxni2e3shfdh.png" alt="cpu-load-results" width="880" height="239"&gt;&lt;/a&gt;&lt;br&gt;
​&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h2&gt;

&lt;p&gt;​&lt;br&gt;
What I learned from this experience is that while AWS boldly claims arm is 20% faster and 20% cheaper, the results of my experiment say it's rather 20% slower and 20% cheaper. This might vary based on the chip instructions you use, this implementation of the Leibniz formula consists of loops, assigments, additions and other basic mathematical operations. But it turns out others are seeing similar results, like the folks at &lt;a href="https://www.narakeet.com/tech/graviton-lambda-ffmpeg.html"&gt;Narakeet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That's not bad news though. Non-CPU workloads still benefit from the price at no speed trade-off. Arm also draws less power, which is better for the planet. &lt;/p&gt;

&lt;p&gt;While the experiment covers Lambda, these findings could be extrapolated to EC2. &lt;/p&gt;

&lt;p&gt;The concurrency (number of lambda instances running at the same time) roughly equals the number of requests per second you're running for your API, multiplied by the response time in seconds. It'd be interesting to monitor how this behaves over time and with higher load.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>arm</category>
      <category>k6</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Advanced Roadmap for React.js developers</title>
      <author>DhiWise</author>
      <pubDate>Thu, 25 Nov 2021 11:15:46 +0000</pubDate>
      <link>https://dev.to/dhiwise/advanced-roadmap-for-reactjs-developers-108d</link>
      <guid>https://dev.to/dhiwise/advanced-roadmap-for-reactjs-developers-108d</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9TqloAOh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AEXkscy4giJ6ec8TzftjcWw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9TqloAOh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AEXkscy4giJ6ec8TzftjcWw.png" alt="React.js advanced roadmap for developers" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://reactjs.org/"&gt;React JS&lt;/a&gt; or React is an open-source, front-end, JavaScript library for building user interfaces or UI components. It is maintained by Facebook and a community of individual developers and companies. It has grown as one of the best libraries in recent years for component-based GUI development.&lt;/p&gt;

&lt;p&gt;Although, there are other front-end frameworks like Angular and Vue.js available, what sets React apart from others is, it just focuses on component-based GUI development and doesn’t invade other areas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ECX3QphS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AzKcKlO3LuHbEBD2e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ECX3QphS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AzKcKlO3LuHbEBD2e.jpg" alt="" width="680" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Roadmap to becoming a React developer:&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Below is the chart demonstrating the paths you can take and the libraries you would want to learn to become a React developer. This chart is made by &lt;a href="https://twitter.com/adam_devops"&gt;Adam Gołąb&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: **This roadmap will give you an idea about the landscape and guide you if you are confused about where to begin or what to learn next. In the end, it depends on your experience as you will grow some understanding of why one tool is better suited for some cases than the other one. It is not necessary that handy and trendy one is always perfect. So, go through the map and start developing.&lt;/em&gt;**&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#roadmap"&gt;
  &lt;/a&gt;
  Roadmap
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--en3qICGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3084/1%2A-A9vh80AqLKLIyV4HIA02g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--en3qICGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3084/1%2A-A9vh80AqLKLIyV4HIA02g.png" alt="Roadmap For React.js developers" width="880" height="1683"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/adam_devops"&gt;Adam Gołąb&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://reactstrap.github.io/"&gt;ReactStrap&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ant.design/"&gt;Ant Design&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://blueprintjs.com/"&gt;Blueprint JS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://evergreen.segment.com/"&gt;Evergreen&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://storybook.js.org/"&gt;Storybook&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;For more details visit &lt;a href="https://themeselection.com/best-reactjs-ui-frameworks/"&gt;ReactJS UI Frameworks&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#13-testing"&gt;
  &lt;/a&gt;
  13. Testing
&lt;/h3&gt;

&lt;p&gt;It is a vital skill for React Developers.&lt;/p&gt;

&lt;p&gt;i. Unit Testing&lt;/p&gt;

&lt;p&gt;&lt;a href="https://facebook.github.io/jest/"&gt;-Jest&lt;/a&gt;&lt;br&gt;
-&lt;a href="https://testing-library.com/docs/react-testing-library/intro"&gt;React testing library&lt;/a&gt;&lt;br&gt;
-&lt;a href="http://airbnb.io/enzyme/"&gt;Enzyme&lt;/a&gt;&lt;br&gt;
-&lt;a href="http://sinonjs.org/"&gt;Sinon&lt;/a&gt;&lt;br&gt;
-&lt;a href="https://mochajs.org/"&gt;Mocha&lt;/a&gt;&lt;br&gt;
-&lt;a href="http://www.chaijs.com/"&gt;Chai&lt;/a&gt;&lt;br&gt;
-&lt;a href="https://github.com/avajs/ava"&gt;AVA&lt;/a&gt;&lt;br&gt;
-&lt;a href="https://github.com/substack/tape"&gt;Tape&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ii. End to End Testing&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.seleniumhq.org/"&gt;-Selenium&lt;/a&gt;&lt;br&gt;
-&lt;a href="http://webdriver.io/"&gt;Webdriver&lt;/a&gt;&lt;br&gt;
-&lt;a href="https://cypress.io/"&gt;Cypress&lt;/a&gt;&lt;br&gt;
-&lt;a href="https://pptr.dev/"&gt;Puppeteer&lt;/a&gt;&lt;br&gt;
-&lt;a href="https://github.com/cucumber/cucumber-js"&gt;Cucumber.js&lt;/a&gt;&lt;br&gt;
-&lt;a href="http://nightwatchjs.org/"&gt;Nightwatch.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;iii. Integration Testing&lt;br&gt;
&lt;a href="https://karma-runner.github.io/"&gt;-Karma&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-internationalization"&gt;
  &lt;/a&gt;
  14. Internationalization
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/yahoo/react-intl"&gt;React Intl&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://react.i18next.com/"&gt;React i18next&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These libraries offer React components and an API to format dates, strings, and numbers, including handling translations and pluralization.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-serverside-rendering"&gt;
  &lt;/a&gt;
  15. Server-Side Rendering
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/jaredpalmer/after.js"&gt;After.js&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/alidcastano/rogue.js"&gt;Rogue&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://frontity.org/"&gt;Frotinity&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;React components are rendered on the server, and the output HTML content is delivered to the client or browser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#16-static-site-generator"&gt;
  &lt;/a&gt;
  16. Static Site Generator
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://jamstack.org/generators/"&gt;Jamstack&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.gatsbyjs.org/"&gt;Gatsby&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use Gatsby to create a personalized, logged-in experiences website. They combine your data with JavaScript and create well-formed HTML content.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#17-backend-framework-integration"&gt;
  &lt;/a&gt;
  17. Backend Framework Integration
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://shakacode.gitbooks.io/react-on-rails/content/"&gt;React on Rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It integrates Rails with (server rendering of) Facebook’s React front-end framework. It provides Server rendering, which is often used for SEO crawler indexing and UX performance and is not offered by rails/webpacker.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#18-mobile"&gt;
  &lt;/a&gt;
  18. Mobile
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://facebook.github.io/react-native/"&gt;React Native&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://cordova.apache.org/"&gt;Cordova&lt;/a&gt;/&lt;a href="https://phonegap.com/"&gt;Phonegap&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The standard way to develop a mobile application is in JavaScript with a native look and feel.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#19-desktop"&gt;
  &lt;/a&gt;
  19. Desktop
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://proton-native.js.org/"&gt;Proton Native&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://electronjs.org/"&gt;Electron&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/Microsoft/react-native-windows"&gt;React Native Windows&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Allows you to build native UWP and WPF apps with React.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#20-virtual-reality"&gt;
  &lt;/a&gt;
  20. Virtual Reality
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://facebook.github.io/react-360/"&gt;React 360&lt;/a&gt;: This allows you to be exciting 360 and VR experiences using React.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;If you think the roadmap can be improved, please do open a PR with any updates and submit any issues on the original git repo, Adam Golab’s &lt;a href="https://github.com/adam-golab/react-developer-roadmap"&gt;React-developer-roadmap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That’s all about &lt;strong&gt;The ReactJS RoadMap For Developers&lt;/strong&gt;. It’s very comprehensive for sure, but there is a good chance that many of you may already know most of the stuff. Even if you don’t know, you need to be confused or overwhelmed by this roadmap; you can start small and follow along.&lt;/p&gt;

&lt;p&gt;Apart from this, there is an article on the best &lt;a href="https://themeselection.com/best-reactjs-ui-frameworks/"&gt;ReactJS UI Frameworks&lt;/a&gt; and component libraries which will be helpful, too.&lt;/p&gt;

&lt;p&gt;There are many ways to becoming a React Developer and if you already know React, you can surely find some more tools and technologies to add to your kitty and become even a better React Developer in 2020.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  About me:
&lt;/h2&gt;

&lt;p&gt;I am a react.js developer at &lt;a href="https://www.dhiwise.com/"&gt;DhiWise&lt;/a&gt;, which is a ProCode platform that helps you build clean, scalable, and customizable Node.js, Kotlin and React code. Focus on what matters as a programmer and let DhiWise do the rest.&lt;/p&gt;

&lt;p&gt;Also, If you wish to learn Advanced react component patterns, &lt;a href="https://medium.com/dhiwise/react-component-patterns-805a60b88dba"&gt;please find it here.&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By Ravi Sojitra (Tech Lead | DhiWise)&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>showdev</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Why is Git Important?</title>
      <author>Vik 📈</author>
      <pubDate>Thu, 25 Nov 2021 11:08:36 +0000</pubDate>
      <link>https://dev.to/heyvik/why-is-git-important-46l9</link>
      <guid>https://dev.to/heyvik/why-is-git-important-46l9</guid>
      <description>&lt;p&gt;Git is useful for everyone who develops code or tracks changes to files, from web developers to app developers. So, What is purpose of Git and Why you should consider utilizing it.&lt;/p&gt;

&lt;p&gt;The most widely used version control system is Git. Git keeps track of the changes you make to files so you can see what you've done and go back to previous versions if you need to. Git also facilitates cooperation by allowing several people's modifications to be merged into a single source.&lt;/p&gt;

&lt;p&gt;All of the project files, as well as the whole revision history, are stored in a Git repository. You'll instruct Git to turn a regular collection of files (such as a website's root folder) into a repository. This generates a.git subfolder with all of the Git metadata needed to track changes.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#follow-me-on-twitter-httpstwittercomvikstack"&gt;
  &lt;/a&gt;
  (Follow me on Twitter 😍)[&lt;a href="https://twitter.com/vikstack"&gt;https://twitter.com/vikstack&lt;/a&gt;]
&lt;/h4&gt;

&lt;p&gt;Files and folders that begin with a period (.) are hidden on Unix-based operating systems like macOS, so you won't see the.git folder in the macOS Finder unless you enable hidden files, but it's there! In some coding editors, you might be able to see it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-do-we-need-git"&gt;
  &lt;/a&gt;
  Why do we need Git?
&lt;/h3&gt;

&lt;p&gt;Many developers have reaped significant benefits from the Git system. It's an open-source platform that allows programmers to demonstrate their abilities. It has gained widespread acceptance as a version-controlled technology. It is required to carry out particular tasks, which include the following:&lt;/p&gt;

&lt;p&gt;Easy reverts are possible: This feature is not compatible with a number of programmes. It has made a significant difference in comparison to those applications. It's useful for going back to old records.&lt;br&gt;
Concept of branching: Projects are frequently done in simultaneously. In such a situation, a comparable code is required. It is a wonderful solution for dealing with such a problem. Parallel projects are easily supported with several branches.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#marketing-with-git"&gt;
  &lt;/a&gt;
  Marketing with Git
&lt;/h3&gt;

&lt;p&gt;Consider how switching to Git would effect your company's marketing efforts. Assume your development team has three major improvements coming up in the next several weeks:&lt;/p&gt;

&lt;p&gt;The entire team is nearing completion on a game-changing feature that has been in the works for the past six months.&lt;br&gt;
Mary is putting in place a minor, unrelated enhancement that will only affect existing clients.&lt;/p&gt;

&lt;p&gt;Rick is updating the user interface, which is long overdue.&lt;br&gt;
All of these changes would most likely be rolled up into a single release if you're using a typical development workflow that relies on a centralized VCS. &lt;/p&gt;

&lt;p&gt;The marketing potential of the other two updates is effectively neglected because marketing can only make one announcement that focuses primarily on the game-changing feature.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git-for-designers"&gt;
  &lt;/a&gt;
  Git for designers
&lt;/h3&gt;

&lt;p&gt;Rapid prototyping is easier with feature branches. Checking out a new branch allows your UX/UI designers a sandboxed environment to play with, whether they want to construct an entirely new user flow or simply alter some icons. This allows designers to see their modifications in a live working copy of the product without risking damaging existing functionality.&lt;/p&gt;

&lt;p&gt;Pull requests go a step further by establishing a formal forum for interested parties to discuss the new interface. Designers can make any necessary modifications, and the pull request will indicate the resultant commits. This encourages everyone to join in the iteration process.&lt;/p&gt;

&lt;p&gt;Thanks for reading this blog, cheers!&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>RudderStack + Blendo: Better Together</title>
      <author>RudderStack</author>
      <pubDate>Thu, 25 Nov 2021 10:50:23 +0000</pubDate>
      <link>https://dev.to/rudderstack/rudderstack-blendo-better-together-1l24</link>
      <guid>https://dev.to/rudderstack/rudderstack-blendo-better-together-1l24</guid>
      <description>&lt;p&gt;I started &lt;a href="https://www.blendo.co/"&gt;Blendo&lt;/a&gt; in 2014. The only knowledge I had at that time was that I wanted to leave academia and consulting to build a company and, most importantly, a product. I also knew that, based on my background, whatever I would be building would be something around data.&lt;/p&gt;

&lt;p&gt;Coming up with the idea for and building a cloud-based ELT platform back then took time and failure. I had to travel from Greece to Israel, start building a business, fail many times, and persist until we iterated enough to come up with one of the first products to market - together with Fivetran and Stitch Data.&lt;/p&gt;

&lt;p&gt;I learned many lessons from this journey - lessons that deserve a post of their own - but there's one lesson that I learned early on that stands out. In this blog, I talk about why we merged Blendo with &lt;a href="https://rudderstack.com/"&gt;RudderStack&lt;/a&gt;, building the team and working together to build a great product.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-we-were-doing-at-blendo-was-just-one-piece-of-the-puzzle"&gt;
  &lt;/a&gt;
  What we Were Doing at Blendo was Just One Piece of the Puzzle.
&lt;/h3&gt;

&lt;p&gt;Very early, it became clear that if we wanted to deliver the greatest possible value to our customers, we had to reinvent the concept of the data pipeline. We had to make it broader and understand that it couldn't be a linear process that pulls data from source A, delivers it to warehouse B, and we are done.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-power-of-the-unified-pipeline"&gt;
  &lt;/a&gt;
  The Power of the Unified Pipeline
&lt;/h2&gt;

&lt;p&gt;When I was building Blendo, two main categories of companies focused on making data available inside of organizations.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  ETL/ELT Pipeline companies, such as Blendo. These products do not care about how the data is captured. All they care about is how to connect to a system, pull data out, and load the data into another system more suitable for processing.&lt;/li&gt;
&lt;li&gt;  Customer Data Pipeline companies, such as Segment. These products were dealing with capturing data where it is generated and delivering the data to places that can process it.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: To know more about Customer Data Pipelines and their architecture, refer to &lt;a href="https://rudderstack.com/blog/part-1-the-evolution-of-data-pipeline-architecture/"&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#their-differences-are-emphasized-but-etlelt-and-customer-data-pipelines-are-more-similar-than-not"&gt;
  &lt;/a&gt;
  Their Differences are Emphasized, but ETL/ELT and Customer Data Pipelines are More Similar Than Not
&lt;/h3&gt;

&lt;p&gt;There are two notable differences between ETL/ELT and Customer Data Pipelines:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  ETL/ELT always followed a batch processing model while Customer Data Pipelines were streaming data from the source to the destination.&lt;/li&gt;
&lt;li&gt;  ETL/ELT was always data category agnostic, while Customer Data Pipelines were always focusing on data generated as the result of user behavior.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a long time, people focused on the differences between these two types of products. As the market matured and started understanding both the technologies and the problems they were solving, some very important similarities became much more obvious.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The data the two product categories are dealing with are complementary, and you limit your ability to generate value without having both.&lt;/li&gt;
&lt;li&gt;  Both are very complex technologies that need a lot of investment to build correctly and at scale. At the same time, there's a big overlap between the two.&lt;/li&gt;
&lt;li&gt;  Batch and Streaming are not that different. Batch processing is an approximation of streaming, and, sooner or later, the dimension of time will come up no matter how you work with your data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As our customers were investing more and more into these technologies (because they needed both), it became clear to me that maintaining different data pipeline infrastructures adds a lot of overhead and complicates things to a level that hurts value creation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unified-customer-data-is-important-but-incomplete-you-have-to-be-able-to-share-the-results-too"&gt;
  &lt;/a&gt;
  Unified Customer Data is Important but Incomplete. You Have to be able to Share the Results Too.
&lt;/h3&gt;

&lt;p&gt;Another early signal that I was receiving from the customers I was working with - and something I was aware of almost from the beginning of Blendo - moving all the data into one place is important, but it's still incomplete.&lt;/p&gt;

&lt;p&gt;Whatever we do with the data, we need to share the results with the rest of the systems to activate this data. There are several different use cases, but in the end, the business logic behind them remains the same. Two of the most common ones are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Enrich customer profiles and share them with your marketing and sales teams.&lt;/li&gt;
&lt;li&gt;  Process data on your Data Warehouse - even build and use ML models - and then use the results to personalize the product experience.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can't satisfy either of the above use cases without taking the data out of the data lake or data warehouse and pushing it into systems like marketing automation and CRM platforms.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reverseetl-the-missing-piece-of-the-data-pipeline-puzzle"&gt;
  &lt;/a&gt;
  Reverse-ETL: The Missing Piece of the Data Pipeline Puzzle
&lt;/h3&gt;

&lt;p&gt;Today, this product category has a name. It's called &lt;a href="https://rudderstack.com/blog/reverse-etl-is-just-another-data-pipeline/"&gt;Reverse-ETL&lt;/a&gt;. Although it might still be young, based on my experience, it's the last piece missing for delivering a complete data infrastructure that can operationalize all the data a company has.&lt;/p&gt;

&lt;p&gt;As in the case of the two previous product categories, reverse-ETL has more in common with them than differences. Reverse-ETL is almost an extension or mirror of an ELT pipeline.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#there-is-no-value-in-using-multiple-data-pipeline-products"&gt;
  &lt;/a&gt;
  There is no Value in Using Multiple Data Pipeline Products.
&lt;/h3&gt;

&lt;p&gt;We now have three data pipeline product categories - ETL/ELT, Customer Data Pipelines, and reverse-ETL - and the question must be asked, what's the value of having three different pieces of infrastructure and three different vendors that deliver these pipelines?&lt;/p&gt;

&lt;p&gt;Based on the experience I have accumulated by building an ELT product and company, there's no value for the customer. On the contrary, there's less value delivered, larger costs, and more complex infrastructure that hurts the data quality.&lt;/p&gt;

&lt;p&gt;Why does this happen so frequently, then?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-a-unified-pipeline-is-difficult-but-the-reward-will-be-huge"&gt;
  &lt;/a&gt;
  Building a Unified Pipeline is Difficult, but the Reward will be Huge
&lt;/h3&gt;

&lt;p&gt;Building a product that satisfies all the above use cases requires enormous talent and experience from a technical perspective. Even if you can put the team together, it's still difficult when you are trying to deliver an MVP at the highest possible velocity.&lt;/p&gt;

&lt;p&gt;From a business perspective, there are too many customer personas that you need to sell to. Is the primary customer for this type of unified data pipeline product a Data Engineer, a Product Manager, or someone in Marketing? It could be anyone, all three, or even someone else in the organization. It's hard to build scalable and repeatable GTM motions around a product that involves so many customer personas.&lt;/p&gt;

&lt;p&gt;If someone can manage to deliver that platform, the reward will be huge, which is the kind of challenge that motivates entrepreneurs like me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deciding-to-merge-blendo-and-rudderstack"&gt;
  &lt;/a&gt;
  Deciding to Merge Blendo and RudderStack
&lt;/h2&gt;

&lt;p&gt;When I met Soumyadeb (referred to as Soumya going forward), the founder and CEO of RudderStack, I saw a person with deep technical skills and a passion for building companies. He had already exited his previous company and was obsessed with solving the problem of dealing with customer data at scale.&lt;/p&gt;

&lt;p&gt;We started exchanging notes, and I quickly figured out that we were attacking the same problem from different angles. It didn't take long to figure out that the two products together made a lot of sense but deciding to merge your company with another requires more than that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#product-alignment"&gt;
  &lt;/a&gt;
  Product Alignment
&lt;/h3&gt;

&lt;p&gt;When we met, RudderStack had already built a very performant and scalable Customer Data Pipeline platform. At Blendo, we had built a scalable and performant ELT platform. RudderStack had perfected the deployment of the platform following a data-control plane model, while Blendo is a perfect example of a SaaS cloud delivery model. RudderStack is an expert in Customer Data, while we at Blendo, experts in ELT.&lt;/p&gt;

&lt;p&gt;It made total sense to both Soumya and me. We can combine our technical and business expertise, bring two of the three pieces of the data pipeline puzzle together, and focus on how we can deliver a complete data pipeline infrastructure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-team"&gt;
  &lt;/a&gt;
  The Team
&lt;/h3&gt;

&lt;p&gt;Both the technical and business leadership of RudderStack is built with entrepreneurs who had experience building at least one other Silicon Valley company. That's super important because, as I mentioned earlier, building a business around such a product is going to be hard, and you need people with experience and extreme grit. I recognized both in the RudderStack team.&lt;/p&gt;

&lt;p&gt;Getting a group of people with such experience, grit, and vision and making them work in harmony without issues is very hard. Ego and stubbornness are the traits of these people. For that reason, the role of the CEO is crucial for the success of the team. In Soumya, I recognized all the traits that a leader needs for this hard task, and so far, he has delivered beyond my expectations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-challenge-and-experience"&gt;
  &lt;/a&gt;
  The Challenge and Experience
&lt;/h3&gt;

&lt;p&gt;Finally, there were also a couple of personal reasons that helped me make this decision.&lt;/p&gt;

&lt;p&gt;First, the challenge itself. The harder the problem I'm trying to solve, the more excited I get. When I started Blendo, I knew the opportunity was huge, but just now, I realize how big. Unifying data pipelines under one platform and getting this product to market is the type of challenge that keeps me awake at night because of excitement. I knew it wouldn't be easy to find another opportunity like this.&lt;/p&gt;

&lt;p&gt;Second, my passion is to build technology companies, and I want to experience every part of it while also growing professionally. Deciding to join an early-stage company offers me continuity in my journey, allowing me to grow the parts of my career that I didn't get to with Blendo. No vacation in between. I love being on the grind.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-new-and-exciting-beginning"&gt;
  &lt;/a&gt;
  A New and Exciting Beginning
&lt;/h2&gt;

&lt;p&gt;In just a year, we managed to build a company with 50 employees across three different countries, all during COVID-19 lockdowns. That's probably the biggest testament to the level of professionalism the RudderStack team has.&lt;/p&gt;

&lt;p&gt;We have our first version of the unified data pipeline platform in production, with hundreds of customers using it to collect, process, and operationalize billions of events and rows per month.&lt;/p&gt;

&lt;p&gt;The velocity we have achieved together in delivering product and business results is amazing, and this is just the beginning.&lt;/p&gt;

&lt;p&gt;I am extremely confident about what we as RudderStack can achieve, and I couldn't be more excited about the future of RudderStack and the industry we are part of.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sign-up-for-free-and-start-sending-data"&gt;
  &lt;/a&gt;
  Sign up for Free and Start Sending Data
&lt;/h2&gt;

&lt;p&gt;Test out our event stream, ELT, and reverse-ETL pipelines. Use our HTTP source to send data in less than 5 minutes, or install one of our 12 SDKs in your website or app. &lt;a href="https://app.rudderlabs.com/signup?type=freetrial/"&gt;Get started&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>blendo</category>
      <category>dataengineering</category>
      <category>etl</category>
      <category>cdp</category>
    </item>
    <item>
      <title>Open Source Analytics Stack: Bringing Control, Flexibility, and Data-Privacy to Your Analytics</title>
      <author>RudderStack</author>
      <pubDate>Thu, 25 Nov 2021 10:47:24 +0000</pubDate>
      <link>https://dev.to/rudderstack/open-source-analytics-stack-bringing-control-flexibility-and-data-privacy-to-your-analytics-15k6</link>
      <guid>https://dev.to/rudderstack/open-source-analytics-stack-bringing-control-flexibility-and-data-privacy-to-your-analytics-15k6</guid>
      <description>&lt;p&gt;&lt;em&gt;Thank you Yakko Majuri from&lt;/em&gt; &lt;a href="https://posthog.com/"&gt;&lt;em&gt;PostHog&lt;/em&gt;&lt;/a&gt; &lt;em&gt;for coming up with the idea for this article and for your feedback and contributions to it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A data analytics stack enables all of the teams across your organization to look at important metrics and make data-driven decisions. It integrates different technologies needed to efficiently collect, store, transform, and analyze your data and to derive critical insights from it.&lt;/p&gt;

&lt;p&gt;When it comes to using an analytics stack, businesses are often faced with two choices - buy one or more proprietary tools or build an open-source analytics stack. While proprietary tools often offer best-in-class analytics and data management services, they also have some major downsides that include premium pricing plans, vendor lock-in, limited flexibility, and, often, no ability to host the solution on your own infrastructure.&lt;/p&gt;

&lt;p&gt;These downsides as well as the high level of sophistication of today's open-source tools are why we make the argument that you should build an open-source analytics stack. In this post, we'll talk about why you should use open-source software to build your analytics stack and the types of tools you need along with some popular open-source examples of each.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-an-opensource-analytics-stack"&gt;
  &lt;/a&gt;
  Why an Open-Source Analytics Stack?
&lt;/h2&gt;

&lt;p&gt;Setting up your analytics stack with proprietary software often allows you to get started quickly but comes at the significant cost of data ownership. This often makes these solutions unsuitable for large enterprises, who either build key parts of their own stack from scratch or require extensive due diligence, to ensure compliance with their own security protocols as well as regulations such as GDPR and CCPA, before incorporating a new proprietary tool into their processes.&lt;/p&gt;

&lt;p&gt;Open-source software, on the other hand, reduces the concerns regarding data privacy and ownership, since users can deploy the software in their own infrastructure. First, companies can ensure the software meets their requirements, as open-source software gets rid of the "black box" effect, allowing anyone to inspect the code that they're running. Second, not sending any data to third parties makes compliance with enterprise security protocols and data legislation easier. And, most importantly, having full access to the underlying data you're processing makes it much simpler to perform custom analytics, run ETL between platforms, and even tweak the software to your specific use-cases.&lt;/p&gt;

&lt;p&gt;Open-source software also offers better flexibility in terms of the tools you use to build your stack. You aren't tied to a handful of proprietary solutions that it fiscally makes sense to run multiple business processes through, inevitably delivering less than optimal performance across many, if not all, of those processes. Using open-source tools allows you to, instead, use the best solution to solve each problem. This encourages teams to innovate and gives them the freedom to leverage better tools and features than what many proprietary solutions deliver.&lt;/p&gt;

&lt;p&gt;Proprietary tools make you heavily dependent on vendors for updates, bug fixes, and more. Open source products help prevent this vendor lock-in, since users themselves can make or suggest changes to the product, without having to rely on vendors for updates and bug fixes. It's also easier to migrate away from a tool when you're in full control of its deployment and the data it handles.&lt;/p&gt;

&lt;p&gt;Additionally, a lot of this proprietary software is ridiculously expensive. If you don't have a six- or seven-figure budget for an analytics stack, open-source tooling is really your best choice. Open-source software, in addition to generally being cheaper to try out at the early stages, allows companies to more easily scale their infrastructure up and down as needed to cope with fluctuating volumes, optimizing for lower costs as a result. Moreover, support is not limited to the company that developed the software, as it can be sourced from the open-source community for free.&lt;/p&gt;

&lt;p&gt;To achieve the control, flexibility, and data privacy of open source, you often have to build tools in-house. However, leveraging existing, high-quality, open-source software means significantly reducing development and product costs, for what is likely a much higher quality and more easily maintained solution than most can build in-house.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-an-opensource-analytics-stack-look-like"&gt;
  &lt;/a&gt;
  What does an Open-Source Analytics Stack Look Like?
&lt;/h2&gt;

&lt;p&gt;A great analytics stack should be able to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Integrate data (in different formats) sitting within multiple platforms.&lt;/li&gt;
&lt;li&gt;  Ingest data into a storage system (a data warehouse).&lt;/li&gt;
&lt;li&gt;  Clean and Transform data for different use cases.&lt;/li&gt;
&lt;li&gt;  Use transformed data for analytics like visualization or machine learning.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's what an ideal open-source analytics stack would look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mjMsQQL5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/97bpcflt/production/b9261bb8ade180b3281976b258d8a42c91507eb8-630x354.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mjMsQQL5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/97bpcflt/production/b9261bb8ade180b3281976b258d8a42c91507eb8-630x354.png" alt="image-b9261bb8ade180b3281976b258d8a42c91507eb8-630x354-png" width="630" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An Ideal Open-Source Analytics Stack&lt;/p&gt;

&lt;p&gt;Our goal is to help you understand how building your entire data analytics stack with completely open source solutions can help your business scale with minimal cost and a high level of security.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-tools-make-up-an-opensource-analytics-stack"&gt;
  &lt;/a&gt;
  What Tools Make up an Open-Source Analytics Stack?
&lt;/h2&gt;

&lt;p&gt;Almost all data analytics systems follow the same basic approach for setting up their analytics stack: data collection, data processing, and data analytics. The tools used to perform each of these activities form the analytics stack. An open-source analytics stack is no different, just that it uses open-source tools to obtain the same results or better than proprietary tools.&lt;/p&gt;

&lt;p&gt;Let's understand each of the processes in detail and how open source tools contribute to each process in the open-source analytics stack.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-ingestion-and-transformation"&gt;
  &lt;/a&gt;
  Data Ingestion and Transformation
&lt;/h3&gt;

&lt;p&gt;The primary step for collecting your data for analytics is to ingest it from all your sources including your in-house applications, SaaS tools, data from your IoT devices, and all other sources. Various tools are available to make this process a seamless experience.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#etl-vs-elt"&gt;
  &lt;/a&gt;
  ETL vs ELT
&lt;/h4&gt;

&lt;p&gt;Until recently, data ingestion followed a simple ETL (Extract, Transform, and Load) process in which data was collected from a source, realigned to fit the properties of a destination system or business requirements, and then loaded into that system. Creating in-house ETL tools would mean taking developers away from the user-facing products which put the accuracy, availability, and consistency of the analytics environment at risk. While commercially packaged ETL solutions are available, an open-source alternative is a great option. One such example is Singer (&lt;a href="https://www.singer.io/"&gt;website&lt;/a&gt;, &lt;a href="https://github.com/singer-io/"&gt;GitHub&lt;/a&gt;), an open-source ETL tool used to program connectors for sending data between any custom sources and targets like web APIs and files.&lt;/p&gt;

&lt;p&gt;Due to the rise in cloud-based data warehouses, businesses can directly load all the raw data into the data warehouse without prior transformations. This process is known as ELT (Extract, Load, Transform) and gives data and analytics teams freedom to develop ad-hoc transformations based on their particular needs. ELT became popular as the cloud's processing power and scale became better suited to transforming data. DBT (&lt;a href="https://www.getdbt.com/"&gt;website&lt;/a&gt;, &lt;a href="https://github.com/fishtown-analytics/dbt/"&gt;GitHub&lt;/a&gt;) is a popular open-source tool recommended for ELT and allows businesses to transform data in their warehouses more effectively. It's a great pairing with with RudderStack's &lt;a href="https://rudderstack.com/product/cloud-extract/"&gt;Cloud Extract&lt;/a&gt; ETL tool.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#realtime-data-streams"&gt;
  &lt;/a&gt;
  Real-Time Data Streams
&lt;/h4&gt;

&lt;p&gt;With the increase in real-time data streams and event streams, certain use cases emerged that require access to real-time data such as financial services risk reporting or detecting a credit card fraud. Real-time streams can be obtained using a stream processing framework like Apache Kafka (&lt;a href="https://kafka.apache.org/"&gt;website&lt;/a&gt;, &lt;a href="https://github.com/apache/kafka/"&gt;GitHub&lt;/a&gt;). The focus is to direct the stream of data from various sources into reliable queues where data can be automatically transformed, stored, analyzed and reported concurrently.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#customer-data-platform-cdp"&gt;
  &lt;/a&gt;
  Customer Data Platform (CDP)
&lt;/h4&gt;

&lt;p&gt;Talking about successful data ingestion tools, most businesses rely increasingly on different Customer Data Platforms (CDPs) that track, collect, and ingest data from multiple sources and systems into a single platform to get a unified customer view. Apache Unomi (&lt;a href="https://unomi.apache.org/"&gt;website&lt;/a&gt;, &lt;a href="https://github.com/apache/unomi/"&gt;GitHub&lt;/a&gt;) is a perfect example of an open-source CDP that ingests data and collects it in one place.&lt;/p&gt;

&lt;p&gt;However, limitations to traditional CDPs, especially around connecting to best-of-breed customer tooling and exposing data for use across an organization have driven a new generation of non-CDPs. Solutions like Snowplow's (&lt;a href="https://snowplowanalytics.com/"&gt;website&lt;/a&gt;, &lt;a href="https://github.com/snowplow/"&gt;GitHub&lt;/a&gt;) data delivery platform and RudderStack's (&lt;a href="https://rudderstack.com/"&gt;website&lt;/a&gt;, &lt;a href="https://github.com/rudderlabs/rudder-server/"&gt;GitHub&lt;/a&gt;) customer data platform for developers ingest data from a multitude of sources, apply in-stream transformations, and route data to your data warehouse, like Snowplow, or your warehouse plus your preferred customer tooling destinations for activation, like RudderStack.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-warehouses"&gt;
  &lt;/a&gt;
  Data Warehouses
&lt;/h3&gt;

&lt;p&gt;This is the next important piece of the analytics stack. Data warehouses act like a common repository for companies to store data collected from different sources where it can be transformed or combined for different use cases. Data warehouses store both raw and transformed data and can be easily accessed by all employees within an organization. They are often similar to a traditional database, but many traditional databases were designed to store data based on and be accessed by specific domains like finance, human resources, and so on, which results in data silos and disconnected data. Over the years, as cloud data warehousing has taken roots, more and more companies are migrating from an on-premise to a modern, cloud data warehouse.&lt;/p&gt;

&lt;p&gt;Moreover, using open-source warehouse tools can allow unlocking additional insights from your data in real-time and at a lesser cost. PostgreSQL (&lt;a href="https://www.postgresql.org/"&gt;website&lt;/a&gt;, &lt;a href="https://git.postgresql.org/"&gt;repo&lt;/a&gt;) is a popular example of an efficient and low-cost data warehousing solution. Another example is ClickHouse (&lt;a href="https://clickhouse.tech/"&gt;website&lt;/a&gt;, &lt;a href="https://github.com/ClickHouse/ClickHouse/"&gt;GitHub&lt;/a&gt;), an open-source, analytics-focused DBMS that allows generating analytical reports from data in real-time using SQL.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-consumers"&gt;
  &lt;/a&gt;
  Data Consumers
&lt;/h3&gt;

&lt;p&gt;After your data is ingested and transformed, it is sent to different platforms to leverage cutting-edge analytics and get more out of your data. There are various tools available for your different analytics needs. We have curated a few leading open source tools that will fit right into your analytics stack and provide a lot of valuable insight.&lt;/p&gt;

&lt;p&gt;Matomo (&lt;a href="https://matomo.org/"&gt;website&lt;/a&gt;, &lt;a href="https://github.com/matomo-org/matomo/"&gt;GitHub&lt;/a&gt;) is an open-source web analytics tool and calls itself a Google Analytics alternative. Matomo gives you valuable insights into your website's visitors, marketing campaigns, etc., making it easy to optimize your strategy and online experience of your visitors.&lt;/p&gt;

&lt;p&gt;The self-hosted PostHog (&lt;a href="https://posthog.com/"&gt;website&lt;/a&gt;, &lt;a href="https://github.com/PostHog/posthog/"&gt;GitHub&lt;/a&gt;) is an excellent open-source alternative for product analytics and can be easily integrated into your infrastructure. You can easily analyze how customers interact with your product, the user traffic, and ways to improve your user retention.&lt;/p&gt;

&lt;p&gt;Countly (&lt;a href="https://count.ly/"&gt;website&lt;/a&gt;, &lt;a href="https://github.com/Countly/"&gt;GitHub&lt;/a&gt;) is also an open-source product analytics platform that is designed primarily for marketing organizations. It helps marketers track website information (website transactions, campaigns, and sources that led visitors to the website, etc.). Countly also collects real-time mobile analytics metrics like active users, time spent in-app, customer location, etc., in a unified view on your dashboard.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#business-intelligence"&gt;
  &lt;/a&gt;
  Business Intelligence
&lt;/h3&gt;

&lt;p&gt;Business intelligence (BI) has become prevalent in nearly every organization to get a regular health check on their business operations. BI provides you with excellent ways to analyze your historical data, apply learnings to your current operations, and make better-informed business decisions for your future. Every business is different with different goals, so choosing a BI tool that exactly fits your use case is essential.&lt;/p&gt;

&lt;p&gt;With self-service dashboards, business leaders can fully leverage BI tools to understand the impact of their decisions on the business. BI tools also provide ad-hoc analysis with customizable features such as data filters and data grouping to find interesting trends. They connect directly to your data warehouse and can be applied to any set of transformed data in your warehouse.&lt;/p&gt;

&lt;p&gt;Open-source BI platforms such as Metabase (&lt;a href="https://www.metabase.com/"&gt;website&lt;/a&gt;, &lt;a href="https://github.com/metabase/metabase/"&gt;GitHub&lt;/a&gt;) and Apache SuperSet (&lt;a href="https://superset.apache.org/"&gt;website&lt;/a&gt;, &lt;a href="https://github.com/apache/incubator-superset/"&gt;GitHub&lt;/a&gt;) are easy to deploy without IT involvement. Metabase lets you build dashboards from the data in your warehouse easily, with no SQL, or, if you have data engineering or science know-how, inside more powerful and flexible notebooks or with SQL itself. Similarly, Apache SuperSet helps businesses explore and visualize data from simple line charts to detailed geospatial charts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ml-and-ai-for-analytics"&gt;
  &lt;/a&gt;
  ML and AI for Analytics
&lt;/h3&gt;

&lt;p&gt;If implemented and trained well, machine learning (ML) and artificial intelligence (AI) can rapidly and accurately spot actionable trends in your data that would take even the best data science teams months or years to do manually. They are notoriously difficult to implement and train well though, generally requiring large, rich datasets for training with a predilection to pick up and emphasize any biases in the training data. That is one of the big reasons that these advanced analytics tools may not be implemented by many data companies, even less so full-fledged, but, if done well, they can add tremendous value to your data.&lt;/p&gt;

&lt;p&gt;ML allows you to input transformed or modeled data into platforms such as KNIME (&lt;a href="https://www.knime.com/"&gt;website&lt;/a&gt;, &lt;a href="https://github.com/knime/"&gt;GitHub&lt;/a&gt;), deployed on open source tools like R, Python, and so on, to train, evaluate, and deploy models. These models integrate with your company's existing products to create customer-facing features like a recommendation engine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-your-own-opensource-analytics-stack"&gt;
  &lt;/a&gt;
  Build Your own Open-Source Analytics Stack
&lt;/h2&gt;

&lt;p&gt;Building a completely open-source analytics stack can be challenging. However, as your business evolves and the systems you use to evolve, your data evolves too, and your needs change. You will have to look for new data tools to scale and grow. An open-source analytics stack will let you test and choose the best data tools for your company without the cost and security concerns presented by many proprietaries, hosted SaaS tools. As you can see in this article, the variety of high-quality, open-source data tools span the whole analytics stack, frequently with multiple options at each layer. The number of these tools and coverage of the analytics stack has been increasing and will continue to increase in the future. So as time goes on, your open-source analytics stack will only get better and better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sign-up-for-free-and-start-sending-data"&gt;
  &lt;/a&gt;
  Sign up for Free and Start Sending Data
&lt;/h2&gt;

&lt;p&gt;Test out our event stream, ELT, and reverse-ETL pipelines. Use our HTTP source to send data in less than 5 minutes, or install one of our 12 SDKs in your website or app. &lt;a href="https://app.rudderlabs.com/signup?type=freetrial/"&gt;Get started&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>privacy</category>
      <category>analytics</category>
      <category>dataanalytics</category>
      <category>dataengineering</category>
    </item>
    <item>
      <title>How to Build a News Aggregator App using Strapi and Nuxtjs  </title>
      <author>Shada </author>
      <pubDate>Thu, 25 Nov 2021 10:30:18 +0000</pubDate>
      <link>https://dev.to/strapi/how-to-build-a-news-aggregator-app-using-strapi-and-nuxtjs-23hj</link>
      <guid>https://dev.to/strapi/how-to-build-a-news-aggregator-app-using-strapi-and-nuxtjs-23hj</guid>
      <description>&lt;p&gt;If you are an avid reader, you might have a News Aggregator app installed on your device. Wouldn't it be awesome to create your own News Aggregator app that you can control and customize according to your needs?&lt;/p&gt;

&lt;p&gt;This is what you'll be doing today by creating a News Aggregator app using Strapi and Nuxt.js.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://strapi.io/"&gt;Strapi&lt;/a&gt; is a headless CMS (Content Management System) based on Node.js and builds APIs. Strapi provides a UI where you can develop your collection types and subsequent APIs to fetch the data from Strapi using REST or GraphQL API. The best thing about Strapi is that it is completely open-source and self-hosted.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nuxtjs.org"&gt;Nuxt.js&lt;/a&gt; is a framework for building Vue.js apps that are universal. It means the code written in Nuxt.js can run on both client and server, offering Client Side Rendering and Server Side Rendering simultaneously.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#goal"&gt;
  &lt;/a&gt;
  Goal
&lt;/h2&gt;

&lt;p&gt;This tutorial aims to learn about Strapi and Nuxt.js by building a News Aggregator app with Strapi and Nuxt.js. In this app, you'll:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn to set up Strapi Collection types&lt;/li&gt;
&lt;li&gt;Learn to set up Frontend app using Nuxt.js&lt;/li&gt;
&lt;li&gt;Use CRON jobs to fetch news items automatically&lt;/li&gt;
&lt;li&gt;Add Search capabilities&lt;/li&gt;
&lt;li&gt;Register subscribers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The source code for this project is available on GitHub: &lt;a href="https://github.com/ravgeetdhillon/strapi-nuxtjs-news-app"&gt;https://github.com/ravgeetdhillon/strapi-nuxtjs-news-app&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-environment"&gt;
  &lt;/a&gt;
  Setting Up the Environment
&lt;/h2&gt;

&lt;p&gt;Here is what you’ll need to get started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node.js - This tutorial uses Node v14.18.x&lt;/li&gt;
&lt;li&gt;Strapi - This tutorial uses Strapi v3.6.x&lt;/li&gt;
&lt;li&gt;Nuxt.js - This tutorial uses Nuxt.js v2.15.x&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The entire source code for this tutorial is available in this &lt;a href="https://github.com/ravgeetdhillon/strapi-nuxtjs-news-app"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting Up Project&lt;/strong&gt;&lt;br&gt;
You'll need a master directory that holds the code for both the frontend (Nuxt.js) and backend (Strapi). Open your terminal, navigate to a path of your choice, and create a project directory by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    &lt;span class="nb"&gt;mkdir &lt;/span&gt;strapi-nuxtjs-news-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;strapi-nuxtjs-news-app&lt;/code&gt; directory, you’ll install both Strapi and Nuxt.js projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-strapi"&gt;
  &lt;/a&gt;
  Setting Up Strapi
&lt;/h2&gt;

&lt;p&gt;In your terminal, execute the following command to create the Strapi project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npx create-strapi-app backend &lt;span class="nt"&gt;--quickstart&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will create a Strapi project with quickstart settings in the backend directory.&lt;br&gt;
Once the execution completes for the above command, your Strapi project will start on port &lt;em&gt;1337&lt;/em&gt; and open up &lt;a href="http://localhost:1337/admin/auth/register-admin"&gt;localhost:1337/admin/auth/register-admin&lt;/a&gt; in your browser. At this point, set up your &lt;strong&gt;administrative user&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hdPZlrAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765233795_localhost_1337_admin_auth_register-admin%2B1%2B1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hdPZlrAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765233795_localhost_1337_admin_auth_register-admin%2B1%2B1.png" alt="" width="880" height="650"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter your details and click the &lt;strong&gt;Let's Start&lt;/strong&gt; button, and you'll be taken to the Strapi dashboard.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating Feed Sources Collection Type&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Under the &lt;strong&gt;Plugins&lt;/strong&gt; header in the left sidebar, click the &lt;strong&gt;Content-Types Builder&lt;/strong&gt; tab and then click &lt;strong&gt;Create new collection type&lt;/strong&gt; to create a new Strapi collection.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hRnAjoEY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765250631_localhost_1337_admin_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hRnAjoEY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765250631_localhost_1337_admin_.png" alt="" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a new collection type with &lt;em&gt;Display name&lt;/em&gt; - &lt;strong&gt;feedsources&lt;/strong&gt; and click &lt;strong&gt;Continue&lt;/strong&gt; in the modal that appears.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hm5TVTQ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765270453_localhost_1337_admin_plugins_content-type-builder_content-types_plugins__users-permissions.permission_5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hm5TVTQ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765270453_localhost_1337_admin_plugins_content-type-builder_content-types_plugins__users-permissions.permission_5.png" alt="" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, create two fields for this collection type:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;link&lt;/strong&gt; - &lt;em&gt;Text&lt;/em&gt; field with &lt;em&gt;Short text&lt;/em&gt; type&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;enabled&lt;/strong&gt; - &lt;em&gt;Boolean&lt;/em&gt; field&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you have added all these fields, click the &lt;strong&gt;Finish&lt;/strong&gt; button and save your collection type by clicking the &lt;strong&gt;Save&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G3-8XeIC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765307662_localhost_1337_admin_plugins_content-type-builder_content-types_plugins__users-permissions.permission_6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G3-8XeIC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765307662_localhost_1337_admin_plugins_content-type-builder_content-types_plugins__users-permissions.permission_6.png" alt="" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating News Items Collection Type&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the same way, as you created the Feedsources collection type, create a collection type for storing news items.&lt;/p&gt;

&lt;p&gt;In the modal that appears, create a new collection type with &lt;em&gt;Display name&lt;/em&gt; - &lt;strong&gt;newsitems&lt;/strong&gt; and click &lt;strong&gt;Continue&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_SCxbusd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765327417_localhost_1337_admin_plugins_content-type-builder_content-types_plugins__users-permissions.permission.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_SCxbusd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765327417_localhost_1337_admin_plugins_content-type-builder_content-types_plugins__users-permissions.permission.png" alt="" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, create the following fields for your collection type:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;title&lt;/strong&gt; - &lt;em&gt;Text&lt;/em&gt; field with &lt;em&gt;Short text&lt;/em&gt; type&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;preview&lt;/strong&gt; - &lt;em&gt;Text&lt;/em&gt; field with &lt;em&gt;Short text&lt;/em&gt; type&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;link&lt;/strong&gt; - &lt;em&gt;Text&lt;/em&gt; field with &lt;em&gt;Short text&lt;/em&gt; type&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;creator&lt;/strong&gt; - &lt;em&gt;Text&lt;/em&gt; field with &lt;em&gt;Short text&lt;/em&gt; type&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;sponsored&lt;/strong&gt; - &lt;em&gt;Boolean&lt;/em&gt; field&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you have added all these fields, click the &lt;strong&gt;Finish&lt;/strong&gt; button and save your collection type by clicking the &lt;strong&gt;Save&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0si3UOje--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765340229_localhost_1337_admin_plugins_content-manager_collectionType_application__newsitems.newsitems_page1pageSize10_sorttitle_ASC_3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0si3UOje--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765340229_localhost_1337_admin_plugins_content-manager_collectionType_application__newsitems.newsitems_page1pageSize10_sorttitle_ASC_3.png" alt="" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating Subscribers Collection Type&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finally, you need to create a collection type for registering subscribers.&lt;br&gt;
Create a new collection type with &lt;em&gt;Display name&lt;/em&gt; - &lt;strong&gt;subscribers&lt;/strong&gt; and click &lt;strong&gt;Continue&lt;/strong&gt; in the modal that appears.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kue1lQNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765364241_localhost_1337_admin_plugins_content-manager_collectionType_application__newsitems.newsitems_page1pageSize10_sorttitle_ASC_4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kue1lQNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765364241_localhost_1337_admin_plugins_content-manager_collectionType_application__newsitems.newsitems_page1pageSize10_sorttitle_ASC_4.png" alt="" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the &lt;strong&gt;Subscribers&lt;/strong&gt; Collection type, add the following field to your collection type:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;email&lt;/strong&gt; - &lt;em&gt;Email&lt;/em&gt; field&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you have added this field, click the &lt;strong&gt;Finish&lt;/strong&gt; button and save your collection type by clicking the &lt;strong&gt;Save&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0lY_FS0p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765387985_localhost_1337_admin_plugins_content-type-builder_content-types_application__subscribers.subscribers.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0lY_FS0p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765387985_localhost_1337_admin_plugins_content-type-builder_content-types_application__subscribers.subscribers.png" alt="" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, all of your collection types are set up, and the next thing you need to do is add some data to the Feedsources collection type.&lt;/p&gt;

&lt;p&gt;You can add RSS feed URLs according to your choice, but to follow along with this tutorial, add the following URLs and enable them as well:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/feed/"&gt;https://blog.logrocket.com/feed/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/rss/"&gt;https://www.freecodecamp.org/news/rss/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.twilio.com/blog/feed"&gt;https://www.twilio.com/blog/feed&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--41x9_Ot_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765415204_localhost_1337_admin_plugins_content-type-builder_content-types_application__subscribers.subscribers%2B1.png" alt="" width="880" height="587"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, you have enough data in your Feedsources collection type to fetch the news items from these feeds.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#automating-news-fetching-from-feed-urls"&gt;
  &lt;/a&gt;
  Automating News Fetching from Feed URLs
&lt;/h2&gt;

&lt;p&gt;To automate the fetching of news items from the feed URLs, you can take advantage of CRON jobs in Strapi, which allows you to run tasks regularly or at a particular time. For this app, it would be better to check for the new news items and then add them to the Newsitems collection type every day at a specific time.&lt;/p&gt;

&lt;p&gt;You can use the &lt;a href="https://www.npmjs.com/package/rss-parser"&gt;RSS-parser&lt;/a&gt; NPM package to parse the RSS feeds and get the metadata about the items from the blog. To install this package, open your terminal and run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    cd backend
    npm install rss-parser --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, you need to write a script to fetch the news items from the feeds and add them to the &lt;code&gt;Newsitems&lt;/code&gt; collection type.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;config&lt;/code&gt; directory, create a &lt;code&gt;feedUpdater.js&lt;/code&gt; file and add the following code to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    'use strict';

    const Parser = require('rss-parser');

    // 1
    function diffInDays(date1, date2) {
      const difference = Math.floor(date1) - Math.floor(date2);
      return Math.floor(difference / 60 / 60 / 24);
    }

    // 2
    async function getNewFeedItemsFrom(feedUrl) {
      const parser = new Parser();
      const rss = await parser.parseURL(feedUrl);
      const todaysDate = new Date().getTime() / 1000;
      return rss.items.filter((item) =&amp;gt; {
        const blogPublishedDate = new Date(item.pubDate).getTime() / 1000;
        return diffInDays(todaysDate, blogPublishedDate) === 0;
      });
    }

    // 3
    async function getFeedUrls() {
      return await strapi.services.feedsources.find({
        enabled: true,
      });
    }

    // 4
    async function getNewFeedItems() {
      let allNewFeedItems = [];

      const feeds = await getFeedUrls();

      for (let i = 0; i &amp;lt; feeds.length; i++) {
        const { link } = feeds[i];
        const feedItems = await getNewFeedItemsFrom(link);
        allNewFeedItems = [...allNewFeedItems, ...feedItems];
      }

      return allNewFeedItems;
    }

    // 5
    async function main() {
      const feedItems = await getNewFeedItems();

      for (let i = 0; i &amp;lt; feedItems.length; i++) {
        const item = feedItems[i];

        const newsItem = {
          title: item.title,
          preview: item.contentSnippet,
          link: item.link,
          creator: item.creator,
          sponsored: false,
        };

        await strapi.services.newsitems.create(newsItem);
      }
    }

    // 6
    module.exports = {
      main,
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You declare a &lt;code&gt;diffInDays&lt;/code&gt; function to calculate the number of days between the two given dates. This function is used in the &lt;code&gt;getNewFeedItemsFrom&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;getNewFeedItemsFrom&lt;/code&gt; function, you parse the feed (&lt;code&gt;feedUrl&lt;/code&gt;) using the &lt;code&gt;RSS-parser&lt;/code&gt; NPM package. Then you filter out the feed items that were created in the last 24 hours (&lt;code&gt;diffInDays === 0&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;getFeedUrls&lt;/code&gt; function, you use the Strapi service (&lt;code&gt;strapi.services&lt;/code&gt;) to get (&lt;code&gt;find&lt;/code&gt;) all the enabled (&lt;code&gt;{enabled: true}&lt;/code&gt;) feed URLs from the Feed Sources (&lt;code&gt;feedsources&lt;/code&gt;) collection type.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;getNewFeedItems&lt;/code&gt; function calls the &lt;code&gt;getFeedURLs&lt;/code&gt; to get feed URLs then and loops over the feed URLs array (&lt;code&gt;feeds&lt;/code&gt;) to fetch the new feed items (&lt;code&gt;feedItems&lt;/code&gt;) using the &lt;code&gt;getNewFeedItemsFrom&lt;/code&gt; function. Finally, the function returns all the new feed items (&lt;code&gt;allNewFeedItems&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;In the main function, you loop over the &lt;code&gt;feeditems&lt;/code&gt; array (feedItems) and construct a &lt;code&gt;newsItem&lt;/code&gt; object used to create a new news item in the NewItems Collection type.&lt;/li&gt;
&lt;li&gt;At last, the &lt;code&gt;main&lt;/code&gt; function is exported by the &lt;code&gt;feedUpdater.js&lt;/code&gt; file&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It is a good idea to export all of your tasks from a single file. So, create a &lt;code&gt;tasks.js&lt;/code&gt; file in the &lt;code&gt;config&lt;/code&gt; directory and add the following code to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    'use strict';

    async function updateFeed() {
      return await strapi.config.feedUpdater.main();
    }

    module.exports = {
      updateFeed,
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;functions&lt;/code&gt; directory, update the &lt;code&gt;cron.js&lt;/code&gt; file by adding the following code to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    'use strict';

    module.exports = {
      // 1
      '* * * * *': {
        // 2
        task: async () =&amp;gt; {
          await strapi.config.tasks.updateFeed();
        },
        // 3
        options: {
          tz: 'Asia/Kolkata',
        },
      },
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You use the CRON syntax (&lt;code&gt;* * * *&lt;/code&gt; ) to define when the specified &lt;code&gt;task&lt;/code&gt; needs to be run. In this case, it will run every minute. But this setting is only for testing purposes. Once you have verified that the CRON job works successfully, replace the &lt;code&gt;* * * * *&lt;/code&gt; with &lt;code&gt;0 12 * * *&lt;/code&gt;, which makes the CRON job run at 12:00 every day following the time zone specified. For more info about CRON syntax, you can try &lt;a href="https://crontab.guru/"&gt;https://crontab.guru/&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;task&lt;/code&gt; key is provided with the &lt;code&gt;updateFeed&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;options.tz&lt;/code&gt; is used to specify the time zone for the CRON job to run in.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, to enable the CRON jobs in Strapi, add the following config settings in the &lt;code&gt;config/server.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    module.exports = ({ env }) =&amp;gt; ({
      ...
      cron: {
        enabled: true,
      },
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, shut down the Strapi development server by pressing &lt;strong&gt;Control-C&lt;/strong&gt; and restart it by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm run develop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wait for a minute, and you'll see that the CRON job will execute and update the Newsitems collection type:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sBVmo-N6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765658619_localhost_1337_admin_plugins_content-manager_collectionType_application__newsitems.newsitems_page1pageSize10_sorttitle_ASC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sBVmo-N6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765658619_localhost_1337_admin_plugins_content-manager_collectionType_application__newsitems.newsitems_page1pageSize10_sorttitle_ASC.png" alt="" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you are happy with the result, shut down the Strapi development server and change the replace the &lt;code&gt;* * * * *&lt;/code&gt; with &lt;code&gt;0 12 * * *&lt;/code&gt; in the &lt;code&gt;functions/cron.js&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-api-permissions"&gt;
  &lt;/a&gt;
  Setting Up API Permissions
&lt;/h2&gt;

&lt;p&gt;At this point, you have enough data in your Strapi CMS to test the API.&lt;br&gt;
Open &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt; and send a &lt;em&gt;GET&lt;/em&gt; request to the Newsitems API endpoint - &lt;a href="http://localhost:1337/newsitems"&gt;localhost:1337/newsitems&lt;/a&gt;. You will not be able to access the endpoint as you have not allowed public access to it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rrJd0h-_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765676725_Screenshot_from_2021-10-27_12-36-16.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rrJd0h-_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765676725_Screenshot_from_2021-10-27_12-36-16.png" alt="" width="880" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since you want to allow public access to your &lt;code&gt;Newsitems&lt;/code&gt; collection type, so you need to configure the permissions related to the Public role. So to configure the permissions for your news items endpoint, click on the &lt;strong&gt;Settings&lt;/strong&gt; tab under the &lt;strong&gt;General&lt;/strong&gt; header and select &lt;strong&gt;Roles&lt;/strong&gt; under the &lt;strong&gt;Users &amp;amp; Permissions Plugin&lt;/strong&gt;. Click the &lt;strong&gt;Edit&lt;/strong&gt; icon to the right of the Public Role.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FbH0ePt8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765755115_localhost_1337_admin_plugins_content-type-builder_content-types_application__subscribers.subscribers_1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FbH0ePt8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765755115_localhost_1337_admin_plugins_content-type-builder_content-types_application__subscribers.subscribers_1.png" alt="" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scroll down to find the &lt;strong&gt;Permissions&lt;/strong&gt; tab and check the &lt;strong&gt;find&lt;/strong&gt; and &lt;strong&gt;findone&lt;/strong&gt; permissions for the Newsitems collection type. For the Subscribers collection type, check the &lt;strong&gt;create&lt;/strong&gt; permission to allow users to signup as subscribers. Once done, save the updated permissions by clicking the &lt;strong&gt;Save&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8drdXqiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765802479_localhost_1337_admin_plugins_content-manager_collectionType_application__newsitems.newsitems_page1pageSize10_sorttitle_ASC_5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8drdXqiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765802479_localhost_1337_admin_plugins_content-manager_collectionType_application__newsitems.newsitems_page1pageSize10_sorttitle_ASC_5.png" alt="" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go back to Postman, send a &lt;em&gt;GET&lt;/em&gt; request to the &lt;a href="http://localhost:1337/newsitems"&gt;localhost:1337/newsitems&lt;/a&gt;, and you'll get the list of news items from the Strapi.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jrr5hVL4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765824805_Screenshot_from_2021-10-27_17-25-04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jrr5hVL4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765824805_Screenshot_from_2021-10-27_17-25-04.png" alt="" width="880" height="405"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, send a &lt;em&gt;GET&lt;/em&gt; request to, for example, &lt;a href="http://localhost:1337/newsitems/7"&gt;localhost:1337/newsitems/7&lt;/a&gt;, to fetch an individual news item from the Strapi, and you'll get the individual news item with &lt;em&gt;ID&lt;/em&gt; 7 as a response from the Strapi.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vSoqZa27--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765832687_Screenshot_from_2021-10-27_17-25-27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vSoqZa27--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765832687_Screenshot_from_2021-10-27_17-25-27.png" alt="" width="880" height="405"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it for the Strapi part of the project. Next, you need to set up a Nuxt.js app and connect it with the Strapi backend.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-nuxtjs"&gt;
  &lt;/a&gt;
  Setting Up Nuxt.js
&lt;/h2&gt;

&lt;p&gt;Now that you have completely set up your Strapi project, it's time to build the Nuxt.js frontend app.&lt;/p&gt;

&lt;p&gt;Since your current terminal window is serving the Strapi project, open another terminal window and execute the following command from the project's root directory (&lt;code&gt;strapi-nuxtjs-news-app&lt;/code&gt;) to create a Nuxt.js project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npx create-nuxt-app frontend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the terminal, you'll be asked some questions about your Nuxt.js project. For this tutorial, choose the options highlighted below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NaQ2nBQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765853087_Screenshot_from_2021-10-27_12-43-18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NaQ2nBQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765853087_Screenshot_from_2021-10-27_12-43-18.png" alt="" width="679" height="292"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have answered all the questions, it will install all the dependencies.&lt;br&gt;
After the installation is complete, navigate into the &lt;code&gt;frontend&lt;/code&gt; directory and start the Nuxt.js development server by running the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    cd frontend
    npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will start the development server on port &lt;em&gt;3000&lt;/em&gt; and take you to &lt;a href="http://localhost:3000/"&gt;localhost:3000&lt;/a&gt;. The first view of the Nuxt.js website will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VUBWLyv7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765862481_localhost_3000__1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VUBWLyv7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765862481_localhost_3000__1.png" alt="" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installing @nuxtjs/strapi Module&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://strapi.nuxtjs.org/"&gt;@nuxt/strapi&lt;/a&gt; is the Nuxt module for integrating Strapi with Nuxt.js.&lt;/p&gt;

&lt;p&gt;Shut down the Nuxt.js development server by pressing &lt;strong&gt;Control-C&lt;/strong&gt; in your terminal and execute the following command to install the module for your Nuxt.js app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm &lt;span class="nb"&gt;install&lt;/span&gt; @nuxtjs/strapi &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the installation is complete, open the &lt;code&gt;nuxt.config.js&lt;/code&gt; file and add the following properties to the default object exported by &lt;code&gt;nuxt.config.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    export default {
      ...

      // 1
      modules: [
        ...
        '@nuxtjs/strapi',
      ],

      // 2
      strapi: {
        url: '&amp;lt;http://localhost:1337&amp;gt;',
        entities: ['newsitems', 'subscribers'],
      },
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above config:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You added the &lt;code&gt;@nuxtjs/strapi&lt;/code&gt; module to the &lt;code&gt;modules&lt;/code&gt; array so that Nuxt.js loads this package whenever the Nuxt.js app is initialized.&lt;/li&gt;
&lt;li&gt;You declare the &lt;code&gt;strapi&lt;/code&gt; config variable. &lt;code&gt;url&lt;/code&gt; corresponds to the URL of the Strapi server. In the &lt;code&gt;entities&lt;/code&gt; array, you can specify the collection types present in your API. This will help you to access them using the &lt;code&gt;$strapi&lt;/code&gt; object, for example - &lt;code&gt;$strapi.$newsitems&lt;/code&gt;. For more options, you can refer to this &lt;a href="https://strapi.nuxtjs.org/options"&gt;official documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Designing a Layout Page&lt;/strong&gt;&lt;br&gt;
Before you start designing the core pages of the app, you can create a &lt;strong&gt;default&lt;/strong&gt; layout that contains the styles that are applied to all the pages using the default layout.&lt;/p&gt;

&lt;p&gt;At the root of the Nuxt.js project (&lt;code&gt;frontend&lt;/code&gt;), create a &lt;code&gt;layouts&lt;/code&gt; directory. Then in the &lt;code&gt;layouts&lt;/code&gt; directory, create a &lt;code&gt;default.vue&lt;/code&gt; file and add the following code to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;template&amp;gt;
      &amp;lt;Nuxt /&amp;gt;
    &amp;lt;/template&amp;gt;

    &amp;lt;style&amp;gt;
    html,
    body {
      font-family: 'Inter';
    }

    .one-liner {
      text-overflow: ellipsis;
      overflow: hidden;
      white-space: nowrap;
    }
    &amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above layout, you have defined the &lt;strong&gt;Inter&lt;/strong&gt; font for your Nuxt.js app and created a &lt;code&gt;.one-liner&lt;/code&gt; CSS class which you'll be using later in the core pages to restrict the multiline paragraph to a single line for better UI across the app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#designing-news-pages"&gt;
  &lt;/a&gt;
  Designing News Pages
&lt;/h2&gt;

&lt;p&gt;Now that you have set up the necessary packages for developing your Nuxt.js website, you need to design the news pages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Designing All News Page&lt;/strong&gt;&lt;br&gt;
This page will fetch all of your news items from Strapi CMS and display them in the UI.&lt;br&gt;
In the &lt;code&gt;pages&lt;/code&gt; directory, open the &lt;code&gt;index.vue&lt;/code&gt; file and replace all the existing code with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;template&amp;gt;
      &amp;lt;section class="py-5"&amp;gt;
        &amp;lt;b-container&amp;gt;
          &amp;lt;b-row&amp;gt;
            &amp;lt;b-col lg="7"&amp;gt;
              &amp;lt;!-- 3 --&amp;gt;
              &amp;lt;div v-if="!newsItems"&amp;gt;Loading...&amp;lt;/div&amp;gt;
              &amp;lt;!-- 4 --&amp;gt;
              &amp;lt;div v-else&amp;gt;
                &amp;lt;h1 class="mb-5 border-bottom"&amp;gt;News&amp;lt;/h1&amp;gt;
                &amp;lt;nuxt-link to="/search"&amp;gt;Search&amp;lt;/nuxt-link&amp;gt;
                &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;
                &amp;lt;div
                  v-for="(newsItem, index) in newsItems"
                  :key="index"
                  class="mb-5"
                &amp;gt;
                  &amp;lt;news-item :item="newsItem"&amp;gt;&amp;lt;/news-item&amp;gt;
                &amp;lt;/div&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/b-col&amp;gt;
          &amp;lt;/b-row&amp;gt;
        &amp;lt;/b-container&amp;gt;
      &amp;lt;/section&amp;gt;
    &amp;lt;/template&amp;gt;

    &amp;lt;script&amp;gt;
    export default {
      layout: 'default',
      data() {
        return {
          // 1
          newsItems: null,
        };
      },
      // 2
      async created() {
        this.newsItems = await this.$strapi.$newsitems.find();
      },
    };
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You set the &lt;code&gt;newsItems&lt;/code&gt; as &lt;code&gt;null&lt;/code&gt; in the &lt;code&gt;data&lt;/code&gt; object which is passed to the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;created&lt;/code&gt; lifecycle hook, you fetch (&lt;code&gt;find()&lt;/code&gt;) all the news items (&lt;code&gt;$newsitems&lt;/code&gt;) from the Strapi (&lt;code&gt;$strapi&lt;/code&gt;) and assign the response to the &lt;code&gt;newsItems&lt;/code&gt; data variable.&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;, you check if the &lt;code&gt;newsItems&lt;/code&gt; variable is &lt;em&gt;Falsy&lt;/em&gt;, then you render a &lt;code&gt;Loading...&lt;/code&gt; message.&lt;/li&gt;
&lt;li&gt;Once the &lt;code&gt;newsItems&lt;/code&gt; variable evaluates to a &lt;em&gt;Truthy&lt;/em&gt;, you loop (&lt;code&gt;v-for&lt;/code&gt;) over it and render the &lt;code&gt;news-item&lt;/code&gt; component by passing the current &lt;code&gt;newsItem&lt;/code&gt; to the &lt;code&gt;item&lt;/code&gt; prop.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the &lt;code&gt;components&lt;/code&gt; directory, create a new file, &lt;code&gt;NewsItem.vue&lt;/code&gt; and add the following code to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;template&amp;gt;
      &amp;lt;div&amp;gt;
        &amp;lt;b-badge v-if="item.sponsored" variant="info" class="mb-2"&amp;gt;
          Sponsored
        &amp;lt;/b-badge&amp;gt;
        &amp;lt;nuxt-link :to="`/newsitems/${item.id}`" class="text-dark"&amp;gt;
          &amp;lt;h2 class="h4"&amp;gt;{{ item.title }}&amp;lt;/h2&amp;gt;
        &amp;lt;/nuxt-link&amp;gt;
        &amp;lt;p
          class="mb-1 one-liner text-muted"
          v-html="sanitizeHtml(item.preview)"
        &amp;gt;&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/template&amp;gt;

    &amp;lt;script&amp;gt;
    export default {
      props: {
        item: {
          type: Object,
          default: () =&amp;gt; ({}),
        },
      },
    };
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since you will parse the HTML from external sources, it makes your app vulnerable to &lt;a href="https://owasp.org/www-community/attacks/xss/"&gt;XSS attacks&lt;/a&gt;. You first need to sanitize the HTML and then pass it to the &lt;code&gt;v-HTML&lt;/code&gt; prop to mitigate this problem.&lt;/p&gt;

&lt;p&gt;You can use the &lt;a href="https://www.npmjs.com/package/dompurify"&gt;DOMPurify&lt;/a&gt; library to sanitize the HTML and prevent XSS attacks. In your terminal, run the following command to install this package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm &lt;span class="nb"&gt;install &lt;/span&gt;dompurify &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sanitization is used across various places in an app. So to respect the &lt;strong&gt;DRY&lt;/strong&gt; (Don't Repeat Yourself) principle, it is often a good idea to create &lt;a href="https://vuejs.org/v2/guide/mixins.html"&gt;mixins&lt;/a&gt; to make these functions available across your app without having to write the same code again and again.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;plugins&lt;/code&gt; directory, create an &lt;code&gt;index.js&lt;/code&gt; file and add the following code to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import Vue from 'vue';
    import DOMPurify from 'dompurify';

    Vue.mixin({
      methods: {
        sanitizeHtml(value) {
          return DOMPurify.sanitize(value);
        },
      },
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the above plugin to the &lt;code&gt;plugins&lt;/code&gt; array in the &lt;code&gt;nuxt.config.js&lt;/code&gt; file as it allows the Nuxt.js to execute these &lt;a href="https://go.nuxtjs.dev/config-plugins"&gt;plugins&lt;/a&gt; before rendering a page as in the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    export default {
      ...
      plugins: ['~/plugins/index.js'],
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, save your progress and start your Nuxt.js development server by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Visit &lt;a href="http://localhost:3000/articles"&gt;localhost:3000&lt;/a&gt; and you’ll see your news page rendered by Nuxt.js:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nczytClV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765915068_localhost_3000__2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nczytClV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765915068_localhost_3000__2.png" alt="" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Designing a Single News Item Page&lt;/strong&gt;&lt;br&gt;
The next step is to design a single news item page that needs to be &lt;a href="https://nuxtjs.org/docs/features/file-system-routing/"&gt;dynamic&lt;/a&gt;. You can fetch a single news item from endpoint - &lt;a href="http://localhost:1337/newsitems/:id"&gt;localhost:1337/newsitems/:id&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;pages&lt;/code&gt; directory, create a sub-directory, &lt;code&gt;newsitems&lt;/code&gt;. Then in the &lt;code&gt;newsitems&lt;/code&gt; directory, create a &lt;code&gt;_id.vue&lt;/code&gt; file and add the following code to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;template&amp;gt;
      &amp;lt;section class="py-5"&amp;gt;
        &amp;lt;b-container&amp;gt;
          &amp;lt;b-row&amp;gt;
            &amp;lt;b-col lg="7" class="mx-lg-auto"&amp;gt;
              &amp;lt;!-- 3 --&amp;gt;
              &amp;lt;div v-if="!newsItem"&amp;gt;Loading...&amp;lt;/div&amp;gt;
              &amp;lt;!-- 4 --&amp;gt;
              &amp;lt;div v-else&amp;gt;
                &amp;lt;nuxt-link to="/"&amp;gt;Back&amp;lt;/nuxt-link&amp;gt;
                &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;
                &amp;lt;b-alert v-if="newsItem.sponsored" variant="info" show&amp;gt;
                  This is a Sponsored post.
                &amp;lt;/b-alert&amp;gt;
                &amp;lt;h1 class="mb-4"&amp;gt;{{ newsItem.title }}&amp;lt;/h1&amp;gt;
                &amp;lt;div class="small mb-4"&amp;gt;
                  &amp;lt;span v-if="newsItem.creator.trim().length &amp;gt; 0"&amp;gt;
                    Written by &amp;lt;b&amp;gt;{{ newsItem.creator }}&amp;lt;/b&amp;gt;
                    &amp;lt;br /&amp;gt;
                  &amp;lt;/span&amp;gt;
                  &amp;lt;span&amp;gt;
                    Published on
                    {{ new Date(newsItem.published_at).toLocaleDateString() }}
                  &amp;lt;/span&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;p v-html="sanitizeHtml(newsItem.preview)"&amp;gt;&amp;lt;/p&amp;gt;
                &amp;lt;a :href="newsItem.link" target="_blank"&amp;gt;
                  Read on Original Blog
                  &amp;lt;!-- 5 --&amp;gt;
                  &amp;lt;ExternalIcon /&amp;gt;
                &amp;lt;/a&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/b-col&amp;gt;
          &amp;lt;/b-row&amp;gt;
        &amp;lt;/b-container&amp;gt;
      &amp;lt;/section&amp;gt;
    &amp;lt;/template&amp;gt;

    &amp;lt;script&amp;gt;
    export default {
      layout: 'default',
      data() {
        return {
          // 1
          newsItem: null,
        };
      },
      // 2
      async created() {
        const { id } = this.$route.params;
        this.newsItem = await this.$strapi.$newsitems.findOne(id);
      },
    };
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You set the &lt;code&gt;newsItem&lt;/code&gt; as &lt;code&gt;null&lt;/code&gt; in the &lt;code&gt;data&lt;/code&gt; object which is passed to the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;created&lt;/code&gt; lifecycle hook, first, you destructure the &lt;code&gt;id&lt;/code&gt; of the dynamic route from &lt;code&gt;this.$route.params&lt;/code&gt; object. Then, you use the &lt;code&gt;$strapi&lt;/code&gt; object to fetch (&lt;code&gt;findOne()&lt;/code&gt;) the news item with id (&lt;code&gt;id&lt;/code&gt;) and assign the response to the &lt;code&gt;newsItem&lt;/code&gt; data variable.&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;, you check if the &lt;code&gt;newsItem&lt;/code&gt; variable is &lt;em&gt;Falsy&lt;/em&gt;, then you render a &lt;code&gt;Loading...&lt;/code&gt; message.&lt;/li&gt;
&lt;li&gt;Once the &lt;code&gt;newsItem&lt;/code&gt; variable evaluates to a &lt;em&gt;Truthy&lt;/em&gt;, you use Vue template variables to render the UI for it.&lt;/li&gt;
&lt;li&gt;You can see that you have referenced an &lt;code&gt;&amp;lt;ExternalIcon /&amp;gt;&lt;/code&gt; component so next, you need to create one.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the &lt;code&gt;components&lt;/code&gt; directory, create an &lt;code&gt;ExternalIcon.vue&lt;/code&gt; file and add the following code to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;template&amp;gt;
      &amp;lt;svg width="12px" height="12px" viewBox="0 0 24 24"&amp;gt;
        &amp;lt;g
          stroke-width="2.1"
          stroke="currentColor"
          fill="none"
          stroke-linecap="round"
          stroke-linejoin="round"
        &amp;gt;
          &amp;lt;polyline points="17 13.5 17 19.5 5 19.5 5 7.5 11 7.5"&amp;gt;&amp;lt;/polyline&amp;gt;
          &amp;lt;path d="M14,4.5 L20,4.5 L20,10.5 M20,4.5 L11,13.5"&amp;gt;&amp;lt;/path&amp;gt;
        &amp;lt;/g&amp;gt;
      &amp;lt;/svg&amp;gt;
    &amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save your progress and wait for the server to Hot Reload. Click on any news item on the index page to open the single news item page and the page will render as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_M06mzl1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765930118_localhost_3000__3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_M06mzl1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765930118_localhost_3000__3.png" alt="" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-search-functionality"&gt;
  &lt;/a&gt;
  Adding Search Functionality
&lt;/h2&gt;

&lt;p&gt;Now that you have created a podcasts page, the next step is to design a single podcast page that needs to be &lt;a href="https://nuxtjs.org/docs/features/file-system-routing/"&gt;dynamic&lt;/a&gt; and allow the user to listen to the podcast. You can fetch your podcast from endpoint - &lt;a href="http://localhost:1337/podcasts/:id"&gt;localhost:1337/podcasts/:id&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;pages&lt;/code&gt; directory, create a &lt;code&gt;search.vue&lt;/code&gt; file and add the following code to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;template&amp;gt;
      &amp;lt;section class="py-5"&amp;gt;
        &amp;lt;b-container&amp;gt;
          &amp;lt;b-row&amp;gt;
            &amp;lt;b-col lg="7" class="mx-lg-auto"&amp;gt;
              &amp;lt;nuxt-link to="/"&amp;gt;Back&amp;lt;/nuxt-link&amp;gt;
              &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;
              &amp;lt;h1 class="mb-5 border-bottom"&amp;gt;Search News&amp;lt;/h1&amp;gt;
              &amp;lt;div class="d-flex mb-5"&amp;gt;
                &amp;lt;!-- 3 --&amp;gt;
                &amp;lt;b-form-input
                  v-model="searchQuery"
                  type="search"
                  placeholder="Search"
                  class="mr-3"
                &amp;gt;&amp;lt;/b-form-input&amp;gt;
                &amp;lt;!-- 4 --&amp;gt;
                &amp;lt;b-btn @click="searchItems"&amp;gt;Search&amp;lt;/b-btn&amp;gt;
              &amp;lt;/div&amp;gt;
              &amp;lt;div v-if="!newsItems"&amp;gt;Nothing Found&amp;lt;/div&amp;gt;
              &amp;lt;div
                v-for="(newsItem, index) in newsItems"
                v-else
                :key="index"
                class="mb-5"
              &amp;gt;
                &amp;lt;news-item :item="newsItem"&amp;gt;&amp;lt;/news-item&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/b-col&amp;gt;
          &amp;lt;/b-row&amp;gt;
        &amp;lt;/b-container&amp;gt;
      &amp;lt;/section&amp;gt;
    &amp;lt;/template&amp;gt;

    &amp;lt;script&amp;gt;
    export default {
      layout: 'default',
      // 1
      data() {
        return {
          newsItems: null,
          searchQuery: null,
        };
      },
      // 2
      methods: {
        async searchItems() {
          this.newsItems = await this.$strapi.$newsitems.find({
            _q: this.searchQuery,
          });
        },
      },
    };
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You set the &lt;code&gt;newsItems&lt;/code&gt; and &lt;code&gt;searchQuery&lt;/code&gt; as &lt;code&gt;null&lt;/code&gt; in the &lt;code&gt;data&lt;/code&gt; object which is passed to the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You declare the &lt;code&gt;searchItems()&lt;/code&gt; method which is used to search the NewsItems (&lt;code&gt;$strapi.$newsitems&lt;/code&gt;) collection type by providing the &lt;code&gt;searchQuery&lt;/code&gt; data variable as the query parameter (&lt;code&gt;_q&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The text field (&lt;code&gt;b-form-input&lt;/code&gt;) is bound to the &lt;code&gt;searchQuery&lt;/code&gt; data variable using the &lt;code&gt;v-model&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You have added a button (&lt;code&gt;b-btn&lt;/code&gt;) that runs the &lt;code&gt;searchItems&lt;/code&gt; function on button click (&lt;code&gt;@click&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Save your progress and wait for the server to Hot Reload. Go to the &lt;a href="http://localhost:3000/search"&gt;localhost:3000/search&lt;/a&gt; and try searching for a news item:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vVn10gUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765942946_localhost_3000__5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vVn10gUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765942946_localhost_3000__5.png" alt="" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#registering-subscribers"&gt;
  &lt;/a&gt;
  Registering Subscribers
&lt;/h2&gt;

&lt;p&gt;The final step to complete your News Aggregator app is to allow users to signup as subscribers.&lt;br&gt;
In the &lt;code&gt;components&lt;/code&gt; directory, create a &lt;code&gt;SubscribeBox.vue&lt;/code&gt; file and add the following code to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;template&amp;gt;
      &amp;lt;div class="bg-light"&amp;gt;
        &amp;lt;div class="p-3"&amp;gt;
          &amp;lt;p class="lead font-weight-normal mb-0"&amp;gt;Subscribe to our newsletter&amp;lt;/p&amp;gt;
          &amp;lt;p class="text-muted"&amp;gt;
            Get daily updates about things happening in the world of tech and
            business.
          &amp;lt;/p&amp;gt;
          &amp;lt;div class="d-flex flex-column"&amp;gt;
            &amp;lt;!-- 3 --&amp;gt;
            &amp;lt;b-form-input
              v-model="email"
              type="email"
              placeholder="Your Email"
              class="mb-2"
            &amp;gt;&amp;lt;/b-form-input&amp;gt;
            &amp;lt;!-- 4 --&amp;gt;
            &amp;lt;b-btn @click="addSubscriber"&amp;gt;Subscribe&amp;lt;/b-btn&amp;gt;
            &amp;lt;!-- 5 --&amp;gt;
            &amp;lt;p v-if="message" class="mt-3 mb-0"&amp;gt;{{ message }}&amp;lt;/p&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/template&amp;gt;

    &amp;lt;script&amp;gt;
    export default {
      // 1
      data() {
        return {
          email: null,
          message: null,
        };
      },
      // 2
      methods: {
        async addSubscriber() {
          const response = await this.$strapi.$subscribers.create({
            email: this.email,
          });
          if (response) {
            this.message = 'Thanks for subscribing!';
          }
        },
      },
    };
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You set the &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt; as &lt;code&gt;null&lt;/code&gt; in the &lt;code&gt;data&lt;/code&gt; object which is passed to the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You declare the &lt;code&gt;addSubscriber&lt;/code&gt; method which is used to create (&lt;code&gt;create({email: this.email})&lt;/code&gt;) a new subscriber in Subscribers Collection type (&lt;code&gt;$strapi.$subscribers&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;email&lt;/code&gt; data variable is bound to the Form Text input (&lt;code&gt;b-form-input&lt;/code&gt;) using the &lt;code&gt;v-model&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You have added a button (&lt;code&gt;b-btn&lt;/code&gt;) that runs the &lt;code&gt;searchItems&lt;/code&gt; function on the button click (&lt;code&gt;@click&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;message&lt;/code&gt; evaluates to a &lt;em&gt;Truthy&lt;/em&gt;, you render the message telling the user that they have been successfully subscribed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this moment &lt;code&gt;SubscribeBox&lt;/code&gt; is just a component, so you need to render it in a page. Open the &lt;code&gt;pages/index.vue&lt;/code&gt; file and update the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; by adding the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;template&amp;gt;
      &amp;lt;section class="py-5"&amp;gt;
        &amp;lt;b-container&amp;gt;
          &amp;lt;b-row&amp;gt;
            &amp;lt;b-col lg="7"&amp;gt;
              &amp;lt;!--  --&amp;gt;
            &amp;lt;/b-col&amp;gt;
            &amp;lt;b-col lg="1"&amp;gt;&amp;lt;/b-col&amp;gt;
            &amp;lt;b-col lg="4"&amp;gt;
              &amp;lt;SubscribeBox /&amp;gt;
            &amp;lt;/b-col&amp;gt;
          &amp;lt;/b-row&amp;gt;
        &amp;lt;/b-container&amp;gt;
      &amp;lt;/section&amp;gt;
    &amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save your progress and wait for the server to Hot Reload. Go to the &lt;a href="http://localhost:3000"&gt;localhost:3000&lt;/a&gt; and the &lt;code&gt;SubscribeBox&lt;/code&gt; component will render as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--znrT4wCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765957268_localhost_3000__1%2B1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--znrT4wCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1635765957268_localhost_3000__1%2B1.png" alt="" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Test the Subscription form by adding a valid email and click &lt;strong&gt;Subscribe&lt;/strong&gt; button. Once you get a thanks message, check out the Subscribers collection type in your Strapi CMS for the newly registered email:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---YWNU4et--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1637648192593_Screencast%2Bfrom%2B27-10-21%2B05_16_42%2BPM%2BIST%2Bonline-video-cutter.com%2B2%2B1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---YWNU4et--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1637648192593_Screencast%2Bfrom%2B27-10-21%2B05_16_42%2BPM%2BIST%2Bonline-video-cutter.com%2B2%2B1.gif" alt="" width="880" height="584"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it. Your app is complete and below is a complete overview of the app in action:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0qfO-Yt5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1637648508253_Screencast%2Bfrom%2B27-10-21%2B05_16_42%2BPM%2BIST%2Bonline-video-cutter.com%2B1%2B1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0qfO-Yt5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://paper-attachments.dropbox.com/s_979253D2F6E1AA6BFF58D4532B5A88A87639C2D0A24237B3B5DD60D063B1C399_1637648508253_Screencast%2Bfrom%2B27-10-21%2B05_16_42%2BPM%2BIST%2Bonline-video-cutter.com%2B1%2B1.gif" alt="" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's it! You have successfully set up a News Aggregator app using Nuxt.js as a frontend and Strapi as a backend. You learned about API Permissions in Strapi, CRON jobs in Strapi, implementing views in Nuxt.js, and more. The next step would be to deploy the app. You can &lt;a href="https://strapi.io/documentation/developer-docs/latest/setup-deployment-guides/deployment/hosting-guides/digitalocean.html"&gt;deploy the Strapi CMS on DigitalOcean&lt;/a&gt; and the &lt;a href="https://nuxtjs.org/deployments/netlify/"&gt;Nuxt.js app on Netlify&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The entire source code for this tutorial is available in this &lt;a href="https://github.com/ravgeetdhillon/strapi-nuxtjs-news-app"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>nuxt</category>
      <category>strapi</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Developing for Polygon and Sidechains</title>
      <author>Rounak Banik</author>
      <pubDate>Thu, 25 Nov 2021 10:23:26 +0000</pubDate>
      <link>https://dev.to/rounakbanik/developing-for-polygon-and-sidechains-4h6a</link>
      <guid>https://dev.to/rounakbanik/developing-for-polygon-and-sidechains-4h6a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In our last tutorial, we covered how to develop and deploy an &lt;a href="https://dev.to/rounakbanik/writing-an-nft-collectible-smart-contract-2nh8"&gt;NFT Collectible Smart Contract&lt;/a&gt; from scratch. Last week, we published another article showing you how to &lt;a href="https://medium.com/scrappy-squirrels/estimating-smart-contract-costs-f65acf818c26"&gt;estimate your costs&lt;/a&gt; while operating on the Ethereum mainnet and why it would be a good idea to consider a scalability solution like Polygon.&lt;/p&gt;

&lt;p&gt;In this article, we will show you how to deploy your project to the Polygon network and in the process, end up saving potentially thousands of dollars.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview-of-developing-on-sidechains"&gt;
  &lt;/a&gt;
  Overview of developing on sidechains
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DFFx_e8u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghj3xbyqu75tu82x1shp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DFFx_e8u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghj3xbyqu75tu82x1shp.png" alt="Polygon, Binance, and Fantom" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you followed our tutorial on how to create an NFT Collectible Smart Contract, then congratulations! You are already a Polygon developer. You’re also a developer on the Binance Smart Chain, the Fantom Opera Network, and any sidechain or L2 scalability solutions that are EVM compatible.&lt;/p&gt;

&lt;p&gt;This tutorial will demonstrate deployment to Polygon but the steps are almost identical for any other Ethereum sidechain and (to an extent) L2 chains like Arbitrum.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Write a smart contract like you would for the Ethereum mainnet.&lt;/li&gt;
&lt;li&gt;Recalibrate payable currency to reflect the chain’s token value.&lt;/li&gt;
&lt;li&gt;Add the sidechain network to Metamask and Hardhat configuration file.&lt;/li&gt;
&lt;li&gt;Acquire the chain’s token directly or by bridging from the Ethereum mainnet.&lt;/li&gt;
&lt;li&gt;Deploy to the sidechain by paying fees using the chain’s token.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#writing-a-smart-contract"&gt;
  &lt;/a&gt;
  Writing a Smart Contract
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h3&gt;

&lt;p&gt;You can skip this section if you completed our smart contract tutorial.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sezIsG5l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1g44d1wee1ntqs9ram9f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sezIsG5l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1g44d1wee1ntqs9ram9f.png" alt="Image description" width="880" height="483"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have already covered how to develop a smart contract for Ethereum in detail (and I have a feeling I’m mentioning this a little too often). I hope you already have your custom project ready to go. If not, you can clone a starter repository that we created.&lt;/p&gt;

&lt;p&gt;Make sure you have &lt;a href="https://git-scm.com/downloads"&gt;Git&lt;/a&gt; and run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/rounakbanik/nft-collectible-contract polygon-nft

cd polygon-nft

npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new file called &lt;code&gt;.env&lt;/code&gt; and input the following details.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;API_URL = "&amp;lt;--Rinkeby RPC URL--&amp;gt;"

PRIVATE_KEY = "&amp;lt;-- Metamask wallet private key --&amp;gt;"

ETHERSCAN_API = ""

POLYGON_URL = ""
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You won’t need &lt;code&gt;API_URL&lt;/code&gt; for this tutorial so feel free to set this to a blank string (don’t delete it though, the configuration file will break).&lt;/p&gt;

&lt;p&gt;You should already know how to get your Metamask wallet’s private key. Let &lt;code&gt;ETHERSCAN_API&lt;/code&gt; and &lt;code&gt;POLYGON_URL&lt;/code&gt; stay blank for the time being.&lt;/p&gt;

&lt;p&gt;Now, go to the &lt;code&gt;hardhat.config.js&lt;/code&gt; file and remove line 25 (the one with the &lt;code&gt;defaultNetwork&lt;/code&gt; configuration. We won’t be needing this either.)&lt;/p&gt;

&lt;p&gt;Finally, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx hardhat run scripts/run.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If this runs without any errors, congratulations! You are up to speed, and we can finally concentrate on the Polygon aspects of the project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recalibrating-price"&gt;
  &lt;/a&gt;
  Recalibrating price
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9BUI2p8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/adpemyggerdb8b8kp6m0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9BUI2p8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/adpemyggerdb8b8kp6m0.png" alt="Polygon Matic" width="880" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We set the base price of our NFT at 0.01 ETH. In other words, users would have to pay 0.01 ETH for each NFT that they minted (plus gas, of course). We encapsulate this information in line 16 of &lt;code&gt;NFTCollectible.sol&lt;/code&gt; in the &lt;code&gt;contracts&lt;/code&gt; folder of our project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y2xHhUHX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3z4ca1wpxm8xm66qvho.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y2xHhUHX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3z4ca1wpxm8xm66qvho.png" alt="VS Code" width="711" height="473"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Transactions on the Polygon sidechain aren’t conducted in ETH though. The Polygon chain has its own ERC20 token called MATIC. We, therefore, need to set our price in MATIC.&lt;/p&gt;

&lt;p&gt;At the time of writing, ETH is touching $5000 whereas MATIC is touching $2. Therefore, if we wanted our NFT to be priced the same (in terms of USD), we would price it at 25 MATIC.&lt;/p&gt;

&lt;p&gt;Let’s make a change in our contract to reflect this change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;uint public constant PRICE = 25 ether;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wait, what? Why does this say &lt;code&gt;25 ether&lt;/code&gt; and not something like &lt;code&gt;25 matic&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Solidity does not really understand what ETH is. In Solidity, the keyword ether is just a shorthand for 10¹⁸. To Solidity, the line above is the same as this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;uint public constant PRICE = 25000000000000000000;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To put it another way, you can specify payable amounts in Solidity in terms of Wei. On the mainnet, 1 ETH is 10¹⁸ Wei. On Polygon, 10¹⁸ Wei is 1 MATIC. This is a huge difference considering the difference in the price of ETH and MATIC. Always make sure you calibrate your prices correctly if you are moving to a different network!&lt;/p&gt;

&lt;p&gt;In this tutorial, we are going to be working with the Polygon Mumbai testnet and I’m going to price the NFT at 0.01 MATIC (for reasons you’ll see soon). So, I’m going to reset the line back to what it originally was.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;uint public constant PRICE = 0.01 ether;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please remember. On Polygon, this is 0.01 MATIC. &lt;strong&gt;Not 0.01 ETH.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-polygon-network-to-metamask-and-hardhat"&gt;
  &lt;/a&gt;
  Add Polygon Network to Metamask and Hardhat
&lt;/h2&gt;

&lt;p&gt;Let’s add the Polygon and Polygon MUMBAI networks to our Metamask wallet. This is really simple to do and &lt;a href="https://docs.polygon.technology/docs/develop/metamask/config-polygon-on-metamask"&gt;Polygon has a short, excellent tutorial&lt;/a&gt; on this. Here is a snapshot of my wallet connected to the Mumbai network.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TUmBLPPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6w12ifn8jk8dx9iqoi8s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TUmBLPPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6w12ifn8jk8dx9iqoi8s.png" alt="Metamask" width="360" height="599"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For Hardhat, we will use a custom RPC URL from Alchemy. Go ahead and &lt;a href="https://alchemy.com/?a=d7d81950c0"&gt;create an Alchemy account&lt;/a&gt; if you haven’t already. Next, create an App by setting the chain to Polygon and the network to Mumbai.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZPLOeSD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5t0mfhx4l06t8pmlk08n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZPLOeSD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5t0mfhx4l06t8pmlk08n.png" alt="Alchemy" width="789" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, click on &lt;strong&gt;VIEW KEY&lt;/strong&gt; for your app and get the HTTP URL. Go back to your .env file and fill in the value for &lt;code&gt;POLYGON_URL&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;POLYGON_URL = "&amp;lt;---Alchemy Polygon URL --&amp;gt;"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, our &lt;code&gt;hardhat.config.js&lt;/code&gt; file should add Mumbai as one of our deployment networks. I have done this already for you in lines 30–33.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-fake-matic"&gt;
  &lt;/a&gt;
  Get fake MATIC
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--boU76T9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6d3ld191b71ckdm2cfl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--boU76T9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6d3ld191b71ckdm2cfl.png" alt="Fake Matic" width="880" height="483"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we have configured our network on both Metamask and Hardhat, let’s proceed to get some fake MATIC.&lt;/p&gt;

&lt;p&gt;Go to &lt;a href="https://faucet.polygon.technology/"&gt;https://faucet.polygon.technology/&lt;/a&gt; and request for test tokens for the Mumbai network. Unlike Rinkeby, you shouldn’t face too many issues acquiring these tokens. You will almost always get 1 MATIC almost near instantaneously.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#note-about-polygon-and-sidechain-main-networks"&gt;
  &lt;/a&gt;
  Note about Polygon and sidechain main networks
&lt;/h3&gt;

&lt;p&gt;When you’re ready to deploy to the main Polygon network (or the sidechain of your choice), you will need to acquire real MATIC.&lt;/p&gt;

&lt;p&gt;There are two ways to do this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Buy MATIC on the Ethereum mainnet and bridge it to the Polygon network.&lt;/li&gt;
&lt;li&gt;Buy MATIC on a centralized exchange (like Wazirx or Coinbase) and transfer it directly to Metamask.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the case of sidechains, it is almost always easier and cheaper to do (2).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-to-the-polygon-mumbai-network"&gt;
  &lt;/a&gt;
  Deploy to the Polygon Mumbai network
&lt;/h2&gt;

&lt;p&gt;We’re ready to go! Run the following command on your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx hardhat run scripts/run.js --network mumbai
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vPH-O5FT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5q5ajuqf56nn2k01udk2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vPH-O5FT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5q5ajuqf56nn2k01udk2.png" alt="Terminal output" width="558" height="253"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can confirm that our contract was deployed and our NFTs were minted by visiting &lt;a href="https://mumbai.polygonscan.com/"&gt;https://mumbai.polygonscan.com/&lt;/a&gt; and searching for our contract address. As you can see above, our contract was deployed to 0xe4ad3e1d2553eCbe4Ab64cd717564dbD36d520cc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--teT4IJMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/if5vjc1wd40ri1yn8ndg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--teT4IJMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/if5vjc1wd40ri1yn8ndg.png" alt="Polygonscan" width="880" height="443"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the biggest advantages that Polygon has over other sidechains is that it is supported by OpenSea, the largest NFT marketplace in the world and the defacto platform for secondary sales for almost every popular NFT project.&lt;/p&gt;

&lt;p&gt;Visit &lt;a href="https://testnets.opensea.io/"&gt;https://testnets.opensea.io/&lt;/a&gt; and search for your contract address. You will see that your collection has already been uploaded to OpenSea almost magically.&lt;/p&gt;

&lt;p&gt;Check out our collection &lt;a href="https://testnets.opensea.io/collection/nft-collectible-2mnw3epg2h"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KTJ5Kntz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecphe7svoex8ygyy0n2c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KTJ5Kntz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecphe7svoex8ygyy0n2c.png" alt="Scrappy Squirrels on Opensea" width="880" height="527"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#verifying-our-contract"&gt;
  &lt;/a&gt;
  Verifying our contract
&lt;/h2&gt;

&lt;p&gt;As a bonus, let’s verify our contract on Polygonscan so our users are able to mint from Polygonscan directly.&lt;/p&gt;

&lt;p&gt;To do this, you will need to sign up for a &lt;a href="https://polygonscan.com/"&gt;Polygonscan account&lt;/a&gt;. Next, proceed to &lt;a href="https://polygonscan.com/myapikey"&gt;create an API key&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Go back to the &lt;code&gt;.env&lt;/code&gt; file one last time and fill in the value for &lt;code&gt;ETHERSCAN_API&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ETHERSCAN_API = "&amp;lt;--Polygonscan API key--&amp;gt;"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have kept the name &lt;code&gt;ETHERSCAN_API&lt;/code&gt; from the previous tutorial because Polygonscan is powered by Etherscan and we still use the &lt;code&gt;hardhat-etherscan&lt;/code&gt; library to verify our contract. Feel free to change the naming if you wish.&lt;/p&gt;

&lt;p&gt;Now, run the following command on your Terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx hardhat verify --network mumbai DEPLOYED_CONTRACT_ADDRESS "ipfs://QmZbWNKJPAjxXuNFSEaksCJVd1M6DaKQViJBYPK2BdpDEP/"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my case, this was the exact command I ran.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx hardhat verify --network mumbai 0xe4ad3e1d2553eCbe4Ab64cd717564dbD36d520cc "ipfs://QmZbWNKJPAjxXuNFSEaksCJVd1M6DaKQViJBYPK2BdpDEP/"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now see a small green checkmark on your contract’s Polygonscan page. More importantly, your users will be able to read your contract and call functions from it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OHmoZJmU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqbq94647pevn2zyiu94.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OHmoZJmU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqbq94647pevn2zyiu94.png" alt="Polygonscan contract page" width="880" height="481"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Congratulations! You have a good understanding of how to build for Polygon or migrate existing projects into Polygon. The great news, as I’ve stated already, is that this knowledge converts really well to any EVM-compatible network (Binance, Fantom, Arbitrum, Optimism, etc.)&lt;/p&gt;

&lt;p&gt;If you have any questions, please feel free to drop them on the &lt;a href="https://discord.gg/8UqJXTX7Kd"&gt;#suggestions-and-qna channel of our Discord&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you don’t have questions, come say hi to us on our &lt;a href="//If%20you%20don%E2%80%99t%20have%20questions,%20come%20say%20hi%20to%20us%20on%20our%20Discord%20anyway!%20Also,%20if%20you%20liked%20our%20content,%20we%20would%20be%20super%20grateful%20if%20you%20tweet%20about%20us,%20follow%20us(@ScrappyNFTs%20and%20@Rounak_Banik),%20and%20invite%20your%20circle%20to%20our%20Discord.%20Thank%20you%20for%20your%20support!"&gt;Discord&lt;/a&gt; anyway! Also, if you liked our content, we would be super grateful if you tweet about us, follow us(@ScrappyNFTs and &lt;a href="https://twitter.com/Rounak_Banik"&gt;@Rounak_Banik&lt;/a&gt;), and invite your circle to our Discord. Thank you for your support!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#about-scrappy-squirrels"&gt;
  &lt;/a&gt;
  &lt;em&gt;About Scrappy Squirrels&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.scrappysquirrels.co/"&gt;Scrappy Squirrels&lt;/a&gt; is a collection of 10,000+ randomly generated NFTs on the Ethereum Blockchain. Scrappy Squirrels are meant for buyers, creators, and developers who are completely new to the NFT ecosystem.&lt;/p&gt;

&lt;p&gt;The community is built around learning about the NFT revolution, exploring its current use cases, discovering new applications, and finding members to collaborate on exciting projects with.&lt;/p&gt;

&lt;p&gt;Join our community here: &lt;a href="https://discord.gg/8UqJXTX7Kd"&gt;https://discord.gg/8UqJXTX7Kd&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>solidity</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>The Ultimate PowerShell Terminal Guide</title>
      <author>Bek Brace</author>
      <pubDate>Thu, 25 Nov 2021 10:10:24 +0000</pubDate>
      <link>https://dev.to/bekbrace/the-ultimate-powershell-terminal-guide-2li6</link>
      <guid>https://dev.to/bekbrace/the-ultimate-powershell-terminal-guide-2li6</guid>
      <description>&lt;p&gt;Thanks to Scott Hanselman, my terminal looks fabulous, and it's not only the looks but also the productivity.&lt;/p&gt;

&lt;p&gt;You can find the whole guide on his blog (quick guide):&lt;br&gt;
&lt;a href="https://www.hanselman.com/blog/my-ultimate-powershell-prompt-with-oh-my-posh-and-the-windows-terminal"&gt;https://www.hanselman.com/blog/my-ultimate-powershell-prompt-with-oh-my-posh-and-the-windows-terminal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, there's around an hour video with details - including mistakes which I though was great for learning from such a great teacher and an expert - on YouTube :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VT2L1SXFq9U"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This is how my terminal looks like now :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hirPo9sG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwrb2ff1anrnkeddp190.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hirPo9sG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwrb2ff1anrnkeddp190.PNG" alt="Image description" width="880" height="566"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gdlNWBAM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ph87g9o02fmi1vxfi33s.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gdlNWBAM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ph87g9o02fmi1vxfi33s.PNG" alt="Image description" width="880" height="571"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enjoy !&lt;/p&gt;

</description>
      <category>bash</category>
      <category>tutorial</category>
      <category>linux</category>
      <category>github</category>
    </item>
    <item>
      <title>Newsletter to subscribe to </title>
      <author>Carlo Gino Catapang</author>
      <pubDate>Thu, 25 Nov 2021 10:04:50 +0000</pubDate>
      <link>https://dev.to/codegino/how-i-stay-updated-using-newsletters-496n</link>
      <guid>https://dev.to/codegino/how-i-stay-updated-using-newsletters-496n</guid>
      <description>&lt;p&gt;Being in a fast-paced industry,  we need to update our skills to stay relevant to perform our jobs better(to get a better salary). For me, having a short attention span is a challenge; one minute, I'm watching a YouTube tutorial, next, I'm watching random nonsense internet content. Therefore, I find subscribing to weekly newsletters a concise way to learn new things without too many distractions and information overflow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here are some on my list:&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-news-letter"&gt;
  &lt;/a&gt;
  &lt;a href="https://reactnewsletter.com/"&gt;React News Letter&lt;/a&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Stay up to date on the latest React news, tutorials, resources, and more. Delivered every Tuesday, for free.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since developing React applications are my bread and butter, this is a must for me. &lt;em&gt;If you're working on another language, there's likely a newsletter for that.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bytes"&gt;
  &lt;/a&gt;
  &lt;a href="https://bytes.dev?x=1095221753"&gt;Bytes&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#become-a-smarter-javascript-developer"&gt;
  &lt;/a&gt;
  Become a smarter JavaScript developer
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Staying informed on the JavaScript ecosystem has never been so entertaining. Delivered every Monday, for free.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Aside from providing JavaScript updates, what I like most about this newsletter is its sense of humor.&lt;/p&gt;

&lt;p&gt;Just check this one. :D&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RkeaP-lF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ictwlpdad4k44atvqel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RkeaP-lF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ictwlpdad4k44atvqel.png" width="771" height="729"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dev-community-digest"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/settings/notifications"&gt;DEV Community Digest&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;By enabling a newsletter in your settings, you will receive a weekly newsletter of a list of development-related topics that you might find interesting. You even have the option to send a periodic digest of top posts related to tags you prefer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  &lt;a href="https://messaged.com/tldr/"&gt;TLDR&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#byte-sized-news-for-busy-techies"&gt;
  &lt;/a&gt;
  Byte sized news for busy techies
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;TLDR is a daily newsletter with links and TLDRs of the most interesting stories in tech 📱, science 🚀, and coding 💻!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What I like about &lt;code&gt;TLDR&lt;/code&gt; is that it summarizes daily news so that I will not quickly get bored. If I want more details regarding specific information, I can check simply the link they provide.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#321-thursday-by-james-clear"&gt;
  &lt;/a&gt;
  &lt;a href="https://jamesclear.com/3-2-1/refer?rh_ref=e281bada"&gt;3-2-1 Thursday&lt;/a&gt; By James Clear
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#author-of-atomic-habits"&gt;
  &lt;/a&gt;
  Author of Atomic Habits
&lt;/h4&gt;

&lt;p&gt;Don't forget that we are humans(except for the bot crawling this page). To succeed as a developer, we need a balance of technical skills and soft skills. You don't want to behave like an animal during stand-up or become a keyboard warrior when addressing a Pull Request comment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#any-thoughts"&gt;
  &lt;/a&gt;
  Any thoughts?
&lt;/h3&gt;

&lt;p&gt;What do you think would be an excellent addition to the list?&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to remove the background from your video automatically and without a green screen?</title>
      <author>Julia Ilicheva</author>
      <pubDate>Thu, 25 Nov 2021 10:03:44 +0000</pubDate>
      <link>https://dev.to/jilicheva/how-to-remove-the-background-from-your-video-automatically-and-without-a-green-screen-4ojd</link>
      <guid>https://dev.to/jilicheva/how-to-remove-the-background-from-your-video-automatically-and-without-a-green-screen-4ojd</guid>
      <description>&lt;p&gt;You can remove the background from your video totally for free on the &lt;a href="https://bgrem.deelvin.com/"&gt;BgRem website&lt;/a&gt;. You are not required to possess special knowledge in video editing – artificial intelligence will remove the background quickly and without a green screen.&lt;/p&gt;

&lt;p&gt;The video editing takes 3 steps:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-upload-your-video-file-to-the-bgrem-website"&gt;
  &lt;/a&gt;
  Step 1: Upload your video file to the BgRem Website:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mxn-rTIF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8itxpn9tu0ylnlasfw5p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mxn-rTIF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8itxpn9tu0ylnlasfw5p.png" alt="the main screen" width="880" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-choose-your-video-background-from-an-extended-library-or-upload-your-background"&gt;
  &lt;/a&gt;
  Step 2: Choose your video background from an extended library or upload your background:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zg0t4jEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iquyiz712w2xqzhaqlg1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zg0t4jEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iquyiz712w2xqzhaqlg1.png" alt="the editing process screen" width="880" height="481"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-download-your-video-result"&gt;
  &lt;/a&gt;
  Step 3: Download your video result:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QyOw8HB2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzgdfkhokx5gir3gn20t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QyOw8HB2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzgdfkhokx5gir3gn20t.png" alt="save the result screen" width="880" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is no watermark in a free version, the original soundtrack remains after editing, and you get an HD video as a result. In addition, BgRem supports extensive variety of formats, such as: .mp4, .mov, .ts, .avi, .mkv, .webm, .mpg.  The maximum length of the uploaded clip is 30 seconds, that is optimal for social media posts. &lt;/p&gt;

&lt;p&gt;If your video lasts more than 30 seconds, there is a “Pro” tariff – it allows you to upload videos of unlimited length and size. The price begins at 1$ per 1 minute. &lt;/p&gt;

&lt;p&gt;There is a free BgRem application you can find on the App Store. Application users will have an opportunity to remove the background not just from their videos, but from their photos. And it’s worth trying out – because that is the only app on the App Store that can remove the background automatically and without a green screen. &lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>programming</category>
      <category>beginners</category>
      <category>background</category>
    </item>
  </channel>
</rss>
