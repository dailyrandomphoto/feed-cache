<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>40+ Frontend Projects for Beginners – Easy Ideas to Get Started Coding Frontend [Beginners - Advance]</title>
      <author>Developers</author>
      <pubDate>Mon, 01 Nov 2021 23:56:50 +0000</pubDate>
      <link>https://dev.to/devv/40-frontend-projects-for-beginners-easy-ideas-to-get-started-coding-frontend-beginners-advance-585j</link>
      <guid>https://dev.to/devv/40-frontend-projects-for-beginners-easy-ideas-to-get-started-coding-frontend-beginners-advance-585j</guid>
      <description>&lt;p&gt;&lt;span&gt;If you are a developer or just getting started with the process, then you must already be aware of how important the role of &lt;/span&gt;&lt;span&gt;developing live projects&lt;/span&gt;&lt;span&gt; are. It will not only improve your coding skills but will also help you develop a passion for it. You can start by taking up online tutorials to learn a skill or two, but it must lead to starting to build the programs eventually.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/9-projects-you-can-do-to-become-a-front-end-master/&amp;amp;ved=2ahUKEwilofe-rvjzAhVGbysKHR-RCv4QFnoECAUQAQ&amp;amp;usg=AOvVaw2t7-_QAPDVzRhEVlb4h7WW"&gt;40+ Frontend Projects for Beginners – Easy Ideas to Get Started Coding Frontend [Beginners - Advance]&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>AI Projects for Beginners – Easy Ideas to Get Started Coding AI [Beginners - Advance]</title>
      <author>Developers</author>
      <pubDate>Mon, 01 Nov 2021 23:37:00 +0000</pubDate>
      <link>https://dev.to/devv/ai-projects-for-beginners-easy-ideas-to-get-started-coding-ai-beginners-advance-1gf3</link>
      <guid>https://dev.to/devv/ai-projects-for-beginners-easy-ideas-to-get-started-coding-ai-beginners-advance-1gf3</guid>
      <description>&lt;p&gt;Artificial Intelligence has made a significant impact on our daily lives. Every time you scroll through social media, open Spotify, or do a quick Google search, you are using an application of AI. The AI industry has expanded massively in the past few years and is predicted to grow even further, reaching around 126 billion U.S. dollars by 2025. Multinational companies like IBM, Accenture, and Apple are actively hiring AI practitioners. The median salary of an AI engineer as of 2021 is $171, 715 that can go over $250,000.&lt;/p&gt;
&lt;p&gt;The field of AI is vast, and there are many areas within the industry that you can choose to specialise. Say , if you are intrigued by facial recognition systems and image generation, you can choose to work in the field of computer vision. If you’d like to build models that can converse with people and learn human language, you can work in the field of NLP (Natural Language Processing).&lt;/p&gt;
&lt;p&gt;There is a lot of work being done today for the advancement of Artificial Intelligence. Companies need AI specialists who can build and deploy scalable models to meet growing industry demands. It isn’t tough to get started in the field of AI. While there is the complexity involved in building machine learning models from scratch, most AI jobs in the industry today don’t require you to know the math behind these models. Many companies require individuals who can build AI solutions, scale them, and deploy them for the end-user. Many high-level libraries and frameworks can help you do this without an in-depth knowledge of how the models work. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/artificial-intelligence-project-for-beginners/"&gt;AI Projects for Beginners – Easy Ideas to Get Started Coding AI [Beginners - Advance]&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Nodejs Projects for Beginners – Easy Ideas to Get Started Coding JS [Beginners - Advance]</title>
      <author>Developers</author>
      <pubDate>Mon, 01 Nov 2021 23:29:58 +0000</pubDate>
      <link>https://dev.to/devv/nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-advance-50kd</link>
      <guid>https://dev.to/devv/nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-advance-50kd</guid>
      <description>&lt;p&gt;If you have decided to build your career in &lt;span&gt;NodeJS &lt;/span&gt;development, we have gathered a list of &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; for all node enthusiasts to build highly scalable &lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1" rel="noreferrer noopener"&gt;web applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These best &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; will help you gain knowledge about core node concepts, train your skill level, build a superb work portfolio, and get hired for your dream job.&lt;/p&gt;
&lt;p&gt;When you start building your first projects, it’s highly recommended for beginners in coding to create a repository for each of your projects so you will be able to learn &lt;em&gt;git&lt;/em&gt; and show your coding expertise to future employers. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1"&gt;Nodejs Projects for Beginners – Easy Ideas to Get Started Coding JS [Beginners - Advance]&lt;/a&gt;&lt;/b&gt; &lt;/p&gt;






</description>
    </item>
    <item>
      <title>Knowledge Graph Inference with Neural Embeddings</title>
      <author>Mage</author>
      <pubDate>Mon, 01 Nov 2021 23:24:10 +0000</pubDate>
      <link>https://dev.to/mage_ai/knowledge-graph-inference-with-neural-embeddings-5d59</link>
      <guid>https://dev.to/mage_ai/knowledge-graph-inference-with-neural-embeddings-5d59</guid>
      <description>&lt;p&gt;Recently, some of my work involved working with knowledge graphs. I was somewhat surprised to discover how sparse resources were on working with knowledge graphs. Most of the literature was locked in research papers that are relatively inaccessible unless you have a fair amount of time on your hands.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sT51L6DB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjvpbz6tbzcartviyccl.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sT51L6DB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjvpbz6tbzcartviyccl.jpeg" alt="Image description" width="568" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-knowledge-graph"&gt;
  &lt;/a&gt;
  What is a knowledge graph?
&lt;/h2&gt;

&lt;p&gt;Simply put, a knowledge graph is a collection of facts, in the form of two entities and a relationship: &lt;em&gt;(e1, r, e2)&lt;/em&gt;. For instance, a representation of the concept that “Tom Cruise acted in Mission Impossible” would be represented as:&lt;br&gt;
(“Tom Cruise”, 'acted_in', “Mission Impossible”)&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vbqz5XnV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n2l7r96gr8q01bj4k3mb.jpg" alt="Image description" width="533" height="299"&gt;&lt;em&gt;Photo credit: Mission Impossible&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Here is an example knowledge graph that could represent movies, genres and actors:&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c_znWVVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yuxc60yxh20i274fzxs6.png" alt="Image description" width="510" height="286"&gt;&lt;em&gt;Knowledge graph of genres, movies, and actors&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#link-inference"&gt;
  &lt;/a&gt;
  Link Inference
&lt;/h2&gt;

&lt;p&gt;Now that we have a knowledge graph, we may want to augment the data, and predict new relationships that should exist. In the knowledge graph above, we encode relationships for genres to movies, and movies to actors. If you squint at the knowledge graph above you can plausibly imagine a model that is able to learn that actors generally star in the same genre of movies. Tom Cruise usually stars in action movies, and Ben Stiller usually stars in comedies.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ApOeaWBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/klxb1jqgx2yr4nwkgss0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ApOeaWBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/klxb1jqgx2yr4nwkgss0.jpeg" alt="Image description" width="574" height="500"&gt;&lt;/a&gt;&lt;br&gt;
Notice in the knowledge graph above, there should exist a link between Ben Stiller and Tropic Thunder. (Ben Stiller acted in Tropic Thunder). Also note that we should be able to infer the type of genre each of these actors tend to act in. Tom Cruise tends to act in action movies, while Jack Black and Ben Stiller tend to star in comedies. From this information, we should be able to infer that there is likely an 'acted_in' relationship between Ben Stiller and Tropic Thunder.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#learning"&gt;
  &lt;/a&gt;
  Learning
&lt;/h2&gt;

&lt;p&gt;What learning algorithm can we use to infer this information? Recall how &lt;a href="https://blog.acolyer.org/2016/04/21/the-amazing-power-of-word-vectors/"&gt;word embeddings&lt;/a&gt; are trained. We can apply a similar strategy here. We can create a vector embedding for each entity and each relationship type, and train the embeddings such that&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1gDrfXdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czt4evirgio12b0phi04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1gDrfXdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czt4evirgio12b0phi04.png" alt="Image description" width="101" height="48"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can imagine a suitable set of embeddings look like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UL7O3mcr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shn1qplfhx6vlrowgylf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UL7O3mcr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shn1qplfhx6vlrowgylf.png" alt="Image description" width="518" height="333"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this case, the closest movie to the vector Ben Stiller + 'acted_in' is dodgeball, but the second closest is Tropic Thunder.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVW23Ce2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7npq19gonwkzaa9d3qbo.gif" alt="Image description" width="394" height="200"&gt;&lt;em&gt;Photo credit: Dodgeball&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;As for training the model, we can try to maximize the difference between the score of of a relationship that doesn’t exist: for instance the relationship (Tom Cruise, is_genre, Ben Stiller) and a relationship &lt;strong&gt;that does&lt;/strong&gt;: (Ben Stiller, 'acted_in', Dodgeball), referred to as negative sampling. This is also how word vectors are trained. Concretely:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i_ztM6QT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjoqq39luilen1xt43f0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i_ztM6QT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjoqq39luilen1xt43f0.png" alt="Image description" width="322" height="59"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Specifically, this encourages the positive score to be less than the negative score by some MARGIN amount. For instance a possible solution would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;positive = 0
negative = MARGIN
loss = positive - negative + MARGIN = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-build-it"&gt;
  &lt;/a&gt;
  Lets build it
&lt;/h2&gt;

&lt;p&gt;I built this in PyTorch and &lt;a href="https://github.com/czhu12/blogexamples/blob/master/knowledge_graph_embeddings.ipynb"&gt;posted the code here&lt;/a&gt;. However, I’ll point out some of the more interesting aspects of the implementation that I found to help make the training more stable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#negative-sampling"&gt;
  &lt;/a&gt;
  Negative Sampling
&lt;/h3&gt;

&lt;p&gt;The goal of negative sampling is to produce a fact that is incorrect. For instance (“Ben Stiller”, 'acted_in', “Oblivion”). My pseudo code is as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def generate_negative_sample():
    while (entity_1, relation, entity_2) in graph:
        entity_1 = random_entity()
        relation = random_relation()
        entity_2 = random_entity()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I found that learning was more stable when the negative samples were oversampled relative to the number of correct facts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def train(fact, embedding_model, optimizer):
    # Oversample negative entries    
    avg_loss = 0
    for i in range(40):
        embedding_model.zero_grad()
        loss = embedding_model(fact)
        loss.backward()
        optimizer.step()
        avg_loss += loss.data[0]
    return avg_loss / 10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_BYVsXTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1c4pzprnwsbfukoug2zn.png" alt="Image description" width="574" height="434"&gt;&lt;em&gt;Training loss&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Recall the goal of this model is to infer that Ben Stiller is more likely to have acted in Tropic Thunder over Mission Impossible or Oblivion. Here are the results (remember, according to our formulation, a lower score = more likely).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;score(('ben stiller', 'acted_in', 'dodgeball')) = 1.5305
score(('ben stiller', 'acted_in', 'tropic thunder')) = 2.5801
score(('ben stiller', 'acted_in', 'mission impossible')) = 3.4038
score(('ben stiller', 'acted_in', 'oblivion')) = 3.3958
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, this model is able to figure out that Ben Stiller is likely to have acted in Tropic Thunder, a comedy, more so than action movies, and it was able to learn this by modeling over the links in the graph.&lt;/p&gt;



&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YvwpA4Ag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l53hy14evy0199rm41jc.gif" alt="Image description" width="426" height="314"&gt;&lt;em&gt;Photo credit: Oblivion&lt;/em&gt;&lt;br&gt;
&lt;/center&gt;

</description>
      <category>machinelearning</category>
      <category>knowledgegraph</category>
      <category>ai</category>
      <category>embedding</category>
    </item>
    <item>
      <title>Dependency inversion explained</title>
      <author>Murilo Maia</author>
      <pubDate>Mon, 01 Nov 2021 23:02:22 +0000</pubDate>
      <link>https://dev.to/murilomaiaa/dependency-inversion-explained-3olm</link>
      <guid>https://dev.to/murilomaiaa/dependency-inversion-explained-3olm</guid>
      <description>&lt;p&gt;When we start to programming, it's usual to develop simple algorithms. Who has never created a CRUD of users? Althought, as time goes by, our knowledge increases and our challenges too.&lt;br&gt;
Now, imagine that you are developing an application where everytime the user creates his account or forget his password, the system sends to him an email. As you are getting started, you choose to use the easiest and cheaper way to send emails: using SMTP.&lt;/p&gt;

&lt;p&gt;I'm going to use Typescript in example but you can use any oriented object language.&lt;/p&gt;

&lt;p&gt;As said before, our imaginary application will send email when the user register and forgot password. Our system will send an email with different subjects and different texts and html. So, we have these 2 services and nodemailer component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// NodemailerMailProvider.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nodemailer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;SendMailParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="na"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;NodemailerMailProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;transporter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Transporter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transporter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTransport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* transport options */&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;sendMail&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;SendMailParams&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transporter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMail&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;"Our Application" &amp;lt;contact@ourapp.com&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Message sent: %s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;messageId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Preview URL: %s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTestMessageUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//SendWelcomeEmailService.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NodemailerMailProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../providers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SendWelcomeEmailService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;mailProvider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NodemailerMailProvider&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mailProvider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NodemailerMailProvider&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mailProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mailProvider&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mailProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMail&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Welcome to our application, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;b&amp;gt;Welcome to our application, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;lt;/b&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
   &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// SendForgotEmailService.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NodemailerMailProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../providers/NodemailerMailProvider&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SendForgotEmailService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;mailProvider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NodemailerMailProvider&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mailProvider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NodemailerMailProvider&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mailProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mailProvider&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mailProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMail&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Password recovery&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`A password recovery was requested`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`A &amp;lt;b&amp;gt;password recovery&amp;lt;/b&amp;gt; was requested`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
   &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But the system grows and starts to send a lot of emails. So, you decide to use Amazon SES. And now you have &lt;code&gt;SESMailProvider&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Transporter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nodemailer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-sdk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;SendMailParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="na"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SESMailProvider&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Transporter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTransport&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;SES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SES&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2010-12-01&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;us-east-1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;sendMail&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;text&lt;/span&gt;
  &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;SendMailParams&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMail&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;"Our Application" &amp;lt;contact@ourapp.com&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;html&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But now we have a problem, in the constructor of &lt;code&gt;SendForgotEmailService&lt;/code&gt; and &lt;code&gt;SendWelcomeEmailService&lt;/code&gt; we have this dependency &lt;code&gt;mailProvider: NodemailerMailProvider&lt;/code&gt;. Now we have to substitute the type of &lt;code&gt;mailProvider&lt;/code&gt; to &lt;code&gt;SESMailProvider&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;mailProvider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NodemailerMailProvider&lt;/span&gt;

&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mailProvider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NodemailerMailProvider&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mailProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mailProvider&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// now is going to be &lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;mailProvider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SESMailProvider&lt;/span&gt;

&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mailProvider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SESMailProvider&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mailProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mailProvider&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This change affects only 2 services now, but imagine that our application sends email when user log in, when we want o send some notification as a like or a new post. As the system grows, we will have a lot of actions that send an email. So, if we want to change the MailProvider we will need to change in all constructors. That's not good. To solve it, you can create an interface and make the providers implement it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// IMailProvider.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;SendMailParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="na"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IMailProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;sendMail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SendMailParams&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the providers are going to implement this interface. How both providers has the same method &lt;code&gt;sendMail&lt;/code&gt; with the same signature the only change we need to do is to add &lt;code&gt;implements IMailProvider&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;NodemailerMailProvider&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;IMailProvider&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SESMailProvider&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;IMailProvider&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And after all the services will not recive &lt;code&gt;NodemailerMailProvider&lt;/code&gt;, &lt;code&gt;SESMailProvider&lt;/code&gt; or any other implementation. They will recive an &lt;code&gt;IMailProvider&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;mailProvider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IMailProvider&lt;/span&gt;

&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mailProvider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IMailProvider&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mailProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mailProvider&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, now, we need to create the instance of the services. I'll create just for &lt;code&gt;SendWelcomeEmailService&lt;/code&gt; to avoid repetition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sendWelcomeEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SendWelcomeEmailService&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will result in a error because &lt;code&gt;SendWelcomeEmailService&lt;/code&gt; recives an &lt;code&gt;IMailProvider&lt;/code&gt;. But what is an &lt;code&gt;IMailProvider&lt;/code&gt;? &lt;code&gt;NodemailerMailProvider&lt;/code&gt; and &lt;code&gt;SESMailProvider&lt;/code&gt; are &lt;code&gt;IMailProvider&lt;/code&gt; beacuse both of them implements it. I am going to implement &lt;code&gt;SendWelcomeEmailService&lt;/code&gt; injecting &lt;code&gt;NodemailerMailProvider&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mailProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NodemailerMailProvider&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sendWelcomeEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SendWelcomeEmailService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mailProvider&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if you want to change your mail provider the only thing you will need to do is change the mail provider you inject in your services and you won't need to change anything in the service. &lt;/p&gt;

&lt;p&gt;But we still have a problem. The &lt;code&gt;IMailProvider&lt;/code&gt; is required in more than one service. Then, we need to write &lt;code&gt;const mailProvider = new NodemailerMailProvider()&lt;/code&gt; every time we need it. To solve it we can create factory methods. These methods are responsible to create the instances of our dependencies. The first factory we will create is &lt;code&gt;makeIMailProvider&lt;/code&gt; that, obviously, will be responsible to create the a implementation of &lt;code&gt;IMailProvider&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeIMailProvider&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;IMailProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NodemailerMailProvider&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and the factories for the services&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// look that the mail provider will be the same for both services and if we have another service needs IMailProvider it would use the same provider too&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mailProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeIMailProvider&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeSendWelcomeEmailService&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SendWelcomeEmailService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mailProvider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeSendForgotPasswordEmailService&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SendForgotPasswordEmailService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mailProvider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you need the services you can just&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sendWelcomeEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;makeSendWelcomeEmailService&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// or&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sendForgotPasswordEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeSendForgotPasswordEmailService&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the best part, if you want to change the implementation of &lt;code&gt;IMailProvider&lt;/code&gt; you only need to change the factory method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeIMailProvider&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;IMailProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// return new SendgridMailProvider()&lt;/span&gt;
  &lt;span class="c1"&gt;// return new MailchimpMailProvider()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SESMailProvider&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the provider returned in the factory must implement the inerface &lt;code&gt;IMailProvider&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Robert Matin in his book clean arquitecture says&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Dependency Inversion Principle (DIP) tells us that the most flexible systems are those in which source code dependencies refer only to abstractions, not to concretions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you want to see the full code check the repository in &lt;a href="https://github.com/murilomaiaa/dependency-inversion"&gt;https://github.com/murilomaiaa/dependency-inversion&lt;/a&gt;&lt;/p&gt;

</description>
      <category>braziliandevs</category>
      <category>oop</category>
    </item>
    <item>
      <title>From Ad-hoc Scripting to Workflow as Code: The Evolution of Runbooks</title>
      <author>Scott Lasica</author>
      <pubDate>Mon, 01 Nov 2021 23:00:11 +0000</pubDate>
      <link>https://dev.to/youngshatner/from-ad-hoc-scripting-to-workflow-as-code-the-evolution-of-runbooks-58a</link>
      <guid>https://dev.to/youngshatner/from-ad-hoc-scripting-to-workflow-as-code-the-evolution-of-runbooks-58a</guid>
      <description>&lt;p&gt;Unfortunately the word workflow has been used for many years to represent some very specific things in the business world (the most common being BPMN — Business Process Modeling Notation). However, at a general level it’s simply describing a set of steps done in a specific order to achieve the desired end result.&lt;/p&gt;

&lt;p&gt;Workflow as code simply means that we’re using code to orchestrate and execute a workflow, very likely in a distributed environment. In the site reliability engineering (SRE) or cloud engineering space, these workflows tend to deal with things like cost savings and incident resolution.&lt;/p&gt;

&lt;p&gt;In the early days of SRE (when it was still called &lt;a href="https://www.fylamynt.com/post/sre-vs-devops"&gt;DevOps&lt;/a&gt;), the ability to chain together specified actions with code was a much more daunting task. Let’s take what seems like a simple example: a database instance is out of storage. Assuming the engineer had the appropriate monitoring in place, they would be alerted. At that point they need to verify that it’s not a false alarm, spin up a new larger instance, copy the data over into the new one, verify the data integrity, redirect all the services using the old db to the new one, verify services are operating normally then destroy the old db instance. Engineers realized situations like this will happen often enough that they can automate some of these steps, writing code between them to at least do things like verification steps automatically.&lt;/p&gt;

&lt;p&gt;Moving forward to modern day, there are tools that can help with many of these steps. As an example, you could have PagerDuty collect data from CloudWatch and generate an incident, then using code modify the database instance storage capacity. With things like AWS RDS, the steps of create, copy, destroy aren’t needed as they can resize on the fly. Still, the code you write to connect these services together will still be custom, need to be maintained and could contain bugs. Using another tool to build the workflows, connecting the services together for you and handling the orchestrated execution once put into production is ideal.&lt;/p&gt;

&lt;p&gt;Fylamynt has created the world’s first enterprise ready low code platform for building, running and analyzing SRE cloud workflows. With Fylamynt an SRE can automate the parts of the &lt;a href="https://www.fylamynt.com/post/whats-a-runbook"&gt;runbook&lt;/a&gt; that are the most time consuming, allowing them to make decisions where their expertise is needed. With over 40 prebuilt integrations and more than 60 sample workflows to cover common SRE workflow needs, getting up and running takes no time at all.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fylamynt.com/"&gt;Try Fylamynt for free -&amp;gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sre</category>
      <category>devops</category>
      <category>cloudnative</category>
      <category>cloudskills</category>
    </item>
    <item>
      <title>What is MTTR (Mean Time To Repair)?</title>
      <author>Scott Lasica</author>
      <pubDate>Mon, 01 Nov 2021 22:52:06 +0000</pubDate>
      <link>https://dev.to/youngshatner/what-is-mttr-mean-time-to-repair-4l51</link>
      <guid>https://dev.to/youngshatner/what-is-mttr-mean-time-to-repair-4l51</guid>
      <description>&lt;p&gt;When using cloud-native services, you will undoubtedly have cloud incidents that disrupt the normal operation of your systems. No SRE team believes they can achieve 100% uptime. Instead, they plan ahead, trying to anticipate what could go wrong (or has in the past) and create runbooks (sometimes called pipelines or workflows) to get things back to normal as quickly as possible.&lt;/p&gt;

&lt;p&gt;MTTR is a metric used by SRE teams to help their team better understand how often incidents occur, and how quickly they are repaired. The first three letters are always seen as Mean Time To, but the R is interchanged between Repair, Respond, Resolve, Remediate, and Recover. MTTR can also sometimes be used in customer contracts, with consequences when exceeded. Keep in mind that MTTR represents a typical repair time, not guaranteed, so when reviewing a vendor’s MTTR know that some incidents will resolve more quickly, and others longer.&lt;/p&gt;

&lt;p&gt;MTTR is calculated differently by many organizations. The key is consistency within the organization, and that it’s a meaningful metric that can be used to help the SRE team improve their results (and reduce the MTTR). When you hear someone talk about MTTR, it’s always a good idea to get clarification to ensure you’re on the same page and your discussion makes sense.&lt;/p&gt;

&lt;p&gt;However calculated, a low MTTR is obviously a good thing and indicates either a robust and resilient set of services, a sharp and quick to respond team or both. MTTR can be measured in whatever units make sense (minutes, hours, days).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-contributes-to-mttr"&gt;
  &lt;/a&gt;
  What contributes to MTTR?
&lt;/h2&gt;

&lt;p&gt;A typical SRE workflow after an outage or disruption in the service is detected involves multiple steps that contribute to the end-to-end response time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DGFf0ma8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AotRs2UIFC9nAlhEijDBNrw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DGFf0ma8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AotRs2UIFC9nAlhEijDBNrw.png" alt="image" width="700" height="391"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First step is to troubleshoot to determine the root cause of the problem. ZK Research found that &lt;a href="https://zkresearch.com/blog/2016/10/sd-wan-can-make-network-management-impactful-to-the-business/"&gt;90% of the time spent in MTTR&lt;/a&gt; is spent identifying the source of the problem.&lt;/p&gt;

&lt;p&gt;When an incident occurs, the responder often has to first acknowledge the alert (unless you don’t have monitoring and alerts and you learn of outages from your users), then gather the appropriate system information, then find the runbook that should be used to start the repair. At this point you hope that the person following the runbook is using the right one, for the right environment, and has the right permissions to run it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-you-reduce-your-mttr"&gt;
  &lt;/a&gt;
  How do you reduce your MTTR?
&lt;/h2&gt;

&lt;p&gt;As you can see above, there are multiple steps involved in responding to an event that requires the SRE to interact with multiple services. SREs should continually look for repeatable processes they can automate, with code. By doing so they reduce human error, have a consistent approach to incident remediation regardless of who is handling it, and can in many cases greatly speed up the time to resolve, thereby reducing MTTR. Tying together monitoring, alerting, and data collection the SRE can have everything they need at their fingertips to make the call on next remediation steps. They can get even more advanced by having a slack channel spun up or a zoom meeting created adding the right people for the severity and type of issue that occurs.&lt;/p&gt;

&lt;p&gt;Fylamynt has created the world’s first enterprise ready low code platform for building, running and analyzing SRE cloud workflows. With Fylamynt an SRE can automate the parts of the runbook that are the most time consuming, allowing them to make decisions where their expertise is needed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fylamynt.com/"&gt;Try Fylamynt for free -&amp;gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>A Comparison of SRE Workflow Tools</title>
      <author>Scott Lasica</author>
      <pubDate>Mon, 01 Nov 2021 22:48:34 +0000</pubDate>
      <link>https://dev.to/youngshatner/a-comparison-of-sre-workflow-tools-3ceo</link>
      <guid>https://dev.to/youngshatner/a-comparison-of-sre-workflow-tools-3ceo</guid>
      <description>&lt;p&gt;When considering tools to help optimize parts or all of your cloud incident remediation workflows and runbooks, there are several factors to take into consideration. This article will break down several capabilities to successfully achieve good optimization, and will do a direct comparison between the companies leading the charge into this new and expanding area.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclosure: I work at Fylamynt, one of the offerings, but will keep the comparison to facts that can be known based on company web sites and information from customers.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This article will compare several offerings in the market: Fylamynt, FireHydrant, Blameless, Rundeck and Transposit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integrations"&gt;
  &lt;/a&gt;
  Integrations
&lt;/h2&gt;

&lt;p&gt;One of the first and most important factors to consider is how many third party integrations the platform has, and how easy they are to use. SREs have a plethora of options at their fingertips to handle monitoring, data collection, incident tracking, and many others.&lt;/p&gt;

&lt;p&gt;First, let’s take a raw look at what integrations the platforms support.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ayGtelkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/607/1%2Age5xZUzfaFSmU_DIFyqEbQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ayGtelkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/607/1%2Age5xZUzfaFSmU_DIFyqEbQ.png" alt="Table" width="607" height="1338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Y — Only available on Advanced and Enterprise plans.&lt;br&gt;
Community — Not supported as an enterprise integration by Rundeck.&lt;/p&gt;

&lt;p&gt;Be careful to simply checkbox supported integrations. For example, both Fylamynt and Rundeck list Datadog logos on their integrations page, but not all integrations are created equal. Let’s break each offering down.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;FireHydrant:&lt;/em&gt; FireHydrant is an incident management system that helps engineers manage incidents by creating tickets, setting up Slack and Zoom channels as required. However, it lacks incident response features that help engineers remediate the problems.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Blameless:&lt;/em&gt; Blameless is a post-mortem tool that’s typically used after an incident happened and resolved to understand what happened during the incident resolution. The tool shows a timeline view of what happened, but doesn’t help in resolving the problem itself.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Rundeck:&lt;/em&gt; Rundeck (acquired by PagerDuty) was a tool that was founded in 2010, and was originally targeted towards running multiple scripts (e.g. bash, Python) together in a single pipeline. It’s a tool that’s typically run by an engineer using a CLI. Rundeck lacks integrations with cloud-native SaaS services and API-driven, event-triggered automation that’s more common in today’s incident response workflows.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Transposit:&lt;/em&gt; Transposit has changed their message over time from being a ServiceNow kind of platform for IT to helping SREs resolve incidents. It’s unclear what exact features they support in their tool. They claim to help with responding to alerts, unclear how they differ from showing a timeline view or resolving the incident itself.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fylamynt:&lt;/em&gt; Fylamynt provides a no code / low code drag and drop editor for all of their supported integrations. Within minutes you can drag your favorite tool or service into the editor, wire it to another and in the GUI make small configuration changes. Fylamynt has simplified the use of all the product and service APIs allowing engineers to wire them up in no time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-workflows"&gt;
  &lt;/a&gt;
  Building The Workflows
&lt;/h2&gt;

&lt;p&gt;Creating your workflows/runbooks in the past has typically been writing some code to your tool APIs, creating your own branches and customizations. While in many cases this works and in fact can even get quite complex, there are several potential issues.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Error prone — humans make mistakes (just look at the Facebook outage)&lt;/li&gt;
&lt;li&gt;Time consuming — looking up all the APIs, writing the code, testing all of the connections&lt;/li&gt;
&lt;li&gt;Maintenance — APIs and capabilities change, as well as how you want your runbooks to behave&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Considering the above issues, providing a quick and error free way to build your workflows/runbooks is ideal. Fylamynt has a no code / low code drag and drop builder that includes all of the integrations they support. Engineers can drag nodes to the editor, wire them up and with minor conifg changes in the UI they’re ready to go. You can add more complex things like conditional branches, custom code and input/output transformation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limitations"&gt;
  &lt;/a&gt;
  Limitations
&lt;/h2&gt;

&lt;p&gt;When looking at solution limitations, it’s helpful to consider a few fundamental pillars needed to effectively reduce cloud incident remediation time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#collaboration"&gt;
  &lt;/a&gt;
  Collaboration
&lt;/h3&gt;

&lt;p&gt;Rarely is it solely up to a single individual to respond to, solve and report on incidents. When incidents are serious and need to be escalated, or require the expertise of a subject matter expert with knowledge beyond that of the on call engineer, collaboration needs to happen. Having the ability to spin up a slack channel or a zoom — quickly and dropped right in front of the pre-defined set of people that need to be there is a huge time saver. You can see in the feature chart above that many of the platforms do not have this ability.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automation"&gt;
  &lt;/a&gt;
  Automation
&lt;/h3&gt;

&lt;p&gt;Any adequate solution must be able to automate portions of the remediation process. At a minimum assembling the relevant data to put in front of an SRE is required. If not, countless time will be wasted.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#orchestration"&gt;
  &lt;/a&gt;
  Orchestration
&lt;/h3&gt;

&lt;p&gt;Being able to quickly and easily build and modify workflows/runbooks, with the ability to easily integrate your tools is critical. The difference between dragging and dropping your steps together vs. writing custom code that could have errors, not scale, and not restrict permissions is quite large.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#case-management"&gt;
  &lt;/a&gt;
  Case Management
&lt;/h3&gt;

&lt;p&gt;Having the ability to see your incidents in a dashboard, with the steps that have been taken, success/failure and the time things have taken is very important. In Fylamynt we call these tasks, and within the dashboard you can see all of the workflow executions, state and time each took. Having this realtime view into the state of incidents is critical.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#human-in-the-loop"&gt;
  &lt;/a&gt;
  Human In The Loop
&lt;/h3&gt;

&lt;p&gt;Fully automating your workflow/runbook might sound amazing. Imagine never being woken up when something breaks in the middle of the night. However, many people get wary of full automation, especially when you have actions like taking down services or VMs. To help this, all of the solutions allow you to put a human in the loop which means the runbook will pause and wait for human decision. Much of the data gathering can be automated ahead of time so everything the SRE needs to make that decision is at their fingertips.&lt;/p&gt;

&lt;p&gt;With Fylamynt you can add human approval into your workflow with a Slack message or email.&lt;/p&gt;

&lt;p&gt;Fylamynt has created the world’s first enterprise ready low code platform for building, running and analyzing SRE cloud workflows. With Fylamynt an SRE can automate the parts of the runbook that are the most time consuming, allowing them to make decisions where their expertise is needed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fylamynt.com/"&gt;Try Fylamynt for free -&amp;gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sre</category>
      <category>devops</category>
      <category>cloudnative</category>
      <category>cloudskills</category>
    </item>
    <item>
      <title>Can I Automate Away SRE Roles?</title>
      <author>Scott Lasica</author>
      <pubDate>Mon, 01 Nov 2021 22:40:53 +0000</pubDate>
      <link>https://dev.to/youngshatner/can-i-automate-away-sre-roles-28k4</link>
      <guid>https://dev.to/youngshatner/can-i-automate-away-sre-roles-28k4</guid>
      <description>&lt;p&gt;The word automation brings some strong emotions to the surface for many. It could elicit joy from automating mundane tasks, but it can also create fear and mistrust. There has been extensive history and research on automation being brought into many industries.&lt;/p&gt;

&lt;p&gt;I’ll start in 1811 England. There was a new invention called a &lt;a href="https://en.wikipedia.org/wiki/Power_loom"&gt;loom&lt;/a&gt;, allowing lower skilled laborers to operate and produce lower quality products that ruined the artisans’ reputation for quality. The name Luddites was coined, and this group of people went on to physically smash looms eventually causing Parliament to make frame-breaking a hanging offense. The industrial revolution continued in spite of the Luddites and a whole new role was born: the factory worker, which exploded in numbers creating many more jobs than those that were displaced.&lt;/p&gt;

&lt;p&gt;Let’s jump ahead to more modern automation. Computers brought amazing automation to just about every industry on the planet. Think of the efficiencies brought to accounting, manufacturing, media and many, many more. Taking a look at the &lt;a href="https://data.bls.gov/timeseries/LNS14000000?amp%253bdata_tool=XGtable&amp;amp;output_view=data&amp;amp;include_graphs=true"&gt;US Bureau of Labor Statistics data&lt;/a&gt; (dating back to 1980), employment levels tracked very closely with major events, dipping for things like the housing crisis and climbing during times like the dot-com bubble. They do not seem to coordinate with large shifts in technology. In fact, we are currently experiencing a &lt;a href="https://www.cnbc.com/2021/10/20/global-shortage-of-workers-whats-going-on-experts-explain.html"&gt;worldwide labor shortage&lt;/a&gt; as new advancements in AI and other technologies “threaten” to take over jobs. The Economic Policy Institute &lt;a href="https://www.epi.org/publication/the-zombie-robot-argument-lurches-on-there-is-no-evidence-that-automation-leads-to-joblessness-or-inequality/"&gt;posted&lt;/a&gt; in 2017 that there is no evidence that automation leads to joblessness or inequality.&lt;/p&gt;

&lt;p&gt;Every industry, every role faces some type of automation “intrusion” at some point. The role of a Site Reliability Engineer (SRE) is no different. Just as an SRE wouldn’t consider the best way to learn of an outage is when customers start complaining, an SRE also wouldn’t want to shy away from automation where it makes sense. Part of an SREs duties are to create automation for cloud-native systems in order to reduce MTTR and create organization wide optimization.&lt;/p&gt;

&lt;p&gt;So can we automate all the SRE duties and eliminate the role? Far from it. Google posted a great article on &lt;a href="https://sre.google/sre-book/automation-at-google/"&gt;SRE automation&lt;/a&gt;, how they thought they were automating themselves out of jobs when in fact it turned out to free up time to focus on things that could help the business instead of constant tedious tasks or firefighting.&lt;/p&gt;

&lt;p&gt;Don’t be a Luddite.&lt;/p&gt;

&lt;p&gt;Fylamynt has created the world’s first enterprise ready low code platform for building, running and analyzing SRE cloud workflows. With Fylamynt an SRE can automate the parts of the runbook that are the most time consuming, allowing them to make decisions where their expertise is needed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fylamynt.com/"&gt;Try Fylamynt for free -&amp;gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sre</category>
      <category>devops</category>
      <category>cloudnative</category>
      <category>cloudskills</category>
    </item>
    <item>
      <title>What is SRE (Site Reliability Engineering)?</title>
      <author>Scott Lasica</author>
      <pubDate>Mon, 01 Nov 2021 22:37:32 +0000</pubDate>
      <link>https://dev.to/youngshatner/what-is-sre-site-reliability-engineering-243g</link>
      <guid>https://dev.to/youngshatner/what-is-sre-site-reliability-engineering-243g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Site reliability engineering &lt;a href="https://sre.google/"&gt;(SRE)&lt;/a&gt; is a software engineering (developer) approach to IT operations (ops). SRE teams manage systems, handle scale, firefight incidents/problems and automate some operational tasks.&lt;/p&gt;

&lt;p&gt;SRE was coined by the Google engineering team, when they realized that the duties and responsibilities required had &lt;a href="https://www.fylamynt.com/post/sre-vs-devops"&gt;deviated significantly&lt;/a&gt; from traditional IT/DevOps. One of the key differences is the use of code to help solve problems within cloud-native systems and infrastructure.&lt;/p&gt;

&lt;p&gt;Any system that requires high availability and/or scalability needs SRE as a dedicated practice.&lt;/p&gt;

&lt;p&gt;SRE can also stand for site reliability engineer, which are the individuals who handle site reliability engineering. SREs perform many tasks and are focused on the production cloud environment. Some of the common tasks an SRE will perform are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scaling the system&lt;/li&gt;
&lt;li&gt;Optimizing cloud spend&lt;/li&gt;
&lt;li&gt;Remediating incidents (when things break)&lt;/li&gt;
&lt;li&gt;Automation&lt;/li&gt;
&lt;li&gt;Standardization&lt;/li&gt;
&lt;li&gt;Patching and upgrades&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SREs will often write custom code (software) to link systems together, and will create workflows (often called runbooks) to help automate parts or all of the cloud system needs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-an-sre-do"&gt;
  &lt;/a&gt;
  What does an SRE do?
&lt;/h2&gt;

&lt;p&gt;At a high level an SRE is responsible for ensuring the systems run 24/7 and can handle scale as needed. To achieve this requires a lot of tools and expertise, not to mention often times having to “carry the pager” and handle incidents any time of the day or night.&lt;/p&gt;

&lt;p&gt;Historically SREs came from the software development or sysadmin worlds and became a bit of a hybrid of the two. There are several areas that SREs are responsible for.&lt;br&gt;
Deployment — How code is deployed into the production environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Monitoring&lt;/strong&gt; — Using systems to monitor proper operations.&lt;br&gt;
&lt;strong&gt;Alerting&lt;/strong&gt; — Using tools to alert the appropriate people when systems aren’t functioning properly (or are at risk of not functioning properly).&lt;br&gt;
&lt;strong&gt;Configuration&lt;/strong&gt; — Configuring systems appropriately for optimal performance or cost reduction.&lt;br&gt;
&lt;strong&gt;Performance&lt;/strong&gt; — Keeping latency of systems within acceptable limits.&lt;br&gt;
&lt;strong&gt;Change management&lt;/strong&gt; — Keeping track of changes in systems both as a historical record but also in many cases to comply with industry standards and certifications&lt;br&gt;
&lt;strong&gt;Emergency response&lt;/strong&gt; — Quickly reacting to and mitigating cloud incidents as they happen&lt;br&gt;
&lt;strong&gt;Optimization&lt;/strong&gt; — Optimizing systems, often with automation, to reduce &lt;a href="https://en.wikipedia.org/wiki/Mean_time_to_repair"&gt;MTTR&lt;/a&gt; (Mean Time To Recovery/Repair/Resolution) — when things break, fix them as quickly as possible.&lt;/p&gt;

&lt;p&gt;One of the primary outputs from an SRE are called runbooks or workflows. There are many situations that happen repeatedly, so it of course makes sense to create a repeatable process to handle these situations. Tying steps together in an automated way is how SREs optimize their processes. Common workflows will deal with things like cost optimization or incident remediation. For example, an SRE might create a workflow that runs on a daily basis for cost optimization (autoscaling). A simplified workflow for this could have the following steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check instance utilization&lt;/li&gt;
&lt;li&gt;If usage has remained under 50% for the last 24 hours reduce instance size&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conversely, an SRE might create a workflow for replacing a bad EC2 instance.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Alert from AWS Health&lt;/li&gt;
&lt;li&gt;Spin up new instance&lt;/li&gt;
&lt;li&gt;Reroute traffic&lt;/li&gt;
&lt;li&gt;Kill old instance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These very simplified workflows will have several steps in them, with conditional branches and could even have what’s being called a “human in the loop”, which is a defined pause point in the workflow to allow a human to verify the situation and authorize appropriate actions.&lt;/p&gt;

&lt;p&gt;SREs look for repeatable processes and then try to automate as much of those as they can to both simplify their job, but also to maintain as high availability as possible. No SRE team expects systems to have 100% uptime, but they plan for incidents and create processes to address them quickly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sre-tools"&gt;
  &lt;/a&gt;
  SRE Tools
&lt;/h2&gt;

&lt;p&gt;There are many categories of tools that SREs use to effectively maintain cloud operations. The tools range from monitoring, logging, alerting, incident management, orchestration, and workflow automation and execution.&lt;/p&gt;

&lt;p&gt;Fylamynt has created the world’s first enterprise ready low code platform for building, running and analyzing SRE cloud workflows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fylamynt.com/"&gt;Try Fylamynt for free -&amp;gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sre</category>
      <category>devops</category>
      <category>cloudnative</category>
      <category>cloudskills</category>
    </item>
    <item>
      <title>SRE vs DevOps</title>
      <author>OpsBecca</author>
      <pubDate>Mon, 01 Nov 2021 22:17:38 +0000</pubDate>
      <link>https://dev.to/opsbecca/sre-vs-devops-1nol</link>
      <guid>https://dev.to/opsbecca/sre-vs-devops-1nol</guid>
      <description>&lt;p&gt;We often hear SRE and DevOps interchangeably used to describe operational activities done by engineers for applications running in private or public cloud environments. What’s the difference?&lt;/p&gt;

&lt;p&gt;From Wikipedia&lt;br&gt;
“DevOps is a set of practices that combines software development (Dev) and IT operations (Ops).”&lt;br&gt;
“Site reliability engineering (SRE) is a set of principles and practices[1] that incorporates aspects of software engineering and applies them to infrastructure and operations problems.[2]&lt;br&gt;
DevOps was coined by Patrick Debois in 2009 to describe the culture of having developers and operations engineers work together. There was a constant conflict between developers who build the software and IT operations teams that manage the day to day operations of the software. It was often referred to as developers throwing software “over the wall” to operations.&lt;/p&gt;

&lt;p&gt;DevOps brought a change to this culture that brings the responsibility of building and running software to both dev and ops, with increasing collaboration and shared responsibility across various aspects of software development life cycle (code, build, test, deploy and management)&lt;br&gt;
“DevOps is not a process or a technology. It’s a philosophy or culture of having developers and operations work together to achieve the common goal of running software to achieve high performance and high availability.”&lt;/p&gt;

&lt;p&gt;The field of site reliability engineering (SRE) originated at Google with Ben Treynor Sloss, who founded a site reliability team after joining the company in 2003. The Google SRE books have formalized many of the ideas that are developed in these site reliability teams since then.&lt;/p&gt;

&lt;p&gt;Unlike DevOps, SRE is both a job function and a set of principles that are followed by a team to achieve high reliability for software services offered by a company to its customers. SRE also brought engineering principles of writing “infrastructure-as-code”, testing and deploying operational software similar to how product services are developed.&lt;br&gt;
“SREs are software engineers doing operational work!”&lt;br&gt;
Though SRE predates DevOps, it’s an implementation of DevOps principles in a specific manner. Automation plays an important role in SRE.&lt;/p&gt;

&lt;p&gt;For an in-depth explanation of “What’s SRE”, check out our other blog on &lt;a href="http://www.Fylamynt.com"&gt;www.Fylamynt.com&lt;/a&gt;&lt;br&gt;
Fylamynt is an SRE platform that helps SREs build and run automation workflows.&lt;/p&gt;

</description>
      <category>sre</category>
      <category>devops</category>
    </item>
    <item>
      <title>Can We Create a "Resize Hack" With Container Queries?</title>
      <author>Jhey Tompkins</author>
      <pubDate>Mon, 01 Nov 2021 22:17:05 +0000</pubDate>
      <link>https://dev.to/jh3y/can-we-create-a-resize-hack-with-container-queries-3pe0</link>
      <guid>https://dev.to/jh3y/can-we-create-a-resize-hack-with-container-queries-3pe0</guid>
      <description>&lt;p&gt;If you follow new developments in CSS, you've likely heard of the impending arrival of &lt;strong&gt;container queries&lt;/strong&gt;. We’re going to look at the basics here, but if you’d like another look, check out Una’s &lt;a href="https://css-tricks.com/next-gen-css-container/"&gt;"Next Gen CSS: @container”&lt;/a&gt; article. After we have a poke at the basics ourselves, we’re going to build something super fun with them: a fresh take on the classic CSS meme featuring Peter Griffin fussing with window blinds. ;)&lt;/p&gt;

&lt;p&gt;So, what is a container query? It's… exactly that. Much like we have media queries for querying things such as the viewport size, a container query allows us to query the size of a container. Based on that, we can then apply different styles to the children of said container.&lt;/p&gt;

&lt;p&gt;What does it look like? Well, the exact standards are being worked out. Currently, though, it’s something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* Or... */&lt;/span&gt;
  &lt;span class="py"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="n"&gt;inline-size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@container&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;768px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;hotpink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; keyword turns on &lt;code&gt;layout-containment&lt;/code&gt; for an element. &lt;code&gt;inline-size&lt;/code&gt; allows users to be more specific about containment. This currently means we can only query the container’s &lt;code&gt;width&lt;/code&gt;. With &lt;code&gt;size&lt;/code&gt;, we are able to query the container’s &lt;code&gt;height&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Again, we things could still change. At the time of writing, the only way to use container queries (without a &lt;a href="https://github.com/jsxtools/cqfill"&gt;polyfill&lt;/a&gt;) is behind a flag in Chrome Canary (&lt;code&gt;chrome://flags&lt;/code&gt;). I would definitely recommend having a quick read through the drafts over on &lt;a href="https://drafts.csswg.org/css-contain/#valdef-contain-layout"&gt;csswg.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The easiest way to start playing would be to whip up a quick demo that sports a resizable container element.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/poeyxba?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/zYZKEyM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Try changing the &lt;code&gt;contain&lt;/code&gt; values (in Chrome Canary) and see how the demo responds. This demo uses &lt;code&gt;contain: layout size&lt;/code&gt; which doesn’t restrict the axis. When both the &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; of the container meet certain thresholds, the shirt sizing adjusts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@container&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.t-shirt__container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"L"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--scale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s what you need to know to about container queries for now. It's really just a few new lines of CSS.&lt;/p&gt;

&lt;p&gt;The only thing is: most demos for container queries I’ve seen so far use a pretty standard "card" example to demonstrate the concept. Don't get me wrong, because cards are a great use case for container queries. A card component is practically the poster child of container queries. Consider a generic card design and how it could get affected when used in different layouts. This is a common problem. Many of us have worked on projects where we wind up making various card variations, all catering to the different layouts that use them.&lt;/p&gt;

&lt;p&gt;But cards don't inspire much to start playing with container queries. I want to see them pushed to greater limits to do interesting things. I've played with them a little in that t-shirt sizing demo. And I was going to wait until there was better browser support until I started digging in further (I'm a &lt;a href="https://brave.com/"&gt;Brave&lt;/a&gt; user currently). But then &lt;a href="https://twitter.com/bramus"&gt;Bramus&lt;/a&gt; shared there was a container query polyfill!&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qCBr4mr---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1419673582188249089/kpp3If6j_normal.jpg" alt="Jhey 🐻🛠 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jhey 🐻🛠
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jh3yy
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Shout out to &lt;a href="https://twitter.com/bramus"&gt;@bramus&lt;/a&gt; for sharing the Container Queries polyfill by &lt;a href="https://twitter.com/jon_neal"&gt;@jon_neal&lt;/a&gt; the other day 👏&lt;br&gt;&lt;br&gt;This prompted me to get "hacking"! 😅&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/Em5TLyslip"&gt;twitter.com/bramusblog/sta…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:22 PM - 30 Apr 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Bram.us
          &lt;/span&gt;
          @bramusblog
        &lt;/div&gt;
        A first look at CQFill, a Polyfill for CSS Container Queries (by @jon_neal)

🔗 https://t.co/koWPzUccMk 

🏷 #ContainerQueries #css #polyfill https://t.co/jVxGdSMuzO
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1388257513657839617" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1388257513657839617" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1388257513657839617" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;And this got me thinking about ways to “hack” container queries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;⚠️ Spoiler alert&lt;/strong&gt; : My hack didn’t work. It did momentarily, or at least I thought it did. But, this was actually a blessing because it prompted more conversation around container queries.&lt;/p&gt;

&lt;p&gt;What was my idea? I wanted to create something sort of like the "&lt;a href="https://css-tricks.com/the-checkbox-hack/"&gt;Checkbox Hack&lt;/a&gt;" but for container queries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container__resizer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container__fixed-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The idea is that you could have a container with a resizable element inside it, and then another element that gets fixed positioning outside of the container. Resizing containers could trigger container queries and restyle the fixed elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container__resize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vertical&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container__fixed-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@container&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.container__fixed-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try resizing the red box in this demo. It will change the color of the purple box.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/mdWyLBW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-we-debunk-a-classic-css-meme-with-container-queries"&gt;
  &lt;/a&gt;
  Can we debunk a classic CSS meme with container queries?
&lt;/h2&gt;

&lt;p&gt;Seeing this work excited me a bunch. Finally, an opportunity to create a version of the Peter Griffin CSS meme with CSS and debunk it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/yYSSBtDgbbRzq/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/yYSSBtDgbbRzq/giphy.gif" alt="Peter Griffin Blinds Meme" width="640" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You’ve probably seen the meme. It’s a knock on the Cascade and how difficult it is to manage it. I created the demo using &lt;code&gt;cqfill@0.5.0&lt;/code&gt;… with my own little touches, of course. 😅&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/LYxKjKX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Moving the cord handle, resizes an element which in turn affects the container size. Different container breakpoints would update a CSS variable, &lt;code&gt;--open&lt;/code&gt;, from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;, where &lt;code&gt;1&lt;/code&gt; is equal to an “open” and &lt;code&gt;0&lt;/code&gt; is equal to a “closed” state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@container&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;54px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.blinds__blinds&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;--css-container&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;54px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.blinds__blinds&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@container&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;58px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.blinds__blinds&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;--css-container&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;58px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.blinds__blinds&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@container&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;62px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.blinds__blinds&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;--css-container&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;62px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.blinds__blinds&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But…. as I mentioned, this hack isn’t possible.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--66CYnaCb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1433687120204337152/w4S8YTx__normal.jpg" alt="MiAAAAAAAh (is Terrifying) profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        MiAAAAAAAh (is Terrifying)
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @terriblemia
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/jh3yy"&gt;@jh3yy&lt;/a&gt; &lt;a href="https://twitter.com/CodePen"&gt;@CodePen&lt;/a&gt; Hmmm, containing inline-size shouldn't allow block (height) queries. You're likely hacking a bug in the js polyfill.&lt;br&gt;&lt;br&gt;I love the idea, but I don't think this approach will work using Container Queries in CSS.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      05:39 AM - 01 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1388367573448683523" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1388367573448683523" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1388367573448683523" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;What’s great here is that it prompted conversation around how container queries work. It also highlighted a bug with the container query polyfill which is now fixed. I would love to see this “hack” work though.&lt;/p&gt;

&lt;p&gt;Miriam Suzanne has been creating some fantastic content around container queries. The capabilities have been changing a bunch. That's the risk of living on the bleeding edge. One of &lt;a href="https://www.miriamsuzanne.com/2021/05/02/container-queries/"&gt;her latest articles&lt;/a&gt; sums up the current status.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--bP2aJYQY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1331240375265193986/on59ek6B_normal.jpg" alt="Jonathan Neal profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jonathan Neal
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jon_neal
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/jh3yy"&gt;@jh3yy&lt;/a&gt; &lt;a href="https://twitter.com/MiriSuzanne"&gt;@MiriSuzanne&lt;/a&gt; &lt;a href="https://twitter.com/CodePen"&gt;@CodePen&lt;/a&gt; I’ll get this fixed soon. Following the spec is CRITICAL.&lt;br&gt;&lt;br&gt;BTW, I’m kinda worried about how many videos &amp;amp; demos already rely on the "export" behavior. The yet-published code on main drops this requirement, so `import '/path/to/cqfill.js'` will be all that is needed.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      03:12 AM - 02 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1388692845658247181" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1388692845658247181" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1388692845658247181" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Although my original demo/hack didn't work, we can still kinda use a "resize" hack to create those blinds. Again, we can query &lt;code&gt;height&lt;/code&gt; if we use &lt;code&gt;contain: layout size&lt;/code&gt;. Side note: it’s interesting how we’re currently unable to use &lt;code&gt;contain&lt;/code&gt; to query a container’s height based on resizing its child elements.&lt;/p&gt;

&lt;p&gt;Anyway. Consider this demo:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/jOBEKZO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The arrow rotates as the container is resized. The trick here is to use a container query to update a scoped CSS custom property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.arrow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--rotate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@container&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.arrow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--rotate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've kinda got a container query trick here then. The drawback with not being able to use the first hack concept is that we can't go completely 3D. Overflow &lt;code&gt;hidden&lt;/code&gt; will stop that. We also need the cord to go beneath the window which means the windowsill would get in the way.&lt;/p&gt;

&lt;p&gt;But, we can almost get there.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/qBrEMEe?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This demo uses a preprocessor to generate the container query steps. At each step, a scoped custom property gets updated. This reveals Peter and opens the blinds.&lt;/p&gt;

&lt;p&gt;The trick here is to scale up the container to make the resize handle bigger. Then I scale down the content to fit back where it's meant to.&lt;/p&gt;




&lt;p&gt;This fun demo “debunking the meme” isn’t 100% there yet, but, we’re getting closer. Container queries are an exciting prospect. And it’ll be interesting to see how they change as browser support evolves. It’ll also be exciting to see how people push the limits with them or use them in different ways.&lt;/p&gt;

&lt;p&gt;Who knows? The “resize hack” might fit in nicely alongside the infamous “checkbox hack” one day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stay Awesome! ʕ •ᴥ•ʔ&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
