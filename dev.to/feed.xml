<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The power of X-State</title>
      <author>yanir manor</author>
      <pubDate>Tue, 05 Oct 2021 12:31:32 +0000</pubDate>
      <link>https://dev.to/manoryanir/the-power-of-x-state-1npg</link>
      <guid>https://dev.to/manoryanir/the-power-of-x-state-1npg</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FcgXEzHs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j8sh0twrzdsqn2nfjzc0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FcgXEzHs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j8sh0twrzdsqn2nfjzc0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A long time ago, when I was a student in an academic institution learning computer science,  I found the automation systems class very exciting. &lt;br&gt;
I love the approach of representing a solution to a problem in a visual way.&lt;br&gt;
Create abstraction sketching a state chart of state and transition looks easy to understanding.&lt;br&gt;
As a developer, I think building a frontend application is very complex.&lt;br&gt;
it contains things that happened asynchronously over time (API call, animation, things that happen in parallel).&lt;br&gt;
X-State gives you a good visualizer tool that you can design and code your machine. &lt;br&gt;
You can add the inspect package or chrome extension for debugging or play with your state machine in your application.&lt;br&gt;
you can use x-state in many UI languages (React, Vue, Svelte)&lt;br&gt;
you can generate integration or e2e testing to make your test goes hand in hand with your code. &lt;br&gt;
You can write the testing by jest and react testing library or by playwright/puppeteer/Cypress. &lt;/p&gt;

&lt;p&gt;In the example that I wrote, I will show part of the power of X-State.&lt;br&gt;
I build an air conditioner machine. &lt;br&gt;
You have a remote that can control the power the mode and fun. &lt;br&gt;
The machine has a default state. &lt;br&gt;
If you turn it on and make some changes with mode  I use the history functionality that remembers the changes that happened in the children's nested parallel states.&lt;br&gt;
I think this example is showing the power and simplicity of using X-State.&lt;br&gt;
Enjoy : )&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://github.com/yanirmanor/xstate-air-conditioner"&gt;https://github.com/yanirmanor/xstate-air-conditioner&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>xstate</category>
      <category>javascript</category>
      <category>vue</category>
    </item>
    <item>
      <title>10 Tips On How To Improve UI/UX Design of a Web Application</title>
      <author>TechMagic</author>
      <pubDate>Tue, 05 Oct 2021 12:31:26 +0000</pubDate>
      <link>https://dev.to/techmagic/10-tips-on-how-to-improve-ui-ux-design-of-a-web-application-5bj2</link>
      <guid>https://dev.to/techmagic/10-tips-on-how-to-improve-ui-ux-design-of-a-web-application-5bj2</guid>
      <description>&lt;p&gt;In this article, we share insights on the top 10 tips for great UI/UX in modern web applications. Learn more on how to improve design in 2022.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gj4KY5OW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.techmagic.co/blog/content/images/2021/10/Inner-02.-Improve-UI-UX-Design.-10-Points-UI%402x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gj4KY5OW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.techmagic.co/blog/content/images/2021/10/Inner-02.-Improve-UI-UX-Design.-10-Points-UI%402x.png" alt="best tips for great UI/UX in web apps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your web application or a website is the salesperson you have at your disposal 24/7. It creates the first impression on your company and product, transmits values, and answers questions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.forrester.com/report/The-Six-Steps-For-Justifying-Better-UX/RES117708"&gt;Studies&lt;/a&gt;  prove that a well-designed UI is able to raise your conversion rate by up to 200%. An improved UX design can boost conversion rates up to 400%. That's why it's essential to make your web app not just attractive, but also convenient and user-friendly.&lt;/p&gt;

&lt;p&gt;A common aspect of UX is one-time design ― created once and never improved. It doesn't meet new trends and market requirements and remains outdated. As a result, you have an old-fashioned application that is neither informative nor attractive, not convenient for users, and can't stand the competition.&lt;/p&gt;

&lt;p&gt;Then again, a complete redesign is money- and time-consuming. Therefore, in this article, we focus on ways to improve UI/UX design that already exists without radical changes. It's a list of ten universal methods of improving the UI/UX design of the web app to make it more user-oriented, and both you and your app prosperous.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Why is a Positive User Experience Important for Your Business?&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;10 Tips to Improve UI / UX Design of Web Application&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Our Experience in UI / UX Improvement&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-is-a-positive-user-experience-important-for-your-business"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why is a Positive User Experience Important for Your Business?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TWGvAWp2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.techmagic.co/blog/content/images/2021/10/Inner-01.-Improve-UI-UX-Design.-Positive-UX%402x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TWGvAWp2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.techmagic.co/blog/content/images/2021/10/Inner-01.-Improve-UI-UX-Design.-Positive-UX%402x.png" alt="positive UI/UX"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://uxpa.org/"&gt;The User Experience Professionals Association&lt;/a&gt;  defines user experience as: "Every aspect of the user's interaction with a product, service, or company that makes up the user's perceptions of the whole. User experience design is concerned with all the elements that together make up that interface, including layout, visual design, text, brand, sound, and interaction."&lt;/p&gt;

&lt;p&gt;The  &lt;a href="https://www.nngroup.com/articles/definition-user-experience/"&gt;Nielsen Norman Group&lt;/a&gt; defines a great user experience as one that "meets the exact needs of the customer, without fuss or bother."&lt;/p&gt;

&lt;p&gt;Simply put, to improve the UI/UX design of a web application means to increase user satisfaction, advance the usability, accessibility, and efficiency of their interaction with the website or app.&lt;/p&gt;

&lt;p&gt;UX design focuses on the consumer experience of using your product. The meaning of "product" is broader than just the physical goods or services you sell - it involves the content you create and publish to reach and connect people before they have seen, touched, and got the product.&lt;/p&gt;

&lt;p&gt;Whether it’s a website, a web app, or a mobile app - UX is a central pillar the user experience rests on. If it doesn't fit the behaviour and requirements of the target audience, that match between the product and the user will never appear.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-methods-to-improve-ui-ux-design-of-web-application"&gt;
  &lt;/a&gt;
  &lt;strong&gt;10 Methods to Improve UI / UX Design of Web Application&lt;/strong&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#thorough-research"&gt;
  &lt;/a&gt;
  Thorough research
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GYbYt1PR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.techmagic.co/blog/content/images/2021/10/Inner-03.-Improve-UI-UX-Design.-Thorough-research%402x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GYbYt1PR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.techmagic.co/blog/content/images/2021/10/Inner-03.-Improve-UI-UX-Design.-Thorough-research%402x.png" alt="research in UI/UX"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a first step, conduct thorough  &lt;a href="https://xd.adobe.com/ideas/process/user-research/"&gt;user research&lt;/a&gt;, ask the right questions. Not how to improve user experience on a website or app in general; start with the definition of the final user.&lt;/p&gt;

&lt;p&gt;Knowing your audience, find out what it's interested in. How does it behave after the last update? Clarify people's needs, determine the basic and secondary ones. Identify your product's core value and the punch line. What can you give your user that no one else can?&lt;/p&gt;

&lt;p&gt;Then, check your competitor list, add new ones if needed. Analyze their apps and determine what can make your target user go for their products instead of yours. It gives you a priceless opportunity to find inspiration, use someone's knowledge and experience, and stand out among all similar apps in the market. The results of this research will be the basis of how to improve user experience design.&lt;/p&gt;

&lt;p&gt;Offering the best user experience is a compelling competitive advantage.&lt;/p&gt;

&lt;p&gt;Again, it doesn't have to be costly full-fledged marketing research. Start with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Demographic characteristics.&lt;/strong&gt;  They include gender, age, profession, family status, lifestyle, and all related.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Interests and preferences.&lt;/strong&gt;  Based on demographics data, you can create a pretty good picture of your target audience. Complete it with interests and hobbies. Find as many contact points as possible to build the clearest, ongoing, and fruitful communication.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Apps they already use.&lt;/strong&gt;  What connects these applications? What reviews do people write, and how do the creators respond?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use polling, surveys, statistics, Google after all. The future app UX will be built around this information. Pay attention to four types of user research tools UX designers use the most:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Interview tools&lt;/strong&gt;  give you detailed information about the user's attitudes, desires, and experiences.  &lt;a href="https://dovetailapp.com/"&gt;Dovetail&lt;/a&gt;  is one of the most prominent examples.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Survey tools&lt;/strong&gt;  provide you with helpful information about your user experience at scale. Use  &lt;a href="https://www.hotjar.com/incoming-feedback/"&gt;Hotjar Incoming Feedback&lt;/a&gt;  and Google Forms for this purpose.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Persona creation tools&lt;/strong&gt;  show you what types of users are interested in your product and interact with them. The best ones you can use here are Google Analytics in tandem with  &lt;a href="https://uxpressia.com/"&gt;UXPressia&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;In-house testing tools&lt;/strong&gt;  help you to differentiate what people say and what they actually do with a product by testing it.  &lt;a href="http://fitnesse.org/"&gt;FitNesse&lt;/a&gt;  and  &lt;a href="https://bugwolf.com/"&gt;Bugwolf&lt;/a&gt;  are pretty good at this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Remember, it's always easier to create the design people want than to make them like the design you've created.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-it-simple"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Keep it simple&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iQhauzar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.techmagic.co/blog/content/images/2021/10/Inner-04.-Improve-UI-UX-Design.-Keep-it-simple%402x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iQhauzar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.techmagic.co/blog/content/images/2021/10/Inner-04.-Improve-UI-UX-Design.-Keep-it-simple%402x.png" alt="keep it simple in UI/UX"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First of all, minimalism has been among the  &lt;a href="https://www.forbes.com/sites/forbesagencycouncil/2020/03/04/effective-web-design-the-relevance-and-influence-of-minimalism/?sh=3759df155ebd"&gt;key trends in web design&lt;/a&gt;  for the last few years and will not lose in positions in 2022. Second, removing all unnecessary components means simplifying the interaction with the app for the user. When they visit, you want them to walk the particular way and do the specific steps. If they have to solve a labyrinth to find what they want, they will be more likely to leave.&lt;/p&gt;

&lt;p&gt;Graphic elements should be clickable, facilitate navigation, and carry information about the brand. Here are three fundamental rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;One intention per page.&lt;/strong&gt;  If the page is overloaded with information, the visitor will probably be confused, fail to understand its purpose and advantages. You do the exact opposite and push visitors away by wanting to say too much with a single page. Improve web application user interface by using internal linking and connect all the pages but let each be devoted to the particular subject and goal.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Understandable intent of the page.&lt;/strong&gt;  Navigational elements, blocks, headlines make it easy for visitors to understand the page's goal immediately. Thus, they can stay or move to another one without losing time and wondering what is what.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Focus on the most relevant information.&lt;/strong&gt;  "You may also like" things always are located at the bottom, below the primary input. For example, if you open a blog post, you can see the related articles below; their icons are smaller and don't distract you from the subject you've opened to read — the same works for product pages in online shops.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#add-more-whitespace"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Add more whitespace&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v2Mrgd3r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.techmagic.co/blog/content/images/2021/10/Inner-05.-Improve-UI-UX-Design.-Add-more-whitespace%402x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v2Mrgd3r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.techmagic.co/blog/content/images/2021/10/Inner-05.-Improve-UI-UX-Design.-Add-more-whitespace%402x.png" alt="add more whitespace in UI/UX"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The simplest and most universal way to improve user experience design is by adding white space. Surprisingly, it's neglected too often in favour of complex graphics solutions. Nevertheless, even a little white space can change the entire picture, shift the accents, and bring the visitor closer to decision-making.&lt;/p&gt;

&lt;p&gt;Don't take the white space literally.  &lt;em&gt;Contrary to the name, white space doesn't just apply to the color white. Instead, it applies to any areas of a design not taken up by other elements, such as text, photos, or illustrations. White space can be any color, as it refers to the background of the design,&lt;/em&gt; according to  &lt;a href="https://www.canva.com/learn/white-space-design/"&gt;Canva&lt;/a&gt;’s definition.&lt;/p&gt;

&lt;p&gt;These techniques can be used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Increase the line space.&lt;/strong&gt;  It improves readability, especially for mobile interfaces.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Increase paragraph space.&lt;/strong&gt;  That raises the chances for the text to be read and understood, not ignored and scrolled.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Group related items.&lt;/strong&gt; You can use visual elements for this purpose, but try a "less is more" approach; you may be pleasantly surprised.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#achieve-unity-of-elements"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Achieve unity of elements&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zVSNInO0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.techmagic.co/blog/content/images/2021/10/Inner-06.-Improve-UI-UX-Design.-Achieve-a-unity-of-elements%402x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zVSNInO0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.techmagic.co/blog/content/images/2021/10/Inner-06.-Improve-UI-UX-Design.-Achieve-a-unity-of-elements%402x.png" alt="achieve unity in elements in UI/UX"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unity can be visual and conceptual and helps to improve user experience design drastically.  You achieve visual unity when all design elements support the same visual theme. In the case of a conceptual one, elements of content support the same subject matter.&lt;/p&gt;

&lt;p&gt;All elements should have their roles and be located thoughtfully and strategically.  Get rid of ones that don't contribute to the whole objective. But in turn, removing elements that are essential parts of the entire picture breaks the design. Make sure to be precise, so nothing is lost.&lt;/p&gt;

&lt;p&gt;The most common and robust method for achieving unity is using the  &lt;a href="https://en.wikipedia.org/wiki/Gestalt_psychology"&gt;Gestalt principles of visual perception&lt;/a&gt;. They are based on the human tendency to see things in groups and patterns and are highly relevant in UI/UX design.&lt;/p&gt;

&lt;p&gt;The most potent principles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Proximity&lt;/strong&gt; means that elements that are closer to each other appear more related.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Similarity&lt;/strong&gt; refers to the fact that elements that look alike appear related to each other.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Uniform connectedness&lt;/strong&gt; means grouping elements with common areas or connecting lines.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Good continuation&lt;/strong&gt; refers to grouping by alignment, whether straight or curved.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Common fate&lt;/strong&gt; means that elements that move or even point in the same direction appear more related.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Colour and contrast are also of enormous importance. Several tools, such as  &lt;a href="https://usecontrast.com/"&gt;Contrast&lt;/a&gt; and  &lt;a href="http://colorsafe.co/"&gt;Colorsafe&lt;/a&gt;, will help you check the sufficiency of the colors you use, contrast, etc. Make sure colour-blind users can easily read your app.&lt;/p&gt;

&lt;p&gt;Basic tips:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Background colours are muted.&lt;/li&gt;
&lt;li&gt;  Blue is used for text links.&lt;/li&gt;
&lt;li&gt;  Red is always for warnings or mistakes.&lt;/li&gt;
&lt;li&gt;  CTAs require a strongly contrasting hue that stands out from the rest.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#work-with-feedback"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Work with feedback&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vhbgp67W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.techmagic.co/blog/content/images/2021/10/Inner-08.-Improve-UI-UX-Design.-Feedback%402x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vhbgp67W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.techmagic.co/blog/content/images/2021/10/Inner-08.-Improve-UI-UX-Design.-Feedback%402x.png" alt="work with feedback in UI/UX"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A business's challenge is always listening to what users have to say about the product. It's fair for design as well. Ignoring this rule means deliberately depriving yourself of the opportunity to become the better fit for your target audience.&lt;/p&gt;

&lt;p&gt;Some statistical data on the topic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.huffpost.com/entry/50-important-customer-exp_b_8295772"&gt;70% of companies&lt;/a&gt;  that deliver best in class customer experience use customer feedback.&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://mindtouch.com/resources/5-internet-marketing-must-dos-in-2010"&gt;ESPN.com revenues jumped 35%&lt;/a&gt;  after they incorporated suggestions from their community into their homepage redesign.&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.huffpost.com/entry/50-important-customer-exp_b_8295772"&gt;One satisfied customer&lt;/a&gt; can lead to nine referrals.&lt;a href="https://www.huffpost.com/entry/50-important-customer-exp_b_8295772"&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.customerservicemanager.com/customer-service-facts/"&gt;13% of unhappy customers&lt;/a&gt; will share their disappointments with more than 20 people.&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.huffpost.com/entry/50-important-customer-exp_b_8295772"&gt;It is 6-7X more expensive&lt;/a&gt; to attract new customers than to keep existing ones.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A simple way to obtain user feedback is to add a relevant form to your app so it'll be delivered right to your email. Questions can be the most different, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  What would you like us to improve?&lt;/li&gt;
&lt;li&gt;  What features would you enjoy in the next update?&lt;/li&gt;
&lt;li&gt;  What did you like/dislike the most?&lt;/li&gt;
&lt;li&gt;  How would you rate your app?&lt;/li&gt;
&lt;li&gt;  What are the chances of you recommending it?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Collect and evaluate the outcomes, compare them with current trends and your objectives. For instance, if 70% of respondents claim it's difficult to find a specific page, it's time to add a search feature or improve the navigation.&lt;/p&gt;

&lt;p&gt;Using an online survey tool similar to  &lt;a href="https://survicate.com/"&gt;Survicate&lt;/a&gt;, you can go through the detailed investigation, using all needed filters, and obtain the detailer report for use in the future.&lt;/p&gt;

&lt;p&gt;Another great idea is to have a so-called  &lt;a href="https://blog.polleverywhere.com/feedback-buddies/"&gt;feedback buddy&lt;/a&gt;: someone experienced in the design field to give you honest and informative feedback and point out your strengths and weaknesses like a partner or an independent consultant.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Instead of seeing feedback as critiques, we need to see them as problem-solving sessions. It's a simple perspective that makes a significant impact, transforming design feedback from the person giving feedback vs. the person receiving feedback to a collaborative group effort to find the best solution possible.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Jason Fried,&lt;/strong&gt;&lt;/em&gt; &lt;a href="https://basecamp.com/"&gt;&lt;em&gt;Basecamp&lt;/em&gt;&lt;/a&gt; &lt;em&gt;&lt;strong&gt;CEO and founder&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#make-waiting-more-pleasant"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Make waiting more pleasant&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5J0P2Z9v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.techmagic.co/blog/content/images/2021/10/Inner-09.-Improve-UI-UX-Design.-Make-waiting-more-pleasant%402x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5J0P2Z9v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.techmagic.co/blog/content/images/2021/10/Inner-09.-Improve-UI-UX-Design.-Make-waiting-more-pleasant%402x.png" alt="make waiting easier in UI/UX"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's a task for developers to pay attention to minification and caching for improving the app performance. As a designer, you have to consider how the UI will look while in a loading state.&lt;/p&gt;

&lt;p&gt;You'll inevitably face situations when reaching the highest performance won't be possible, slow internet connection, for example. Try to make waiting as pleasant for users as possible. Create skeleton screens - mockups of text, images, or other content elements.&lt;/p&gt;

&lt;p&gt;Those are blank versions of pages where the information is gradually loaded. We are used to seeing animated spinners everywhere. The problem with them is that they focus users' attention on loading and waiting. By contrast, skeleton screens are more about progress and action.&lt;/p&gt;

&lt;p&gt;This is called  &lt;a href="https://en.wikipedia.org/wiki/Perceived_performance"&gt;perceived performance&lt;/a&gt;. The idea is that users are more loyal and patient and think of a system as faster if they can anticipate content when it's not loaded yet. It may be called managing users' expectations.&lt;/p&gt;

&lt;p&gt;Companies like Facebook, LinkedIn, Slack, and others actively use this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#focus-on-content"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Focus on content&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zwKnHezZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.techmagic.co/blog/content/images/2021/10/Inner-10.-Improve-UI-UX-Design.-Focus-on-content%402x-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zwKnHezZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.techmagic.co/blog/content/images/2021/10/Inner-10.-Improve-UI-UX-Design.-Focus-on-content%402x-1.png" alt="focus on content in UI/UX"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At first glance, it seems specifically a copywriter's and illustrator's area of responsibility, but you should work as a team. Speak visitors' language, make every page winning. Use your content as a tool that helps users to understand which step should be taken next. Add a bit of humour;  &lt;a href="https://www.trendhunter.com/humor"&gt;it's very welcome now&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The user experience depends a lot on the text and illustrations. This enormous task requires an individual approach to your specific audience rather than following some general rules. Even if the interface is user-friendly, the page itself seems attractive, and you've used all the abovementioned tips, using language not natural to your target audience could wipe out all your effort.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#make-the-app-mobilefriendly"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Make the app mobile-friendly&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--niw7SXqb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.techmagic.co/blog/content/images/2021/10/Inner-11.-Improve-UI-UX-Design.-Make-the-app-mobile-friendly%402x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--niw7SXqb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.techmagic.co/blog/content/images/2021/10/Inner-11.-Improve-UI-UX-Design.-Make-the-app-mobile-friendly%402x.png" alt="make it mobile frienly in UI/UX"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More than 50% of web traffic comes  &lt;a href="https://www.thinkwithgoogle.com/marketing-strategies/app-and-mobile/mobile-web-traffic-statistics/#:~:text=%3E%2050%20%25,Data%2C%20U.S.%2C%20Q1%202016."&gt;from mobile devices&lt;/a&gt;. As such, if your web app isn't mobile-optimized, users are five times more likely to abandon it. So, you're shutting out your potential customers by not optimizing your app for the best mobile experience.&lt;/p&gt;

&lt;p&gt;Keep in mind that search engines are your visitors too, and they scroll through both the desktop and mobile interfaces. A mobile-friendly app hugely impacts indexing; your SEO department will agree.&lt;/p&gt;

&lt;p&gt;Essential mobile user interface design tips:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Locate all buttons, especially the CTA, in the middle.&lt;/li&gt;
&lt;li&gt;  Make sure the information is fully displayed on the screen in vertical and horizontal mode.&lt;/li&gt;
&lt;li&gt;  Allow taking actions in one click. Most users operate the phone with one hand.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conduct-audit"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conduct Audit&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IM83ah87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.techmagic.co/blog/content/images/2021/10/Inner-12.-Improve-UI-UX-Design.-Conduct-Audit%402x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IM83ah87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.techmagic.co/blog/content/images/2021/10/Inner-12.-Improve-UI-UX-Design.-Conduct-Audit%402x.png" alt="conduct regular UI/UX audit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Comparing with a previous version, evaluating what's been done, drawing the first conclusions - these steps are essential, especially for long-time projects. New ideas emerge, and trends change while the work is in progress. Periodical reviews and analyses allow implementation changes and make your final UX even better and 100% user-oriented.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.interaction-design.org/literature/article/5-stages-in-the-design-thinking-process"&gt;An excellent suggestion&lt;/a&gt; is to take a day off and then review your work with fresh eyes. It's suitable for writers, illustrators, and also for designers. And never forget to evaluate your page from the user's point of view; it’s not even advised, but a necessity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-experience-in-ui-ux-improvement"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Our Experience in UI / UX Improvement&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bNfw2C0F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.techmagic.co/blog/content/images/2021/10/Inner-13.-Improve-UI-UX-Design.-Experience.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bNfw2C0F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.techmagic.co/blog/content/images/2021/10/Inner-13.-Improve-UI-UX-Design.-Experience.png" alt="our design process at TechMagic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our strategy of improving UI/UX design combines the most popular and recognized practices and our vision and experience. A key point is an individual approach: we don't just work with a client’s team; we become a part of it, dive into details, and analyze them.&lt;/p&gt;

&lt;p&gt;During the improvement of web design, application features, pros, and cons are thoroughly analyzed. We carry out the market research, analysis of user personas and involve business analysts in the process. The main task of changing the UI/UX is not updating the appearance and not making changes for the sake of change. Qualitative changes in design are always noticeable for marketing and sales departments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The core of good UX design is making it work for both your users and your platform. A well-designed UX is all about leading a user to the final point ― the data they need while cutting off everything that might stand in their path and distract them. To figure out how to make better UI/UX design, you need to understand clearly what your user wants to achieve with your app and what you want to show them on their way.&lt;/p&gt;

&lt;p&gt;If your users struggle with finding something, it doesn't exist for them. As a business owner, you should strive to create interfaces and interactions that are intuitive and user-friendly. We know well how to improve the UI/UX design of web applications and, at the same time, the likelihood that users can experience and use your content and characteristics by making the interfaces more discoverable.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>#codepenchallenge (Dreadful Dropdowns)</title>
      <author>Abdelmgeid Sobhi</author>
      <pubDate>Tue, 05 Oct 2021 12:20:54 +0000</pubDate>
      <link>https://dev.to/abdelmgeid/codepenchallenge-dreadful-dropdowns-149n</link>
      <guid>https://dev.to/abdelmgeid/codepenchallenge-dreadful-dropdowns-149n</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Abdelmgeid-/embed/QWgXqQm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>3D Transform Cards</title>
      <author>Abdelmgeid Sobhi</author>
      <pubDate>Tue, 05 Oct 2021 12:20:07 +0000</pubDate>
      <link>https://dev.to/abdelmgeid/3d-transform-cards-3ph8</link>
      <guid>https://dev.to/abdelmgeid/3d-transform-cards-3ph8</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Abdelmgeid-/embed/YzQorrw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>How to Append Arrays in PHP: + vs. array_merge</title>
      <author>David</author>
      <pubDate>Tue, 05 Oct 2021 12:11:37 +0000</pubDate>
      <link>https://dev.to/davidrjenni/how-to-append-arrays-in-php-vs-arraymerge-3dng</link>
      <guid>https://dev.to/davidrjenni/how-to-append-arrays-in-php-vs-arraymerge-3dng</guid>
      <description>&lt;p&gt;Appending or merging is a common array operation. And since arrays are used everywhere in PHP, you cannot afford not to know how to do it properly. But why would it be so hard?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;There are two options&lt;/strong&gt; to append or merge arrays in PHP: the &lt;code&gt;+&lt;/code&gt; operator and the &lt;code&gt;array_merge&lt;/code&gt; function. It's not always clear, which one to use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Arrays in PHP are actually ordered maps.&lt;/strong&gt; We use and think about them as &lt;em&gt;normal&lt;/em&gt; arrays and &lt;em&gt;associative&lt;/em&gt; arrays. But since the underlying structure is the same, some results might surprise you.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;differences are subtle&lt;/strong&gt; and I often forget them. This is why created this post.&lt;/p&gt;

&lt;p&gt;TL;DR, here are the &lt;strong&gt;key takeaways&lt;/strong&gt; as a cheat sheet:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;$left + $right&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;array_merge($left, $right)&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Key types&lt;/strong&gt; matter&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;No&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;If &lt;strong&gt;numeric key&lt;/strong&gt; matches&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Left-hand&lt;/strong&gt; value is used&lt;/td&gt;
&lt;td&gt;Appended&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;If &lt;strong&gt;string key&lt;/strong&gt; matches&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Left-hand&lt;/strong&gt; value is used&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Right-hand&lt;/strong&gt; value is used&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;Renumbers&lt;/strong&gt; result keys&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;No&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Yes&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;But for those of you who are interested in the details, let's dive right into it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#option-1-the-raw-endraw-operator"&gt;
  &lt;/a&gt;
  Option 1: The &lt;code&gt;+&lt;/code&gt; Operator
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; operator, applied to arrays is also called the &lt;a href="https://www.php.net/manual/en/language.operators.array.php"&gt;union operator&lt;/a&gt;. When computing &lt;code&gt;$a + $b&lt;/code&gt;, &lt;code&gt;$b&lt;/code&gt; is appended to &lt;code&gt;$a&lt;/code&gt;. But if a key occurs in both arrays, only the value from the &lt;em&gt;left-hand side is used&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;type of the keys is ignored&lt;/strong&gt;: numeric and string keys are treated the same way and the &lt;strong&gt;keys are always preserved&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;👉 &lt;strong&gt;The &lt;code&gt;+&lt;/code&gt; operator is more intuitive for arrays with explicit keys&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#option-2-the-raw-arraymerge-endraw-function"&gt;
  &lt;/a&gt;
  Option 2: The &lt;code&gt;array_merge&lt;/code&gt; Function
&lt;/h2&gt;

&lt;p&gt;The built-in function &lt;a href="https://www.php.net/manual/en/function.array-merge.php"&gt;&lt;code&gt;array_merge&lt;/code&gt;&lt;/a&gt; is similar, but a bit more intricate. Again, &lt;code&gt;array_merge($a, $b)&lt;/code&gt; appends &lt;code&gt;$b&lt;/code&gt; to &lt;code&gt;$a&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If a &lt;strong&gt;string key&lt;/strong&gt; occurs in both arrays, the value from the &lt;strong&gt;right-hand side is used&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;But if a &lt;strong&gt;numeric key matches&lt;/strong&gt;, the corresponding value from the right-hand side is &lt;strong&gt;appended&lt;/strong&gt;.  Because this behavior cannot preserve the keys, the resulting numeric keys are renumbered.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;👉 As we'll see, this makes &lt;code&gt;array_merge&lt;/code&gt; &lt;strong&gt;more geared towards handling "normal" arrays&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-case-1-normal-arrays"&gt;
  &lt;/a&gt;
  Use Case 1: Normal Arrays
&lt;/h2&gt;

&lt;p&gt;What are "normal" arrays in PHP? They are arrays with numeric keys, starting at zero: &lt;code&gt;['x1', 'y1']&lt;/code&gt; is a shortcut for &lt;code&gt;[0 =&amp;gt; 'x1', 1 =&amp;gt; 'y2']&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's see how the &lt;code&gt;+&lt;/code&gt; operator and &lt;code&gt;array_merge&lt;/code&gt; perform on "normal" arrays:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'x1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'y1'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// == [0 =&amp;gt; 'x1', 1 =&amp;gt; 'y1']&lt;/span&gt;
&lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'y2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'z2'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// == [0 =&amp;gt; 'y2', 1 =&amp;gt; 'z2']&lt;/span&gt;

&lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'x1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'y1'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// == [0 =&amp;gt; 'x1', 1 =&amp;gt; 'y1']&lt;/span&gt;
&lt;span class="nb"&gt;array_merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'x1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'y1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'y2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'z2'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;⚠️ Because the &lt;em&gt;implicit&lt;/em&gt; keys match, the &lt;code&gt;+&lt;/code&gt; operator only uses the values from the left-hand side.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;array_merge&lt;/code&gt; appends values for numeric keys: we get what we expect from an "append" function.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;👉 &lt;strong&gt;To append two "normal" arrays, use &lt;code&gt;array_merge&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-case-2-numeric-keys"&gt;
  &lt;/a&gt;
  Use Case 2: Numeric Keys
&lt;/h2&gt;

&lt;p&gt;But what happens if we use &lt;strong&gt;numeric keys&lt;/strong&gt;, which &lt;strong&gt;do not start at zero&lt;/strong&gt;?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'x1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'y1'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'y2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'z2'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'x1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'y1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'z2'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nb"&gt;array_merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'x1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'y1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'y2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'z2'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;// == [0 =&amp;gt; 'x1', 1 =&amp;gt; 'y1', 2 =&amp;gt; 'y2', 3 =&amp;gt; 'z2']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; operator's result is consistent with what we learned previously. When a key matches, the value from &lt;code&gt;$a&lt;/code&gt; has priority.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At a first glance, the result of &lt;code&gt;array_merge&lt;/code&gt; looks similar like before, but notice that &lt;strong&gt;the keys changed&lt;/strong&gt;. &lt;code&gt;array_merge&lt;/code&gt; actually &lt;em&gt;renumbers the numeric keys&lt;/em&gt;, starting at zero.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;⚠️ &lt;strong&gt;If you need to preserve numeric keys, &lt;code&gt;array_merge&lt;/code&gt; will not work&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-case-3-string-keys"&gt;
  &lt;/a&gt;
  Use Case 3: String Keys
&lt;/h2&gt;

&lt;p&gt;Let's move on and see how &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;array_merge&lt;/code&gt; handle arrays with string keys.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'x1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'y1'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'y2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'z2'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;             &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'x1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'y1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'z2'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nb"&gt;array_merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'x1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'y2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'z2'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; operator handles string keys the same way, it handled numeric keys: when a key matches, the value from &lt;code&gt;$a&lt;/code&gt; is taken.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, &lt;code&gt;array_merge&lt;/code&gt; behaves differently: when a string key matches, the value from &lt;code&gt;$b&lt;/code&gt; is taken.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ℹ️ For matching string keys, &lt;code&gt;+&lt;/code&gt; takes the value from the &lt;em&gt;left-hand side&lt;/em&gt;, &lt;code&gt;array_merge&lt;/code&gt; takes the value from the &lt;em&gt;right-hand side&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-case-4-mixed-key-types"&gt;
  &lt;/a&gt;
  Use Case 4: Mixed Key Types
&lt;/h2&gt;

&lt;p&gt;Arrays with mixed key types do not change anything about the rules explained above. &lt;strong&gt;The merging procedure applies the rules key by key.&lt;/strong&gt; Here you can see all the rules in action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'x1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'y1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'z1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'1st'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'x2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'y2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'z2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'2nd'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'a'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'x1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// key only in $a&lt;/span&gt;
    &lt;span class="s1"&gt;'b'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'y1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// matching string key -&amp;gt; value from $a&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'z1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// matching implicit numeric key -&amp;gt; value from $a&lt;/span&gt;
    &lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'1st'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// matching numeric key -&amp;gt; value from $a&lt;/span&gt;
    &lt;span class="s1"&gt;'c'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'y2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// key only in $b&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nb"&gt;array_merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'a'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'x1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// key only in $a&lt;/span&gt;
    &lt;span class="s1"&gt;'b'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'x2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// matching string key -&amp;gt; value from $b&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'z1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// numeric key -&amp;gt; append and renumber&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'1st'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// numeric key -&amp;gt; append and renumber&lt;/span&gt;
    &lt;span class="s1"&gt;'c'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'y2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// key only in $b&lt;/span&gt;
    &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'z2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// numeric key -&amp;gt; append and renumber&lt;/span&gt;
    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'2nd'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// numeric key -&amp;gt; append and renumber&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#edge-case-null-values"&gt;
  &lt;/a&gt;
  Edge Case: Null Values
&lt;/h2&gt;

&lt;p&gt;Finally, let's see what happens when one of the arrays is &lt;code&gt;null&lt;/code&gt;. It depends on the PHP version:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;PHP 8.0&lt;/strong&gt; throws a &lt;code&gt;TypeError&lt;/code&gt; when passing &lt;code&gt;null&lt;/code&gt; to the &lt;code&gt;+&lt;/code&gt; operator or &lt;code&gt;array_merge&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PHP 7.4&lt;/strong&gt; also produces a fatal error, when using &lt;code&gt;null&lt;/code&gt; as an operand on the &lt;code&gt;+&lt;/code&gt; operator. But when using &lt;code&gt;null&lt;/code&gt; as an argument  in &lt;code&gt;array_merge&lt;/code&gt;, PHP 7.4 only produces a warning and returns &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my opinion, generating a type error or warning is not acceptable. I strongly suggest you never use the &lt;code&gt;+&lt;/code&gt; operator or &lt;code&gt;array_merge&lt;/code&gt; on &lt;code&gt;null&lt;/code&gt; values.&lt;/p&gt;

&lt;p&gt;⚡ Ensure that none of the arrays are &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;

</description>
      <category>php</category>
      <category>webdev</category>
      <category>cheatsheet</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Image hosting service built with Next.js, Supabase, and TailwindCSS. 📸⚡️📁</title>
      <author>Lucas L.</author>
      <pubDate>Tue, 05 Oct 2021 11:53:57 +0000</pubDate>
      <link>https://dev.to/llimabr/image-hosting-service-built-with-next-js-supabase-and-tailwindcss-lcg</link>
      <guid>https://dev.to/llimabr/image-hosting-service-built-with-next-js-supabase-and-tailwindcss-lcg</guid>
      <description>&lt;p&gt;A lot of folks are talking about &lt;a href="https://supabase.io/"&gt;Supabase&lt;/a&gt;. Also,&lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; seems to be trending right now, and I never tried them. 😛&lt;/p&gt;

&lt;p&gt;So, one of the projects that I had in mind for a while was the perfect fit to apply these two together. 🤓&lt;/p&gt;

&lt;p&gt;After spending approx. 12 hours, I finished the v1 for &lt;a href="https://gpic.site"&gt;gpic - Free Image Optimizer &amp;amp; Hosting Service&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Built with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Next.js&lt;/li&gt;
&lt;li&gt;Supabase (DB and Storage)&lt;/li&gt;
&lt;li&gt;TailwindCSS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Quick Demo:&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/l3jumOV51kc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-motivation"&gt;
  &lt;/a&gt;
  The Motivation
&lt;/h3&gt;

&lt;p&gt;Well, I love communities with markdown available (DEV, Reddit, Indiehackers,...), but that means that I need to...&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to &lt;a href="https://imgbb.com/"&gt;https://imgbb.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Select/Drag'n'drop the image -&amp;gt; Hit Upload&lt;/li&gt;
&lt;li&gt;Grab the code&lt;/li&gt;
&lt;li&gt;Insert in the markdown&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;...in order to add an image to my post. &lt;/p&gt;

&lt;p&gt;That was my biggest motivation! I just wanted something clean and with an option to copy the link with the markdown. &lt;/p&gt;

&lt;p&gt;Hope you find useful, and if you have any feedback, let me know. I'm already working on v2. 🤪&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kE4YsDwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hdmlbxshrurxrggmrogp.supabase.co/storage/v1/object/public/gpic/v1/giphy853" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kE4YsDwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hdmlbxshrurxrggmrogp.supabase.co/storage/v1/object/public/gpic/v1/giphy853" alt="Image Description"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;(Image hosted on &lt;a href="https://gpic.site"&gt;gpic&lt;/a&gt;)&lt;/em&gt;🥳&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>javascript</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>Real-Time Form Validation with Phoenix LiveView</title>
      <author>Sophie DeBenedetto</author>
      <pubDate>Tue, 05 Oct 2021 11:44:01 +0000</pubDate>
      <link>https://dev.to/appsignal/real-time-form-validation-with-phoenix-liveview-2laj</link>
      <guid>https://dev.to/appsignal/real-time-form-validation-with-phoenix-liveview-2laj</guid>
      <description>&lt;p&gt;LiveView is a compelling choice for building modern web apps. Built on top of Elixir's OTP tooling and leveraging WebSockets, it offers super-fast real-time, interactive features alongside impressive developer productivity.&lt;/p&gt;

&lt;p&gt;LiveView keeps the developer's mind firmly rooted on the server-side, even when testing and debugging. This can empower you to deliver interactive features in single-page apps faster than ever before. Some of the most common interactions on the web are form validation and submission. These days, users expect to see form feedback presented to them in real-time, and LiveView offers first-class support for exactly that.&lt;/p&gt;

&lt;p&gt;In this post, I'll show you how to build LiveView forms that validate changes and provide feedback to the user in real-time. Along the way, you'll learn how to model change in your Phoenix application with schemaless changesets and compose LiveView code to handle that change.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-feature-adding-a-form-to-a-phoenix-liveview-app"&gt;
  &lt;/a&gt;
  The Feature: Adding a Form to a Phoenix LiveView App
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;The form examples we'll be looking at in this post are inspired by the "Forms and Changesets" chapter in my book, &lt;a href="https://pragprog.com/titles/liveview/programming-phoenix-liveview/"&gt;Programming LiveView&lt;/a&gt;, co-authored with Bruce Tate. Check it out for an even deeper dive into LiveView testing and so much more.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before we dive into writing any actual code, let's talk about the feature we'll build. Imagine that you're responsible for a Phoenix web app, Arcade, that provides in-browser games to users. A user can log in, select a game to play, and even invite friends to play games with them.&lt;/p&gt;

&lt;p&gt;We'll focus on that last piece of functionality. A user can invite a friend to play a game with them by filling out a form with the friend's email address. This will email a link to the recipient's email address so they can join the game.&lt;/p&gt;

&lt;p&gt;Our form will need to implement some validation — namely, to ensure that a valid email address is provided. It should show any validation errors, as well as the results of a successful form submission in real-time. We won't worry too much about the exact details of sending emails for now. Instead, we'll keep our focus on the form validations in LiveView.&lt;/p&gt;

&lt;p&gt;We'll begin where you'll almost always want to start when building a new feature in a Phoenix application — in the application core. We'll model game invitations in their module. You'll build a boundary layer in a Phoenix context module that we'll call on in LiveView later to validate form input and send invitation emails.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#model-change-in-phoenix-with-ecto-changesets"&gt;
  &lt;/a&gt;
  Model Change in Phoenix with Ecto Changesets
&lt;/h2&gt;

&lt;p&gt;We're almost ready to start writing code. But first, let's think about the role that forms and changesets play in our Phoenix application.&lt;/p&gt;

&lt;p&gt;Consider &lt;a href="https://hexdocs.pm/ecto/Ecto.Changeset.html"&gt;Ecto changesets&lt;/a&gt;. Changesets are policies for changing data, and they:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Cast unstructured user data&lt;/em&gt; into a known, structured form — most commonly, an Ecto database schema, ensuring data &lt;em&gt;safety&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Capture differences&lt;/em&gt; between safe, consistent data and a proposed change, allowing for &lt;em&gt;efficiency&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Validate data&lt;/em&gt; using known consistent rules, ensuring data &lt;em&gt;consistency&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Provide a &lt;em&gt;contract&lt;/em&gt; for communicating error states and valid states, ensuring a &lt;em&gt;common interface for change&lt;/em&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;game&lt;/span&gt;
  &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:unit_price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:sku&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;validate_required&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:unit_price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:sku&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;unique_constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:sku&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;changeset/2&lt;/code&gt; function captures differences between the structured &lt;code&gt;game&lt;/code&gt; and the unstructured &lt;code&gt;attrs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, with &lt;code&gt;cast/4&lt;/code&gt;, the changeset trims the attributes to a known field list and converts them to the correct types. This ensures safety by guaranteeing that you won't let any unknown or invalid attributes into your database.&lt;/p&gt;

&lt;p&gt;Finally, the &lt;code&gt;validate/2&lt;/code&gt; and &lt;code&gt;unique_constraint/2&lt;/code&gt; functions validate the inbound data, ensuring consistency.&lt;/p&gt;

&lt;p&gt;The result is a data structure with known states and error message formats, ensuring interface compatibility.&lt;/p&gt;

&lt;p&gt;Consequently, any forms that use this changeset know exactly how to behave — validating form input and presenting errors in accordance with the changeset's rules.&lt;/p&gt;

&lt;p&gt;In this post, we're going to shift off of this well-known path of generated changesets. You'll see just how versatile changesets can be when it comes to modeling changes to data, with or without a database. You'll build a custom, schemaless changeset for data that &lt;em&gt;isn't&lt;/em&gt; backed by a database table, and you'll use that changeset in a form within a live view.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#schemaless-changesets-in-the-phoenix-application-core"&gt;
  &lt;/a&gt;
  Schemaless Changesets in the Phoenix Application Core
&lt;/h2&gt;

&lt;p&gt;You've likely used changesets to model changes to data that is persisted in your database. Our game invitation feature doesn't require database persistence, however. A user will provide the email address of the friend they'd like to invite, and our application will simply send out the email with the link to the game. We don't need to store that invitee's data at this point.&lt;/p&gt;

&lt;p&gt;Luckily, we can use schemaless changesets to model data that &lt;em&gt;doesn't&lt;/em&gt; get saved to the database. A schemaless changeset is based on a simple Elixir map or struct, rather than an Ecto schema-backed struct. The only difference is that, when working with a plain Elixir struct, we need to provide the changeset with the type of information that Elixir would normally handle. We'll see this in action in a moment.&lt;/p&gt;

&lt;p&gt;First, let's define the core module that we'll use to model a game Recipient. Create a new file, &lt;code&gt;arcade/lib/game/Recipient.ex&lt;/code&gt;, and define the module like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Arcade&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Invite&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Recipient&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;defstruct&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our module is simple so far. It implements a struct with two keys, &lt;code&gt;:name&lt;/code&gt; and &lt;code&gt;:email&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next up, we need to give our module awareness of the types that will be considered valid by any changeset we create. Let's use a module attribute to store this map of types so that we can access it later:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Arcade&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Invite&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Recipient&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;defstruct&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nv"&gt;@types&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;game_name:&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;email:&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we'll alias the module and import &lt;code&gt;Ecto.Changeset&lt;/code&gt; so that we can use the changeset functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Arcade&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Invite&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Recipient&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;defstruct&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nv"&gt;@types&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;game_name:&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;email:&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="no"&gt;Arcade&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Invite&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Recipient&lt;/span&gt;
  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="no"&gt;Ecto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Changeset&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we're ready to define the &lt;code&gt;changeset/2&lt;/code&gt; function that will be responsible for casting recipient data into a changeset and validating it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Arcade&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Invite&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Recipient&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;(%&lt;/span&gt;&lt;span class="no"&gt;Recipient&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;invitation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;invitation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@types&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@types&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;validate_required&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="ss"&gt;:game_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;validate_format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sr"&gt;~r/@/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We validate the presence of the &lt;code&gt;:game_name&lt;/code&gt; and &lt;code&gt;:email&lt;/code&gt; attributes, and then validate the format of &lt;code&gt;:email&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, we can create recipient changesets like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="no"&gt;Arcade&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Invite&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Recipient&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;Recipient&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Recipient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;email:&lt;/span&gt; &lt;span class="s2"&gt;"juniper@email.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;game_name:&lt;/span&gt; &lt;span class="s2"&gt;"Chess"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;#Ecto.Changeset&amp;lt;...valid?: true&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see what happens if we try to create a changeset with an attribute of an invalid type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Recipient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;email:&lt;/span&gt; &lt;span class="s2"&gt;"juniper@email.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;game_name:&lt;/span&gt; &lt;span class="mi"&gt;1234&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;#Ecto.Changeset&amp;lt;errors: [game_name: {"is invalid", ...]}],valid?: false&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Ecto.Changeset.cast/4&lt;/code&gt; relies on &lt;code&gt;@types&lt;/code&gt; to identify the invalid type and provide a descriptive error.&lt;/p&gt;

&lt;p&gt;Next, try a changeset that breaks one of the custom validation rules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Recipient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;email:&lt;/span&gt; &lt;span class="s2"&gt;"juniper's email"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;game_name:&lt;/span&gt; &lt;span class="s2"&gt;"Chess"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;#Ecto.Changeset&amp;lt;changes: %{email: "juniper's email", ...},&lt;/span&gt;
  &lt;span class="ss"&gt;errors:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;email:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"has invalid format"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;&lt;span class="ss"&gt;valid?:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function successfully captures our change policy in code, and the returned changeset tells the user exactly what is wrong.&lt;/p&gt;

&lt;p&gt;Now that our changeset is up and running, let's quickly build out an &lt;code&gt;Invite&lt;/code&gt; context that will present the interface for interacting with the changeset.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-boundary-layer-in-elixir"&gt;
  &lt;/a&gt;
  The Boundary Layer in Elixir
&lt;/h2&gt;

&lt;p&gt;Create a file, &lt;code&gt;lib/arcade/invite.ex&lt;/code&gt; and add in the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Arcade&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Invite&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="no"&gt;Arcade&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Invite&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Recipient&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;change_invitation&lt;/span&gt;&lt;span class="p"&gt;(%&lt;/span&gt;&lt;span class="no"&gt;Recipient&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recipient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt; &lt;span class="p"&gt;\\&lt;/span&gt; &lt;span class="p"&gt;%{})&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;Recipient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recipient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;send_invite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recipient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# send email to promo recipient&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This context is a beautifully concise boundary for our service. The &lt;code&gt;change_invitation/2&lt;/code&gt; function returns a recipient changeset, and &lt;code&gt;send_invite/2&lt;/code&gt; is a placeholder for sending a game invite email.&lt;/p&gt;

&lt;p&gt;Other than the internal tweaks we made inside &lt;code&gt;Recipient.changeset/2&lt;/code&gt;, building a Phoenix context module with a schemaless changeset looks identical to building an Ecto-backed one. When all is said and done, in the view layer, schemaless changesets and schema-backed ones will look identical.&lt;/p&gt;

&lt;p&gt;Let's turn our attention to the view layer now and build out our live view.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-and-define-the-live-view"&gt;
  &lt;/a&gt;
  Build and Define the Live View
&lt;/h2&gt;

&lt;p&gt;This live view will have the feel of a typical live view with a form. First, we'll create a simple route and wire it to a live view. Next, we'll use our &lt;code&gt;Invite&lt;/code&gt; context to produce a schemaless changeset, and add it to the socket within a &lt;code&gt;mount/3&lt;/code&gt; function. We'll render a form with this changeset and apply changes to the changeset by handling events from the form.&lt;/p&gt;

&lt;p&gt;Let's get going!&lt;/p&gt;

&lt;p&gt;Create a file, &lt;code&gt;lib/arcade_web/live/invite_live.ex&lt;/code&gt; and fill in the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;ArcadeWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;InviteLive&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;ArcadeWeb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:live_view&lt;/span&gt;
  &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="no"&gt;Arcade&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Invite&lt;/span&gt;
  &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="no"&gt;Arcade&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Invite&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Recipient&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We pull in the LiveView behavior, alias our modules for later use and implement a simple &lt;code&gt;mount/3&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Let's use an implicit &lt;code&gt;render/1&lt;/code&gt;. Create a template file in &lt;code&gt;lib/arcade_web/live/invite_live.html.leex&lt;/code&gt;, starting with some simple markup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Invite a Friend to Play!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;
  Enter the name of a game and your friend's email below and we'll send them an
  invite to join you in playing a game!
&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's define a live route and fire up the server. In the router, add the following route behind authentication:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;ArcadeWeb&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;pipe_through&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:browser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:require_authenticated_user&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;live&lt;/span&gt; &lt;span class="s2"&gt;"/invite"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;InviteLive&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that, you should be able to fire up the Phoenix server, point your browser at &lt;code&gt;/invite&lt;/code&gt; and see your live view render the invitation template:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5gCfAzA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-09/form-validations-simple-text.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5gCfAzA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-09/form-validations-simple-text.png" alt="invite page intro text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the live view is up and running, we're ready to build out the form for an invitation recipient.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#render-the-phoenix-liveview-form"&gt;
  &lt;/a&gt;
  Render the Phoenix LiveView Form
&lt;/h3&gt;

&lt;p&gt;We'll use &lt;code&gt;mount/3&lt;/code&gt; to store a recipient struct and a changeset in the socket:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;socket&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;assign_recipient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;assign_changeset&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;assign_recipient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;socket&lt;/span&gt;
  &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:recipient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;Recipient&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;assign_changeset&lt;/span&gt;&lt;span class="p"&gt;(%{&lt;/span&gt;&lt;span class="ss"&gt;assigns:&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;recipient:&lt;/span&gt; &lt;span class="n"&gt;recipient&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;socket&lt;/span&gt;
  &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:changeset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Invite&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;change_recipient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recipient&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;mount/3&lt;/code&gt; function uses two helper functions, &lt;code&gt;assign_recipient/1&lt;/code&gt; and &lt;code&gt;assign_changeset/1&lt;/code&gt;, to add a recipient struct and a changeset for that recipient to socket assigns. These pure, single-purpose reducer functions are reusable building blocks for managing the live view's state.&lt;/p&gt;

&lt;p&gt;Remarkably, the schemaless changeset can be used in our form exactly like database-backed ones. We'll use &lt;code&gt;socket.assigns.changeset&lt;/code&gt; in the template's form, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form_for&lt;/span&gt; &lt;span class="nv"&gt;@changeset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;id:&lt;/span&gt; &lt;span class="s2"&gt;"invite-form"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;phx_change:&lt;/span&gt; &lt;span class="s2"&gt;"validate"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;phx_submit:&lt;/span&gt; &lt;span class="s2"&gt;"save"&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="o"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:game_name&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;text_input&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:game_name&lt;/span&gt;  &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;error_tag&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:game_name&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="o"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;text_input&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;error_tag&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="o"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;submit&lt;/span&gt; &lt;span class="s2"&gt;"Send Invite"&lt;/span&gt;&lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if you point your browser at &lt;code&gt;/invite&lt;/code&gt;, you should see this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xiIS853T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-09/form-validations-forms.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xiIS853T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-09/form-validations-forms.png" alt="invite form"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our form implements two LiveView bindings, &lt;code&gt;phx-change&lt;/code&gt;, and &lt;code&gt;phx-submit&lt;/code&gt;. Let's dig into these events now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#handle-form-events-in-liveview"&gt;
  &lt;/a&gt;
  Handle Form Events in LiveView
&lt;/h3&gt;

&lt;p&gt;We'll start with a look at the &lt;code&gt;phx-change&lt;/code&gt; event. LiveView will send a &lt;code&gt;"validate"&lt;/code&gt; event each time the form changes and include the form params in the event metadata.&lt;/p&gt;

&lt;p&gt;So, we'll implement a &lt;code&gt;handle_event/3&lt;/code&gt; function for this event that builds a new changeset from the params and adds it to the socket:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# lib/arcade_web/live/invite_live.ex&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;handle_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;"validate"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="s2"&gt;"recipient"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;recipient_params&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;assigns:&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;recipient:&lt;/span&gt; &lt;span class="n"&gt;recipient&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;changeset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;recipient&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Invite&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;change_recipient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;recipient_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:validate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:noreply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;socket&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:changeset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break this down. The &lt;code&gt;Invite.change_recipient/2&lt;/code&gt; context function creates a new changeset using the recipient from socket state and the params from the form change event.&lt;/p&gt;

&lt;p&gt;Then, we use &lt;code&gt;Map.put(:action, :validate)&lt;/code&gt; to add the &lt;code&gt;validate&lt;/code&gt; action to the changeset, a signal that instructs Phoenix to display errors. Phoenix will &lt;em&gt;not&lt;/em&gt; display the changeset's errors otherwise.&lt;/p&gt;

&lt;p&gt;When you think about it, this approach makes sense. Not all invalid changesets should show errors on the page. For example, the empty form for the new changeset &lt;em&gt;shouldn't&lt;/em&gt; show any errors because the user hasn't provided any input yet. So, the Phoenix &lt;code&gt;form_for&lt;/code&gt; function needs to be told when to display a changeset's errors. If the changeset's action is empty, then no errors are set on the form object — even if the changeset is invalid and has a non-empty &lt;code&gt;:errors&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;Finally, &lt;code&gt;assigns/2&lt;/code&gt; adds the new changeset to the socket, triggering &lt;code&gt;render/1&lt;/code&gt; and displaying any errors.&lt;/p&gt;

&lt;p&gt;Let's take a look at the form tag that displays those errors on the page. Typically, each field has a label, an input control, and an error tag, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;text_input&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;error_tag&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;error_tag/2&lt;/code&gt; Phoenix view helper function displays the form's errors for a given field on a changeset, when the changeset's action is &lt;code&gt;:validate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, point your browser at &lt;code&gt;/invite&lt;/code&gt; and fill out the form with a game name and an invalid email. As you can see in this image, the UI updates to display the validation errors:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SNsvvTLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-09/form-validations-errors.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SNsvvTLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-09/form-validations-errors.png" alt="form with validation errors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That was surprisingly easy! We built a simple and powerful live view with a reactive form that displays any errors in real-time.&lt;/p&gt;

&lt;p&gt;The live view calls on the context to create a changeset, renders it in a form, validates it on form change, and then re-renders the template after each form event. We get reactive form validation for free without writing any JavaScript or HTML. We let Ecto changesets handle the data validation rules, and we let the LiveView framework handle the client/server communication for triggering validation events and displaying the results.&lt;/p&gt;

&lt;p&gt;There's just one thing about our form validation that needs some improvement. You'll notice that as soon as you start typing into the email form, an error appears because our validation event fires whenever the form field changes. This doesn't present our users with the best experience — we're telling them there is an error with their input before they get a chance to finish typing their full email.&lt;/p&gt;

&lt;p&gt;Instead, we want the validation event to fire when a user clicks away or blurs from the email input. Luckily for us, LiveView makes it easy to implement this functionality with the help of the &lt;code&gt;phx-debounce&lt;/code&gt; binding. Update your email form field to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;text_input&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;phx_debounce:&lt;/span&gt; &lt;span class="s2"&gt;"blur"&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the &lt;code&gt;"validate"&lt;/code&gt; event will only fire when a user blurs away from the email input field, and we won't show any premature validation error messages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hexdocs.pm/phoenix_live_view/bindings.html#rate-limiting-events-with-debounce-and-throttle"&gt;Learn more about LiveView's support for debouncing and other rate-limiting options&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As you might imagine, the &lt;code&gt;phx-submit&lt;/code&gt; event works very similarly to &lt;code&gt;phx-change&lt;/code&gt;. The &lt;code&gt;"save"&lt;/code&gt; event fires when the user submits the form. To respond to this event, we can implement a &lt;code&gt;handle_event/3&lt;/code&gt; function that uses the (currently empty) context function, &lt;code&gt;Invite.send_invite/2&lt;/code&gt;. The context function should create and validate a changeset.&lt;/p&gt;

&lt;p&gt;If the changeset is, in fact, valid, we can pipe it to some helper function or service that handles the details of sending invitation emails.&lt;/p&gt;

&lt;p&gt;If the changeset is not valid, we can return an error tuple. Then we can update the UI with a success or failure message accordingly. I'll leave you to practice what you're learning by implementing this behavior on your own.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapup-liveview-a-great-choice-to-build-and-validate-forms-in-elixir"&gt;
  &lt;/a&gt;
  Wrap-up: LiveView — A Great Choice to Build and Validate Forms in Elixir
&lt;/h2&gt;

&lt;p&gt;Now you've seen that Ecto changesets are not tightly coupled to the database. Schemaless changesets let you tie backend services to Phoenix forms any time you require validation and security, whether or not your application needs to access a full relational database.&lt;/p&gt;

&lt;p&gt;LiveView supports custom integration of forms to backend code with these schemaless changesets. To do so, you need only provide the &lt;code&gt;Changeset.cast/4&lt;/code&gt; function with the first argument of a two-tuple holding both data &lt;em&gt;and&lt;/em&gt; type information. This type of code is ideal for implementing form scenarios requiring validation but without the typical database backend.&lt;/p&gt;

&lt;p&gt;Whether you're working with schema-backed or schemaless changesets, LiveView provides real-time form validation and feedback, with very little hand-rolled code. We can use LiveView event bindings to handle form validation and submission in real-time with a few simple event handlers that call out to our nice, clean Phoenix context code.&lt;/p&gt;

&lt;p&gt;With that, you have everything you need to build basic forms in LiveView. To dig deeper into LiveView's rich forms offerings, &lt;a href="https://hexdocs.pm/phoenix_live_view/form-bindings.html#content"&gt;check out the docs&lt;/a&gt;. Happy coding!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S. If you'd like to read Elixir Alchemy posts as soon as they get off the press, &lt;a href="https://blog.appsignal.com/category/elixir-alchemy.html#elixir-alchemy"&gt;subscribe to our Elixir Alchemy newsletter and never miss a single post!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sophie is a Senior Engineer at GitHub, co-author of Programming Phoenix LiveView, and co-host of the BeamRad.io podcast. She has a passion for coding education. Historically, she is a cat person but will admit to owning a dog. You can &lt;a href="https://twitter.com/sm_debenedetto"&gt;find her on Twitter&lt;/a&gt; or &lt;a href="https://www.thegreatcodeadventure.com/"&gt;check out her blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>elixir</category>
    </item>
    <item>
      <title>MongoDB $weeklyUpdate (October 4, 2021): Latest MongoDB Tutorials, Events, Podcasts, &amp; Streams!</title>
      <author>Adrienne Tacke</author>
      <pubDate>Tue, 05 Oct 2021 11:27:13 +0000</pubDate>
      <link>https://dev.to/mongodb/mongodb-weeklyupdate-october-4-2021-latest-mongodb-tutorials-events-podcasts-streams-3ikf</link>
      <guid>https://dev.to/mongodb/mongodb-weeklyupdate-october-4-2021-latest-mongodb-tutorials-events-podcasts-streams-3ikf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hi-everyone"&gt;
  &lt;/a&gt;
  👋 Hi everyone!
&lt;/h2&gt;

&lt;p&gt;Welcome to MongoDB $weeklyUpdate! &lt;/p&gt;

&lt;p&gt;Here, you'll find the latest developer tutorials, upcoming official MongoDB events, and get a heads up on our latest Twitch streams and podcast, curated by &lt;a href="https://twitter.com/AdrienneTacke"&gt;Adrienne Tacke&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#freshest-tutorials-on-devhub"&gt;
  &lt;/a&gt;
  🎓 Freshest Tutorials on &lt;a href="https://developer.mongodb.com/"&gt;DevHub&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Want to find the latest MongoDB tutorials and articles created for developers, by developers? Look no further than our &lt;a href="https://developer.mongodb.com/"&gt;DevHub&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-splash-screen-natively-android-12-kotlin"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/how-to/splash-screen-android/"&gt;Building Splash Screen Natively, Android 12, Kotlin&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/developer/author/mohit-sharma/"&gt;Mohit Sharma&lt;/a&gt; &lt;br&gt;
In this article, we will explore and learn how to build a splash screen with SplashScreen API, which was introduced in Android 12. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#startactivityforresult-is-deprecated"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/article/realm-startactivityforresult-registerForActivityResult-deprecated-android-kotlin/"&gt;StartActivityForResult is deprecated!!&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/developer/author/mohit-sharma/"&gt;Mohit Sharma&lt;/a&gt; &lt;br&gt;
Learn the benefits and usage of registerForActivityResult for Android in Kotline.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#migrating-your-ios-apps-realm-schema-in-production"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/how-to/realm-schema-migration/"&gt;Migrating Your iOS App's Realm Schema in Production&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://twitter.com/andrewmorgan"&gt;Andrew Morgan&lt;/a&gt; &lt;br&gt;
This tutorial will step you through updating an existing mobile app to add some new features that require changes to the schema.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#most-useful-ios-15-swiftui-features"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/how-to/realm-ios15-swiftui/"&gt;Most Useful iOS 15 SwiftUI Features&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://twitter.com/andrewmorgan"&gt;Andrew Morgan&lt;/a&gt; &lt;br&gt;
See how to use some of the most useful new iOS 15 SwiftUI features in your mobile apps.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#official-mongodb-events"&gt;
  &lt;/a&gt;
  📅 Official MongoDB &lt;a href="https://live.mongodb.com/events/#/calendar"&gt;Events&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Attend an official MongoDB event near you (virtual for now)! Chat with MongoDB experts, learn something new, meet other developers, and win some swag!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Oct 13 (4:00 PM GMT | Global) - &lt;a href="https://live.mongodb.com/events/details/mongodb-realm-global-community-presents-data-modelling-with-realm/"&gt;Data Modelling with Realm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oct 20 (4:00 PM GMT | Global) - &lt;a href="https://live.mongodb.com/events/details/mongodb-realm-global-community-presents-a-mobile-app-from-scratch-to-production-react-native-state-management-with-realm/"&gt;A Mobile App from scratch to production! React Native state management with Realm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oct 27 (3:00 PM GMT | DACH Virtual Community) - &lt;a href="https://live.mongodb.com/events/details/mongodb-dach-virtual-community-presents-mongodb-atlas-mit-ansible-automatisieren/"&gt;MongoDB Atlas mit Ansible automatisieren&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#mongodb-on-twitch-amp-youtube"&gt;
  &lt;/a&gt;
  📺 MongoDB on &lt;a href="https://www.twitch.tv/mongodb"&gt;Twitch&lt;/a&gt; &amp;amp; &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;YouTube&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;We stream tech tutorials, live coding, and talk to members of our community via &lt;a href="https://www.twitch.tv/mongodb"&gt;Twitch&lt;/a&gt; and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;YouTube&lt;/a&gt;. Sometimes, we even stream twice a week! Be sure to &lt;a href="https://www.twitch.tv/mongodb"&gt;follow us on Twitch&lt;/a&gt; and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;subscribe to our YouTube channel&lt;/a&gt; to be notified of every stream!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Latest Stream&lt;/em&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/NIYSv4CvjOw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;🍿 &lt;a href="https://www.twitch.tv/mongodb"&gt;Follow us&lt;/a&gt; on Twitch and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;subscribe to our YouTube channel&lt;/a&gt; so you never miss a stream!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#%F0%9F%8E%99-last-word-on-the-mongodb-podcast"&gt;
  &lt;/a&gt;
  🎙 Last Word on the &lt;a href="https://mongodb.libsyn.com/"&gt;MongoDB Podcast&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Latest Episode&lt;/em&gt;&lt;br&gt;
&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/05dFJ4h2eH3PNwAadDL3Bx"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Catch up on past episodes&lt;/em&gt;:&lt;br&gt;
Ep. 79 - &lt;a href="https://open.spotify.com/episode/1iM473PGfxoqzpnQNT4o8u?si=993RzF-eT821G70EXq_PTw&amp;amp;dl_branch=1"&gt;Atlas Search with Marcus Eagan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ep. 78 - &lt;a href="https://open.spotify.com/episode/3X9x0F1Vm7eTvWklyZbZEJ?si=qc2dl8tbT3mMGB4EXEGjzQ&amp;amp;dl_branch=1"&gt;Building Kustomer with Jeremy Suriel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ep. 77 - &lt;a href="https://open.spotify.com/episode/2q8YcXNkmhuRAMtfWDBlnV?si=aw-BzALpQq6q2NAZAMyo8A&amp;amp;dl_branch=1"&gt;A Look at Modern Healthcare Technology Solutions with Luca Vicentini&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Not listening on Spotify? We got you! We're most likely on your favorite podcast network, including &lt;a href="https://podcasts.apple.com/us/podcast/the-mongodb-podcast/id1500452446"&gt;Apple Podcasts&lt;/a&gt;, &lt;a href="https://player.fm/series/the-mongodb-podcast"&gt;PlayerFM&lt;/a&gt;, &lt;a href="https://podtail.com/en/podcast/the-mongodb-podcast/"&gt;Podtail&lt;/a&gt;, and &lt;a href="https://www.listennotes.com/podcasts/the-mongodb-podcast-mongodb-0g6fUKMDN_y/"&gt;Listen Notes&lt;/a&gt; 😊)&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#mongodb-devrel-around-the-interwebz"&gt;
  &lt;/a&gt;
  🌍 MongoDB DevRel around the Interwebz
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Watch our team do their thang at various conferences, meetups, and podcasts around the world (virtually, for now). Also, find external articles and guest posts from our DevRel team here!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;📅 Upcoming Conferences&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;October: &lt;a href="https://events.codemotion.com/conferences/online/2021/online-tech-conference-spanish-edition-autumn/agenda"&gt;How to Raise Your Profile as a Developer (And Why You Should Bother!)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/Lauren_Schaefer"&gt;Lauren Schaefer&lt;/a&gt; will be at [Codemotion] Conference to give their talk "[How to Raise Your Profile as a Developer (And Why You Should Bother!)]"!&lt;/p&gt;




&lt;p&gt;💡 These $weeklyUpdates are always posted to the &lt;a href="https://www.mongodb.com/community/forums/"&gt;MongoDB Community Forums&lt;/a&gt; &lt;em&gt;first&lt;/em&gt;! &lt;a href="https://account.mongodb.com/account/register"&gt;Sign up&lt;/a&gt; today to always get first dibs on these $weeklyUpdates and other MongoDB announcements, interact with the MongoDB community, and help others solve MongoDB related issues!&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>news</category>
      <category>database</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Write a Distance Converter in SwiftUI </title>
      <author>Katharina Gopp</author>
      <pubDate>Tue, 05 Oct 2021 11:25:10 +0000</pubDate>
      <link>https://dev.to/katharinagopp/how-to-write-a-distance-converter-in-swiftui-2463</link>
      <guid>https://dev.to/katharinagopp/how-to-write-a-distance-converter-in-swiftui-2463</guid>
      <description>&lt;p&gt;In this tutorial, we will build a simple distance converter for iOS with SwiftUI. We will take a look at how to read user input as a &lt;code&gt;Double&lt;/code&gt; and how to prevent the user from entering faulty values.&lt;/p&gt;

&lt;p&gt;Once completed, we will be able to enter a distance with a start unit and select the unit we want to convert the distance into. Also, we will add a conversion history of the current session, which will be deleted after closing the app.&lt;/p&gt;

&lt;p&gt;So let's get started 😀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-modeling-the-different-units"&gt;
  &lt;/a&gt;
  Step 1: Modeling the Different Units
&lt;/h2&gt;

&lt;p&gt;We start by creating an &lt;code&gt;enum&lt;/code&gt; for the different units. For readability, we use the full name for the &lt;code&gt;cases&lt;/code&gt; and add an abbreviation, which we assign as a corresponding &lt;code&gt;String&lt;/code&gt;. Additionaly, we need our &lt;code&gt;enum&lt;/code&gt; to conform to the &lt;code&gt;CaseIterable&lt;/code&gt; protocol, so that we can later use &lt;code&gt;DistanceUnit.allCases&lt;/code&gt; in our &lt;code&gt;Picker&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum DistanceUnit: String, CaseIterable {
    case inch = "in"
    case foot = "ft"
    case yard = "yd"
    case meter = "m"
    case kilometer = "km"
    case mile = "mi"
    case nauticMile = "nmi"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-2-add-a-conversion-struct"&gt;
  &lt;/a&gt;
  Step 2: Add a Conversion Struct
&lt;/h2&gt;

&lt;p&gt;To record a conversion history, we create first a new &lt;code&gt;struct&lt;/code&gt; called &lt;code&gt;Conversion&lt;/code&gt; so we can use then an &lt;code&gt;Array&lt;/code&gt; of &lt;code&gt;Conversion&lt;/code&gt; for our conversion history. In &lt;code&gt;Conversion&lt;/code&gt;, we save the start value and unit as well as the end value and unit. Since we later want to use the &lt;code&gt;Array&lt;/code&gt; of &lt;code&gt;Conversion&lt;/code&gt; in a list, &lt;code&gt;Conversion&lt;/code&gt; has to conform to the &lt;code&gt;Identifiable&lt;/code&gt; protocol, so we have to add an &lt;code&gt;id&lt;/code&gt; as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;struct Conversion: Identifiable {
    var id: UUID = UUID()

    var startValue: Double = 0.0
    var startDistanceUnit: DistanceUnit = .kilometer
    var endValue: Double = 0.0
    var endDistanceUnit: DistanceUnit = .mile
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-3-build-a-ui-for-the-app"&gt;
  &lt;/a&gt;
  Step 3: Build a UI for the App
&lt;/h2&gt;

&lt;p&gt;In the &lt;code&gt;body&lt;/code&gt; of our &lt;code&gt;ContentView&lt;/code&gt;, we build our UI. It contains a headline, the conversion input, a button and the history of conversions as a list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;struct ContentView: View {
    @State var startDistanceUnit: DistanceUnit = .kilometer
    @State var endDistanceUnit: DistanceUnit = .mile
    @State var startValueString = ""

    @State var conversionHistory: [Conversion] = []

    var body: some View {
        VStack {
            // Headline
            Text("Distance Conversion")
                .font(.title)
                .bold()
                .padding()

            // Conversion Input
            HStack {
                Text("Distance:")
                TextField("e.g. 5.3", text: $startValueString)
                Picker("\(startDistanceUnit.rawValue)", selection: $startUnit) {
                    ForEach(DistanceUnit.allCases, id: \.self) { unit in
                        Text(unit.rawValue)
                    }
                }
                .pickerStyle(MenuPickerStyle())
            }
            .padding(.horizontal, 25)

            HStack {
                Spacer()

                Text("Convert to: ")
                Picker("\(endDistanceUnit.rawValue)", selection: $endUnit) {
                    ForEach(DistanceUnit.allCases, id: \.self) { distanceUnit in
                        Text(distanceUnit.rawValue)
                    }
                }
                .pickerStyle(MenuPickerStyle())
            }

            // Convert Button
            HStack {
                Spacer()

                Button(action: {
                    // TODO: add conversion
                }) {
                    Text("Convert")
                }
                .padding()
                .background(Color.green)
                .foregroundColor(.black)
                .cornerRadius(15)

                Spacer()
            }

            // Conversion History
            List {
                ForEach(conversionHistory.reversed()) { currentConversion in
                    HStack {
                        Spacer()

                        Text("\(currentConversion.startValue) \(currentConversion.startDistanceUnit.rawValue) -&amp;gt; \(currentConversion.endValue) \(currentConversion.endDistanceUnit.rawValue)")

                        Spacer()
                    }
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ihBLAh_5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r2bil4reuzo542769zj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ihBLAh_5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r2bil4reuzo542769zj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-implement-button-action"&gt;
  &lt;/a&gt;
  Step 4: Implement Button Action
&lt;/h2&gt;

&lt;p&gt;Next, we need a function to convert our start value and save it as a &lt;code&gt;Conversion&lt;/code&gt; in our &lt;code&gt;conversionHistory&lt;/code&gt; array. Therefore, we add the functions &lt;code&gt;convertUnit&lt;/code&gt; and &lt;code&gt;saveConversion&lt;/code&gt; and call &lt;code&gt;saveConversion()&lt;/code&gt; in our &lt;code&gt;Button&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One way of calculating the conversion is to use a nested &lt;code&gt;switch&lt;/code&gt; statement. But then we have in each &lt;code&gt;switch&lt;/code&gt; case again all other &lt;code&gt;switch&lt;/code&gt; cases. That would lead to n&lt;sup&gt;2&lt;/sup&gt; statements for n distance units. And the more units we use, the longer and more unpleasent the statement will get. &lt;/p&gt;

&lt;p&gt;Another way to calculate it is the use of a conversion factor for each &lt;code&gt;case&lt;/code&gt; of our &lt;code&gt;enum&lt;/code&gt;. When multiplying a distance with this conversion factor, we get the distance in meters. To use this factor, we add a variable to &lt;code&gt;UnitSystem&lt;/code&gt; called &lt;code&gt;conversionFactorToMeters&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;extension DistanceUnit {
    var conversionFactorToMeter: Double {
        switch self {
        case .inch:
            return 0.0254
        case .foot:
            return 0.3048
        case .yard:
            return 0.9144
        case .meter:
            return 1
        case .kilometer:
            return 1000
        case .mile:
            return 1609.344
        case .nauticMile:
            return 1852
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this, we can simply convert our value to meters by multiplying the conversion factor of the &lt;code&gt;startUnit&lt;/code&gt; and then to the specified unit by dividing with the conversion factor of the &lt;code&gt;endUnit&lt;/code&gt;. This gives us to the following functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;struct ContentView: View {
    // ...

    var body: some View {
        // ...

        Button(action: {
            saveConversion()
        }) {
            Text("Convert")
        }
        // ...
    }

    // Functions
    func convertUnit(valueToConvert: Double, fromUnit: DistanceUnit, toUnit: DistanceUnit) -&amp;gt; Double {
        return valueToConvert * fromUnit.conversionFactorToMeter / toUnit.conversionFactorToMeter
    }

    func saveConversion() {
        var conversion = Conversion()

        conversion.startUnit = startUnit
        conversion.endUnit = endUnit
        conversion.startValue = Double(startValueString) ?? 0.0
        conversion.endValue = convertUnit(valueToConvert: conversion.startValue, fromUnit: startUnit, toUnit: endUnit)

        conversions.append(conversion)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations, you have a fully functioning Distance Converter App!&lt;/p&gt;

&lt;p&gt;But...&lt;/p&gt;

&lt;p&gt;If you try it, you will see that it isn't really user-friendly. So let's change that! &lt;/p&gt;

&lt;p&gt;Since we only put &lt;code&gt;Double&lt;/code&gt; values into our &lt;code&gt;TextField&lt;/code&gt;, we can set the &lt;code&gt;keyboardType&lt;/code&gt; to &lt;code&gt;.decimalPad&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;struct ContentView: View {
    // ...
    var body: some View {
        // ...

        TextField("e.g. 5.3", text: $startValueString)
            .keyboardType(.decimalPad)

        // ...
    }
    // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While this modifier prevents us from typing anything other than numbers and decimal separators, we can still paste other text. Furthermore, we can type multiple decimal separators. This means that we don't have a decimal input which results in using the default value as &lt;code&gt;startValue&lt;/code&gt;, which is 0.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-prevent-faulty-input"&gt;
  &lt;/a&gt;
  Step 5: Prevent Faulty Input
&lt;/h2&gt;

&lt;p&gt;While searching for a solution for this problem, I came across &lt;a href="https://programmingwithswift.com/numbers-only-textfield-with-swiftui/"&gt;this&lt;/a&gt; blog post. In this blog post is a solution how to use a &lt;code&gt;TextField&lt;/code&gt; for numbers only. Since it should work not only for &lt;code&gt;Integer&lt;/code&gt; but also for &lt;code&gt;Double&lt;/code&gt; values, I made some adjustments:&lt;/p&gt;

&lt;p&gt;First we add a new &lt;code&gt;class&lt;/code&gt; called &lt;code&gt;ValidatedDecimal&lt;/code&gt;, which has a variable &lt;code&gt;valueString&lt;/code&gt;. When this variable is set, we check each char whether it is a number or the first decimal separator. All other characters will be filtered. Additionally, if the first input is a decimal separator, we add a 0 upfront.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class ValidatedDecimal: ObservableObject {
    @Published var valueString = "" {
        didSet {
            var hasDecimalSeparator = false
            var filteredString = ""

            for char in valueString {
                if char.isNumber {
                    filteredString.append(char)
                } else if String(char) == Locale.current.decimalSeparator &amp;amp;&amp;amp; !hasDecimalSeparator {
                    if filteredString.count == 0 {
                        filteredString = "0"
                    }
                    filteredString.append(char)
                    hasDecimalSeparator = true
                }
            }

            if valueString != filteredString {
                valueString = filteredString
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have to change a few things in our &lt;code&gt;ContentView&lt;/code&gt;: Instead of the &lt;code&gt;startValueString&lt;/code&gt; we use an instance of &lt;code&gt;ValidatedDecimal&lt;/code&gt; called &lt;code&gt;startValue&lt;/code&gt; and bind the input from the &lt;code&gt;TextField&lt;/code&gt; to the variable &lt;code&gt;valueString&lt;/code&gt; from &lt;code&gt;startValue&lt;/code&gt;. In the function &lt;code&gt;saveConversion()&lt;/code&gt; we also have to replace &lt;code&gt;startValueString&lt;/code&gt; with &lt;code&gt;startValue.valueString&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;struct ContentView: View {
    // ...

    // @State var startValueString = ""
    @ObservedObject var startValue = ValidatedDecimal()

    // ...

    var body: some View {
        // ...

        TextField("e.g. 5.3", text: $startValue.valueString)

        // ...
    }
    // ...

    func saveConversion() {
        // ...

        conversion.startValue = Double(startValue.valueString) ?? 0.0

        // ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This already looks quite nice 😃 So we could stop here.&lt;/p&gt;

&lt;p&gt;Or...&lt;/p&gt;

&lt;p&gt;We take another look into the different regional settings. While this code works with a dot as decimal separator, it does not work in regions, where the decimal separator is a comma. So let's fix that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6-taking-regional-settings-into-account"&gt;
  &lt;/a&gt;
  Step 6: Taking Regional Settings into Account
&lt;/h2&gt;

&lt;p&gt;If your region is using a decimal comma, we run into a problem:&lt;/p&gt;

&lt;p&gt;Since we use the &lt;code&gt;KeyboardType&lt;/code&gt; &lt;code&gt;.decimalPad&lt;/code&gt;, the comma is shown as decimal separator, which is what we want. But when casting the string into a double, we need a decimal dot instead. Otherwise the string will not be recognized as double and we get our default value of 0.0 😕&lt;/p&gt;

&lt;p&gt;To fix this, we add a computed property to &lt;code&gt;ValidatedDecimal&lt;/code&gt;, which we simply call &lt;code&gt;decimalValue&lt;/code&gt;. In this variable we take the &lt;code&gt;valueString&lt;/code&gt;, replace the decimal separator with a &lt;code&gt;"."&lt;/code&gt; and return the resulting value as &lt;code&gt;Double&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class ValidatedDecimal: ObservableObject {
    // ...

    var decimalValue: Double {
        let replacedString = valueString.replacingOccurrences(of: Locale.current.decimalSeparator!, with: ".")

        return Double(replacedString) ?? 0
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we only have to use &lt;code&gt;decimalValue&lt;/code&gt; as &lt;code&gt;startValue&lt;/code&gt; for the &lt;code&gt;Conversion&lt;/code&gt; in the &lt;code&gt;ContentView&lt;/code&gt;. Also, we change the decimal point of the text in the &lt;code&gt;TextField&lt;/code&gt; to &lt;code&gt;Locale.current.decimalSeparator&lt;/code&gt; to be consistent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;struct ContentView: View {
    // ...

    var body: some View {
        // ...

        TextField("e.g. 5\(Locale.current.decimalSeparator!)3", text: $startValue.valueString)

        // ...
    }
    // ...

    func saveConversion() {
        // ...

        // conversion.startValue = Double(startValue.valueString) ?? 0.0
        conversion.startValue = startValue.decimalValue

        // ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wow, this looks like we're finished 😃 &lt;/p&gt;

&lt;p&gt;On the other hand...&lt;/p&gt;

&lt;p&gt;By making some minor adjustments we can make it more readable and user-friendly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-7-final-adjustments"&gt;
  &lt;/a&gt;
  Step 7: Final Adjustments
&lt;/h2&gt;

&lt;p&gt;First of all, we don't want to always delete the previous input. So we add a &lt;code&gt;reset()&lt;/code&gt; function to our code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;struct ContentView: View {
    // ...

    var body: some View {
        // ...

        Button(action: {
            saveConversion()
            resetInput()
        }) {
            Text("Convert")
        }
        // ...
    }

    // Functions
    // ...

    func resetInput() {
        startValue.valueString = ""
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, we don't want to see trailing zeros in our history, so let's add a &lt;code&gt;NumberFormatter&lt;/code&gt;. In this formatter, we can set the maximum  accuracy of the conversion by setting a value to the property &lt;code&gt;.maximumFractionDigits&lt;/code&gt;. Please note, however, that we should not set this too high, as the conversion and the floating point arithmetic of our double value can lead to inaccuracy.&lt;/p&gt;

&lt;p&gt;For readability, we put the corresponding code into functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;struct ContentView: View {
    // ...
    var body: some View {
        // ...

        List {
                ForEach(conversions.reversed()) { currentConversion in
                    HStack {
                        Spacer()

                        Text(printConversion(conversion: currentConversion))

                        Spacer()
                    }
                }
            }

        // ...
    }
    // Functions
    // ...

    func printConversion(conversion: Conversion) -&amp;gt; String {
        return printDistanceWithUnit(distance: conversion.startValue, unit: conversion.startUnit) + " -&amp;gt; " + printDistanceWithUnit(distance: conversion.endValue, unit: conversion.endUnit)
    }

    func printDistanceWithUnit(distance: Double, unit: DistanceUnit) -&amp;gt; String {
        let formatter = NumberFormatter()
        formatter.numberStyle = .decimal
        formatter.maximumFractionDigits = 6 // Change this value for accuracy

        var returnString = ""

        let value = NSNumber(value: distance)
        if let distanceString = formatter.string(from: value) {
            returnString = distanceString + " " + unit.rawValue
        }

        return returnString
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, to prevent tapping the &lt;code&gt;Button&lt;/code&gt; and adding lot of zero to zero conversions, we disable the convert &lt;code&gt;Button&lt;/code&gt; if the &lt;code&gt;TextField&lt;/code&gt; is blank and change it's color to make the deactivation visible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;struct ContentView: View {
    // ...
    var body: some View {
        // ...

        Button(action: {
                    saveConversion()
                    resetInput()
                }) {
                    Text("Convert")
                }
                .disabled(startValue.valueString == "")
                .padding()
                .background(startValue.valueString == "" ? Color.gray : Color.green)
                .foregroundColor(startValue.valueString == "" ? .black.opacity(0.2) : .black)
                .cornerRadius(15)        
        // ...
    }
    // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So that's it, we made a distance converter app 👍🏻 &lt;/p&gt;

&lt;p&gt;You can find the full source code &lt;a href="https://github.com/KatharinaGopp/DistanceConverter"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this post helped you to implement a conversion app and how to use a &lt;code&gt;TextField&lt;/code&gt; for &lt;code&gt;Double&lt;/code&gt; input. And while there is no built in option to prevent faulty input in a &lt;code&gt;TextField&lt;/code&gt;, we can always create our own input validator 😉.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>swift</category>
      <category>ios</category>
    </item>
    <item>
      <title>Booking Web App UI Kit</title>
      <author>Mahfuzul Islam Nabil</author>
      <pubDate>Tue, 05 Oct 2021 10:46:53 +0000</pubDate>
      <link>https://dev.to/mahfuzulnabil/booking-web-app-ui-kit-2bgg</link>
      <guid>https://dev.to/mahfuzulnabil/booking-web-app-ui-kit-2bgg</guid>
      <description>&lt;p&gt;Hey, Design Lovers!&lt;/p&gt;

&lt;p&gt;This is a Booking Web App UI Kit– Homepage Design. In this Web App, you can book 3 types of trips. Hotel, Flight, and Car Rental.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vWJHm4yS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/448e22qt20ez5v8ybk38.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vWJHm4yS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/448e22qt20ez5v8ybk38.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Trip Guide is a booking web app UI kit. By developing this website, you can book hotels, flights, and car rentals. The design is very friendly with multiple booking options. People can easily book anything by using this website because it’s fully customizable. The designer can use their own artworks which will be mixed with original photos. The development device is responsive to the dark version of the web app. The application is a development device for creating responsive web applications. It allows you to work on a dark version of the web app as well as a standard version without needing to switch tabs. It has many different designs to suit your taste, easy to customize design files for Figma, XD and Sketch ready to implement into your own projects. &lt;/p&gt;

&lt;p&gt;You can customize everything on this template! You can change everything, colors, fonts, icons, button design anything you want.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.uihut.com/web-app-designs/trip-guide-booking-web-app-ui-kit/12169"&gt;https://www.uihut.com/web-app-designs/trip-guide-booking-web-app-ui-kit/12169&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have 14,000+ Best UI Design (Free/Premium)&lt;br&gt;
(web templates, web app, mobile app, illustrations, icons)&lt;br&gt;
( Codes Also Available)&lt;br&gt;
From 👉  uihut.com  &lt;/p&gt;

&lt;p&gt;[📢 Lifetime PLAN: $99]&lt;br&gt;
📌Offer,&lt;br&gt;
CODE: nab10&lt;br&gt;
(10% DISCOUNT OFF)&lt;/p&gt;

</description>
      <category>bookingwebapp</category>
      <category>travelapp</category>
      <category>webapp</category>
      <category>uikit</category>
    </item>
    <item>
      <title>A blog post about blogging</title>
      <author>Jelle Smeets</author>
      <pubDate>Tue, 05 Oct 2021 10:41:58 +0000</pubDate>
      <link>https://dev.to/smeetsmeister/a-blog-post-about-blogging-391p</link>
      <guid>https://dev.to/smeetsmeister/a-blog-post-about-blogging-391p</guid>
      <description>&lt;p&gt;I published my first blog post &lt;a href="https://blog.jellesmeets.nl/developer-basics/why-you-should-put-your-code-on-an-opensource-platform/"&gt;why you should put your code on an opensource platform&lt;/a&gt; on the 20th of January in 2019. And I thought it was a good moment to reflect on how blogging has been for me so far. In this new "meta" category I am planning to dedicate a few blog posts to what I have learned in my blogging journey. In this first blog post, we will dive into some of the statistics. How many people have read my blog posts and which ones are the most popular? Let's dive in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#traffic"&gt;
  &lt;/a&gt;
  Traffic
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qKI8fjX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17j066v9jqui21mal4en.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qKI8fjX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17j066v9jqui21mal4en.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Total amount of page views&lt;/p&gt;

&lt;p&gt;From 20-01-2019 until 03-10-2021 I have had &lt;strong&gt;3.364&lt;/strong&gt; page views. I've had some spikes that I will explain later, but on average the page views are between 80 - 150 views per month.&lt;/p&gt;

&lt;p&gt;The traffic can be divided into the following categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;57% Comes from direct traffic&lt;/li&gt;
&lt;li&gt;18% Comes from social (Thank you Twitter)&lt;/li&gt;
&lt;li&gt;14.3% Comes through organic search&lt;/li&gt;
&lt;li&gt;10.3% are referrals, mostly other Socials and clicks from other platforms like dev.to&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#most-viewed-blog-posts"&gt;
  &lt;/a&gt;
  Most viewed blog posts
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g4s80mHi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/znzuqsy134c4it2bc8vn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g4s80mHi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/znzuqsy134c4it2bc8vn.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Most viewed blog posts&lt;/p&gt;

&lt;p&gt;My most popular blog post is the &lt;a href="https://blog.jellesmeets.nl/lists/4-lessons-i-learned-as-a-starting-scrum-master/"&gt;4 lessons I learned as a starting scrum master&lt;/a&gt;. It has 982 pageviews which account for almost 30% of all page views! Most of these page views are thanks to Reddit. I shared this post there and it kind of blew up. This still brings in a small part of page views.&lt;/p&gt;

&lt;p&gt;The second best blog post in terms of page views is the &lt;a href="https://blog.jellesmeets.nl/retrospective/movie-retrospective/"&gt;Movie retrospective&lt;/a&gt;. 170 pageviews and about 5% of traffic.&lt;/p&gt;

&lt;p&gt;The third best blog post is the &lt;a href="https://blog.jellesmeets.nl/retrospective/finding-your-priorities-with-the-eisenhower-retrospective/"&gt;Eisenhower retrospective&lt;/a&gt;. Actually the first retrospective I wrote a blog post about and was the whole inspiration for the &lt;a href="https://blog.jellesmeets.nl/retrospective/retrospective-challenge-2020/"&gt;retrospective challenge&lt;/a&gt;. With 152 page views and 4,5% of traffic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#seo"&gt;
  &lt;/a&gt;
  SEO
&lt;/h2&gt;

&lt;p&gt;If my job was SEO specialist at a company I would probably already be fired. I have 22.271 impressions on Google and just 156 clicks. That means my click-through rate is 0.7%. To keep it positive, that means I have a lot of room for improvement in the future.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5rBc1kMr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2gq8rdd9l4dl4s76ryn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5rBc1kMr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2gq8rdd9l4dl4s76ryn.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Clicks in Google&lt;/p&gt;

&lt;p&gt;In terms of clicks, there is 1 content king. The movie retrospective. I'm not sure how or why, but this page lands almost 54% of all clicks on Google. Nice!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--roMIhqWE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fqu2z5dnppukbkpeo48.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--roMIhqWE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fqu2z5dnppukbkpeo48.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Impressions in Google&lt;/p&gt;

&lt;p&gt;As you can see, the pages that get a lot of impressions are not getting the same amount of clicks. Interesting and an interesting area to take a look at in terms of improving click-through rates.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#newsletter"&gt;
  &lt;/a&gt;
  Newsletter
&lt;/h2&gt;

&lt;p&gt;Almost every blog dedicated to improving your blogging mentions having a newsletter. Get e-mail addresses of people that are interested in your content. And send them emails once you write new blog posts. This will drive recurring customers back to your blog post. This sounds good on paper, but I &lt;strong&gt;&lt;em&gt;ab-so-lutely&lt;/em&gt;&lt;/strong&gt; hate serving popups to visitors to subscribe to the newsletter. I have a menu item at the top, but that does not seem to drive a lot of traffic. If you are interested in joining the newsletter, you can &lt;a href="https://blog.jellesmeets.nl/newsletter-signup/"&gt;sign up here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In terms of how many people actually signed up? Just 1, Thanks &lt;a href="https://twitter.com/bartveneman"&gt;Bart&lt;/a&gt;, you are the real MVP!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#earnings"&gt;
  &lt;/a&gt;
  Earnings
&lt;/h2&gt;

&lt;p&gt;If there is one thing I hate more than popups asking you to sign up for a newsletter, it is ads. Luckily I found a great replacement called &lt;a href="https://coil.com/"&gt;Coil&lt;/a&gt;. You basically pay Coil 5 dollars per month and install a browser plugin. Whenever you visit a website that has Coil, you pay a small part of your 5 dollars to that website, depending on how long you spent on this website. This makes sure your subscription goes to the websites you really visit. And the longer you stay the more they will get.&lt;/p&gt;

&lt;p&gt;In this period I have earned &lt;strong&gt;€4,63&lt;/strong&gt; with Coil. Almost 1 month of hosting. This amount fluctuates, there are times where I earn 80 cents per day, and there are times where I earn 1 cent in 2 months.&lt;/p&gt;

&lt;p&gt;Those are the statistics on my blogging journey. Do you have any tips or any other metrics you would like to see? Let me know and I will answer them in one of the upcoming meta posts.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>meta</category>
      <category>learninpublic</category>
      <category>learning</category>
    </item>
    <item>
      <title>Learning Python- Intermediate course: Day 37, File handling in Python</title>
      <author>Aatmaj</author>
      <pubDate>Tue, 05 Oct 2021 10:32:12 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-intermediate-course-day-37-file-handling-in-python-1pih</link>
      <guid>https://dev.to/aatmaj/learning-python-intermediate-course-day-37-file-handling-in-python-1pih</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-we-cover-filehandling-in-python-in-a-lightning-fast-speed"&gt;
  &lt;/a&gt;
  Today we cover File-handling in Python in a lightning fast speed
&lt;/h2&gt;




&lt;p&gt;Many times we need to save data into files for long-term usage. Today we will learn how to write data into a file and retrieve it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#opening-a-file"&gt;
  &lt;/a&gt;
  Opening a file
&lt;/h3&gt;

&lt;p&gt;Python has two types of files, text and binary. But we will now learn only about text files, which are quite popular. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How will the interpreter know when to end a line? Each line in a file has the EOL terminating character (example comma or newline character) which the interpreter reads and processes a new line.. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can open a file into four modes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"r"  Reading mode&lt;/li&gt;
&lt;li&gt;"w"  Writing mode&lt;/li&gt;
&lt;li&gt;"a"  Appending mode&lt;/li&gt;
&lt;li&gt;"r+" Both reading and writing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If not passed, then Python will assume it to be “ r ” by default. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax for opening a file&lt;/strong&gt; We can open a file using the syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'myfile.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Reading mode
&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'myfile.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Writing mode
&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'myfile.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Appending mode
&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'myfile.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r+'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Both reading and writing
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note than the file name is case sensitive. So &lt;code&gt;myfile.txt&lt;/code&gt; is not equal to &lt;code&gt;Myfile.txt&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#reading-from-a-file"&gt;
  &lt;/a&gt;
  Reading from a file
&lt;/h3&gt;

&lt;p&gt;First we make a file named....say &lt;code&gt;myfile.txt&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;A Quick brown fox jumps over the lazy dog
Welcome to PYTHON Programming
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case the file doesn't exist, we get this error-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Traceback (most recent call last):
  File "main.py", line 1, in &amp;lt;module&amp;gt;
    file = open("myfile.txt", "r") 
FileNotFoundError: [Errno 2] No such file or directory: 'myfile.txt'

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can read the contents of the file using the &lt;code&gt;file.read()&lt;/code&gt; method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"myfile.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OUTPUT&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;A Quick brown fox jumps over the lazy dog
Welcome to PYTHON Programming

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also return a specific number of characters by adding parameters to the read method. For example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"myfile.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OUTPUT&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;A Quick
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The value returned is a string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"myfile.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;class 'str'&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can access the file line by line using the for in loop&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"myfile.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This syntax prints out each element of the file in lines.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;A Quick brown fox jumps over the lazy dog

Welcome to PYTHON Programming

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#writing-into-a-file"&gt;
  &lt;/a&gt;
  Writing into a file
&lt;/h3&gt;

&lt;p&gt;When we write into a file, we do not need to create one. If the file in which we want to write doesn't exist, it gets automatically created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'myfile.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A Quick brown fox jumps over the lazy dog."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Welcome to PYTHON Programming"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OUTPUT (myfile.txt)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;A Quick brown fox jumps over the lazy dog.Welcome to PYTHON Programming
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The close() command terminates all the resources in use and frees the system of this particular program.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we want the text into two separate lines, we can use the newline &lt;code&gt;\n&lt;/code&gt; symbol.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'myfile.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A Quick brown fox jumps over the lazy dog."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Welcome to PYTHON Programming"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OUTPUT- (myfile.txt)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;A Quick brown fox jumps over the lazy dog.
Welcome to PYTHON Programming
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The write method overrides the file each and every time the file is opened function is called. To avoid this, we can use the append mode to add to the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'myfile.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A Quick brown fox jumps over the lazy dog."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Welcome to PYTHON Programming"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;A Quick brown fox jumps over the lazy dog.
Welcome to PYTHON ProgrammingA Quick brown fox jumps over the lazy dog.
Welcome to PYTHON Programming
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;So friends we have covered file handling today. From next parts onwards we will cover object oriented programming.&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>python</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
