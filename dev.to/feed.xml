<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Migrating Your Open Source Builds Off Of Travis CI</title>
      <author>Adam Gordon Bell</author>
      <pubDate>Fri, 07 Jan 2022 16:53:01 +0000</pubDate>
      <link>https://dev.to/adamgordonbell/migrating-your-open-source-builds-off-of-travis-ci-24i6</link>
      <guid>https://dev.to/adamgordonbell/migrating-your-open-source-builds-off-of-travis-ci-24i6</guid>
      <description>&lt;p&gt;Starting in early 2021 and continuing to this day a movement has been underway to migrate open-source projects off of Travis CI. What happened and where should you move your project to?&lt;/p&gt;

&lt;p&gt;I bet you can't guess where I recommend?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JD0_1nCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/assets/images/migrating-from-travis/quote1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JD0_1nCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/assets/images/migrating-from-travis/quote1.png" alt="Travis not providing CI" width="587" height="544"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're not familiar with Travis CI, it's a build company that has been powering the continuous integration (CI) of many open source projects since it launched in 2011. It was the first build solution that was free for open source use and that easily integrated into GitHub.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-happened"&gt;
  &lt;/a&gt;
  What Happened?
&lt;/h2&gt;

&lt;p&gt;In 2019 Travis was acquired by a private equity group and many engineers were let go.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So apparently Travis CI is being strip-mined immediately after their acquisition by Idera. Sorry, I mean after "joining the Idera family" ðŸ™„ &lt;a href="https://t.co/CE5ERp1RsY"&gt;https://t.co/CE5ERp1RsY&lt;/a&gt; A bunch of talented people are waking up to termination letters. Absolutely shameful. &lt;a href="https://t.co/BbBRPdnswe"&gt;https://t.co/BbBRPdnswe&lt;/a&gt;&lt;/p&gt;â€” Senior Oops Engineer (&lt;a class="mentioned-user" href="https://dev.to/reinh"&gt;@reinh&lt;/a&gt;) &lt;a href="https://twitter.com/ReinH/status/1098663375985229825?ref_src=twsrc%5Etfw"&gt;February 21, 2019&lt;/a&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then, on Nov 2, 2020, Travis CI announced the end of its unlimited support for open-source projects:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For those of you who have been building on public repositories (on travis-ci.com, with no paid subscription), we will upgrade you to our trial (free) plan with a 10K credit allotment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When your credit allotment runs out - we'd love for you to consider which of our plans will meet your needs.&lt;/strong&gt; - &lt;a href="https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing"&gt;Travis CI blog post&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The reason behind the change is stated to be abuse by crypto-miners:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;However, in recent months we have encountered significant abuse of the intention of this offering (increased activity of cryptocurrency miners, TOR nodes operators etc.).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, many feel the real reason is that the acquirer is aiming for profitability at all costs and supporting the open-source community represents a significant cost.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My previous company was on Travis, and as soon as I saw that Travis was purchased by private equity, I knew the downward spiral had begun and I recommended we move to something else. Not surprised that this is happening a couple of years later...my understanding is that private equity will tend towards slowing/stopping development after acquisition to cut costs/headcount, and then squeeze the remaining value from what's left, so this is in-line with that playbook. Â - &lt;a href="https://news.ycombinator.com/item?id=25340486"&gt;rpdillion on hacker news&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#why-it-matters"&gt;
  &lt;/a&gt;
  Why It Matters
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The open source movement runs on the heroic efforts of not enough people doing too much work. They need help. - &lt;a href="https://www.wired.com/author/clive-thompson"&gt;CLIVE THOMPSON&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Many open-source projects are still using Travis and open-source maintainers are notoriously overworked. Â Time spent migrating builds is time not spent on other things. Â Large well-maintained projects will likely quickly transition but for many smaller projects, an abrupt change in a service they depend on is a huge challenge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-move-to"&gt;
  &lt;/a&gt;
  Where to Move To
&lt;/h2&gt;

&lt;p&gt;If you maintain an open-source project that uses TravisCI and are hoping to get off it, then assuming you have the time to migrate, there are actually many viable options.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#option-run-your-own-builds"&gt;
  &lt;/a&gt;
  Option: Run Your Own Builds
&lt;/h3&gt;

&lt;p&gt;You can find some &lt;a href="https://medium.com/google-developers/how-to-run-travisci-locally-on-docker-822fc6b2db2e"&gt;scattered&lt;/a&gt; &lt;a href="https://stackoverflow.com/a/35972902"&gt;instructions&lt;/a&gt; &lt;a href="https://stackoverflow.com/a/35972902"&gt;online&lt;/a&gt; for running Travis builds yourself. There are mixed reports on the stability and feasibility of this approach, but if your adventurous, you could try to set up your own Travis CI build executor on your own hardware.&lt;/p&gt;

&lt;p&gt;A better option, if you want to run the builds on your own hardware is to look at something like &lt;a href="https://buildkite.com/"&gt;Buildkite&lt;/a&gt; or &lt;a href="https://about.gitlab.com/stages-devops-lifecycle/continuous-integration/https://about.gitlab.com/stages-devops-lifecycle/continuous-integration/"&gt;GitLab CI&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#option-circle-ci"&gt;
  &lt;/a&gt;
  Option: Circle CI
&lt;/h3&gt;

&lt;p&gt;A better option is &lt;a href="https://dev.to/blog/continuous-integration#circleci"&gt;Circle CI&lt;/a&gt; , a Travis CI competitor which still offers a free plan. Â &lt;/p&gt;

&lt;p&gt;Circle CI offers 400,000 build credits per month to any open-source public repository. Â This is their free plan and limits concurrency to 1 job at a time. They also have an easy GitHub integration and no application process. Â &lt;/p&gt;

&lt;p&gt;They also allow use of the &lt;a href="https://circleci.com/open-source/"&gt;free plan&lt;/a&gt; with private repositories. This makes it a great choice if your project is not actually open-source.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-option-github-actions"&gt;
  &lt;/a&gt;
  Best Option: GitHub Actions
&lt;/h3&gt;

&lt;p&gt;An even better option is &lt;a href="https://dev.to/blog/continuous-integration#github-actions"&gt;GitHub Actions&lt;/a&gt;, a cloud CI system directly from GitHub. Â GitHub is at the center of many open source projects and this makes it a natural choice for CI. Â &lt;/p&gt;

&lt;p&gt;GitHub Actions (GHA) is newer than either TravisCI or Circle CI, having launched in late 2018.&lt;/p&gt;

&lt;p&gt;GHA offers very generous build credits, 20 concurrent build jobs per project and no limit on build time used. Â  If your pipeline can be run in parallel this concurrency can really be a great enabler. Â The only limitation I was able to find is that the build may last no longer than 6 hours in total.&lt;/p&gt;

&lt;p&gt;If your project is hosted on GitHub and is open source then the &lt;a href="https://docs.github.com/en/free-pro-team@latest/actions/reference/usage-limits-billing-and-administration"&gt;GHA open source plan&lt;/a&gt; seems like the best bet right now.&lt;/p&gt;

&lt;p&gt;But wait, there is an even better solution: being vendor neutral. Before I explain how you become vendor neutral lets review.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary-of-open-source-plans"&gt;
  &lt;/a&gt;
  Summary of Open Source Plans
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Service&lt;/th&gt;
&lt;th&gt;Open Source Offering&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Travis CI&lt;/td&gt;
&lt;td&gt;&lt;a href="https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing"&gt;1000 minutes total with application process for more&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Circle CI&lt;/td&gt;
&lt;td&gt;&lt;a href="https://circleci.com/open-source/"&gt;1 concurrent build at a time&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GitHub Actions&lt;/td&gt;
&lt;td&gt;&lt;a href="https://docs.github.com/en/free-pro-team@latest/actions/reference/usage-limits-billing-and-administration"&gt;20 concurrent build jobs per project&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#dont-let-this-happen-again"&gt;
  &lt;/a&gt;
  Don't Let This Happen Again
&lt;/h2&gt;

&lt;p&gt;So GitHub has a generous build plan, but moving your CI process is not easy or free. Â The more complex your build, the harder porting from one cloud CI to another is going to be. Â If you move to GHA and then GHA stops being a viable option in the future then this whole effort will have to be repeated. Â &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#neutral-build-specifications"&gt;
  &lt;/a&gt;
  Neutral Build Specifications
&lt;/h2&gt;

&lt;p&gt;How can you minimize the effort of moving from build platform to another?&lt;/p&gt;

&lt;p&gt;My suggestion is to keep as much logic as possible out of the proprietary build definition. Instead, define it in an open-source format that you can execute anywhere.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#makefiles-and-dockerfiles"&gt;
  &lt;/a&gt;
  Makefiles and Dockerfiles
&lt;/h3&gt;

&lt;p&gt;One way to build a CI neutral build definition is to use a Makefile and a dockerfile. Â The Makefile contains the various steps of your build pipeline and you run it inside a docker container which installs any needed dependencies. Â &lt;a href="https://github.com/qmk/qmk_firmware"&gt;QMK&lt;/a&gt; is a popular open-source project that uses this approach.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; qmkfm/base_container&lt;/span&gt;

&lt;span class="k"&gt;VOLUME&lt;/span&gt;&lt;span class="s"&gt; /qmk_firmware&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /qmk_firmware&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; make all:default&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/qmk/qmk_firmware/blob/master/Dockerfile"&gt;QMK&lt;/a&gt; Docker File for executing the full build&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#earthly"&gt;
  &lt;/a&gt;
  Earthly
&lt;/h3&gt;

&lt;p&gt;I am an Earthly contributor and this is the Earthly blog, but in my totally biased opinion, it deserves a mention as an neutral format for defining a build. The Elixir web framework &lt;a href="https://github.com/phoenixframework/phoenix/blob/master/Earthfile"&gt;Phoenix is a great example to take a look at&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Earthly is like a Makefile where each step is containerized and dependencies are explicitly declared. Â &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; golang:1.13-alpine3.11&lt;/span&gt;

build:
 COPY main.go .
 RUN go build main.go
 SAVE ARTIFACT main AS LOCAL main

lint: 
 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example build steps for a &lt;a href="https://github.com/earthly/earthly/blob/main/examples/go/Earthfile"&gt;go application&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-interesting-options"&gt;
  &lt;/a&gt;
  Other Interesting Options
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#easier-migration-from-travis-to-gha"&gt;
  &lt;/a&gt;
  Easier Migration from Travis to GHA
&lt;/h3&gt;

&lt;p&gt;Migrating your build out of Travis will take a little work. Â If you aren't interested in a neutral format, &lt;a href="https://github.com/marketplace/actions/run-travis-yml"&gt;this GHA action&lt;/a&gt; might make it easier. Â &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This action setups environment variables specified in the &lt;code&gt;.travis.yml&lt;/code&gt; file and then runs &lt;em&gt;one&lt;/em&gt; of the (potentially) many build jobs within the test build stage.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#serverless-builds"&gt;
  &lt;/a&gt;
  Serverless Builds
&lt;/h3&gt;

&lt;p&gt;Another interesting option if you are feeling adventurous is using AWS lambda as your build executor. Â I have no idea how feasible this is, however, &lt;a href="https://github.com/StanfordSNR/gg"&gt;the gg project&lt;/a&gt; from Stanford looks interesting. Â It attempts to use AWS lambdas for running builds at the maximum possible parallelism. Â &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#takeaways"&gt;
  &lt;/a&gt;
  Take-Aways
&lt;/h2&gt;

&lt;p&gt;You probably need to move your open-source project's builds off of Travis CI. If you host it on GitHub, GitHub Actions is probably a good choice. There is a risk that the GHA offer will disappear as well. Â You can protect yourself from that by defining your build in an open format that is easy to move around. Â All build problems can be solved by another layer of abstraction.&lt;/p&gt;

&lt;p&gt;If you are going that route, I think &lt;a href="https://earthly.dev/"&gt;Earthly&lt;/a&gt; is a great option, but as I said, I am biased.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to avoid burnout as a Developer</title>
      <author>Dylan Oh</author>
      <pubDate>Fri, 07 Jan 2022 16:48:48 +0000</pubDate>
      <link>https://dev.to/ohdylan/how-to-avoid-burnout-as-a-developer-f2c</link>
      <guid>https://dev.to/ohdylan/how-to-avoid-burnout-as-a-developer-f2c</guid>
      <description>&lt;p&gt;Let's pause the technical stuff for a week and talk about how should we maintain our mental health as a developer (as a human).&lt;/p&gt;

&lt;p&gt;I have always been a self-motivated person and wanting to push myself to do more and learn more in life. Besides, I had a bad habit where I tend to blame myself so much and felt guilty when I failed to make good use of time. My friends told me that I should get some chill and it's ok to be relax sometimes. However, I did not listen to that and felt that I should not waste any little piece of my time in my 20's. In turn, I slept lesser, kept on forcing myself to sit in front of the computer even though I did not feel like in on that day.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#it-was-just-a-random-night-that-i-suddenly-had-breathlessness"&gt;
  &lt;/a&gt;
  It was just a random night that I suddenly had breathlessness.
&lt;/h3&gt;

&lt;p&gt;I was kinda panic and almost wanted to call the ambulance. As one of my best friends, I reached out to Mr.Google to seek for some self-help methods (bad example, please get help from medical experts) and luckily it did reduce my symptom. Started from that day, I kept having a chest distress and feeling difficult in breathing. I started being suspicious on every part of my body where I felt like none of them is working well. I had seek countless medical help (even a full body checkup). However, all the doctors came out with the same diagnosis: You do not have any issue with your physical health, but it seems like your are experiencing some &lt;strong&gt;ANXIETY&lt;/strong&gt; issues.&lt;/p&gt;

&lt;p&gt;I started to think where did this anxiety come from. I did not have too much stress at work as the projects were still manageable, and all my colleagues are awesome. By then, I realized that the source of stress is me, from myself. I had been in the loop of forcing myself to make use of every single second of my life, then I failed and blamed myself for being such an indiscipline person. I believed that I am not the only one having this issue. As a developer, most of us have &lt;strong&gt;IMPOSTER SYNDROME&lt;/strong&gt;, where we always feel like we know nothing and we must be on the lowest end of the curve. This feeling of self-abasement has caused us to wanting to improve and exhaust ourselves. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#we-all-forget-this-one-thing-no-one-is-perfect"&gt;
  &lt;/a&gt;
  We all forget this one thing: No one is PERFECT.
&lt;/h2&gt;

&lt;p&gt;When having this imaginery self of being the best programmer in the world, we also have that sense of disappointment to ourselves for not reaching to that level. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#one-thing-that-i-do-to-overcome-this-is-to-write-down-reflections"&gt;
  &lt;/a&gt;
  One thing that I do to overcome this, is to &lt;em&gt;write down reflections&lt;/em&gt;.
&lt;/h4&gt;

&lt;p&gt;Look back at yourself a few years / months ago, just how much have you improved? We don't compare ourselves to others as everyone has a different set of situations and starting point. Who we should compare to is the yesterday self. As long as we are 1% better than that, it is something worth celebrating. By doing this, there is no way that you could not become a better person in the &lt;em&gt;LONG RUN&lt;/em&gt;. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#another-thing-that-helps-me-a-lot-is-to-get-rid-of-my-social-media-apps-on-phone"&gt;
  &lt;/a&gt;
  Another thing that helps me a lot is to &lt;em&gt;get rid of my social media apps on phone&lt;/em&gt;.
&lt;/h4&gt;

&lt;p&gt;People tend to show us the better side of their life and we might start doing comparison subconciously. "Look at these people, they are all living fulfilling and productive lives ... I am such a loser." If you are able to turn all these into motivation to go forward, I think that is good for you. However, most of us will just feel the frustration. Thus, I would suggest that you may uninstall those applications from your phone, but access them through the phone browser if you have to do some catchups with friends. With this, you can increase the resistance of turning them on and get your own life back. It works for me and highly recommended that you try it out.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lastly-take-a-break-if-you-have-to"&gt;
  &lt;/a&gt;
  Lastly, &lt;em&gt;take a break if you have to&lt;/em&gt;.
&lt;/h4&gt;

&lt;p&gt;The activities that I would suggest would be having a casual walk (it would be even better to walk in the nature), just flex your brain a little bit. It is totally fine to grab a cup of coffee with friends, to watch a great movie or take a short nap. Exercising is also a great way to reduce the anxiety.&lt;/p&gt;

&lt;p&gt;Fortunately, I have been feeling much better nowadays and I am able to share these with all of you. I treat myself much better and I have learnt how to slot resting time into my time blocks. Hope this article could helps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do follow me for more future articles on web design, programming and self-improvement ðŸ˜Š&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
      <category>beginners</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Scope Basis (Life span of a code)</title>
      <author>Chris Martins</author>
      <pubDate>Fri, 07 Jan 2022 15:47:22 +0000</pubDate>
      <link>https://dev.to/biochris/scope-basis-life-span-of-a-code-2ik5</link>
      <guid>https://dev.to/biochris/scope-basis-life-span-of-a-code-2ik5</guid>
      <description>&lt;p&gt;In this article, we will be discussing the accessibility of a given code, based on its scope declaration. &lt;/p&gt;

&lt;p&gt;Definition of Variable Scope: Scope of a variable is the part of a program in which a code is accessible.&lt;br&gt;
Basically we have 2 types of Variable scopes; Global scope and The Local scope. &lt;/p&gt;

&lt;p&gt;Further more, a code can only be accessed in a program if it hasn't used up its life span. That is to say, every code has a given life span in which when exhausted, the code will be erased from the memory of the computer. The computer will not be able to access that code or run it. &lt;/p&gt;

&lt;p&gt;GLOBAL SCOPE: a global variable scope is accessible throughout the entire program. In other words they have a very long life span. You can access a global variable scope anywhere throughout the program. They are citizen of the entire program.  In the program, a globally declared variable scope takes dominance, but within a local variable scope, the locally declared variables are dominant(gets executed over the global variable scope). &lt;br&gt;
You can access the global variable scope even in local scope like within a function. A global variable scope claims citizenship throughout the entire program. &lt;/p&gt;

&lt;p&gt;For Example:&lt;br&gt;
&lt;code&gt;let a = gold;&lt;br&gt;
Console.log(a);&lt;br&gt;
Function local(){&lt;br&gt;
 let b = silver;&lt;br&gt;
 Console.log(a)&lt;br&gt;
}&lt;br&gt;
local();&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
When we run this code we get the word gold printed twice, though it wasn't declared within the function, but for the fact it's a globally declared variable scope, it can be accessed throughout the program, and have a long life span. &lt;/p&gt;

&lt;p&gt;LOCAL SCOPE: A local variable scope is a code that is only accessible within the code block it was declared, within a function. It takes citizenship of only its code block or within the function it was declared, outside which the code ceases to exist, or its life span is terminated.  A locally declared variable scope can not be accessed outside its code block, once the code block ends, the life span of the local scope ends as well, and it gets erased from the memory of the computer. That is to say, you can not call a locally declared variable outside its function or code block, it will return the error not declared. &lt;br&gt;
However, within the function or the code block of a local variable scope, the local scope takes dominance over the global scope. &lt;br&gt;
For Example:&lt;br&gt;
&lt;code&gt;let a = gold;&lt;br&gt;
Function local(){&lt;br&gt;
 let a = silver;&lt;br&gt;
 Console.log(a)&lt;br&gt;
}&lt;br&gt;
local();&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
When we call the function local, it returns silver. Because within the local scope, the locally declared variable takes dominance over the global scope.&lt;/p&gt;

&lt;p&gt;But when we call a local scope outside its code block, it can not be accessed. It will return the error not declared. That is, once the code block ends, the life span of a locally declared variable ends as well. &lt;/p&gt;

&lt;p&gt;If we declare a variable locally with the same variable name as a globally declared variable, both variables are entirely different and will return either the local scope or global scope based on where it is called. &lt;br&gt;
Example;&lt;br&gt;
&lt;code&gt;let a = gold;&lt;br&gt;
Console.log(a);&lt;br&gt;
Function local(){&lt;br&gt;
 let a = silver;&lt;br&gt;
 Console.log(a)&lt;br&gt;
}&lt;br&gt;
local();&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
When we run the above code, it will return gold, while the function will return silver.&lt;br&gt;
Based on its scope, codes with same variable name can return different result. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How To Access Windows  Folder/Files On MacOS</title>
      <author>AKINRO OLAWALE </author>
      <pubDate>Fri, 07 Jan 2022 15:20:50 +0000</pubDate>
      <link>https://dev.to/lexycodestudio/how-to-access-windows-folderfiles-on-macos-1m8i</link>
      <guid>https://dev.to/lexycodestudio/how-to-access-windows-folderfiles-on-macos-1m8i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-create-a-shared-folder"&gt;
  &lt;/a&gt;
  1 Create a Shared Folder
&lt;/h2&gt;

&lt;p&gt;Create a folder on your local drive, click on properties &amp;gt; sharing.&lt;br&gt;
Search for more &amp;gt;&amp;gt;&amp;gt; [&lt;a href="https://www.makeuseof.com/tag/how-to-easily-share-files-across-mac-windows-computers/amp/"&gt;https://www.makeuseof.com/tag/how-to-easily-share-files-across-mac-windows-computers/amp/&lt;/a&gt;]&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-get-your-windows-ip-address"&gt;
  &lt;/a&gt;
  2 Get Your Windows IP Address
&lt;/h2&gt;

&lt;p&gt;Press &lt;em&gt;Windows button + x&lt;/em&gt;.&lt;br&gt;
Click to open command prompt as administrator.&lt;br&gt;
Type &lt;em&gt;ipconfig&lt;/em&gt; and note the IPv4 address.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-get-your-windows-username"&gt;
  &lt;/a&gt;
  3 Get Your Windows Username
&lt;/h2&gt;

&lt;p&gt;On command prompt, type &lt;em&gt;echo %username%&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-access-windows-files-on-mac"&gt;
  &lt;/a&gt;
  4 Access Windows Files on Mac
&lt;/h2&gt;

&lt;p&gt;Open the Finder app. In the menu bar at the top of the screen, select Go &amp;gt; Connect to Server. Type either smb://[windows IP address] and press Enter. You will be prompted to enter your Windows username and password. Click on Connect.&lt;br&gt;
Ding Dong - Your shared windows folder and files.&lt;/p&gt;

</description>
      <category>windows</category>
      <category>mac</category>
      <category>virtualbox</category>
    </item>
    <item>
      <title>Android.js - build android apps from nodejs</title>
      <author>atordvairn</author>
      <pubDate>Fri, 07 Jan 2022 15:10:02 +0000</pubDate>
      <link>https://dev.to/atordvairn/androidjs-build-android-apps-from-nodejs-1056</link>
      <guid>https://dev.to/atordvairn/androidjs-build-android-apps-from-nodejs-1056</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9THbYPsJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcR0Hvu9K0WdyyIblGyuYVe0hGtG4fRK9g4lIQ%26usqp%3DCAU" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9THbYPsJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcR0Hvu9K0WdyyIblGyuYVe0hGtG4fRK9g4lIQ%26usqp%3DCAU" alt="android.js" width="720" height="426"&gt;&lt;/a&gt;&lt;br&gt;
If You Can Build A Website, You Can Build An Android App!&lt;br&gt;
Android.js simple takes your node.js website and puts it into a WebView.&lt;/p&gt;

&lt;p&gt;Yeah, i know that's a lot of disadvantages there but it also provides different APIs for you to interact with.&lt;/p&gt;

&lt;p&gt;an android.js application isn't only a WebView like a front end of a site, it can also interact with the backend and interact with files and much more!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  installation
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XdKU4NmS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/0JFK3s1Xr8IAAAAC/loading-downloading.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XdKU4NmS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/0JFK3s1Xr8IAAAAC/loading-downloading.gif" alt="install it" width="498" height="280"&gt;&lt;/a&gt;&lt;br&gt;
To install &lt;a href="https://android-js.github.io/"&gt;Android JS&lt;/a&gt; binaries, use npm.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;androidjs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install &lt;a href="https://android-js.github.io/"&gt;Android JS&lt;/a&gt; project generator and builder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; androidjs-builder
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#initialize"&gt;
  &lt;/a&gt;
  initialize
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;AndroidApp
&lt;span class="nb"&gt;cd &lt;/span&gt;AndroidApp
androidjs g
npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;it will generate a sample project inside &lt;code&gt;AndroidApp&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Which will look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;AndroidApp
    |__ assets
    |       |__ ipc, css, js
    |
    |__ views
    |       |__ index.html
    |
    |__ main.js
    |__ package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;main.js&lt;/code&gt; is the main file or we can say it is back process of your app which execute all the code written in node, so you have to write all the node js code inside main.js&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;index.html&lt;/code&gt; is the first view which is render by app initially&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;package.json&lt;/code&gt; to keep track of all your node packages&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;assets&lt;/code&gt; to store all assets of your app&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#time-to-build"&gt;
  &lt;/a&gt;
  time to build
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b4v90ZL8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i2.wp.com/archeyes.com/wp-content/uploads/2016/04/01_egypt_twitter.gif%3Fssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b4v90ZL8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i2.wp.com/archeyes.com/wp-content/uploads/2016/04/01_egypt_twitter.gif%3Fssl%3D1" alt="let's go building" width="580" height="540"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;AndroidApp
androidjs b
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;it will generate apk file inside dist folder&lt;/p&gt;

&lt;p&gt;if this &lt;code&gt;build&lt;/code&gt; command fails or generated any error, try to build with &lt;code&gt;force command&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;androidjs b &lt;span class="nt"&gt;-f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#why-not-to-use-it"&gt;
  &lt;/a&gt;
  Why &lt;em&gt;not&lt;/em&gt; to use it
&lt;/h3&gt;

&lt;p&gt;Android.js isn't better than &lt;a href="https://dev.to/react-native-javascript-is-everywhere"&gt;react-native&lt;/a&gt;&lt;br&gt;
But, at least you can (somewhat) throw your existing code in it and generate an API to work on a device just like android application.&lt;br&gt;
&lt;a href="https://reactnative.dev/"&gt;React native&lt;/a&gt; stays the best way to make Android applications with react (JavaScript).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-resources"&gt;
  &lt;/a&gt;
  other resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://android-js.github.io/docs/"&gt;docs&lt;/a&gt; - documentation for android.js&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/android-js/sample-app"&gt;Sample apps&lt;/a&gt; - some sample apps to go with..&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  conclusion
&lt;/h3&gt;

&lt;p&gt;Android.js is an amazing framework if you don't know react&lt;/p&gt;

&lt;p&gt;But if you know react, react native comes in handy at the first place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#originally-published-here-at-my-blog"&gt;
  &lt;/a&gt;
  originally published &lt;a href="https://atordvairn.netlify.app/android-js-making-android-apps-with-pure-javascript"&gt;here&lt;/a&gt; at my blog
&lt;/h2&gt;

&lt;p&gt;Make sure you're subscribed to &lt;a href="https://www.getrevue.co/profile/atordvairn"&gt;the high dose javascript newsletter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;of course I can't &lt;em&gt;make&lt;/em&gt; you, but it take me a considerable amount of time to write these..&lt;/p&gt;

&lt;p&gt;tweet this if you like it.&lt;br&gt;
thanks!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>ActiveStorage, Ruby on Rails 7, GraphQL and RSpec</title>
      <author>Sulman Baig</author>
      <pubDate>Fri, 07 Jan 2022 15:06:27 +0000</pubDate>
      <link>https://dev.to/sulmanweb/activestorage-ruby-on-rails-7-graphql-and-rspec-4pla</link>
      <guid>https://dev.to/sulmanweb/activestorage-ruby-on-rails-7-graphql-and-rspec-4pla</guid>
      <description>&lt;p&gt;I have an article already on &lt;a href="https://sulmanweb.com/file-uploading-in-graphql-api-in-rails-with-activestorage/"&gt;File Uploading in GraphQL API in Rails with ActiveStorage&lt;/a&gt;. After that article, &lt;code&gt;codelion&lt;/code&gt; asked how to unit test the &lt;code&gt;Upload!&lt;/code&gt; Type in GraphQL. I was looking for the answers of the unit test myself and meanwhile Rails 7 launched. So, I started working on ActiveStorage with Rails 7 and I finally got the answers of both. So writing the article again to work with Rails 7.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#document-model"&gt;
  &lt;/a&gt;
  Document Model:
&lt;/h2&gt;

&lt;p&gt;I kept the document model same as before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models/document.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Document&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="c1"&gt;## RELATIONSHIPS&lt;/span&gt;
  &lt;span class="n"&gt;has_one_attached&lt;/span&gt; &lt;span class="ss"&gt;:doc&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:documentable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;polymorphic: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;optional: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;optional: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;

  &lt;span class="c1"&gt;## VALIDATIONS&lt;/span&gt;
  &lt;span class="n"&gt;validate&lt;/span&gt; &lt;span class="ss"&gt;:doc_presence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;on: :create&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;doc_presence&lt;/span&gt;
    &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;%r{^(image|application|text)/(.)+$}&lt;/span&gt;
    &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;attached?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;match?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;attachment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;content_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:doc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;I18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"errors.models.document.file_presence"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#graphql-document-type"&gt;
  &lt;/a&gt;
  GraphQL Document Type:
&lt;/h2&gt;

&lt;p&gt;The Document Type for the GraphQL remains the same as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/graphql/types/objects/document_type.rb&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Types&lt;/span&gt;
  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Objects&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DocumentType&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;BaseObject&lt;/span&gt;
      &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;
      &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:documentable_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
      &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:documentable_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
      &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:content_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
      &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;
      &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:created_at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;GraphQL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ISO8601DateTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;
      &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:updated_at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;GraphQL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ISO8601DateTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;url&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;development?&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;test?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;url_helpers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rails_blob_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;service_url&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;content_type&lt;/span&gt;
        &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;content_type&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have &lt;code&gt;url&lt;/code&gt;, and I am using s3 service so showing the service url. But in other environment I am using local storage, that is why I have different document URLs for the environment. All other parameters are fairly descriptive.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apollo-upload-server"&gt;
  &lt;/a&gt;
  Apollo Upload Server:
&lt;/h2&gt;

&lt;p&gt;Now, comes the point to create a mutation resolver for uploading the file to the system. The complete documentation of ApolloUploadServer is &lt;a href="https://rubygems.org/gems/apollo_upload_server"&gt;here&lt;/a&gt;. After adding the gem to the Gemfile now we can create our mutation. My mutation looks like this: (It is changed from previous implementation)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/graphql/mutations/create_document.rb&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Mutations&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateDocument&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Mutations&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;BaseMutation&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="s2"&gt;"Create a document"&lt;/span&gt;

    &lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="ss"&gt;:doc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;ApolloUploadServer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Upload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;required: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s2"&gt;"The document to upload"&lt;/span&gt;

    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Objects&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DocumentType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Enums&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CodeEnum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;:)&lt;/span&gt;
      &lt;span class="n"&gt;authenticate_user&lt;/span&gt;
      &lt;span class="c1"&gt;# First you need to create blob file in case of active storage. https://stackoverflow.com/q/70550808/4011757&lt;/span&gt;
      &lt;span class="n"&gt;attachment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ActiveStorage&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Blob&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;create_and_upload!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;io: &lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;filename: &lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;original_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;content_type: &lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;content_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:current_user&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;documents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;doc: &lt;/span&gt;&lt;span class="n"&gt;attachment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;document: &lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;code: &lt;/span&gt;&lt;span class="s2"&gt;"SUCCESS"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;GraphQL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ExecutionError&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;full_messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;", "&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;extensions: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;code: &lt;/span&gt;&lt;span class="s2"&gt;"UNPROCESSABLE_ENTITY"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;errors: &lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;doc&lt;/code&gt; is the active storage parameter saving the file, so, it is being used of ApolloUploadServer. The output will be the type we created before.&lt;/p&gt;

&lt;p&gt;Now, here I changed according to the Rails 7 ActiveStorage. So, we have to create a blob before building the document. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;ActiveStorage::Blob::create_and_upload!(io: doc, filename: doc.original_filename, content_type: doc.content_type)&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;The rails 7 has method of &lt;code&gt;create_and_upload!&lt;/code&gt; But before rails 7 it was &lt;code&gt;create_after_upload!&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#documents-factory"&gt;
  &lt;/a&gt;
  Documents Factory:
&lt;/h2&gt;

&lt;p&gt;I use &lt;a href="https://rubygems.org/gems/factory_bot_rails"&gt;FactoryBot&lt;/a&gt; for creating the factory, for stubbing the factory. My factory is containing an image that has to be uploaded and attached as doc every time a factory created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# spec/factories/documents.rb&lt;/span&gt;

&lt;span class="no"&gt;FactoryBot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="ss"&gt;:document&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;association&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;

    &lt;span class="n"&gt;trait&lt;/span&gt; &lt;span class="ss"&gt;:with_image&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="ss"&gt;:build&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'image.png'&lt;/span&gt;
        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'spec'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'support'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'fixtures'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;io: &lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;filename: &lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;content_type: &lt;/span&gt;&lt;span class="s1"&gt;'image/png'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;trait&lt;/span&gt; &lt;span class="ss"&gt;:with_video&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="ss"&gt;:build&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'video.mp4'&lt;/span&gt;
        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'spec'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'support'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'fixtures'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;io: &lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;filename: &lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;content_type: &lt;/span&gt;&lt;span class="s1"&gt;'video/mp4'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;trait&lt;/span&gt; &lt;span class="ss"&gt;:with_pdf&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="ss"&gt;:build&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'pdf.pdf'&lt;/span&gt;
        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'spec'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'support'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'fixtures'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;io: &lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;filename: &lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;content_type: &lt;/span&gt;&lt;span class="s1"&gt;'application/pdf'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;trait&lt;/span&gt; &lt;span class="ss"&gt;:with_csv&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="ss"&gt;:build&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'import_csv.csv'&lt;/span&gt;
        &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'spec'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'support'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'fixtures'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;io: &lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;filename: &lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;content_type: &lt;/span&gt;&lt;span class="s1"&gt;'text/csv'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#document-spec"&gt;
  &lt;/a&gt;
  Document Spec
&lt;/h2&gt;

&lt;p&gt;Now the part of testing the document model:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# spec/models/document_spec.rb&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rails_helper'&lt;/span&gt;

&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type: :model&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'has a valid factory'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FactoryBot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:document&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;valid?&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_falsey&lt;/span&gt;
    &lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FactoryBot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:with_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;valid?&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_truthy&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;attached?&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_truthy&lt;/span&gt;
    &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save!&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;attached?&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_truthy&lt;/span&gt;
    &lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FactoryBot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:with_video&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;valid?&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_truthy&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;attached?&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_truthy&lt;/span&gt;
    &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save!&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;attached?&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_truthy&lt;/span&gt;
    &lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FactoryBot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:with_pdf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;valid?&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_truthy&lt;/span&gt;
    &lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FactoryBot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:with_csv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;valid?&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_truthy&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'must have user'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FactoryBot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;user: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;valid?&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_falsey&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'must contain file'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FactoryBot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;doc: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;valid?&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be_falsey&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the tests should pass.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-document-spec"&gt;
  &lt;/a&gt;
  Create Document Spec:
&lt;/h2&gt;

&lt;p&gt;To test the above mutation, I had to use the factory of fixture, but that was changing the type of uploader type. So, I had to do the direct method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# spec/graphql/mutations/create_document_spec.rb&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rails_helper'&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Mutations&lt;/span&gt;
  &lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;CreateDocument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type: :request&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'.resolve'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;FactoryBot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:session&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'create a document for the user'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;confirm&lt;/span&gt;
        &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sign_in_test_headers&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;
        &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FactoryBot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;attributes_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:with_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;user_id: &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class="no"&gt;GRAPHQL&lt;/span&gt;&lt;span class="sh"&gt;
        mutation ($input: CreateDocumentInput!) {
          createDocument(input: $input) {
            document {
              id
              url
            }
          }
        }
&lt;/span&gt;&lt;span class="no"&gt;        GRAPHQL&lt;/span&gt;
        &lt;span class="n"&gt;variables&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;input: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;doc: &lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ApolloUploadServer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Wrappers&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;UploadedFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ActionDispatch&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Http&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;UploadedFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;filename: &lt;/span&gt;&lt;span class="s2"&gt;"image.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type: &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;tempfile: &lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"spec/support/fixtures/image.png"&lt;/span&gt;&lt;span class="p"&gt;)))}}&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ApiSchema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;variables: &lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;context: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;current_user: &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;user&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_h&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"createDocument"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"document"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;not_to&lt;/span&gt; &lt;span class="n"&gt;be_nil&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This test should return success using the gemâ€™s method &lt;code&gt;ApolloUploadServer::Wrappers::UploadedFile&lt;/code&gt; and uploaded file method &lt;code&gt;ActionDispatch::Http::UploadedFile&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;The code is at &lt;a href="https://gist.github.com/sulmanweb/64c878292de356c62481ea3a81ed3ff5"&gt;https://gist.github.com/sulmanweb/64c878292de356c62481ea3a81ed3ff5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>rails</category>
      <category>graphql</category>
      <category>activestorage</category>
      <category>rspec</category>
    </item>
    <item>
      <title>Embrace Your Laziness: Automatically Convert Word Documents into Terms &amp; Conditions Pages</title>
      <author>Josh Stillman</author>
      <pubDate>Fri, 07 Jan 2022 15:02:30 +0000</pubDate>
      <link>https://dev.to/giantmachines/embrace-your-laziness-automatically-convert-word-documents-into-terms-conditions-pages-5gb</link>
      <guid>https://dev.to/giantmachines/embrace-your-laziness-automatically-convert-word-documents-into-terms-conditions-pages-5gb</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LdtONMK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9t9nzu0hoiua92q6tvt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LdtONMK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9t9nzu0hoiua92q6tvt.gif" alt="textutil in action" width="600" height="434"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Modern Single Page Applications (SPAs) often &lt;a href="https://www.mindtheproduct.com/improving-ux-terms-conditions-page-6-easy-ways/"&gt;embed terms and conditions pages&lt;/a&gt; into the app itself for a slick and modern feel. While this makes for a great user experience, it can be tedious and time consuming for developers to convert long Microsoft Word documents of legal copy into HTML/JSX that can be embedded into a terms and conditions component or modal. But fret not, fellow developer! With some macOS and shell utilities, you can let the computer handle the drudgery, so you can focus on something more important.&lt;/p&gt;

&lt;p&gt;Simply using some built-in command line programs in macOS will do the trick, converting the Word document into clean HTML you can paste into your terms and conditions component! Let's see howâ€”and why.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#laziness-is-a-virtue"&gt;
  &lt;/a&gt;
  Laziness Is a Virtue
&lt;/h1&gt;

&lt;p&gt;Larry Wall, the creator of the Perl programming language, argued that laziness is one of the &lt;a href="http://threevirtues.com/"&gt;primary virtues&lt;/a&gt; of a good programmer. It's what makes coders "write labor-saving programs that other people will find useful." And indeed, a good engineer will "go to great effort to reduce overall energy expenditure" by finding opportunities to make processes more efficient.&lt;/p&gt;

&lt;p&gt;Along these lines, I'd say that a primary coding virtue is the ability to identify which tasks are rote, repetitive, and best delegated to a computer, and which tasks instead require human creativity, problem solving, and ingenuity. We'll only ever have time and energy for the latter category if we find a way to let the computers handle the boring, repetitive stuff.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-inevitable-terms-amp-conditions-ticket"&gt;
  &lt;/a&gt;
  The Inevitable Terms &amp;amp; Conditions Ticket
&lt;/h1&gt;

&lt;p&gt;It's inevitable. When developing a new SPA, there will come a day that you or your teammate will be assigned a ticket to create an embedded terms and conditions page or modal. (That's our litigious modern society. Sigh...) Typically, a developer is handed a Word document from the legal department and some fancy designs, and left to figure out the rest.&lt;/p&gt;

&lt;p&gt;The most painstaking approach would be to manually copy each paragraph, add any bold and italic formatting, and wrap it in appropriate HTML tags. This can take a while if it's a long Word document! And it won't be pleasant. Our laziness instincts should be kicking in about now.&lt;/p&gt;

&lt;p&gt;We can make this process a little less manual through this nifty &lt;a href="https://marketplace.visualstudio.com/items?itemName=bradgashler.htmltagwrap"&gt;VS Code extension&lt;/a&gt;. It will let us wrap each paragraph or sentence of text in the appropriate &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; tags. But it's still a pretty manual process of copying, pasting, and formatting. How can we fully automate this?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#theres-a-cli-for-that"&gt;
  &lt;/a&gt;
  There's a CLI for That
&lt;/h1&gt;

&lt;p&gt;Good news! macOS ships with a command line tool called &lt;code&gt;textutil&lt;/code&gt; that excels at converting documents into different formats. It can convert a Word document into HTML in a single terminal command: &lt;code&gt;textutil -convert html -strip terms.docx&lt;/code&gt;. This will take your Word document, strip out all the metadata, and convert it into basic HTML markup. Paragraphs will be wrapped in &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags, and bold and italic formatting tags will be added as well. No more need to go through the document paragraph by paragraph yourself to create the markup. And it even works on other document formats, such as .txt and .rtf files. Joy!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#much-too-classy"&gt;
  &lt;/a&gt;
  Much Too Classy
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l02egTkL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfvd6bxknzaiwstb8pxt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l02egTkL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfvd6bxknzaiwstb8pxt.png" alt="Initial Output" width="880" height="491"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One problem! &lt;code&gt;textutil&lt;/code&gt; creates some basic CSS styles for you based on the source Word document and attaches very generic class names such as &lt;code&gt;p2&lt;/code&gt; and &lt;code&gt;Apple-converted-space&lt;/code&gt; to seemingly every tag it creates. But you probably don't want these generated class names polluting your markup. Not only does it just look ugly and hard to read, but these highly generic class names could clash with other classes in your app, leading to unintended consequences.&lt;/p&gt;

&lt;p&gt;Sadly, &lt;code&gt;textutil&lt;/code&gt; lacks any built-in option to suppress these class names. Sure, we could manually remove all the classes from the generated markup, but we don't want to do that either.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#right-sed-fred"&gt;
  &lt;/a&gt;
  Right Sed Fred
&lt;/h1&gt;

&lt;p&gt;Fear notâ€”we can clean up the HTML that &lt;code&gt;textutil&lt;/code&gt; gives us using &lt;code&gt;sed&lt;/code&gt;, a shell tool for text manipulation that comes built into Bash and Zsh. We'll pipe the HTML that &lt;code&gt;textutil&lt;/code&gt; generates into &lt;code&gt;sed&lt;/code&gt;, strip out all the class names, and save the result to a file.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;sed&lt;/code&gt; command we'll use to delete the class names is &lt;code&gt;sed 's/class="[^"]*"//g'&lt;/code&gt;. Let's break that down. The leading &lt;code&gt;s&lt;/code&gt; in the argument means we'll substitute text matching the pattern between the first and second &lt;code&gt;/&lt;/code&gt; characters with the text between the second and third &lt;code&gt;/&lt;/code&gt;'s. The regex pattern we'll match is &lt;code&gt;class="[^"]*"&lt;/code&gt; (explained below). Then, we'll replace the text matching that pattern with the text between the last two slashesâ€”here, an empty string. And we'll do it for every occurrence with the global modifier, &lt;code&gt;/g&lt;/code&gt;. That is, we'll simply delete the text matching the pattern throughout the document.&lt;/p&gt;

&lt;p&gt;About that funky-looking regex... &lt;code&gt;sed&lt;/code&gt; doesn't have the same regex capabilities you're familiar with in modern languages such as JavaScript. It doesn't have &lt;a href="https://javascript.info/regexp-greedy-and-lazy"&gt;lazy matching&lt;/a&gt;, meaning that if you try to match &lt;code&gt;class=".*"&lt;/code&gt;, &lt;code&gt;sed&lt;/code&gt; will greedily match far more text than you intended, well beyond the end of the HTML tag.&lt;/p&gt;

&lt;p&gt;Instead, we can mock lazy matching in &lt;code&gt;sed&lt;/code&gt; with &lt;a href="https://unix.stackexchange.com/questions/297686/non-greedy-match-with-sed-regex-emulate-perls/397813#397813"&gt;this&lt;/a&gt; &lt;a href="https://0x2a.at/blog/2008/07/sed--non-greedy-matching/"&gt;technique&lt;/a&gt;: we can match the opening &lt;code&gt;"&lt;/code&gt;, followed by any character &lt;em&gt;except&lt;/em&gt; a &lt;code&gt;"&lt;/code&gt;, then the closing &lt;code&gt;"&lt;/code&gt;. So &lt;code&gt;/class="[^"]*"/&lt;/code&gt; will get us the lazy matching we needâ€”effectively &lt;code&gt;/class=".*?"/&lt;/code&gt; in JavaScript's regex dialect. Lazy matching for lazy programmers!&lt;/p&gt;

&lt;p&gt;After running &lt;code&gt;textutil&lt;/code&gt;'s output through this &lt;code&gt;sed&lt;/code&gt; command, we'll have nice, clean markup without all the random class names.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TPEc6Ral--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jl0whghryrhihiya6w5j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TPEc6Ral--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jl0whghryrhihiya6w5j.png" alt="Transformed output" width="880" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Building on this technique, we could even take it a step further and strip out unnecessary &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tags, and anything else we wanted to get rid of from &lt;code&gt;textutil&lt;/code&gt;'s output.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting It All Together
&lt;/h1&gt;

&lt;p&gt;Last, we'll save the cleaned HTML to a file. The final command line script is &lt;code&gt;textutil -convert html -strip -stdout terms.docx | sed 's/ class="[^"]*"//g' &amp;gt; output.html&lt;/code&gt;, which (1) converts the Word document to HTML with &lt;code&gt;textutil&lt;/code&gt;, (2) strips out the class names that &lt;code&gt;textutil&lt;/code&gt; adds to each tag with &lt;code&gt;sed&lt;/code&gt;, and (3) saves the cleaned HTML to a file. From there, we can simply paste the HTML into our terms and conditions component in our SPA, style it, and call it a day.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LdtONMK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9t9nzu0hoiua92q6tvt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LdtONMK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9t9nzu0hoiua92q6tvt.gif" alt="textutil in action" width="600" height="434"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;If a development task is manual, repetitive, time-consuming, and boring, &lt;a href="https://kentcdodds.com/blog/automation"&gt;that's a sign&lt;/a&gt;. As developers, we should hone a keen awareness of this feeling, which is usually a clear sign that it's time to automate the task and move on to more creative, higher-value problem solving.  It's a unique privilege of being software engineers that we can (and should!) automate these annoying parts of our jobs. So, embrace your laziness, fellow devs! It's the virtuous thing to do.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h1&gt;

&lt;p&gt;Convert your Word document to clean HTML on macOS by running this command in your shell: &lt;code&gt;textutil -convert html -strip -stdout terms.docx | sed 's/ class="[^"]*"//g' &amp;gt; output.html&lt;/code&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
      <category>automation</category>
      <category>html</category>
    </item>
    <item>
      <title>How to Create Modal Box Using CSS and JS</title>
      <author>elinabey</author>
      <pubDate>Fri, 07 Jan 2022 14:53:16 +0000</pubDate>
      <link>https://dev.to/elinabey/how-to-create-modal-box-using-css-and-js-3bjj</link>
      <guid>https://dev.to/elinabey/how-to-create-modal-box-using-css-and-js-3bjj</guid>
      <description>&lt;p&gt;How to create Modal Box with CSS and JavaScript. The purpose is to complete a transparent and simple modal popup box that does not use third-party libraries and is cross-browser compatible. We have to use vanilla javascript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-modal-box-using-css-and-js"&gt;
  &lt;/a&gt;
  Create Modal Box Using CSS and JS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MndJggHh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4i5uulbujcc5bbqqfrq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MndJggHh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4i5uulbujcc5bbqqfrq.jpg" alt="Create Modal Box Using CSS and JS" width="600" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Modal popups are widely used on the web. Some of their popular uses include driving newsletter signups, displaying notifications/alerts, and handling registration forms.&lt;/p&gt;

&lt;p&gt;This model will be broad which means you'll be free to use it for any purpose and anywhere.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-markup"&gt;
  &lt;/a&gt;
  HTML Markup
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"popup-box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"close-button popup-close"&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"close"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Ã—&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;This is My PopUp&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;How to create a model box with HTML CSS and JavaScript.&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button popup-button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Open Model!&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Open Sans"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="nl"&gt;visibility&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;visibility&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="m"&gt;0.25s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt; &lt;span class="m"&gt;0.25s&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;0.25s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#888&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.2%&lt;/span&gt; &lt;span class="m"&gt;5.5%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;-webkit-transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="m"&gt;0.15s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="m"&gt;0.15s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#7b78ff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;22px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.button&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.75&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.popup-box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.close-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#7b78ff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.close-button&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;-webkit-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;180deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;400deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.show-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="nl"&gt;visibility&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;visibility&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt; &lt;span class="m"&gt;1.25s&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;1.25s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Javascript&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;closeButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.close-button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;togglecontainer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;show-container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;windowOnClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;togglecontainer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;togglecontainer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;closeButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;togglecontainer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;windowOnClick&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read this article in detail from here &lt;a href="https://softcodeon.com/tutorials/create-modal-box-using-css-and-js.htm"&gt;Create Modal Box Using CSS and JS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To see &lt;a href="https://codepen.io/softcodeon/pen/YzrvERx"&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Modal boxes are favored globally and now you have an easy-to-use process that is light and does not use third-party libraries like jQuery. You can use this model box for newsletters, sign-ups, or whatever you want! Hope you enjoy the results and find it helpful. If you have any questions please discuss below. Thank you.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Centering vertically and horizontally with CSS</title>
      <author>Alvaro Montoro</author>
      <pubDate>Fri, 07 Jan 2022 14:52:14 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/centering-vertically-and-horizontally-with-css-3hbk</link>
      <guid>https://dev.to/alvaromontoro/centering-vertically-and-horizontally-with-css-3hbk</guid>
      <description>&lt;p&gt;This article will show five different ways of centering vertically and horizontally with HTML+CSS, presented in chronological order: from how it was done in the past (which we should avoid now) to the modern ways of centering content in the present.&lt;/p&gt;

&lt;p&gt;If you prefer to watch a video version of this article, visit &lt;a href="https://www.youtube.com/c/AlvaroMontoroCSS"&gt;my YouTube channel&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8lDjcd0gelM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;There may be other ways of centering (e.g., using &lt;code&gt;margin: auto&lt;/code&gt;), but for simplicity and to give some background on how things have evolved, I'm going to center only on these five:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#using-tables"&gt;Using tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-negative-margins"&gt;Using negative margins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-translations"&gt;Using translations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-flexbox"&gt;Using FlexBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-grid"&gt;Using Grid&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;During our interview process, I asked candidates to center vertically and horizontally an element on the page, and most people could not give a proper answer. Hopefully, this article will help with that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-tables"&gt;
  &lt;/a&gt;
  Using tables
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note: Do not use this method.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At the very beginning, when there was not an easy way to center elements, we used tables to center vertically and horizontally. Of course, this is a terrible way of doing it, but it was the only option available at the time.&lt;/p&gt;

&lt;p&gt;The idea was to add a table that had a single cell, and center that cell vertically and horizontally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;
      Centered content
    &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;table&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;td&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;vertical-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method is wrong for many reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is &lt;strong&gt;too verbose&lt;/strong&gt;: it requires too many (additional) elements to achieve the content centering.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Bad use of semantic HTML&lt;/strong&gt;: the elements are used for how they look and not by what they mean.&lt;/li&gt;
&lt;li&gt;It is &lt;strong&gt;not accessible&lt;/strong&gt;: related to the point above, it uses a table for layout instead of displaying data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For those reasons, this method was not a good idea. So we stopped using it and moved to something better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-negative-margins"&gt;
  &lt;/a&gt;
  Using negative margins
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note: Avoid this method.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then, we moved to position elements in an absolute form to 50% of the container vertically and horizontally, and then applied a negative margin of half the height and width to the top and left, respectively:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Centered content&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method is better than the previous one, but it also has some drawbacks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Needs some pre-work: &lt;strong&gt;we need to know the element's size beforehand&lt;/strong&gt; to set the proper negative margins. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;May affect the layout&lt;/strong&gt;: changing the margins may impact the position of the surrounding elements, &lt;code&gt;line-height&lt;/code&gt; could cause problems with multiline, etc.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Still too verbose&lt;/strong&gt;: this method requires many CSS properties to center the content properly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some people may say, "you can use CSS variables and the &lt;code&gt;calc&lt;/code&gt; function to avoid those issues," and they will be correct... now. But back then, CSS custom properties were not supported by that many browsers, and the support for &lt;code&gt;calc&lt;/code&gt; was slightly better.&lt;/p&gt;

&lt;p&gt;And yet, we still need to specify a width and height, which is not always possible. So we would end up with "magic numbers" in the code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-translations"&gt;
  &lt;/a&gt;
  Using translations
&lt;/h2&gt;

&lt;p&gt;This method is close to the previous one. The idea is to absolute-position the element to 50% top and left, and then translate it by half its size using a &lt;code&gt;transform&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Centered content&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The percentage in the translation is relative to the element's size. So by translating -50%, we are translating half its size to the left and top, respectively. &lt;strong&gt;No need to know the elements' size&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This was a common way of centering elements horizontally and vertically for a while. I like it because it is straightforward (just four CSS properties). In addition, it doesn't depend on any other element (although you may need a position in the container) or on additional HTML elements.&lt;/p&gt;

&lt;p&gt;One con of this method is that by using &lt;code&gt;position: absolute&lt;/code&gt;, we are &lt;strong&gt;getting the element out of the normal flow of the page&lt;/strong&gt;. Combined with the transform, this may cause the element to overlap other things on the page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-flexbox"&gt;
  &lt;/a&gt;
  Using FlexBox
&lt;/h2&gt;

&lt;p&gt;The previous method has worked for a long time, and it can still be handy. But then, out came new ways of laying out content in CSS: Flexbox and Grid. And they offer a world of possibilities for positioning and alignment of content (not only centering.)&lt;/p&gt;

&lt;p&gt;The interesting thing about centering with FlexBox (and Grid) is that the styles go in the container instead of the element itself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Centered content&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This can be seen as a more "natural" approach to laying out content. It will work with one or multiple elements (the children of the flexed container) and provide more options than the previous methods.&lt;/p&gt;

&lt;p&gt;One &lt;em&gt;issue&lt;/em&gt; of this method may happen when centering multiline content. The text will still be left-aligned by default, and it may not give the impression of being centered. That's because what's centered is the element in itself and not its content. In some cases, you may need to do &lt;code&gt;text-align: center&lt;/code&gt; to center everything fully.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-grid"&gt;
  &lt;/a&gt;
  Using Grid
&lt;/h2&gt;

&lt;p&gt;With grid, we can apply the same properties as with FlexBox, just changing the value of the &lt;code&gt;display&lt;/code&gt; from &lt;code&gt;flex&lt;/code&gt; to &lt;code&gt;grid&lt;/code&gt;, and it will all work the same:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Centered content&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The idea is to have a grid with a single cell and absolute center within it (kind of like what we were doing with the table, but this time with proper semantics and without additional HTML elements involved.)&lt;/p&gt;

&lt;p&gt;Then, we can combine &lt;code&gt;align-items&lt;/code&gt; and &lt;code&gt;justify-content&lt;/code&gt; into a single property: &lt;code&gt;place-items&lt;/code&gt;, making things slightly shorter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Centered content&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;place-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, just two lines of CSS can help you center content vertically and horizontally. It is not as complicated as the mechanism of some window blinds ;)&lt;/p&gt;

&lt;p&gt;The Grid and FlexBox method may present some challenges when more than one element is inside the container. A simple solution would be to wrap all the content in additional tags in those cases. But, in general, that won't be needed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Knowing how to center in CSS is a practical and valuable skill. You will need to use it at some point in your web development career. And, as we have seen in this article, it is not that complicated.&lt;/p&gt;

&lt;p&gt;You can use any method you want to center horizontally and vertically (but please avoid using tables for layout.) I normally use &lt;code&gt;transform: translate(-50%, -50%)&lt;/code&gt; (#3) and FlexBox/Grid (#4 or #5) depending on the situation.&lt;/p&gt;

&lt;p&gt;I like how, in the translation solution, the element only "depends on itself," with the styles applied to the component that is centered (although the parent may need to have a &lt;code&gt;position&lt;/code&gt; set.) While in the FlexBox/Grid method, the styles go in the parent, and the element is oblivious to the positioning. It just is, which is beautiful and a more natural way of doing it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interview tip&lt;/strong&gt;: If they ask you to center an element horizontally and vertically during an interview (or in a task at work), but it only centers horizontally after applying the FlexBox/Grid methods. Check that the parent has a height ;)&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Image Optimization: What Is It and Why Is It Important?</title>
      <author>Heritier Akilimali</author>
      <pubDate>Fri, 07 Jan 2022 14:45:37 +0000</pubDate>
      <link>https://dev.to/heritio/image-optimization-what-is-it-and-why-is-it-important-542f</link>
      <guid>https://dev.to/heritio/image-optimization-what-is-it-and-why-is-it-important-542f</guid>
      <description>&lt;p&gt;&lt;strong&gt;Optimizing your images for performance has a lot of benefits.&lt;/strong&gt; You can optimize your images by using best practices to keep your file size small and your site loading quicker, resulting in a better user experience. Thereâ€™s another reason why image optimization matters, and itâ€™s directly related to profit. Images take up a lot of disk space on the server that runs your site and slows it down.&lt;br&gt;
While itâ€™s not the end of the world if you exceed that limit, you may get charged an overage fee or possibly â€” have your website shut down. You can make the most of your site storage and avoid the bandwidth limit by optimizing your images.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Image optimization benefits include:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;*Reduced bounce rate â€” if you load fast, users are more likely to stick around&lt;/p&gt;

&lt;p&gt;*Better customer engagement â€” images make a big difference in the user experience. Web visitors are less likely to engage with a website that loads slowly (even if the rest of the content is visible).&lt;/p&gt;

&lt;p&gt;*Save on hosting and content delivery by optimizing images. Bandwidth is expensive, and by using less, websites use less.&lt;/p&gt;

&lt;p&gt;*A better search ranking â€” Google and other search engines look at the page load time and performance. Optimizing images can boost rankings and traffic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Techniques for Image Optimization&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pick the right file type&lt;br&gt;
First, choose the right file type for your image. &lt;br&gt;
&lt;em&gt;The most commonly used types are:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;*PNGs make great images but are a lot bigger. PNG can be configured to enable lossy compression, but itâ€™s lossless by default.&lt;/p&gt;

&lt;p&gt;*With JPEGs, you can balance quality and file size by adjusting the quality level, which ranges from 1â€“100%.&lt;/p&gt;

&lt;p&gt;*The GIF format supports only 256 colors and compression is lossless. More popular for animations than static images.&lt;/p&gt;

&lt;p&gt;Use NextGen JPEGs and Progressive JPEGs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A JPEG image can be rendered in two ways:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;*Baseline loading â€” display the images in full, from top to bottom. It can be a bit of a pain if your internet is slow.&lt;/p&gt;

&lt;p&gt;*Gradual loading â€” initially showing a low-quality image, then improving it as more of it loads.&lt;/p&gt;

&lt;p&gt;You can improve your website or appâ€™s performance for users with slow Internet connections by using progressive JPEG.&lt;/p&gt;

&lt;p&gt;Another way to speed things up is with next-generation formats like WebP and JPEG-XR. With these image formats, you can save a lot of space without sacrificing quality. Googleâ€™s website optimization guidelines recommend them, so theyâ€™re important for SEO too.&lt;/p&gt;

&lt;p&gt;Thereâ€™s an issue with next-generation formats that theyâ€™re not supported by all browsers, so you need to prepare a fallback image (like PNG) to use if the userâ€™s browser doesnâ€™t support them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Caching&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Caching involves storing images in a proxy server or browser cache, to make it faster to serve content. Using browser caching can reduce application requests and downloads.&lt;/p&gt;

&lt;p&gt;For a proxy server to cache image files, several points of presence (PoP) servers must be configured across the globe. It speeds up page load times because images are served from the closest server If you use an image caching service, youâ€™ll get cached images. &lt;/p&gt;

&lt;p&gt;Image caching services preprocess images before caching them so they load faster. This is great if you are using low-performance formats and static images.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compression&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A compression technique reduces the size of an image. There are lossy and lossless compressions.&lt;/p&gt;

&lt;p&gt;*Lossy compression reduces file size by getting rid of redundant data. Although this can reduce image file size, it also degrades quality. You canâ€™t undo the compression. Keep a copy of everything you do.&lt;/p&gt;

&lt;p&gt;*Lossless compression maximizes quality above size. Using this technique will preserve the fileâ€™s quality so that you can restore it later. It wonâ€™t reduce the file size much, though.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resizing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Although the image cannot be compressed completely, the size and resolution still have to be balanced. As the resolution increases, the file size increases. Web pages load slower when high-resolution images are used. If a visitor accesses your website using a mobile device, his or her bandwidth is likely to be limited, which means large images will likely take longer to load.&lt;/p&gt;

&lt;p&gt;It is best to strike a balance between image quality and file size. Sizing the image to the smallest size that will still produce the desired visual effect is the best solution. You can also show a thumbnail if you need to display large high-resolution images and download the full image when the user asks for it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Optimize your image delivery!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It doesnâ€™t matter if your image is optimized by following the steps above. You can improve it further. Images load fast for your users based on server speed and network performance.&lt;/p&gt;

&lt;p&gt;Get your image server ready for spikes in traffic and handle three to four times as much traffic as normal. Cached images should always have a cache header so local devices can use them.&lt;/p&gt;

&lt;p&gt;Alternatively, you can use a Content Delivery Network. You can get your images to users closer to their locations with a CDN. Your images will load faster on nearby servers. Theyâ€™re easy to set up and are a great solution for improving image performance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try loading lower quality images with the Blur method&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The speed of your site can still slow down if you have large file sizes or lots of images, even after all the previous optimization steps. Trying to optimize not just images but also load times can make visitors think your site is loading faster.&lt;/p&gt;

&lt;p&gt;Letâ€™s make it look like your photos are loading faster so your users donâ€™t just stare at a blank page.&lt;br&gt;
Load a Lower Quality Image (LQI) for this. Itâ€™ll show a smaller version of the image while it loads, so you can look at it while you wait. This makes it look like the page loads faster, even though everything is loading just as fast.&lt;br&gt;
**&lt;br&gt;
Use lazy loading to load your images.**&lt;/p&gt;

&lt;p&gt;One more trick you can use to give the impression that images are loading faster: Lazy loading. You start at the top of the page when someone lands on your site. &lt;br&gt;
Theyâ€™ll probably scroll the whole thing, especially if theyâ€™re engaged. Rather than loading all the images at once, lazy loading relies on the assumption that users care most about what they can see. &lt;/p&gt;

&lt;p&gt;As a result, the images inside their browser view have a full load first, while the rest load a placeholder until the user scrolls over to that area of the page.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to implement charts in android using java</title>
      <author>Dilmohit</author>
      <pubDate>Fri, 07 Jan 2022 14:39:11 +0000</pubDate>
      <link>https://dev.to/dilmohit/how-to-implement-charts-in-android-using-java-548n</link>
      <guid>https://dev.to/dilmohit/how-to-implement-charts-in-android-using-java-548n</guid>
      <description>&lt;p&gt;Hey guys today in this article, we will be talking about implementing charts in our android app using java. Charts can be used to show data in a beautiful and professional manner. Below is the step by step process on implementing charts in our android project.&lt;/p&gt;

&lt;p&gt;So In the first step we will be adding this library in our project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dependencies {
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_8JIpC1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4dg2ht3wpwryxd2u727.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_8JIpC1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4dg2ht3wpwryxd2u727.png" alt="Adding Dependency" width="880" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is library by &lt;a href="https://github.com/PhilJay"&gt;Philipp Jahoda&lt;/a&gt;. its a lightweight library and a great way to explore charts in android.&lt;/p&gt;

&lt;p&gt;Second step will be to add this repository in our settings.gradle&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;repositories {
    maven { url 'https://jitpack.io' }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VoBP-F91--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5yxznwznywzdzoj157mt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VoBP-F91--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5yxznwznywzdzoj157mt.png" alt="Adding Repository" width="880" height="525"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next step add this code in your activity_main.xml or whatever activity that you are using to show charts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;
&amp;lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp"
    tools:context=".MainActivity"&amp;gt;

   &amp;lt;com.github.mikephil.charting.charts.BarChart
       android:layout_width="match_parent"
       android:layout_height="0dp"
       android:layout_weight="1"
       android:id="@+id/bar_chart"
       android:layout_marginBottom="8dp"/&amp;gt;

    &amp;lt;com.github.mikephil.charting.charts.PieChart
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"
        android:id="@+id/pie_chart"
        android:layout_marginTop="8dp"/&amp;gt;

&amp;lt;/LinearLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Logic - So lets just first understand what is happening here. In this activity you can see at first we have Linear Layout as our root element. Then we have two child elements, first one is bar chart and second is Pie chart. &lt;/p&gt;

&lt;p&gt;These are elements that are provided by the library that we have used in our project. Now this library does not only gives you two types of charts, it has a lot i mean a lot of chart options that you should check by yourself. But for the sake of this tutorial we have these two type of charts bar chart and Pie chart.&lt;/p&gt;

&lt;p&gt;At last add this code in your MainActivity.java or again whatever activity you are using to show your charts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.example.chartdemo;

import androidx.appcompat.app.AppCompatActivity;
import android.graphics.Color;
import android.os.Bundle;
import com.github.mikephil.charting.charts.BarChart;
import com.github.mikephil.charting.charts.PieChart;
import com.github.mikephil.charting.data.BarData;
import com.github.mikephil.charting.data.BarDataSet;
import com.github.mikephil.charting.data.BarEntry;
import com.github.mikephil.charting.data.PieData;
import com.github.mikephil.charting.data.PieDataSet;
import com.github.mikephil.charting.data.PieEntry;
import com.github.mikephil.charting.utils.ColorTemplate;
import java.util.ArrayList;

public class MainActivity extends AppCompatActivity {

    // Initialize Variables
    BarChart barChart;
    PieChart pieChart;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Assign Variables
        barChart = findViewById(R.id.bar_chart);
        pieChart = findViewById(R.id.pie_chart);

        // Initialize Array List
        ArrayList&amp;lt;BarEntry&amp;gt; barEntries = new ArrayList&amp;lt;&amp;gt;();
        ArrayList&amp;lt;PieEntry&amp;gt; pieEntries = new ArrayList&amp;lt;&amp;gt;();

        // Use For Loop
        for (int i=1; i&amp;lt;10; i++){

            // Convert To Float
            float value = (float) (i*10.0);

            // Initialize Bar and Pie Chart Entry
            BarEntry barEntry = new BarEntry(i, value);
            PieEntry pieEntry = new PieEntry(i, value);

            // Add Values in Array List
            barEntries.add(barEntry);
            pieEntries.add(pieEntry);

        }

        // Initialize Bar Data Set
        BarDataSet barDataSet = new BarDataSet(barEntries, "Investment");

        // Set Colors
        barDataSet.setColors(ColorTemplate.COLORFUL_COLORS);

        // Hide draw values
        barDataSet.setDrawValues(false);

        // Set Bar Data
        barChart.setData(new BarData(barDataSet));

        // Set Animations
        barChart.animateY(5000);

        // Set Description text and color
        barChart.getDescription().setText("Investment chart");
        barChart.getDescription().setTextColor(Color.BLUE);


        // Initialize Pie Data Set
        PieDataSet pieDataSet = new PieDataSet(pieEntries,"Investors");

        // Set Colors
        pieDataSet.setColors(ColorTemplate.COLORFUL_COLORS);

        // Set Pie Data
        pieChart.setData(new PieData(pieDataSet));

        // Set Animations
        pieChart.animateXY(5000,5000);

        // hide description
        pieChart.getDescription().setEnabled(false);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Logic - At first we have Initialize our bar and pie charts. Next in our onCreate method we have assigned variables. Then we have assigned array list and used for loop. And at last we have Intialize Data sets for both our Pie chart and Bar chart. &lt;/p&gt;

&lt;p&gt;Output - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/mgfo9HUU5cnsZQaZq4/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/mgfo9HUU5cnsZQaZq4/giphy.gif" alt="Output" width="224" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Comments are added to better understand the logic. Don't forget to visit the github page of this library&lt;br&gt;
&lt;a href="https://github.com/PhilJay/MPAndroidChart"&gt;MPAndroidChart&lt;/a&gt;&lt;/p&gt;

</description>
      <category>android</category>
      <category>java</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>next-export-i18n v1.3.0: respecing the user's default language</title>
      <author>martin krause</author>
      <pubDate>Fri, 07 Jan 2022 14:27:44 +0000</pubDate>
      <link>https://dev.to/martinkr/next-export-i18n-v130-respecing-the-users-default-language-48h4</link>
      <guid>https://dev.to/martinkr/next-export-i18n-v130-respecing-the-users-default-language-48h4</guid>
      <description>&lt;p&gt;Today I released &lt;code&gt;version 1.3.0&lt;/code&gt; of &lt;code&gt;next-export-i18n&lt;/code&gt;, the i18n module for Next.js which is fully compatible with &lt;code&gt;next export&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;Install &lt;code&gt;next-export-i18n&lt;/code&gt; with &lt;code&gt;$ npm i next-export-i18n&lt;/code&gt; or get &lt;a href="https://www.npmjs.com/package/next-export-i18n"&gt;&lt;code&gt;next-export-i18n v1.3.0&lt;/code&gt;&lt;/a&gt; from npm.js.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#new-feature-respecting-the-users-default-language"&gt;
  &lt;/a&gt;
  New feature: Respecting the user's default language
&lt;/h2&gt;

&lt;p&gt;Starting with Version 1.3.0, &lt;code&gt;next-export-i18n&lt;/code&gt;reads the user's default language settings from the browser. If this language is available as &lt;code&gt;i18n&lt;/code&gt; it is automatically used as the default language. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#about-raw-nextexporti18n-endraw-"&gt;
  &lt;/a&gt;
  About &lt;code&gt;next-export-i18n&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;This npm module provides a simple solution for Internationalization (i18n) of projects using &lt;code&gt;next export&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Next.js already has support for internationalized (i18n) routing out-of-the-box. You can provide a list of locales, a default as well as  domain-specific locales and Next.js  automatically handles the routing. It streamlines the touring and locale parsing for nearly all existing l18n library solutions available for Next.js such as &lt;code&gt;react-intl&lt;/code&gt;, &lt;code&gt;react-i18next&lt;/code&gt;, &lt;code&gt;lingui&lt;/code&gt;, &lt;code&gt;rosetta&lt;/code&gt;, &lt;code&gt;next-intl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, &lt;a href="https://nextjs.org/docs/advanced-features/i18n-routing"&gt;&lt;code&gt;Next.js&lt;/code&gt; i18n-routing&lt;/a&gt; does not supports &lt;code&gt;next export&lt;/code&gt;.&lt;br&gt;
This means that &lt;em&gt;none&lt;/em&gt; of the i18n-libraries (which are utilizing the build in i18n-routing) is able to support fully static sites which are generated with &lt;code&gt;next export&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;next-export-i18n&lt;/code&gt; provides a simple solution for Internationalization (i18n) when you want to generate a truly static website with &lt;code&gt;next export&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Read the &lt;a href="https://dev.to/martinkr/next-js-i18n-with-static-sites-2644"&gt;Introduction to &lt;code&gt;next-export-i18n&lt;/code&gt; - next.js: i18n with static sites&lt;/a&gt; for more details.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#sample-implementation"&gt;
  &lt;/a&gt;
  Sample implementation
&lt;/h3&gt;

&lt;p&gt;You can also take a look at the example implementation &lt;a href="https://next-export-i18n-example.vercel.app"&gt;next-export-i18n-example.vercel.app&lt;/a&gt; and its source code at &lt;a href="https://github.com/martinkr/next-export-i18n-example"&gt;github: &lt;code&gt;https://github.com/martinkr/next-export-i18n-example&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/next-export-i18n"&gt;&lt;code&gt;next-export-i18n&lt;/code&gt; npm module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/martinkr/next-js-i18n-with-static-sites-2644"&gt;next.js: i18n with static sites (Introduction)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Example implementation: &lt;a href="https://next-export-i18n-example.vercel.app"&gt;https://next-export-i18n-example.vercel.app&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Github for the npm-module: &lt;a href="https://github.com/martinkr/next-export-i18n"&gt;https://github.com/martinkr/next-export-i18n&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Github for the example: &lt;a href="https://github.com/martinkr/next-export-i18n-example"&gt;https://github.com/martinkr/next-export-i18n-example&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt; and consider to &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@z734923105?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Jerry Zhang&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://modernfrontend.dev/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cH97ToOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://modernfrontend.dev/banner/banner_583-111.png" alt="Subscribe to the weekly modern frontend development newsletter" width="583" height="111"&gt;&lt;/a&gt;&lt;/p&gt;




</description>
      <category>webdev</category>
      <category>nextjs</category>
      <category>react</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
