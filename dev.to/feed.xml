<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>React vs Angular comparison: Which is better for your project in 2021?</title>
      <author>Pawan Bhayde</author>
      <pubDate>Tue, 20 Apr 2021 14:21:19 +0000</pubDate>
      <link>https://dev.to/pawanbhayde/react-vs-angular-comparison-which-is-better-for-your-project-in-2021-4o5a</link>
      <guid>https://dev.to/pawanbhayde/react-vs-angular-comparison-which-is-better-for-your-project-in-2021-4o5a</guid>
      <description>&lt;p&gt;Choosing React or Angular may be a debating issue raised by many developers. Everybody, from a newcomer and a freelancer to a talented architect, is trying to know where to start out . do you have to got to craft a technique for your project, you'll need to get an experienced opinion. Our experts have conducted an in depth React vs AngularJS (Angular 2+) comparison to save lots of some time.&lt;/p&gt;

&lt;p&gt;Comparing React vs Angular, you’ll be ready to understand which technology is best for your case and environment. &lt;/p&gt;

&lt;p&gt;AngularJS is an open-source JavaScript framework maintained by Google and community which may help developers create single-page applications. AngularJS which is made on top of JavaScript is making the lifetime of developers easy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is React a framework? Advantages of React.JS&lt;/strong&gt;&lt;br&gt;
React may be a interface library that was developed at Facebook for creating interactive, stateful, and reusable interface components. it's used at Facebook in production. ReactJS is sweet for rendering complex user interfaces with high performance. the essential fundamental behind React is that the concept of virtual DOM (Document Object Model). ReactJS effectively uses virtual DOM which may be rendered either at the client-side or server-side and communicate back and forth. The Virtual DOM renders subtrees of nodes based upon state changes.&lt;/p&gt;

&lt;p&gt;React is lighter than Angular. it's crammed with less number of conditions and eliminates the necessity to use extra elements like plugins. React is against two-way binding, it intentionally stays faraway from it and makes use of explicit updates instead.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Questions to ask yourself if you can’t decide between Angular popularity and React Js advantages&lt;/strong&gt;&lt;br&gt;
When it involves selecting the proper tool for your case, you ought to ask yourself: “Does it work for me?”, “Will it's good to finish my tasks?” Here are more specific questions you ought to care about:&lt;/p&gt;

&lt;p&gt;1 Is your tool mature enough and who developed it?&lt;br&gt;
2 What are the features you'll need?&lt;br&gt;
3 What does one realize the tool’s ecosystem?&lt;br&gt;
4 Which paradigms, patterns, and architecture does your tool employ?&lt;/p&gt;

&lt;p&gt;Below are some questions for you and your team members:&lt;/p&gt;

&lt;p&gt;1 Does a tool fit well together with your project requirements?&lt;br&gt;
2 Will your team be ready to easily master this technology?&lt;br&gt;
3 Have your developers had the experience of using it?&lt;/p&gt;

&lt;p&gt;Why does one need answering these questions? By giving the answers you'll be ready to assess the technology of your choosing and in our case, to work out what's the difference between React and Angular.&lt;/p&gt;

&lt;p&gt;Before beginning to compare the pros and cons React and Angular have, we should always mention that it’s not actually fair to contrast those. And here is why: React may be a UI library whereas Angular may be a sophisticated framework.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;original post :-&lt;/strong&gt; &lt;a href="https://webdevpawan.blogspot.com/2021/04/react-vs-angular-comparison-which-is.html"&gt;https://webdevpawan.blogspot.com/2021/04/react-vs-angular-comparison-which-is.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note:- visit my youtube channel for frontend tutorials&lt;br&gt;
&lt;strong&gt;subscribe to my youtube channel :-&lt;/strong&gt; &lt;a href="https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg"&gt;https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resent post :-&lt;/strong&gt; &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/pawanbhayde" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zic_2tNp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--C-k5zhb8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/616392/67585460-1ef8-429f-9da3-98339a4e0449.jpg" alt="pawanbhayde image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pawanbhayde/30-website-to-find-designs-for-your-next-projects-1kih" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;30+ website to find designs for your next projects&lt;/h2&gt;
      &lt;h3&gt;Pawan Bhayde ・ Apr 20 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>react</category>
      <category>angular</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What if?</title>
      <author>Shaquil Maria</author>
      <pubDate>Tue, 20 Apr 2021 14:18:40 +0000</pubDate>
      <link>https://dev.to/theowlsden/what-if-36l1</link>
      <guid>https://dev.to/theowlsden/what-if-36l1</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@emilymorter?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Emily Morter&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/question?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most of the time, people ask: What would your dream job look like? Or, what is the ideal company you would like to work at?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H3hJa_2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.tenor.com/images/7192e2c40e335695e4e615bc509a9eb9/tenor.gif" class="article-body-image-wrapper"&gt;&lt;img width="900" src="https://res.cloudinary.com/practicaldev/image/fetch/s--H3hJa_2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.tenor.com/images/7192e2c40e335695e4e615bc509a9eb9/tenor.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One thing I rarely hear people asking is this: &lt;/p&gt;

&lt;p&gt;Imagine an ideal world that you didn't have to worry about money, thus didn't have to work. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What would be the dream project you'd be working on?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a developer, maybe there is this one side project that you always wanted to work on, but never got that far. What is that project, and why is it important to you?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>watercooler</category>
      <category>sideprojects</category>
      <category>career</category>
    </item>
    <item>
      <title>DaVincentBoy</title>
      <author>DaVincentBoy</author>
      <pubDate>Tue, 20 Apr 2021 14:17:31 +0000</pubDate>
      <link>https://dev.to/davincentboy/davincentboy-jl3</link>
      <guid>https://dev.to/davincentboy/davincentboy-jl3</guid>
      <description>&lt;p&gt;Hello, I am new to Dev.to just wanted to say that if you are looking for like code and stuff like js,html and i am still learning about it! Sorry if you wanted code from me!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Custom Swatch for Material App Theme – primarySwatch </title>
      <author>Rohan Joshi</author>
      <pubDate>Tue, 20 Apr 2021 14:17:20 +0000</pubDate>
      <link>https://dev.to/rohanjsh/custom-swatch-for-material-app-theme-primaryswatch-3kic</link>
      <guid>https://dev.to/rohanjsh/custom-swatch-for-material-app-theme-primaryswatch-3kic</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9P36d1m9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8s170ty1gq5rjyc4vfj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9P36d1m9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8s170ty1gq5rjyc4vfj.png" alt="Error Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;‘Color’ is not a subtype of type ‘MaterialColor?’, ever got this kind of error at runtime, most probably, defining the primarySwatch for your App.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So let’s find out how to define a custom swatch that would work as expected.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://api.flutter.dev/flutter/painting/ColorSwatch-class.html#:~:text=A%20color%20that%20has%20a,primary%20and%20accent%20color%20swatches.&amp;amp;text=Colors%2C%20which%20defines%20all%20of%20the%20standard%20material%20design%20colors."&gt;A color that has a small table of related colors called a “swatch”&lt;/a&gt; — Dart Docs&lt;/p&gt;

&lt;p&gt;To create our own small table we need some values to put it in, right. So where can we get them? People on the earth are just awesome, we have a tool &lt;a href="https://maketintsandshades.com/"&gt;Make Tints and Shades&lt;/a&gt; to our rescue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4qMRO8kP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njs9g45xnzuid98qoc49.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4qMRO8kP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njs9g45xnzuid98qoc49.png" alt="Make Tints and Shades"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get any color HEX code you want paste it in that box, and then click on ‘Make tints and Shade’ (Tip for future — Hover the shades to copy the code)&lt;br&gt;
Create a new dart file for our new values' home. I have named it ‘palette.dart’. (You guys can post your creative names in comments 😜)&lt;/p&gt;

&lt;p&gt;From Dart Documentation&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const MaterialColor(
int primary,
Map&amp;lt;int, Color&amp;gt; swatch
)
//Creates a color swatch with a variety of shades.
//The primary argument should be the 32 bit ARGB value of one of the values in the swatch, as would be passed to the new Color constructor for that same color, and as is exposed by value. (This is distinct from the specific index of the color in the swatch.)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;To tap into the desired value, all you need to create is a Map. That is exactly what we have created below with defining a class Palette for better use and scalability in the future.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Now we just need to import our newly created dart file in main.dart for implementation.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;When we define a primarySwatch by ourselves, Theme itself takes some decision in defining colors for widgets like AppBar, FAB, etc. And that’s it, we have a very own customized primarySwatch defined.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
    </item>
    <item>
      <title>Excited to publish a major release of tgcf</title>
      <author>Aahnik Daw</author>
      <pubDate>Tue, 20 Apr 2021 14:04:26 +0000</pubDate>
      <link>https://dev.to/aahnik/excited-to-publish-a-major-release-of-tgcf-55h4</link>
      <guid>https://dev.to/aahnik/excited-to-publish-a-major-release-of-tgcf-55h4</guid>
      <description>&lt;ul&gt;
&lt;li&gt;refactor code for better maintainability&lt;/li&gt;
&lt;li&gt;the features of paid private repo "telegram-live-sync" is now free and merged into tgcf&lt;/li&gt;
&lt;li&gt;implement plugin architecture to allow easy addition of features&lt;/li&gt;
&lt;li&gt;a shiny new README&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Link to GitHub: &lt;a href="https://github.com/aahnik/tgcf"&gt;https://github.com/aahnik/tgcf&lt;/a&gt;&lt;br&gt;
Link to PyPI: &lt;a href="https://pypi.org/project/tgcf/"&gt;https://pypi.org/project/tgcf/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please help this repo reach 100 stars.&lt;/p&gt;

</description>
      <category>news</category>
      <category>python</category>
    </item>
    <item>
      <title>Learn JavaScript's for...of and for...in - in 2 minutes</title>
      <author>Jordi Enric</author>
      <pubDate>Tue, 20 Apr 2021 14:01:55 +0000</pubDate>
      <link>https://dev.to/jordienr/learn-javascript-s-for-of-and-for-in-in-2-minutes-1kk9</link>
      <guid>https://dev.to/jordienr/learn-javascript-s-for-of-and-for-in-in-2-minutes-1kk9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-raw-forin-endraw-loop"&gt;
  &lt;/a&gt;
  The &lt;code&gt;for...in&lt;/code&gt; loop
&lt;/h2&gt;

&lt;p&gt;We use &lt;code&gt;for...in&lt;/code&gt; when we want to use the &lt;strong&gt;keys&lt;/strong&gt; of an Object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;keyOne&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;valueOne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;keyTwo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;valueTwo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;keyThree&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;valueThree&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;propertyKey&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;propertyKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Will result in:&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;keyOne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;keyTwo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;keyThree&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see in the example &lt;code&gt;propertyKey&lt;/code&gt; will be the key of the object.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You should know&lt;br&gt;
💡 &lt;code&gt;for...in&lt;/code&gt; will ignore any &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol"&gt;Symbol&lt;/a&gt;s in your Object&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we want to access the value we can still do it like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;propertyKey&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;propertyKey&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But instead of doing this we could use a &lt;code&gt;for...of&lt;/code&gt; loop.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-forof-endraw-loop"&gt;
  &lt;/a&gt;
  The &lt;code&gt;for...of&lt;/code&gt; loop
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;for...of&lt;/code&gt; loop will iterate over the values of the Iterable Object.&lt;/p&gt;

&lt;p&gt;Here's an example with an Array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myIterableObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;valueOne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;valueTwo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;valueThree&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myValue&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;myIterableObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Will result in&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;valueOne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;valueTwo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;valueThree&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a good alternative to the &lt;code&gt;forEach&lt;/code&gt; method&lt;/p&gt;

&lt;p&gt;This was a quick introduction to these two syntaxes of the for loop in Javascript. I recommend you play around with them. These two are really useful to know when you want to write short for loops.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-me-on-twitter-for-more"&gt;
  &lt;/a&gt;
  🚀 Follow me on &lt;a href="https://twitter.com/jordienr"&gt;twitter&lt;/a&gt; for more
&lt;/h2&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Localizing dates in a Perl web application</title>
      <author>Mark Gardner</author>
      <pubDate>Tue, 20 Apr 2021 14:00:00 +0000</pubDate>
      <link>https://dev.to/mjgardner/localizing-dates-in-a-perl-web-application-180</link>
      <guid>https://dev.to/mjgardner/localizing-dates-in-a-perl-web-application-180</guid>
      <description>&lt;p&gt;When we’re writing software for a global audience, it’s nice if we can provide it according to their native languages and conventions. Translating all of the text can be a huge undertaking, but &lt;strong&gt;we can start small&lt;/strong&gt; by making sure that when we show the day and date it appears as the user expects. For example, to me it’s Tuesday, April 20, 2021; to my friend &lt;a href="http://www.leonerd.org.uk/"&gt;Paul&lt;/a&gt; in the UK it’s Tuesday, 20 April 2021 (note the difference in order), and to my other friend &lt;a href="https://szabgab.com/"&gt;Gabór&lt;/a&gt; in Israel it’s יום שלישי, 20 באפריל 2021 (note the different direction of the text, different language, and character set).&lt;/p&gt;

&lt;p&gt;Thankfully, we have a number of tools to assist us:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;a href="https://metacpan.org/pod/DateTime::Locale"&gt;DateTime::Locale&lt;/a&gt; library, which enables our Perl software to &lt;strong&gt;represent dates and times globally&lt;/strong&gt; and contains a &lt;a href="https://metacpan.org/pod/DateTime::Locale::Catalog"&gt;catalog of locales&lt;/a&gt;. It works with the &lt;a href="https://metacpan.org/pod/DateTime"&gt;DateTime&lt;/a&gt; library for storing our dates as objects that can be easily manipulated and formatted.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language"&gt;HTTP Accept-Language header&lt;/a&gt;, which lets a web browser communicate to the server &lt;strong&gt;what natural languages and locale variants&lt;/strong&gt; the user understands.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://metacpan.org/pod/HTTP::AcceptLanguage"&gt;HTTP::AcceptLanguage&lt;/a&gt; module, which helps us &lt;strong&gt;parse the Accept-Language header&lt;/strong&gt; and select a compatible locale.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our sample code uses the &lt;a href="https://mojolicious.org/"&gt;Mojolicious&lt;/a&gt; framework and is very simple; almost half of it is just HTML web page templates. You could easily adapt it to other frameworks or templating systems.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Lines 1 through 6&lt;/strong&gt; tell our code to use the Perl interpreter in our execution &lt;code&gt;PATH&lt;/code&gt; and load our prerequisite modules. Note we’re using the micro version of Mojolicious, &lt;a href="https://docs.mojolicious.org/Mojolicious/Lite"&gt;Mojolicious::Lite&lt;/a&gt;; later you can &lt;a href="https://docs.mojolicious.org/Mojolicious/Guides/Growing"&gt;grow your application&lt;/a&gt; into a well-structured Mojolicious app. We’re also using Perl &lt;a href="https://perldoc.pl/perlsub#Signatures"&gt;subroutine signatures&lt;/a&gt;, which requires Perl 5.20 or later (released in 2014).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lines 8 and 9&lt;/strong&gt; preload all of the available &lt;a href="https://metacpan.org/pod/DateTime::Locale"&gt;DateTime::Locale&lt;/a&gt; objects so that we can serve requests faster without having to load a new locale every time. We create a hash where the keys are the locale identifiers (for example, &lt;code&gt;en-US&lt;/code&gt; for United States English), and the values are the locale objects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lines 11 and 12&lt;/strong&gt; begins our route handler for HTTP GET requests on the default &lt;code&gt;/&lt;/code&gt; route in our web application. When a browser hits the home page of our app, it will execute the code in the anonymous sub in line 11, which is passed the &lt;a href="https://docs.mojolicious.org/Mojolicious/Controller"&gt;controller&lt;/a&gt; object as &lt;code&gt;$c&lt;/code&gt;. It’s a very simple handler that renders a template called &lt;code&gt;index&lt;/code&gt; (described below), passing it a &lt;code&gt;date&lt;/code&gt; object with today’s date.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lines 14 through 22&lt;/strong&gt; are where the smarts of our application lie. It’s a &lt;a href="https://docs.mojolicious.org/Mojolicious/Lite#helper"&gt;helper&lt;/a&gt; that we’ll call from our template to localize a date object, and it’s another anonymous sub. This time it’s passed a &lt;a href="https://docs.mojolicious.org/Mojolicious/Controller"&gt;Mojolicious controller&lt;/a&gt; as &lt;code&gt;$c&lt;/code&gt;, a &lt;code&gt;$date&lt;/code&gt; parameter that defaults to today, and a &lt;code&gt;$format&lt;/code&gt; parameter that defaults to ‘full’.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lines 16 and 17&lt;/strong&gt; in the helper get our locale. Working from the inside out, we get the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language"&gt;HTTP Accept-Language&lt;/a&gt; header from the request on line 17, create a new &lt;a href="https://metacpan.org/pod/HTTP::AcceptLanguage"&gt;HTTP::AcceptLanguage&lt;/a&gt; object in line 16 for parsing that header, and then match it against the keys in our global &lt;code&gt;%locales&lt;/code&gt; hash in line 17. That matched key then looks up the appropriate &lt;a href="https://metacpan.org/pod/DateTime::Locale"&gt;DateTime::Locale&lt;/a&gt; object from the hash.&lt;/p&gt;

&lt;p&gt;DateTime only allows you to set a locale at object construction time, so in &lt;strong&gt;line 18&lt;/strong&gt; we create a new object from the old one, setting its locale to our newly-discovered &lt;code&gt;$locale&lt;/code&gt; object. Finally, in &lt;strong&gt;lines 20 and 21&lt;/strong&gt; we determine what method to call on that object to retrieve the &lt;a href="https://metacpan.org/pod/DateTime#CLDR-Patterns"&gt;CLDR (Common Locale Data Repository) formatting pattern&lt;/a&gt; for the requested format and then return the formatted date.&lt;/p&gt;

&lt;p&gt;At last, &lt;strong&gt;line 24&lt;/strong&gt; starts the application. To run it using the &lt;a href="https://docs.mojolicious.org/morbo"&gt;development server&lt;/a&gt; included with Mojolicious, do this at the command line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ morbo perl_date_locale.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are &lt;a href="https://docs.mojolicious.org/Mojolicious/Guides/Cookbook#DEPLOYMENT"&gt;other options for deploying your application&lt;/a&gt;, including Mojolicious’ built-in web server, inside a container, using other web servers, etc.&lt;/p&gt;

&lt;p&gt;The rest of the above script is in the &lt;a href="https://perldoc.pl/perldata#Special-Literals"&gt;&lt;code&gt;__DATA__&lt;/code&gt; portion&lt;/a&gt; and contains two pseudo-files that Mojolicious &lt;a href="https://docs.mojolicious.org/Mojo/Loader"&gt;knows how to read&lt;/a&gt; in the absence of actual templates and layouts. &lt;strong&gt;First on line 27&lt;/strong&gt; is the actual &lt;code&gt;index.html.ep&lt;/code&gt; HTML page, which uses Mojolicious’ &lt;a href="https://docs.mojolicious.org/Mojolicious/Guides/Rendering#Embedded-Perl"&gt;Embedded Perl&lt;/a&gt; (ep) templating system to select a layout of shared HTML to use (the &lt;code&gt;layouts/default.html.ep&lt;/code&gt; file &lt;strong&gt;starting on line 38&lt;/strong&gt; ).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lines 31 through 36&lt;/strong&gt; render an HTML unordered list that runs through the various formatting options available to our &lt;code&gt;localize_date&lt;/code&gt; helper, first with the default ‘full’ formatting, and then a loop through ‘long’, ‘medium’, and ‘short’. Note that we call our helper as an expression, with an equals (&lt;code&gt;=&lt;/code&gt;) sign after the percent (&lt;code&gt;%&lt;/code&gt;) sign.&lt;/p&gt;

&lt;p&gt;If you want to test different locales without changing your browser or operating system settings, you can invoke the script from the command line along with the HTTP request and headers to pass along. Here’s an example using German:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl perl_date_locale.pl get -H 'Accept-Language: de' /
[2021-04-17 16:39:57.81379] [5425] [debug] [LcCSBKMVd90t] GET "/"
[2021-04-17 16:39:57.81408] [5425] [debug] [LcCSBKMVd90t] Routing to a callback
[2021-04-17 16:39:57.81610] [5425] [debug] [LcCSBKMVd90t] Rendering template "index.html.ep" from DATA section
[2021-04-17 16:39:57.81714] [5425] [debug] [LcCSBKMVd90t] Rendering template "layouts/default.html.ep" from DATA section
[2021-04-17 16:39:57.81792] [5425] [debug] [LcCSBKMVd90t] 200 OK (0.004118s, 242.836/s)
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Today&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
&amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;Dienstag, 20. April 2021&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;20. April 2021&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;20.04.2021&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;20.04.21&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here’s Japanese:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl perl_date_locale.pl get -H 'Accept-Language: ja' /
[2021-04-17 16:40:56.10840] [5478] [debug] [Wmr6cN5KUJlP] GET "/"
[2021-04-17 16:40:56.10874] [5478] [debug] [Wmr6cN5KUJlP] Routing to a callback
[2021-04-17 16:40:56.11101] [5478] [debug] [Wmr6cN5KUJlP] Rendering template "index.html.ep" from DATA section
[2021-04-17 16:40:56.11255] [5478] [debug] [Wmr6cN5KUJlP] Rendering template "layouts/default.html.ep" from DATA section
[2021-04-17 16:40:56.11360] [5478] [debug] [Wmr6cN5KUJlP] 200 OK (0.005164s, 193.648/s)
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Today&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
&amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;2021年4月20日火曜日&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;2021年4月20日&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;2021/04/20&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;2021/04/20&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A full list of supported locales is provided in the &lt;a href="https://metacpan.org/pod/DateTime::Locale::Catalog"&gt;DateTime::Locale::Catalog&lt;/a&gt; documentation.&lt;/p&gt;

&lt;p&gt;I hope this article has helped demonstrate that it’s not too hard to make your Perl web applications &lt;strong&gt;respect global audiences&lt;/strong&gt;, if only with dates. For more on localization and Perl, start with the &lt;a href="https://metacpan.org/pod/Locale::Maketext"&gt;Locale::Maketext&lt;/a&gt; framework.&lt;/p&gt;

</description>
      <category>perl</category>
      <category>webdev</category>
      <category>l10n</category>
      <category>mojolicious</category>
    </item>
    <item>
      <title>Tokenization and Sequencing in TensorFlow</title>
      <author>Bala Priya</author>
      <pubDate>Tue, 20 Apr 2021 13:50:16 +0000</pubDate>
      <link>https://dev.to/balapriya/tokenization-and-sequencing-in-tensorflow-3p0n</link>
      <guid>https://dev.to/balapriya/tokenization-and-sequencing-in-tensorflow-3p0n</guid>
      <description>&lt;p&gt;In this blog post, we shall seek to learn how to implement tokenization and sequencing, important text pre-processing steps, in Tensorflow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Introduction to Tokenizer&lt;/li&gt;
&lt;li&gt;Understanding Sequencing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-tokenizer"&gt;
  &lt;/a&gt;
  Introduction to Tokenizer
&lt;/h2&gt;

&lt;p&gt;Tokenization is the process of splitting the text into smaller units such as sentences, words or subwords. In this section, we shall see how we can pre-process the text corpus by tokenizing text into words in TensorFlow. We shall use the Keras API with TensorFlow backend; The code snippet below shows the necessary imports.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tensorflow&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tensorflow&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;keras&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tensorflow.keras.preprocessing.text&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Tokenizer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And voila! we have all modules imported! Let’s initialize a list of sentences that we shall tokenize.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sentences&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="s"&gt;'Life is so beautiful'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;'Hope keeps us going'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;'Let us celebrate life!'&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to instantiate the Tokenizer and call the &lt;code&gt;fit_on_texts&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;tokenizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tokenizer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;tokenizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit_on_texts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sentences&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, when the text corpus is very large, we can specify an additional &lt;code&gt;num_words&lt;/code&gt; argument to get the most frequent words. For example, if we’d like to get the 100 most frequent words in the corpus, then &lt;code&gt;tokenizer = Tokenizer(num_words=100)&lt;/code&gt; does just that! &lt;/p&gt;

&lt;p&gt;To know how these tokens have been created and the indices assigned to words, we can use the &lt;code&gt;word_index&lt;/code&gt; attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;word_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;word_index&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="c1"&gt;# Here’s the output:
&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;life&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;us&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="ow"&gt;is&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;beautiful&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;hope&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;keeps&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;going&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;celebrate&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, so far so good! But what happens when the test data contains words that we’ve not accounted for in the vocabulary?🤔&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;test_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="s"&gt;'Our life is to celebrate'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;'Hoping for the best!'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;'Let peace prevail everywhere'&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have introduced sentences in &lt;code&gt;test_data&lt;/code&gt; which contain words that are not in our earlier vocabulary.&lt;/p&gt;

&lt;p&gt;How do we account for such words which are not in vocabulary?We can define an argument &lt;code&gt;oov_token&lt;/code&gt; to account for such Out Of Vocabulary (OOV) tokens.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;tokenizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tokenizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oov_token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;OOV&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;word_index&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="n"&gt;returns&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;following&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;OOV&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;life&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;us&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="ow"&gt;is&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;beautiful&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;hope&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;keeps&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;going&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;celebrate&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#understanding-sequencing"&gt;
  &lt;/a&gt;
  Understanding Sequencing
&lt;/h2&gt;

&lt;p&gt;In this section, we shall build on the tokenized text, using these generated tokens to convert the text into a sequence.&lt;/p&gt;

&lt;p&gt;We can get a sequence by calling the &lt;code&gt;texts_to_sequences&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sequences&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;texts_to_sequences&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sentences&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#Here’s the output:
&lt;/span&gt;
&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s now take a step back. What happens when the sentences are of different lengths?Then, we will have to convert all of them to the same length.&lt;/p&gt;

&lt;p&gt;We shall import &lt;code&gt;pad_sequences&lt;/code&gt; function to pad our sequences and look at the padded sequences.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tensorflow.keras.preprocessing.sequence&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pad_sequences&lt;/span&gt;
&lt;span class="n"&gt;padded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pad_sequences&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sequences&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Padded Sequences:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;padded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Output
&lt;/span&gt;&lt;span class="n"&gt;Padded&lt;/span&gt; &lt;span class="n"&gt;Sequences&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="p"&gt;[[&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;  &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
  &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, the &lt;code&gt;length of the padded sequence = length of the longest sentence&lt;/code&gt;. However, we can limit the maximum length by explicitly setting the &lt;code&gt;maxlen&lt;/code&gt; argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;padded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pad_sequences&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sequences&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;maxlen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Padded Sequences:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;padded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Output
&lt;/span&gt;&lt;span class="n"&gt;Padded&lt;/span&gt; &lt;span class="n"&gt;Sequences&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
&lt;span class="p"&gt;[[&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;  &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
 &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;7&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt;  &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
 &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let’s pad our test sequences after converting them to sequences.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;test_seq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;texts_to_sequences&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Test Sequence = "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test_seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;padded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pad_sequences&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_seq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxlen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Padded Test Sequence: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;padded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;And&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;our&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="c1"&gt;# Output 
&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;  
&lt;span class="n"&gt;Padded&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="p"&gt;[[&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
 &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
 &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We see that all the padded sequences are of length maxlen and are padded with 0s at the beginning. What if we would like to add trailing zeros instead of at the beginning? We only need to specify &lt;code&gt;padding='post'&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;padded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pad_sequences&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_seq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxlen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'post'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Padded Test Sequence: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;padded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Output
&lt;/span&gt;&lt;span class="n"&gt;Padded&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
 &lt;span class="p"&gt;[[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
 &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far, none of the sentences have length exceeding &lt;code&gt;maxlen&lt;/code&gt;, but in practice, we may have sentences that are much longer than &lt;code&gt;maxlen&lt;/code&gt;. In that case, we have to truncate the sentences and can set the argument truncating='post' or 'pre' to drop the first few or the last few words that exceed the specified &lt;code&gt;maxlen&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Happy learning and coding!🎈✨🎉👩🏽‍💻&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;p&gt;Natural Language Processing in TensorFlow&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Simple User Selection Color HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Tue, 20 Apr 2021 13:47:18 +0000</pubDate>
      <link>https://dev.to/nikhil27b/simple-user-selection-color-html-css-145</link>
      <guid>https://dev.to/nikhil27b/simple-user-selection-color-html-css-145</guid>
      <description>&lt;p&gt;Hello,&lt;/p&gt;

&lt;p&gt;Today I choose a very simple topic to how to change a user selection color. The ::selection is a CSS pseudo-element that applies styles to the part of a document or text highlighted by the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;::selection {
  color: #fff;
  background:#ff8882;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As an above example, you can change different colors and it's very useful I hope you like this also comments about your thoughts. For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to more support me then buy me a &lt;a href="https://www.buymeacoffee.com/nikhilbobade27"&gt;coffee&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/KKaGWGK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Why I Say That Blockchain Is the Future</title>
      <author>ElenaAl</author>
      <pubDate>Tue, 20 Apr 2021 13:39:24 +0000</pubDate>
      <link>https://dev.to/elenaal/why-i-say-that-blockchain-is-the-future-9l</link>
      <guid>https://dev.to/elenaal/why-i-say-that-blockchain-is-the-future-9l</guid>
      <description>&lt;p&gt;“If the United States were to decide we didn’t want cryptocurrency to happen in the United States and tried to ban it, I’m pretty confident we wouldn’t succeed.” &lt;/p&gt;

&lt;p&gt;This was a statement made just a couple of days ago at the U.S. Senate’s hearing about regulation of cryptocurrencies and blockchain. &lt;/p&gt;

&lt;p&gt;Even parties who might want to regulate or constrict blockchain recognize it as an inevitable, unstoppable force of the future. &lt;a href="https://en.wikipedia.org/wiki/Cryptocurrency"&gt;Cryptocurrency&lt;/a&gt; is just one of the many manifestations of this technology, with the potential of blockchain ranging to everything from small grassroots efforts like crowdfunding to large-scale, global endeavors like an entirely new Internet. Because of its efficiency, scalability, and affordability, blockchain technology will take the world by storm and completely redefine the way we think about data transmission. The simple and yet powerful axioms that define &lt;a href="https://pixelplex.io/blog/blockchain-explained-components-platforms-use-cases/"&gt;blockchain technology&lt;/a&gt; also give it many benefits that outdate traditional economic views, and even outdate current tech giants who challenge those views. &lt;/p&gt;

&lt;p&gt;For all of the jargon and mystery associated with blockchain technology, it is essentially just a decentralized ledger. It involves storing data in groups called blocks across thousands or even millions of nodes, which are all the devices across a blockchain network. After the nodes reach a consensus – that is, they agree on the validity of the data in the block, the block becomes published and added to the chain of other blocks. &lt;br&gt;
Because the data is stored and processed evenly across all nodes, decentralization is one of the defining features of this technology.&lt;/p&gt;

&lt;p&gt;Another key aspect is transparency: once the block is added to the chain, anyone can access it and view it. The third critical feature of this network is immutability – after the block is published, it cannot be tweaked, disputed, or removed. Even if one node on the network tried to change the information, all of the other nodes would have information to oppose and therefore neutralize it. These key features give the technology major advantages to traditional data transmission techniques. One of the most important advantages is that blockchain does not have transaction costs. &lt;/p&gt;

&lt;p&gt;Everything is automated and decentralized so, while there are associated infrastructure costs (often internalized by the network), there is no overarching agency to charge the operation. This is the exact opposite of financial institutions and companies based on the market-maker principle. &lt;/p&gt;

&lt;p&gt;Companies like Airbnb and Uber – which rely on the costs they charge for connecting buyers and sellers – will be made obsolete by blockchain technology. All that needs to be done is to encrypt the information associated with a bed and breakfast or a car ride – and the convenience provided by such business models will be multiplied and freely provided by the blockchain. &lt;/p&gt;

&lt;p&gt;Even more complex and large-scale marketplaces like Amazon could be replaced by blockchain technology. Not only could the products themselves be captured by &lt;a href="https://developer.ibm.com/technologies/blockchain/gettingstarted/"&gt;blockchain code&lt;/a&gt;, but also the reviews, ratings, and other associated third-party information. All of this data could be stored and transmitted – freely – on the blockchain network. What’s more, the producers and suppliers would receive the full profit as opposed to a small portion or royalty. &lt;/p&gt;

&lt;p&gt;Intuitively, it’s easy to see why this would be attractive to both buyers and sellers, but this is substantial even from a fundamental economic perspective. By eliminating transaction costs, which is a source of market inefficiency and deadweight loss, markets will be able to conduct business at true equilibrium where supply meets demand, and thus total market utility and welfare will increase. Since profit from the companies is no longer getting eaten up by transaction costs, more producers will be able to enter markets, more consumers will be able to purchase, and higher quality products will be sold for cheaper prices. Blockchain has the power to bring the world to a new age of economic prosperity. While the inherent traits of blockchain give it much promise, when combined with other growing technologies, the power of blockchain is heightened even further. &lt;/p&gt;

&lt;p&gt;For example, the growing development of artificial intelligence makes it a promising partner for blockchain. By applying artificial intelligence to blockchain networks, they could potentially become even more secure and robust. Even though the decentralized and encrypted nature of blockchain technology makes it very difficult to hack, hacks are still possible, such as those launched against cryptocurrencies. Though they are not popular, when they do happen, they get a lot of publicity and undermine the promise of blockchain technology. By applying artificial intelligence in the form of an algorithm like Homomorphic encryption, which operates on encrypted data, this issue could be solved. &lt;/p&gt;

&lt;p&gt;Another aspect that artificial intelligence could improve is efficiency. As mentioned earlier, though there are no transaction costs associated with blockchain technology, there are infrastructure costs. Millions of dollars can be spent sharing and validating blocks in certain blockchain networks. With artificial intelligence, the network might be able to figure out the likelihood of certain nodes to validate more quickly than others, and direct the load towards those nodes and away from less efficient ones. These are just a couple ways in which artificial intelligence could be applied to blockchain to catalyze its growth even further and bring us that much closer to the future. &lt;/p&gt;

&lt;p&gt;Combined with AI, blockchain is even smarter and faster, which will make it that much easier to seamlessly integrate into our everyday lives.  With its rapidly growing adoption, the &lt;a href="https://pixelplex.io/blog/top-blockchain-trends-to-follow/"&gt;future of blockchain&lt;/a&gt; is right around the corner. Even so, I think there are certain aspects of blockchain that must be addressed before this future can be fully realized. One of the biggest obstacles is just social uncertainty. As mentioned before, the famous hacks to cryptocurrencies makes people question the security of blockchain. An even more pressing setback is that most people simply don’t yet understand the advantages of a safe, decentralized ledger. &lt;/p&gt;

&lt;p&gt;As with many technologies, I think once more effort is put towards education about blockchain, it will continue to spread and advance. I think another important issue that must be addressed is energy efficiency. In the process of validating and storing the data, also known as mining, a lot of computational energy is spent, and it can quickly add up over large blockchain networks. With a growing international focus on global warming and environmental issues, this must be addressed for us to realize the future that blockchain can provide. &lt;/p&gt;

&lt;p&gt;The good news is that technologies like artificial intelligence are already being applied towards energy efficiency, and this may be yet another way in which AI can help blockchain. A third and final shortcoming that I see keeping us from the future of blockchain is current technology limitations. One such example is mobile communications. Many people believe that once &lt;a href="https://www.cisco.com/c/en/us/solutions/what-is-5g.html"&gt;5G cellular technology&lt;/a&gt; becomes widely adopted, blockchain will really be able to take over as the new, decentralized internet. This makes since because this will enable computers and mobile devices to become more powerful nodes and transmit data at a faster rate. &lt;/p&gt;

&lt;p&gt;None of the obstacles mentioned are by any means insurmountable, and I think that, if addressed soon, the future could be closer than we might think. Now more than ever, people are starting to place a large emphasis on things like privacy, efficiency, affordability, and equity. Blockchain answers all of these concerns, and its potential is starting to become more recognized. With the growing popularity of emerging technologies like smart contracts, cryptocurrencies, and other blockchain applications, it’s only a matter of time before blockchain runs the world. The funny thing about the future is that nobody knows what it is, but everybody expects it to be faster, smarter, and better than the now. I agree – that’s why I say the future is blockchain.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to publish TypeScript package to NPM</title>
      <author>Vladimir Nikitin</author>
      <pubDate>Tue, 20 Apr 2021 13:33:39 +0000</pubDate>
      <link>https://dev.to/loonywizard/how-to-publish-typescript-package-to-npm-2k54</link>
      <guid>https://dev.to/loonywizard/how-to-publish-typescript-package-to-npm-2k54</guid>
      <description>&lt;p&gt;In this article I'm going to cover a process of publishing TypeScript package with external dependencies to NPM &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#write-some-code"&gt;
  &lt;/a&gt;
  Write some code
&lt;/h2&gt;

&lt;p&gt;The package we're going to publish is React.js custom hook for throttling values: &lt;a href="https://www.npmjs.com/package/react-use-throttle"&gt;react-use-throttle&lt;/a&gt;. I've already written &lt;a href="https://dev.to/loonywizard/react-usethrottle-hook-87h"&gt;article about developing this hook&lt;/a&gt; and now we're going to publish it to NPM&lt;/p&gt;

&lt;p&gt;First things first, we need to write code for the package. I've put my code to &lt;code&gt;src/index.ts&lt;/code&gt; file&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tsconfigjson"&gt;
  &lt;/a&gt;
  tsconfig.json
&lt;/h2&gt;

&lt;p&gt;In order to develop with TypeScript we need to add tsconfig to our repository. My config looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"include"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"./src/**/*"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"strict"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"declaration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;generates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;declaration&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;files&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"esModuleInterop"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To learn more about different options please look at &lt;a href="https://www.typescriptlang.org/tsconfig/"&gt; TSConfig Reference&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-rollup"&gt;
  &lt;/a&gt;
  Set up Rollup
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://rollupjs.org/guide/en/"&gt;Rollup&lt;/a&gt; is a module bundler for JavaScript which compiles small pieces of code into something larger and more complex, such as a library or application&lt;/p&gt;

&lt;p&gt;Rollup allows developers easily compile code into different JavaScript module systems such as ESModules, UMD, AMD or CommonJS. There's a &lt;a href="https://dev.to/iggredible/what-the-heck-are-cjs-amd-umd-and-esm-ikm"&gt;great article covering major differences between them&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is my &lt;code&gt;rollup.config.js&lt;/code&gt; file, it exports an array of objects, where each object defines how Rollup should build our code in specified format. Here we're building code for ES and UMD modules, because there're most common nowadays. Each bundle has TypeScript and Babel plugins, and UMD bundle also has terser plugin for code minification&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;typescript&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rollup-plugin-typescript2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;babel&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@rollup/plugin-babel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;terser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rollup-plugin-terser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="c1"&gt;// ES Modules&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/useThrottle.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dist/index.es.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;es&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="nx"&gt;typescript&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="nx"&gt;babel&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="c1"&gt;// UMD&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/useThrottle.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dist/index.umd.min.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;umd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;reactUseThrottle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;indent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="nx"&gt;typescript&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="nx"&gt;babel&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node_modules/**&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="nx"&gt;terser&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To learn more about Rollup configuration please look at &lt;a href="https://rollupjs.org/guide/en/#quick-start"&gt;Rollup quick start guide&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-code-and-publish-package-to-npm"&gt;
  &lt;/a&gt;
  Build code and publish package to NPM
&lt;/h2&gt;

&lt;p&gt;We need to specify the following fields in package.json file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-use-throttle"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.0.1"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dist/index.umd.min.js"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"module"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dist/index.es.js"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"types"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dist/useThrottle.d.ts"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"files"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"dist"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;name&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt; together identify package completely unique&lt;br&gt;
&lt;code&gt;main&lt;/code&gt; is the primary entry point to our package&lt;br&gt;
&lt;code&gt;module&lt;/code&gt; is the entry point for ESModules&lt;br&gt;
&lt;code&gt;types&lt;/code&gt; is the entry point for TypeScript type declarations&lt;br&gt;
&lt;code&gt;files&lt;/code&gt; is an array of patterns that describes the entries to be included when your package is installed as a dependency&lt;/p&gt;

&lt;p&gt;Learn more about different fields in package.json file: &lt;a href="https://docs.npmjs.com/cli/v7/configuring-npm/package-json"&gt;Package.json docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, we need to specify &lt;code&gt;react&lt;/code&gt; as &lt;a href="https://nodejs.org/es/blog/npm/peer-dependencies/"&gt;peerDependency&lt;/a&gt;, because it will not be added to final build&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"peerDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^16.8.0  || ^17.0.0"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To build code with rollup we need to run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rollup &lt;span class="nt"&gt;-c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will build our package based on rules we defined in &lt;code&gt;rollup.config.js&lt;/code&gt;. Code will be generated to &lt;code&gt;dist&lt;/code&gt; folder&lt;/p&gt;

&lt;p&gt;Now we're ready to publish our package, to do this we need to run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm login &lt;span class="c"&gt;# this will ask you for your NPM login and password&lt;/span&gt;
npm publish
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Package was successfully published to NPM 🎉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rOubArNw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/011cmvx3auvebe81smrd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rOubArNw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/011cmvx3auvebe81smrd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/react-use-throttle"&gt;react-use-throttle package on NPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/loonywizard/use-throttle"&gt;GitHub repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codesandbox.io/s/react-use-throttle-demo-kcmrl"&gt;CodeSandbox demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/loonywizard/react-usethrottle-hook-87h"&gt;Article about developing useThrottle hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.vladimirnikitin.com"&gt;My personal website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>typescript</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>200+ JS Resources to master programming 💥  Cheat Sheet</title>
      <author>DevLorenzo</author>
      <pubDate>Tue, 20 Apr 2021 13:30:49 +0000</pubDate>
      <link>https://dev.to/devlorenzo/200-js-resources-to-master-programming-3aj6</link>
      <guid>https://dev.to/devlorenzo/200-js-resources-to-master-programming-3aj6</guid>
      <description>&lt;p&gt;&lt;code&gt;Hello World!&lt;/code&gt; I felt bored after completing the &lt;a href="https://dev.to/worldindev/the-ultimate-compilation-of-cheat-sheets-100-268g"&gt;Ultimate Cheat Sheet Compilation&lt;/a&gt;, so I just decided to create another one! The most complete javascript cheat sheet and resource compilation you can find online!&lt;/p&gt;

&lt;p&gt;🔖 - Waaait, don't leave this page without bookmarking it!! &lt;a&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#giveaway"&gt;
  &lt;/a&gt;
  ⚡ Giveaway ⚡
&lt;/h2&gt;

&lt;p&gt;We are giving away any course you need on Udemy. Any price any course.&lt;br&gt;
Steps to enter the giveaway&lt;br&gt;
--&amp;gt; React to this post&lt;br&gt;
--&amp;gt; &lt;a href="https://worldindev.ck.page/"&gt;Subscribe to our Newsletter&lt;/a&gt; &amp;lt;-- Very important&lt;/p&gt;



&lt;p&gt;PS: It took me around 10 hours to complete the article - So please remember the &lt;strong&gt;like ❤️&lt;/strong&gt; and &lt;strong&gt;super like 🦄&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;
  Table of content
  &lt;ul&gt;
&lt;li&gt;&lt;a href="#delta"&gt;My cheat Sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#projects"&gt;Projects ideas to become a javascript master &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#alpha"&gt;Other resources&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#1da"&gt;Complete Javascript cheat sheets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#1db"&gt;JS promises&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#1dc"&gt;JS Arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#1dd"&gt;JS loops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#1de"&gt;Preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#1df1"&gt;CoffeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#1df2"&gt;EJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#1df3"&gt;Babel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#frameworks"&gt;JS Frameworks &amp;amp; Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2f"&gt;Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2g"&gt;Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2g+"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2g+++"&gt;JQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2g++"&gt;Others&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2c"&gt;Node&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#oother"&gt;Other resources&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Remember the like ❤️ and maybe super like🦄&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;/p&gt;


&lt;p&gt;
  For beginners
  &lt;h2&gt;
  &lt;a href="#what-is-js-javascript"&gt;
  &lt;/a&gt;
  What is JS (Javascript)
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScript is a scripting or programming language that allows you to implement complex features on web pages — every time a web page does more than just sit there and display static information for you to look at — displaying timely content updates, interactive maps, animated 2D/3D graphics, scrolling video jukeboxes, etc. — you can bet that JavaScript is probably involved. It is the third layer of the layer cake of standard web technologies. &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript"&gt;MDN&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eZLiQkge--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uggvpcrg4eolng5deqkc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eZLiQkge--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uggvpcrg4eolng5deqkc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#what-it-used-for"&gt;
  &lt;/a&gt;
  What it used for?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;To put things simply, JavaScript is an object orient programming language designed to make web development easier and more attractive. In most cases, JavaScript is used to create responsive, interactive elements for web pages, enhancing the user experience. Things like menus, animations, video players, interactive maps, and even simple in-browser games can be created quickly and easily with JavaScript. JavaScript is one of the most popular programming languages in the world. &lt;a href="https://www.bitdegree.org/tutorials/what-is-javascript-used-for/#:~:text=To%20put%20things%20simply%2C%20JavaScript,pages%2C%20enhancing%20the%20user%20experience."&gt;BitDegree - What Is JavaScript Used For And Why You Should Learn It&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#hello-world-in-javascript"&gt;
  &lt;/a&gt;
  Hello World In Javascript:
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;alert("Hello World") — Output data in an alert box in the browser window
confirm("Hello World") — Opens up a yes/no dialog and returns true/false depending on user click
console.log("Hello World") — Writes information to the browser console, good for debugging purposes
document.write("Hello World") — Write directly to the HTML document
prompt("Remember the like!") — Creates a dialogue for user input
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#resources-to-learn-it"&gt;
  &lt;/a&gt;
  Resources to learn it:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide"&gt;Mozilla’s JavaScript Guide&lt;/a&gt;&lt;br&gt;
JavaScript track on Codecademy: Interactive tutorials for beginners.&lt;br&gt;
JavaScript for Cats by Max Ogden&lt;br&gt;
Eloquent JavaScript by Marijn Haverbeke&lt;br&gt;
Wikibooks’ JavaScript book&lt;br&gt;
JavaScript Lectures by Douglas Crockford&lt;br&gt;
You Don't Know JS - Possibly the best book written on modern JavaScript, completely readable online for free, or can be bought to support the author.&lt;br&gt;
braziljs/js-the-right-way - An easy-to-read, quick reference for JS best practices, accepted coding standards, and links around the Web.&lt;br&gt;
JSbooks - Directory of free JavaScript ebooks.&lt;br&gt;
Superhero.js - A collection of resources about creating, testing and maintaining a large JavaScript code base.&lt;br&gt;
SJSJ - Simplified JavaScript Jargon is a community-driven attempt at explaining the loads of buzzwords making the current JavaScript ecosystem in a few simple words.&lt;br&gt;
How to Write an Open Source JavaScript Library - A comprehensive guide through a set of steps to publish a JavaScript open source library.&lt;br&gt;
JavaScript Tutorials - Learn Javascript online from a diverse range of user ranked online tutorials.&lt;br&gt;
Functional-Light JavaScript - Pragmatic, balanced FP in JavaScript.&lt;br&gt;
Clean Code JavaScript - Clean Code concepts adapted for JavaScript.&lt;br&gt;
&lt;a href="https://github.com/ShinobiWPS/awesome-javascript#worth-reading"&gt;List at GitHub - Awesome Javascript - By Alexandru Gherasim&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#at-reddit-what-10-things-should-a-serious-javascript-developer-know-right-now"&gt;
  &lt;/a&gt;
  At Reddit - &lt;a href="https://www.reddit.com/r/javascript/comments/6mlc9d/what_10_things_should_a_serious_javascript/"&gt;What 10 Things Should a Serious Javascript Developer Know Right Now?&lt;/a&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Scope.&lt;/strong&gt; If you don't understand this intimately then you aren't that serious about this language. This is the number one point intentionally and I cannot stress it enough.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Architecture.&lt;/strong&gt; You don't have to be a master software architect, but if you cannot perform some basic planning and put pieces together without massive layers of tooling you are an imposter. Expecting frameworks and other tools to simply do it for you isn't very impressive.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DOM.&lt;/strong&gt; It is very common to see developers hiding from the DOM by layers of abstractions and other stupid crap. querySelectors are great, but are also 2800x slower than the standard DOM methods. That isn't trivial. These methods are super simple, so there is no valid excuse for developers fumbling over this or hiding in fear. &lt;a href="http://prettydiff.com/guide/unrelated_dom.xhtml"&gt;http://prettydiff.com/guide/unrelated_dom.xhtml&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Node.js&lt;/strong&gt; If you are a serious developer should have a pretty solid grasp of how to walk the file system. You should understand how to conveniently read files as text or less conveniently read files as bit for bit binary buffers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Timing and asynchronous operations.&lt;/strong&gt; Events, timers, network requests are all asynchronous and separate from each other and exist both in Node and in the browser. You have to be able to understand how to work with callbacks or promises.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Accessibility.&lt;/strong&gt; The interactions imposed by JavaScript can present accessibility barriers. A serious JavaScript developer is already familiar with WCAG 2.0 and knows how to work within its recommendations or when to push back on violating business requirements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Security.&lt;/strong&gt; You need to have at least a basic understanding of security violations, security controls, and privacy. You don't need to be a CISSP, but you need to be able to supply recommendations and avoid obvious failures. If you cannot get this right in the most basic sense you aren't a serious developer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Data structures.&lt;/strong&gt; You need to understand how to organize data in a way that allows the fastest possible execution without compromising maintenance. This is something that is learned through academic study and repeated experience writing applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Presentation and semantics.&lt;/strong&gt; You really need to have a basic understanding how to properly organize the content your users will consume and how to present in a consumable way efficiently. This is something almost completely learned from experience only. You might think CSS and HTML are simple skills that can be picked up when needed, but you would be absolutely wrong.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Knowing when to avoid the bullshit.&lt;/strong&gt; Many developers lack the years of experience to be confident in their performance.... so some of these developers will try to fake it. Don't be an imposter, because everybody will see straight through it. Hoping mountains of abstractions, tooling, frameworks, compilers, and other bullshit will save you just bogs down your application and screws over your teammates. If you aren't confident then be honest about that and seek mentorship or get involved with open source software outside of work.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2R0SPMRM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/727auzola6gykhln320v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2R0SPMRM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/727auzola6gykhln320v.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.mindmeister.com/283065198/getting-started-with-javascript?fullscreen=1"&gt;Source&lt;/a&gt; &lt;/p&gt;



&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#js-cheat-sheet"&gt;
  &lt;/a&gt;
  JS Cheat Sheet:&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;--&amp;gt; Download the PDF Version of this Cheat Sheet &lt;a href="https://worldindev.ck.page/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#include-javascript"&gt;
  &lt;/a&gt;
  Include Javascript:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script type="text/javascript"&amp;gt;&amp;lt;/script&amp;gt;

// or Include it in an external file (this is a comment)
/* This is also another way you can insert comments,
Multiline normally */

&amp;lt;script src="myscript.js"&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;code&amp;gt;&amp;lt;/code&amp;gt;

// PS: Remember to sub to our newsletter for the Giveaway!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var myVariable = 22; //this can be a string or number. var is globally defined

let myVariable = 22; //this can be a string or number. let is block scoped

const myVariable = 22; //this can be a string or number. const is block scoped and can't be reassigned
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Variables in the block scope, which means those variables exist only within the corresponding block&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/js/js_variables.asp"&gt;JavaScript Variables - w3schools&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/devlorenzo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCohWvfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8B-BJEvg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571015/e3d4ff5f-e11d-4538-bb83-9d3ce3e9dfb9.gif" alt="devlorenzo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devlorenzo/js-hide-and-show-32og" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;JS: Finally discover how to Hide and Show elements&lt;/h2&gt;
      &lt;h3&gt;DevLorenzo ・ Feb 28 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codequality&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#data-types"&gt;
  &lt;/a&gt;
  Data Types:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//string
var string = 'ASCII text';
//int
var integer = 123456789;
//float
var float = 123.456;
//boolean, can be true or false
var t = true;
var f = false;
//undefined
var undef;//defaults to undefined
var undef = undefined;//not common, use null
//null
var nul = null;
//array
var arr = ['Hello','my','name','is','Dr.Hippo',123,null];
//object
var person = {'name':'John Smith','age':27};
//function
var fun = function(){
    return 42;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u2TT3Wir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tnspq17g3uocqimoe334.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u2TT3Wir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tnspq17g3uocqimoe334.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.c-sharpcorner.com/article/datatypes-in-javascript/"&gt;Source - Datatypes In JavaScript - c-sharpcorner.com&lt;/a&gt; &lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#operators"&gt;
  &lt;/a&gt;
  Operators
&lt;/h3&gt;

&lt;p&gt;Basic Operators&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+ — Addition
- — Subtraction
* — Multiplication
/ — Division
(...) — Grouping operator, operations within brackets are executed earlier than those outside
% — Modulus (remainder )
++ — Increment numbers
-- — Decrement numbers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/devlorenzo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCohWvfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8B-BJEvg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571015/e3d4ff5f-e11d-4538-bb83-9d3ce3e9dfb9.gif" alt="devlorenzo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devlorenzo/js-change-text-on-hover-3945" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;JS: The useful trick that allows you to change text on hover &lt;/h2&gt;
      &lt;h3&gt;DevLorenzo ・ Feb  4 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;Comparison Operators&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;== Equal to
=== Equal value and equal type
!= Not equal
!== Not equal value or not equal type
&amp;gt; Greater than
&amp;lt; Less than
&amp;gt;= Greater than or equal to
&amp;lt;= Less than or equal to
? Ternary operator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Logical Operators&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;amp;&amp;amp; Logical and
|| Logical or
! Logical not
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Bitwise Operators&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;amp; AND statement
| OR statement
~ NOT
^ XOR
&amp;lt;&amp;lt; Left shift
&amp;gt;&amp;gt; Right shift
&amp;gt;&amp;gt;&amp;gt; Zero fill right shift
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#loops"&gt;
  &lt;/a&gt;
  Loops
&lt;/h3&gt;

&lt;p&gt;for - loops through a block of code a number of times.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (statement 1; statement 2; statement 3) {
  // Coooode
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;for/in - loops through the properties of an object.&lt;br&gt;
for/of - loops through the values of an iterable object.&lt;/p&gt;

&lt;p&gt;while - loops through a block of code while a specified condition is true.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var i=0;
while (i &amp;lt; 10) {
    console.log(i);
    i++;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Break and Continue&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When you use break without a label, it terminates the innermost enclosing while, do-while, for, or switch immediately and transfers control to the following statement.&lt;br&gt;
When you use break with a label, it terminates the specified labeled statement.&lt;/p&gt;

&lt;p&gt;When you use continue without a label, it terminates the current iteration of the innermost enclosing while, do-while, or for statement and continues execution of the loop with the next iteration. In contrast to the break statement, continue does not terminate the execution of the loop entirely. In a while loop, it jumps back to the condition. In a for loop, it jumps to the increment-expression.&lt;br&gt;
When you use continue with a label, it applies to the looping statement identified with that label.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#break_statement"&gt;Source - Loops and iteration - MDN&lt;/a&gt;&lt;/p&gt;




&lt;div class="ltag__link"&gt;
  &lt;a href="/devlorenzo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCohWvfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8B-BJEvg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571015/e3d4ff5f-e11d-4538-bb83-9d3ce3e9dfb9.gif" alt="devlorenzo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devlorenzo/js-on-scroll-events-4232" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;JS: Make things happen OnScroll and create better interactive websites&lt;/h2&gt;
      &lt;h3&gt;DevLorenzo ・ Feb  7 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codequality&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#strings"&gt;
  &lt;/a&gt;
  Strings
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AQ3scLOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8e2qr70cnaopqss42w8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AQ3scLOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8e2qr70cnaopqss42w8.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/frugencefidel/10-javascript-string-methods-you-should-know-4l76"&gt;dev.to Article - 10 JavaScript string methods you should know - by @frugencefidel &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Escape characters&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;\' — Single quote
\" — Double quote
\\ — Backslash
\b — Backspace
\f — Form feed
\n — New line
\r — Carriage return
\t — Horizontal tabulator
\v — Vertical tabulator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#array-and-array-methods"&gt;
  &lt;/a&gt;
  Array and array methods
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pffZXDOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9s2uyc4ksif42rtm810r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pffZXDOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9s2uyc4ksif42rtm810r.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://morioh.com/p/3ba421a8a63d"&gt;Top 10 JavaScript Array Methods You Should Know - By Rachel Cole at morioh.com&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;concat(arr1,[...]) // Joins two or more arrays, and returns a copy of the joined arrays
copyWithin(target,[start],[end]) // Copies array elements within the array, to and from specified positions
entries() // Returns a key/value pair Array Iteration Object
every(function(currentval,[index],[arr]),[thisVal]) // Checks if every element in an array pass a test
fill(val,[start],[end]) // Fill the elements in an array with a static value
filter(function(currentval,[index],[arr]),[thisVal]) // Creates a new array with every element in an array that pass a test
find(function(currentval,[index],[arr]),[thisVal]) // Returns the value of the first element in an array that pass a test
findIndex(function(currentval,[index],[arr]),[thisVal]) // Returns the index of the first element in an array that pass a test
forEach(function(currentval,[index],[arr]),[thisVal]) // Calls a function for each array element
from(obj,[mapFunc],[thisVal]) // Creates an array from an object
includes(element,[start]) // Check if an array contains the specified element
indexOf(element,[start]) // Search the array for an element and returns its position
isArray(obj) // Checks whether an object is an array
join([seperator]) // Joins all elements of an array into a string
keys() // Returns a Array Iteration Object, containing the keys of the original array
lastIndexOf(element,[start]) // Search the array for an element, starting at the end, and returns its position
map(function(currentval,[index],[arr]),[thisVal]) // Creates a new array with the result of calling a function for each array element
pop() // Removes the last element of an array, and returns that element
push(item1,[...]) // Adds new elements to the end of an array, and returns the new length
reduce(function(total,currentval,[index],[arr]),[initVal]) // Reduce the values of an array to a single value (going left-to-right)
reduceRight(function(total,currentval,[index],[arr]),[initVal]) // Reduce the values of an array to a single value (going right-to-left)
reverse() // Reverses the order of the elements in an array
shift() // Removes the first element of an array, and returns that element
slice([start],[end]) // Selects a part of an array, and returns the new array
some(function(currentval,[index],[arr]),[thisVal]) // Checks if any of the elements in an array pass a test
sort([compareFunc]) // Sorts the elements of an array
splice(index,[quantity],[item1,...]) // Adds/Removes elements from an array
toString() // Converts an array to a string, and returns the result
unshift(item1,...) // Adds new elements to the beginning of an array, and returns the new length
valueOf() // Returns the primitive value of an array
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h3&gt;

&lt;p&gt;Syntax&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function name(parameter1, parameter2, parameter3) {
  // code to be executed
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Examples&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function myFunction(p1, p2) {
  return p1 * p2;   // The function returns the product of p1 and p2
}

let x = myFunction(4, 3);   // Function is called, return value will end up in x

function myFunction(a, b) {
  return a * b;             // Function returns the product of a and b
}

// Convert Fahrenheit to Celsius:
function toCelsius(fahrenheit) {
  return (5/9) * (fahrenheit-32);
}
document.getElementById("demo").innerHTML = toCelsius(77);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://www.w3schools.com/js/js_functions.asp"&gt;Source - JavaScript Functions - w3schools&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#maths"&gt;
  &lt;/a&gt;
  Maths
&lt;/h3&gt;

&lt;p&gt;Methods&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T8U_oeM9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fnz754dotv0ki73p5sa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T8U_oeM9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fnz754dotv0ki73p5sa.png" alt="carbon (1)"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/devlorenzo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCohWvfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8B-BJEvg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571015/e3d4ff5f-e11d-4538-bb83-9d3ce3e9dfb9.gif" alt="devlorenzo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/worldindev/finally-how-to-understand-math-awesome-resource-list-4end" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Finally - How to understand math - Awesome resource list 🚀&lt;/h2&gt;
      &lt;h3&gt;DevLorenzo ・ Mar 30 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;Properties&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;E — Euler’s number
LN2 — The natural logarithm of 2
LN10 — Natural logarithm of 10
LOG2E — Base 2 logarithm of E
LOG10E — Base 10 logarithm of E
PI — The number PI
SQRT1_2 — Square root of 1/2
SQRT2 — The square root of 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#date"&gt;
  &lt;/a&gt;
  Date
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/devlorenzo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCohWvfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8B-BJEvg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571015/e3d4ff5f-e11d-4538-bb83-9d3ce3e9dfb9.gif" alt="devlorenzo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devlorenzo/js-how-to-get-current-date-1km" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;JS: How to get current date and make your sites more up to date&lt;/h2&gt;
      &lt;h3&gt;DevLorenzo ・ Feb 12 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codequality&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;Javascript date objects allow us to work with date and time. We can retrieve information for it by creating a date and assign and assigning it to a variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let d = new Date(); // We usually call it d or date
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Date object provide us a lot of different methods, the most used are year, month, day, hours, minutes, seconds, and milliseconds. Remember that you always have to precise the entire year (1950 and not only 50), that we always start with 0 (so, for example, December is the eleventh, a minute is composed of 59 seconds...) and that day is in a 24 hours format. &lt;/p&gt;

&lt;p&gt;You can then retrieve from date a lot of differents info:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;d.getDate() Returns the day of the month (from 1-31)
d.getDay()  Returns the day of the week (from 0-6)
d.getFullYear() Returns the year
d.getHours()    Returns the hour (from 0-23)
d.getMilliseconds() Returns the milliseconds (from 0-999)
d.getMinutes()  Returns the minutes (from 0-59)
d.getMonth()    Returns the month (from 0-11)
d.getSeconds()  Returns the seconds (from 0-59)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We can also set things... &lt;a href="https://dev.to/devlorenzo/js-how-to-get-current-date-1km"&gt;Open the article&lt;/a&gt; to continue reading&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#events"&gt;
  &lt;/a&gt;
  Events
&lt;/h3&gt;

&lt;p&gt;
  Mouse
  &lt;br&gt;
onclick - The event occurs when the user clicks on an element&lt;br&gt;
oncontextmenu - User right-clicks on an element to open a context menu&lt;br&gt;
ondblclick - The user double-clicks on an element&lt;br&gt;
onmousedown - User presses a mouse button over an element&lt;br&gt;
onmouseenter - The pointer moves onto an element&lt;br&gt;
onmouseleave - Pointer moves out of an element&lt;br&gt;
onmousemove - The pointer is moving while it is over an element&lt;br&gt;
onmouseover - When the pointer is moved onto an element or one of its children&lt;br&gt;
onmouseout - User moves the mouse pointer out of an element or one of its children&lt;br&gt;
onmouseup - The user releases a mouse button while over an element&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  Keyboard
  &lt;br&gt;
onkeydown - When the user is pressing a key down&lt;br&gt;
onkeypress - The moment the user starts pressing a key&lt;br&gt;
onkeyup - The user releases a key&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  Frame
  &lt;br&gt;
onabort - The loading of a media is aborted&lt;br&gt;
onbeforeunload - Event occurs before the document is about to be unloaded&lt;br&gt;
onerror - An error occurs while loading an external file&lt;br&gt;
onhashchange - There have been changes to the anchor part of a URL&lt;br&gt;
onload - When an object has loaded&lt;br&gt;
onpagehide - The user navigates away from a webpage&lt;br&gt;
onpageshow - When the user navigates to a webpage&lt;br&gt;
onresize - The document view is resized&lt;br&gt;
onscroll - An element’s scrollbar is being scrolled&lt;br&gt;
onunload - Event occurs when a page has unloaded&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  Form
  &lt;br&gt;
onblur - When an element loses focus&lt;br&gt;
onchange - The content of a form element changes (for , and )&lt;br&gt;
onfocus - An element gets focus&lt;br&gt;
onfocusin - When an element is about to get focus&lt;br&gt;
onfocusout - The element is about to lose focus&lt;br&gt;
oninput - User input on an element&lt;br&gt;
oninvalid - An element is invalid&lt;br&gt;
onreset - A form is reset&lt;br&gt;
onsearch - The user writes something in a search field (for )&lt;br&gt;
onselect - The user selects some text (for  and )&lt;br&gt;
onsubmit - A form is submitted&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  Drag
  &lt;br&gt;
ondrag - An element is dragged&lt;br&gt;
ondragend - The user has finished dragging the element&lt;br&gt;
ondragenter - The dragged element enters a drop target&lt;br&gt;
ondragleave - A dragged element leaves the drop target&lt;br&gt;
ondragover - The dragged element is on top of the drop target&lt;br&gt;
ondragstart - User starts to drag an element&lt;br&gt;
ondrop - Dragged element is dropped on the drop target&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  Clipboard
  &lt;br&gt;
oncopy - User copies the content of an element&lt;br&gt;
oncut - The user cuts an element’s content&lt;br&gt;
onpaste - A user pastes content in an element&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  Media
  &lt;br&gt;
onabort - Media loading is aborted&lt;br&gt;
oncanplay - The browser can start playing media (e.g. a file has buffered enough)&lt;br&gt;
oncanplaythrough - When browser can play through media without stopping&lt;br&gt;
ondurationchange - The duration of the media changes&lt;br&gt;
onended - The media has reached its end&lt;br&gt;
onerror - Happens when an error occurs while loading an external file&lt;br&gt;
onloadeddata - Media data is loaded&lt;br&gt;
onloadedmetadata - Meta Metadata (like dimensions and duration) are loaded&lt;br&gt;
onloadstart - Browser starts looking for specified media&lt;br&gt;
onpause - Media is paused either by the user or automatically&lt;br&gt;
onplay - The media has been started or is no longer paused&lt;br&gt;
onplaying - Media is playing after having been paused or stopped for buffering&lt;br&gt;
onprogress - Browser is in the process of downloading the media&lt;br&gt;
onratechange - The playing speed of the media changes&lt;br&gt;
onseeked - User is finished moving/skipping to a new position in the media&lt;br&gt;
onseeking - The user starts moving/skipping&lt;br&gt;
installed - The browser is trying to load the media but it is not available&lt;br&gt;
onsuspend - Browser is intentionally not loading media&lt;br&gt;
ontimeupdate - The playing position has changed (e.g. because of fast forward)&lt;br&gt;
onvolumechange - Media volume has changed (including mute)&lt;br&gt;
onwaiting - Media paused but expected to resume (for example, buffering)&lt;br&gt;
animationend - A CSS animation is complete&lt;br&gt;
animationiteration - CSS animation is repeated&lt;br&gt;
animationstart - CSS animation has started&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  Other
  &lt;br&gt;
transitionend - Fired when a CSS transition has completed&lt;br&gt;
onmessage - A message is received through the event source&lt;br&gt;
onoffline - Browser starts to work offline&lt;br&gt;
ononline - The browser starts to work online&lt;br&gt;
onpopstate - When the window’s history changes&lt;br&gt;
onshow - A  element is shown as a context menu&lt;br&gt;
onstorage - A Web Storage area is updated&lt;br&gt;
ontoggle - The user opens or closes the  element&lt;br&gt;
onwheel - Mouse wheel rolls up or down over an element&lt;br&gt;
ontouchcancel - Screen touch is interrupted&lt;br&gt;
ontouchend - User finger is removed from a touch screen&lt;br&gt;
ontouchmove - A finger is dragged across the screen&lt;br&gt;
ontouchstart - Finger is placed on touch screen&lt;br&gt;




&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#asynchronous-js-and-error-handling"&gt;
  &lt;/a&gt;
  Asynchronous JS and Error handling
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/devlorenzo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCohWvfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8B-BJEvg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571015/e3d4ff5f-e11d-4538-bb83-9d3ce3e9dfb9.gif" alt="devlorenzo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devlorenzo/js-settimeout-and-setinterval-1pbf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Asynchronous JS: Finally discover how to use SetTimeout and SetInterval&lt;/h2&gt;
      &lt;h3&gt;DevLorenzo ・ Feb  7 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codequality&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;SetTimeout will wait foo seconds and then execute the action. SetInterval will execute this same action every foo seconds.&lt;br&gt;
Both can be inline or multiline, I recommend using multiline 99% of the time. It's important to notice that they work in milliseconds. &lt;/p&gt;

&lt;p&gt;SetTimeout:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setTimeout(function(){
    alert("Hello World!"); 
}, 2000); // 2 seconds 

setTimeout(function(){ alert("The fifth episode of the series"); }, 3000);
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;SetInterval:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setInterval(function() {
  alert("I want to show you another Javascript trick:");
}, 1000); 

setInterval(function() {alert("How to work with SetTimeout and SetInterval");}, 1000); 
&lt;/code&gt;&lt;/pre&gt;



&lt;ul&gt;
&lt;li&gt;If you want to remove the first delay you have to add code a first time out of the function. I recommend you save this code in a separate function you can call whenever you need. &lt;a href="https://dev.to/devlorenzo/js-settimeout-and-setinterval-1pbf"&gt;Continue reading here&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/devlorenzo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCohWvfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8B-BJEvg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571015/e3d4ff5f-e11d-4538-bb83-9d3ce3e9dfb9.gif" alt="devlorenzo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devlorenzo/js-settimeout-and-setinterval-1pbf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Asynchronous JS: Finally discover how to use SetTimeout and SetInterval&lt;/h2&gt;
      &lt;h3&gt;DevLorenzo ・ Feb  7 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codequality&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;First, it's important to notice that a majority of backend actions have an unknown result, we don't know if it will work when we write our code. So we always have to write two different codes, one if the action works, another if the action results in an error. This is exactly how a try/catch work, we submit a code to try, if it works code continues, if it doesn't we catch the error (avoiding the app crashing) and run another code. This is a very common thing we don't only use in web development (also in Android app development with java for example). &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#try-catch"&gt;
  &lt;/a&gt;
  Try / Catch
&lt;/h4&gt;



&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  try {
  // Try to run this code 
 // For example make a request to the server
}
catch(e) {
  console.log(e)
  // if any error, Code throws the error
 // For example display an error message to the user
}
&lt;/code&gt;&lt;/pre&gt;



&lt;h4&gt;
  &lt;a href="#promises"&gt;
  &lt;/a&gt;
  Promises
&lt;/h4&gt;

&lt;p&gt;The big problem with try/catch is that when you have to nest it (and you will have), it's really messy and difficult to read and write. So Javascript support promises with async functions:&lt;/p&gt;

&lt;p&gt;Syntax: new Promise (executor)&lt;br&gt;
executor= (accept, reject) =&amp;gt;{}&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var asyncronus_function = (number)=&amp;gt;
        {
            return new Promise( (accept, reject)=&amp;gt;
            {
            })
        } 
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;This function returns a promise object.&lt;br&gt;
If function end well we return a accept(), otherwise reject()&lt;br&gt;
&lt;a href="https://dev.to/devlorenzo/js-how-to-handle-errors-fi6"&gt;More here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back to Top - 🔝&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#projects-ideas-to-become-a-javascript-master"&gt;
  &lt;/a&gt;
  Projects ideas to become a javascript master &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/devlorenzo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCohWvfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8B-BJEvg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571015/e3d4ff5f-e11d-4538-bb83-9d3ce3e9dfb9.gif" alt="devlorenzo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/worldindev/10-projects-to-become-a-javascript-master-giveaway-2o4k" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Projects ideas to become a javascript master 🚀 Resource compilation 💥 + Giveaway⚡&lt;/h2&gt;
      &lt;h3&gt;DevLorenzo ・ Apr 10 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
a) &lt;a href="https://dev.to/worldindev/10-projects-to-become-a-javascript-master-giveaway-2o4k"&gt;General (for beginners)&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;Converters&lt;/li&gt;
&lt;li&gt;Word Counter&lt;/li&gt;
&lt;li&gt;Timer / Clock&lt;/li&gt;
&lt;li&gt;Random password generator&lt;/li&gt;
&lt;li&gt;Calculator&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;b) &lt;a href="https://dev.to/worldindev/10-projects-to-become-a-javascript-master-giveaway-2o4k"&gt;Games&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Guess the number&lt;/li&gt;
&lt;li&gt;Math time!&lt;/li&gt;
&lt;li&gt;Other Games&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;c) &lt;a href="https://dev.to/worldindev/10-projects-to-become-a-javascript-master-giveaway-2o4k"&gt;Social &amp;amp; Websites&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Log-in, Sign-up&lt;/li&gt;
&lt;li&gt;Filter&lt;/li&gt;
&lt;li&gt;To-Do List&lt;/li&gt;
&lt;li&gt;Social&lt;/li&gt;
&lt;li&gt;Portfolio&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://dev.to/worldindev/10-projects-to-become-a-javascript-master-giveaway-2o4k"&gt;Open the post&lt;/a&gt; for more info about each project!&lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back to Top - 🔝&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#other-resources"&gt;
  &lt;/a&gt;
  Other resources:&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;
  Table of content
  &lt;ul&gt;
&lt;li&gt;&lt;a href="#delta"&gt;My cheat Sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#projects"&gt;Projects ideas to become a javascript master &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#alpha"&gt;Other resources&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#1da"&gt;Complete Javascript cheat sheets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#1db"&gt;JS promises&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#1dc"&gt;JS Arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#1dd"&gt;JS loops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#1de"&gt;Preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#1df1"&gt;CoffeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#1df2"&gt;EJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#1df3"&gt;Babel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#frameworks"&gt;JS Frameworks &amp;amp; Libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2f"&gt;Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2g"&gt;Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2g+"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2g+++"&gt;JQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2g++"&gt;Others&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#2c"&gt;Node&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;





&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#complete-js-cheat-sheets"&gt;
  &lt;/a&gt;
  Complete JS cheat sheets:&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cIHnd6ay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4flymw2rjnrivyz5xrq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cIHnd6ay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4flymw2rjnrivyz5xrq.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://devhints.io/es6"&gt;By dev hints&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kyG8sALm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b830syxoi2lo4qtlv5pa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kyG8sALm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b830syxoi2lo4qtlv5pa.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Incredible resource --&amp;gt; &lt;a href="https://websitesetup.org/javascript-cheat-sheet/"&gt;By website setup&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://websitesetup.org/wp-content/uploads/2020/09/Javascript-Cheat-Sheet.pdf"&gt;PDF Version&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Two Others:&lt;br&gt;
&lt;a href="https://overapi.com/javascript"&gt;By overapi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://htmlcheatsheet.com/js/"&gt;By HTML cheat sheet.com - Interactive&lt;/a&gt;&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#js-promises-asynchronous-js"&gt;
  &lt;/a&gt;
  JS promises (Asynchronous JS):&lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://dev.to/devlorenzo/js-how-to-handle-errors-fi6"&gt;Dev.to article&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/devlorenzo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCohWvfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8B-BJEvg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571015/e3d4ff5f-e11d-4538-bb83-9d3ce3e9dfb9.gif" alt="devlorenzo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devlorenzo/js-how-to-handle-errors-fi6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Asynchronous JS: Working with try/catch and promises&lt;/h2&gt;
      &lt;h3&gt;DevLorenzo ・ Feb 12 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codequality&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://dev.to/devlorenzo/js-settimeout-and-setinterval-1pbf"&gt;Dev.to article&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/devlorenzo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCohWvfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8B-BJEvg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571015/e3d4ff5f-e11d-4538-bb83-9d3ce3e9dfb9.gif" alt="devlorenzo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devlorenzo/js-settimeout-and-setinterval-1pbf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Asynchronous JS: Finally discover how to use SetTimeout and SetInterval&lt;/h2&gt;
      &lt;h3&gt;DevLorenzo ・ Feb  7 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codequality&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U7S1KhAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixczevn204yxjud70pb1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U7S1KhAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixczevn204yxjud70pb1.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.codecademy.com/learn/introduction-to-javascript/modules/javascript-promises/cheatsheet"&gt;By codecadamy&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#js-arrays"&gt;
  &lt;/a&gt;
  JS Arrays: &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vZVH9P4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j334aq9w8eci9ickpl0t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vZVH9P4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j334aq9w8eci9ickpl0t.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://devhints.io/js-array"&gt;By dev hints&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#js-loops"&gt;
  &lt;/a&gt;
  JS Loops:&lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K2U-M2vh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6jhf0fjiwwynoucb0qbr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K2U-M2vh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6jhf0fjiwwynoucb0qbr.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.codecademy.com/learn/introduction-to-javascript/modules/learn-javascript-loops/cheatsheet"&gt;By codecademy&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#js-preprocessor"&gt;
  &lt;/a&gt;
  JS preprocessor:&lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#coffeescript"&gt;
  &lt;/a&gt;
  CoffeeScript:&lt;a&gt;&lt;/a&gt;
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://coffeescript.org/"&gt;CoffeeScript website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OW5I-Q4s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99f33sq8sx5st9a9chc5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OW5I-Q4s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99f33sq8sx5st9a9chc5.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Others:&lt;br&gt;
&lt;a href="https://karloespiritu.github.io/cheatsheets/coffeescript/"&gt;At karloeaspirity.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://autotelicum.github.io/Smooth-CoffeeScript/CoffeeScript%20Quick%20Ref.pdf"&gt;Quick reference - By autotelicum - PDF Version&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://awsm-tools.com/code/coffee2js"&gt;JS to CoffeeScript&lt;/a&gt;&lt;/p&gt;


&lt;h5&gt;
  &lt;a href="#ejs"&gt;
  &lt;/a&gt;
  EJS:&lt;a&gt;&lt;/a&gt;
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://ejs.co/"&gt;EJS website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ejs.co/#docs"&gt;EJS docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IaF8Klbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgan5wm4t3czx670ofu8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IaF8Klbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgan5wm4t3czx670ofu8.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://onecompiler.com/cheatsheets/ejs-embedded-javascript-templates"&gt;At one compiler&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/cmugla/daf2ab86937b9983c30f3724914644da"&gt;Or at GitHub&lt;/a&gt;&lt;/p&gt;


&lt;h5&gt;
  &lt;a href="#babel"&gt;
  &lt;/a&gt;
  Babel:&lt;a&gt;&lt;/a&gt;
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://babeljs.io/"&gt;Babel website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://babeljs.io/docs/en/"&gt;Babel docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fNORwVIs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zfj0wkggbwq0l1y27ynp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fNORwVIs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zfj0wkggbwq0l1y27ynp.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://karloespiritu.github.io/cheatsheets/babel/"&gt;By karloespiritu.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@housecor/babel-6-cheat-sheet-7344f7936f2d"&gt;Or at Medium&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#javascriptbased-frameworks-amp-libraries"&gt;
  &lt;/a&gt;
  JavaScript-based Frameworks &amp;amp; Libraries:&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.codeinwp.com/blog/angular-vs-vue-vs-react/"&gt;Article Angular vs vue vs react at codeinwp.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m0-jD6Vh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qzrnkchpttnat5dce8h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m0-jD6Vh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qzrnkchpttnat5dce8h.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hackr.io/blog/best-javascript-frameworks"&gt;Best Javascript Frameworks - article at hackr.io&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#angular"&gt;
  &lt;/a&gt;
  Angular&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Wfw-AXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fuapemkwx3y6g45wvnt4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Wfw-AXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fuapemkwx3y6g45wvnt4.png" alt="image"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://angular.io/guide/cheatsheet"&gt;By angular.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ETZ-CjlL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgb8ykddysmlydjnj262.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ETZ-CjlL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgb8ykddysmlydjnj262.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://devhints.io/angularjs"&gt;By dev hints&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#vue"&gt;
  &lt;/a&gt;
  Vue&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tXNgi8L4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfrigdgnfc3o06ozqqsp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tXNgi8L4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfrigdgnfc3o06ozqqsp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.vuemastery.com/pdf/Vue-Essentials-Cheat-Sheet.pdf"&gt;By vue mastery&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KV9NoII1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/alpgv7qgqrbzviy2brxn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KV9NoII1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/alpgv7qgqrbzviy2brxn.png" alt="image"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://devhints.io/vue"&gt;By dev hints&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marozed.com/vue-cheatsheet"&gt;Other - By marozed&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8WvgZYZy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekeqhraf5y8l5e6ixec3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8WvgZYZy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekeqhraf5y8l5e6ixec3.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://devhints.io/react"&gt;By dev hints&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Others:&lt;br&gt;
&lt;a href="https://reactcheatsheet.com/"&gt;By react cheat sheet.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/typescript-cheatsheets/react"&gt;At GitHub: React + Typescript cheat sheet&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#jquery"&gt;
  &lt;/a&gt;
  JQuery&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/joelrojo/c54765a748cd87a395a2b865359d6add"&gt;AJAX intro + cheat sheet at GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nsX4r0vy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2ry4ka9vndpmq1bqx8r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nsX4r0vy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2ry4ka9vndpmq1bqx8r.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://oscarotero.com/jquery/"&gt;By ascarotero.com&lt;/a&gt; - Really well done&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--POmYQCqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5l5zoteatxssinlbi5jx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--POmYQCqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5l5zoteatxssinlbi5jx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://websitesetup.org/wp-content/uploads/2017/01/wsu-jquery-cheat-sheet.pdf"&gt;By Website Setup - PDF Version&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OED2-rif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrvizdvoulfumnpun78e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OED2-rif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrvizdvoulfumnpun78e.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://makeawebsitehub.com/jquery-mega-cheat-sheet/"&gt;By make website hub&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://makeawebsitehub.com/wp-content/uploads/2015/09/jquery-mega-cheat-sheet-Printable.pdf"&gt;PDF Version&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lshz3jkN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gir05mvl85rpzzy1k053.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lshz3jkN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gir05mvl85rpzzy1k053.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.templatetoaster.com/jquery-cheat-sheet/"&gt;Article about top 10 jquery cheat sheets&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://overapi.com/jquery"&gt;Or by over API&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#others"&gt;
  &lt;/a&gt;
  Others&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;h5&gt;
  &lt;a href="#emberjs"&gt;
  &lt;/a&gt;
  Ember.js:
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J_bJOIA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96rx2e1qy125my1f4x07.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J_bJOIA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96rx2e1qy125my1f4x07.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.emberjs.com/"&gt;Website&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#meteor"&gt;
  &lt;/a&gt;
  Meteor:
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EAM0Zkz7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuvus5pmet1og0aw6emy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EAM0Zkz7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuvus5pmet1og0aw6emy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.meteor.com/"&gt;Website&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#mithril"&gt;
  &lt;/a&gt;
  Mithril:
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aE_8Txne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zgxppfd0ma52qy9nuk1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aE_8Txne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zgxppfd0ma52qy9nuk1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mithril.js.org/"&gt;Website&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#node"&gt;
  &lt;/a&gt;
  &lt;a href="#2c"&gt;Node&lt;/a&gt;
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YrQxN6ss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qf4hvrcqmplrdjmbdqyd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YrQxN6ss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qf4hvrcqmplrdjmbdqyd.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nodejs.org/en/"&gt;Website&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#other-resources"&gt;
  &lt;/a&gt;
  Other Resources: &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#advanced-topics"&gt;
  &lt;/a&gt;
  Advanced Topics
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;How Browsers Work: Behind the scenes of modern web browsers&lt;/li&gt;
&lt;li&gt;Learning Advanced JavaScript by John Resig&lt;/li&gt;
&lt;li&gt;JavaScript Advanced Tutorial by HTML Dog&lt;/li&gt;
&lt;li&gt;WebGL Fundamentals&lt;/li&gt;
&lt;li&gt;Learning JavaScript Design Patterns by Addy Osmani&lt;/li&gt;
&lt;li&gt;Intro to Computer Science in JavaScript&lt;/li&gt;
&lt;li&gt;Immutable data structures for JavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#librariesframeworkstools"&gt;
  &lt;/a&gt;
  Libraries/Frameworks/Tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Introduction to React video&lt;/li&gt;
&lt;li&gt;React Interview Questions&lt;/li&gt;
&lt;li&gt;JavaScript Promises: A Tutorial with Examples&lt;/li&gt;
&lt;li&gt;Khan Academy: Making webpages interactive with jQuery&lt;/li&gt;
&lt;li&gt;A Beginner’s Guide To Grunt: Build Tool for JavaScript&lt;/li&gt;
&lt;li&gt;Getting Started with Underscore.js&lt;/li&gt;
&lt;li&gt;jQuery Course by Code School&lt;/li&gt;
&lt;li&gt;Thinkster.io Courses on React and Angular&lt;/li&gt;
&lt;li&gt;The Languages And Frameworks You Should Learn In 2016&lt;/li&gt;
&lt;li&gt;ES6 Tools List on GitHub&lt;/li&gt;
&lt;li&gt;Getting Started with Redux&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#serverside-javascript"&gt;
  &lt;/a&gt;
  Server-side JavaScript
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Real-time Web with Node.js Course by Code School&lt;/li&gt;
&lt;li&gt;NodeSchool Course&lt;/li&gt;
&lt;li&gt;Node.js First Look on Lynda&lt;/li&gt;
&lt;li&gt;All about NodeJS Course on Udemy&lt;/li&gt;
&lt;li&gt;Server-side Development with NodeJS Course on Coursera&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://medium.com/coderbyte/50-resources-to-help-you-start-learning-javascript-in-2017-4c70b222a3b9"&gt;Source (with links) - 50 resources to help you start learning JavaScript - By Daniel Borowski - At Medium&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Read also:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/garvitmotwani" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a_j3ZA-i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--sbZDVkQ4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/370225/6b6fe3de-e499-475b-a235-622dc13de202.jpg" alt="garvitmotwani image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/garvitmotwani/8-javascript-tips-tricks-that-no-one-teaches-24g1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;8 JavaScript Tips &amp;amp; Tricks That No One Teaches 🚀 + Giveaway&lt;/h2&gt;
      &lt;h3&gt;Garvit Motwani ・ Apr  6 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#es6&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Thanks for reading and Happy coding ❤&lt;/p&gt;




&lt;p&gt;Full Compilation of cheat sheets:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/devlorenzo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCohWvfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8B-BJEvg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571015/e3d4ff5f-e11d-4538-bb83-9d3ce3e9dfb9.gif" alt="devlorenzo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/worldindev/the-ultimate-compilation-of-cheat-sheets-100-268g" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The ultimate Cheat sheets compilation (200+) - 🔥🎁 / Roadmap to dev 🚀&lt;/h2&gt;
      &lt;h3&gt;DevLorenzo ・ Mar  2 ・ 17 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#giveaway"&gt;
  &lt;/a&gt;
  ⚡Giveaway ⚡
&lt;/h2&gt;

&lt;p&gt;We are giving away any course you need on Udemy. Any price any course.&lt;br&gt;
Steps to enter the giveaway&lt;br&gt;
--&amp;gt; React to this post&lt;br&gt;
--&amp;gt; &lt;a href="https://worldindev.ck.page/"&gt;Subscribe to our Newsletter&lt;/a&gt; &amp;lt;-- Very important&lt;br&gt;
--&amp;gt; &lt;a href="https://twitter.com/DevLorenzo1"&gt;Follow me on Twitter&lt;/a&gt; &amp;lt;-- x2 Chances of winning&lt;/p&gt;

&lt;p&gt;The winner will be announced on May 1, Via Twitter&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#subscribe-to-my-newsletter"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://worldindev.ck.page/"&gt;Subscribe to my Newsletter!&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The PDF version of this article!!!&lt;/li&gt;
&lt;li&gt;Monday: Weekly digeeeeeests!!!&lt;/li&gt;
&lt;li&gt;Wednesday: Discussions and dev insights - We debate around developer lifes - Examples: The importance of coffee behind development / If you weren't a dev, you'd be a...​&lt;/li&gt;
&lt;li&gt;Gifts, lots of 🎁. We send cheat sheets, coding advice, productivity tips, and many more!&lt;/li&gt;
&lt;li&gt;That's --&amp;gt; free &amp;lt;-- and you help me!&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;PS: It took me around 10 hours to complete the article - So please remember the &lt;strong&gt;like ❤️&lt;/strong&gt; and &lt;strong&gt;super like 🦄&lt;/strong&gt; - Let's reach the top of the month this time 🚀&lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back to Top - 🔝&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
