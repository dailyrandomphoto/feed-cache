<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>INTRODUCTION TO PYTHON</title>
      <author>Naftal Rainer</author>
      <pubDate>Sat, 24 Jul 2021 13:35:48 +0000</pubDate>
      <link>https://dev.to/rainers/introduction-to-python-456f</link>
      <guid>https://dev.to/rainers/introduction-to-python-456f</guid>
      <description>&lt;p&gt;Getting started in coding can be tough. Choosing which language to learn can as well be tough. Staying true and consistent to your language of choice can equally be tough. But despite all these tough conditions it's only passion that can drive us through.&lt;br&gt;
In a world of over 500 programming languages, I find python the most interesting due it's simplicity and versatility. It's wide scope of applications is even more meritorious. In Python programming language, you will find that it can be easier than ever to learn about coding and to even read it like a professional.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brief History&lt;/strong&gt;&lt;br&gt;
Python is an interpreted high-level general-purpose programming language developed in the late 1980s Guido van Rossum and released for public in 1991.&lt;br&gt;
Its name was derived from the BBC TV show Monty Python's Flying Circus and has so far had release of various streams of versions from the early version 2.0, version 3.0 up to the latest version 3.9.6 and it can be downloaded from &lt;a href="http://www.python.org"&gt;www.python.org&lt;/a&gt; Mac OS X systems as well as those with Ubuntu will already have Python preloaded. You will simply need to download a text interpreter to get started.&lt;br&gt;
It is quite different from other programming languages in its syntax and semantics which focuses on code simplicity and readability. This is made possible by its well-defined English keywords and minimal punctuation dependence. For example, python uses whitespace indentation for delimiting code blocks instead of curly brackets and semicolons aren't required for statement termination unlike in c and c++ amongs others.&lt;br&gt;
In general, python is kept much simpler and you may find it is easier to read through the lines and see what you are doing.&lt;br&gt;
Python programs are written in files having a .py filename extension which is supported by various operating systems e.g. Windows, Linux/UNIX, macOS and more.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#desirable-python-features-are"&gt;
  &lt;/a&gt;
  Desirable Python features are:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Python is really interactive&lt;/strong&gt;. This makes it easier for testing the functionality of a program. This may be done by modularization - extracting out small bits of code and testing to see if they work. You can also bundle it with a development environment called IDLE.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python has numerous libraries&lt;/strong&gt;. This widens a programmer’s scope enabling him/her to work with other programming tools required for different fields such as web development, data science, machine learning e.t.c. to enable different functionalities e.g. connecting with web servers. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python is platform independent&lt;/strong&gt;. Python programs can be run on any unit including Unix, Linux, Windows, and Mac OS X.&lt;br&gt;
Python is extensible. It is easy to extend into other modules like C or C++  and write snippets to perform various functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python is open Source&lt;/strong&gt;. The product is free to download, use, make modifications and redistribute. It is under an open source license so others are able to use it&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Easy to debug&lt;/strong&gt;. Errors can be caught quickly since data types are dynamically typed, when you mix types together that don’t match, it will raise an exception for you to notice. You can group the codes into packages and modules if needed. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#applications-of-python"&gt;
  &lt;/a&gt;
  Applications of python
&lt;/h3&gt;

&lt;p&gt;Python has various uses across applications, platforms, and services as discussed below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Web and Internet Development&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LhP46VoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8x2rrx0cpluw5ipape8.png"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Web development is one of the areas where python shines as it offers numerous Frameworks such as Django and Pyramid,Micro-frameworks such as Flask and Bottle and Advanced content management systems such as Plone and django CMS. These frameworks which enhances functionality and implementation have been used to power some of the world’s most popular sites such as Spotify, Mozilla, Reddit, the Washington Post and Yelp.&lt;/p&gt;

&lt;p&gt;Python's standard library supports many Internet protocols:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;HTML and XML
2.JSON&lt;/li&gt;
&lt;li&gt;E-mail processing.&lt;/li&gt;
&lt;li&gt;Support for FTP, IMAP, and other Internet protocols.&lt;/li&gt;
&lt;li&gt;Easy-to-use socket interface.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Artificial Intelligence&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wAT6iPmz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qjdtub0f6n4c6yjwgxr.png"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python contains some of the top libraries for machine learning and artificial intelligence which a whole new approach to problem-solving.&lt;br&gt;
Python for machine learning development can run on any platform including Windows, MacOS, Linux, Unix, and many others. this saves time and money for tests on various platforms and makes the overall process more simple and convenient.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Automation&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MwaIHYUx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7oqs829fq07kipzou8i.png"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python has range of libraries, tools, and frameworks available to bolster your programming efforts in task automation e.g. selenium , smtplib library, beautiful soup etc. which automation efforts simpler and more intuitive.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;IoT&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I09r__MU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyuw0loumub7jq5ua7nu.png"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python is scalable, expandable, portable, and embeddable. This makes Python system-independent and allows it to accommodate multiple single board computers, irrespective of the operating system or architecture.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Game Development.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scientific and Numeric Applications.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Software Development.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data science.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python is capable of handling almost any development requirement&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#getting-started-with-python"&gt;
  &lt;/a&gt;
  Getting Started with Python
&lt;/h3&gt;

&lt;p&gt;After understanding some of the benefits of python, it's time to get started with it. In order to learn some of the great steps that are needed to create a python program, we need to set up the environment&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installing Python:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The installation procedure involves downloading the official Python .exe installer and running it on your system&lt;br&gt;
&lt;a href="https://www.python.org/downloads/"&gt;https://www.python.org/downloads/&lt;/a&gt;. For windows users, Select a link to download either the Windows x86-64 executable installer or Windows x86 executable installer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add python to path variables:&lt;/strong&gt;&lt;br&gt;
Setting up the Python path to system variables alleviates the need for using full paths. It instructs Windows to look through all the PATH folders for “python” and find the install folder that contains the python.exe file.&lt;br&gt;
When running the installer, select the Install launcher for all users and Add Python 3.7(or the version of your choice) to PATH checkboxes which places the interpreter in the execution path automatically.&lt;br&gt;
If your version of the Python installer does not include the Add Python to PATH checkbox or if you have not selected that option, then you have to do it manually by following the steps bellow.&lt;/p&gt;

&lt;p&gt;1.Go to control panel.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;open the System Properties window.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Navigate to the Advanced tab and select Environment Variables.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under System Variables, find and select the Path variable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click Edit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the Variable value field. Add the path to the &lt;br&gt;
python.exe file preceded with a semicolon&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click OK and close all windows.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By setting this up, you can execute Python scripts like this: &lt;strong&gt;Python script.py&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Instead of this: &lt;strong&gt;C:/Python34/Python script.py&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For more information check the site below&lt;br&gt;
&lt;a href="https://www.educative.io/edpresso/how-to-add-python-to-path-variable-in-windows"&gt;https://www.educative.io/edpresso/how-to-add-python-to-path-variable-in-windows&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Verify if Python Was Installed On Windows&lt;/strong&gt;&lt;br&gt;
Navigate to the directory in which Python was installed on the system. For example if it is C:\Users\Username\AppData\Local\Programs\Python\Python3.7.&lt;br&gt;
Double-click python.exe.&lt;br&gt;
The output should be similar to what you can see below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o_fKIRGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cm5q78hy9f5xjzooijun.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o_fKIRGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cm5q78hy9f5xjzooijun.jpg" alt="CMD Output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install Text Editor:&lt;/strong&gt;&lt;br&gt;
A code editor is a tool that is used to write and edit code. They are usually lightweight and can be great for learning especially for a beginner.&lt;/p&gt;

&lt;p&gt;1.) Visual Studio Code&lt;br&gt;
Visual Studio Code (VS Code) is a free and open-source IDE created by Microsoft that can be used for Python development.&lt;br&gt;
&lt;a href="https://code.visualstudio.com/download"&gt;https://code.visualstudio.com/download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.) Sublime Text&lt;br&gt;
Sublime Text is a popular code editor that supports many languages including Python.&lt;br&gt;
&lt;a href="https://www.sublimetext.com/download"&gt;https://www.sublimetext.com/download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.) Atom&lt;br&gt;
Atom is a highly customizable open-source code editor developed by Github that can be used for Python development &lt;br&gt;
&lt;a href="https://atom.io/"&gt;https://atom.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.) Thonny&lt;br&gt;
Thonny is a simple UI Python dedicated IDE that comes with Python 3 built-in. Once you install it, you can start writing Python code&lt;br&gt;
&lt;a href="https://thonny.org/"&gt;https://thonny.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5.) Pycharm&lt;br&gt;
PyCharm is a Jetbrain-powered IDE for professional developers&lt;br&gt;
&lt;a href="https://www.jetbrains.com/pycharm/download/"&gt;https://www.jetbrains.com/pycharm/download/&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt; Hello World 

&lt;/h3&gt;
&lt;p&gt;"Hello world" is usually the first example for any programming language.&lt;/p&gt;

&lt;p&gt;To write and run a simple program, start IDLE and open up a new window (choose New Window under the File Menu), create a new file and save as &lt;strong&gt;hello.py&lt;/strong&gt; in your desired program folders then enter the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the document (CTRL + S) then execute. &lt;br&gt;
When using the IDLE commands, under the Run menu, choose Run Module (or press F5). IDLE will ask you to save the file if haven't done so.&lt;br&gt;
To execute hello.py from the command prompt (CMD)&lt;br&gt;
first launch the Command Prompt on Windows or Terminal on macOS or Linux then, navigiate to the folder containing the file.&lt;/p&gt;

&lt;p&gt;After that, type the following command to execute the hello.py file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3 hello.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If everything is okay then it will execute with no errors and should display the following message on the screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every program has got a structure that defines it's building blocks and so does python. These are constructs and patterns used to develop programs in any programming language and they include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;input&lt;/strong&gt;&lt;br&gt;
This is data from an external source (outside environment) that is fed into the program for it to manipulate and process. The various sources may be sensors, keyboard, data from other programs, files e.t.c.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;output&lt;/strong&gt;&lt;br&gt;
This is the result of a program process which is displayed on a screen or stored in a file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;sequential execution&lt;/strong&gt;&lt;br&gt;
This is an orderly execution of scripted statements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;conditional execution&lt;/strong&gt;&lt;br&gt;
This is the execution of a given block of statements if a specified condition is met.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;repeated execution&lt;/strong&gt;&lt;br&gt;
Perform some set of statements repeatedly, usually with some variation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;reuse&lt;/strong&gt;&lt;br&gt;
This involves writing a given set of codes once and then use them in several instances of the program whenever necessary. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Comments&lt;/strong&gt;&lt;br&gt;
A comment is an information intended to explain to a reader what a given code (or sequence of codes) does. They have no effect in the program therefore can never generate any error unless if written in a wrong syntax.&lt;/p&gt;

&lt;p&gt;A single-line comment is written using the # character.&lt;/p&gt;

&lt;p&gt;Multi-line comment span several lines and can be written using triple quotes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#This is a single line comment
&lt;/span&gt;
&lt;span class="s"&gt;'''
Author: Naftal Rainer
Date: 23/07/2021
'''&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A very good use of the multiline comments is to comment out parts of a code. A programmer may want to modify part of a program and retain the old code in case the changes don’t effect. The programmer would then comment out the old code so that it is still there if needed, and it will be ignored when the new program is executed. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Variables&lt;/strong&gt;&lt;br&gt;
Variables are named memory locations where data is stored for referencing and manipulation by programs. In simple terms, variables are containers for storing data&lt;/p&gt;

&lt;p&gt;The equal sign (=) is used to assign values to variables.&lt;br&gt;
The operand to the left of the = operator is the name of the variable and the operand to the right of the = operator is the value stored in the variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="c1"&gt;# X is the variable name and 2 is the value assigned
&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="c1"&gt;# y is the variable name and 100 is the value assigned
&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;

&lt;span class="c1"&gt;# name is the variable name and "Naftal" is the value assigned
&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Naftal"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Python variables are not declared explicitly since the declaration happens automatically when a value is assigned to the variable. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data Types&lt;/strong&gt;&lt;br&gt;
Python has various standard data types that are used to define the operations possible on them and the storage method for each of them.&lt;br&gt;
The standard data types-&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#1-strings"&gt;
  &lt;/a&gt;
  1.) Strings
&lt;/h4&gt;

&lt;p&gt;Strings are a data type in Python for dealing with text. They are a set of characters enclosed within quotation marks.&lt;br&gt;
Various operations can be performed on strings using the various string methods available.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating a string&lt;/strong&gt; - A string is created by enclosing text in quotes. You can use either single quotes,', or double quotes, ". A triple-quote can be used for multi-line strings. &lt;br&gt;
Here are some examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Hello'&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"World"&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"""My name is Paul Mwasame and
       I find learning python to be super exciting."""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For string methods and apllications refer to &lt;a href="https://www.w3schools.com/python/python_ref_string.asp"&gt;w3schools&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-numbers"&gt;
  &lt;/a&gt;
  2.) Numbers
&lt;/h4&gt;

&lt;p&gt;Number data types are the ones that will store the numeric values and are classified as:&lt;br&gt;
     -Complex (such as complex numbers)&lt;br&gt;
     -Float (floating point real values&lt;br&gt;
     -Long (long integers that can also be shown as hexadecimal and octal.)&lt;br&gt;
     -Int (signed integers)&lt;/p&gt;

&lt;p&gt;It also involves numbers and simple mathematics in Python.&lt;br&gt;
Common operators in python include:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;addition&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;subtraction&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;multiplication&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;division&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;**&lt;/td&gt;
&lt;td&gt;exponentiation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%&lt;/td&gt;
&lt;td&gt;modulo (remainder)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;//&lt;/td&gt;
&lt;td&gt;integer division&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Python has a module called math that contains familiar math functions, including sin, cos, tan, exp, log, log10, factorial, sqrt, floor, and ceil. &lt;br&gt;
For more information on number check &lt;a href="https://www.programiz.com/python-programming/numbers#:~:text=Python%20supports%20integers%2C%20floating%2Dpoint,is%20a%20floating%2Dpoint%20number."&gt;programmiz.com&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#3-list"&gt;
  &lt;/a&gt;
  3.) List
&lt;/h4&gt;

&lt;p&gt;Lists are one of the most versatile data types that you can work on in Python. It contains different items enclosed within square brackets and separated out with commas.&lt;br&gt;
Lists are mutable and can contain elements of different data types and even other lists.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating lists&lt;/strong&gt; - Use square brackets to indicate the start and end of the list, and separate the items by commas.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;L2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.718&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'abc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An empty list The empty list is []. &lt;br&gt;
Long lists can span several lines like the one below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
           &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also use eval(input()) to allow the user to enter a list. Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;myList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Enter a list: '&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'The first element is '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more on lists, check &lt;a href="https://www.programiz.com/python-programming/list"&gt;programmiz.com&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-tuple"&gt;
  &lt;/a&gt;
  4.) Tuple
&lt;/h4&gt;

&lt;p&gt;Tuples are immutable lists enclosed in parentheses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To convert an object into a tuple, use &lt;strong&gt;tuple()&lt;/strong&gt; constructor. &lt;br&gt;
The following example converts a list and a string into tuples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;93&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;t2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'abcde'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The empty tuple is written as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To write a  tuple with one element include a comma(,) after the element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To access tuple values at various indices, make use of the square brackets as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;tuple1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Nairobi'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'New York'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1997&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tuple2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tup1[0]: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tup1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tup2[1:5]: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tup2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tuples are immutable hence no change can be made on them. However, one can take portions/slices of existing tuples and create a new tuple.&lt;br&gt;
Get more operations on tuples &lt;a href="https://www.geeksforgeeks.org/tuples-in-python/#:~:text=A%20Tuple%20is%20a%20collection,unlike%20lists%20which%20are%20mutable.&amp;amp;text=Note%3A%20In%20case%20your%20generating,a%20comma%20after%20the%20element."&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#5-dictionary"&gt;
  &lt;/a&gt;
  5.) Dictionary
&lt;/h4&gt;

&lt;p&gt;Dictionaries are key-value pairs and are surrounded by {}.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating dictionaries&lt;/strong&gt; - To declare a dictionary we enclose it in curly braces, {}. Each entry consists of a pair separated&lt;br&gt;
by a colon. The first part of the pair is called the key and can be of any data type and the second is the value. The key acts like an index.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Empty dictionary
&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="nb"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# To change the value of A to 300
&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-To access data at a given index say A, the key d['A'] gives value at index A.&lt;br&gt;
-To add a new entry to the dictionary, we can just assign it, like below:&lt;br&gt;
d['C']=500&lt;br&gt;
-To delete an entry from a dictionary, use the del operator:&lt;br&gt;
del d['A']&lt;/p&gt;

&lt;p&gt;The order of items in a dictionary will not necessarily be the order in which put them into the dictionary. Python rearranges things in a dictionary in order to optimize&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Become Super Productive with Console.X</title>
      <author>Somnath Singh</author>
      <pubDate>Sat, 24 Jul 2021 13:11:36 +0000</pubDate>
      <link>https://dev.to/polymathsomnath/become-super-productive-with-console-x-fbe</link>
      <guid>https://dev.to/polymathsomnath/become-super-productive-with-console-x-fbe</guid>
      <description>&lt;p&gt;The better you know the machine, the better you can use it!&lt;/p&gt;

&lt;p&gt;Yes or no?&lt;/p&gt;

&lt;p&gt;Whether you make your living in a blue-collar or white-collar career, you must always have access to the right tools you need to do your job. Otherwise, not only will you not be able to perform in the ways you need to, but you also won’t have as positive a relationship with your work.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“A man is only as good as his tools.”&lt;/p&gt;

&lt;p&gt;― Emmert Wolf&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Developers debugging console has been available in one form or another in web browsers for many years.&lt;/p&gt;

&lt;p&gt;Starting as a means for errors to be reported to the developer, its capabilities have increased in many ways, such as automatically logging information like network requests, network responses, security errors, or warnings.&lt;/p&gt;

&lt;p&gt;There is more to the console object than just &lt;code&gt;console.log()&lt;/code&gt;. Though the console object has got a shedload of features — very few get explored.&lt;/p&gt;

&lt;p&gt;In this article, We will unravel the console object — things that remain hidden for most of the developers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#come-let-us-sit-at-the-table-and-have-some-conversation"&gt;
  &lt;/a&gt;
  Come, let us sit at the table and have some conversation!
&lt;/h1&gt;

&lt;p&gt;You might have put an array or object inside a &lt;code&gt;console.log()&lt;/code&gt;many times.&lt;br&gt;
But do you know that there’s another option for these data types for a more structured display, which is the &lt;code&gt;console.table()&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qwuLWbob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AYrG-PQFFE3yncV4XGNMGeQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qwuLWbob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AYrG-PQFFE3yncV4XGNMGeQ.png" alt="console.table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Be patient, the tables will turn.&lt;/p&gt;

&lt;p&gt;(And if they won’t, make them turn.)&lt;/p&gt;

&lt;p&gt;— The Ruhaniyat&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IELWpLww--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1728/1%2AK81Qh_p9XcZ3wM1q-zWtww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IELWpLww--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1728/1%2AK81Qh_p9XcZ3wM1q-zWtww.png" alt="console.table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This looks much slick, isn’t it?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#time-to-add-some-flavors-to-your-life"&gt;
  &lt;/a&gt;
  Time to add some flavors to your life.
&lt;/h1&gt;

&lt;p&gt;JavaScript gives us are five options to log messages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;console.log( ) | console.info( ) | console.debug( ) | console.warn( ) | console.error( )&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“People try to hold onto the sameness. This holding onto prevents growth.”&lt;/p&gt;

&lt;p&gt;— Bruce Lee&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At first glance they seem to do the same thing and technically, they do! The browsers provide additional features tied to the five commands to give each their own distinct benefit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eQomrOrj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2A90dcqR68dQ6CePZxU-reqQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eQomrOrj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2A90dcqR68dQ6CePZxU-reqQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LSuqa-KG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AZG2XfQ-4m3OWOHvpkhxSWw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LSuqa-KG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AZG2XfQ-4m3OWOHvpkhxSWw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The intentions for the usage of &lt;strong&gt;&lt;em&gt;error&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;warn&lt;/em&gt;&lt;/strong&gt; are easy to determine — how to use the other choices is up to you.&lt;/p&gt;

&lt;p&gt;Don’t just write better error messages, write code that doesn’t need them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#darling-you-need-to-add-some-colour-to-your-life"&gt;
  &lt;/a&gt;
  Darling, you need to add some colour to your life.
&lt;/h1&gt;

&lt;p&gt;Wouldn’t it be amazing if the errors come up in red and warnings in yellow?&lt;/p&gt;

&lt;p&gt;Is it possible? Definitely!&lt;/p&gt;

&lt;p&gt;You can apply CSS styles to the console’s output. It works just like the string substitution method where you insert a &lt;code&gt;%c&lt;/code&gt; variable for styles to be applied from the parameters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HB1nVZS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AUgWCpjbUrmmG8JEsJD9STw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HB1nVZS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AUgWCpjbUrmmG8JEsJD9STw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice the %c before the I in the above statement.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i_K1Duxs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AXyE8DWFrVA2gWcM-PBTJ2Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i_K1Duxs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AXyE8DWFrVA2gWcM-PBTJ2Q.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Colour to the eye what music is to the ear.”&lt;/p&gt;

&lt;p&gt;— Louis Comfort Tiffany&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is just a sample, you can achieve a lot of things using CSS. If you are interested then, &lt;a href="https://stackoverflow.com/questions/7505623/colors-in-javascript-console#:~:text=Use%20Markdown%20for%20log%20messages.&amp;amp;text=The%20CSS%20format%20specifier%20allows,apply%20as%20the%20second%20parameter."&gt;have a look at this thread.&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#memories-of-a-past-love-c-programming"&gt;
  &lt;/a&gt;
  Memories of a past love — C Programming.
&lt;/h1&gt;

&lt;p&gt;In C programming there is something called &lt;strong&gt;placeholders&lt;/strong&gt;. These placeholders are also called &lt;strong&gt;format specifiers&lt;/strong&gt;. It determines the &lt;strong&gt;format&lt;/strong&gt; of the input and output.&lt;/p&gt;

&lt;p&gt;Not many know this but JavaScript also provides us placeholders. We can make use of those placeholders in JavaScript’s &lt;code&gt;console.log()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ktxMqrrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AYa1-cyt8ZInp--Hm4rTQmw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ktxMqrrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AYa1-cyt8ZInp--Hm4rTQmw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d6iCgvlA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2A-xQhpR_ZFPTwU4c8-PQwYA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d6iCgvlA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2A-xQhpR_ZFPTwU4c8-PQwYA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice the %s and %o that we have used in the console.log()&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3xrGKChL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AkvnQbW_yMSJHSgqXhJp2fw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3xrGKChL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AkvnQbW_yMSJHSgqXhJp2fw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#can-you-describe-that-thing-a-little-better"&gt;
  &lt;/a&gt;
  Can You Describe that thing a Little Better?
&lt;/h1&gt;

&lt;p&gt;When something is descriptive it gives us a better idea of what that thing possibly would be.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;console&lt;/code&gt;&lt;code&gt;**.**&lt;/code&gt;&lt;code&gt;dir()&lt;/code&gt; displays an interactive list of the properties of the specified JavaScript object. The output is presented as a hierarchical listing with disclosure triangles that let you see the contents of child objects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q642Rw1q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AmM-cvD0Z8tDpgmymrSwPBg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q642Rw1q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AmM-cvD0Z8tDpgmymrSwPBg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eClBu7Dn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AfuM5ODtr8rkJCwo0MenNIQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eClBu7Dn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AfuM5ODtr8rkJCwo0MenNIQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;console.dir() didn’t just give an output but also told what kind it is.&lt;/p&gt;

&lt;p&gt;Things get interesting is when we start using DOM nodes. So let’s look at the difference when we use &lt;code&gt;dir&lt;/code&gt; and &lt;code&gt;log&lt;/code&gt; on &lt;code&gt;document.body&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dgfwSy2c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2A0X8m1GAoxqPg1lRG5TUhrw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dgfwSy2c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2A0X8m1GAoxqPg1lRG5TUhrw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice, &lt;code&gt;console.log()&lt;/code&gt; prints the element in an HTML-like tree and &lt;code&gt;console.dir()&lt;/code&gt; prints the element in a JSON-like tree.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jJZDecat--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1210/1%2AQwOf8Fg4KmcVjxKNSyLkxg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJZDecat--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1210/1%2AQwOf8Fg4KmcVjxKNSyLkxg.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log()&lt;/code&gt; gives special treatment to DOM elements, whereas &lt;code&gt;console.dir()&lt;/code&gt; does not. This is often useful when trying to see the full representation of the DOM object.&lt;/p&gt;

&lt;p&gt;In other words, &lt;code&gt;console.dir()&lt;/code&gt; is the way to see all the properties of a specified JavaScript object in the console by which the developer can easily get the properties of the object.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#alone-we-are-strong-together-we-are-stronger"&gt;
  &lt;/a&gt;
  Alone we are strong, together we are stronger!
&lt;/h1&gt;

&lt;p&gt;A &lt;strong&gt;group&lt;/strong&gt; is a set of things that are considered because they have something in common. It is quite possible to group the messages with the console.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;console.group()&lt;/code&gt; we can group different console outputs together to show a form of relationship among them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cf-HzjAT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AfAkV9c9XdzBwY8LPPpX-pw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cf-HzjAT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AfAkV9c9XdzBwY8LPPpX-pw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We use group. End() to close the group.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vc3hVqld--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AInR_w1a5KdIUL_6qwiMiQg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vc3hVqld--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AInR_w1a5KdIUL_6qwiMiQg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#you-can-count-on-me-like-123-amp-ill-be-there"&gt;
  &lt;/a&gt;
  You can count on me like 1,2,3 &amp;amp; I’ll be there!
&lt;/h1&gt;

&lt;p&gt;Man, even in the lower stages of development, possesses a faculty which, for want of a better name, I shall call Number Sense. This faculty permits him to recognize that something has changed in a small collection when, without his direct knowledge, an object has been removed from or added to the collection.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Many of the things you can count, don’t count. Many of the things you can’t count, really count.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;— Albert Einstein&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ever wonder how many times a certain thing happens in your code? For instance, how many times does a particular function get called during a sequence of events? That’s where the &lt;code&gt;console.Count()&lt;/code&gt; command can help out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HE3Hq7zA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AhR4lR880a-MvxL2flBd8uA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HE3Hq7zA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AhR4lR880a-MvxL2flBd8uA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vp8XIgJI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2ARf8khnjIaAVZi6Sj9_TMKA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vp8XIgJI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2ARf8khnjIaAVZi6Sj9_TMKA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#to-know-oneself-one-should-assert-oneself"&gt;
  &lt;/a&gt;
  To know oneself, one should assert oneself.
&lt;/h1&gt;

&lt;p&gt;In life, truth is the only authority. One must reject everything but not the truth.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is truth that liberates, not your effort to be free.&lt;/p&gt;

&lt;p&gt;— J. Krishnamurti&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ever thought of logging something when it is not true?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.assert()&lt;/code&gt; comes quite handy when you only want to print some selected logs i.e. it will only print the false argument. It does nothing at all if the first argument is true.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kT--Ef-E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2A7uoIfSdG_gI8ALe3ht8Kvw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kT--Ef-E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2A7uoIfSdG_gI8ALe3ht8Kvw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R-Md_N8J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AJSYtY1DH3dLTZx56f0kCtA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R-Md_N8J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AJSYtY1DH3dLTZx56f0kCtA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zBJYmW4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AgA9i-K-D1BH0ddHxYMH1_A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zBJYmW4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AgA9i-K-D1BH0ddHxYMH1_A.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#are-you-tracing-it"&gt;
  &lt;/a&gt;
  Are you tracing it?
&lt;/h1&gt;

&lt;p&gt;Bugs can be a source of frustration. It’s impossible to know straight away which call to the function is creating the bug. Understanding the code execution flow, one can have a better grip on them.&lt;/p&gt;

&lt;p&gt;You can use &lt;code&gt;console.trace()&lt;/code&gt; to get a quick and easy stack trace to better understand code execution flow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gy_cGSKN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AxRboBdFALSZK88C9fVehew.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gy_cGSKN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AxRboBdFALSZK88C9fVehew.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oh_R8UZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AU3U1ExVcxSWPlrFVMZCjSA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oh_R8UZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AU3U1ExVcxSWPlrFVMZCjSA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In simple terms, &lt;code&gt;console.trace()&lt;/code&gt; will log to the console the call stack that exists at the point &lt;code&gt;console.trace()&lt;/code&gt; was called.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.trace()&lt;/code&gt; can be very helpful especially, in a large codebase where we have established that the code has a bug in it somewhere but, we aren’t sure exactly where it is.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#do-you-realize-thats-the-first-time-youve-done-that"&gt;
  &lt;/a&gt;
  Do you realize that’s the first time you’ve done that?
&lt;/h1&gt;

&lt;p&gt;The &lt;a href="https://javascript.plainenglish.io/the-secrets-surrounding-for-loops-in-javascript-3db58541caa9?source=friends_link&amp;amp;sk=665c05b53d48c8d6316f4fc3df107be1"&gt;majority of code execution time is spent within loops&lt;/a&gt;. Understanding the performance impact of loops in JavaScript is essential in becoming a better developer.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;console.time()&lt;/code&gt; one can get an idea of how long a certain section of code is taking.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X5P_DBZz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AhzuLAyoMO3HpYmo3edbZ-g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X5P_DBZz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AhzuLAyoMO3HpYmo3edbZ-g.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gyq0LIgu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AsEE4QRBY-ijPXEJc7FKuTw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gyq0LIgu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1210/1%2AsEE4QRBY-ijPXEJc7FKuTw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Time is a created thing. To say ‘I don’t have time’, is like saying, ‘I don’t want to.”&lt;/p&gt;

&lt;p&gt;― &lt;strong&gt;Lao Tzu&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I covered the &lt;a href="https://javascript.plainenglish.io/the-secrets-surrounding-for-loops-in-javascript-3db58541caa9?source=friends_link&amp;amp;sk=665c05b53d48c8d6316f4fc3df107be1"&gt;performance of loops in an article&lt;/a&gt;, I found that the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/now"&gt;&lt;strong&gt;Performance Interface&lt;/strong&gt;&lt;/a&gt;  gives more &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/now"&gt;accurate results&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Learn to see the console object as a multifaceted tool. Each tool is designed precisely for a specific purpose. Choosing the correct tool will decrease the amount of effort required to get a job done. I hope you will choose well.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h1&gt;

&lt;p&gt;This isn’t &lt;em&gt;everything&lt;/em&gt; possible — there’s simply too much to cover. In some cases, each browser has its capabilities or utilities that can be leveraged. We explored just a few. I invite you to dig deeper to discover more ways to leverage browser DevTools for your coding projects.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/console"&gt;MDN: Console Documentation&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://developers.google.com/chrome-developer-tools/docs/console-api"&gt;Google Developers: Console API Reference&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://developers.google.com/chrome-developer-tools/docs/tips-and-tricks"&gt;Google Developers: Dev Tools Tips and Tricks&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;console.table()&lt;/code&gt; gives b*etter visualization of data.*&lt;/li&gt;
&lt;li&gt;  Other than &lt;code&gt;**console.log( )**&lt;/code&gt;  we can have&lt;code&gt;**console.info( )**&lt;/code&gt; &lt;strong&gt;|&lt;/strong&gt; &lt;code&gt;**console.debug( )**&lt;/code&gt; &lt;strong&gt;|&lt;/strong&gt; &lt;code&gt;**console.warn( )**&lt;/code&gt; &lt;strong&gt;|&lt;/strong&gt; &lt;code&gt;**console.error( )**&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  You can insert a &lt;code&gt;%c&lt;/code&gt; variable and use various CSS styling options.&lt;/li&gt;
&lt;li&gt;  We have placeholder in JavaScript like &lt;code&gt;%s&lt;/code&gt; &lt;code&gt;%d&lt;/code&gt; &lt;code&gt;%i&lt;/code&gt; &lt;code&gt;%f&lt;/code&gt; &lt;code&gt;%o&lt;/code&gt; that can determine &lt;strong&gt;format&lt;/strong&gt; of the output.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;console.dir()&lt;/code&gt; prints a JSON representation of the specified object.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;console.group()&lt;/code&gt; can be used for &lt;em&gt;grouping messages&lt;/em&gt; in the console.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;console.count()&lt;/code&gt; logs the number of times that this particular call to &lt;code&gt;count()&lt;/code&gt; has been called. This function takes an optional argument &lt;code&gt;label&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;console.trace()&lt;/code&gt; method displays a trace that show how the code ended up at a certain point.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;console.assert()&lt;/code&gt; prints a statement when it is false.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;console.time()&lt;/code&gt; can be used to track the micro-time taken for JavaScript executions.&lt;/li&gt;
&lt;li&gt;  Learn to see the console object as a multifaceted tool, use the right tool for the job.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#note-of-gratitude"&gt;
  &lt;/a&gt;
  Note of Gratitude
&lt;/h1&gt;

&lt;p&gt;I wanted to take this last opportunity to say thank you.&lt;/p&gt;

&lt;p&gt;Thank you for being here! I would not be able to do what I do without  people like you  who follow along and take that leap of faith to read my post.&lt;/p&gt;

&lt;p&gt;I hope you’ll &lt;a href="https://twitter.com/tweetsbysoma"&gt;&lt;strong&gt;join me&lt;/strong&gt;&lt;/a&gt; in &lt;a href="https://xps8zvgfv2x.typeform.com/to/AmZnFhsK"&gt;&lt;strong&gt;my future blog post&lt;/strong&gt;&lt;/a&gt; and stick around because I think we have something great here. And I hope that I can help you along in your career for many more years to come!&lt;/p&gt;

&lt;p&gt;See you next time. Bye!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://xps8zvgfv2x.typeform.com/to/AmZnFhsK"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U-VgLU_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdhccyp2ec5iz031qhtu.gif" alt="Newsletter"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Vue Academy #3: v-show VS v-if</title>
      <author>CodeOzz</author>
      <pubDate>Sat, 24 Jul 2021 13:10:22 +0000</pubDate>
      <link>https://dev.to/codeozz/vue-academy-3-v-show-vs-v-if-iaa</link>
      <guid>https://dev.to/codeozz/vue-academy-3-v-show-vs-v-if-iaa</guid>
      <description>&lt;p&gt;Welcome to the new vue academy ! It will be a list of lot of article on vue! I have 2.5 years of experience in this and I can teach a few thing about this !&lt;/p&gt;

&lt;p&gt;With vue you can use some directives, today we will check the difference between &lt;strong&gt;v-show &amp;amp; v-if !&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic"&gt;
  &lt;/a&gt;
  Basic
&lt;/h3&gt;

&lt;p&gt;Both directives serve to display or hide a component, depending on the condition given.&lt;/p&gt;

&lt;p&gt;But what is the difference?&lt;/p&gt;

&lt;p&gt;The main difference is the &lt;strong&gt;living behavior !&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vif"&gt;
  &lt;/a&gt;
  &lt;strong&gt;v-if&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The element will be &lt;strong&gt;removed&lt;/strong&gt; from the DOM, so it will have a new &lt;strong&gt;lifecyle hooks&lt;/strong&gt; ! 🔂&lt;/p&gt;

&lt;p&gt;You can also use &lt;strong&gt;v-else-if&lt;/strong&gt; and &lt;strong&gt;v-else&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vshow"&gt;
  &lt;/a&gt;
  &lt;strong&gt;v-show&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The element will remain in the DOM, &lt;code&gt;v-show&lt;/code&gt; will only use the &lt;code&gt;display&lt;/code&gt; property CSS to the element ! 🎨&lt;/p&gt;

&lt;p&gt;So the element is not destroyed, so it will &lt;strong&gt;no&lt;/strong&gt; have a new lifecyle hook !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;Take this code as example 👇&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parent.vue&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"changeState"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Switch state
    &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;child&lt;/span&gt; &lt;span class="na"&gt;v-show=&lt;/span&gt;&lt;span class="s"&gt;"isShowed"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"v-show"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;child&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"isLiving"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"v-if"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../child&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;isShowed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;isLiving&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;changeState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isShowed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isShowed&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLiving&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLiving&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Child.vue&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    Hello from &lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;created&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Element named &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is created`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;destroyed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Element named &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is destroyed`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;At init we have this console log :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Element named v-show is created&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Element named v-if is created&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When we change the state in order to activate directive :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Element named v-if is destroyed&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Element named v-if is created&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Element named v-if is destroyed&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Element named v-if is created&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Only &lt;code&gt;v-if&lt;/code&gt; component is reload and have a new cyclehook !&lt;/p&gt;

&lt;p&gt;As mentioned above, we can check the &lt;code&gt;display property&lt;/code&gt; for &lt;code&gt;v-show component&lt;/code&gt; when component is hiding&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"display: none;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Hello from v-show
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Both is used to &lt;strong&gt;hide component&lt;/strong&gt;, but the difference is the way of &lt;strong&gt;hiding&lt;/strong&gt; this component !&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;v-if&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Element is removed from the DOM&lt;/li&gt;
&lt;li&gt;Element will have a new lifecyle hook&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Can be use with &lt;code&gt;v-else-if&lt;/code&gt; and &lt;code&gt;v-else&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Init load component is cheap&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Toggle element is expensive&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;v-show&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Element remains in the DOM&lt;/li&gt;
&lt;li&gt;Element will not have a new lifecyle hook&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Element will have &lt;code&gt;display: none&lt;/code&gt; when set to false&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Init load component is expensive&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Toggle element is very cheap&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



</description>
      <category>vue</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Learn React &amp; React Ref By Building Netflix</title>
      <author>Hiep Le</author>
      <pubDate>Sat, 24 Jul 2021 13:06:34 +0000</pubDate>
      <link>https://dev.to/hieptl/learn-react-react-ref-by-building-netflix-2gkc</link>
      <guid>https://dev.to/hieptl/learn-react-react-ref-by-building-netflix-2gkc</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RvoCeyIe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rl36xcdyl6fdhpo2qvpe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RvoCeyIe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rl36xcdyl6fdhpo2qvpe.png" alt="learn-react-by-building-netflix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Click ⭐ if you like the project. Pull Requests are highly appreciated ❤️&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Github link: &lt;a href="https://github.com/hieptl/netflix-clone/tree/main/advanced/netflix-ref"&gt;https://github.com/hieptl/netflix-clone/tree/main/advanced/netflix-ref&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm Hiep. I work as a full-time software engineer. Most of my open-source projects are focused on one thing - to help people learn 📚. &lt;/p&gt;

&lt;p&gt;The repository helps you learn react ref by building Netflix. It means that you are learning react ref by building a real-life project. I will explain concepts in details. This post is the sixth part in my series and it is suitable for beginners.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you feel the repository is useful, please help me share the post and give me a Github ⭐. It will make me feel motivation to work even harder. I will try to make many open sources and share to the community.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#preface"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Preface&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;This course will help you to learn react ref by building Netflix. It means that you are learning by doing a real-life project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Table of Contents&lt;/strong&gt;
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;No.&lt;/th&gt;
&lt;th&gt;Topics&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;a href="#how-to-run-the-project"&gt;How to Run the Project.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href="#live-demo"&gt;Live Demo.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href="#introduction-about-the-creator"&gt;Introduction about the Creator.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.1&lt;/td&gt;
&lt;td&gt;&lt;a href="#greenwich-university"&gt;      Greenwich University.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.2&lt;/td&gt;
&lt;td&gt;&lt;a href="#hitachi-vantara-vietnam"&gt;      Hitachi Vantara Vietnam.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="#prequisites"&gt;Prequisites.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;&lt;a href="#softwares"&gt;      Softwares.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.2&lt;/td&gt;
&lt;td&gt;&lt;a href="#technical-skills"&gt;      Technical Skills.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.3&lt;/td&gt;
&lt;td&gt;&lt;a href="#materials"&gt;      Materials.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href="#purposes-of-the-course"&gt;Purposes of the Course.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.1&lt;/td&gt;
&lt;td&gt;&lt;a href="#final-project"&gt;      Final Project.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.2&lt;/td&gt;
&lt;td&gt;&lt;a href="#job"&gt;      Job.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;a href="#react-ref"&gt;React Ref.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;td&gt;&lt;a href="#what"&gt;      What.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.2&lt;/td&gt;
&lt;td&gt;&lt;a href="#why"&gt;      Why.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.3&lt;/td&gt;
&lt;td&gt;&lt;a href="#how"&gt;      How.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.4&lt;/td&gt;
&lt;td&gt;&lt;a href="#when"&gt;      When.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;a href="#apply-react-ref-to-netflix"&gt;Apply React Ref to Netflix.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;a href="#conclusion"&gt;Conclusion.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;a href="#references"&gt;References.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#table-of-images"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Table of Images.&lt;/strong&gt;
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;No.&lt;/th&gt;
&lt;th&gt;Topics&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href="#figure1"&gt;Figure 1: Apply React Ref to Netflix.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a id="how-to-run-the-project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#0-how-to-run-the-project"&gt;
  &lt;/a&gt;
  &lt;strong&gt;0. How to Run the Project.&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Step 1: Clone the project by using git clone or download the zip file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 2: Open "terminal" / "cmd" / "gitbash" and change directory to "netflix-clone" and run "npm install" to install dependencies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 3: Run "npm start" to run the fron-end project.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id="live-demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-live-demo"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Live Demo.&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://espg2.csb.app/login"&gt;https://espg2.csb.app/login&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Username: &lt;a href="mailto:demo@gmail.com"&gt;demo@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Password: 123456&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The login function was implemented by using React and React Ref. You can try to use the account above in order to test the feature. The result (authenticatd information) will be shown on the console log.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a id="introduction-about-the-creator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-introduction-about-the-creator"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Introduction about the Creator.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a id="greenwich-university"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#21-greenwich-university"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2.1. Greenwich University.&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GPA 4.0 / 4.0.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Machine Learning paper - Recommendation System - IEEE/ICACT2020.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Co-Founder / Mentor IT club.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id="hitachi-vantara-vietnam"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#22-hitachi-vantara-vietnam"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2.2. Hitachi Vantara Vietnam.&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Employee of the year.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Second prize - innovation contest.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Techlead - HN branch.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One of CoE Leaders (Center of Excellence).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id="prequisites"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-prequisites"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Prequisites.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a id="softwares"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#31-softwares"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3.1. Softwares.&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Install NodeJS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An IDE or a text editor (VSCode, Intellij, Webstorm, etc).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id="technical-skills"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#32-technical-skills"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3.2. Technical Skills.&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Basic programming skill.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Basic HTML, CSS, JS skills.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Basic React skill. (If you want to learn about React, you can refer &lt;strong&gt;Learn React by Building Netflix&lt;/strong&gt;: &lt;a href="https://dev.to/hieptl/learn-react-by-building-netflix-1127"&gt;https://dev.to/hieptl/learn-react-by-building-netflix-1127&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id="materials"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#33-materials"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3.3. Materials.&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Html, css, js (source code) was prepared because I want to focus on React and share knowledge about React. Building html and css from scratch would take a lot of time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;README.md (the md file will contain everything about the course).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Netflix data will be used to import to Firebase. In this course, we use Firebase as our back-end service.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id="purposes-of-the-course"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-purposes-of-the-course"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. Purposes of the Course.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a id="final-project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#41-final-project"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4.1. Final Project.&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The course would help you have understanding about React and React Ref.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You could build the final project with end-to-end solution (front-end solution using React and back-end solution using Firebase).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id="job"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#42-job"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4.2. Job.&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;After finishing the course, you could get a job with fresher / junior position.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id="react-ref"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-react-ref"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. React Ref.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a id="what"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#51-what"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5.1 What.&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The ref is used to return a reference to the element. They should be avoided in most cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id="why"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#52-why"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5.2 Why.&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;They can be useful when you need a direct access to the DOM element or an instance of a component.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id="how"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#53-how"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5.3 How.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;In order to create ref in React, we have several ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;React.createRef().&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ref callbacks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;useRef().&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;fowardRef().&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id="when"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#54-when"&gt;
  &lt;/a&gt;
  5.4 When.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Managing focus, text selection, or media playback.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Triggering imperative animations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Integrating with third-party DOM libraries.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id="apply-react-ref-to-netflix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-apply-react-ref-to-netflix"&gt;
  &lt;/a&gt;
  &lt;strong&gt;7. Apply React Ref to Netflix.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a id="figure1"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2wD_PF_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppj9t5e3xipch4xvysp9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2wD_PF_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppj9t5e3xipch4xvysp9.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Figure 1. Apply React Ref to Netflix.&lt;/p&gt;

&lt;p&gt;In the first part of this series, we built the login feature and save user's email and user's password by using state. In this part, we will get the input information by using ref instead of using state.&lt;/p&gt;

&lt;p&gt;Step 1: Remove email, password state and create email ref, password ref.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// import react.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;1st NOTE:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;As mentioned above, we have several ways to create a ref. In this article, we will use &lt;strong&gt;useRef&lt;/strong&gt; to define a ref. Therefore we need to import &lt;strong&gt;useRef&lt;/strong&gt; from &lt;strong&gt;react&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In &lt;strong&gt;LoginForm&lt;/strong&gt; component, we define two refs &lt;strong&gt;email&lt;/strong&gt; and &lt;strong&gt;pasword&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We need to get the email's value, password's value when clicking on "Sign In" button. Therefore, we need to attach the created refs to our input elements. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Step 2: Attach the created refs to the input elements.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;login-body__input mb-16&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Email or phone number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;login-body__input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;2nd NOTE:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In order to attach a ref to a input element, we need to use &lt;strong&gt;ref&lt;/strong&gt; keyword.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After attaching the created refs to the input elements, the last thing that we need to do is to get the input values when clicking on "Sign In" button.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;intputEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputPassword&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// call firebase authentication service.&lt;/span&gt;
  &lt;span class="nx"&gt;firebaseAuth&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signInWithEmailAndPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;intputEmail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;inputPassword&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;userCredential&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Signed in&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userCredential&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="c1"&gt;// ...&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`signed in user`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;FINAL NOTE:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We get the values from the input elements, by using the syntax &lt;strong&gt;ref.current.value&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;intputEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputPassword&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;We can get the values from the input elements by using refs instead using state like what we did in the previous part.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a id="conclusion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In this course, we have learn about react-ref by building Netflix. I hope that you can apply react-ref to your projects. If you feel the project is useful, please help me share it to the community and give me Github ⭐&lt;/p&gt;

&lt;p&gt;&lt;a id="references"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  &lt;strong&gt;References&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;[1]. &lt;a href="https://reactjs.org/docs/refs-and-the-dom.html"&gt;https://reactjs.org/docs/refs-and-the-dom.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>React useContext and useReducer Hooks.</title>
      <author>EswaraPrakash Vaithiyanathan</author>
      <pubDate>Sat, 24 Jul 2021 12:41:58 +0000</pubDate>
      <link>https://dev.to/eswaraprakash/react-usecontext-and-usereducer-hooks-2pkm</link>
      <guid>https://dev.to/eswaraprakash/react-usecontext-and-usereducer-hooks-2pkm</guid>
      <description>&lt;h3&gt;
  &lt;a href="#a-simple-example-of-react-usecontext-and-usereducer-hooks-available-in-react-that-can-be-used-as-a-replacement-for-redux"&gt;
  &lt;/a&gt;
  A simple example of React useContext and useReducer Hooks available in React that can be used as a replacement for Redux.
&lt;/h3&gt;

&lt;p&gt;Instead of using Redux as state management. We can use the inbuilt hooks that are available in React itself. Eventually, you can replace or move the project that is dependent on Redux to the inbuilt hooks.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The useContext hook is used to create common data that can be accessed throughout the component hierarchy without passing the props down manually to each level. Context defined will be available to all the child components without involving “props”. React Context is a powerful state management feature in React. Instead of passing the props down through each component, React Context allows you to broadcast props to the components below.&lt;/p&gt;

&lt;p&gt;The useReducer hook is used for complex state manipulations and state transitions. … useReducer is a React hook function that accepts a reducer function, and an initial state. const [state, dispatch] = useReducer(reducer, initialState);This hook function returns an array with 2 values.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I am using the usual use case of the Todo List example for easy understanding.&lt;/p&gt;

&lt;p&gt;Step 1: Initial State and Actions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Initial State and Actions&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;ADD_TODO_ITEM&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ADD_TODO_ITEM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;REMOVE_TODO_ITEM&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;REMOVE_TODO_ITEM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;TOGGLE_COMPLETED&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;TOGGLE_COMPLETED&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 2: Reducers to Handle Actions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Reducer to Handle Actions&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ADD_TODO_ITEM&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todoItemLabel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;REMOVE_TODO_ITEM&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredTodoItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;todoItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todoItemId&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;filteredTodoItem&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TOGGLE_COMPLETED&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updatedTodoList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todoItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;todoItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todoItemId&lt;/span&gt;
          &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;todoItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;todoItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todoItem&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;updatedTodoList&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Breakdown of the Code: We use the usual Switch Case Statements to Evaluate the Actions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First Case ADD_TODO_ITEM -action spread the existing list and add a new todo item to the list with id(unique-ish), label(user-entered value), and completed flag.&lt;/li&gt;
&lt;li&gt;Second Case REMOVE_TODO_ITEM -action filter out the to-do item that needs to be removed based on the id.&lt;/li&gt;
&lt;li&gt;Third Case TOGGLE_COMPLETED - action loop through all the to-do items and toggle the completed flag based on the id.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 3: Create the Context and Provider to Dispatch the Actions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Context and Provider&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TodoListContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;addTodoItem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoItemLabel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ADD_TODO_ITEM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;todoItemLabel&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;removeTodoItem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoItemId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REMOVE_TODO_ITEM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;todoItemId&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;markAsCompleted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoItemId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TOGGLE_COMPLETED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;todoItemId&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodoListContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/TodoListContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this step, we create the TodoListContext and a Provider function that returns the TodoListContext’s Provider.&lt;/p&gt;

&lt;p&gt;Here is the Breakdown of the Code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Here we pass the reducer function and theinitialState to the useReducer hook. This will return state and dispatch. The state will have the initialState. And the dispatch is used to trigger our actions, just like in redux.&lt;/li&gt;
&lt;li&gt;In the value object, we have todoList state, and three functions addTodoItem, removeTodoItem, and markAsCompleted which trigger ADD_TODO_ITEM, REMOVE_TODO_ITEM, and TOGGLE_COMPLETED actions respectively.&lt;/li&gt;
&lt;li&gt;We pass the value object as a prop to the TodoListContext's Provider, so that we can access it using useContext.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 4: Create the Two Components that will use the store.&lt;br&gt;
AddTodo &amp;amp; TodoList&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// AddTodo Component with Input field and Add Button&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AddTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setInputValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;addTodoItem&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TodoListContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Type and add todo item&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setInputValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
        &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;addTodoItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;setInputValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Add&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In thisAddTodocomponent, we use the useContext to subscribe to our TodoListContext and getting addTodoItem dispatch function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//TodoList Component to show the list&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TodoList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;removeTodoItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;markAsCompleted&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;TodoListContext&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todoItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;
          &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`todoItem &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;todoItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completed&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;completed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todoItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;markAsCompleted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todoItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
            &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;delete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;removeTodoItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;X&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In TodoList component, we are using useContext to subscribe to the TodoListContext and getting the todoList state, removeTodoItemand andmarkAsCompleted dispatch functions. We are mapping through todoList and rendering the to-do items and a remove(X) button next to them. On clicking on an item we are marking it as complete and when clicking on X the button we are removing it from the list.&lt;/p&gt;

&lt;p&gt;Step 5: Final step, wrapping the above two components to the Provider.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Final Wrapper &lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AddTodo&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodoList&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here’s the working sample version of the code and the preview. You can Open the Sandbox for the full version of the code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/xenodochial-goodall-94txh?from-embed=&amp;amp;file=/src/App.js"&gt;Example Link for the Code in CodeSandbox&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>hooks</category>
      <category>redux</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Top C++ Project For Beginners</title>
      <author>Rocky</author>
      <pubDate>Sat, 24 Jul 2021 12:27:11 +0000</pubDate>
      <link>https://dev.to/codelivly/top-c-project-for-y-2mo2</link>
      <guid>https://dev.to/codelivly/top-c-project-for-y-2mo2</guid>
      <description>&lt;p&gt;In the past, there used to be a lot of different languages available. But as languages have become more and more complicated, C++ is becoming the language of choice. It’s a compile-once language that does not require external tools to translate it properly. It offers a strong, robust foundation for web programming that most web programmers and developers are already familiar with.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;C++ Programming &lt;/b&gt;is a powerful high-level programming language. You can use C++ for applications as varied as 3D graphics, web applications, games, and more. It’s a language that is used to create high-performance applications, as well as those that serve as middle-ware to others.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;In C++, we often use the term ‘problem’ to mean any structured problem we need to solve. However, the term ‘problem’ when used in programming can actually mean a solution to a specific set of problems. In the C++ world, these problems range from the very simple (such as two numbers that add up to a specific value) to the very complex (such as a program that sets certain variables at specific times).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;C++ is an extremely popular programming language. It’s used by many different software companies. If you want to learn C++, you can do that by making a C++ project for your own learning. If you don’t want to make a C++ project for yourself, then you can always find some C++ examples online.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;b&gt;Read More&lt;/b&gt;&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://bit.ly/3kQXxcr"&gt;C++ Project For Beginners&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>programming</category>
    </item>
    <item>
      <title>Learn web development 02 - HTML Font tags</title>
      <author>Modern Web</author>
      <pubDate>Sat, 24 Jul 2021 12:20:11 +0000</pubDate>
      <link>https://dev.to/kunaal438/learn-web-development-02-html-font-tags-1egj</link>
      <guid>https://dev.to/kunaal438/learn-web-development-02-html-font-tags-1egj</guid>
      <description>&lt;p&gt;Hello, Welcome. My name is kunaal. This is a part of learn web development series.&lt;/p&gt;

&lt;p&gt;In today's article, you'll learn about font tags in HTML. Earlier, We discussed about HTML, and programming languages. So, if you want, you can to checkout that &lt;a href="https://dev.to/kunaal438/about-html-learn-web-development-series-01-4jbh"&gt;article&lt;/a&gt; first. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#font-tags"&gt;
  &lt;/a&gt;
  Font tags
&lt;/h1&gt;

&lt;p&gt;So till now we learnt about basic HTML structure. But, what you think how can we add texts to our web page? Well, we have lots of tags which allow us to add text to our page. So, let's check some.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#h1-to-h6-tag"&gt;
  &lt;/a&gt;
  h1 to h6 tag
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;&lt;/code&gt; stands for heading tag 1. This tag is used to add heading on the page. we have some more tags for headings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;heading&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;heading&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;heading&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;heading&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h5&amp;gt;&lt;/span&gt;heading&lt;span class="nt"&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h6&amp;gt;&lt;/span&gt;heading&lt;span class="nt"&gt;&amp;lt;/h6&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nb8l_HRu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zk9crt2ybdx6ebsvn8v.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nb8l_HRu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zk9crt2ybdx6ebsvn8v.PNG" alt="Capture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, that was about headings but what about links ?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#anchor-tag"&gt;
  &lt;/a&gt;
  Anchor tag
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;a&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt; anchor tag. This is used to add links in the web page. yes, those blue color underlined text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"www.google.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;link&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ksHOYI-k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vmyc1frihpxhocyp6kt.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ksHOYI-k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vmyc1frihpxhocyp6kt.PNG" alt="Capture-2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you notice. We have &lt;code&gt;href="www.google.com"&lt;/code&gt; inside &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;. Now what is that ? &lt;code&gt;href=""&lt;/code&gt; is know as attributes in HTML. Anything that you type inside a tag with quotes &lt;code&gt;&amp;lt;tag attribute=""&amp;gt;&amp;lt;/tag&amp;gt;&lt;/code&gt; is knows as attributes. &lt;code&gt;href&lt;/code&gt; stands for header reference. This attribute is used to add link url. Means in this case, we set our url to &lt;code&gt;www.google.com&lt;/code&gt;. If we don't set any &lt;code&gt;href&lt;/code&gt; attribute. Anchor tag will not re-direct you to anywhere.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you have to redirect to other HTML file give files name in href. Example &lt;code&gt;href="index.html"&lt;/code&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#p-tag"&gt;
  &lt;/a&gt;
  P tag
&lt;/h3&gt;

&lt;p&gt;hmm! Now we know about headings, links, but about paragraphs or normal texts. Well, for that we have &lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt; paragraph tags.&lt;br&gt;
This do exactly what it's name says. Paragraphhhhhhh.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;this is a very long long paragraphhhhhhhhhhhhh.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  output
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RdC4TF0Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pupesy1hw68w6r99s6e8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RdC4TF0Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pupesy1hw68w6r99s6e8.PNG" alt="para"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember all these property should be inside &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#font-styling-relating-tags"&gt;
  &lt;/a&gt;
  Font styling relating tags
&lt;/h1&gt;

&lt;p&gt;Now, we have very basic font styling tags. So let's see them with example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- for bold text --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;bold text&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&lt;/span&gt; 
&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- for italic font --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;i&amp;gt;&lt;/span&gt;italic font&lt;span class="nt"&gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- for underlined text --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;u&amp;gt;&lt;/span&gt;underlined text&lt;span class="nt"&gt;&amp;lt;/u&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- for strike through text --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;s&amp;gt;&lt;/span&gt;stike through text&lt;span class="nt"&gt;&amp;lt;/s&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- you can use more the one tags at a time --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;b&amp;gt;&amp;lt;i&amp;gt;&amp;lt;u&amp;gt;&lt;/span&gt;this is bold, italic and underlined :) &lt;span class="nt"&gt;&amp;lt;/u&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- By default if you give more that 1 space it trims down to 1 space
    but if you want to add text with lots of space. use pre tag --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;pre&amp;gt;&lt;/span&gt;
     h
      e 
       l
        l
         o
&lt;span class="nt"&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;This tag is know as break line. This tag is used to a line break. And Notice we are not close it. Because, In HTML we have some tags which do not close.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most of these tags use you'll never use. Because now days, we use CSS to achieve this same result.&lt;br&gt;
If you have any doubt. Ask me in comments.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember to close all tags, and also close them in order. For example&lt;/p&gt;


&lt;pre class="highlight html"&gt;&lt;code&gt;wrong.
&lt;span class="nt"&gt;&amp;lt;b&amp;gt;&amp;lt;i&amp;gt;&amp;lt;u&amp;gt;&lt;/span&gt;This is wrong&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/u&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;right.&lt;/p&gt;


&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;b&amp;gt;&amp;lt;i&amp;gt;&amp;lt;u&amp;gt;&lt;/span&gt;This is right&lt;span class="nt"&gt;&amp;lt;/u&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;
&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g38WLCQS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unvvidgigpq7922xagro.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g38WLCQS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unvvidgigpq7922xagro.PNG" alt="Capture-3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, that's it about Font tags in HTML. I hope you understood each and everything. In the next article we'll learn about lists in HTML. So make sure you follow me.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#homework"&gt;
  &lt;/a&gt;
  Homework
&lt;/h1&gt;

&lt;p&gt;I appreciate, If you do homework as well for you better practice. Today's home is.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--
You have to make two pages. you can give any name to them. 
But make sure you give these things.

both page should contain
1. at least one heading tag.
2. at least two paragraphs, and you should make at least one paragraph bold, italic or underline.
3. link to the other page.
-&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#for-example"&gt;
  &lt;/a&gt;
  For example
&lt;/h4&gt;

&lt;h6&gt;
  &lt;a href="#homehtml"&gt;
  &lt;/a&gt;
  home.html
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2duUaaDU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/293oii968anqexcpsb5e.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2duUaaDU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/293oii968anqexcpsb5e.PNG" alt="page1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#abouthtml"&gt;
  &lt;/a&gt;
  about.html
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RQ6DCZA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24yfule1xovcs2zvt79r.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RQ6DCZA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24yfule1xovcs2zvt79r.PNG" alt="page 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want, you can tag your homework to my &lt;a href="https://www.instagram.com/modern_web_channel/"&gt;Instagram&lt;/a&gt;. I'll be glad to see you developing web pages.&lt;/p&gt;

&lt;p&gt;So, that's sit, if I missed something or you have any doubt feel free to ask me in discussion.&lt;/p&gt;

&lt;p&gt;If you like, you can subscribe my &lt;a href="https://www.youtube.com/c/modern_web?sub_confirmation=1"&gt;youtube channel&lt;/a&gt;.I create awesome web development tutorials. You can also watch tutorial on &lt;a href="https://www.youtube.com/watch?v=89IFrt_Unj0"&gt;Gradient Infinity loading animation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks For reading.&lt;/p&gt;

</description>
      <category>html</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>What is MongoDB and Why it is the most popular Database today?
</title>
      <author>Suhail Kakar</author>
      <pubDate>Sat, 24 Jul 2021 12:17:36 +0000</pubDate>
      <link>https://dev.to/suhailkakar/what-is-mongodb-and-why-it-is-the-most-popular-database-today-3f79</link>
      <guid>https://dev.to/suhailkakar/what-is-mongodb-and-why-it-is-the-most-popular-database-today-3f79</guid>
      <description>&lt;p&gt;This article was first published on my &lt;a href="https://blog.suhailkakar.com/"&gt;own&lt;/a&gt; blog &lt;a href="https://blog.suhailkakar.com/what-is-mongodb-and-why-it-is-the-most-popular-database-today"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-mongodb"&gt;
  &lt;/a&gt;
  What is MongoDB
&lt;/h3&gt;

&lt;p&gt;MongoDB is a document-oriented NoSQL database for storing large amounts of data. MongoDB uses collections and documents instead of tables and rows, as in traditional relational databases. MongoDB is a database that first appeared in the mid-2000s.&lt;/p&gt;

&lt;p&gt;The NoSQL database is a replacement for traditional SQL databases, and it includes almost all of the functionality found in RDBMS (Relational Database Management Systems) systems. Due to its simple architecture, support for both horizontal and vertical scalability, and easy and simple control over the data, NoSQL databases have grown considerably more popular in recent years than in the past.&lt;/p&gt;

&lt;p&gt;It allows programmers to store data in the database according to their program's real requirements. We can't get this kind of functionality with a standard RDBMS database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mongodb-vs-sql-databases"&gt;
  &lt;/a&gt;
  MongoDB vs SQL Databases
&lt;/h3&gt;

&lt;p&gt;The way MongoDB and SQL Databases manage data is the most significant distinction between them. In SQL databases, data is stored in form of traditional 2 dimensional row-column structure while in MongoDB rich data document model is followed, which allows storage of any type of data.&lt;/p&gt;

&lt;p&gt;Here is also some other key differences between MongoDB and other SQL databases :&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;

&lt;tbody&gt;

&lt;tr&gt;

&lt;th&gt;SQL Database&lt;/th&gt;

&lt;th&gt;NoSQL Database (MongoDB)&lt;/th&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Relational database&lt;/td&gt;

&lt;td&gt;Non-relational database&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Supports SQL query language&lt;/td&gt;

&lt;td&gt;Supports JSON query language&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Table based&lt;/td&gt;

&lt;td&gt;Collection based and key-value pair&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Row based&lt;/td&gt;

&lt;td&gt;Document based&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Column based&lt;/td&gt;

&lt;td&gt;Field based&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Vertically scalable - increasing RAM&lt;/td&gt;

&lt;td&gt;Horizontally scalable - add more servers&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Contains schema which is predefined&lt;/td&gt;

&lt;td&gt;Contains dynamic schema&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Not fit for hierarchical data storage&lt;/td&gt;

&lt;td&gt;Best fit for hierarchical data storage&lt;/td&gt;

&lt;/tr&gt;

&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-mongodb"&gt;
  &lt;/a&gt;
  Advantages of MongoDB
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;When compared to relational databases, performance tweaking is a breeze.&lt;/li&gt;
&lt;li&gt;Very easy to scale.&lt;/li&gt;
&lt;li&gt;Because it is a NOSQL database, it is inherently secure because no SQL injection can be performed.&lt;/li&gt;
&lt;li&gt;The document query language supported by MongoDB plays a vital role in supporting dynamic queries.&lt;/li&gt;
&lt;li&gt;MongoDB does not need the use of a virtual machine.&lt;/li&gt;
&lt;li&gt;Due to the fact that it stores data in internal memory, it allows for quicker data access.&lt;/li&gt;
&lt;li&gt;There is no requirement to relate application objects to data objects.&lt;/li&gt;
&lt;li&gt;MongoDB may also be utilised as a file system, which makes load balancing much easier.&lt;/li&gt;
&lt;li&gt;There is a substantial quantity of documentation accessible.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-makes-mongodb-popular"&gt;
  &lt;/a&gt;
  what makes MongoDB popular?
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;High Performance : At any size, NoSQL (MongoDB) databases are designed to offer excellent performance in terms of both throughput and latency.&lt;/li&gt;
&lt;li&gt;Flexible Data Model : The document data format in MongoDB makes it simple to store and aggregate data of any type without sacrificing complex validation rules, data access, or extensive indexing capability.&lt;/li&gt;
&lt;li&gt;Set of Integrated Features : Analytics, text search, geolocation, in-memory performance,data visualization, and global replication enable you to reliably and securely provide a wide range of real-time applications on a single platform. To accomplish this successfully, RDBMS systems necessitate extra, sophisticated technologies that necessitate separate integration overhead and expenditure.&lt;/li&gt;
&lt;li&gt;Lower TCO : MongoDB allows application development teams to be more productive. The fact that management is as simple as clicking a button means that operations teams are as well. MongoDB operates on commodity hardware, cutting expenses significantly.&lt;/li&gt;
&lt;li&gt;Scalability across several datacenters : MongoDB can be scaled both within and beyond geographically distant data centres, bringing new levels of availability and scalability to the table. MongoDB grows quickly with minimal downtime or changes to your application as your deployments grow in terms of data volume and performance.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;MongoDB offers affordable yearly subscriptions that include worldwide support 24 hours a day, seven days a week, 365 days a year. When compared to utilising a relational database, your applications may be delivered at a tenth of the cost.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#companies-that-use-mongodb"&gt;
  &lt;/a&gt;
  Companies that use MongoDB
&lt;/h3&gt;

&lt;p&gt;Adobe, Buzzfeed, Comcast, Cisco, CodeAcademy, Craigslist, Ebay, EA, E-Harmony, Forbes, Google, Foursquare, IBM, Infosys, and the UK Government are just a few of the companies that utilise MongoDB.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#courses"&gt;
  &lt;/a&gt;
  Courses
&lt;/h3&gt;

&lt;p&gt;Here are some great courses that helps you learn MongoDB faster &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="https://www.udemy.com/course/mongodb-the-complete-developers-guide/"&gt;MongoDB - The Complete Developer's Guide 2021 &lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.udemy.com/course/the-complete-developers-guide-to-mongodb/"&gt;The Complete Developers Guide to MongoDB&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.udemy.com/course/mongodb-essentials-m/"&gt;Complete MongoDB Administration Guide&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>mongodb</category>
      <category>database</category>
      <category>sql</category>
    </item>
    <item>
      <title>What did you teach this week?</title>
      <author>Aatmaj</author>
      <pubDate>Sat, 24 Jul 2021 12:04:50 +0000</pubDate>
      <link>https://dev.to/aatmaj/what-did-you-teach-this-week-1g7h</link>
      <guid>https://dev.to/aatmaj/what-did-you-teach-this-week-1g7h</guid>
      <description>&lt;p&gt;Today is a very Auspicious day. Here in India, today is celebrated as the day of &lt;em&gt;Guru Purnima&lt;/em&gt;. On this day we all express gratitude towards our teachers. Teachers may not necessarily mean professors. Our boss, colleague, or even our juniors. Everyone teaches us in some way or the other.😇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iGtysxPL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2whihea0a6spwrejtbdf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iGtysxPL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2whihea0a6spwrejtbdf.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
So why don't we too contribute towards teaching? Let us all celebrate this honor of teaching others.😃 Inspired by the &lt;a href="https://dev.to/devteam/what-was-your-win-this-week-4ojf"&gt;Win of the week &lt;/a&gt; and the &lt;a href="https://dev.to/nickytonline/july-22nd-2021-what-did-you-learn-this-week-3ck"&gt;What did you learnt this week&lt;/a&gt; discussion blogs, I have decided to start this 'What did you teach this week?' blog from today's occasion! 😊&lt;/p&gt;

&lt;p&gt;Teaching others may not necessarily mean giving a lecture to an audience or starting a YouTube teaching channel. We are constantly teaching others, and simultaneously learning from others. &lt;br&gt;
Basically when you explain ideas to others, it counts as teaching. 😊&lt;br&gt;
So if you have helped your fellow student learn a new concept, or taught your junior effective debugging, you have done the noble task of teaching.😄 Even posting answers on stack exchange is a way of teaching. Writing blogs is a way of teaching too. Are you not sharing your knowledge with others!😀&lt;/p&gt;

&lt;p&gt;So if you too have taught anyone, anything this week, however trivial please post in the comments below. 👇&lt;/p&gt;

&lt;p&gt;Encourage and inspire others to take on this sacred task of teaching. 🤘Let us all come together on this day of &lt;em&gt;Guru Purnima&lt;/em&gt; and create a wave of positivity!✌️&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p8qtJ3d0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/meex73hend1ncesb8p8z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p8qtJ3d0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/meex73hend1ncesb8p8z.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>teachingthisweek</category>
      <category>teaching</category>
    </item>
    <item>
      <title>Learning Python-Basic course: Day 21,Summary of the week and dictionary exercises.</title>
      <author>Aatmaj</author>
      <pubDate>Sat, 24 Jul 2021 12:04:07 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-basic-course-day-21-summary-of-the-week-and-dictionary-exercises-391e</link>
      <guid>https://dev.to/aatmaj/learning-python-basic-course-day-21-summary-of-the-week-and-dictionary-exercises-391e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-we-will-do-more-questions-related-to-dictionaries-for-a-thorough-revision-in-the-process-we-also-will-learn-a-few-methods-related-to-dictionaries"&gt;
  &lt;/a&gt;
  Today we will do more questions related to dictionaries for a thorough revision. In the process, we also will learn a few methods related to dictionaries.
&lt;/h2&gt;




&lt;p&gt;Summary of the week-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-18-dictionaries-in-python-30af"&gt;Day 18&lt;/a&gt; We learnt about dictionaries. We checked out one example which covered many inbuilt functions related to dictionaries.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-19-practicing-dictionary-exercises-1723"&gt;Day 19&lt;/a&gt; We practiced a few questions on dictionaries and had quite a thorough practice of dictionaries in Python. We did programs to fuse two separate lists to a single dictionary, paired out even numbers and made fancy dictionaries using for loops.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-20-hashtables-via-dictionaries-3nf1"&gt;Day 20&lt;/a&gt; We learnt about hashtables and how to create them using dictionaries. We tried out simple and chained hashtables and worked out information retrieval using them.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#sample-questionconcatenate-two-dictionaries"&gt;
  &lt;/a&gt;
  Sample question-Concatenate two dictionaries.
&lt;/h2&gt;

&lt;p&gt;We will now fuse two dictionaries to create a new one using the &lt;code&gt;update()&lt;/code&gt; method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="c1"&gt;#for every element in dictionary a AND dictionary b,
&lt;/span&gt;    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#update the dictionary to include these values.
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{1: 10, 2: 20, 3: 30, 4: 40}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Conflict resolution&lt;/strong&gt;- In case both the dictionaries have a same key, in that case the last value is held true by the &lt;code&gt;update()&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{1: 10, 2: 60, 3: 30, 4: 40}
{1: 10, 2: 20, 3: 30, 4: 40}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#editing-keys"&gt;
  &lt;/a&gt;
  Editing keys.
&lt;/h2&gt;

&lt;p&gt;I know what you all must be thinking. Keys are non-mutable right?&lt;br&gt;
Yes. they are. but here is a cleaver trick&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"e"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# Replace 'e' by 'd'
&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"d"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"e"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{'b': 2, 'a': 1, 'c': 3, 'd': 4}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Today there are no exercises from my side..😃...But wait!😒 I am providing a reference link for taking on a dictionary quiz to clear all your concepts!😋&lt;br&gt;
&lt;a href="https://pynative.com/python-dictionary-quiz/"&gt;Dictionary quiz by PYnative&lt;/a&gt;&lt;br&gt;
The quiz contains 14 Questions. 14/14  is the target&lt;/p&gt;

&lt;p&gt;Comment your progress below by pasting screenshot of your scores!🤠&lt;/p&gt;




&lt;p&gt;✌️So friends that's all for now. 😊 Hope you all are having fun.😎 Please let me know in the comment section below 👇. And don't forget to like the post if you did. 😍 I am open to any suggestions or doubts. 🤠 Just post in the comments below or gmail me. 😉&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#please-do-follow-me-on-github-and-star-the-learning-python-repository-which-contains-all-the-material-for-this-course"&gt;
  &lt;/a&gt;
  Please do follow me on &lt;a href="https://github.com/Aatmaj-Zephyr"&gt;Github&lt;/a&gt; and Star the &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python"&gt;Learning Python Repository&lt;/a&gt; which contains all the material for this course😁
&lt;/h4&gt;

&lt;p&gt;Thank you all👍&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;For those who have not yet made account in Dev.to, you can have a free easy sign-up using your mail or GitHub accounts. I would suggest the budding developers to create your GitHub free account right away. You would require to register sooner or later anyways&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥&lt;br&gt;
Next day will begin from Tuesday📅, Monday is reserved for.... &lt;a href="https://dev.to/aatmaj/launching-matlab-mondays-a-crash-course-nb1"&gt;MATLAB MONDAYS💥&lt;/a&gt; Follow me for updates...&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to write unit tests in JavaScript with Jest</title>
      <author>Domagoj Štrekelj</author>
      <pubDate>Sat, 24 Jul 2021 11:39:48 +0000</pubDate>
      <link>https://dev.to/dstrekelj/how-to-write-unit-tests-in-javascript-with-jest-2e83</link>
      <guid>https://dev.to/dstrekelj/how-to-write-unit-tests-in-javascript-with-jest-2e83</guid>
      <description>&lt;p&gt;Unit testing is an important and often overlooked part of the development process. It is considered boring by many, and being traditionally difficult to properly set up earned it a poor reputation early on. The benefits of shipping quality code certainly outweigh any negatives, but how does one find the time and muster the effort to start writing unit tests?&lt;/p&gt;

&lt;p&gt;Lucky for us, writing unit tests in JavaScript has never been faster, easier, and arguably more fun thanks to Jest.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt; is a feature-rich JavaScript testing framework that aims to bring testing to the masses. It's near-zero configuration approach makes it simple to set up, and a familiar API makes writing tests fairly straightforward.&lt;/p&gt;

&lt;p&gt;This article will provide a brief introduction into Jest and the concepts behind unit testing. We will learn how to install Jest, write test suites with test cases and fixtures, and run tests both with and without coverage reports. &lt;/p&gt;

&lt;p&gt;We will assume that we're testing a module containing a simple function behaving as a validation rule. The rule checks whether the validated value is an integer number. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// isInteger.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This implementation is naive and faulty on purpose. We want to see what our tests will teach us about the flaws in our code by passing and failing test cases. Fixing the implementation is not covered by this post, but feel free to play with it as we move through the article.&lt;/p&gt;

&lt;p&gt;Read on to find out more!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-a-unit-test"&gt;
  &lt;/a&gt;
  What is a unit test?
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;unit test&lt;/strong&gt; is an automated test of a unit of source code. A unit test asserts if the unit's behaviour matches expectations.&lt;/p&gt;

&lt;p&gt;A unit is usually a line of code, function, or class. There is no strict definition of what makes up a unit, but it's common to start with whatever seems "smallest".&lt;/p&gt;

&lt;p&gt;Units that have no dependencies are called &lt;strong&gt;isolated (solitary) units&lt;/strong&gt;. Units that have dependencies are called &lt;strong&gt;sociable units&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Solitary units are easy to test, but sociable units are more difficult. The output of a sociable unit depends on other units of code - if other units fail, the tested unit fails as well. This created two unit test styles: sociable unit tests and solitary unit tests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sociable unit tests&lt;/strong&gt; fail if the dependencies of a sociable unit are also failing. The tested unit is not supposed to work if it's dependencies don't work, so a failing test in this case is a good sign.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solitary unit tests&lt;/strong&gt; isolate sociable units by creating &lt;strong&gt;mock implementations&lt;/strong&gt; of their dependencies. Mocks control how dependencies behave during tests, making sociable units predictable to test.&lt;/p&gt;

&lt;p&gt;No matter the unit test style, the goal of unit testing remains the same - to &lt;strong&gt;ensure that individual parts of the program are working correctly as expected&lt;/strong&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-jest"&gt;
  &lt;/a&gt;
  What is Jest?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt;&lt;/strong&gt; is a JavaScript testing framework designed to make testing as easy as possible. It provides all the essential tools for running tests, making assertions, mocking implementations, and more in a single package.&lt;/p&gt;

&lt;p&gt;Before Jest, the JavaScript ecosystem relied on several different tools and frameworks to give developers a way to write and run tests. Configuring these tools was rarely simple and easy. Jest aims to fix that by using sensible default configurations that work "out of the box", with little to no additional configuration required in most cases.&lt;/p&gt;

&lt;p&gt;Jest is currently one of the most popular testing technology choices, consistently earning high satisfaction marks in the &lt;a href="https://2020.stateofjs.com/en-US/technologies/testing/"&gt;State of JS developer survey since 2017&lt;/a&gt;. It's the reliable choice for testing JavaScript projects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
Jest also &lt;a href="https://jestjs.io/docs/getting-started#using-typescript"&gt;supports&lt;/a&gt; TypeScript via Babel.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#how-to-install-jest"&gt;
  &lt;/a&gt;
  How to install Jest?
&lt;/h2&gt;

&lt;p&gt;Install the &lt;code&gt;jest&lt;/code&gt; &lt;a href="https://jestjs.io/docs/getting-started"&gt;package&lt;/a&gt; (and optional typings) to a new or existing project's &lt;code&gt;package.json&lt;/code&gt; file using your package manager of choice:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# For NPM users&lt;/span&gt;
npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; jest @types/jest

&lt;span class="c"&gt;# Yarn users&lt;/span&gt;
yarn add &lt;span class="nt"&gt;--dev&lt;/span&gt; jest @types/jest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! We're now ready to run tests with Jest.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
It's good practice to install Jest and any other testing tools as development dependencies. This speeds up installation in environments where only dependencies required for the project to build and run are installed.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#how-to-run-tests-with-jest"&gt;
  &lt;/a&gt;
  How to run tests with Jest?
&lt;/h2&gt;

&lt;p&gt;To run tests with Jest call the &lt;code&gt;jest&lt;/code&gt; &lt;a href="https://jestjs.io/docs/getting-started"&gt;command&lt;/a&gt; inside the root of the project folder.&lt;/p&gt;

&lt;p&gt;We will update the project's &lt;code&gt;package.json&lt;/code&gt; with a test script that calls the &lt;code&gt;jest&lt;/code&gt; command for us:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ... package.json contents&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ... existing scripts&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now run the newly created &lt;code&gt;test&lt;/code&gt; script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# NPM users&lt;/span&gt;
npm run &lt;span class="nb"&gt;test&lt;/span&gt;

&lt;span class="c"&gt;# Yarn users&lt;/span&gt;
yarn run &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If everything is set up correctly Jest will give us the results of any tests it found and ran.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
Jest exits with status code 1 when a test case fails. Seeing &lt;code&gt;npm ERR!&lt;/code&gt; errors in the console is expected in this case.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#how-to-create-a-test-with-jest"&gt;
  &lt;/a&gt;
  How to create a test with Jest?
&lt;/h2&gt;

&lt;p&gt;To create a test for use with Jest we create a &lt;code&gt;*.spec.js&lt;/code&gt; or &lt;code&gt;*.test.js&lt;/code&gt; file that will contain our test cases.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
Jest is &lt;a href="https://jestjs.io/docs/configuration#testmatch-arraystring"&gt;configured by default&lt;/a&gt; to look for &lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.jsx&lt;/code&gt;, &lt;code&gt;.ts&lt;/code&gt; and &lt;code&gt;.tsx&lt;/code&gt; files inside of &lt;code&gt;__tests__&lt;/code&gt; folders, as well as any files with a suffix of &lt;code&gt;.test&lt;/code&gt; or &lt;code&gt;.spec&lt;/code&gt; (this includes files called &lt;code&gt;test&lt;/code&gt; or &lt;code&gt;spec&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since &lt;code&gt;isInteger.js&lt;/code&gt; is the name of the module we're testing, we will write our tests in an &lt;code&gt;isInteger.spec.js&lt;/code&gt; file created in the same folder as the module:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// isInteger.spec.js&lt;/span&gt;
&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sanity check&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;💡&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
Whether you choose to write tests inside a dedicated folder or right next to your modules, there is no right or wrong way to structure tests inside a project. Jest is flexible enough to work with most project architectures without configuration.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The test's description is "Sanity check". &lt;strong&gt;Sanity checks&lt;/strong&gt; are basic tests to ensure the system behaves rationally. The test will assert that we expect the value &lt;code&gt;true&lt;/code&gt; to be &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Run the test and if it passes everything is set up correctly.&lt;/p&gt;

&lt;p&gt;Congratulations! We just wrote our first test!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-write-a-test-case-in-jest"&gt;
  &lt;/a&gt;
  How to write a test case in Jest?
&lt;/h2&gt;

&lt;p&gt;To write a test case we first define the outcomes that we must validate to ensure that the system is working correctly.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;isInteger.js&lt;/code&gt; module is a function that takes one parameter and returns &lt;code&gt;true&lt;/code&gt; if the parameter is an integer value or &lt;code&gt;false&lt;/code&gt; if it isn't. We can create two test cases from that definition:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;isInteger()&lt;/code&gt; passes for integer value;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;isInteger()&lt;/code&gt; fails for non-integer value.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To create a test case in Jest we use the &lt;code&gt;test()&lt;/code&gt; &lt;a href="https://jestjs.io/docs/api#testname-fn-timeout"&gt;function&lt;/a&gt;. It takes a test name string and handler function as the first two arguments.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
The &lt;code&gt;test()&lt;/code&gt; function can also be called under the alias - &lt;code&gt;it()&lt;/code&gt;. Choose one over the other depending on readability or personal preference.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tests are based on assertions. &lt;strong&gt;Assertions&lt;/strong&gt; are made up of &lt;a href="https://jestjs.io/docs/expect"&gt;expectations&lt;/a&gt; and &lt;a href="https://jestjs.io/docs/expect#tobevalue"&gt;matchers&lt;/a&gt;. The simplest and most common assertion expects the tested value to match a specific value. &lt;/p&gt;

&lt;p&gt;An expectation is created with the &lt;code&gt;expect()&lt;/code&gt; &lt;a href="https://jestjs.io/docs/expect#expectvalue"&gt;function&lt;/a&gt;. It returns an object of matcher methods with which we assert something expected about the tested value. The matcher &lt;a href="https://jestjs.io/docs/expect#tobevalue"&gt;method&lt;/a&gt; &lt;code&gt;toBe()&lt;/code&gt; checks if the expectation matches a given value.&lt;/p&gt;

&lt;p&gt;In our tests, we can expect &lt;code&gt;isInteger()&lt;/code&gt; to be &lt;code&gt;true&lt;/code&gt; for the integer value 1, and &lt;code&gt;false&lt;/code&gt; for the non-integer value 1.23.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// isInteger.spec.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isInteger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./isInteger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isInteger passes for integer value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isInteger fails for non-integer value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.23&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running Jest should now give us a report on which tests pass, and which tests fail.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-use-fixtures-in-jest"&gt;
  &lt;/a&gt;
  How to use fixtures in Jest?
&lt;/h2&gt;

&lt;p&gt;To use fixtures in Jest we can use the &lt;code&gt;test.each()&lt;/code&gt; &lt;a href="https://jestjs.io/docs/api#testeachtablename-fn-timeout"&gt;function&lt;/a&gt;. It performs a test for each fixture in an array of fixtures. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fixtures&lt;/strong&gt; are data representing conditions - such function arguments and return values - under which the unit test is performed. Using fixtures is a quick and easy way to assert that a unit's behaviour matches expectations under different conditions without having to write multiple tests.&lt;/p&gt;

&lt;p&gt;In Jest, a fixture can be a single value or an array of values. The fixture is available in the test handler function through parameters. The value or values of a fixture can be injected in the description through &lt;a href="https://jestjs.io/docs/api#describeeachtablename-fn-timeout"&gt;printf formatting&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// isInteger.spec.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isInteger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./isInteger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;integerNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;integerNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isInteger passes for integer value %j&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// ... or...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;integerNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;integerNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isInteger passes for integer value %j with result %j&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running Jest should now give us a report on which tests pass, and which tests fail, where every test will correspond to a fixture from our array of fixtures.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;%j&lt;/code&gt; is a &lt;a href="https://nodejs.org/api/util.html#util_util_format_format_args"&gt;printf formatting specifier&lt;/a&gt; that prints the value as JSON. It's a good choice for fixtures that contain values of different types.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#how-to-group-test-cases-in-jest-into-a-test-suite"&gt;
  &lt;/a&gt;
  How to group test cases in Jest into a test suite?
&lt;/h2&gt;

&lt;p&gt;To group test cases in Jest into a test suite we can use the &lt;code&gt;describe()&lt;/code&gt; &lt;a href="https://jestjs.io/docs/api#describename-fn"&gt;function&lt;/a&gt;. It takes a suite name string and handler function as the first two arguments.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;test suite&lt;/strong&gt; is a collection of test cases grouped together for execution purposes. The goal of a test suite is to organise tests by common behaviour or functionality. If all tests within a suite pass, we can assume that the behaviour or functionality meets expectations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// isInteger.spec.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isInteger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./isInteger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isInteger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;integerNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;integerNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;passes for integer value %j&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;floatNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;10.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;10.1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;floatNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fails for non-integer value %j&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running Jest should now give us a report on which tests pass, and which tests fail, grouped into described test suites.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;describe()&lt;/code&gt; blocks can also be nested to create more complex test hierarchies.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#how-to-run-jest-every-time-files-change"&gt;
  &lt;/a&gt;
  How to run Jest every time files change?
&lt;/h2&gt;

&lt;p&gt;To run Jest every time files change we can use the &lt;code&gt;--watch&lt;/code&gt; and &lt;code&gt;--watchAll&lt;/code&gt; &lt;a href="https://jestjs.io/docs/cli#--watch"&gt;flags&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;--watch&lt;/code&gt; flag will tell Jest to watch for changes in files tracked by Git. Jest will run only those tests affected by the changed files. For this to work, the project must also be a Git repository.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;--watchAll&lt;/code&gt; flag will tell Jest to watch all files for changes. Whenever a file changes, Jest will run all tests.&lt;/p&gt;

&lt;p&gt;Both &lt;code&gt;--watch&lt;/code&gt; and &lt;code&gt;--watchAll&lt;/code&gt; modes support additional filtering of tests while the tests are running. This makes it possible to only run tests matching a file name, or only run failing tests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Runs tests on changed files only and re-runs for any new change&lt;/span&gt;
&lt;span class="c"&gt;# Note: the project must also be a git repository&lt;/span&gt;
jest &lt;span class="nt"&gt;--watch&lt;/span&gt;

&lt;span class="c"&gt;# Runs tests on all files and re-runs for any new change&lt;/span&gt;
jest &lt;span class="nt"&gt;--watchAll&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#how-to-get-a-test-coverage-report-with-jest"&gt;
  &lt;/a&gt;
  How to get a test coverage report with Jest?
&lt;/h2&gt;

&lt;p&gt;To get a test coverage report with Jest we can use the &lt;code&gt;--coverage&lt;/code&gt; &lt;a href="https://jestjs.io/docs/cli#--coverageboolean"&gt;flag&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test coverage&lt;/strong&gt; is a software testing metric that describes how many lines of source code (statements) of the tested unit are executed (covered) by tests. A test coverage of 100% for a unit means every line of code in the unit has been called by the test.&lt;/p&gt;

&lt;p&gt;We should always aim for a high test coverage - ideally 100% - but also keep in mind that total coverage does not mean we tested all cases, only lines of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Runs tests and prints a test coverage afterwards&lt;/span&gt;
jest &lt;span class="nt"&gt;--coverage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;💡&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
We can combine different flags to get more features out of Jest. For example, to watch all files and get a coverage report we can run &lt;code&gt;jest --watchAll --coverage&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With that we're all set! We can now write tests and run them when whenever a file is changed, and also review test coverage reports for covered and uncovered lines of code.!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#jest-unit-test-example-code"&gt;
  &lt;/a&gt;
  Jest unit test example code
&lt;/h2&gt;

&lt;p&gt;To install Jest:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# For NPM users&lt;/span&gt;
npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; jest @types/jest

&lt;span class="c"&gt;# Yarn users&lt;/span&gt;
yarn add &lt;span class="nt"&gt;--dev&lt;/span&gt; jest @types/jest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The unit to be tested in &lt;code&gt;isInteger.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// isInteger.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The unit test in &lt;code&gt;isInteger.spec.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// isInteger.spec.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isInteger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./isInteger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isInteger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;integerNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;integerNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;passes for integer value %j&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;floatNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;10.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;10.1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;floatNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fails for non-integer value %j&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The test script in &lt;code&gt;package.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;jest &lt;span class="nt"&gt;--watchAll&lt;/span&gt; &lt;span class="nt"&gt;--coverage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#homework-and-next-steps"&gt;
  &lt;/a&gt;
  Homework and next steps
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Write more comprehensive tests. How are strings handled? Objects? &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;? Consider adding more fixtures to cover these cases.&lt;/li&gt;
&lt;li&gt;Fix the code so the tests pass or write a newer, better implementation.&lt;/li&gt;
&lt;li&gt;Achieve 100% code coverage in the coverage report.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Thank you for taking the time to read through this article!&lt;/p&gt;

&lt;p&gt;Have you tried writing unit tests in Jest before? How do you feel about Jest?&lt;/p&gt;

&lt;p&gt;Leave a comment and start a discussion!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>testing</category>
      <category>webdev</category>
    </item>
    <item>
      <title>JavaScript Behind The Scenes: Execution Context &amp; The Call Stack</title>
      <author>Pawan Bhatt 👨‍💻</author>
      <pubDate>Sat, 24 Jul 2021 11:17:21 +0000</pubDate>
      <link>https://dev.to/bhattpawan/javascript-behind-the-scenes-execution-context-the-call-stack-240l</link>
      <guid>https://dev.to/bhattpawan/javascript-behind-the-scenes-execution-context-the-call-stack-240l</guid>
      <description>&lt;p&gt;Hey fellow developers, in the last blog, we learnt about &lt;a href="https://dev.to/bhattpawan/discovering-javascript-the-javascript-engine-runtime-5hia"&gt;&lt;strong&gt;The JavaScript Engine &amp;amp; The Runtime&lt;/strong&gt;&lt;/a&gt; . So today we continue our learnings on the &lt;em&gt;Behind The Scenes&lt;/em&gt; of JavaScript, by having a clear understanding of the &lt;strong&gt;Execution Context and The Call Stack&lt;/strong&gt;. Without any further ado, lets dive straight in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-execution-context"&gt;
  &lt;/a&gt;
  What is an Execution Context?
&lt;/h2&gt;

&lt;p&gt;Execution Context is an environment that executes our JavaScript Code. In addition to this, it also stores all the necessary information that is needed for execution like the variable names or the argument names passed to a function. &lt;br&gt;
&lt;em&gt;"Everything in JavaScript happens inside the Execution Context"&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#execution-context-made-easy"&gt;
  &lt;/a&gt;
  Execution Context made easy....
&lt;/h3&gt;

&lt;p&gt;To understand Execution Context in a better way, let us take an example of us ordering a burger from our favorite store. So, when we get our burger, we get the following things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Burger (of course)&lt;/li&gt;
&lt;li&gt;The Polybag / Paperbag (containing our order)&lt;/li&gt;
&lt;li&gt;Ketchup, Tissues, Fries, Cola and other add-ons, which enhance our burger eating experience.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So considering our order, we can draw the following comparisons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Burger -&amp;gt; Our JavaScript Code&lt;/li&gt;
&lt;li&gt;The Polybag / Paperbag -&amp;gt; Execution Context &lt;/li&gt;
&lt;li&gt;Ketchup, Tissues, Fries etc -&amp;gt; The functions, variables or arguments passed to the function which help/enhance our JavaScript code execution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an illustration for the same:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3E2au8V8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627029139394/0p5ZR0kUv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3E2au8V8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627029139394/0p5ZR0kUv.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#whats-inside-an-execution-context"&gt;
  &lt;/a&gt;
  What's inside an Execution Context?
&lt;/h3&gt;

&lt;p&gt;An Execution Context primarily consists of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Variable Environment: The variable environment consists of the following:

&lt;ul&gt;
&lt;li&gt;let, const and var declarations&lt;/li&gt;
&lt;li&gt;functions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scope Chain (will be covered later)&lt;/li&gt;
&lt;li&gt;this keyword (will be covered later)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, for now, lets just forget that we know anything like the scope chain &amp;amp; this keyword (we'll cover it later, don't worry), and focus on the variable environment.&lt;/p&gt;

&lt;p&gt;If we consider code example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const name = 'Hello World';

function sayHello(){
console.log('Hello People');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Execution Context will look like:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kzY66XCa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8wx71tja8u6wctwqv7n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kzY66XCa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8wx71tja8u6wctwqv7n.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Before moving on to how the JavaScript code is executed, let us have a look at what the &lt;strong&gt;Call Stack&lt;/strong&gt; is.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-call-stack"&gt;
  &lt;/a&gt;
  The Call Stack:
&lt;/h2&gt;

&lt;p&gt;The Call Stack is a place that stacks execution context on top of each other in order to keep track of the execution order. The Execution Contexts are processed in  LIFO manner i.e., Last-In-First-Out.&lt;br&gt;
Here is an illustration:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UeF6NHYy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cvfer1foy0yllfl218l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UeF6NHYy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cvfer1foy0yllfl218l.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-is-the-code-actually-executed"&gt;
  &lt;/a&gt;
  How is the code &lt;strong&gt;actually&lt;/strong&gt; Executed?
&lt;/h2&gt;

&lt;p&gt;So now that we are aware of the terminologies, let us see how our code gets executed. Take the following code snippet for instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const name = 'Pawan';

function sum(a, b){
let s = a + b;
return s;
}
const getSum = sum(2, 3);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code execution takes place mainly in two phases:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;The Creation Phase:&lt;/strong&gt; In which the variables, functions are declared in the variable environment.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The Execution Phase:&lt;/strong&gt; In which the code is executed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;1. The Creation Phase&lt;/strong&gt;&lt;br&gt;
During the creation phase, the variables and functions defined in global scope are allocated memory and assigned an initial value. For the code snippet above, the global execution context in creation phase will look like.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aaa98a97--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dubi9peyuif0yq6kqcp4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aaa98a97--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dubi9peyuif0yq6kqcp4.png" alt="image"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. The Execution Phase:&lt;/strong&gt;&lt;br&gt;
During the execution phase, the variables are assigned values and the code is executed &lt;em&gt;one-line-at-a-time&lt;/em&gt;. The execution context changes as follows:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6PQQIaQl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ezf22j5djzpq88wqgek.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6PQQIaQl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ezf22j5djzpq88wqgek.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6UNbDTRr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yo7orefrwqp4ic71py20.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6UNbDTRr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yo7orefrwqp4ic71py20.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now you must be thinking, for multiple functions we would have hundreds of execution contexts, so how would JavaScript track its execution? The answer is &lt;strong&gt;The Call Stack&lt;/strong&gt;. Below is how the call stack will be populated for our code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When the code is run for the first time, the call stack looks like:&lt;br&gt;
&lt;strong&gt;Creation Phase&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EzUB7BKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g0u4b2ge5vesxxdoa9ug.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EzUB7BKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g0u4b2ge5vesxxdoa9ug.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Execution Phase&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0sqefyrd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e459ehu5ec5jxq8lju3a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0sqefyrd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e459ehu5ec5jxq8lju3a.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the function, sum gets called, it gets its own execution context and now our call stack looks like:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Creation Phase:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ctttz6z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nppdqxfcgy6jy2iwi7wb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ctttz6z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nppdqxfcgy6jy2iwi7wb.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Execution Phase:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fNFaOTqE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xb07bmcceiesog2f4kx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fNFaOTqE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xb07bmcceiesog2f4kx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now that our function execution context has completed its execution, it gets removed from the call stack ( for now lets suppose that it does) and our getSum variable gets populated. So now our call stack will be:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---fHXa9hr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bv930yuett697aj6bky7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---fHXa9hr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bv930yuett697aj6bky7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After our global execution context is done executing all the statements, it will just remain like that waiting for any explicit calls/instructions including the click events or hover events etc. The execution context remains active so long as our browser window is active.&lt;/p&gt;

&lt;p&gt;So, I hope I was able to explain how the Execution Context and the Call Stack works together to execute our JavaScript code. To summarize it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Execution Context executes the JavaScript code.&lt;/li&gt;
&lt;li&gt;Call Stack maintains a stack of execution contexts to maintain an order of execution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's all for now. Any queries and recommendations can be posted in the comment box below.&lt;/p&gt;

&lt;p&gt;Stay Safe &amp;amp; Happy Learning 🙌.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
