<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to organize your JS code: Part 2</title>
      <author>Muhammad Ahmad</author>
      <pubDate>Wed, 18 Aug 2021 00:22:58 +0000</pubDate>
      <link>https://dev.to/0xf10yd/how-to-organize-your-js-code-part-2-1401</link>
      <guid>https://dev.to/0xf10yd/how-to-organize-your-js-code-part-2-1401</guid>
      <description>&lt;h2&gt;
  &lt;a href="#modules"&gt;
  &lt;/a&gt;
  Modules
&lt;/h2&gt;

&lt;p&gt;The module pattern has essentially the same goal as the class pattern, which is to group data and behavior together into logical units. &lt;br&gt;
Also like classes, modules can “include” or “access” the data and behaviors of other modules, for cooperation sake.&lt;br&gt;
But modules have some important differences from classes. Most notably, the syntax is entirely different.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#classic-modules"&gt;
  &lt;/a&gt;
  Classic Modules
&lt;/h4&gt;

&lt;p&gt;ES6 added a module syntax form to native JS syntax, which we’ll look at in a moment. But from the early days of JS, modules was an important and common pattern that was leveraged in countless JS programs, even without a dedicated syntax.&lt;br&gt;
The key hallmarks of a classic module are an outer function (that runs at least once), which returns an “instance” of the module with one or more functions exposed that can operate on the module instance’s internal (hidden) data.&lt;/p&gt;

&lt;p&gt;Because a module of this form is just a function, and calling it produces an “instance” of the module, another description for these functions is “module factories”.&lt;br&gt;
Consider the classic module form of the earlier Publication, Book, and &lt;code&gt;BlogPost&lt;/code&gt; classes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Publication(title, author, pubDate) {
    var publicAPI = {
        print() {
            console.log(`
 Title: ${ title }
 By: ${ author }
 ${ pubDate }
 `);
        }
    };
    return publicAPI;
}

function Book(bookDetails) {
    var pub = Publication(
        bookDetails.title,
        bookDetails.author,
        bookDetails.publishedOn
    );
    var publicAPI = {
        print() {
            pub.print();
            console.log(`
 Publisher: ${ bookDetails.publisher }
 ISBN: ${ bookDetails.ISBN }
 `);
        }
    };
    return publicAPI;
}

function BlogPost(title, author, pubDate, URL) {
    var pub = Publication(title, author, pubDate);
    var publicAPI = {
        print() {
            pub.print();
            console.log(URL);
        }
    };
    return publicAPI;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Comparing these forms to the &lt;code&gt;class&lt;/code&gt; forms, there are more similarities than differences.&lt;br&gt;
The &lt;code&gt;class&lt;/code&gt; form stores methods and data on an object instance, which must be accessed with the &lt;code&gt;this.&lt;/code&gt; prefix. With modules, the methods and data are accessed as identifier variables in scope, without any &lt;code&gt;this.&lt;/code&gt; prefix.&lt;/p&gt;

&lt;p&gt;With class, the “API” of an instance is implicit in the class definition—also, all data and methods are public. With the module factory function, you explicitly create and return an object with any publicly exposed methods, and any data or other &lt;code&gt;unreferenced&lt;/code&gt; methods remain private inside the factory function.&lt;/p&gt;

&lt;p&gt;There are other variations to this factory function form that are quite common across JS, even in 2020; you may run across these forms in different JS programs: AMD (Asynchronous Module Definition), UMD (Universal Module Definition), and CommonJS (classic Node.js-style modules). The variations, however, are minor (yet not quite compatible).&lt;br&gt;
Still, all of these forms rely on the same basic principles.&lt;br&gt;
Consider also the usage (aka, “instantiation”) of these module factory functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var Article = Book({
    title: "How to organize JS",
    author: "Muhammad Ahmad",
    publishedOn: "August 2021",
    publisher: "dev.to",
});
Article.print();
// Title: How to organize JS
// By: Muhammad Ahmad
// August 2021
// Publisher: dev.to
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only observable difference here is the lack of using new, calling the module factories as normal functions.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#es-modules"&gt;
  &lt;/a&gt;
  ES Modules
&lt;/h4&gt;

&lt;p&gt;ES modules (ESM), introduced to the JS language in ES6, are meant to serve much the same spirit and purpose as the existing classic modules just described, especially taking into account important variations and use cases from AMD, UMD, and CommonJS.&lt;br&gt;
The implementation approach does, however, differ significantly.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;There’s no wrapping function to define a module. The wrapping context is a file. ESMs are always file-based; one file, one module&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You don’t interact with a module’s “API” explicitly, but rather use the export keyword to add a variable or method to its public API definition.&lt;br&gt;
If something is defined in a module but not exported, then it stays hidden (just as with classic modules).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And maybe most noticeably different from previously discussed patterns, you don’t “instantiate” an ES module, you just import it to use its single instance. ESMs are, in effect, “singletons,” in that there’s only one instance ever created, at first import in your program, and all other imports just receive a reference to that same single instance. If your module needs to support multiple instantiations, you have to provide a classic module-style factory function on your ESM definition for that purpose.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In our running example, we do assume multiple-instantiation, so these following snippets will mix both ESM and classic modules.&lt;/p&gt;

&lt;p&gt;Consider the file publication.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function printDetails(title, author, pubDate) {
    console.log(`
 Title: ${ title }
 By: ${ author }
 ${ pubDate }
 `);
}
export function create(title, author, pubDate) {
    var publicAPI = {
        print() {
            printDetails(title, author, pubDate);
        }
    };
    return publicAPI;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To import and use this module, from another ES module like blogpost.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {
    create as createPub
} from "publication.js";

function printDetails(pub, URL) {
    pub.print();
    console.log(URL);
}
export function create(title, author, pubDate, URL) {
    var pub = createPub(title, author, pubDate);
    var publicAPI = {
        print() {
            printDetails(pub, URL);
        }
    };
    return publicAPI;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, to use this module, we import into another ES module like main.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { create as newBlogPost } from "blogpost.js";

var organizeJsP2 = newBlogPost(
    "How to organize your JS code: Part 2",
    "Muhammad Ahmad",
    "October 27, 2014",
    "https://dev.to/0xf10yd/how-to-organize-your-js-code-part-2-1401"
);
forAgainstLet.print();
// How to organize your JS code: Part 2
// By: Muhammad Ahmad
// August 18, 2021
// https://dev.to/0xf10yd/how-to-organize-your-js-code-part-2-1401
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;as newBlogPost&lt;/code&gt; clause in the import statement is optional; if omitted, a top-level function just named create(..) would be imported. In this case, I’m renaming it for readability sake; its more generic factory name of create(..) becomes more semantically descriptive of its purpose as newBlogPost(..).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As shown, ES modules can use classic modules internally if they need to support multiple-instantiation. Alternatively, we could have exposed a class from our module instead of a create(..) factory function, with generally the same outcome. However, since you’re already using ESM at that point, I’d recommend sticking with classic modules instead of class&lt;/p&gt;

&lt;p&gt;If your module only needs a single instance, you can skip the extra layers of complexity: &lt;code&gt;export&lt;/code&gt; its public methods directly.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>architecture</category>
      <category>webdev</category>
    </item>
    <item>
      <title>My og:image Bug</title>
      <author>Alvaro Montoro</author>
      <pubDate>Wed, 18 Aug 2021 00:07:37 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/my-og-image-bug-23jo</link>
      <guid>https://dev.to/alvaromontoro/my-og-image-bug-23jo</guid>
      <description>&lt;p&gt;This is the story of a bug that I found while developing &lt;a href="https://alvaromontoro.com/blog/"&gt;my blog&lt;/a&gt;. It got me puzzled for a while until I found a seemingly unrelated issue that caused the problem. It may be a bit silly, but it could also be interesting because it showcases a difference in how social networks processed the page’s metadata.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;When sharing a link from my blog on social media, the thumbnail picture looked Ok on Twitter or Linkedin, but it was different on Facebook. The Twitter card had the blog post thumbnail, but the Facebook card showed the generic website thumbnail:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_xEQawEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwlis5yaqa89yl575br4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_xEQawEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwlis5yaqa89yl575br4.png" alt="Screenshot of two social media cards"&gt;&lt;/a&gt;&lt;/p&gt;
The card on the left is from Twitter, and it has the correct image. The card on the right is from Facebook, and it shows a generic site's thumbnail instead.&lt;br&gt; 



&lt;p&gt;I was filling both the OpenGraph and the Twitter card metadata with the same information. So it should be the same image.&lt;br&gt;
It couldn’t be that the image didn’t fit Facebook standards. I had shared similar-sized images generated with the same format and compression. Also, Facebook’s documentation didn’t have anything stating I was doing anything wrong. What was going on?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-root-cause"&gt;
  &lt;/a&gt;
  The root cause
&lt;/h2&gt;

&lt;p&gt;I started digging in the code and found that this was the meta-information for the blog posts (code reduced):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"The Simpsons in CSS"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:type"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"website"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:url"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"https://alvaromontoro.com/blog/"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"https://alvaromontoro.com/images/blog/the-simpsons-in-css.png"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"This is a personal project..."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:card"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"summary"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:url"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"https://alvaromontoro.com/blog/"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:title"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"The Simpsons in CSS"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"This is a personal project..."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:image"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"https://alvaromontoro.com/images/blog/the-simpsons-in-css.png"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The values matched: &lt;code&gt;og:title&lt;/code&gt; was the same as &lt;code&gt;twitter:title&lt;/code&gt;, and similar for &lt;code&gt;og:url&lt;/code&gt; and &lt;code&gt;twitter:url&lt;/code&gt;, &lt;code&gt;og:description&lt;/code&gt; and &lt;code&gt;twitter:description&lt;/code&gt;, and for &lt;code&gt;og:image&lt;/code&gt; and &lt;code&gt;twitter:image&lt;/code&gt;. All the same for OpenGraph and Twitter metadata.&lt;/p&gt;

&lt;p&gt;I was puzzled until I realized that the &lt;code&gt;og:url&lt;/code&gt;/&lt;code&gt;twitter:url&lt;/code&gt; was not the correct one. It matched on both, but it was pointing to the wrong URL: instead of being the blog post, it was the blog in itself. But what couldn't be, what matters for the thumbnail is the &lt;code&gt;og:image&lt;/code&gt;/&lt;code&gt;twitter:image&lt;/code&gt; value... right?&lt;/p&gt;

&lt;p&gt;Wrong! I ran a quick test and, correcting the URL, fixed the thumbnail image bug, too! Unfortunately, I had fallen for the &lt;a href="https://alvaromontoro.com/blog/67844/web-confusion"&gt;same error that I described in a previous article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While &lt;strong&gt;Twitter and Linkedin were pulling the &lt;code&gt;og:image&lt;/code&gt; data&lt;/strong&gt; and using it to display the thumbnail picture, &lt;strong&gt;Facebook was using the &lt;code&gt;og:url&lt;/code&gt; value as an index&lt;/strong&gt; and pulling the image information from a cache/database instead of using the &lt;code&gt;og:image&lt;/code&gt;. That caused the problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h2&gt;

&lt;p&gt;Knowing the problem, the solution was simple: &lt;strong&gt;make sure that the &lt;code&gt;og:url&lt;/code&gt; matches the actual page URL&lt;/strong&gt;. Which anyway was the right thing to do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"The Simpsons in CSS"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:type"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"website"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:url"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"https://alvaromontoro.com/blog/67971/the-simpsons-in-css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"https://alvaromontoro.com/images/blog/the-simpsons-in-css.png"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"This is a personal project..."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:card"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"summary"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:url"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"https://alvaromontoro.com/blog/67971/the-simpsons-in-css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:title"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"The Simpsons in CSS"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"This is a personal project..."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:image"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"https://alvaromontoro.com/images/blog/the-simpsons-in-css.png"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the Facebook card displayed the correct image too:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V2XwtcgD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0u3723ggitnc8ttuyif4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V2XwtcgD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0u3723ggitnc8ttuyif4.png" alt="Screenshot of a facebook social media card"&gt;&lt;/a&gt;&lt;/p&gt;
Success!&lt;br&gt; 



&lt;p&gt;And that's the story of the &lt;code&gt;og:image&lt;/code&gt; bug on my blog and how I solved it. Thanks for reading :)&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>seo</category>
    </item>
    <item>
      <title>Sending GET Request Using Fetch</title>
      <author>Aya Bouchiha</author>
      <pubDate>Wed, 18 Aug 2021 00:03:17 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/sending-get-request-using-fetch-5fie</link>
      <guid>https://dev.to/ayabouchiha/sending-get-request-using-fetch-5fie</guid>
      <description>&lt;p&gt;Hello everybody, today, we'll discuss sending GET requests using fetch;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-get-request"&gt;
  &lt;/a&gt;
  What's GET request
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;GET&lt;/strong&gt;: is a request used for getting or retrieving data or information from a specified server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-using-then-and-catch"&gt;
  &lt;/a&gt;
  Code using then and catch
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://jsonplaceholder.typicode.com/todos/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;something went wrong ;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;getTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#code-using-async-and-await"&gt;
  &lt;/a&gt;
  Code using async and await
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#method-1"&gt;
  &lt;/a&gt;
  Method 1
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://jsonplaceholder.typicode.com/todos/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;something went wrong :(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;getTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#method-2"&gt;
  &lt;/a&gt;
  Method 2
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://jsonplaceholder.typicode.com/todos/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;something went wrong :(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;getTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#suggested-posts"&gt;
  &lt;/a&gt;
  Suggested Posts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/making-get-and-post-request-using-axios-7g8"&gt;Making GET And POST Request Using Axios In React.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/making-put-delete-request-using-axios-in-react-js-j07"&gt;Making PUT &amp;amp; DELETE Request Using Axios In React.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/youtube-courses-projects-to-master-javascript-3lhc"&gt;Youtube Courses, Projects To Master Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/the-essential-guide-to-map-built-in-object-in-javascript-17d2"&gt;Your Essential Guide To Map Built-in Object In Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/all-js-string-methods-in-one-post-4h23"&gt;All JS String Methods In One Post!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To Contact Me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;email: &lt;a href="mailto:developer.aya.b@gmail.com"&gt;developer.aya.b@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;telegram: &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy codding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>The Widen &lt;Type&gt;</title>
      <author>Rahul Tarak</author>
      <pubDate>Wed, 18 Aug 2021 00:00:07 +0000</pubDate>
      <link>https://dev.to/cryogenicplanet/the-widen-type-314j</link>
      <guid>https://dev.to/cryogenicplanet/the-widen-type-314j</guid>
      <description>&lt;p&gt;I love typescript, it makes my life super easy and makes my dev experience far superior. That said one gripe I've always had in complex typescript codebase is with nested types, especially using things like &lt;code&gt;Pick&lt;/code&gt; or &lt;code&gt;Omit&lt;/code&gt; you had to check the type definition, 4-5 levels deep to actually know what the type is, this can be quite annoying.&lt;/p&gt;

&lt;p&gt;Recently I found a solution a great solution to this called Type Widening and it can be super easily implemented.&lt;/p&gt;

&lt;p&gt;If you just want the basic type, here you go.  That said I will break down how this works and how you can improve it below. You can also find a more advanced version of this with recursion and enum guards at bottom of the post.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ToPrimitive&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;_args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;_args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Parameters&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ReturnType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Expands a type so you can nicely seem the primitives
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Widen&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;ToPrimitive&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;Usage is very simple just wrap the type you want with &lt;code&gt;Widen&amp;lt;MyType&amp;gt;&lt;/code&gt; below is an embedded example which allows you to hover over the two types to see the difference&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/cigjok?embed=1&amp;amp;view=editor&amp;amp;file=index.ts" width="100%" height="500"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#extending-the-use-of-widen"&gt;
  &lt;/a&gt;
  Extending the use of Widen
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#enums"&gt;
  &lt;/a&gt;
  Enums
&lt;/h3&gt;

&lt;p&gt;We use &lt;code&gt;Enum&lt;/code&gt; quite a bit in our codebase and unfortunately there is no &lt;code&gt;T extends enum&lt;/code&gt; in typescript, so to hack around it you much create a Blacklist type which you can skip over&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Unfortunately this is the only way I could find right now&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;EnumBlackList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;DogBread&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;CatBread&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;OtherEnums&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#recursion"&gt;
  &lt;/a&gt;
  Recursion
&lt;/h3&gt;

&lt;p&gt;We can modify &lt;code&gt;ToPrimitive&lt;/code&gt; to make it recursive like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ToPrimitive&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;_args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;_args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Parameters&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ReturnType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="c1"&gt;// Check if object and call itself&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;ToPrimitive&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can play with a demo below, which has all three different iterations setup for you&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/gh5zni?embed=1&amp;amp;view=editor&amp;amp;file=index.ts" width="100%" height="500"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;Not going into too much detail here, just a brief summary &lt;/p&gt;

&lt;p&gt;This uses a combination of unity types from Typescript with conditional types to enable this&lt;/p&gt;

&lt;p&gt;&lt;code&gt;T extends string&lt;/code&gt; checks if the type is based on type string, which can be used as a conditional check. This allows us to check our base primitives like &lt;code&gt;string&lt;/code&gt; &lt;code&gt;number&lt;/code&gt; and &lt;code&gt;boolean&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To add support for functions, we need to check if the type has the structure of a function which we are doing by checking &lt;code&gt;T extends (...args: any[]) =&amp;gt; any&lt;/code&gt;  Then we are returning the function with its correct parameters and return type using the &lt;code&gt;Parameter&lt;/code&gt; and &lt;code&gt;ReturnType&lt;/code&gt; utility type&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-type"&gt;
  &lt;/a&gt;
  Final Type
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;EnumBlacklist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="c1"&gt;// your enums go here like Enum1 | Enum2 | Enum 3&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Widen&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;ToPrimitive&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ToPrimitive&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
    &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;EnumBlackList&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;_args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;_args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Parameters&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ReturnType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;ToPrimitive&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Widen&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MyType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Feel free to email me any questions or suggestion on how I can improve this type or post at &lt;a href="mailto:rahul@modfy.video"&gt;rahul@modfy.video&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>generics</category>
    </item>
    <item>
      <title>ReactJS: What is the Virtual DOM?</title>
      <author>Adriana DiPietro</author>
      <pubDate>Tue, 17 Aug 2021 23:55:41 +0000</pubDate>
      <link>https://dev.to/am20dipi/reactjs-what-is-the-virtual-dom-3j62</link>
      <guid>https://dev.to/am20dipi/reactjs-what-is-the-virtual-dom-3j62</guid>
      <description>&lt;h2&gt;
  &lt;a href="#questions"&gt;
  &lt;/a&gt;
  Questions
&lt;/h2&gt;

&lt;p&gt;Today, I will be talking through the Virtual DOM through the structure of the questions to follow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What is the DOM?&lt;/li&gt;
&lt;li&gt;What is the Virtual DOM?&lt;/li&gt;
&lt;li&gt;Why do we use the Virtual DOM? How does the Virtual DOM apply to ReactJS?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;☁️ Let's get started ☁️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-dom"&gt;
  &lt;/a&gt;
  What is the DOM?
&lt;/h3&gt;

&lt;p&gt;We should probably start at the beginning. &lt;/p&gt;

&lt;p&gt;(1)The DOM, short for "Document Object Model", is a data representation of the structure and content of a document in the browser. &lt;br&gt;
(2)The DOM is comprised of objects. &lt;/p&gt;

&lt;p&gt;As it represents a browser's document and is comprised of objects, it can be manipulated using scripting languages, such as JavaScript. &lt;/p&gt;

&lt;p&gt;An example of a DOM may look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"welcome-page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Welcome!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My name is Adriana&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The DOM manipulates the content, specifically HTML elements, into a tree-like formation 🌲!&lt;/p&gt;

&lt;p&gt;We can access the DOM of a webpage by right clicking on the page and clicking "inspect". This prompts the "Elements" tab to be opened either on the side or bottom of the page. And here is where you can see any DOM tree of any website. &lt;/p&gt;

&lt;p&gt;Here is an example from Google's homepage:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sP3Dws99--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86gif181ijvk0hhig1r9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sP3Dws99--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86gif181ijvk0hhig1r9.png" alt="Screen Shot 2021-08-17 at 7.28.29 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the bottom left corner, we can see Google's homepage DOM tree. While we may not understand all of it, we can point out some key features that resemble my example from above:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;html&amp;gt; tag with its closing tag &amp;lt;/html&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;&amp;lt;body&amp;gt; tag with its closing tag &amp;lt;/body&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;&amp;lt;div&amp;gt; tag with its closing tag &amp;lt;/div&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Inside each of these &lt;strong&gt;DOM elements&lt;/strong&gt; holds code that helps to render what we see on the Google homepage: the colorful Google logo, the search bar, the Google Search button... etc. &lt;/p&gt;

&lt;p&gt;So, ultimately, the DOM helps to convert a scripting language like JavaScript or ReactJS into renderable content that a user can see on a webpage. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-virtual-dom"&gt;
  &lt;/a&gt;
  What is the Virtual DOM?
&lt;/h3&gt;

&lt;p&gt;Now we know what the DOM is, we can talk about the Virtual DOM. Given to us from a React library called "ReactDOM", the Virtual DOM is a representation of the DOM! (Whoa, so meta!) &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-do-we-use-the-virtual-dom-how-does-it-apply-to-reactjs"&gt;
  &lt;/a&gt;
  Why do we use the Virtual DOM? How does it apply to ReactJS?
&lt;/h3&gt;

&lt;p&gt;We use the Virtual DOM with ReactJS as to be more efficient. When updating or modifying code that will be rendered to the (real) DOM, ReactJS takes a look at both DOMs and compares. When ReactJS sees that only some of the content has changed, it implements only those changes to the DOM. Comparing the DOMs avoids having to do a huge rerender of all of the content. This would take time and a lot of power. And we are all about being efficient here. &lt;/p&gt;

&lt;p&gt;Let's look at some examples: &lt;/p&gt;

&lt;p&gt;This is the DOM "right now" ⤵️&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"welcome-page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Welcome!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My name is Adriana&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, I've decided to add another "&lt;/p&gt;
&lt;p&gt;" tag ⤵️&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"welcome-page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Welcome!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My name is Adriana&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;I am 1000 years old&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ReactJS will see this change and rerender every single element to the Virtual DOM, whether it is new or not. Once the Virtual DOM is fully updated, then ReactJS will compare it to the DOM. ReactJS will render what has changed to the DOM; it will NOT rerender the whole DOM tree! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-summary"&gt;
  &lt;/a&gt;
  In Summary
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;The DOM is rendered.&lt;/li&gt;
&lt;li&gt;A change occurs.&lt;/li&gt;
&lt;li&gt;The change is reflected in the Virtual DOM.&lt;/li&gt;
&lt;li&gt;The entire Virtual DOM gets updated.&lt;/li&gt;
&lt;li&gt;ReactJS compares the Virtual DOM to the DOM. &lt;/li&gt;
&lt;li&gt;React sees what has changed; only those elements get updated onto the (real) DOM.&lt;/li&gt;
&lt;li&gt;The changes on the DOM are seen in the browser. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;☁️Thank you for reading along!☁️&lt;br&gt;
💬Comment below to continue the discussion💬&lt;br&gt;
💭Ask me some questions💭&lt;/p&gt;

</description>
      <category>react</category>
      <category>dom</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Data Wrangling with VSCode (Yes, Really!)</title>
      <author>Yogi Saputro</author>
      <pubDate>Tue, 17 Aug 2021 23:39:34 +0000</pubDate>
      <link>https://dev.to/yogski/data-wrangling-with-vscode-yes-really-2bbf</link>
      <guid>https://dev.to/yogski/data-wrangling-with-vscode-yes-really-2bbf</guid>
      <description>&lt;p&gt;In this article, I'm going to show techniques and tips for transforming raw text data to standard format using VSCode. It's effective, quick, and dirty. Suitable for one-time wrangling.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3bW3ZrHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tos9n8jd0w4k2pz092cl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3bW3ZrHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tos9n8jd0w4k2pz092cl.png" alt="Data Wrangling with Visual Studio Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;People who works around data sometimes get strange one-time requests. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Hey, can you get this data real quick? Shouldn't be too hard, right? Appreciate it".&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It happended to me (as full-stack dev) few times, say: list of banks, list of loan rates, and so on. It's good thing that the data is available. It's bad thing that they are in PDF or HTML table. My system only works with CSV or JSON. So it is wrangling time!&lt;/p&gt;

&lt;p&gt;There are many tools available for wrangling data. Nearly all of them are sophisticated and packed with features. Too many features means too many resource needed. I don't want to open Jupyter Notebooks or Tableau just to add commas or parse words. I need my resource for that 10 tabs of Stack Overflow, you know. &lt;/p&gt;

&lt;p&gt;Finally, I resort to VSCode. It is software used by me and millions of people, has powerful editing features, and has various extensions. I can tailor it to wrangle data quickly.&lt;/p&gt;

&lt;p&gt;Now, I will show how to wrangle data from PDF or HTML and transform it to CSV or JSON, using only VSCode.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#skills"&gt;
  &lt;/a&gt;
  Skills
&lt;/h3&gt;

&lt;p&gt;Wrangling data in VSCode comes with a caveat: you need to understand regular expressions a.k.a &lt;strong&gt;regex&lt;/strong&gt;. Don't be intimidated. Treat regex as a friend. Play around with regex tester &lt;a href="https://regexr.com/"&gt;here&lt;/a&gt;, or check out the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Cheatsheet"&gt;documentation&lt;/a&gt; and &lt;a href="https://cheatography.com/davechild/cheat-sheets/regular-expressions/"&gt;cheat-sheet&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extensions"&gt;
  &lt;/a&gt;
  Extensions
&lt;/h3&gt;

&lt;p&gt;Before going further, I recommend installing at least three extensions on VSCode.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Rainbow CSV&lt;/strong&gt; : it highlights columns by colors, detects inconsistency in data, and provides RBQL (basically SQL for CSV file).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;JSON to CSV&lt;/strong&gt; : it converts JSON format to CSV and vice-versa.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Prettify JSON&lt;/strong&gt; : it makes JSON easier to read.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#data-source"&gt;
  &lt;/a&gt;
  Data Source
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#pdf"&gt;
  &lt;/a&gt;
  PDF
&lt;/h4&gt;

&lt;p&gt;I'm going to use list of registered lending fintech companies in Indonesia, downloadable &lt;a href="https://www.ojk.go.id/id/kanal/iknb/financial-technology/Documents/PERUSAHAAN%20FINTECH%20LENDING%20BERIZIN%20DAN%20TERDAFTAR%20DI%20OJK%20PER%2010%20JUNI%202021.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h4&gt;

&lt;p&gt;I choose Wikipedia list of national heroes of Indonesia as example. Available both in &lt;a href="https://en.wikipedia.org/wiki/National_Hero_of_Indonesia"&gt;English&lt;/a&gt; and &lt;a href="https://id.wikipedia.org/wiki/Daftar_pahlawan_nasional_Indonesia"&gt;Bahasa Indonesia&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#from-html-to-csv"&gt;
  &lt;/a&gt;
  From HTML to CSV
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;First, note that the first output format is always CSV because of its similarity with natural structure of table (e.g columns, rows, header). 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P_G3V-sa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75cbj838zzx9poz32laj.png" alt="Copying table from HTML document"&gt;
&lt;/li&gt;
&lt;li&gt;Open the &lt;a href="https://en.wikipedia.org/wiki/National_Hero_of_Indonesia"&gt;HTML data source&lt;/a&gt;. Then, copy text from HTML. On this case, I will copy the whole table. It is also useful to note which column is needed.&lt;/li&gt;
&lt;li&gt;On VSCode, create new untitled file &lt;code&gt;ctrl + N&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rvS4Dlaw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3zt45d28bd4zop05r2u.png" alt="Paste text into VSCode"&gt;
&lt;/li&gt;
&lt;li&gt;Paste the text. Now we have nice list. Next, we want to &lt;strong&gt;remove unnecessary lines&lt;/strong&gt;. Things like title, page number might get copied accidentally. It can be removed.&lt;/li&gt;
&lt;li&gt;Now we need to &lt;strong&gt;remove unusable columns&lt;/strong&gt;. For this case, column &lt;code&gt;Ref(s)&lt;/code&gt; is not unusable and meaningless. So we need to get rid of it. If you need to filter columns, there is a &lt;a href="#select-specific-csv-columns"&gt;way to do it&lt;/a&gt; later.&lt;/li&gt;
&lt;li&gt;Access replace text menu &lt;code&gt;ctrl + H&lt;/code&gt;, then press &lt;code&gt;alt + R&lt;/code&gt; for &lt;strong&gt;regex search&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Now, what do these refs have in common? They have square brackets. Then, inside square bracket is number or letter. There are some possible regex. Try to approach it.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QumXjRhl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrr3oh6oyaybisc4x159.png" alt="Example of inaccurate regex"&gt;
The picture above with &lt;code&gt;\[[0-9]\]&lt;/code&gt; regex works for single digit, but failed for two or more digits and letters. I also prefer to remove trailing whitespaces.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LCA7akv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ufrp73fklmskzb13f2v.png" alt="Example of accurate regex"&gt;
Going further, I acknowledged that &lt;code&gt;\[[0-9a-z]*\]&lt;/code&gt; works. &lt;code&gt;\t?\[..?.?\]&lt;/code&gt; also works (it removes whitespace as well). Then, replace with &lt;code&gt;''&lt;/code&gt; a.k.a nothing.&lt;/li&gt;
&lt;li&gt;Replace all occurences : &lt;code&gt;ctrl + alt + enter&lt;/code&gt;. Now the refs are no more.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Replace characters that confuses CSV&lt;/strong&gt;, like comma (&lt;code&gt;,&lt;/code&gt;) or double-tick (&lt;code&gt;"&lt;/code&gt;). It is important to avoid mistakes when parsing CSV. No need for regex now.

&lt;ul&gt;
&lt;li&gt;Replace text &lt;code&gt;ctrl + H&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Use text : &lt;code&gt;,&lt;/code&gt; , replace with &lt;code&gt;;&lt;/code&gt; or leave it empty&lt;/li&gt;
&lt;li&gt;Replace all occurences : &lt;code&gt;ctrl + alt + enter&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Repeat on other characters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Setup header manually&lt;/strong&gt; to match standard CSV format. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bJyP-Lg3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1et80i3eoumrztpz2sk0.png" alt="Setup header"&gt;
This is my recommendation:

&lt;ul&gt;
&lt;li&gt;avoid spaces&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;snake_case&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;add commas manually&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Add proper separator&lt;/strong&gt;, in this case: comma. 

&lt;ul&gt;
&lt;li&gt;For this data, I am a bit lucky. Each data is consistently separated by tab or whitespace. Just need to convert whitespace to comma. This is also why removing unnecessary whitespace on step 7 is important. Extra commas will be confusing.&lt;/li&gt;
&lt;li&gt;In some cases, data is separated by spaces. It can be confusing, especially when the column is string with spaces. There are &lt;a href="#handle-separator-placing"&gt;strategies to overcome it&lt;/a&gt; below.&lt;/li&gt;
&lt;li&gt;Replace text &lt;code&gt;ctrl + H&lt;/code&gt;, then press &lt;code&gt;alt + R&lt;/code&gt; for regex search option&lt;/li&gt;
&lt;li&gt;Use text : &lt;code&gt;\t&lt;/code&gt; , replace with &lt;code&gt;,&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Replace all occurences : &lt;code&gt;ctrl + alt + enter&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b5ZLJCKi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/in47h257479y9sa4wpmv.png" alt="Highlighted CSV"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;et voila!&lt;/em&gt; Data should be ready by now. &lt;strong&gt;Save it&lt;/strong&gt; as &lt;code&gt;csv&lt;/code&gt; file. Rainbow CSV should automatically highlight it afterwards.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#from-pdf-to-csv"&gt;
  &lt;/a&gt;
  From PDF to CSV
&lt;/h3&gt;

&lt;p&gt;The basic is similar to HTML data source&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Copy all data from PDF&lt;/li&gt;
&lt;li&gt;Paste into VSCode workspace&lt;/li&gt;
&lt;li&gt;Remove unnecessary lines&lt;/li&gt;
&lt;li&gt;Remove unusable columns&lt;/li&gt;
&lt;li&gt;Regex search and replace&lt;/li&gt;
&lt;li&gt;Remove special characters (commas, double-ticks, etc.)&lt;/li&gt;
&lt;li&gt;Setup header manually&lt;/li&gt;
&lt;li&gt;Add proper separators&lt;/li&gt;
&lt;li&gt;Save as CSV&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's dive into action.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;PDF data often returns a mess. Unnecessary lines, inconsistent line breaks, space separators, are all present here.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s3OL8jgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nej21il7zvyc1chh4162.png" alt="Paste PDF mess"&gt;
It is better to observe this pile of mess for a while. Also check with original PDF file to figure out "how did this line ended up here?"&lt;/li&gt;
&lt;li&gt;Check header and footer of each PDF page. Something like page number, repeated header, or repeated title might slip in. Clean them all.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Nomor&lt;/code&gt; or row number column has no value, so it can be removed.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fyRdhwec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofoz3bctvc2qaea51ev6.png" alt="Regex including newline"&gt;
Now there's a little trick. Normal number regex like &lt;code&gt;[0-9. ]+&lt;/code&gt; is not accurate since there are matches at other places. But I know number column is always at the beginning of row. So I add newline &lt;code&gt;\n&lt;/code&gt; to my number regex, then replace it with &lt;code&gt;\n&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A lot of regex find-and-replace are required.

&lt;ul&gt;
&lt;li&gt;Replace &lt;code&gt;Android\ndan iOS&lt;/code&gt; with &lt;code&gt;Android dan iOS&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;-\n&lt;/code&gt; (it means web based fintech, not mobile-based) with &lt;code&gt;Web\n&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;Konvensional\ndan Syariah&lt;/code&gt; with &lt;code&gt;Konvensional dan Syariah&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fortunately, there's no character that might confuse CSV. Move on to next step.&lt;/li&gt;
&lt;li&gt;Handling header might require domain knowledge. So I basically change the header into this: &lt;code&gt;platform_name, website, company_name, official_register, date_of_registration, lending_type, platform_type&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Now here comes the fun part of adding separators. Remember that we &lt;em&gt;cannot&lt;/em&gt; change data, and regex find-and-replace &lt;em&gt;always&lt;/em&gt; replace pattern to constant value. Thus, the key is &lt;strong&gt;identifying constant values&lt;/strong&gt;.

&lt;ul&gt;
&lt;li&gt;Many URLs begin with either &lt;code&gt;http&lt;/code&gt;, &lt;code&gt;https&lt;/code&gt;, or &lt;code&gt;www&lt;/code&gt;. So, I can replace &lt;code&gt;http&lt;/code&gt; with &lt;code&gt;,http&lt;/code&gt; and &lt;code&gt;www&lt;/code&gt; (spaced) with &lt;code&gt;,www&lt;/code&gt;. Just add comma before replaced value. Now that's progress.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XR-JCF_V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3n4pn4musm6zisjgpfym.png" alt="Multiple cursors"&gt;
&lt;/li&gt;
&lt;li&gt;Some URLs have no prefix, but have &lt;code&gt;.id&lt;/code&gt; suffix. Find it with &lt;code&gt;[a-z]+\.id&lt;/code&gt; regex, then press &lt;code&gt;alt + enter&lt;/code&gt; to have multiple cursors working on them. Move to leftmost string with &lt;code&gt;ctrl + ←&lt;/code&gt;, then add commas manually.&lt;/li&gt;
&lt;li&gt;All companies in the list begin with &lt;code&gt;PT&lt;/code&gt;. So, replace &lt;code&gt;PT&lt;/code&gt; (spaced) with &lt;code&gt;,PT&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;All official registers begin with &lt;code&gt;KEP&lt;/code&gt; or &lt;code&gt;S&lt;/code&gt;. There are some inconsistencies about spacing and dash/minus character. So, replace &lt;code&gt;KEP ?-?–?&lt;/code&gt; with &lt;code&gt;,KEP-&lt;/code&gt;. Also replace &lt;code&gt;S ?[-?–?]+&lt;/code&gt; with &lt;code&gt;,S-&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Lending type is either 'Konvensional', 'Syariah', or 'Konvensional dan Syariah'. Replace &lt;code&gt;Konvensional&lt;/code&gt; with &lt;code&gt;,Konvensional,&lt;/code&gt;. Replace &lt;code&gt;Syariah&lt;/code&gt; with &lt;code&gt;,Syariah,&lt;/code&gt;. Then replace &lt;code&gt;Konvensional,dan,Syariah&lt;/code&gt; with &lt;code&gt;Konvensional dan Syariah&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Official register ends with year. So I can replace &lt;code&gt;/2021&lt;/code&gt; to &lt;code&gt;/2021,&lt;/code&gt; and &lt;code&gt;/2020&lt;/code&gt; to &lt;code&gt;/2020,&lt;/code&gt; and so on.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hNdb0CqG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcd9ciuwlikf58rg8fk1.png" alt="CSV Lint menu"&gt;
&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;CSV Lint&lt;/code&gt; from &lt;code&gt;ctrl + shift + P&lt;/code&gt; or menu at bottom of VSCode window to check any incorrect row.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Save as &lt;code&gt;csv&lt;/code&gt; file, and we're done!&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#extra-miles"&gt;
  &lt;/a&gt;
  Extra Miles
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#select-specific-csv-columns"&gt;
  &lt;/a&gt;
  Select Specific CSV Columns
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Rainbow CSV&lt;/code&gt; has RBQL feature, which works like SQL. It can be used to select specific columns if needed.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hNdb0CqG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcd9ciuwlikf58rg8fk1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hNdb0CqG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcd9ciuwlikf58rg8fk1.png" alt="Query menu"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click on query menu, a new tab will open.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AtMJGklU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nci6b5olk47k3e59wq3f.png" alt="Run query to select column"&gt;
&lt;/li&gt;
&lt;li&gt;Select columns like in SQL query, then click &lt;strong&gt;Run&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O3mjHJoB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4z66sndnpbs1b6aqav97.png" alt="Query result"&gt;
&lt;/li&gt;
&lt;li&gt;The result appears in new tab. Save as new CSV using &lt;code&gt;ctrl + shift + s&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#save-as-json"&gt;
  &lt;/a&gt;
  Save as JSON
&lt;/h4&gt;

&lt;p&gt;Here's the tips to get JSON from CSV file, completely within VSCode.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RcwgIwCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4gdpj9vf1ahe2v9fo43u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RcwgIwCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4gdpj9vf1ahe2v9fo43u.png" alt="Convert CSV to JSON"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use &lt;code&gt;JSON to CSV&lt;/code&gt; extension. Open the CSV file, then press &lt;code&gt;F1 &amp;gt; Convert CSV to JSON&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;Prettify JSON&lt;/code&gt; extension. Press &lt;code&gt;F1 &amp;gt; Prettify JSON&lt;/code&gt;. Now it looks good!
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MIx8SrdW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3biyry23qfqk15pw1ypp.png" alt="Pretty JSON"&gt;
&lt;/li&gt;
&lt;li&gt;On Windows, there are trailing whitespace &lt;code&gt;\r&lt;/code&gt;. Simply find &lt;code&gt;\r&lt;/code&gt; and replace with empty string ``&lt;/li&gt;
&lt;li&gt;Save as JSON file. Do not save directly using &lt;code&gt;ctrl + S&lt;/code&gt;, it will overwrite the CSV file.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#handle-separator-placing"&gt;
  &lt;/a&gt;
  Handle Separator Placing
&lt;/h4&gt;

&lt;p&gt;To summarize, here are tips and trick to handle difficult separator placing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Utilize constant value&lt;/li&gt;
&lt;li&gt;Utilize newline&lt;/li&gt;
&lt;li&gt;Utilize multiple cursors like &lt;code&gt;alt + enter&lt;/code&gt; when searching&lt;/li&gt;
&lt;li&gt;Utilize manual multiple cursors with &lt;code&gt;ctrl + alt + ↑&lt;/code&gt; or &lt;code&gt;ctrl + alt + ↓&lt;/code&gt;. Note that only maximum of 10000 parallel cursors are allowed on VSCode. &lt;/li&gt;
&lt;li&gt;Utilize CSV Lint&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;I've been using this method quite often on various data source. Once, I wrangle 80-page PDF file and transform it to 40000-row CSV in about 20 minutes. Just keep in mind these three things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Follow these steps in order:

&lt;ul&gt;
&lt;li&gt;Copy all data then paste it into VSCode workspace&lt;/li&gt;
&lt;li&gt;Remove unnecessary lines&lt;/li&gt;
&lt;li&gt;Remove unusable columns&lt;/li&gt;
&lt;li&gt;Regex search and replace&lt;/li&gt;
&lt;li&gt;Remove special characters (commas, double-ticks, etc.)&lt;/li&gt;
&lt;li&gt;Setup header manually&lt;/li&gt;
&lt;li&gt;Add proper separators&lt;/li&gt;
&lt;li&gt;Save as CSV&lt;/li&gt;
&lt;li&gt;Add or remove column (optional)&lt;/li&gt;
&lt;li&gt;Convert to JSON (optional)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Be nimble on regex and its behaviors&lt;/li&gt;
&lt;li&gt;Don't be afraid to undo your steps when things get messy. Maybe your regex wasn't accurate enough. Go back and fix your regex. It will save you time rather than handling data manually. Manual wrangling should be exception, not mandatory step.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;I am Yogi Saputro, a full stack developer at Pinjammodal.id. I’m also passionate in building system, pipeline, and provide value to businesses. Check out my &lt;a href="https://github.com/yogski"&gt;Github&lt;/a&gt; and &lt;a href="https://yogski.github.io"&gt;portfolio&lt;/a&gt; as well.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>tutorial</category>
      <category>productivity</category>
      <category>vscode</category>
    </item>
    <item>
      <title>Rant on JS naming</title>
      <author>Michael</author>
      <pubDate>Tue, 17 Aug 2021 23:18:28 +0000</pubDate>
      <link>https://dev.to/michaelcurrin/rant-on-js-naming-hnn</link>
      <guid>https://dev.to/michaelcurrin/rant-on-js-naming-hnn</guid>
      <description>&lt;p&gt;What bothers me about JS is the way packages and tools are named.&lt;/p&gt;

&lt;p&gt;This post is inspired by this &lt;a href="https://dev.to/pigozzifr/what-s-the-worst-part-about-the-js-ecosystem-42l0/comments"&gt;post&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;I don't like the naming with an extension.&lt;/p&gt;

&lt;p&gt;Like "Node.js".&lt;/p&gt;

&lt;p&gt;It is not the name of a file.&lt;/p&gt;

&lt;p&gt;Similally, react.js, vue.js, next.js... are not the names of files. Well maybe sometimes, as a compiled result, but not in the source code and it usually it is &lt;code&gt;vue-1.2.3-esm.js&lt;/code&gt; or whatever as a long name anyway.&lt;/p&gt;

&lt;p&gt;So why add extension? And not use it consistently?&lt;/p&gt;

&lt;p&gt;You don't have to tell people the name of your language in your runtime or package name. Who doesn't know what Node or React are in JS or might confuse them with something else of JS if ".js" was omitted?&lt;/p&gt;

&lt;p&gt;We don't call it "pandas.py", "requests.py", "grails.jar" or "rails.rb" (say that out loud!) in other languages. Yes, Python packages have Py names sometimes like Pygame or Numpy, but that is fun and artistic and doesn't go to extension level convention.&lt;/p&gt;

&lt;p&gt;And Node and Node.js and NodeJS are all (sort of) correct spellings. Things diverge in the JS community, rather than converge (e.g. JavaScript, ECMAScript and EMScript are all the same thing and ES6 and ES2015 are the same thing).&lt;/p&gt;

&lt;p&gt;And some say "Node dot JS" aloud,  which is annoying. It sounded so verbose on NextConf for the presenters to say Next dot JS all the time when it is clear from the context and "Next" would be fine.&lt;/p&gt;

&lt;p&gt;Typing "next.js" is the most common way for packages while "DocsifyJS" is the preferred way of some packages like in Docsify docs.&lt;/p&gt;

&lt;p&gt;Anyway, that has been bothering me a while and wanted to vent about inconsistencies in the language we love to hate but can't do without (yet).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>rant</category>
    </item>
    <item>
      <title>What I have been learning from the job hunt.</title>
      <author>Alex Gwartney</author>
      <pubDate>Tue, 17 Aug 2021 23:06:56 +0000</pubDate>
      <link>https://dev.to/alexgwartney/what-i-have-been-learning-from-the-job-hunt-1h45</link>
      <guid>https://dev.to/alexgwartney/what-i-have-been-learning-from-the-job-hunt-1h45</guid>
      <description>&lt;p&gt;So as the title states I want this post to be about what I have learned from the dreaded job hunt so far.&lt;/p&gt;

&lt;p&gt;I have recently, been applying for work, and going through the interview process. And I can say with out a shadow  of a doubt, be prepared to be rejected. Because its going to happen a lot. &lt;/p&gt;

&lt;p&gt;I don't say this to be negative, but Its more of a reality when hunting for your first job. You will get a ton of advice on how to go about doing it. But nobody really tells you just how dam hard it really is. Unless they are a new dev them self's.&lt;/p&gt;

&lt;p&gt;My past three interviews I thought all went fairly well. Most specifically my last interview I just got done with. I went through three rounds of interviewing. All with high praise from the company all to just receive the "The decision came down to start up experience and a few more related projects.". &lt;/p&gt;

&lt;p&gt;So this leads me to my one main piece of advice when job hunting managing your expectations. As its easier said than done. Its going to suck your going to get mad. Your going to want to quit, but don't. &lt;/p&gt;

&lt;p&gt;Take the feed back take literally anything away from the interview that you can. Keep learning and filling in the gaps, and keep applying. &lt;/p&gt;

&lt;p&gt;I'm contusing to follow this advice till I land a job. And I hope to come back here one day and follow up with this statement. But in the time being, just know its hard you will go through a lot of trial and error. And the biggest thing is manage your expectations, don't let these companies set your own self worth, and realize its just business..&lt;/p&gt;

&lt;p&gt;Just know if your on the same path your not alone. But just because your not alone does not mean it doesn't suck. Embrace it learn from it move forward till you break through. As again the only person who is going to get you a job is your self.&lt;/p&gt;

&lt;p&gt;Feel free to share your journey down below. And I hope you all who are the hunt best of luck as well! &lt;/p&gt;

</description>
      <category>career</category>
    </item>
    <item>
      <title>How To Use SQL Subqueries</title>
      <author>Arctype Team</author>
      <pubDate>Tue, 17 Aug 2021 22:18:47 +0000</pubDate>
      <link>https://dev.to/arctype/how-to-use-sql-subqueries-2kn1</link>
      <guid>https://dev.to/arctype/how-to-use-sql-subqueries-2kn1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;To follow and fully understand this tutorial, you need to have the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arctype.com"&gt;Arctype&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Basic knowledge of SQL&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-are-subqueries"&gt;
  &lt;/a&gt;
  What Are Subqueries?
&lt;/h2&gt;

&lt;p&gt;A subquery is an SQL query that is nested in another SQL query. They assist queries in creating conditions for a &lt;code&gt;WHERE&lt;/code&gt; clause to filter rows and perform operations on them. Subqueries can be used with &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, and &lt;code&gt;DELETE&lt;/code&gt; statements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-of-a-subquery-in-a-where-clause"&gt;
  &lt;/a&gt;
  Example of a Subquery in a WHERE Clause
&lt;/h3&gt;

&lt;p&gt;We want to fetch users in a database with a transaction amount greater than $1,000. For our example, we’ll have two tables, namely &lt;code&gt;users&lt;/code&gt; and &lt;code&gt;transactions&lt;/code&gt; which store the users and transaction information.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S2zXHJs---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/1d9wdXxtcFi4xFdprEZ7HwX1OKofwNZZaBpCKKa9MO-eblX264nzJFT-WoHzGhM8UpwKSAKpwH_ar7Got4dThHRETRsiP99unGzkVvIDU_POsQofmvIcfcn2gU5_431vDN5sh_1E" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S2zXHJs---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/1d9wdXxtcFi4xFdprEZ7HwX1OKofwNZZaBpCKKa9MO-eblX264nzJFT-WoHzGhM8UpwKSAKpwH_ar7Got4dThHRETRsiP99unGzkVvIDU_POsQofmvIcfcn2gU5_431vDN5sh_1E" alt=""&gt;&lt;/a&gt;&lt;br&gt;
We can write a query that fetches all the rows from the &lt;code&gt;transactions&lt;/code&gt; table where the amount is more than $1,000, and then use it as a condition for another query that will fetch rows from the &lt;code&gt;users&lt;/code&gt; table based on results from the first query.&lt;/p&gt;

&lt;p&gt;The query will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT *
FROM users
WHERE id IN
    (SELECT user_id
     FROM transactions
     WHERE amount &amp;gt; 1000);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#advantages-of-subqueries"&gt;
  &lt;/a&gt;
  Advantages of Subqueries
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Subqueries improve query readability as opposed to joins by structuring them into isolated parts.&lt;/li&gt;
&lt;li&gt;It is easy to understand and maintain subqueries easily.&lt;/li&gt;
&lt;li&gt;Subqueries can replace complex joins and unions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-subqueries"&gt;
  &lt;/a&gt;
  Disadvantages of Subqueries
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Subqueries cannot modify a table and select from the same table in the same SQL statement.&lt;/li&gt;
&lt;li&gt;Subqueries are an expensive task, so it’s faster to use a join operation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#running-exercises-on-subqueries"&gt;
  &lt;/a&gt;
  Running Exercises on Subqueries
&lt;/h2&gt;

&lt;p&gt;We will explore a few examples using &lt;a href="https://arctype.com"&gt;Arctype&lt;/a&gt;, where we’ll showcase subqueries and learn how they are constructed and used in applications.&lt;/p&gt;

&lt;p&gt;We need to create a database we will work on within this tutorial. For the sake of convenience, I have created a &lt;a href="https://gist.github.com/LordGhostX/13792039bd92d2120084100a3ab13b4b"&gt;GitHub Gist&lt;/a&gt; that contains SQL files to build our database schemas and insert dummy data into it. To use this, we need to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Connect to our database using Arctype&lt;/li&gt;
&lt;li&gt;Navigate to the query tab in Arctype and create a new query&lt;/li&gt;
&lt;li&gt;Paste and run the &lt;a href="https://gist.github.com/LordGhostX/13792039bd92d2120084100a3ab13b4b#file-create-sql"&gt;create.sql file&lt;/a&gt; from the Gist to create the schemas&lt;/li&gt;
&lt;li&gt;Navigate to the query tab once again to create a new query&lt;/li&gt;
&lt;li&gt;Paste and run the &lt;a href="https://gist.github.com/LordGhostX/13792039bd92d2120084100a3ab13b4b#file-insert-sql"&gt;insert.sql file&lt;/a&gt; from the Gist to fill the database with dummy data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DWiP45rP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/0zOVjos1gA7BW03O45-40qirgfJwcuWcW68Fq3KxMNQB-ErC-tHbBpVvf9krTIDQBZ-ldAs1x8gFTDMU3JhpSqgbJWaOY7VALOgyLjq5ksH1PlqML0FSOo6ESNFitC54OO_nfMwT" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DWiP45rP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/0zOVjos1gA7BW03O45-40qirgfJwcuWcW68Fq3KxMNQB-ErC-tHbBpVvf9krTIDQBZ-ldAs1x8gFTDMU3JhpSqgbJWaOY7VALOgyLjq5ksH1PlqML0FSOo6ESNFitC54OO_nfMwT" alt="arctype table view"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#selecting-data-with-subqueries"&gt;
  &lt;/a&gt;
  Selecting Data with Subqueries
&lt;/h3&gt;

&lt;p&gt;Let’s write a query to select all rows from the &lt;code&gt;BUYER&lt;/code&gt; table referenced in the &lt;code&gt;SKU_DATA&lt;/code&gt; table. Create a new query in Arctype and execute the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT *
FROM BUYER
WHERE BuyerName IN
    (SELECT BUYER
     FROM SKU_DATA);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gREwao2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/_MJT6CNDwvHfrLIkViVF1cuvzwxwv5TIavPuaZG-eQtcttYGz8v4RBfhiAo2JYT2I1KGeWoWepB5pXD45YkiUKOWhe2fYFmK1IinpJP3vcGhey1poTD7wadPFacEGKCWw2rA3YwH" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gREwao2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/_MJT6CNDwvHfrLIkViVF1cuvzwxwv5TIavPuaZG-eQtcttYGz8v4RBfhiAo2JYT2I1KGeWoWepB5pXD45YkiUKOWhe2fYFmK1IinpJP3vcGhey1poTD7wadPFacEGKCWw2rA3YwH" alt="arctype select subquery results view"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the code above, we created an inner query that selects the &lt;code&gt;BUYER&lt;/code&gt; column from the &lt;code&gt;SKU_DATA&lt;/code&gt; table then uses it as a condition to select rows from the &lt;code&gt;BUYER&lt;/code&gt; table that have the same &lt;code&gt;BuyerName&lt;/code&gt; column values.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#updating-data-with-subqueries"&gt;
  &lt;/a&gt;
  Updating Data with Subqueries
&lt;/h3&gt;

&lt;p&gt;Let’s write a query that will increase the value of the &lt;code&gt;Price&lt;/code&gt; column in the &lt;code&gt;ORDER_ITEM&lt;/code&gt; table by 10% for all items sold in 2016. Create a new query in Arctype and execute the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;UPDATE ORDER_ITEM
SET Price=Price*1.1
WHERE SKU IN
    (SELECT SKU
     FROM CATALOG_SKU_2016);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QDksYNpD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/F_ew6nfG0FuwbAowpZiT1PLnQQfAXN0wYyRpgAnE4RDbyEFnainuo0ERFTeCgy1NtylCejZ1Cr2YnMjIauFmor0dwA7db3PxPHNLFKUP7lraJoebOLyaDT14m5kHtgoCv8nZofbR" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QDksYNpD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/F_ew6nfG0FuwbAowpZiT1PLnQQfAXN0wYyRpgAnE4RDbyEFnainuo0ERFTeCgy1NtylCejZ1Cr2YnMjIauFmor0dwA7db3PxPHNLFKUP7lraJoebOLyaDT14m5kHtgoCv8nZofbR" alt="arctype update subquery"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the code above, we created an inner query that selects the &lt;code&gt;SKU&lt;/code&gt; column from the &lt;code&gt;CATALOG_SKU_2016&lt;/code&gt; table to filter the rows that we should update in the &lt;code&gt;ORDER_ITEM&lt;/code&gt; table.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deleting-data-with-subqueries"&gt;
  &lt;/a&gt;
  Deleting Data with Subqueries
&lt;/h3&gt;

&lt;p&gt;We’re going to write a subquery that will delete all records from the &lt;code&gt;INVENTORY&lt;/code&gt; table stored in warehouses with less than 130,000 square feet. The query will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DELETE
FROM INVENTORY
WHERE WarehouseID IN
    (SELECT WarehouseID
     FROM WAREHOUSE
     WHERE SquareFeet &amp;lt; 130000);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EIT13g0f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/nrobtOuHvHmVuPcz-d5UGcSA3qK4NUO1SdUUrJ2hcYIPVfWe7jlE5KWZFEQbDKZuNHL5rxj5XJ0w8LnLVjPaQuTXu4FB8GS7MKz1Ld4Co577dkUIvrHv34M6b_zS70-Vpt04NmWe" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EIT13g0f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/nrobtOuHvHmVuPcz-d5UGcSA3qK4NUO1SdUUrJ2hcYIPVfWe7jlE5KWZFEQbDKZuNHL5rxj5XJ0w8LnLVjPaQuTXu4FB8GS7MKz1Ld4Co577dkUIvrHv34M6b_zS70-Vpt04NmWe" alt="arctype delete subquery view"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-nested-subqueries"&gt;
  &lt;/a&gt;
  Using Nested Subqueries
&lt;/h2&gt;

&lt;p&gt;It is also possible to have subqueries inside another subquery. Here’s an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT *
FROM CATALOG_SKU_2017
WHERE SKU IN
    (
        SELECT SKU
        FROM INVENTORY
        WHERE WarehouseID IN
        (
            SELECT WarehouseID
            FROM WAREHOUSE
            WHERE SquareFeet &amp;gt; 130000
        )
    );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lm9FtN76--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/YX-5u9PVaAiGsZRL1I-WZdw1rbET8ZtRXXFTGLdESGGZ1TFf0JN_fR9KiPd_eN8PUlAGIt_pD_Q6WJrBtZV-Syk0O24QV9oQVbbdq4uS3ptwRUIyCgsv3CKd0d36tEtstgHFRV-m" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lm9FtN76--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/YX-5u9PVaAiGsZRL1I-WZdw1rbET8ZtRXXFTGLdESGGZ1TFf0JN_fR9KiPd_eN8PUlAGIt_pD_Q6WJrBtZV-Syk0O24QV9oQVbbdq4uS3ptwRUIyCgsv3CKd0d36tEtstgHFRV-m" alt="arctype nested subquery results view"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, we selected all the rows from the &lt;code&gt;CATALOG_SKU_2017&lt;/code&gt; table stored in warehouses with square feet greater than 130,000.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we learned about subqueries,  a way of running queries inside queries. We also learned how they work, their benefits and limitations, and ran examples on data using &lt;a href="https://arctype.com"&gt;Arctype&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>guide</category>
      <category>beginners</category>
      <category>sql</category>
    </item>
    <item>
      <title>Add the new Google Sign In to your React app!</title>
      <author>Emanuel Lindström</author>
      <pubDate>Tue, 17 Aug 2021 22:10:15 +0000</pubDate>
      <link>https://dev.to/mremanuel/add-the-new-google-sign-in-to-your-react-app-p6m</link>
      <guid>https://dev.to/mremanuel/add-the-new-google-sign-in-to-your-react-app-p6m</guid>
      <description>&lt;p&gt;&lt;em&gt;TLDR: Scroll down and copy the code. You only need to add your login logic.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This article will cover: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A brief introduction to the new-ish Google Sign In api&lt;/li&gt;
&lt;li&gt;How to implement it using React and Typescript

&lt;ul&gt;
&lt;li&gt;Add relevant typings on global window object&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Google recently announced they are discontinuing their old auth-service "Google Sign-In" in favor for their new and improved service "Sign In With Google".&lt;/p&gt;

&lt;p&gt;Their new service comes in two parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Login button&lt;/li&gt;
&lt;li&gt;One Tap&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can read more about them &lt;a href="https://developers.google.com/identity/gsi/web"&gt;here&lt;/a&gt;. &lt;br&gt;
We'll cover the first one in this article, how it works and how to implement it in React with Typescript. &lt;/p&gt;

&lt;p&gt;Compared to the old service, this one is much easier to use. It's straight-forward enough to implement the login button yourself without needing a library like (the awesome) &lt;code&gt;react-google-login&lt;/code&gt; that's the go-to solution for the old api. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#google-auth-introduction"&gt;
  &lt;/a&gt;
  Google Auth Introduction
&lt;/h2&gt;

&lt;p&gt;I'm just going to go over the basics here. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: There might be a much better way to do this. I would be happy to know how, so leave a comment! I couldn't find any examples of this, so I figured I'd post my implementation and hopefully help someone else.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Although the new auth api is a bit tricky to get your head around at first when using React, we can make it work. The trick is to understand how the script loads the client and how that fits with React's loading and rendering. &lt;/p&gt;

&lt;p&gt;The google documentation covers both the html and javascript api, and we'll be using the latter. But since we're building with React, we mostly use the step-by-step guide to figure out how the auth api works. We have to account for how React loads and renders elements. Unfortunately this means we can't just statically just stick it in the header like the guide instructs. &lt;/p&gt;

&lt;p&gt;After you followed the &lt;a href="https://developers.google.com/identity/gsi/web/guides/get-google-api-clientid"&gt;setup process&lt;/a&gt;, the documentation tells you to add a script tag to your header (in &lt;code&gt;public/index.html&lt;/code&gt;), but since we're using React we're &lt;strong&gt;not&lt;/strong&gt; going to do that. We're going to control when and where we run that script, and thus initiate the google auth client.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// The script that runs and load the new google auth client.&lt;/span&gt;
&lt;span class="c1"&gt;// We're not(!) adding it to our header like the guide says.&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://accounts.google.com/gsi/client"&lt;/span&gt; &lt;span class="na"&gt;async&lt;/span&gt; &lt;span class="na"&gt;defer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Lets get started
&lt;/h3&gt;

&lt;p&gt;First off, Typescript will complain about missing types on the &lt;code&gt;window&lt;/code&gt; object. We'll fix that properly later.&lt;/p&gt;

&lt;p&gt;What we'll implement first is adding the script that loads the google auth client when our sign-in page renders, add the "target div" that the script will be looking for, and initiate the client with our callback function. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;Attaching that callback-function to the google client is what makes using the new auth api with React a bit troublesome. (but even more so using the old one!). If we add the script tag to the static html like the docs say, we can't pass it any function defined in react. We could maybe handle stuff by defining a function on the server-side of things, but I want to stay within React and handle this on the front-end and use my graphql-hooks to login.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-process"&gt;
  &lt;/a&gt;
  The process
&lt;/h2&gt;

&lt;p&gt;When our login page renders, we'll attach the google client-script to the header from inside a &lt;code&gt;useEffect&lt;/code&gt; hook. We'll add an initializer-function to the &lt;code&gt;onLoad&lt;/code&gt;-eventlistener for that script tag. The onLoad event will then trigger and initialize the google auth client with our callback attached.&lt;/p&gt;

&lt;p&gt;The google client will then magically find our already rendered &lt;code&gt;div&lt;/code&gt; with &lt;code&gt;id=g_id_signin&lt;/code&gt; and render the login-button. &lt;/p&gt;

&lt;p&gt;A nice looking, personalized google sign-in button should now be visible to the user. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yLqfm7pQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tjg7uyljrdx79u3mxx9k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yLqfm7pQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tjg7uyljrdx79u3mxx9k.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@material-ui/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;GoogleSignin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;gsiScriptLoaded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setGsiScriptLoaded&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;gsiScriptLoaded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initializeGsi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Typescript will complain about window.google&lt;/span&gt;
      &lt;span class="c1"&gt;// Add types to your `react-app-env.d.ts` or //@ts-ignore it.&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;google&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;gsiScriptLoaded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;

      &lt;span class="nx"&gt;setGsiScriptLoaded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;client_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GOOGLE_CLIENT_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;handleGoogleSignIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;script&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://accounts.google.com/gsi/client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initializeGsi&lt;/span&gt;
    &lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;google-client-script&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)?.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Cleanup function that runs when component unmounts&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;google&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;google-client-script&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)?.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;handleGoogleSignIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initializeGsi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;




&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleGoogleSignIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CredentialResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientId&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;credential&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="c1"&gt;// Implement your login mutations and logic here.&lt;/span&gt;
    &lt;span class="c1"&gt;// Set cookies, call your backend, etc. &lt;/span&gt;

    &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;g_id_signin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might want to add some more implementation details here and there. But this is the gist of it! You can at least use it as a starting point. Hope it helps! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fixing-the-window-types"&gt;
  &lt;/a&gt;
  Fixing the window types
&lt;/h2&gt;

&lt;p&gt;If you're using &lt;code&gt;create-react-app&lt;/code&gt;, you will already have the file &lt;code&gt;react-app-env.d.ts&lt;/code&gt; in your project root. You can add the types for the google auth api there. I translated the api documentation to typescript types. There might be some errors since I haven't used and tested all the functions. But it &lt;em&gt;should&lt;/em&gt; be correct.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;/// &amp;lt;reference types="react-scripts" /&amp;gt;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IdConfiguration&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;client_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;auto_select&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
  &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handleCredentialResponse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CredentialResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
  &lt;span class="nx"&gt;login_uri&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;native_callback&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;
  &lt;span class="nx"&gt;cancel_on_tap_outside&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
  &lt;span class="nx"&gt;prompt_parent_id&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;nonce&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;state_cookie_domain&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;ux_mode&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;popup&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redirect&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;allowed_parent_origin&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="nx"&gt;intermediate_iframe_close_callback&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;CredentialResponse&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;credential&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;select_by&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user_1tap&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user_2tap&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;btn_confirm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;brn_add_session&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;btn_confirm_add_session&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;clientId&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;GsiButtonConfiguration&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;standard&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;icon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;outline&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;filled_blue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;filled_black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;large&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;medium&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;small&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;signin_with&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;signup_with&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;continue_with&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;signup_with&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rectangular&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pill&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;circle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;square&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;logo_alignment&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;left&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;local&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;PromptMomentNotification&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;isDisplayMoment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
  &lt;span class="nx"&gt;isDisplayed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
  &lt;span class="nx"&gt;isNotDisplayed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
  &lt;span class="nx"&gt;getNotDisplayedReason&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;browser_not_supported&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;invalid_client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;missing_client_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;opt_out_or_no_session&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;secure_http_required&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;suppressed_by_user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;unregistered_origin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;unknown_reason&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;isSkippedMoment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
  &lt;span class="nx"&gt;getSkippedReason&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;auto_cancel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user_cancel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tap_outside&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;issuing_failed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;isDismissedMoment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
  &lt;span class="nx"&gt;getDismissedReason&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;credential_returned&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cancel_called&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flow_restarted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;getMomentType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;display&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;skipped&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dismissed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Window&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;google&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IdConfiguration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
        &lt;span class="na"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="na"&gt;momentListener&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PromptMomentNotification&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
        &lt;span class="na"&gt;renderButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="na"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GsiButtonConfiguration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;clickHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
        &lt;span class="na"&gt;disableAutoSelect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;
        &lt;span class="na"&gt;storeCredential&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nl"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="na"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
        &lt;span class="na"&gt;onGoogleLibraryLoad&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;
        &lt;span class="na"&gt;revoke&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;hint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
          &lt;span class="na"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;successful&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#shameless-plug"&gt;
  &lt;/a&gt;
  Shameless plug
&lt;/h3&gt;

&lt;p&gt;If you like this kind of stuff and are looking for a job in Sweden, Gothenburg, hit me up! &lt;/p&gt;

</description>
      <category>react</category>
      <category>google</category>
      <category>signin</category>
      <category>auth</category>
    </item>
    <item>
      <title>Entendendo unidades CSS e quando utilizá-las</title>
      <author>Camilo Micheletto</author>
      <pubDate>Tue, 17 Aug 2021 22:08:55 +0000</pubDate>
      <link>https://dev.to/lixeletto/entendendo-unidades-css-e-quando-utiliza-las-3ecc</link>
      <guid>https://dev.to/lixeletto/entendendo-unidades-css-e-quando-utiliza-las-3ecc</guid>
      <description>&lt;p&gt;&lt;em&gt;Nesse artigo vou explicar sobre as unidades CSS px, %, em, rem, ch, e ex e exemplos de casos de uso delas. Esse artigo será escrito em duas partes, detalhes do que vou abordar na segunda no final do texto.&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#introdu%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Introdução
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;TLDR, porque eu escrevi esse artigo e o que eu decidi omitir dele.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No Twitter e nos grupos do Telegram que eu participo vejo com muita frequência dúvidas sobre como e onde usar certas unidades CSS ou pessoas utilizando e manipulando unidades de forma incorreta. Para deixar claro, o que considero como uso incorreto de unidades CSS é utilizá-las de maneira que prejudique a acessibilidade e realizar operações com elas que o browser não consegue computar ou que são baseadas em números mágicos ou lógicas obscuras. Penso que o motivo dessas dúvidas é que geralmente as explicações sobre essas unidades vem desacopladas da explicação de como elas são aplicadas no dia-a-dia e, os casos de uso que a gente realmente entende como usar elas no seu potencial máximo vão ocorrendo com tempo e experiência. Abaixo vou explicar um pouco sobre cada unidade de medida e colocar como exemplo (quando possível) como e porque utilizei cada uma delas.&lt;/p&gt;

&lt;p&gt;Por motivos de brevidade e utilidade omiti unidades com escopo muito específico (como Q, Hz) e unidades novas em fase experimental (Unidades do módulo CSS nível 4, lh, rlh, cap, etc).&lt;/p&gt;






&lt;h2&gt;
  &lt;a href="#unidades-absolutas-e-relativas"&gt;
  &lt;/a&gt;
  Unidades absolutas e relativas
&lt;/h2&gt;

&lt;p&gt;Nas sessões abaixo vocês vão cansar de ler sobre unidades absolutas e relativas. Unidades relativas são unidades cujo valor depende de um fator externo, como por exemplo a % que depende do valor do elemento pai, do &lt;code&gt;vh&lt;/code&gt; que varia de acordo com a altura do viewport, e assim por diante. Unidades absolutas são unidades ancoradas em medidas físicas reais, é o caso do &lt;code&gt;px&lt;/code&gt; (píxeis) e do &lt;code&gt;cm&lt;/code&gt; (centímetros).&lt;/p&gt;






&lt;h2&gt;
  &lt;a href="#px"&gt;
  &lt;/a&gt;
  px
&lt;/h2&gt;

&lt;p&gt;Um píxel é o conjunto de três pontos minúsculos - um vermelho, uma verde e um azul (RGB) - que juntos compõe tudo aquilo que você enxerga na tela que você está lendo esse post. Cada cor desse píxel exibe de 0 a 255 gamas de cores, somando um pouco mais que 16 milhões de possibilidades de cor. Por causa da ~bobagem~ moda do pixel-perfect, muitas pessoas se sentiam inclinadas a declarar todas as medidas de todos elementos com os mesmos pixeis utilizados no layout.&lt;br&gt;
Com o surgimento de diversos tamanhos de dispositivos, cada um com diferentes formatos e taxas de densidade de pixel por polegada, ficou muito difícil manter esse valor absoluto pra elementos que precisam se adaptar de acordo a tela.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quando usar?&lt;/strong&gt;&lt;br&gt;
Generalizando - use pra elementos e medidas que não irão mudar, independente do contexto ou tamanho de &lt;em&gt;viewport&lt;/em&gt; (tela do dispositivo). Um bom exemplo de uso são bordas e alguns box-shadows e pra definir valores mínimos e máximos de elementos.&lt;/p&gt;

&lt;p&gt;Geralmente defino um tamanho mínimo e máximo para botões pra manter uma superfície clicável grande em dispositivos pequenos mesmo que o texto seja pequeno e para restringir o tamanho do botão dentro de elementos de bloco, pois se deixar ele fica gigante, da largura do elemento pai.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cxT75HvZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6566mvt2n63eprjn1nq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cxT75HvZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6566mvt2n63eprjn1nq.png" alt="Botão ocupando toda largura do container sem ter max-width"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pznekmUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3f6a3b7oqzundxy9b37f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pznekmUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3f6a3b7oqzundxy9b37f.png" alt="Max width restringindo o tamanho total do botão"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A preocupação de se um elemento tem a largura ideal para ser clicado pelos dedos é um tema real de UX chamado &lt;em&gt;finger-friendly design&lt;/em&gt;, &lt;a href="https://www.smashingmagazine.com/2012/02/finger-friendly-design-ideal-mobile-touchscreen-target-sizes/"&gt;esse artigo da Smashing Magazine&lt;/a&gt; explica muito bem o conceito.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Quando não usar?&lt;/strong&gt;&lt;br&gt;
Bom, seria muito fácil assumir que tudo que não se encaixa nos requisitos de "Quando não usar?" entraria aqui, mas quero ressaltar que &lt;strong&gt;jamais&lt;/strong&gt; se deve definir um tamanho de fonte em píxel.&lt;br&gt;
Vamos supor que você coloque a &lt;code&gt;font-size&lt;/code&gt; do elemento &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; em 16px. Em um dispositivo retina (as telas da apple por exemplo), existem 4 vezes mais pixeis dentro da mesma polegada do que em telas comuns, mas apesar da diferença de contexto, seu valor continuará estático. Caso pessoas com deficiências visuais apliquem zoom na sua página, os textos declarados com &lt;code&gt;px&lt;/code&gt; não aumentarão com o zoom, causando um problema f*dido de acessibilidade.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;O que a WCAG (Diretrizes de Acessibilidade para o Conteúdo da Web) diz sobre zoom e font-size?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.w3.org/TR/WCAG21/#resize-text"&gt;WCAG 1.4.4&lt;/a&gt;: Os usuários devem ser capazes de redimensionar textos sem tecnologia assistiva em até 200 por cento, sem perda de conteúdo ou funcionalidade. (Nível AA).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.w3.org/TR/WCAG21/#visual-presentation"&gt;WCAG 1.4.10&lt;/a&gt;: Os usuários devem ser capazes de redimensionar o texto sem serem forçados a usar a barra de rolagem horizontal e verticalmente para ler o conteúdo. (Nível AA).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Isso é de suma importância pois usuários com baixa acurácia visual simplesmente não vão conseguir consumir seu conteúdo, é ruim pra você e especialmente ruim pra essas pessoas.&lt;/p&gt;

&lt;p&gt;Você pode ler mais sobre como solucionar esse problema com zoom &lt;a href="https://adrianroselli.com/2019/12/responsive-type-and-zoom.html"&gt;nesse post incrível do Adrian Roselli&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  %
&lt;/h2&gt;

&lt;p&gt;Porcentagens são &lt;strong&gt;quase&lt;/strong&gt; sempre relativas às medidas do elemento pai delas. Se você declarar uma &lt;code&gt;width&lt;/code&gt; de 20% em um elemento, a largura desse será 20% da largura do pai, mesma coisa com outras propriedades como &lt;code&gt;height&lt;/code&gt; e &lt;code&gt;margin / padding&lt;/code&gt;. Agora vem a parte do quase:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Um &lt;code&gt;line-height&lt;/code&gt; de 150% é o 1.5x maior que o valor de &lt;code&gt;line-height&lt;/code&gt; base, mesma coisa com o &lt;code&gt;font-size&lt;/code&gt;. Com base eu me refiro valores padrão de cada propriedade CSS, essas propriedades possuem um valor inicial próprio, definido pelo browser (user agent) ou pré-definidos pelo usuário (root).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Um &lt;code&gt;transform: translateX(-100%);&lt;/code&gt; significa que o elemento irá se movimentar para esquerda uma quantia relativa &lt;em&gt;ao seu próprio tamanho&lt;/em&gt;, então se o elemento tiver 15px, ele se movimentará 15px para a esquerda.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Quando usar?&lt;/strong&gt;&lt;br&gt;
O melhor caso de uso que eu posso imaginar é a largura e altura de elementos aninhados, ou seja, que o pai não seja o &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;. Isso porque quase todos elementos que estão dentro de um pai não podem ter largura ou altura &lt;em&gt;maiores&lt;/em&gt; que a do pai, facilitando muito na criação de elementos responsivos. Se você tem a certeza que os elementos diretamente no body não vão extrapolar o tamanho do viewport (a não ser que seu layout seja horizontal e não vertical), se todos elementos internos desse são uma porcentagem do tamanho do pai, esses dificilmente vão estourar o tamanho do container.&lt;/p&gt;

&lt;p&gt;Um exemplo que gosto muito é usar porcentagem com CSS grid. O ideal é sempre usar a unidade &lt;code&gt;fr&lt;/code&gt; (vou falar dela mais adiante), porém nesse caso em específico ele é muito poderoso.&lt;/p&gt;

&lt;p&gt;Caso: Vamos supor que temos um layout que todo conteúdo fica no meio do site, como acontece em redes sociais como o Tumblr, porém no celular o espaço das laterais tem que diminuir expressivamente pro conteúdo caber. Esse layout é conhecido como &lt;em&gt;holy grail layout&lt;/em&gt;, por ser um padrão amplamente adotado na web ainda hoje.&lt;/p&gt;

&lt;p&gt;A maioria das pessoas logo pensa em colocar &lt;code&gt;padding&lt;/code&gt; e &lt;code&gt;media queries&lt;/code&gt; ou &lt;code&gt;margin: 0 auto&lt;/code&gt;, mas tem essa solução com grid que é bem elegante:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.conteudo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A função &lt;code&gt;min()&lt;/code&gt; vai selecionar entre 600% e 100% qual o menor valor que ela irá retornar, em telas grandes a coluna do meio terá no máximo 600px e em telas menores que isso ela terá 100% da largura. Como a unidade &lt;code&gt;fr&lt;/code&gt; calcula o espaço disponível, como 100% ocupa todo o espaço horizontal, as laterais serão iguais a zero.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JiKE_HYE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdv459dvobyjq3vy2auj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JiKE_HYE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdv459dvobyjq3vy2auj.png" alt="Exemplo do uso da função min deixando a largura da coluna central do grid em 100% em dispositivos menores"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Você pode ler mais sobre essa estratégia &lt;a href="https://www.joshwcomeau.com/css/full-bleed/"&gt;nesse post maravilhoso do Josh Comeau&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quando não usar?&lt;/strong&gt;&lt;br&gt;
Evite usar com parâmetros relacionados a fonte e tome sempre o cuidado de declarar um valor máximo e mínimo para componentes que são elementos e não containers, um botão com uma &lt;code&gt;width&lt;/code&gt; de 20% pode ficar ridiculamente maior em telas grandes.&lt;/p&gt;

&lt;p&gt;Outra coisa que não faz mais sentido fazer é declarar &lt;code&gt;font-size: 100%;&lt;/code&gt; no elemento &lt;code&gt;body&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt; ou &lt;code&gt;:root&lt;/code&gt;. Isso era feito pois como a porcentagem nesse caso diz respeito às definições de usuário, isso garantiria a flexibilidade da fonte. Porém o &lt;code&gt;rem&lt;/code&gt; já faz isso direto da caixa.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#rem"&gt;
  &lt;/a&gt;
  rem
&lt;/h2&gt;

&lt;p&gt;O &lt;code&gt;rem&lt;/code&gt; é o &lt;em&gt;root font-size&lt;/em&gt;, ou seja, 1rem é igual ao tamanho total do &lt;code&gt;font-size&lt;/code&gt; do elemento raiz e, na ausência desse, o tamanho inicial da propriedade &lt;code&gt;font-size&lt;/code&gt;. Ambos valores serão 16px a não ser que o usuário personalize o tamanho da fonte do sistema ou utilize zoom.&lt;/p&gt;

&lt;p&gt;O &lt;code&gt;rem&lt;/code&gt; corresponde a uma fração desse valor, então 1.5rem equivalem a 24px, visto que:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;16px * 1.5 = 24px&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Quando usar?&lt;/strong&gt;&lt;br&gt;
Para o tamanho de fontes, raramente há um caso de uso que algo que não seja tamanho de fonte precise se pautar em &lt;code&gt;rem&lt;/code&gt;, visto que por mais que essa medida seja relativa, seu valor muda apenas em casos muito específicos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quando não usar?&lt;/strong&gt;&lt;br&gt;
Não consigo pensar em nenhuma contra indicação de uso, mas da maneira de utilizar. Evitem de toda a forma converter rem em px, caso seu design system utilize uma escala modular onde todo &lt;code&gt;font-size&lt;/code&gt; é maior que o próximo de acordo com uma proporção, crie uma variável base e use a função &lt;code&gt;calc()&lt;/code&gt;, você criar listas com números quebrados gigante é difícil de manter, entender e justificar.&lt;br&gt;
Para mais informações sobre esse caso, &lt;a href="https://every-layout.dev/rudiments/modular-scale/"&gt;esse é um ótimo artigo sobre modular scale com CSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Outra contraindicação é o "hack" de definir o &lt;code&gt;font-size&lt;/code&gt; no elemento &lt;code&gt;:root&lt;/code&gt; para "facilitar" a conversão de &lt;code&gt;px&lt;/code&gt; pra &lt;code&gt;rem&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;equivalente&lt;/span&gt; &lt;span class="err"&gt;a&lt;/span&gt; &lt;span class="err"&gt;15px&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Isso é extremamente prejudicial pra acessibilidade e cai no problema do zoom que eu citei lá na sessão sobre &lt;code&gt;px&lt;/code&gt;.&lt;/p&gt;






&lt;h2&gt;
  &lt;a href="#em"&gt;
  &lt;/a&gt;
  em
&lt;/h2&gt;

&lt;p&gt;O &lt;code&gt;em&lt;/code&gt; funciona quase da mesma forma que o &lt;code&gt;rem&lt;/code&gt;, porém ao invés de ser igual ao &lt;code&gt;font-size&lt;/code&gt; definido no &lt;code&gt;:root&lt;/code&gt; ela é igual ao &lt;code&gt;font-size&lt;/code&gt; do elemento em que ela for utilizado.&lt;/p&gt;

&lt;p&gt;Se tivermos um &lt;code&gt;p&lt;/code&gt; dentro de uma &lt;code&gt;div&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; Lorem ipsum dorsit amet&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O valor do &lt;code&gt;font-size&lt;/code&gt; na &lt;code&gt;div&lt;/code&gt; for 22px e o &lt;code&gt;line-height&lt;/code&gt; for 1em&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.text-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;22px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O 1em vai ser 100% do &lt;code&gt;font-size&lt;/code&gt; do container do elemento pois, se não declarado, o elemento &lt;code&gt;p&lt;/code&gt; vai herdar o &lt;code&gt;font-size&lt;/code&gt; de &lt;code&gt;.text-container&lt;/code&gt;. Caso tanto o &lt;code&gt;font-size&lt;/code&gt; quanto o &lt;code&gt;line-height&lt;/code&gt; estiverem na classe &lt;code&gt;.text&lt;/code&gt;, você vai obter o mesmo resultado.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quando usar?&lt;/strong&gt;&lt;br&gt;
Como a gente sempre precisa ficar atento às fontes declaradas nos elementos pai pra ter controle sobre como o &lt;code&gt;em&lt;/code&gt; escala, eu geralmente uso essa unidade pra ícones e elementos que precisam escalar junto com o texto, como botões e inputs.&lt;/p&gt;

&lt;p&gt;No exemplo abaixo eu criei um botão que aumenta e diminui o &lt;code&gt;padding&lt;/code&gt; de acordo com o &lt;code&gt;font-size&lt;/code&gt;, o &lt;code&gt;padding&lt;/code&gt; está declarado em &lt;code&gt;em&lt;/code&gt;.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/camilo-micheletto/embed/PomgzVB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quando não usar?&lt;/strong&gt;&lt;br&gt;
Não usar em elementos que estão em contextos muito aninhados de &lt;code&gt;font-size&lt;/code&gt; pois ficará difícil mapear qual &lt;code&gt;font-size&lt;/code&gt; o &lt;code&gt;em&lt;/code&gt; determinado elemento está se baseando. Todas as afirmações sobre &lt;code&gt;rem&lt;/code&gt; se aplicam também.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ch-e-ex"&gt;
  &lt;/a&gt;
  ch e ex
&lt;/h2&gt;

&lt;p&gt;Coloquei as duas unidades juntas pois elas funcionam de maneira parecida - ambas são baseadas em medidas dos caracteres da primeira &lt;code&gt;font-family&lt;/code&gt; disponível.&lt;/p&gt;

&lt;p&gt;O &lt;code&gt;ch&lt;/code&gt; é referente a largura do '0' (zero) da fonte, já o &lt;code&gt;ex&lt;/code&gt; é referente a altura do caractere 'x' minúsculo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quando usar?&lt;/strong&gt;&lt;br&gt;
Como 1ch diz respeito a mais ou menos um caractere (o valor é bem aproximado e varia dependendo da fonte), é bem interessante pra &lt;code&gt;width&lt;/code&gt; de campos de texto. &lt;a href="https://baymard.com/blog/line-length-readability"&gt;Estudos indicam&lt;/a&gt; que uma linha de texto que tem entre 50 e 60 caracteres de largura apresenta uma legibilidade melhor do que linhas mais curtas ou mais largas.&lt;/p&gt;

&lt;p&gt;Essa regra combina muito com a função &lt;code&gt;clamp()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;60ch&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Eu particularmente gosto de usar pra propriedade &lt;code&gt;gap&lt;/code&gt; quando uso textos dentro de um elemento flex ou grid, pois como ela escala menos que o &lt;code&gt;rem&lt;/code&gt; (A cada 1 rem são 16px), você consegue fazer espaçamentos de texto menores sem escrever números muito quebrados.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quando não usar?&lt;/strong&gt;&lt;br&gt;
Não consegui pensar em nenhuma contraindicação, tem muitos casos de uso que outras unidades funcionam melhor, mas nunca tive problema em utilizar ela em outros contextos não ligados a texto, se você já teve, comente, vai ser maneiro.&lt;/p&gt;






&lt;p&gt;Como isso aqui já está virando um livro, resolvi quebrar em duas publicações, na próxima vou falar de:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Números inteiros&lt;/li&gt;
&lt;li&gt;Unidades de viewport&lt;/li&gt;
&lt;li&gt;Unidades de ângulo&lt;/li&gt;
&lt;li&gt;Unidades de resolução&lt;/li&gt;
&lt;li&gt;Unidades para impressos&lt;/li&gt;
&lt;/ul&gt;






&lt;h2&gt;
  &lt;a href="#fontes-e-leituras-adicionais"&gt;
  &lt;/a&gt;
  Fontes e leituras adicionais
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.w3.org/TR/css-values-3/#font-relative-lengths"&gt;O site da W3 (Não confundir com W3Schools)&lt;/a&gt;&lt;br&gt;
Sim, eu li esse calhamaço, mas não é tão ruim não tá? Recomendo demais.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://thecsspodcast.googledevelopers.libsynpro.com/tcp-css-podcast-episode-008"&gt;Episódio do The CSS Podcast sobre unidades CSS&lt;/a&gt;&lt;br&gt;
Nunca achei que eu ia aprender tanto com um podcast sobre CSS, o Adam e a Una são dois nerds, provavelmente vou revisar esse texto quando escutar novamente.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*Observação: *&lt;br&gt;
Se nesse texto eu:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Falei merda&lt;/li&gt;
&lt;li&gt;Caguei regra&lt;/li&gt;
&lt;li&gt;Perdi a oportunidade de usar de linguagem neutra&lt;/li&gt;
&lt;li&gt;Cometi erros de português&lt;/li&gt;
&lt;li&gt;Poderia ter explicado algo melhor ou falei algo que não fez sentido&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ou se só ficou alguma dúvida mesmo.&lt;br&gt;
Pode comentar aqui ou me chamar no &lt;a href="https://mobile.twitter.com/lixeletto"&gt;Twitter&lt;/a&gt; que eu vou amar ok?&lt;/p&gt;

&lt;p&gt;Obrigadíssimo 😙&lt;/p&gt;

</description>
      <category>css</category>
      <category>iniciante</category>
    </item>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 17 Aug 2021 21:37:40 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-27ma</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-27ma</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#improving-the-experience-of-a-product-with-technical-solutions"&gt;
  &lt;/a&gt;
  Improving the experience of a product with technical solutions
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/michaelmangial1"&gt;@michaelmangial1&lt;/a&gt;
 explains how to stand out as a developer when collaborating with product teams. The secret? The more trusted you are, the more valuable you are.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/michaelmangial1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WRAIhbqh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--fInOdQa9--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/311068/7b0d6bcb-b712-4885-b97a-c524bba21bc9.jpeg" alt="michaelmangial1"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/michaelmangial1/3-not-so-obvious-ways-to-stand-out-on-a-product-team-as-a-developer-2d20" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;3 Not-So-Obvious Ways to Stand Out On a Product Team As a Developer&lt;/h2&gt;
      &lt;h3&gt;Michael Mangialardi ・ Aug 13 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#navigating-mapping-%F0%9F%97%BA"&gt;
  &lt;/a&gt;
  Navigating... mapping 🗺
&lt;/h2&gt;

&lt;p&gt;Ever encountered the error &lt;code&gt;field type is not supported for [whatever you are trying to do with Elasticsearch]&lt;/code&gt;? &lt;a class="mentioned-user" href="https://dev.to/lisahjung"&gt;@lisahjung&lt;/a&gt;
 is here to help. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/lisahjung" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rvYY1x8N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EYp2zNpk--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/370682/46ab80b5-f9c5-48e3-81ad-61dca12c2b67.jpeg" alt="lisahjung"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lisahjung/beginner-s-guide-understanding-mapping-with-elasticsearch-and-kibana-3646" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;[Beginner's guide] Understanding mapping with Elasticsearch and Kibana&lt;/h2&gt;
      &lt;h3&gt;Lisa ・ Aug 13 ・ 26 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#elasticsearch&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#database&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#datascience&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#sometimes-the-fastest-solution-is-ok"&gt;
  &lt;/a&gt;
  Sometimes, the fastest solution is ok!
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/dekel"&gt;@dekel&lt;/a&gt;
 makes an argument for using jQuery for certain types of projects. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/dekel" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--202j073F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--azONbvUy--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/584045/0325eb17-b83e-4024-833e-3f7971bad5db.jpeg" alt="dekel"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/dekel/last-week-i-wrote-some-jquery-and-no-one-fired-me-3iao" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Last Week I Wrote Some jQuery (and no one fired me 🤓)&lt;/h2&gt;
      &lt;h3&gt;Dekel ・ Aug 15 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-react-learning-curve"&gt;
  &lt;/a&gt;
  The React learning curve
&lt;/h2&gt;

&lt;p&gt;Congrats to &lt;a class="mentioned-user" href="https://dev.to/stuxnat"&gt;@stuxnat&lt;/a&gt;
 for completing their final project for the Flatiron School! Thanks for sharing it with us.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/stuxnat" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yj1zQPIN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--KxVO_BUp--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/684614/ffeaedba-a88e-4a46-8a83-f1da860a781f.png" alt="stuxnat"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/stuxnat/final-react-project-2poi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Final React Project&lt;/h2&gt;
      &lt;h3&gt;Natalie Taktachev ・ Aug 12 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#reactnative&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#redux&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-ongoing-journey-of-being-a-dev"&gt;
  &lt;/a&gt;
  The ongoing journey of being a dev
&lt;/h2&gt;

&lt;p&gt;"Learning how to code isn't the end of the journey for a software developer," says &lt;a class="mentioned-user" href="https://dev.to/bk_973"&gt;@bk_973&lt;/a&gt;
. So, how can you continue to improve? Read on...  &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/bk_973" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4DyYNm13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--leuek-bv--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/587257/7533d991-91cd-46f3-995f-6b6d58f62f8d.jpg" alt="bk_973"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/bk_973/these-habits-will-make-you-a-better-developer-4gl7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;These habits will make you a better developer&lt;/h2&gt;
      &lt;h3&gt;Benjamin Kalungi ・ Aug 12 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#illustrating-music"&gt;
  &lt;/a&gt;
  Illustrating music
&lt;/h2&gt;

&lt;p&gt;A few months back, &lt;a class="mentioned-user" href="https://dev.to/aneeqakhan"&gt;@aneeqakhan&lt;/a&gt;
 created a boombox illustration by only using CSS. In this post, they share how they animated it!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/aneeqakhan" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJftl03J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--BlKP1XrB--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/69481/1eb0a1bb-1d4d-429e-a4fc-0e61a0e8d710.jpeg" alt="aneeqakhan"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aneeqakhan/animating-my-illustration-using-animate-css-1cm8" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Animating my illustration using animate.css&lt;/h2&gt;
      &lt;h3&gt;Aneeqa Khan ✨ ・ Aug 15 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#entities-can-not-inject-services"&gt;
  &lt;/a&gt;
  "Entities can not inject services!"
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/salah856"&gt;@salah856&lt;/a&gt;
 explains that it's simple to implement a business rule in an entity method when the business logic only uses the properties of that entity. But what if the business logic requires you to use any external services? This post will help you navigate this conundrum.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/salah856" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ivxqbJPZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--stmv-55s--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/218767/87b9f6ef-df4e-4b44-a461-42ca5f2fe16e.jpg" alt="salah856"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/salah856/implementing-domain-driven-design-part-iii-pe8" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Implementing Domain Driven Design: Part III&lt;/h2&gt;
      &lt;h3&gt;Salah Elhossiny ・ Aug 15 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#csharp&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#dotnet&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
  </channel>
</rss>
