<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Learn CSS By Playing Games 👾</title>
      <author>Suprabha</author>
      <pubDate>Fri, 28 May 2021 11:14:27 +0000</pubDate>
      <link>https://dev.to/suprabhasupi/learn-css-by-playing-games-1a36</link>
      <guid>https://dev.to/suprabhasupi/learn-css-by-playing-games-1a36</guid>
      <description>&lt;p&gt;&lt;span&gt;L&lt;/span&gt;earning CSS can be a frustrating experience sometime. One of the best things about learning to code is that people who are good at coding also happen to have the skills to make games that teach other people to code.&lt;/p&gt;

&lt;p&gt;Here are some games which help you to master CSS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-flexbox-froggy"&gt;
  &lt;/a&gt;
  1. &lt;a href="http://flexboxfroggy.com/"&gt;Flexbox Froggy&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rrUpdADC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/GWrtvGq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rrUpdADC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/GWrtvGq.jpg" alt="Flex box froggy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This game is about Flexbox and it covers flex properties like &lt;code&gt;align-items&lt;/code&gt;, &lt;code&gt;justify-content&lt;/code&gt;, &lt;code&gt;align-content&lt;/code&gt;, &lt;code&gt;flex-direction&lt;/code&gt;, &lt;code&gt;align-self&lt;/code&gt;, &lt;code&gt;flex-wrap&lt;/code&gt;, &lt;code&gt;flex-flow&lt;/code&gt; and order in 24 different levels. &lt;/p&gt;

&lt;p&gt;Yeah, last level is bit challenging  😉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-flexbox-zombies"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://mastery.games/flexboxzombies/"&gt;Flexbox Zombies&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N83-Zqhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/O8cIaZn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N83-Zqhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/O8cIaZn.jpg" alt="FlexBox Zombies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we use Flexbox to position the hero’s crossbow and hit the zombies and survive along the game.&lt;br&gt;
Each section unravels part of the plot, gives you expertise over a new flexbox concept, and presents zombie survival challenges that force you to solidify your new skills like your life depends on it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-flexbox-defense"&gt;
  &lt;/a&gt;
  3. &lt;a href="http://www.flexboxdefense.com/"&gt;Flexbox defense&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jbJDlWI_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qi8yDrT.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jbJDlWI_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qi8yDrT.jpg" alt="flexbox-defence"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Flexbox defense is based on the classic tower defence games, but to place our items we write CSS instructions. We use the justify-content property on the main container to move the single towers into effective positions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-grid-garden"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://cssgridgarden.com/"&gt;Grid Garden&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JfoFh8qp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/zeffn3Q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JfoFh8qp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/zeffn3Q.jpg" alt="Grid garden"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Grid Garden game features 28 levels, starting with easy difficulty and gradually increasing it. Use the various grid properties to water and grow your carrot garden. Grid Garden has a code editor and visual area so you instantly see your result.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-css-battle"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://cssbattle.dev/"&gt;CSS Battle&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F8I3alk4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Y4p1koK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F8I3alk4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Y4p1koK.png" alt="CSS battle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CSS Battle is more of an online challenge than an actual CSS practice game, the objective is to write HTML and CSS code to replicate the given target image in the least code possible. This game is constantly updated with new challenges. It has a global ranking system and the ability to re-play each challenge so you can improve your own results.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-css-diner"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://flukeout.github.io/"&gt;CSS Diner&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ultyttKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Q4gpwIi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ultyttKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Q4gpwIi.jpg" alt="CSS Diner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The CSS Diner webapp is really fun and genuinely educational for developers of all skill levels. You’ll go through 26 different levels of increasing difficulty. The first few levels teach core fundamentals like element selectors and class selectors. In the later levels you’re working with advanced concepts like :only-of-type and :not(x).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-codepip"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://codepip.com/"&gt;CodePip&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jiCq0lbJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/UNmPh6x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jiCq0lbJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/UNmPh6x.png" alt="Code pip"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We already checked Grid Garden and Flexbox Froggy, you’ve seen some examples of CodePip’s work already.&lt;br&gt;
Those are just the two free games they offer. If you sign up for a pro account on their site, they also have games that range from general CSS review to JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-codemonkey"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://www.playcodemonkey.com/"&gt;CodeMonkey&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ubv0rFDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/RiDdi9j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ubv0rFDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/RiDdi9j.png" alt="Code monkey"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CodeMonkey teaches coding using CoffeeScript, a real programming language, to teach you to build your own games in HTML5. It’s aimed at coding for kids, but it’s definitely fun for adults, too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-codingame"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://www.codingame.com/start"&gt;CodinGame&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--meh90AO8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/VPE7X9E.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--meh90AO8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/VPE7X9E.png" alt="Coding Game"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CodinGame offers up fun free games to help learn more than 25 programming languages, including JavaScript, Ruby, and PHP. One of the great things about CodinGame is that you can play with friends or colleagues, and also enter international coding competitions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-codecombat"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://codecombat.com/"&gt;CodeCombat&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--26U0RnCl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/WdknSPK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--26U0RnCl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/WdknSPK.png" alt="Code combat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn Python, JavaScript, CoffeeScript, or the Lua game scripting language. On the beginner Dungeon level, you’ll move your Hero through the game using some basic commands according to the tutorial alongside the game.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#games-using-pure-css"&gt;
  &lt;/a&gt;
  Games using pure CSS 🔖
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-roadmap"&gt;
  &lt;/a&gt;
  1. &lt;a href="http://victordarras.fr/cssgame"&gt;Roadmap&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qIaTplij--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/m5JJsR7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qIaTplij--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/m5JJsR7.png" alt="Roadmap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Skill and speed are required to solve this little game, only made with CSS and HTML. It is not directly teaching CSS, but looking into the source code teaches a lot about clip-path, transform and animation with @keyframes!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-carnival"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://codepen.io/una/pen/NxZaNr"&gt;Carnival&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o6t39_ni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/YC1TEbp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o6t39_ni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/YC1TEbp.png" alt="Carnival"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You only have 8 seconds to hit all targets! A nice little CSS game using checkboxes and CSS animations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-service-workies"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://serviceworkies.com"&gt;Service Workies&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4lXp_Cmw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/9nBP8Oe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4lXp_Cmw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/9nBP8Oe.png" alt="Service workies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this adventure you'll learn how to avoid the PWA pitfalls. You'll level up your skills and thrive with Service Workers. Perhaps even slay the savage beasts that have plagued the poor village workies for centuries! A registration is required.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-unfold"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://rupl.github.io/unfold/"&gt;Unfold&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eDuJr5D8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/UazaTSl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eDuJr5D8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/UazaTSl.png" alt="Unfold"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This isn't exactly a game but more an interactive presentation about CSS 3D Transforms. Give it a go, it not boring 😂, animations are really awesome which has been done by pure CSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#paid-games"&gt;
  &lt;/a&gt;
  Paid Games 🤑
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#grid-critters"&gt;
  &lt;/a&gt;
  &lt;a href="https://gridcritters.com"&gt;Grid Critters&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0NeUfK9T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/xH0phte.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0NeUfK9T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/xH0phte.png" alt="Grid cutters"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your journey to master CSS Grid begins on the mysterious planet Grideros. Your mission is to use your ship's powerful Grid tool to save alien critters from extinction. A registration is required.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
        🌟 &lt;a href="https://twitter.com/suprabhasupi"&gt; Twitter&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        👩🏻‍💻 &lt;a href="https://www.suprabha.me/"&gt; suprabha.me&lt;/a&gt;
      &lt;/td&gt;
&lt;td&gt;
        🌟 &lt;a href="https://www.instagram.com/suprabhasupi/"&gt; Instagram&lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>beginners</category>
      <category>css</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Ways to Build a Mobile App - Low Level Coding</title>
      <author>Krowser Web Services </author>
      <pubDate>Fri, 28 May 2021 11:11:59 +0000</pubDate>
      <link>https://dev.to/krowser/ways-to-build-a-mobile-app-low-level-coding-468d</link>
      <guid>https://dev.to/krowser/ways-to-build-a-mobile-app-low-level-coding-468d</guid>
      <description>&lt;p&gt;As the name implies, building an app using this method requires coding knowledge. If you don't know how to code. you'll either have to learn it or hire a developer. While I don't want to discourage you from learning a new skill, the first app you code on your own probably won't be suitable for mass distribution. But if the app isn't for your business and you want to improve your technical ability, then go for it.&lt;/p&gt;

&lt;p&gt;Otherwise, hiring a development team will be your best option here. Low-level coding will always be the most expensive and time-consuming development method. Why? Allow me to quickly explain.&lt;/p&gt;

&lt;p&gt;Most people want their apps available on Android and iOS devices. But this requires you to code in two different languages-essentially building two completely separate apps (one for each operating system).&lt;/p&gt;

&lt;p&gt;So at a minimum, you'll need an Android developer and iOS developer. Most development teams also consist of a web developer, designer, QA manager, and project manager. Once your app is built, you'll still need to retain the developers to maintain your app. The labor adds up quickly.&lt;/p&gt;

&lt;p&gt;If you're creating a game, augmented reality app, or trying to develop the next Facebook, low-level coding will be your best option. This method gives you the most control over your app, but it comes at a price.&lt;/p&gt;

</description>
      <category>android</category>
      <category>ios</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Notion template to organize your chords 🎸and learning guitar</title>
      <author>Sarthak Sharma</author>
      <pubDate>Fri, 28 May 2021 10:55:12 +0000</pubDate>
      <link>https://dev.to/xenoxdev/notion-template-to-organize-your-chords-and-learning-guitar-4j6a</link>
      <guid>https://dev.to/xenoxdev/notion-template-to-organize-your-chords-and-learning-guitar-4j6a</guid>
      <description>&lt;p&gt;Hey folks 👋🏼&lt;/p&gt;

&lt;p&gt;We just launched another Product on Product Hunt. It's a notion template that helps you to organize your chords and learn guitar&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learn-guitar"&gt;
  &lt;/a&gt;
  Learn Guitar
&lt;/h3&gt;

&lt;p&gt;An amazing template to make your dreams of playing that dreamy song on your own, come true. This template will help you keep track of your guitar learning progress.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HaEBP5hil3w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It contains two databases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chords&lt;/li&gt;
&lt;li&gt;My Songs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#chords"&gt;
  &lt;/a&gt;
  Chords
&lt;/h3&gt;

&lt;p&gt;It contains all the chords identified with a name, an image, and your learning progress. This template is complete with a feature that will add a new chord with its status set to Next.&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ek1yzmJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzr4n7iwpy1cyvpm8dg9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ek1yzmJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzr4n7iwpy1cyvpm8dg9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chords-views"&gt;
  &lt;/a&gt;
  Chords Views
&lt;/h3&gt;

&lt;p&gt;The Chords Collection lets you choose from database, learning status, and chords gallery, showcasing how many chords you have collected so far!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chord Gallery View&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Trjc3N84--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlfit6uu32ug6q8x6658.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Trjc3N84--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlfit6uu32ug6q8x6658.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Board View&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k-3tE2Hu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aqsq3yit6ryz67usp6cq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k-3tE2Hu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aqsq3yit6ryz67usp6cq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-songs"&gt;
  &lt;/a&gt;
  My Songs
&lt;/h3&gt;

&lt;p&gt;It contains all the songs you like and want to practice, identified with the title, artist, learning status bar and the list of chords that are required to play it. (related to the 🎼Chords database). New songs can be added with the provided template. It will automatically create a song with Next status and add the gallery and table views along with all the other sections.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1TyJBAil--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dpm9c6a6ll5gulw8qhz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1TyJBAil--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dpm9c6a6ll5gulw8qhz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Detailed View&lt;/strong&gt;&lt;br&gt;
Inside the song page, a detailed view of the song with a linked database showing the chords gallery is provided along with the chords table, followed by the embedded video and audio of the song, and the lyrics.&lt;/p&gt;

&lt;p&gt;It also has a comments field so you can add your personal notes. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VlOw8iII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mx89uxtdh03yi2bnbogf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VlOw8iII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mx89uxtdh03yi2bnbogf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-songs-views"&gt;
  &lt;/a&gt;
  My songs Views
&lt;/h3&gt;

&lt;p&gt;You have the freedom to choose from List, database, and Learning Status view, to track your progress in real-time&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;List View&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DNehsP9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6f3s2i9w59bn6fg3pse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DNehsP9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6f3s2i9w59bn6fg3pse.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Board view&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZMsYJeI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5bawcqgd28muhloctj0k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZMsYJeI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5bawcqgd28muhloctj0k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#want-one"&gt;
  &lt;/a&gt;
  Want One?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/038reunmBR97xFM8Nj/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/038reunmBR97xFM8Nj/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Here is your link&lt;/em&gt;&lt;/strong&gt; 👉 &lt;a href="https://prototion.com/notion-template/Learn-Guitar-WiaqM2TMIVAv1qCF"&gt;&lt;strong&gt;&lt;em&gt;Learn Guitar&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are on Producthunt today. Go show some love here🔥&lt;br&gt;
&lt;a href="https://www.producthunt.com/posts/notion-guitar-learning"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Wqh1gaU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpbl45jr6gyjnoggz29b.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Pillars of learning programming</title>
      <author>Chaitanya Prabuddha</author>
      <pubDate>Fri, 28 May 2021 10:48:58 +0000</pubDate>
      <link>https://dev.to/line/pillars-of-learning-programming-5b7k</link>
      <guid>https://dev.to/line/pillars-of-learning-programming-5b7k</guid>
      <description>&lt;p&gt;I have only about 2+ years of experience in the field of programming, but in these 2 years, I have gone through more than 100s courses. Some of them actually helped and some didn't.&lt;/p&gt;

&lt;p&gt;So here are my on how you can choose your courses or simply learn programming by using these tips or pillars- &lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#subscribe-to-newsletter-get-amazing-content-which-is-not-available-here-httpslinenewslettersubstackcom"&gt;
  &lt;/a&gt;
  Subscribe to Newsletter (Get Amazing Content, which is not available here), &lt;a href="https://linenewsletter.substack.com/"&gt;https://linenewsletter.substack.com/&lt;/a&gt;
&lt;/h6&gt;

&lt;p&gt;1.&lt;strong&gt;Test Your Skills First&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Testing your skills before taking any course is more important than you think, making our list of what we are lacking can help a lot. &lt;/p&gt;

&lt;p&gt;For example - If you a complete beginner and wanna learn HTML &amp;amp; CSS, then you should know your skill of what you know about designing because ultimately you are gonna use these languages for designing your website.&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;Test with learning&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While learning you should test you skills that you learned. This has many benefits, but most beginners are not ready for it, mainly because they don't believe in themselves or they are just too lazy for this.&lt;/p&gt;

&lt;p&gt;For this, each programming course should centre around exercises. So that practising could never become a problem.&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;Fundamentals First&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Start with fundamentals, I personally know some people that start with Node.js directly without even touching JavaScript or starts with Django without knowing Python.&lt;/p&gt;

&lt;p&gt;Start with the least you can this really helps your development learning in future as you know the fundamentals completely.&lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;Ask for help&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is my personal story, I started learning HTML by myself as I don't want a teacher, in the first six I made my skills enough capable to make a website that looks like a website from the 1990s then I started with CSS it took me about 2 months to teach me. But when I started discussing questions with my school teacher, I learned more things in those 10 days than in the last 8 months.&lt;/p&gt;

&lt;p&gt;This shows that having an instructor or a mentor really makes the process very fast and less time consuming.&lt;/p&gt;

&lt;p&gt;5.&lt;strong&gt;Be Motivated&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Do You know why everyone can't be a developer? Because they don't have enough motivation to sit in front of a screen, constantly typing random words on the keyboards and not having any result.&lt;/p&gt;

&lt;p&gt;Be motivated, best thing that I knew for motivation is just to rewards yourself after you do something. Like for example, MrBeast uploaded a video, don't start watching it as soon as you saw it instead say to yourself I will fix this bug and then watch this video, this is the simplest reward you can give yourself.&lt;/p&gt;

&lt;p&gt;Thanks for reading, Follow me on &lt;a href="https://twitter.com/chetanistaken"&gt;TWITTER&lt;/a&gt; and &lt;a href="https://t.co/Q7zJeuHRYe?amp=1"&gt;DONATE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://linenewsletter.substack.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N1SHBG54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0f2sb0m66tz8adhalh4h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>programming</category>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>Benefits of Microsoft Flow</title>
      <author>Hugh Olssen</author>
      <pubDate>Fri, 28 May 2021 10:30:01 +0000</pubDate>
      <link>https://dev.to/hugholssen/benefits-of-microsoft-flow-4jd</link>
      <guid>https://dev.to/hugholssen/benefits-of-microsoft-flow-4jd</guid>
      <description>&lt;p&gt;Microsoft Flow is a cloud-based system with which you can create automated workflows, simplify business processes, and manage them more efficiently.&lt;/p&gt;

&lt;p&gt;Microsoft Flow divides its flows into three main types:&lt;/p&gt;

&lt;p&gt;Automatic Flow - a type of Flow that is activated when a pre-selected event occurs. For example, when a file is updated, other employees will be notified.&lt;br&gt;
Scheduled Flow - a flow that occurs at a specific time, such as receiving a warning to report each day of an upcoming event.&lt;br&gt;
Button Flow-Flow activated at the push of a button.&lt;/p&gt;

&lt;p&gt;Microsoft Flow is a tool that anyone can use and integrate into their Microsoft Office 365 suite. In addition to being a business process management platform that automates repetitive tasks and simplifies their execution on behalf of employees, it also provides additional benefits.&lt;/p&gt;

&lt;p&gt;You can easily integrate it with other applications (connectors). The activation-based tool allows you to integrate workflows directly into the various applications you use using connectors.&lt;/p&gt;

&lt;p&gt;A connector is a tool that connects two or more external applications. Therefore, Connector lets you connect your MailChimp to Slack, SharePoint, or other applications. This way, you can automate the processes between them and simplify your daily starting tasks.&lt;/p&gt;

&lt;p&gt;This workaround method is suitable even for people who do not have the technology and only need a Microsoft account to access the application. Also, let me note that some connectors are only available to premium users.&lt;/p&gt;

&lt;p&gt;You can use Microsoft Flow to link your applications together and create a flow between them. For example, you can use Flow to copy data from one application to another automatically. This way, your colleagues can easily share and access data through various web applications.&lt;/p&gt;

&lt;p&gt;A practical example is linking Sharepoint to your Outlook. Whenever a colleague sends you a file in your email, the software automatically triggers the Flow and shares the same file on your SharePoint.&lt;/p&gt;

&lt;p&gt;After reading all this, you are probably convinced that workflow automation tools are a must nowadays: Because big data and an abundance of responsibilities outweigh things, we need something that will make our lives easier and simplify our daily business tasks that we are going through.&lt;/p&gt;

&lt;p&gt;You are now wondering what if a disaster occurs and no proper backup is available within your Microsoft 365. In fact, Microsoft is not providing backup, well, not the backup most of us would want. Either way, Office 365 may be one of your main issues in backing up the crucial data. Office 365 backup is still an enigma for Microsoft 365 users.&lt;/p&gt;

&lt;p&gt;In this regard, I will share with you the best Office 365 backup on the market, as I am willing to help businesses worldwide to proceed with their successful operations for their specific needs.&lt;/p&gt;

&lt;p&gt;While I was searching for Office 365 backup several years ago and got Veeam as my backup partner, I really wasn't satisfied with Veeam. In this case, I tried &lt;a href="https://www.altaro.com/office-365-backup/"&gt;Altaro Office 365 backup&lt;/a&gt;, and now I am enjoying all the benefits! &lt;/p&gt;

</description>
      <category>microsoftflow</category>
      <category>microservices</category>
      <category>backup</category>
      <category>altaro</category>
    </item>
    <item>
      <title>9 Python Project Ideas From Beginners to Advanced </title>
      <author>Christine Shu</author>
      <pubDate>Fri, 28 May 2021 09:53:24 +0000</pubDate>
      <link>https://dev.to/christineshu/9-python-project-ideas-from-beginners-to-advanced-507f</link>
      <guid>https://dev.to/christineshu/9-python-project-ideas-from-beginners-to-advanced-507f</guid>
      <description>&lt;p&gt;If you are learning to code, chances are you might be learning Python. What are some ways that you are able to learn Python effectively and efficiently? Arguably, one of the best ways to learn a programming language is by practicing projects that have real world applications. By working on real projects, you’ll be able to analyze the problem and come up with your own code solution. It’s also a great way to build up your portfolio! &lt;/p&gt;

&lt;p&gt;Here’s a list of &lt;a href="https://www.codementor.io/projects/python"&gt;Python projects&lt;/a&gt; from &lt;a href="https://www.codementor.io/projects"&gt;DevProjects&lt;/a&gt; to help you get started: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Beginner-level projects: You will need a basic understanding of Python fundamentals&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.codementor.io/projects/tool/rss-feed-reader-in-terminal-atx32jp82q"&gt;RSS feed reader in terminal&lt;/a&gt;: Practice building a tool for fetching and converting the feed with a given RSS feed URL.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.codementor.io/projects/web/rss-feed-reader-website-atx32j280x"&gt;RSS feed reader website&lt;/a&gt;: Work with and become familiar with RSS feeds and practice how to parse XML.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.codementor.io/projects/tool/web-scraper-to-get-news-article-content-atx32d46qe"&gt;Web scraper to get news article content&lt;/a&gt;: Build a simple web scraper using Python libraries to obtain web page content and select the elements you need on a web page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Medium-level projects:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.codementor.io/projects/web/medicine-dose-tracker-b6evlas194"&gt;Medicine dose tracker web app&lt;/a&gt;: Build a web app with a simple UI to add medicine name, dosages, and frequency. Learn and practice using HTML/CSS, REST APIs, and connecting databases.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.codementor.io/projects/web/weekly-newsletter-summary-email-atx32ild7k"&gt;Weekly newsletter summary email&lt;/a&gt;: Create a serverless app to consolidate your email subscriptions into a single weekly summary email.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.codementor.io/projects/tool/background-job-system-atx32exogo"&gt;Background job system&lt;/a&gt;: Build a background system and practice writing concurrent programming.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Hard projects: These are for the advanced. Some of the projects require knowledge of other languages.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.codementor.io/projects/web/favorite-stocks-watcher-b0wexig802"&gt;Favorite stocks watcher&lt;/a&gt;: Create an application that can monitor and share stock portfolios with Django and React frameworks and Python and JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.codementor.io/projects/web/plagiarism-checker-website-atx32nf0oa"&gt;Plagiarism checker website&lt;/a&gt;: Build an automated solution that handles plagiarism  detection with Flask and Bootstrap.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.codementor.io/projects/web/online-photo-collage-tool-atx32mwend"&gt;Online photo collage tool&lt;/a&gt;: Build a web app with completely separate front end, API, task queue, and optional storage components. Practice handling image inputs from users and processing basic image tasks asynchronously. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find more unique projects in other tech stacks on &lt;a href="https://www.codementor.io/projects"&gt;DevProjects&lt;/a&gt;. It’s a free community where users can learn programming by building projects. Our goal is to bridge the learning gap between theory and real-world code. Each project spec is uniquely designed by senior developers and is clear and limited in scope.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href="https://www.codementor.io/projects"&gt;DevProjects&lt;/a&gt; for more project ideas. If you are interested in being a project contributor, check out the page &lt;a href="https://www.notion.so/codementor/DevProjects-Contribute-projects-c7027b65fbd541d7848f02d3711ebe01"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;👇🏼 Leave a comment below to let me know which project looks the most interesting to you!👇🏼&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>All You Wanted to Know About UX, UI, and Usability Testing</title>
      <author>TestFort</author>
      <pubDate>Fri, 28 May 2021 09:35:26 +0000</pubDate>
      <link>https://dev.to/testfort_inc/all-you-wanted-to-know-about-ux-ui-and-usability-testing-440e</link>
      <guid>https://dev.to/testfort_inc/all-you-wanted-to-know-about-ux-ui-and-usability-testing-440e</guid>
      <description>&lt;p&gt;Imagine creating a great app just to have it crash and burn because adequate steps weren’t taken to rid it of bugs and errors. This might happen because one essential stage of building a digital product was overlooked, quality assurance (QA) with &lt;a href="https://testfort.com/usability-testing"&gt;UX/UI testing&lt;/a&gt; as one of the major steps. &lt;/p&gt;

&lt;p&gt;QA is the stage where bugs and errors are detected and fixed so that your product is in its best shape and is working as it should. Testing and conducting QA on products as a separate stage is crucial because developers and designers see products through a different lens and can’t always make sure all usability criteria are met and all possible errors eliminated. &lt;/p&gt;

&lt;p&gt;So, QA and testing should be done at every stage of creating software to determine the usability of a product in terms of its user experience as well as the user interface. This guide will discuss just that.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-ui-ux-and-usability"&gt;
  &lt;/a&gt;
  What Are UI, UX, and Usability?
&lt;/h1&gt;

&lt;p&gt;UI and UX are often mentioned together but they are two distinct areas of software or digital product development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition of UX&lt;/strong&gt;&lt;br&gt;
UX, or user experience is how people interact with an app. UX is mostly about prototyping and wireframing, architecture design, and interactions. &lt;/p&gt;

&lt;p&gt;How do we want this to work? What features should be present on this or that screen? How do we make this work? These are examples of questions you might ask a UX architect. &lt;/p&gt;

&lt;p&gt;For UX designers, it’s essential to understand how their target audience wants to interact with the app, how these people think, and what makes them feel good or bad while using an app. This also dictates how an interface will look in order to lead a user to a target action in the most natural way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition of UI&lt;/strong&gt;&lt;br&gt;
UI, or user interface, on the other hand, is the graphical layout of an application or software. It’s mostly about layouts, colors, fonts, illustrations, and other elements of style you can see in an app, software, or a website. &lt;/p&gt;

&lt;p&gt;What style do we want the app to have? What will this button/form/etc. look like? These are the questions you might ask a UI designer. &lt;/p&gt;

&lt;p&gt;UI designers decide what an app will look like, from the color schemes to the fonts to the shapes of buttons. Most UI designers are also graphic designers and their job is to create aesthetic appeal for their application. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Difference between UI and UX design&lt;/strong&gt;&lt;br&gt;
There’s a tight connection between user experience (UX) and user interface (UI). They are related, but not the same.&lt;/p&gt;

&lt;p&gt;UI is more about design and implementation, while UX is more about the architecture and structure of the interface. So, normally, UX goes first. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bvex8f0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eu3rm0idq8a18gfnbaoy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bvex8f0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eu3rm0idq8a18gfnbaoy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All this leads us to usability—the foundation of design, the measure of how a good user interface facilitates a positive user experience. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Usability?&lt;/strong&gt;&lt;br&gt;
Usability means just how comfortable your software or website is to use for an average user.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How easy is the learning curve? &lt;/li&gt;
&lt;li&gt;How quickly does a user get what they want? &lt;/li&gt;
&lt;li&gt;Is there anything annoying while using the app? 
This is what usability is about in a few words, and it connects both UI and UX. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An interface should be intuitive – users shouldn’t need to go through a daunting onboarding process just to do a simple action, when everything is clear, quick and obvious to use. &lt;/p&gt;

&lt;p&gt;And yes, this also refers to both simple and complicated apps, software, and websites. Complicated systems are where usability is especially important. For example, it’s quite difficult to create an unusable calculator because we all understand what it should look like and how it works, and even if the interface is not perfect, most people will know how to use it. But if there’s something more complex, like accounting or banking software, it’s very easy to create a cumbersome, overloaded, and buggy interface, and you might need an experienced &lt;a href="https://testfort.com/usability-testing"&gt;usability testing&lt;/a&gt; company to do the job for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zEG2TS3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e25pu9ho5kx5mcpye1to.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zEG2TS3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e25pu9ho5kx5mcpye1to.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Does Usability Testing Equal Functional Testing?&lt;/strong&gt;&lt;br&gt;
Not really. While functional testing goes deep into whether all features operate well, software and website usability testing refers to how exactly they work and whether it is the most efficient way. &lt;/p&gt;

&lt;p&gt;For example: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A user can update their information on the website and it is successfully updated on the server. This is a “check” from the functional testing side. &lt;/li&gt;
&lt;li&gt;A user can update their information, but it takes five minutes to update. This is an issue that a website usability testing service may report. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;he main focus of functional testing is assessing the workability of an app or software, whereas the main focus of usability testing is to make the app easier to use.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-usability-needs-quality-assurance"&gt;
  &lt;/a&gt;
  Why Usability Needs Quality Assurance
&lt;/h1&gt;

&lt;p&gt;It might not seem obvious from the outside, but it’s impossible to just go and create a flawless app or website. Bugs and errors are always there until you detect and fix them, and this doesn’t mean your developers’ work is bad. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Any interface, even in a very simple app, is a set of interactions. Different features created by different people, or just at a different time, may not connect with each other perfectly and cause errors. &lt;/li&gt;
&lt;li&gt;Apps and especially websites may be run on other platforms and devices, which may also cause unexpected issues that are hard to detect during the development process. &lt;/li&gt;
&lt;li&gt;And yes, human errors may also occur. Your team may have been working on the development of an app for a long time, and there may be things they haven’t noticed just because their eyes are blurred. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, it’s not always obvious where a mistake may occur. You need “hunters” (professionals in UI and UX testing) who know how to find these big and small bugs that may spoil your users’ experience and who will report to the developers in the right way.&lt;/p&gt;

&lt;p&gt;If UX and UI testing are an integral part of the product development process, you can implement quality assurance at each level, from the creation of a separate feature to the app release and updates, to make sure everything works right. You’ll fix problems as they arise, not after users report them to you.&lt;/p&gt;

&lt;p&gt;Which, in turn, saves you time, increases the quality of your product, and helps you increase your customers’ satisfaction.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-the-main-requirements-for-web-and-app-usability"&gt;
  &lt;/a&gt;
  What Are the Main Requirements for Web and App Usability?
&lt;/h1&gt;

&lt;p&gt;There’s a standard list of requirements that fits most of the apps and if they are met, chances are high that your app or website will have a good usability score. These requirements, in a more or less equal form, are used by all professionals and vendors that provide &lt;a href="https://testfort.com/usability-testing"&gt;usability testing&lt;/a&gt; services. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accessibility&lt;/strong&gt;&lt;br&gt;
The product should be accessible to the largest number of its potential users. People with disabilities should be able to use it via assistive services just as easily as an average target user. People with different backgrounds and native languages shouldn’t have issues using your app either.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Perceivability&lt;/strong&gt;&lt;br&gt;
All parts of the interface should be easy to perceive and have alternatives. For example, if an image is unavailable, it should have alternative text or a caption so users can understand what it represented.&lt;/p&gt;

&lt;p&gt;Another example is providing captions in video material and a transcript for audio.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Operability&lt;/strong&gt;&lt;br&gt;
This usability requirement concerns user activity and means that everything that is conceived should be possible to use, for example: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All the features should be available and working. &lt;/li&gt;
&lt;li&gt;User needs to have enough time to read the interface and its content. &lt;/li&gt;
&lt;li&gt;The content should be physically safe (e.g. it should not cause seizures in predisposed people). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Ease of Navigation&lt;/strong&gt;&lt;br&gt;
On the same note, what makes an interface operable is good navigation, in any type of website or software, from the simplest to the more complicated ones. &lt;/p&gt;

&lt;p&gt;Navigation should be made as simple, easy, and seamless as possible so that users don’t think about doing something, but just do it. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;High Performance&lt;/strong&gt;&lt;br&gt;
To gauge the performance of your site or app, you need to be aware of the speed at which it loads pages and content, especially high-quality images. Text loads faster than images and illustrations, so the aim here is to make sure your product is in no way sluggish and loads within a matter of seconds.&lt;/p&gt;

&lt;p&gt;And in terms of design, you should think about what’s happening while the content is loading. For example, the spinning wheel was introduced to interfaces so users know that something is happening and the app didn’t just freeze.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Understandable Interface&lt;/strong&gt;&lt;br&gt;
In an understandable interface, the content is readable – there’s no fine print or clash of colors. It also operates in predictable ways so users can avoid making mistakes.&lt;/p&gt;

&lt;p&gt;For example, if a user is filling out a form and missing a required field, a window will pop up alerting them to the problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Responsiveness&lt;/strong&gt;&lt;br&gt;
Since handheld devices are used more than computers and laptops these days, it’s important to keep up with the times and adapt content and web design for phone use as well. This poses a web design challenge because most sites are designed with computers in mind.&lt;/p&gt;

&lt;p&gt;Responsiveness is all about your site working smoothly and cleanly regardless of the device it’s opened on. You can even do this adaptation on WordPress, but it still needs to be tweaked to look as presentable as it would on a large screen.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learnability&lt;/strong&gt;&lt;br&gt;
Learnability is the ease and pace at which a user picks up the ways to use a product. It used to be very common for user interfaces to require training to operate them but the current trend is toward creating UI that is usable for every kind of user, right away. This is why learnability is such an essential requirement; it makes sure that different kinds of users, including complete amateurs, can get on board easily.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Credibility&lt;/strong&gt;&lt;br&gt;
Credibility means that your product should inspire justified trust in users. This means people are trusting that: &lt;/p&gt;

&lt;p&gt;The product will do what it is intended (or expected) to do; &lt;br&gt;
It will do it in a safe and harmless way; &lt;br&gt;
It will be of the expected quality and do it in the expected time. &lt;br&gt;
It’s simply impossible to deliver your product with its UI and UX if it is not trustworthy and people don’t trust using it. Users will just go elsewhere. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User-Friendliness&lt;/strong&gt;&lt;br&gt;
This just means that the UI should be a pleasure to use. This could mean aesthetically pleasing designs, quick navigation and loading times, and any other features that users love to see on their interfaces. This is such a big requirement because many users base their opinions about products and interfaces on how user-friendly they are.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Absence of Errors&lt;/strong&gt;&lt;br&gt;
This means that it should be virtually impossible to give wrong results when information is fed into the app or website. It should be bulletproof against the entrance of invalid data or unexpected user scenarios. The harder you make it to make an error in the first place, the better the error tolerance of your product will be.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smooth Flow&lt;/strong&gt;&lt;br&gt;
A good flow is a combination of actions that follow seamlessly, exactly as a user intuitively expects it to be. Some examples of bad flow are: &lt;/p&gt;

&lt;p&gt;Unreasonably long processes with many steps and screens to pass; &lt;br&gt;
Unnecessary or irrelevant pop-ups between commands; &lt;br&gt;
Repeated steps or expected steps missed.&lt;br&gt;
In terms of website usability, flow also means that one relevant page is followed by another relevant page without any additional information being thrown at the user.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Customization&lt;/strong&gt;&lt;br&gt;
It deeply depends on each app or website; however nowadays, we’re used to customized experiences and we expect a certain minimal level almost everywhere. This basic level includes the ability to manage such things as user names and avatars, color schemes, and timezones—it’s what we do in many apps, from email accounts to games. In more complicated apps, the expected level of customization may go deeper and include many more features, corresponding to the product. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User Engagement&lt;/strong&gt;&lt;br&gt;
Visually stimulating content that is fun and interesting to look at guarantees user engagement. Certain apps boast much higher user engagement levels than others and one huge reason for this is that they promote the kind of content that they know will garner the most user attention and engagement. This means that the majority of users should rate your app’s tools as fun to use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mQXFda43--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2g4vq7bmv1rurufo49c0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mQXFda43--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2g4vq7bmv1rurufo49c0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;UX and UI testing includes all these aspects, with UX involving architecture and experience and UI involving the design itself.&lt;/p&gt;

&lt;p&gt;For example, during the UX testing stage, you might discover that there should be a confirmation pop-up after a user sends a message to support. Otherwise, they send a message several times thinking that something didn’t work.&lt;/p&gt;

&lt;p&gt;At the same time, a UI tester might tell you the feedback form is designed in unpleasing colors and the fonts are difficult to read.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-do-you-perform-a-usability-test"&gt;
  &lt;/a&gt;
  How Do You Perform a Usability Test?
&lt;/h1&gt;

&lt;p&gt;Whether you perform this stage in-house or involve a UI/UX-testing service provider, &lt;a href="https://testfort.com/usability-testing"&gt;usability testing&lt;/a&gt; is done in sessions, each one dedicated to a certain part of the design. There’s roughly five phases in a session:&lt;/p&gt;

&lt;p&gt;1) Planning. This stage includes defining objectives, determining which exact part of a product will be the focus, choosing user personas to work with, and defining the exact tests to execute.&lt;br&gt;
2) Recruiting a test group. If you dedicated enough time to detailing user personas in the previous step, finding them in most cases is a matter of choosing the right source. If you have an established user base or social media following you can assemble a focus group from them. You can also reach out to your clients directly or hire from an agency.&lt;br&gt;
3) Running tests. When you’re ready to run tests, make sure that the focus group is comfortable and then perform the test. And don’t forget to record the results on video; it will help you analyze the data more deeply. &lt;br&gt;
4) Analyzing data. Once you get your data, it’s time to analyze it and determine the most serious and frequent issues. Based on this analysis, you can find solutions and improve the design. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vCoXTQ0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gujno3e37uurbcs65hmp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vCoXTQ0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gujno3e37uurbcs65hmp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let’s see how the test phase is actually done. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Methods of Usability Testing&lt;/strong&gt;&lt;br&gt;
There are several techniques that are applied by usability testing companies and professionals, depending on the specific target audience and available resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Guerilla testing – going into public places, randomly choosing people, and asking them to participate. This method can be used in the early stages, when you already have a tangible design so you can determine if you are moving in the right direction.&lt;/li&gt;
&lt;li&gt;Lab testing – simulating scenarios in a controlled (lab) environment with a moderator. It’s useful when you need to see how real users interact with your product, however, you run the risk of forcing non-realistic user behavior. &lt;/li&gt;
&lt;li&gt;Remote testing – unsupervised testing in a natural user environment and probably the most realistic for a lot of companies right now. This method is handy when you want to validate a hypothesis on a large sample. However, this might not be your first choice, because unmoderated testing doesn’t provide insight on user reasoning.&lt;/li&gt;
&lt;li&gt;Card sorting – an easy way to test content and features by placing them on cards and asking users to sort the cards into categories. This is a good method for optimizing your navigation structure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Can You Automate Usability Tests?&lt;/strong&gt;&lt;br&gt;
When it comes to functional and performance tests, it’s possible to achieve full automation. You may imitate user behavior or check technical data with automated testing to ensure each feature works as intended. &lt;/p&gt;

&lt;p&gt;In usability (both UI and UX testing), it’s all about human behavior. You need to observe how people interact with a program and how they react, that’s why this type of testing may be only partially automated. &lt;/p&gt;

&lt;p&gt;For example, you may automate data input and analysis, with UX testing platforms and additional tools, and get valuable data with apps like Hotjar or Userreport, but you cannot watch real-life user behaviour with any of these tools. So, manual tests are also necessary in usability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;At What Stage is Usability Testing Done?&lt;/strong&gt;&lt;br&gt;
Usability testing may be performed during different stages of the development process, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Product concept;&lt;/li&gt;
&lt;li&gt;Wireframe, mock-up or a clickable prototype;&lt;/li&gt;
&lt;li&gt;Fully functional product (app, website, software).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ideally, you should work with UX and UI testing professionals during all the stages, starting from the raw idea and implementing their recommendations during the process. It will help you save a lot of time and money by avoiding mistakes that will otherwise need to be fixed later, sometimes at a high price. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How Much Does Usability Testing Cost?&lt;/strong&gt; &lt;br&gt;
As in most IT services, the final cost depends on many factors, such as: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The development stage;&lt;/li&gt;
&lt;li&gt;Costs of technology required to run a test (e.g. a UX testing platform, analytics tools, etc.);&lt;/li&gt;
&lt;li&gt;The necessity of competitive/comparative studies; &lt;/li&gt;
&lt;li&gt;App versions to test (e.g. mobile and desktop);&lt;/li&gt;
&lt;li&gt;Required sample sizes; &lt;/li&gt;
&lt;li&gt;Exact target audiences – sometimes they may be hard to find and invite;&lt;/li&gt;
&lt;li&gt;The number of markets and locations (e.g. you might need to perform studies in different countries).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s impossible to give an average cost for UI/UX testing. A simple app that is exclusive to iOS and only has four key functions across four screens can be tested in one week for under $1,000. Meanwhile, a complex CRM for a large business could take months to explore and require thousands of individual tests, running up a bill of $100k or more.&lt;/p&gt;

&lt;p&gt;For a detailed estimate, it’s always best to reach out to your QA team and &lt;a href="https://testfort.com/contact-us"&gt;ask for a quote&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How Long Does Usability Testing Take?&lt;/strong&gt;&lt;br&gt;
Depending on the same factors that influence the price (development stage, user personas, markets, sample sizes, etc.) an average usability test for a product or wireframe may take between two weeks and two months. &lt;/p&gt;

&lt;p&gt;Here’s how it breaks down:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Estimation&lt;/strong&gt; — After our first call, we take between 2-5 days to prepare an estimate.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Preparation&lt;/strong&gt; — The team will prepare a comprehensive list of test cases and scenarios, prepare traceability matrices, and create a timeline for testing the project. 1-3 weeks.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Execution&lt;/strong&gt; – We go over every button on every screen to ensure it fits with the overall design theme, is accessible, easy to find, and its function can be intuitively understood. Depending on the complexity of the software or website, this can take anywhere between two days and several weeks. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Analysis&lt;/strong&gt; — After the completion of each test we document it, write a bug report for all discovered UI/UX inconsistencies, and prepare documentation to be delivered to the development team for debugging and further development.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;To sum up, usability testing in both UI and UX is an essential component of successful &lt;a href="https://qarea.com/services/product-development"&gt;product development&lt;/a&gt;. It allows you to provide end users with a quality product that they will not only find useful but also thoroughly enjoy.&lt;/p&gt;

&lt;p&gt;Any app or piece of software these days should provide a high quality, easy, and seamless experience, so it’s essential to have a strong QA component, such as a usability testing agency to ensure the quality of your app or website. Products that are not up to the mark in any aspect are often driven out of the market as soon as they arrive.&lt;/p&gt;

&lt;p&gt;You can achieve a smooth interaction between a user and an interface by adopting the skills of TestFort. More than 800 projects were improved together with our team during more than 19 years of experience, and we’ll be happy to help you create a great error-free product.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at&lt;/em&gt; &lt;em&gt;&lt;a href="https://testfort.com/blog/all-you-wanted-to-know-about-ux-ui-and-usability-testing"&gt;testfort.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>testing</category>
      <category>usabilitytesting</category>
      <category>qatesting</category>
      <category>qateam</category>
    </item>
    <item>
      <title>Video call app with chat functionality built using React.js, Web RTC and Socket.io</title>
      <author>Mihir Gupta</author>
      <pubDate>Fri, 28 May 2021 09:23:19 +0000</pubDate>
      <link>https://dev.to/mihir0699/video-call-app-with-chat-functionality-built-using-react-js-web-rtc-and-socket-io-3eeo</link>
      <guid>https://dev.to/mihir0699/video-call-app-with-chat-functionality-built-using-react-js-web-rtc-and-socket-io-3eeo</guid>
      <description>&lt;p&gt;This is a video calling application where users can call other user and will also have the capabiltiy to mute their mic and audio. Their is also real time chat functionality.&lt;br&gt;
It's also a modern PWA so users can install it on their devices like other native apps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Project Link&lt;/strong&gt; - &lt;strong&gt;&lt;em&gt;&lt;a href="https://video-chat-mihir.vercel.app/"&gt;https://video-chat-mihir.vercel.app/&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github repo&lt;/strong&gt; - &lt;strong&gt;&lt;em&gt;&lt;a href="https://github.com/mihir0699/Video-Chat"&gt;https://github.com/mihir0699/Video-Chat&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo Video&lt;/strong&gt; - &lt;strong&gt;&lt;em&gt;&lt;a href="https://youtu.be/zsyEx2sVi6c"&gt;https://youtu.be/zsyEx2sVi6c&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-and-functionalities"&gt;
  &lt;/a&gt;
  Features and Functionalities 😃
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Video Call with others&lt;/li&gt;
&lt;li&gt;Mute audio/video&lt;/li&gt;
&lt;li&gt;Instantly join a video call with a code&lt;/li&gt;
&lt;li&gt;Chat in real-time&lt;/li&gt;
&lt;li&gt;Chat Notifications&lt;/li&gt;
&lt;li&gt;Install it as a PWA (Progressive Web App) on your device&lt;/li&gt;
&lt;li&gt;Unlimited duration calls&lt;/li&gt;
&lt;li&gt;Share code instantly on social media platforms&lt;/li&gt;
&lt;li&gt;Simple and intuitive UI&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#screenshots"&gt;
  &lt;/a&gt;
  Screenshots 📸
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#home-page"&gt;
  &lt;/a&gt;
  Home Page
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xo59vXk3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/48746544/115701626-9b838e00-a385-11eb-8a07-214ca0b9f327.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xo59vXk3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/48746544/115701626-9b838e00-a385-11eb-8a07-214ca0b9f327.png" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#incoming-call"&gt;
  &lt;/a&gt;
  Incoming Call
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iD5oGzrV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/48746544/115701844-d8e81b80-a385-11eb-91cf-014b23e24ae4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iD5oGzrV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/48746544/115701844-d8e81b80-a385-11eb-91cf-014b23e24ae4.png" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-call"&gt;
  &lt;/a&gt;
  In Call
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--81ML_zua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/48746544/115702841-07b2c180-a387-11eb-897e-f19abefafef5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--81ML_zua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/48746544/115702841-07b2c180-a387-11eb-897e-f19abefafef5.png" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chat"&gt;
  &lt;/a&gt;
  Chat
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K36c1dEO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/48746544/115702929-24e79000-a387-11eb-906c-704608263da4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K36c1dEO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/48746544/115702929-24e79000-a387-11eb-906c-704608263da4.png" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zUkO1w-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/48746544/115703177-709a3980-a387-11eb-8d9d-15ddf3b66a25.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zUkO1w-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/48746544/115703177-709a3980-a387-11eb-8d9d-15ddf3b66a25.png" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  Tech Stack 💻
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/"&gt;React.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.netlify.com/"&gt;Netlify + Heroku (Hosting)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/webrtc"&gt;Web RTC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://socket.io/"&gt;Socket.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ant.design/"&gt;Ant Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>webrtc</category>
      <category>socketio</category>
    </item>
    <item>
      <title>The #1 tip to familiarize with new JavaScript codebases</title>
      <author>Kevin Peters</author>
      <pubDate>Fri, 28 May 2021 09:04:06 +0000</pubDate>
      <link>https://dev.to/igeligel/the-1-tip-to-familiarize-with-new-javascript-codebases-2m1</link>
      <guid>https://dev.to/igeligel/the-1-tip-to-familiarize-with-new-javascript-codebases-2m1</guid>
      <description>&lt;h1&gt;
  &lt;a href="#the-1-tip-to-familiarize-with-new-javascript-codebases"&gt;
  &lt;/a&gt;
  The #1 tip to familiarize with new JavaScript Codebases
&lt;/h1&gt;

&lt;p&gt;In my years as a software engineer, I have probably looked at hundreds of codebases. Too many to count. I struggled a lot with understanding where the relevant code is most of the time. Normally, asking for help what I should look for and guidance in tickets will bring me forward. Slowly and surely I will understand what the code is doing. And you will too. Some people are better at this and some people will be slow. No shame. Most code is complex. But I found a simple tool that will make it easier for you. It is called &lt;a href="https://github.com/simonrenoult/code-complexity"&gt;code-complexity&lt;/a&gt; and you can use it as the following code snippet shows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx code-complexity &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;--limit&lt;/span&gt; 20 &lt;span class="nt"&gt;--sort&lt;/span&gt; ratio
&lt;span class="c"&gt;# You can also use --filter '**/*.js' to use glob patterns to filter files&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will return an output like the following:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;file&lt;/th&gt;
&lt;th&gt;complexity&lt;/th&gt;
&lt;th&gt;churn&lt;/th&gt;
&lt;th&gt;ratio&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;src/cli.ts&lt;/td&gt;
&lt;td&gt;103&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;824&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;test/code-complexity.test.ts&lt;/td&gt;
&lt;td&gt;107&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;749&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.idea/workspace.xml&lt;/td&gt;
&lt;td&gt;123&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;738&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;This will show the biggest and most changed files. The likelihood that these files are crucial for understanding the application is quite high. Read through them and understand them. What this data means in detail will be explained in this blog article now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complexity-and-churn"&gt;
  &lt;/a&gt;
  Complexity and Churn
&lt;/h2&gt;

&lt;p&gt;In this chapter, I will explain to you the concepts of complexity and churn when it comes to code. It is the baseline to understand the technique we are using here to improve your understanding of a codebase.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-complexity"&gt;
  &lt;/a&gt;
  What is Complexity?
&lt;/h3&gt;

&lt;p&gt;Complexity can be defined in different ways. The level of nesting of functions is normally used as a measurement of how complex code is. Code with small functions and composed behavior is normally more readable and easy to understand. So we could say that complex code also consists of a few functions that are far nested and it is mostly true. Nesting is hard to track though so we could find another metric somehow.&lt;/p&gt;

&lt;p&gt;With long functions normally there comes large files as well. People tend to put everything into one file if they also put a lot into one function. So in theory we could take the lines of code as a measurement as well. There are a lot of utility packages out there that solve this problem. One of these tools is called &lt;a href="https://github.com/flosse/sloc#readme"&gt;sloc&lt;/a&gt;. It will output the number of lines of code within a file. But do not use it directly. The tool I mentioned before includes this by default.&lt;/p&gt;

&lt;p&gt;So in conclusion we can say complex files are either super nested or super long. One of these things normally comes with the other so that’s great to hear because analyzing the length of a file tends to be easier than nesting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-churn"&gt;
  &lt;/a&gt;
  What is Churn?
&lt;/h3&gt;

&lt;p&gt;Churn is a bit more complicated to explain. But let us start somewhere. A churned file is a file that has a lot of changes. But what does this mean?&lt;/p&gt;

&lt;p&gt;A lot of changes to a file happens when yeah, a lot of people have changed the file. But how can someone measure that? The git history is telling us how often a file was checked in. So we can make sure with that how likely a file is to be changed. Normally this means files of this type are the main point of the application. A problem that occurs though is that often there are configuration files included here, but you can simply exclude them for this analysis.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-can-complexity-churn-teach-us"&gt;
  &lt;/a&gt;
  What can Complexity + Churn teach us?
&lt;/h3&gt;

&lt;p&gt;Now, after learning what complexity and churn mean, we can focus on the combination of them. Files that normally charge a lot but are also really complex should be normally refactored. And most of the time, with that, it is natural that these files might be the core of the application. The basic logic is written in them directly or in files related to that. So let us check how we can analyze that further.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#checking-the-files-in-detail"&gt;
  &lt;/a&gt;
  Checking the files in detail
&lt;/h2&gt;

&lt;p&gt;My technique to check the files in detail is quite simple. I first look over the file and check what the exported functions are called. Ideally, I write them down. Internal functions are firstly not important to understand. Once I have an overview of all the exported functions I foremost check if there are any unit tests. If the functions have parameters as well, then I will try to write them down as well. With TypeScript or Flow types, this gets, even more, easier to get an overall feeling of the structure.\&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_UBs29Aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zx3cu6ecs975isakftm4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_UBs29Aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zx3cu6ecs975isakftm4.gif" alt="Spongebob checking the code in detail"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unit tests are a good first approach to see how the functions are working. To understand functions you probably just need to look at the input, the function name, and what it is returning. In most of the cases, types even support you with that, and unit tests will show you edge cases for the function and how it can be used. So that’s mostly enough to understand the function. At least if you know the programming language. If you want to get deeper into the function feel free to, but you do not have to do that. Why? Explained in the next chapter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-not-understand-every-detail"&gt;
  &lt;/a&gt;
  Why do not understand every detail?
&lt;/h2&gt;

&lt;p&gt;Understanding a function in detail can be important. But during onboarding, a lot of other things are more important. You will not be able to understand every bit of the application within a short time frame, but understanding the core parts should give you a track of where the core logic of the application is executed.&lt;/p&gt;

&lt;p&gt;With that knowledge, you can jump into the first issues for you. Ideally, the team has prepared smaller tasks in the codebase to give you a nice onboarding experience. If that is not the case, ask your manager or senior engineers in your team if any of the current issues is suitable for you. Make sure to transmit your gained knowledge of the codebase though so they understand your knowledge level.&lt;/p&gt;

&lt;p&gt;A good idea for the first issue is also to do pair programming with other software engineers from the team. Make sure to tell them that you want to type mostly and they should be more of supervisors so you learn how to navigate the codebase by yourself. Because of that guided onboarding or easier tickets, you do not have to jump into details. The details of the code will be discovered now during the implementation phase of fixing bugs or adding features. The more tickets you will do the more you learn about the codebase in detail. But look back at churn and complexity because it can change over time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging-the-details"&gt;
  &lt;/a&gt;
  Debugging the details?
&lt;/h2&gt;

&lt;p&gt;Having to work on the code base now will also involve another bigger thing: Debugging. With your first tasks, you will probably learn already how to run the application locally, run unit tests, and integration or E2E tests if these exist. These become vital once you implement the feature because adding tests will make sure your application is working as expected. Often these tests cover a lot of code though and are kind of abstract. In these cases, you have to learn to debug your code. Because most of the tests are being run in a Node.js environment we will have a quick peek into how to debug Node.js-based applications. Most engineers use &lt;code&gt;console.log&lt;/code&gt; to debug and it is completely valid. But if you need to follow larger structures of code I can recommend using a proper debugger. JavaScript and TypeScript support the &lt;code&gt;debugger&lt;/code&gt; keyword, nevertheless, it is a bit tricky to run your test suite and have a nice debugger experience because within Node.js it is a bit difficult to spawn a browser instance’s developer tools and connect it to the program. Another option would be to use your IDE or Editor to connect a debugger supported by your coding user interface. For example, Visual Studio Code supports debugging Node.js applications directly in the IDE. A guide on how &lt;a href="https://code.visualstudio.com/docs/nodejs/nodejs-debugging"&gt;"Node.js debugging in VS Code" can be found here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Debugging is an art in itself. You should get comfortable using breakpoints and what the debugging functions "step over" and "step into" mean. These will be extremely helpful when debugging nested functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-examples"&gt;
  &lt;/a&gt;
  Some examples
&lt;/h2&gt;

&lt;p&gt;In this chapter, I will go through some codebases with this technique to explain where the main core of the application is and how the process mentioned above can help you to get familiar with the code base quicker.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#blitzjs"&gt;
  &lt;/a&gt;
  Blitz.js
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/blitz-js/blitz"&gt;Blitz.js&lt;/a&gt; is a framework built on top of Next.js. It describes itself as the Ruby on Rails for JavaScript/TypeScript. The team is working for more than a year on this framework and it would be quite interesting to see where the core of their logic is being placed.&lt;/p&gt;

&lt;p&gt;The first step, of course, is to clone the repository to a local folder and then run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx code-complexity &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;--limit&lt;/span&gt; 20 &lt;span class="nt"&gt;--sort&lt;/span&gt; ratio
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will output the following table:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;file&lt;/th&gt;
&lt;th&gt;complexity&lt;/th&gt;
&lt;th&gt;churn&lt;/th&gt;
&lt;th&gt;ratio&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;nextjs/packages/next/compiled/webpack/bundle5.js&lt;/td&gt;
&lt;td&gt;91501&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;91501&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nextjs/packages/next/compiled/webpack/bundle5.js&lt;/td&gt;
&lt;td&gt;91501&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;91501&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nextjs/packages/next/compiled/webpack/bundle4.js&lt;/td&gt;
&lt;td&gt;74436&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;74436&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/cli/src/commands/generate.ts&lt;/td&gt;
&lt;td&gt;228&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;6384&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/cli/src/commands/new.ts&lt;/td&gt;
&lt;td&gt;177&lt;/td&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;6195&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/generator/src/generators/app-generator.ts&lt;/td&gt;
&lt;td&gt;235&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;5405&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/generator/src/generator.ts&lt;/td&gt;
&lt;td&gt;283&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;5377&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/server/src/stages/rpc/index.ts&lt;/td&gt;
&lt;td&gt;184&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;5152&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/server/test/dev.test.ts&lt;/td&gt;
&lt;td&gt;190&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;5130&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/core/src/types.ts&lt;/td&gt;
&lt;td&gt;160&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;4480&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/server/src/next-utils.ts&lt;/td&gt;
&lt;td&gt;176&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;4400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/generator/templates/app/app/pages/index.tsx&lt;/td&gt;
&lt;td&gt;240&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;4320&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/server/src/config.ts&lt;/td&gt;
&lt;td&gt;116&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;4292&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/core/src/use-query-hooks.ts&lt;/td&gt;
&lt;td&gt;184&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;4048&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nextjs/test/integration/file-serving/test/index.test.js&lt;/td&gt;
&lt;td&gt;3561&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3561&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;examples/auth/app/pages/index.tsx&lt;/td&gt;
&lt;td&gt;210&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;3360&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/cli/src/commands/db.ts&lt;/td&gt;
&lt;td&gt;75&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;3300&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.github/workflows/main.yml&lt;/td&gt;
&lt;td&gt;132&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;3168&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/cli/test/commands/new.test.ts&lt;/td&gt;
&lt;td&gt;141&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;2679&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;examples/store/app/pages/index.tsx&lt;/td&gt;
&lt;td&gt;181&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;2534&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/display/src/index.ts&lt;/td&gt;
&lt;td&gt;158&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;2528&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;As you can see, there are a lot of unrelated files that could be filtered out like the compiled folder but for an initial analysis, this is enough.&lt;/p&gt;

&lt;p&gt;We can see multiple directories being important here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;packages/cli&lt;/li&gt;
&lt;li&gt;packages/generator&lt;/li&gt;
&lt;li&gt;packages/server&lt;/li&gt;
&lt;li&gt;packages/core&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we get a task we would at least know already where to look for related code. Initially, I would try to understand the &lt;code&gt;packages/core&lt;/code&gt; files to understand what they are doing. Understand the tests if they exist and then you should have a good grasp of what Blitz is doing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reactjs"&gt;
  &lt;/a&gt;
  React.js
&lt;/h3&gt;

&lt;p&gt;React.js is a frontend framework that almost every web developer knows by now. What most people do not know is how the codebase is structured and what are the core parts. So let us have a look at it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx code-complexity &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;--limit&lt;/span&gt; 20 &lt;span class="nt"&gt;--sort&lt;/span&gt; ratio
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the command will lead to the following result:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;file&lt;/th&gt;
&lt;th&gt;complexity&lt;/th&gt;
&lt;th&gt;churn&lt;/th&gt;
&lt;th&gt;ratio&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;packages/eslint-plugin-react-hooks/**tests**/ESLintRuleExhaustiveDeps-test.js&lt;/td&gt;
&lt;td&gt;7742&lt;/td&gt;
&lt;td&gt;51&lt;/td&gt;
&lt;td&gt;394842&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/react/src/**tests**/ReactProfiler-test.internal.js&lt;/td&gt;
&lt;td&gt;4002&lt;/td&gt;
&lt;td&gt;95&lt;/td&gt;
&lt;td&gt;380190&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/react-reconciler/src/ReactFiberWorkLoop.new.js&lt;/td&gt;
&lt;td&gt;2373&lt;/td&gt;
&lt;td&gt;139&lt;/td&gt;
&lt;td&gt;329847&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/react-reconciler/src/ReactFiberWorkLoop.old.js&lt;/td&gt;
&lt;td&gt;2373&lt;/td&gt;
&lt;td&gt;114&lt;/td&gt;
&lt;td&gt;270522&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/react-dom/src/server/ReactPartialRenderer.js&lt;/td&gt;
&lt;td&gt;1379&lt;/td&gt;
&lt;td&gt;122&lt;/td&gt;
&lt;td&gt;168238&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/react-reconciler/src/ReactFiberCommitWork.new.js&lt;/td&gt;
&lt;td&gt;2262&lt;/td&gt;
&lt;td&gt;71&lt;/td&gt;
&lt;td&gt;160602&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/react-devtools-shared/src/backend/renderer.js&lt;/td&gt;
&lt;td&gt;2952&lt;/td&gt;
&lt;td&gt;54&lt;/td&gt;
&lt;td&gt;159408&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/react-reconciler/src/ReactFiberBeginWork.new.js&lt;/td&gt;
&lt;td&gt;2903&lt;/td&gt;
&lt;td&gt;53&lt;/td&gt;
&lt;td&gt;153859&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scripts/rollup/bundles.js&lt;/td&gt;
&lt;td&gt;760&lt;/td&gt;
&lt;td&gt;199&lt;/td&gt;
&lt;td&gt;151240&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/react-reconciler/src/ReactFiberHooks.new.js&lt;/td&gt;
&lt;td&gt;2622&lt;/td&gt;
&lt;td&gt;56&lt;/td&gt;
&lt;td&gt;146832&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/react-dom/src/client/ReactDOMHostConfig.js&lt;/td&gt;
&lt;td&gt;1018&lt;/td&gt;
&lt;td&gt;140&lt;/td&gt;
&lt;td&gt;142520&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/react-reconciler/src/ReactFiberHooks.old.js&lt;/td&gt;
&lt;td&gt;2622&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;131100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/react-reconciler/src/**tests**/ReactHooks-test.internal.js&lt;/td&gt;
&lt;td&gt;1641&lt;/td&gt;
&lt;td&gt;74&lt;/td&gt;
&lt;td&gt;121434&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/react-dom/src/**tests**/ReactDOMComponent-test.js&lt;/td&gt;
&lt;td&gt;2346&lt;/td&gt;
&lt;td&gt;51&lt;/td&gt;
&lt;td&gt;119646&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/react-dom/src/**tests**/ReactDOMServerPartialHydration-test.internal.js&lt;/td&gt;
&lt;td&gt;2150&lt;/td&gt;
&lt;td&gt;49&lt;/td&gt;
&lt;td&gt;105350&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/react-noop-renderer/src/createReactNoop.js&lt;/td&gt;
&lt;td&gt;966&lt;/td&gt;
&lt;td&gt;109&lt;/td&gt;
&lt;td&gt;105294&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/react-reconciler/src/ReactFiberCommitWork.old.js&lt;/td&gt;
&lt;td&gt;2262&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;td&gt;104052&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/react-reconciler/src/ReactFiberBeginWork.old.js&lt;/td&gt;
&lt;td&gt;2903&lt;/td&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;101605&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/react-reconciler/src/**tests**/ReactIncrementalErrorHandling-test.internal.js&lt;/td&gt;
&lt;td&gt;1532&lt;/td&gt;
&lt;td&gt;62&lt;/td&gt;
&lt;td&gt;94984&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;packages/react-refresh/src/**tests**/ReactFresh-test.js&lt;/td&gt;
&lt;td&gt;3165&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;91785&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;What we can see here is that two sub-packages are probably the most interesting to understand:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;packages/react-dom&lt;/li&gt;
&lt;li&gt;packages/react-reconciler&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Understanding React Fiber and how react-dom's partial renderer is working will give you a good idea about React's architecture. A good thing about the code within React is that it is well documented with comments even though it is complex at first.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#venom-a-typescript-client-for-whatsapp"&gt;
  &lt;/a&gt;
  Venom - A TypeScript Client for Whatsapp
&lt;/h3&gt;

&lt;p&gt;Venom is a library to interact with Whatsapp. You can send messages via this library and do many more things. It is a bit more practical because on such applications you will work mostly in your day-to-day job. So let us run our usual command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx code-complexity &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;--limit&lt;/span&gt; 20 &lt;span class="nt"&gt;--sort&lt;/span&gt; ratio
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;file&lt;/th&gt;
&lt;th&gt;complexity&lt;/th&gt;
&lt;th&gt;churn&lt;/th&gt;
&lt;th&gt;ratio&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;src/lib/jsQR/jsQR.js&lt;/td&gt;
&lt;td&gt;9760&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;48800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;src/lib/wapi/wapi.js&lt;/td&gt;
&lt;td&gt;474&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;20856&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;src/api/layers/sender.layer.ts&lt;/td&gt;
&lt;td&gt;546&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;19656&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;src/lib/wapi/store/store-objects.js&lt;/td&gt;
&lt;td&gt;362&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;8688&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;src/controllers/initializer.ts&lt;/td&gt;
&lt;td&gt;178&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;8544&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;src/lib/wapi/jssha/index.js&lt;/td&gt;
&lt;td&gt;1204&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6020&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;src/api/layers/retriever.layer.ts&lt;/td&gt;
&lt;td&gt;171&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;4959&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;src/types/WAPI.d.ts&lt;/td&gt;
&lt;td&gt;203&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;4872&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;src/api/layers/host.layer.ts&lt;/td&gt;
&lt;td&gt;258&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;4386&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;src/api/layers/listener.layer.ts&lt;/td&gt;
&lt;td&gt;206&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;4326&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;src/controllers/browser.ts&lt;/td&gt;
&lt;td&gt;141&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;4089&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;src/controllers/auth.ts&lt;/td&gt;
&lt;td&gt;192&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;4032&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;src/api/model/enum/definitions.ts&lt;/td&gt;
&lt;td&gt;589&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;3534&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;src/api/whatsapp.ts&lt;/td&gt;
&lt;td&gt;95&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;2850&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;src/lib/wapi/functions/index.js&lt;/td&gt;
&lt;td&gt;97&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;2328&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;src/api/layers/profile.layer.ts&lt;/td&gt;
&lt;td&gt;82&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;1804&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;src/lib/wapi/business/send-message-with-buttons.js&lt;/td&gt;
&lt;td&gt;323&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;1615&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;src/api/layers/group.layer.ts&lt;/td&gt;
&lt;td&gt;115&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;1610&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;src/api/layers/controls.layer.ts&lt;/td&gt;
&lt;td&gt;76&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;1520&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;src/api/model/message.ts&lt;/td&gt;
&lt;td&gt;114&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;1254&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;What we can see here is that there are these directories which are from importance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;src/lib&lt;/li&gt;
&lt;li&gt;src/api&lt;/li&gt;
&lt;li&gt;src/controllers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As we can see from the &lt;code&gt;src/lib&lt;/code&gt; directory, the files included are automatically generated. Ideally, we can filter them out but for now, let us look at the other files.&lt;/p&gt;

&lt;p&gt;We can see that &lt;code&gt;src/api/layers/sender.layer.ts&lt;/code&gt; and &lt;code&gt;src/api/layers/retriever.layer.ts&lt;/code&gt; are not complex but have a lot of changes. So every time a feature is added or deleted these files are touched. These are the core files of the application and understanding them will give you a good grasp of how the codebase is structured and what you should focus on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-does-this-technique-come-from"&gt;
  &lt;/a&gt;
  Where does this technique come from?
&lt;/h2&gt;

&lt;p&gt;This technique of analyzing a codebase originally came from a book that handles refactoring large codebases via a process: &lt;a href="https://www.amazon.de/Software-Design-X-Rays-Technical-Behavioral/dp/1680502727?__mk_de_DE=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;amp;dchild=1&amp;amp;keywords=Software+Design+X-Rays&amp;amp;qid=1615637678&amp;amp;sr=8-1&amp;amp;linkCode=ll1&amp;amp;tag=kevinpeters38-21&amp;amp;linkId=e90c90e5869a073cebb13f2fe26e865e&amp;amp;language=de_DE&amp;amp;ref_=as_li_ss_tl"&gt;Software Design X-Rays&lt;/a&gt; by Adam Tornhill. It is a great book and teaches you a lot of ways to structure your code and what parts are worth refactoring. A great book. I think every software engineer should have read it at some point because it will help them to understand a codebase differently. With working on a project, people will get familiar with different parts of the software and of course, they will have their special "area" of code where they are super comfortable. If this code is good and understandable is another question though, that this book tries to answer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.de/Software-Design-X-Rays-Technical-Behavioral/dp/1680502727?__mk_de_DE=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;amp;dchild=1&amp;amp;keywords=Software+Design+X-Rays&amp;amp;qid=1615637678&amp;amp;sr=8-1&amp;amp;linkCode=ll1&amp;amp;tag=kevinpeters38-21&amp;amp;linkId=e90c90e5869a073cebb13f2fe26e865e&amp;amp;language=de_DE&amp;amp;ref_=as_li_ss_tl"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XlvKcX6Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m59qeszmoaexe7uftb33.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Based on the refactoring efforts, we can also use the knowledge to see which parts of the application are important. Hopefully, I explained this in this blog article to you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-languages"&gt;
  &lt;/a&gt;
  Other Languages
&lt;/h2&gt;

&lt;p&gt;The tool &lt;a href="https://github.com/simonrenoult/code-complexity"&gt;code-complexity&lt;/a&gt; is closely coupled to JavaScript and TypeScript-based codebases. For other languages like Java, C#, Python, or PHP there are other tools, but one tool that is generic and works for most of the codebases is &lt;a href="https://github.com/adamtornhill/code-maat"&gt;code-maat&lt;/a&gt;. It is a tool created by the author of the book mentioned in the chapter before.&lt;/p&gt;

&lt;p&gt;With that, you can analyze a software project as well and come to the same conclusions as mentioned in the blog article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you liked this article and made your life a bit easier. Coming to a new code base is difficult and especially with the ever-changing JavaScript world, it is difficult to follow. With the tools and processes presented in this article, you might have an easier time actually fit well into a new codebase. Feel free to share this article with your workers and also tell them about the techniques you are using. Most of the developers I know do not know about the churn and complexity analysis and it might be really helpful for everyone. So share it!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Why to use useState in react?</title>
      <author>Aastha Pandey</author>
      <pubDate>Fri, 28 May 2021 08:50:00 +0000</pubDate>
      <link>https://dev.to/aasthapandey/why-to-use-usestate-in-react-pkf</link>
      <guid>https://dev.to/aasthapandey/why-to-use-usestate-in-react-pkf</guid>
      <description>&lt;p&gt;What will happen if we don't use the useState hook in react?&lt;br&gt;
Let's take an example, suppose we want to create a counter button that increments itself by one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Without useState&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the below code if one tries to increment the counter by clicking on the &lt;em&gt;button&lt;/em&gt; the count will not change because the react rendered the component only once and since there is no state change it won't get re-rendered, the count will remain at 0 on-screen.&lt;br&gt;
By console.log one can see that the count is incrementing on click.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;With useState&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the below code if one tries to increment the counter by clicking on the &lt;em&gt;button&lt;/em&gt; the count will change because the react rendered the component once when it got mounted and since there is state change it will get re-rendered, the count will get incremented on-screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One can always directly manipulate the &lt;em&gt;DOM&lt;/em&gt; and increment the counter on-screen as well, but then there is no point in using &lt;em&gt;react&lt;/em&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>womenintech</category>
      <category>webdev</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Top 10 AWS Interview Questions</title>
      <author>neeleshsh</author>
      <pubDate>Fri, 28 May 2021 08:47:10 +0000</pubDate>
      <link>https://dev.to/neeleshsh/top-10-aws-interview-questions-1dk</link>
      <guid>https://dev.to/neeleshsh/top-10-aws-interview-questions-1dk</guid>
      <description>&lt;p&gt;1) What is the importance of buffer in Amazon Web Services?&lt;br&gt;
Ans. An Elastic Load Balancer ensures that the incoming traffic is distributed optimally across various AWS instances.  A buffer will synchronize different components and makes the arrangement additionally elastic to a burst of load or traffic. The components are prone to work in an unstable way of receiving and processing requests. The buffer creates an equilibrium linking various apparatus and crafts them work at an identical rate to supply more rapid services.&lt;/p&gt;

&lt;p&gt;2) Can you launch Amazon Elastic Compute Cloud (EC2) instances with predetermined private IP addresses? If yes, then with which Amazon service it is possible?&lt;br&gt;
Ans. Yes. It is possible by using VPC (Virtual Private Cloud).&lt;/p&gt;

&lt;p&gt;3) If you launched a standby RDS, will it be launched in the same availability zone as your primary?&lt;br&gt;
Ans. No, standby instances are automatically launched in different availability zones than the primary, making them physically independent infrastructures. This is because the whole purpose of standby instances is to prevent infrastructure failure. So, in case the primary goes down, the standby instance will help recover all of the data.&lt;/p&gt;

&lt;p&gt;4) Which of the following is a global Content Delivery Network service that securely delivers data to users with low latency and high transfer speed.&lt;br&gt;
Ans. Amazon CloudFront&lt;/p&gt;

&lt;p&gt;5) Which Amazon solution will you use if you want to accelerate moving petabytes of data in and out of AWS, using storage devices that are designed to be secure for data transfer?&lt;br&gt;
Ans. Amazon Snowball. AWS Snowball is the data transport solution for large amounts of data that need to be moved into and out of AWS using physical storage devices.&lt;/p&gt;

&lt;p&gt;6) If you are running your DB instance as Multi-AZ deployment, can you use standby DB instances along with your primary DB instance?&lt;br&gt;
Ans. No, the standby DB instance cannot be used along with the primary DB instances since the standby DB instances are supposed to be used only if the primary instance goes down.&lt;/p&gt;

&lt;p&gt;7) Your organization is developing a new multi-tier web application in AWS. Being a fairly new and small organization, there’s limited staff. But, the organization requires high availability. This new application comprises complex queries and table joins. Which Amazon service will be the best solution for your organization’s requirements?&lt;br&gt;
Ans. DynamoDB will be the right choice here since it is designed to be highly scalable, more than RDS or any other relational database services.&lt;/p&gt;

&lt;p&gt;8) You accidently stopped an EC2 instance in a VPC with an associated Elastic IP. If you start the instance again, what will be the result?&lt;br&gt;
Ans. The data stored on the instance will be lost. Elastic IP is disassociated from the instance only if the instance is terminated.&lt;/p&gt;

&lt;p&gt;9) Your organization has around 50 IAM users. Now, it wants to introduce a new policy that will affect the access permissions of an IAM user. How can it implement this without having to apply the policy at the individual user level?&lt;br&gt;
Ans. It is possible using IAM groups, by adding users in the groups as per their roles and by simply applying the policy to the groups.&lt;/p&gt;

&lt;p&gt;10) You have an application running on your Amazon EC2 instance. You want to reduce the load on your instance as soon as the CPU utilization reaches 100 percent. How will you do that?&lt;br&gt;
Ans. It can be done by creating an autoscaling group to deploy more instances when the CPU utilization exceeds 100 percent and distributing traffic among instances by creating a load balancer and registering the Amazon EC2 instances with it.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://intellipaat.com//blog/interview-question/amazon-aws-interview-questions/"&gt;Interview Questions on Amazon Web Services&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>interview</category>
      <category>questions</category>
    </item>
    <item>
      <title>Make a login form with password display </title>
      <author>Clément Gaudinière</author>
      <pubDate>Fri, 28 May 2021 08:45:50 +0000</pubDate>
      <link>https://dev.to/clementgaudiniere/make-a-login-form-with-password-display-192j</link>
      <guid>https://dev.to/clementgaudiniere/make-a-login-form-with-password-display-192j</guid>
      <description>&lt;p&gt;Hello everyone, today I propose you a tutorial to create a login form to your website using a little javascript to display or hide the user's password field. This tutorial is quite simple, however it will not take into account the backend aspect of the user's connection.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let's Code
&lt;/h3&gt;

&lt;p&gt;To begin, we set up our HTML as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Connection&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;onfocus=&lt;/span&gt;&lt;span class="s"&gt;"black()"&lt;/span&gt; &lt;span class="na"&gt;onblur=&lt;/span&gt;&lt;span class="s"&gt;"white()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 511.999 511.999"&lt;/span&gt; &lt;span class="na"&gt;xml:space=&lt;/span&gt;&lt;span class="s"&gt;"preserve"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"passwordShow()"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"showEye"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;g&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M508.745,246.041c-4.574-6.257-113.557-153.206-252.748-153.206S7.818,239.784,3.249,246.035    c-4.332,5.936-4.332,13.987,0,19.923c4.569,6.257,113.557,153.206,252.748,153.206s248.174-146.95,252.748-153.201    C513.083,260.028,513.083,251.971,508.745,246.041z M255.997,385.406c-102.529,0-191.33-97.533-217.617-129.418    c26.253-31.913,114.868-129.395,217.617-129.395c102.524,0,191.319,97.516,217.617,129.418    C447.361,287.923,358.746,385.406,255.997,385.406z"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;g&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M255.997,154.725c-55.842,0-101.275,45.433-101.275,101.275s45.433,101.275,101.275,101.275    s101.275-45.433,101.275-101.275S311.839,154.725,255.997,154.725z M255.997,323.516c-37.23,0-67.516-30.287-67.516-67.516    s30.287-67.516,67.516-67.516s67.516,30.287,67.516,67.516S293.227,323.516,255.997,323.516z"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;xmlns:xlink=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/1999/xlink"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 59.049 59.049"&lt;/span&gt; &lt;span class="na"&gt;xml:space=&lt;/span&gt;&lt;span class="s"&gt;"preserve"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"passwordHide()"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"hideEye"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;g&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M11.285,41.39c0.184,0.146,0.404,0.218,0.623,0.218c0.294,0,0.585-0.129,0.783-0.377c0.344-0.432,0.273-1.061-0.159-1.405   c-0.801-0.638-1.577-1.331-2.305-2.06l-7.398-7.398l7.629-7.629c7.334-7.333,18.003-9.836,27.839-6.534   c0.523,0.173,1.09-0.107,1.267-0.63c0.175-0.523-0.106-1.091-0.63-1.267c-10.562-3.545-22.016-0.857-29.89,7.016L0,30.368   l8.812,8.812C9.593,39.962,10.426,40.705,11.285,41.39z"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M50.237,21.325c-1.348-1.348-2.826-2.564-4.394-3.616c-0.458-0.307-1.081-0.185-1.388,0.273   c-0.308,0.458-0.185,1.08,0.273,1.388c1.46,0.979,2.838,2.113,4.094,3.369l7.398,7.398l-7.629,7.629   c-7.385,7.385-18.513,9.882-28.352,6.356c-0.52-0.187-1.093,0.084-1.279,0.604c-0.186,0.52,0.084,1.092,0.604,1.279   c3.182,1.14,6.49,1.693,9.776,1.693c7.621,0,15.124-2.977,20.665-8.518l9.043-9.043L50.237,21.325z"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M30.539,41.774c-2.153,0-4.251-0.598-6.07-1.73c-0.467-0.29-1.084-0.148-1.377,0.321c-0.292,0.469-0.148,1.085,0.321,1.377   c2.135,1.33,4.6,2.032,7.126,2.032c7.444,0,13.5-6.056,13.5-13.5c0-2.685-0.787-5.279-2.275-7.502   c-0.308-0.459-0.93-0.582-1.387-0.275c-0.459,0.308-0.582,0.929-0.275,1.387c1.267,1.893,1.937,4.102,1.937,6.39   C42.039,36.616,36.88,41.774,30.539,41.774z"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M30.539,18.774c2.065,0,4.089,0.553,5.855,1.6c0.474,0.281,1.088,0.125,1.37-0.351c0.281-0.475,0.125-1.088-0.351-1.37   c-2.074-1.229-4.451-1.879-6.875-1.879c-7.444,0-13.5,6.056-13.5,13.5c0,2.084,0.462,4.083,1.374,5.941   c0.174,0.354,0.529,0.56,0.899,0.56c0.147,0,0.298-0.033,0.439-0.102c0.496-0.244,0.701-0.843,0.458-1.338   c-0.776-1.582-1.17-3.284-1.17-5.06C19.039,23.933,24.198,18.774,30.539,18.774z"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M54.621,5.567c-0.391-0.391-1.023-0.391-1.414,0l-46.5,46.5c-0.391,0.391-0.391,1.023,0,1.414   c0.195,0.195,0.451,0.293,0.707,0.293s0.512-0.098,0.707-0.293l46.5-46.5C55.012,6.591,55.012,5.958,54.621,5.567z"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Send"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example the button to show or hide the user's password are two SVG, you can however replace them with images, although this is not recommended.&lt;/p&gt;

&lt;p&gt;Now we set up our CSS. In our example our CSS code will look like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url("https://fonts.googleapis.com/css2?family=Open+Sans&amp;amp;display=swap")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' version='1.1' xmlns:xlink='http://www.w3.org/1999/xlink' xmlns:svgjs='http://svgjs.com/svgjs' width='1440' height='560' preserveAspectRatio='none' viewBox='0 0 1440 560'%3e%3cg mask='url(%26quot%3b%23SvgjsMask1000%26quot%3b)&lt;/span&gt;&lt;span class="s2"&gt;' fill='&lt;/span&gt;&lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="s2"&gt;'%3e%3crect width='&lt;/span&gt;&lt;span class="m"&gt;1440&lt;/span&gt;&lt;span class="s2"&gt;' height='&lt;/span&gt;&lt;span class="m"&gt;560&lt;/span&gt;&lt;span class="s2"&gt;' x='&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="s2"&gt;' y='&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="s2"&gt;' fill='&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="m"&gt;230&lt;/span&gt;&lt;span class="n"&gt;e2a47&lt;/span&gt;&lt;span class="s2"&gt;'%3e%3c/rect%3e%3cpath d='&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="m"&gt;0%2&lt;/span&gt;&lt;span class="n"&gt;c276&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="m"&gt;57.6%2&lt;/span&gt;&lt;span class="n"&gt;c235&lt;/span&gt;&lt;span class="m"&gt;.6&lt;/span&gt; &lt;span class="m"&gt;172.8%2&lt;/span&gt;&lt;span class="n"&gt;c99&lt;/span&gt;&lt;span class="m"&gt;.4&lt;/span&gt; &lt;span class="m"&gt;288%2&lt;/span&gt;&lt;span class="n"&gt;c74&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="m"&gt;403.2%2&lt;/span&gt;&lt;span class="n"&gt;c48&lt;/span&gt;&lt;span class="m"&gt;.6&lt;/span&gt; &lt;span class="m"&gt;460.8%2&lt;/span&gt;&lt;span class="n"&gt;c147&lt;/span&gt; &lt;span class="m"&gt;576%2&lt;/span&gt;&lt;span class="n"&gt;c149&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="m"&gt;691.2%2&lt;/span&gt;&lt;span class="n"&gt;c151&lt;/span&gt; &lt;span class="m"&gt;748.8%2&lt;/span&gt;&lt;span class="n"&gt;c84&lt;/span&gt;&lt;span class="m"&gt;.4&lt;/span&gt; &lt;span class="m"&gt;864%2&lt;/span&gt;&lt;span class="n"&gt;c84&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="m"&gt;979.2%2&lt;/span&gt;&lt;span class="n"&gt;c83&lt;/span&gt;&lt;span class="m"&gt;.6&lt;/span&gt; &lt;span class="m"&gt;1036.8%2&lt;/span&gt;&lt;span class="n"&gt;c143&lt;/span&gt; &lt;span class="m"&gt;1152%2&lt;/span&gt;&lt;span class="n"&gt;c147&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="m"&gt;1267.2%2&lt;/span&gt;&lt;span class="n"&gt;c151&lt;/span&gt; &lt;span class="m"&gt;1382.4%2&lt;/span&gt;&lt;span class="n"&gt;c112&lt;/span&gt;&lt;span class="m"&gt;.6&lt;/span&gt; &lt;span class="m"&gt;1440%2&lt;/span&gt;&lt;span class="n"&gt;c104L1440&lt;/span&gt; &lt;span class="m"&gt;560&lt;/span&gt;&lt;span class="n"&gt;L0&lt;/span&gt; &lt;span class="m"&gt;560&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="s2"&gt;' fill='&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="m"&gt;23184&lt;/span&gt;&lt;span class="n"&gt;a7e&lt;/span&gt;&lt;span class="s2"&gt;'%3e%3c/path%3e%3cpath d='&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="m"&gt;0%2&lt;/span&gt;&lt;span class="n"&gt;c557&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="m"&gt;96%2&lt;/span&gt;&lt;span class="n"&gt;c505&lt;/span&gt; &lt;span class="m"&gt;288%2&lt;/span&gt;&lt;span class="n"&gt;c307&lt;/span&gt;&lt;span class="m"&gt;.6&lt;/span&gt; &lt;span class="m"&gt;480%2&lt;/span&gt;&lt;span class="n"&gt;c297&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="m"&gt;672%2&lt;/span&gt;&lt;span class="n"&gt;c286&lt;/span&gt;&lt;span class="m"&gt;.4&lt;/span&gt; &lt;span class="m"&gt;768%2&lt;/span&gt;&lt;span class="n"&gt;c503&lt;/span&gt;&lt;span class="m"&gt;.6&lt;/span&gt; &lt;span class="m"&gt;960%2&lt;/span&gt;&lt;span class="n"&gt;c504&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="m"&gt;1152%2&lt;/span&gt;&lt;span class="n"&gt;c504&lt;/span&gt;&lt;span class="m"&gt;.4&lt;/span&gt; &lt;span class="m"&gt;1344%2&lt;/span&gt;&lt;span class="n"&gt;c340&lt;/span&gt; &lt;span class="m"&gt;1440%2&lt;/span&gt;&lt;span class="n"&gt;c299L1440&lt;/span&gt; &lt;span class="m"&gt;560&lt;/span&gt;&lt;span class="n"&gt;L0&lt;/span&gt; &lt;span class="m"&gt;560&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="s2"&gt;' fill='&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="m"&gt;232264&lt;/span&gt;&lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="s2"&gt;'%3e%3c/path%3e%3c/g%3e%3cdefs%3e%3cmask id='&lt;/span&gt;&lt;span class="n"&gt;SvgjsMask1000&lt;/span&gt;&lt;span class="s2"&gt;'%3e%3crect width='&lt;/span&gt;&lt;span class="m"&gt;1440&lt;/span&gt;&lt;span class="s2"&gt;' height='&lt;/span&gt;&lt;span class="m"&gt;560&lt;/span&gt;&lt;span class="s2"&gt;' fill='&lt;/span&gt;&lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="err"&gt;'%&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;defs&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;svg&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="s1"&gt;");
  background-size: 100vw 100vh;
  margin: 0;
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  font-family: "&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt; &lt;span class="n"&gt;Sans&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;backdrop-filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;saturate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;120%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fit-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;93%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;gray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nf"&gt;#password&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;190px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nf"&gt;#showEye&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nf"&gt;#hideEye&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;220px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:focus::placeholder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;gray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;::placeholder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;submit&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;submit&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0.2rem&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-23px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are going to do the most interesting part - setting up our javascript. First of all we have to understand the process we are going to follow. To display the string of characters of the input type password, we have to replace it by an input type text.&lt;/p&gt;

&lt;p&gt;Concretely, this is what it looks like :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;showEye&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;showEye&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hideEye&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hideEye&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;black&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;showEye&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#000000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;hideEye&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#000000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;white&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;showEye&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;hideEye&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;passwordShow&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;showEye&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;hideEye&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;inline&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;passwordHide&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;showEye&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;inline&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;hideEye&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When clicking on a svg to show or hide the password, two different functions can be launched : &lt;code&gt;passwordShow()&lt;/code&gt; or &lt;code&gt;passwordHide()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is the final result:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/clement-gaudiniere/embed/ExWgNxQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This turoriel was pretty quick, if you have any questions, feel free to ask me in comments ! 👍&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
