<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How Can You Get Noticed Without a Github Account?</title>
      <author>Fernando Doglio</author>
      <pubDate>Sat, 18 Dec 2021 11:47:14 +0000</pubDate>
      <link>https://dev.to/deleteman123/how-can-you-get-noticed-without-a-github-account-2h1h</link>
      <guid>https://dev.to/deleteman123/how-can-you-get-noticed-without-a-github-account-2h1h</guid>
      <description>&lt;p&gt;I’ve had conversations with many developers trying to understand how to get their first job without any experience. And my go-to solution is: create a Github account and start uploading code projects you’ve worked on. Either that, or create new ones and publish them there.&lt;/p&gt;

&lt;p&gt;Sadly, not everyone has access to Github, given how the platform is part of Microsoft and given the latter is a US company, it needs to comply with the US export law. Thus developers from countries such as Iran, Syria, Crimea and others are blocked by the platform.&lt;/p&gt;

&lt;p&gt;This puts a harsh roadblock in their chances of getting their first job, especially if they’re applying for a remote position or a freelance gig. Either way, the main code repository for developers is out of their reach, so how can they find ways to show what they know how to do?&lt;/p&gt;

&lt;p&gt;Let’s take a look at some options.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#build-a-wordpress-site"&gt;
  &lt;/a&gt;
  Build a WordPress site
&lt;/h2&gt;

&lt;p&gt;Granted, this is not a code repository, but we’re going barebone here.&lt;/p&gt;

&lt;p&gt;Other public code repositories like Bitbucket are also blocked in many countries, so we’re looking for alternatives.&lt;/p&gt;

&lt;p&gt;Wordress.com allows you to set up a blog for free, where you can add whatever content you want. So let’s take a look at this and consider the opportunity it represents:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You’re free to show our code however we want.&lt;/li&gt;
&lt;li&gt;You’re able to provide samples of code through direct download links, or through directly showing what it looks like.&lt;/li&gt;
&lt;li&gt;You can also write content around that code. Are you showing a project you built? Create a series of articles around that project and link it to the code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also take advantage of WordPress plugins such as &lt;a href="https://wordpress.org/plugins/code-prettify/"&gt;code-prettify&lt;/a&gt; which lets you highlight code on your posts. That way you generate a similar look and feel users would get by reading code directly on Github.&lt;/p&gt;

&lt;p&gt;If you have access to hosting and a domain name (ideally something like your name .com) you can even download the free version of WordPress from Wordpress.org and install it yourself. This would give you a lot more control over how your site works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#launchpad"&gt;
  &lt;/a&gt;
  LaunchPad
&lt;/h2&gt;

&lt;p&gt;If you’re looking for something similar to Github but that it’s not blocked, you might want to give &lt;a href="https://launchpad.net/"&gt;LaunchPad&lt;/a&gt; a try.&lt;/p&gt;

&lt;p&gt;It’s similar to Github in the sense that you can publish your project’s code, track bugs and issues, perform code reviews and more. And while the tutorials are written following the use of &lt;a href="http://doc.bazaar.canonical.com/bzr.dev/en/mini-tutorial/index.html"&gt;Bazaar&lt;/a&gt; instead of Git, they claim that the latter is also an option.&lt;/p&gt;

&lt;p&gt;Projects such as &lt;a href="https://launchpad.net/inkscape"&gt;Inkscape&lt;/a&gt;, the Photoshop open-source alternative or &lt;a href="https://launchpad.net/ubuntu-mate"&gt;Ubuntu MATE&lt;/a&gt;, the Linux distro, are hosted there and you can see the type of information that you could potentially show to others.&lt;/p&gt;

&lt;p&gt;Granted, the visual aspect is not the highlight of LaunchPad, considering they don’t allow you to show a lot, in fact, there seems to not be a place for a Readme file. However, you can definitely add a link to an external website, so that way you can provide extra information about the project if you want, and focus on giving access to your code through this platform.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing"&gt;
  &lt;/a&gt;
  Writing!
&lt;/h2&gt;

&lt;p&gt;Writing is an alternative to showing projects done. It’s definitely not the same, however, as part of technical articles you can definitely show some aspects of your coding skills.&lt;/p&gt;

&lt;p&gt;And that is what we’re after here, isn’t it? Trying to show potential employees that you know what you’re talking about and that the list of skills on your resume is definitely true.&lt;/p&gt;

&lt;p&gt;Writing in a lot of places is free and public, so you don’t need to spend any money if you don’t want to. And if you’re doing this for a resume, I would strongly suggest you write about the subjects you claim to know. Maybe not about all of them, but the most relevant at least.&lt;/p&gt;

&lt;p&gt;If you’re lucky and some of those articles get some traction, they can even be picked up by newsletters such as &lt;a href="https://javascriptweekly.com/"&gt;JavaScriptWeekly&lt;/a&gt;. That’s a nice greeting card, especially if your interviewer is already a subscriber.&lt;/p&gt;

&lt;p&gt;But even if you’re just getting started, spend some time honing your writing skills, their return of investment is huge considering how much they can affect your communication skills.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#go-to-meetups-conferences-and-speak"&gt;
  &lt;/a&gt;
  Go to meet-ups / conferences and speak
&lt;/h2&gt;

&lt;p&gt;Granted, this one might be a little bit extreme, but what better way to get in front of everyone you want to be hired by than assisting the same social events they do.&lt;/p&gt;

&lt;p&gt;Some of the biggest (and sometimes not so big) software companies normally either sponsor some meet-ups or the big conferences, and they tend to send some of their employees as well. It’s a great opportunity for you to be there, speak about something relevant to your experience and network!&lt;/p&gt;

&lt;p&gt;I understand that it’s not easy for everyone. Especially conferences require travel and not all of them are willing to pay for your plane ticket and hotel room. But at least do the research, there is a ton of information online about the different conferences you could be speaking at and they normally tell you if they have some travel budget or not.&lt;/p&gt;

&lt;p&gt;Think about it, it might sound like a lot, but you’re also putting your name out there. The video of your talk will surely be on YouTube a little bit after, and anybody interested in you will only have to google your name. This is definitely a powerful, yet scary, opportunity.&lt;/p&gt;

&lt;p&gt;Do not discard it until you’ve done the research.&lt;/p&gt;




&lt;p&gt;Getting noticed is not all about code, but it definitely helps. The thing is that when I say “code”, you usually go straight into “side-project”, and from there you go right into Github, and that is where the plan collapses. No Github access, no side-project, no new job. Done.&lt;/p&gt;

&lt;p&gt;But that’s not the case, find alternative ways of showing what you know how to do, either by finding less popular (or user-friendly) alternatives, or by doing other things around your projects (like writing or speaking about it).&lt;/p&gt;

&lt;p&gt;What else would you suggest to a new dev looking for their first job as an alternative to having a portfolio on Github?&lt;/p&gt;




&lt;p&gt;&lt;em&gt;If you liked what you read, consider joining my Free newsletter to get insight into the software development career!&lt;/em&gt; &lt;a href="https://fernandodoglio.substack.com"&gt;https://fernandodoglio.substack.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Running while(true) in JS</title>
      <author>Abhishek Raj</author>
      <pubDate>Sat, 18 Dec 2021 11:37:53 +0000</pubDate>
      <link>https://dev.to/abhishekraj272/running-whiletrue-in-js-1aoh</link>
      <guid>https://dev.to/abhishekraj272/running-whiletrue-in-js-1aoh</guid>
      <description>&lt;p&gt;You must be wondering this guy is MAD, we can't run while/for loop &lt;strong&gt;synchronously&lt;/strong&gt; client side in &lt;em&gt;javascript&lt;/em&gt;, it will block the main thread and will FREEZE the page.&lt;/p&gt;

&lt;p&gt;Well, it is possible to run it but not a good way to do it and might introduce some bugs in your program.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#web-worker"&gt;
  &lt;/a&gt;
  Web Worker
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Web Worker runs in a single thread isolated from the main thread, so you can run any synchronous operation without blocking the thread.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can run the loop in Web Worker and send the send the data from Web Worker to Main Thread using &lt;em&gt;postMessage&lt;/em&gt; method. It will run as good as main thread.&lt;/p&gt;

&lt;p&gt;You can try it in the below code snippet&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/abhishekraj272/embed/WNZjWMe?height=600&amp;amp;default-tab=result,js&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Running synchronous loop is not advised in browser, unless there is a such requirement.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Connect Me @ &lt;a href="https://www.linkedin.com/in/abhishekraj272/"&gt;Linkedin&lt;/a&gt;, &lt;a href="https://github.com/abhishekraj272"&gt;Github&lt;/a&gt;, &lt;a href="https://twitter.com/abhishekraj272"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.youtube.com/channel/UCvHn2T8DSJzEWzYDdK3Dt8A"&gt;Youtube&lt;/a&gt; 😇&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>Backup my way</title>
      <author>Young Yoshie</author>
      <pubDate>Sat, 18 Dec 2021 11:11:56 +0000</pubDate>
      <link>https://dev.to/youngyoshie/backup-my-way-b78</link>
      <guid>https://dev.to/youngyoshie/backup-my-way-b78</guid>
      <description>&lt;p&gt;First thing first, I want to list my own devices, which I have through the years:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Laptop Samsung NP300E4Z-S06VN (Old laptop which I give to my mom)&lt;/li&gt;
&lt;li&gt;Laptop Dell Inspiron 15 3567 (My mom bought it for me when I go to college, I give it to my sister afterward)&lt;/li&gt;
&lt;li&gt;Laptop Acer Nitro AN515-45 (Gaming laptop which I buy for gaming, of course)&lt;/li&gt;
&lt;li&gt;MacBook Pro M1 2020 (My company laptop)&lt;/li&gt;
&lt;li&gt;Phone LG G3 d851 (Kinda broken, the phone I used a long time ago)&lt;/li&gt;
&lt;li&gt;Phone Xiaomi Poco X3 NFC (Primary phone which I use daily)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;App/Service I use daily:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bitwarden.com/"&gt;Bitwarden&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getaegis.app/"&gt;Aegis Authenticator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rclone.org/"&gt;Rclone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailscale.com/"&gt;Tailscale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Google Keep&lt;/li&gt;
&lt;li&gt;Google Drive (I use 200GB plan)&lt;/li&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;GitLab&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The purpose is that I want my data to be safe, secure, and can be easily recovered if I lost some devices;&lt;br&gt;
or in the worst situation, I lost all.&lt;br&gt;
Because you know, it is hard to guess what is waiting for us in the future.&lt;/p&gt;

&lt;p&gt;There are 2 sections which I want to share, the first is &lt;strong&gt;How to backup&lt;/strong&gt;, the second is &lt;strong&gt;Recover strategy&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-backup"&gt;
  &lt;/a&gt;
  How to backup
&lt;/h2&gt;

&lt;p&gt;Before I talk about backup, I want to talk about data.&lt;br&gt;
In specifically, which data should I backup?&lt;/p&gt;

&lt;p&gt;I use Arch Linux and macOS, primarily work in the terminal so I have too many dotfiles, for example, &lt;code&gt;~/.config/nvim/init.config&lt;/code&gt;.&lt;br&gt;
Each time I reinstall Arch Linux (I like it a lot), I need to reconfigure all the settings, and it is time-consuming.&lt;/p&gt;

&lt;p&gt;So for the DE and UI settings, I keep it as default as possible, unless it's getting in my way, I leave the default setting there and forget about it.&lt;br&gt;
The others are dotfiles, which I write my own &lt;a href="https://github.com/haunt98/dotfiles"&gt;dotfiles tool&lt;/a&gt; to backup and reconfigure easily and quickly.&lt;br&gt;
Also, I know that installing Arch Linux is not easy, despite I install it too many times (Like thousand times since I was in high school).&lt;br&gt;
Not because it is hard, but as life goes on, the &lt;a href="https://wiki.archlinux.org/title/installation_guide"&gt;official install guide&lt;/a&gt; keeps getting new update and covering too many cases for my own personal use, so I write my own &lt;a href="https://github.com/haunt98/til/blob/main/install-archlinux.md"&gt;guide&lt;/a&gt; to quickly capture what I need to do.&lt;br&gt;
I back up all my dotfiles inside my dotfiles tool in GitHub and GitLab as I trust them both.&lt;/p&gt;

&lt;p&gt;So that is my dotfiles, for my regular data, like Wallpaper or Books, Images, I use Google Drive (Actually I pay for it).&lt;br&gt;
But the step: open the webpage, click the upload button and choose files seems boring and time-consuming.&lt;br&gt;
So I use Rclone, it supports Google Drive, One Drive and many providers but I only use Google Drive for now.&lt;br&gt;
The commands are simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Sync from local to remote&lt;/span&gt;
rclone &lt;span class="nb"&gt;sync &lt;/span&gt;MyBooks remote:MyBooks &lt;span class="nt"&gt;-P&lt;/span&gt; &lt;span class="nt"&gt;--exclude&lt;/span&gt; .DS_Store

&lt;span class="c"&gt;# Sync from remote to local&lt;/span&gt;
rclone &lt;span class="nb"&gt;sync &lt;/span&gt;remote:MyBooks MyBooks &lt;span class="nt"&gt;-P&lt;/span&gt; &lt;span class="nt"&gt;--exclude&lt;/span&gt; .DS_Store
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before you use Rclone to sync to Google Drive, you should read &lt;a href="https://rclone.org/drive/"&gt;Google Drive rclone configuration&lt;/a&gt; first.&lt;/p&gt;

&lt;p&gt;The next data is my passwords and my OTPs.&lt;br&gt;
These are the things which I'm scare to lose the most.&lt;br&gt;
First thing first, I enable 2-Step Verification for all of my important accounts, should use both OTP and phone method.&lt;/p&gt;

&lt;p&gt;I use Bitwarden for passwords (That is a long story, coming from Google Password manager to Firefox Lockwise and then settle down with Bitwarden) and Aegis for OTPs.&lt;br&gt;
The reason I choose Aegis, not Authy (I use Authy for so long but Aegis is definitely better) is because Aegis allows me to extract all the OTPs to a single file (Can be encrypted), which I use to transfer or backup easily.&lt;/p&gt;

&lt;p&gt;As long as Bitwarden provides free passwords stored, I use all of its apps, extensions so that I can easily sync passwords between laptops and phones.&lt;br&gt;
The thing I need to remember is the master password of Bitwarden in my head.&lt;/p&gt;

&lt;p&gt;With Aegis, I export the data, then sync it to Google Drive in my main phone, then sync it back to my backup phone.&lt;br&gt;
For safety, I also store Aegis data locally on all of my laptops (Encrypted of course).&lt;br&gt;
The rule is you always need 2 phones for OTPs, one for carrying around, one always stays at home.&lt;/p&gt;

&lt;p&gt;The main problem here is the OTP, I can not store all of my OTPs in the cloud completely.&lt;br&gt;
Because if I want to access my OTPs in the cloud, I should log in, and then input my OTP, this is a circle, my friends.&lt;br&gt;
The easiest answer is the old phone, which is safe at home.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recovery-strategy"&gt;
  &lt;/a&gt;
  Recovery strategy
&lt;/h2&gt;

&lt;p&gt;There are many strategies that I process to react as if something strange is happening to my devices.&lt;/p&gt;

&lt;p&gt;If I lost my laptops, single laptop or all, do not panic as long as I have my phones.&lt;br&gt;
The OTPs are in there, the passwords are in Bitwarden cloud, other data is in Google Drive so nothing is lost here.&lt;/p&gt;

&lt;p&gt;If I lost my main phone, but not my laptop, I use the OTPs which are stored locally in my laptops.&lt;/p&gt;

&lt;p&gt;If I lost my main phone, and my laptops, I use the OTPs in my old phone.&lt;br&gt;
Then I go to the nearest SIM store to recover my SIM, as I register my ID with it.&lt;/p&gt;

&lt;p&gt;In the worst situation, I lost everything, my laptops, my phones (Main phone and old).&lt;br&gt;
The first step is to recover my SIM, then log in to Google account using the password and SMS OTP.&lt;br&gt;
After that, log in to Bitwarden account using the master password and OTP from Gmail, which I open previously.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The end
&lt;/h2&gt;

&lt;p&gt;This guide will be updated regularly I promise.&lt;/p&gt;

</description>
      <category>backup</category>
      <category>linux</category>
    </item>
    <item>
      <title>5 Best Django Courses to learn Web Development with Python</title>
      <author>javinpaul</author>
      <pubDate>Sat, 18 Dec 2021 11:11:20 +0000</pubDate>
      <link>https://dev.to/javinpaul/5-best-django-courses-to-learn-web-development-with-python-4hn8</link>
      <guid>https://dev.to/javinpaul/5-best-django-courses-to-learn-web-development-with-python-4hn8</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/courses/django-python-web-development?affiliate_id=5073518643380224"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N68HHoZd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://external-preview.redd.it/YOMVd8z_ttokGrqR74CywDM4007m3Fj4I41QUTLdXR8.jpg%3Fauto%3Dwebp%26s%3D5eb605b4454ba7d7b96604304e2607e55673d0b2" alt="best Django courses for beginners in 2022" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello Devs, if you want to become a Python web developer and looking for the best online courses to learn Django, Flask, and Python web development, then you have come to the right place. &lt;/p&gt;

&lt;p&gt;In the past, I have shared the &lt;a href="https://www.java67.com/2020/05/top-5-courses-to-learn-python-in-depth.html"&gt;&lt;strong&gt;best Python courses&lt;/strong&gt;&lt;/a&gt; and the &lt;a href="https://javarevisited.blogspot.com/2020/01/top-5-courses-to-learn-flask-for-web-development-with-python.html"&gt;&lt;strong&gt;best Flask courses&lt;/strong&gt;&lt;/a&gt;, and today, I will share the best course to learn everything about Python web development. &lt;/p&gt;

&lt;p&gt;You may know that Python is a multi-purpose programming language meaning that you can use it in different fields such as GUI application, artificial intelligence, and web application, and much more, just to name a few.&lt;/p&gt;

&lt;p&gt;Apart from &lt;a href="https://www.java67.com/2018/10/top-10-data-science-and-machine-learning-courses.html"&gt;Data Science&lt;/a&gt;, Web development is another area where &lt;a href="https://www.java67.com/2018/02/5-free-python-online-courses-for-beginners.html"&gt;Python&lt;/a&gt; shines because of its excellent tools, libraries, and frameworks. &lt;/p&gt;

&lt;p&gt;And, when we talk about web applications, one of the best python frameworks that are popular is the Django framework which allows you to create a Python web application very quickly and easily.&lt;/p&gt;

&lt;p&gt;Django is a robust Python framework that is used to create web applications; this tool is considered one of the &lt;strong&gt;&lt;a href="https://javarevisited.blogspot.com/2019/04/top-5-python-web-development-frameworks.html"&gt;best web development frameworks&lt;/a&gt;&lt;/strong&gt; to develop websites that work with databases such as content management systems (CMS), customer relationship management (CRM), Object Relational Mapping (ORM), and much more.&lt;/p&gt;

&lt;p&gt;If you are getting started with web development in Python or want to become a Python web developer and looking for some online training courses to &lt;strong&gt;learn Django in 2022&lt;/strong&gt; then you have come to the right place.&lt;/p&gt;

&lt;p&gt;In this blog post, we will see some of the &lt;em&gt;best Django courses&lt;/em&gt; designed to take to the advanced level on using this framework to create your own web application.  &lt;/p&gt;

&lt;p&gt;By the way, you should know how to code in Python and if you don't you can join &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F"&gt;The 2022 Complete Python Bootcamp: From Zero to Hero in Python&lt;/a&gt;&lt;/strong&gt; course in Udemy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ppVrHAqb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-wvvMKCCo6UM/X3XZA5ym08I/AAAAAAAAjlk/EwfpqT2m-nQ46CW0_EwzNJ2B3KmzygXzACLcBGAsYHQ/w640-h360/The%252BComplete%252BPython%252B3%252BBootcamp.webp" alt="Javarevisited: Udemy&amp;amp;#39;s The 2022 Complete Python Bootcamp From Zero to Hero  in Python Review" width="640" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will learn everything about Python including how to utilize Object-Oriented Programming and construct graphical user interfaces and games. There are 20 parts in all, as well as two milestone projects. Students will gain access to 21.5 hours of video, materials, and activities on demand.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-best-online-courses-to-learn-django-in-2022"&gt;
  &lt;/a&gt;
  5 Best Online Courses to learn Django in 2022
&lt;/h2&gt;

&lt;p&gt;Without wasting any more of your time, here are the best Django courses for Web Development. The list contains hands-on project-based online training courses from &lt;a href="https://javarevisited.blogspot.com/2019/08/top-10-udemy-courses-and-certifications-for-programmers.html"&gt;Udemy&lt;/a&gt; and &lt;a href="https://javarevisited.blogspot.com/2017/12/top-10-pluralsight-courses-java-and-web-developers.html"&gt;Pluralsight&lt;/a&gt; to learn the Django web development framework.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-python-django-dev-to-deployment-udemy"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-django-dev-to-deployment%2F"&gt;Python Django Dev To Deployment&lt;/a&gt; [Udemy]
&lt;/h3&gt;

&lt;p&gt;If you want to learn Django and web development through practical exercises, this course is suitable. This is probably the best Udemy course to learn Python and Django. &lt;/p&gt;

&lt;p&gt;It is designed to take you to an advanced level of web development from the beginning of the python programming language basic syntax until the deployment of the web application.&lt;/p&gt;

&lt;p&gt;Here are the main things you will learn in this course:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  How to use Python even if you are a beginner.&lt;/li&gt;
&lt;li&gt;  Building a real estate website with Django and &lt;a href="https://javarevisited.blogspot.com/2020/02/top-5-courses-to-learn-postgresql-in.html"&gt;PostgreSQL&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;  Creating a virtual environment and deploying the web app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Created by Brad Traversy, this Python and Django course has more than 11 hours of practical videos and many examples, such as creating a real estate website. In short, one of the best Django courses for beginners to learn online in 2022. It's also very affordable, and you can get it for just $10 on Udemy sales.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-django-dev-to-deployment%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--28AEKGGy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-Wul9MLgvdac/XtZCb3wdxJI/AAAAAAAAfjM/jcOQSe7iI2UfTQ8oOk1irHyYzPdc7-kIwCLcBGAsYHQ/s400/Python%252BDjango%252BDev%252BTo%252BDeployment%252BUdemy%252Bcourse%252BBy%252BBrade%252BTraversy.png" alt="5 Best Courses to learn Django and Python for Web Development" width="400" height="225"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-django-and-python-complete-bundle-django-actual-project-2022"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-django-tkinter-complete-bundle-advance%2F"&gt;Django and Python: complete BUNDLE + Django actual project 2022&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This one is another top course to learn Django and Python from Udemy. In this complete course on Django, you see how to use Python first from beginning to advance than will take you to use &lt;a href="https://medium.com/javarevisited/my-favorite-courses-to-learn-django-for-beginners-2020-ac172e2ab920"&gt;Django&lt;/a&gt; as a professional developer and learn how to design an exemplary user interface, send emails, web scrapping, security, advanced search, and much more that you can explore.&lt;/p&gt;

&lt;p&gt;Here are the main things you will learn in this course:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  How to create real websites in Python Django.&lt;/li&gt;
&lt;li&gt;  How to make and run a real-world text-based RPG game.&lt;/li&gt;
&lt;li&gt;  How to use the &lt;a href="https://javarevisited.blogspot.com/2020/07/top-5-courses-to-learn-django-in-2020.html"&gt;Django&lt;/a&gt; and &lt;a href="https://javarevisited.blogspot.com/2020/07/top-5-courses-to-learn-bootstrap-in.html"&gt;Bootstrap&lt;/a&gt; frameworks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to get a complete course on how to master the Django framework, then this complete bundle is the right for you. If you are looking for project-based courses to learn Python and Django, then this Udemy course is perfect for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-django-tkinter-complete-bundle-advance%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cf4u8_tp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-wVf5wr-cfSE/XtZCbQ1yWaI/AAAAAAAAfjI/2EGc-V5nsCwnhu9cTzPR6BKJxSE7HS-jwCLcBGAsYHQ/w400-h225/Django%252Band%252BPython%252Bcomplete%252BBUNDLE%252B%25252B%252BDjango%252Breal%252Bproject%252B2020%252Bbest%252BUdemy%252Bcourse.png" alt="best online course to learn Django and Python" width="400" height="225"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-django-getting-started-pluralsight"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fdjango-getting-started"&gt;Django: Getting Started&lt;/a&gt; [Pluralsight]
&lt;/h3&gt;

&lt;p&gt;Suppose you recently completed a python course and want to jump into some introduction to web application development. In that case, I will suggest this Django Fundamentals course offered in Pluralsight to you.&lt;/p&gt;

&lt;p&gt;As the name speaks for itself, it shows you how to create and build a complete web application after going to the basics of this framework. After that, you will see how to style pages using Django templates and add URLs to these pages, handle user interaction, and more.&lt;/p&gt;

&lt;p&gt;Here are the main things you will learn in this course:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Basics of the &lt;a href="https://medium.com/javarevisited/my-favorite-courses-to-learn-django-for-beginners-2020-ac172e2ab920"&gt;Django framework&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;  Create attractively styled pages using Django templates.&lt;/li&gt;
&lt;li&gt;  Store and manipulate data with API and a user interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After completing this course, you will know how to build your own complete web application using the Django framework. For beginners, this is probably the best Django course on Pluralsight to learn online.&lt;/p&gt;

&lt;p&gt;By the way, you would need a Pluralsight membership to join this course, which costs around $29 per month or $299 per year and gives access to more than 7000+ online courses to learn the latest technologies. Alternative. You can also use their &lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Flearn"&gt;&lt;strong&gt;10-day-free-pass&lt;/strong&gt;&lt;/a&gt; to watch this course for free.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fdjango-getting-started"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F402Lf_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-VBTmhpI3qpk/XtZCbUZ9VtI/AAAAAAAAfjE/gVvpG6FVGToogzHGYCmhjgrjyJbKVKg9QCLcBGAsYHQ/s400/Django%252BGetting%252BStarted%252BCourse%252Bby%252BPluralsight.png" alt="best online course to learn Django and Python on Pluralsight" width="400" height="225"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-cs50s-web-programming-with-python-and-javascript-edx"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://www.awin1.com/cread.php?awinmid=6798&amp;amp;awinaffid=631878&amp;amp;clickref=&amp;amp;p=%5B%5Bhttps%3A%2F%2Fwww.edx.org%2Fcourse%2Fcs50s-web-programming-with-python-and-javascript"&gt;CS50's Web Programming with Python and JavaScript&lt;/a&gt; [edX]
&lt;/h3&gt;

&lt;p&gt;One of the best courses available online to learn Django web programming is the CS50's Web Programming with Python and JavaScript course on the &lt;a href="https://www.awin1.com/cread.php?awinmid=6798&amp;amp;awinaffid=631878&amp;amp;clickref=&amp;amp;p="&gt;edX platform&lt;/a&gt; offered by Harvard University. &lt;/p&gt;

&lt;p&gt;This is also a free course you can take to learn Django online. You only need to pay when you need a certificate.&lt;/p&gt;

&lt;p&gt;This course picks up where the classic &lt;strong&gt;CS50 course&lt;/strong&gt; (most popular online computer science course) leaves off, diving more deeply into the design and implementation of web apps with Python, JavaScript, and SQL using frameworks like &lt;a href="https://medium.com/javarevisited/5-best-python-flask-courses-for-beginners-2f262f8e23da"&gt;Flask&lt;/a&gt;, &lt;a href="https://medium.com/javarevisited/7-free-courses-to-learn-django-framework-in-python-bd50acc8484"&gt;Django&lt;/a&gt;, and &lt;a href="https://medium.com/javarevisited/6-best-bootstrap-online-courses-for-web-designers-and-developers-a688e192b2e2"&gt;Bootstrap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are the main things you will learn in this course:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  How to design and create a database for your web application.&lt;/li&gt;
&lt;li&gt;  How to use Django to create your own web application.&lt;/li&gt;
&lt;li&gt;  How to deploy your web application on the internet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This &lt;a href="https://medium.com/@javinpaul/my-favorite-courses-to-learn-django-for-beginners-2020-ac172e2ab920"&gt;&lt;strong&gt;best Django course on edX&lt;/strong&gt;&lt;/a&gt; will show you how to create databases for your web application and other topics like scalability, security, to user experience. Throughout their practice exercises, you will learn some exciting projects like writing and using APIs and creating interactive UI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.awin1.com/cread.php?awinmid=6798&amp;amp;awinaffid=631878&amp;amp;clickref=&amp;amp;p=%5B%5Bhttps%3A%2F%2Fwww.edx.org%2Fcourse%2Fcs50s-web-programming-with-python-and-javascript"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9SnPsThy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-dJoTssTKWcI/XtZENpGW8AI/AAAAAAAAfjk/n1l3FrJQTjshpp5lwkmL4unpgbth13atQCLcBGAsYHQ/s400/CS50s%252BWeb%252BProgramming%252Bwith%252BPython%252Band%252BJavaScript%252B-%252Bbest%252BDjango%252Bcourse%252Bby%252BedX%252Band%252BHarvard%252BUniversity.png" alt="best Python and Django course by edX and Harvard" width="400" height="224"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-python-and-django-full-stack-web-developer-bootcamp-udemy"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-and-django-full-stack-web-developer-bootcamp%2F"&gt;Python and Django Full Stack Web Developer Bootcamp&lt;/a&gt; [Udemy]
&lt;/h3&gt;

&lt;p&gt;In Udemy, many courses talk about the Django framework, but if you want to practice more to enhance your knowledge, consider looking at this excellent Django course by Jose Portilla. &lt;/p&gt;

&lt;p&gt;This course will build real-world projects like blogs and social media clones using the Django Framework.&lt;/p&gt;

&lt;p&gt;Here are the main things you will learn in this course:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Learn the Django web framework.&lt;/li&gt;
&lt;li&gt;  Learn web development.&lt;/li&gt;
&lt;li&gt;  Develop a couple of projects to master Django&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, this course will show you some of the &lt;a href="https://medium.com/javarevisited/5-free-html-and-css-courses-to-learn-front-end-web-development-online-8b04517c6ecb"&gt;HTML&lt;/a&gt;, &lt;a href="https://hackernoon.com/top-5-free-online-courses-to-learn-html-css-web-development-in-2020-ae8e7466dfa7"&gt;CSS&lt;/a&gt;, &lt;a href="https://medium.com/javarevisited/12-free-courses-to-learn-javascript-and-es6-for-beginners-and-experienced-developers-aa35874c9a32"&gt;JavaScript&lt;/a&gt;, and &lt;a href="https://www.java67.com/2018/04/top-5-free-jquery-courses-for-web-developers.html"&gt;jQuery&lt;/a&gt; and is aimed to be for beginners and intermediate level Python programmers. &lt;/p&gt;

&lt;p&gt;This course was created by Jose Portilla, one of the best Python instructors on Udemy and also the author of the Python 3 Bootcamp course, which is the most popular Python course on Udemy with almost 1 million students.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-and-django-full-stack-web-developer-bootcamp%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TpZW1rfu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-8Pj478FhMQA/XtZCcfSB5fI/AAAAAAAAfjQ/WQAIIwgQT_0jZEnXWmeDyyGrqmFyAHFaQCLcBGAsYHQ/s400/Python%252Band%252BDjango%252BFull%252BStack%252BWeb%252BDeveloper%252BBootcamp%252BUdemy%252Bcourse.jpg" alt="best Python and Django course on Udemy" width="400" height="225"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all about the &lt;strong&gt;best online courses to learn Django for Python web development&lt;/strong&gt; or anyone who wants to learn web development using Django and Python framework. &lt;/p&gt;

&lt;p&gt;You don't need to go through all these courses; you can choose where you better connect with the instructor. I strongly suggest you watch previews of these courses, and if you watch previews without skipping, it's a good sign that you are connecting with the class and instructor.&lt;/p&gt;

&lt;p&gt;Other &lt;strong&gt;Python Programming Articles&lt;/strong&gt; you may like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2020/05/top-5-courses-to-learn-python-in-depth.html"&gt;Top 5 Courses to learn Python in depth&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/05/10-reasons-to-learn-python-programming.html"&gt;10 Reasons to Learn Python in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/@javinpaul/8-projects-you-can-buil-to-learn-python-in-2020-251dd5350d56"&gt;8 Python Projects for Beginners and Intermediate Developers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/python-or-java-which-programming-language-beginners-should-learn-in-2020-de992b2650ec"&gt;Python vs. Java - Which is better to start with&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/08/top-5-python-books-for-data-science-and-machine-learning.html"&gt;5 Books to learn Python for Data Science&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/10-free-python-tutorials-and-courses-from-google-microsoft-and-coursera-for-beginners-96b9ad20b4e6"&gt;Free Python Tutorials from Google and Microsoft&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/02/10-best-coursera-courses--for-python.html"&gt;10 Best Python Specialization and Certificates from Coursera&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-courses-to-learn-python-for-web-development-in-2020-best-of-lot-efe11fb6d212"&gt;Top 5 Courses to learn Flask for Python web development&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/10/top-8-python-libraries-for-data-science-machine-learning.html"&gt;8 Python Libraries for Machine Learning&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2019/08/top-5-books-to-learn-python-for-beginners.html"&gt;Top 5 Books to learn Python in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/swlh/5-free-python-courses-for-beginners-to-learn-online-e1ca90687caf"&gt;15 Free courses to learn Python for Beginners&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://becominghuman.ai/9-data-science-and-machine-learning-courses-by-harvard-ibm-udemy-and-others-12a0c7c23ec1"&gt;9 Data Science courses from Harvard and IBM&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.sg/2018/01/10-unit-testing-and-integration-tools-for-java-programmers.html"&gt;10 Testing Libraries Every Java Developer Should Know&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/04/top-5-python-web-development-frameworks.html"&gt;5 Python Frameworks you can learn for Web development&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/better-programming/top-5-courses-to-learn-python-in-2018-best-of-lot-26644a99e7ec"&gt;10 Best Python Courses for Beginners in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/swlh/5-free-python-courses-for-beginners-to-learn-online-e1ca90687caf"&gt;15 Free Courses to learn Python for Junior Developers&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading this article so far. Please share these *best Python and Django online course*s with your friends and colleagues if you find them useful. If you have any questions or feedback, then please drop a note.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; - If you want to learn Python programming but can't afford these online training courses or are looking for a free resource to start with Python programming, I suggest you look at this **&lt;a href="http://bit.ly/2D5vvnV"&gt;Introduction To Python Programming [FREE]&lt;/a&gt; **course on Udemy. It's completely free and trusted by more than 490K students from all over the world.&lt;/p&gt;

</description>
      <category>python</category>
      <category>django</category>
      <category>webdev</category>
      <category>development</category>
    </item>
    <item>
      <title>Which programming language should you learn in 2022 to remain relevant and also increase your revenue.</title>
      <author>Ifeanyi Okeakwalam</author>
      <pubDate>Sat, 18 Dec 2021 10:19:22 +0000</pubDate>
      <link>https://dev.to/ifycoool/which-programming-language-should-you-learn-in-2022-to-remain-relevant-and-also-increase-your-revenue-2gh9</link>
      <guid>https://dev.to/ifycoool/which-programming-language-should-you-learn-in-2022-to-remain-relevant-and-also-increase-your-revenue-2gh9</guid>
      <description>&lt;p&gt;The advice I got was to learn Java, because during that period Java was reigning in my geographical location at least. I did my research and I felt why not Java. &lt;/p&gt;

&lt;p&gt;Often times when we make up our mind to become a software developer most of us think like this, but the simple truth is that things are more complicated than anyone thinking of the technology to start their software career with, just to be an instant hit in no time.&lt;/p&gt;

&lt;p&gt;Let's get the point straight, am not saying you shouldn't look out for a promising tech skill to acquire on the contrary am saying the tech space is hug and if you must be relevant in that hug tech space you need first choose which part to function in that hug tech space and then learn the most promising technology for part.&lt;/p&gt;

&lt;p&gt;In the Tech space you can decide to be a frontend dev, backend dev, machine learning expert, data analyst, etc... These different fields have different programming languages, libraries and frameworks people have learned to use for them, take for example Frontend engineers often use Javascript and maybe ReactJS or Vue. &lt;/p&gt;

&lt;p&gt;It's important to first know if you would love to be a Frontend or backend developer, before choosing a programming language to learn. When choosing a language to learn as a starter is best to choose the most promising, when I use the word promising I mean acquiring a tech skill that is in high demand today and will be tomorrow, yes that's possible. &lt;/p&gt;

&lt;p&gt;Every developer wants to remain relevant in the Tech space and the best way to achieve that today is to identify the language of today and of the FUTURE. Talking about the language of the future, first we need ask how far in the future are we talking?&lt;/p&gt;

&lt;p&gt;More than a decade out? Hard to say. More than two? Impossible. Looking at current trends, though:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JavaScript is taking over almost everything.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TypeScript is catching up as the best way to use JavaScript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python is nailing machine learning, but losing momentum on servers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Julia could come up from behind and displace Python in Machine learning.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Java is pretty well embedded in the enterprise space, but there are cracks around the edge of its dominance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go might survive due to strong Google backing, though I have a hard time recommending it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift is likely to stick around as the Apple platform language for the foreseeable future. But it doesn't seem likely to make the jump to anywhere else.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kotlin could displace Java. Scala has had its chance, but it appears to have failed in garnering market share. I frankly don't see that changing any time soon.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# is probably going to persist in some enterprise companies, and as the language of Unity3d and Xamarin.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On the high performance end, it's a hard call. C++ has ruled this roost for two decades, and has received some recent updates that look great. But Rust seems to have a strictly better type system, which provides better compile-time code verification with equivalent or better performance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C is the low level language of the past. Like COBOL, there's a crap ton of code written for it, so it won't just vanish. But except in narrow cases I don't see C as being a good language for new development. Rust is strictly better for anything that you might want to start in C today. I think this will be increasingly true. So in that respect, Rust may be more likely to be a major language in the future.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This are noticeable trends anyways, so dig in choose your area of relevance (e.g Frontend), research more about a technology to learn maybe Python or JavaScript, start learning and start building things. &lt;/p&gt;

&lt;p&gt;The first language will be hardest, because you're learning how to program for the first time. After that, the second language will be easier, and so forth. &lt;/p&gt;

&lt;p&gt;If you gained something from this article, take a minute of your time, hit the share button and share this piece with your network on social media, also give me a follow on all social media platform via &lt;a class="mentioned-user" href="https://dev.to/ifycoool"&gt;@ifycoool&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Visit my official blog via &lt;a href="https://www.blog.ifeanyiokeakwam.com"&gt;https://www.blog.ifeanyiokeakwam.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>kotlin</category>
      <category>java</category>
    </item>
    <item>
      <title>The easiest way to unsubscribe from Observables in Angular</title>
      <author>Volodymyr Yepishev</author>
      <pubDate>Sat, 18 Dec 2021 09:19:36 +0000</pubDate>
      <link>https://dev.to/bwca/the-easiest-way-to-unsubscribe-from-observables-in-angular-4cg4</link>
      <guid>https://dev.to/bwca/the-easiest-way-to-unsubscribe-from-observables-in-angular-4cg4</guid>
      <description>&lt;p&gt;...is of course using the &lt;code&gt;async&lt;/code&gt; pipe, but the article is not about it. It's about situations where you need to subscribe inside component's &lt;code&gt;ts&lt;/code&gt; file and how to deal with it. This article is about dealing with repetitive logic of cancelling subscription in different components.&lt;/p&gt;

&lt;p&gt;(The actual repo used for this article can be found &lt;a href="https://github.com/Bwca/easy-ubsubscribe-from-observable-in-angular-with-a-service"&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Managing subscriptions in Angular can get quite repetitive and even imperative if you are not using the &lt;code&gt;async&lt;/code&gt; pipe. The rule of thumb is if you subscribe, you should always unsubscribe. Indeed, there are finite observables which autocomplete, but those are separate cases.&lt;/p&gt;

&lt;p&gt;In this article we will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create an Angular application with memory leaks caused by the absence of unsubscribing from an &lt;code&gt;Observable&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;fix the leaks with a custom unsubscribe service.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The only things we are going to use are &lt;code&gt;rxjs&lt;/code&gt; and Angular features.&lt;/p&gt;

&lt;p&gt;Now let's create our applications and add some components. I'll be using &lt;code&gt;npx&lt;/code&gt; since I don't install any packages globally.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx @angular/cli new ng-super-easy-unsubscribe &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;ng-super-easy-unsubscribe
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To illustrate leaks we need two more things: a service to emit infinite number of values via an &lt;code&gt;Observable&lt;/code&gt; and a component that will subscribe to it, perform some memory consuming operation in subscribe function and never unsubscribe.&lt;/p&gt;

&lt;p&gt;Then we will proceed switching it on and off to cause memory leaks and see how it goes :)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx @angular/cli generate component careless
npx @angular/cli generate service services/interval/interval
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As I have already stated the interval service is just for endless emissions of observables, so we'll put only &lt;code&gt;interval&lt;/code&gt; there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/app/services/interval/interval.service.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;providedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;IntervalService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;getInterval&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The application component is going to be busy with nothing else than toggling the &lt;code&gt;CarelessComponent&lt;/code&gt; on and off, with mere 4 lines of template we can put it directly in the &lt;code&gt;ts&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/app/app.component.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;section&amp;gt;
      &amp;lt;button (click)="toggleChild()"&amp;gt;toggle child&amp;lt;/button&amp;gt;
    &amp;lt;/section&amp;gt;
    &amp;lt;app-careless *ngIf="isChildVisible"&amp;gt;&amp;lt;/app-careless&amp;gt;
  `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;styleUrls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;isChildVisible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;toggleChild&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isChildVisible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isChildVisible&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get a better view of memory leaks it is a good idea to just dump some random string arrays into a bigger array of trash on every &lt;code&gt;Observable&lt;/code&gt; emission.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/app/careless/careless.component.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;IntervalService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../services/interval/interval.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;UnsubscribeService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../services/unsubscribe/unsubscribe.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-careless&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;p&amp;gt;ಠ_ಠ&amp;lt;/p&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CarelessComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;garbage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[][]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;intervalService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IntervalService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;intervalService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInterval&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;garbage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;some trash&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Start the application, go to developer tools in the browser and check Total JS heap size, it is relatively small.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IoPP-Ti1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x745yynjuhlno6ofae8z.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IoPP-Ti1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x745yynjuhlno6ofae8z.jpg" alt='"No leaking yet"' width="468" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If in addition to piling garbage in component property you log it to console, you can crash the page pretty quickly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pAosdvyu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7e93f2kq3u00ppkpj8j0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pAosdvyu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7e93f2kq3u00ppkpj8j0.jpg" alt='"Tab crashed"' width="880" height="368"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because the allocated memory is never released, it will keep adding more junk every time &lt;code&gt;CarelessComponent&lt;/code&gt; instance comes to life.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v6SvwF-1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vrtqqbxd3pjuufkqtykg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v6SvwF-1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vrtqqbxd3pjuufkqtykg.jpg" alt='"No released"' width="861" height="135"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So what happened? We've leaked and crashed because each toggle on cause new subscription and each toggle off did not cause any subscription cancelling to fire.&lt;/p&gt;

&lt;p&gt;In order to avoid it we should unsubscribe when the component gets destroyed. We could place that logic in our component, or create a base component with that logic and extend it or... we can actually create a service that provides a custom &lt;code&gt;rxjs&lt;/code&gt; operator that unsubscribes once the component is destroyed.&lt;/p&gt;

&lt;p&gt;How will a service know the component is being destroyed? Normally services are provided as singletons on root level, but if we remove the &lt;code&gt;providedIn&lt;/code&gt; property in the &lt;code&gt;@Injectable&lt;/code&gt; decorator, we can provide the service on component level, which allows us to access &lt;code&gt;OnDestroy&lt;/code&gt; hook in the service. And this is how we will know component is being destroyed, because the service will be destroyed too.&lt;/p&gt;

&lt;p&gt;Let's do it!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx @angular/cli generate service services/unsubscribe/unsubscribe
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the service we place the good old subscription cancelling logic with &lt;code&gt;Subject&lt;/code&gt; and &lt;code&gt;takeUntil&lt;/code&gt; operator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;takeUntil&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UnsubscriberService&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;destroy$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;untilDestroyed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;source$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;takeUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy$&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;ngOnDestroy&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that an arrow function is used for the &lt;code&gt;untilDestroyed&lt;/code&gt; method, as when used as &lt;code&gt;rxjs&lt;/code&gt; operator we will lose the context unless we use arrow function.&lt;/p&gt;

&lt;p&gt;Alternatively instead of using arrow function in a property we could also have used a getter to return an arrow function, which would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;untilDestroyed&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="na"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;source$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;takeUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy$&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'll go with the getter variant because I do not enjoy arrow function in class properties.&lt;/p&gt;

&lt;p&gt;Now on to fixing our careless component, we add &lt;code&gt;UnsubscribeService&lt;/code&gt; to its &lt;code&gt;providers&lt;/code&gt; array, inject it into the constructor and apply its operator in our subscription pipe:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;IntervalService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../services/interval/interval.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;UnsubscribeService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../services/unsubscribe/unsubscribe.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-careless&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;p&amp;gt;ಠ_ಠ&amp;lt;/p&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;UnsubscribeService&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CarelessComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;intervalService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IntervalService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;unsubscribeService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UnsubscribeService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;intervalService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInterval&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribeService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;untilDestroyed&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;permutations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;findPermutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abcdefg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you go back to the application and try toggling the child component on and off you will notice that it doesn't leak anymore.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gp1Fmy6R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00lp2niw8gktmg6ltm06.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gp1Fmy6R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00lp2niw8gktmg6ltm06.jpg" alt='"No more leaks"' width="693" height="93"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No imperative cancelling subscription logic in the component, no &lt;code&gt;async&lt;/code&gt; pipes, no external packages needed.&lt;/p&gt;

&lt;p&gt;Easy peasy lemon squeezy :)&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>angular</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Yielding Bells 🔔  - generators in PHP</title>
      <author>Anders Björkland</author>
      <pubDate>Sat, 18 Dec 2021 08:51:30 +0000</pubDate>
      <link>https://dev.to/andersbjorkland/yielding-bells-generators-in-php-2521</link>
      <guid>https://dev.to/andersbjorkland/yielding-bells-generators-in-php-2521</guid>
      <description>&lt;p&gt;Today we want us some bells in our Christmas, so let's create them. PHP has a neat feature called generators. Generators are functions that can be used to create iterators, and they don't need a large overhead to create them. For performance sake, let's compare two code snippets.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Snippet 1&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; 

&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;produceBells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$bells&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;$num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$bells&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'🔔'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$bells&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;$hundredBells&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;produceBells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 8.3KB&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$hundredBells&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$bell&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$bell&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Snippet 2&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;generateBells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;$num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="s1"&gt;'🔔'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;$hundredBells&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;generateBells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//544 bytes&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$hundredBells&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$bell&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$bell&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both these snippets will produce this output:&lt;br&gt;&lt;br&gt;
🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔 🔔&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Is that a hundred bells? I sure hope so, I get lost when counting them!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The question is now, which is less memory intensive, and why is &lt;strong&gt;Snippet 2&lt;/strong&gt;?! I ran both snippets with profile-mode on Xdebug and found the following result:  &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Snippet&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Memory usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Array&lt;/td&gt;
&lt;td&gt;8280 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Generator&lt;/td&gt;
&lt;td&gt;544 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;As we can see, the generator is a lot more memory efficient than the array. The reason for this is that generators are lazy, and only generate the values when they are needed. This means that the memory usage is only as high as the amount of values that are actually needed. And as we loop through one item at a time to echo it out, that is as much memory as will be used. You could output a million of these things if you like, and the memory usage would not be that much higher. (In fact, it remained at 544 bytes when I ran it.)&lt;/p&gt;

&lt;p&gt;So what's the cost? Generators, while memory efficient, are not as time efficient. My machine is not stable enough (poor potato), to do a fair benchmarking. But at a thousand bells we got 9.2 ms for the array and 11.6 ms for the generator. So is it worth it for you to use generators? That question has not only to do with time versus memory cost. If you don't know how often you will need to access an array (or iterator) value, you may need to use a generator anyway.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-you"&gt;
  &lt;/a&gt;
  What about you?
&lt;/h2&gt;

&lt;p&gt;Have you ever tried a generator before? What use cases do you have or think you would have for generators? Comment below and let us know what you think ✍&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Generators Overview: &lt;a href="https://www.php.net/manual/en/language.generators.overview.php"&gt;https://www.php.net/manual/en/language.generators.overview.php&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>php</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Code an API Call with React!</title>
      <author>Ustariz Enzo</author>
      <pubDate>Sat, 18 Dec 2021 08:16:11 +0000</pubDate>
      <link>https://dev.to/ziratsu/how-to-code-an-api-call-with-react-59kf</link>
      <guid>https://dev.to/ziratsu/how-to-code-an-api-call-with-react-59kf</guid>
      <description>&lt;p&gt;Hey &lt;strong&gt;fellow creators&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's code an &lt;em&gt;API Call&lt;/em&gt; with React. &lt;br&gt;
This is pretty common and you need to master it if you want to use React.&lt;/p&gt;

&lt;p&gt;If you prefer to watch the video &lt;strong&gt;version&lt;/strong&gt;, it's right here :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/bBjsFmagQXc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-hooks-you-need"&gt;
  &lt;/a&gt;
  1. The hooks you need!
&lt;/h2&gt;

&lt;p&gt;You need to import two hooks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;React API Call&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now create your state which will start at false since at first you don't have any data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;imgURL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setImgURL&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;React API Call&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-fetch-an-api"&gt;
  &lt;/a&gt;
  2. Fetch an API
&lt;/h2&gt;

&lt;p&gt;Find a random image API and do a fetch when the component is mounted, using the hook &lt;em&gt;useEffect()&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Let's start by simply logging the response of the fetch to check if it's working:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://source.unsplash.com/random/600x800&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will be triggered after the first render of the component!&lt;/p&gt;

&lt;p&gt;Since the response is not JSON, you don't need to parse it, you can just extract the URL from it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://source.unsplash.com/random/600x800&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setImgURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can add the image to your JSX:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;React API Call&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;imgURL&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;imgURL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You're using the short circuit operator, meaning that it'll only render the image if &lt;em&gt;imgUrl&lt;/em&gt; is true.&lt;/p&gt;

&lt;p&gt;If you refresh the page, you'll see that you have a different image each time!&lt;/p&gt;

&lt;p&gt;This is how you can do a pretty &lt;em&gt;basic API call with React&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Come and take a look at my &lt;strong&gt;Youtube channel&lt;/strong&gt;: &lt;a href="https://www.youtube.com/c/Learntocreate/videos"&gt;https://www.youtube.com/c/Learntocreate/videos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See you soon!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Enzo. &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>CSS Practices to avoid as a developer Pt.2</title>
      <author>Mursal Furqan</author>
      <pubDate>Sat, 18 Dec 2021 08:14:46 +0000</pubDate>
      <link>https://dev.to/mursalfk/css-practices-to-avoid-as-a-developer-pt2-94</link>
      <guid>https://dev.to/mursalfk/css-practices-to-avoid-as-a-developer-pt2-94</guid>
      <description>&lt;p&gt;So after an awesome response on my previous article titled &lt;a href="https://dev.to/mursalfk/css-practices-to-avoid-as-a-developer-3hj2"&gt;CSS Practices to avoid as a developer&lt;/a&gt;, I am back with part 2 of the same, with some more awesome topics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Lny6Rw04nsOOc/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Lny6Rw04nsOOc/giphy.gif" alt="Img" width="480" height="360"&gt;&lt;/a&gt;   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-transform-translate50-50-to-center"&gt;
  &lt;/a&gt;
  Use Transform: Translate(-50%, 50%) to center
&lt;/h2&gt;

&lt;p&gt;In particular, one solution was to use a combination of Absolute Positioning and the Transform property. This technique caused blurry text issues in Chromium-Based Browsers. We can use margin: auto, inside a flex container and the browser will center the element. Just two simple properties, and that's it.&lt;br&gt;
For example: Instead of using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we can use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#important-is-unnecessarily-used-in-most-places"&gt;
  &lt;/a&gt;
  !Important is unnecessarily used in most places
&lt;/h2&gt;

&lt;p&gt;In CSS, styles are cascading, or overlapping from the top of one to another. But, when you bring down !Important in between, it will dominate the others and as the name suggests, it will establish that it is important over the other. JUST DON'T USE IT UNNECESSARILY.&lt;br&gt;
For example: Instead of using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this method is preferred&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;NOTE: In most of the cases, you need to realign some new classes, and !important can be used when the realign is not possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#long-selectors-"&gt;
  &lt;/a&gt;
  Long Selectors #..#..... {}
&lt;/h2&gt;

&lt;p&gt;Not only is this selector using Ids, it's also LONG. Just like Ids, if you are using long selectors (that are greater than three levels deep) you're increasing specificity. As a result, you'll be compounding the problem over time as regular maintenance and updates occur.&lt;br&gt;
So instead of using this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#header&lt;/span&gt; &lt;span class="nf"&gt;#title&lt;/span&gt; &lt;span class="nc"&gt;.left-side&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="nc"&gt;.logo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should try using this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.logo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#inline-styles-in-css"&gt;
  &lt;/a&gt;
  Inline styles in CSS
&lt;/h2&gt;

&lt;p&gt;Although CSS offers us to maintain styles inline too, being a developer, we should skip the practice of using them.&lt;br&gt;
Hence, instead of using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"outline: none;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     Login
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can start using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"login_btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     Login
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.login_btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, so that was all for this article. Do share below in the comments what more practices in CSS you consider as BAD being a developer. 😉😉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/vN3fMMSAmVwoo/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/vN3fMMSAmVwoo/giphy.gif" alt="IMG" width="500" height="281"&gt;&lt;/a&gt;   &lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>10 HTML anchor tag usages you must know(in short videos)</title>
      <author>Tapas Adhikary</author>
      <pubDate>Sat, 18 Dec 2021 08:03:41 +0000</pubDate>
      <link>https://dev.to/atapas/10-html-anchor-tag-usages-you-must-knowin-short-videos-4bom</link>
      <guid>https://dev.to/atapas/10-html-anchor-tag-usages-you-must-knowin-short-videos-4bom</guid>
      <description>&lt;p&gt;As a webdev, you must have used the anchor(a) tag ample times. The regular usages are, linking to a webpage, opening the page in a new tab, or linking to a page section.&lt;/p&gt;

&lt;p&gt;However, there are other usages, you should know as well. I have created a short video series to cover all the usages. The series also includes a video to style anchor tag. I hope you find them helpful and enjoy watching them.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you like the content, please &lt;a href="https://www.youtube.com/tapasadhikary?sub_confirmation=1"&gt;SUBSCRIBE&lt;/a&gt; to the channel for the future content&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/neWThioR5hw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-how-to-link-to-a-webpage"&gt;
  &lt;/a&gt;
  1. How to link to a webpage?
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/14FMaWBraHk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-how-to-link-to-a-page-section"&gt;
  &lt;/a&gt;
  2. How to link to a page section?
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/b13_b9-dU34"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-how-to-link-to-an-email-app"&gt;
  &lt;/a&gt;
  3. How to link to an email app?
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/y5-H80Fgt00"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-how-to-link-to-a-phone-app"&gt;
  &lt;/a&gt;
  4. How to link to a phone app?
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HsNRjcwmYrI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-how-to-link-to-a-javascript-function"&gt;
  &lt;/a&gt;
  5. How to link to a JavaScript function?
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/vz2ri3TpHcE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-how-to-download-a-file"&gt;
  &lt;/a&gt;
  6. How to download a file?
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Fbt-MCbzRKs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-how-to-open-the-page-in-the-new-tabwindow"&gt;
  &lt;/a&gt;
  7. How to open the page in the new tab/window?
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MabUqWfBt6M"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-what-about-the-new-tab-opening-and-security-concerns"&gt;
  &lt;/a&gt;
  8. What about the new tab opening and Security concerns?
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FsWgQt0_OeY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-how-to-link-to-parent-frames"&gt;
  &lt;/a&gt;
  9. How to link to parent frames?
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/eDbTlVFpreo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-how-to-use-the-ping-attribute-for-tracking"&gt;
  &lt;/a&gt;
  10. How to use the ping attribute for tracking?
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wZ9dzzlbIK8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-how-to-style-an-anchor-tag"&gt;
  &lt;/a&gt;
  Bonus: How to style an anchor tag?
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/iv1grAVAG1w?start=136"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;TADA!!! We are done. I hope you enjoyed the videos, and it was worth your time. I have written an in-depth article on the same topic and published it on freeCodeCamp. You may want to take a look,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.freecodecamp.org/news/the-html-a-tag-anchor-tag-example-code/"&gt;The HTML &lt;/a&gt;&lt;a&gt; Tag – Anchor Tag Example Code&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Let's connect. I share my learnings on JavaScript, Web Development, and Blogging on these platforms as well,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://twitter.com/tapasadhikary"&gt;Follow me on Twitter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.youtube.com/tapasadhikary?sub_confirmation=1"&gt;Subscribe to my YouTube Channel&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/atapas"&gt;Side projects on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>html</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Chrome extension for binge watchers</title>
      <author>Ali Abbas</author>
      <pubDate>Sat, 18 Dec 2021 08:03:32 +0000</pubDate>
      <link>https://dev.to/realabbas/chrome-extension-for-binge-watchers-1k2b</link>
      <guid>https://dev.to/realabbas/chrome-extension-for-binge-watchers-1k2b</guid>
      <description>&lt;p&gt;Just a week of engineering and developed this very useful chrome extension for all the binge-watchers. 🚀  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vmx5s4x8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://devlabworks.s3.ap-south-1.amazonaws.com/ezgif.com-gif-maker.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vmx5s4x8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://devlabworks.s3.ap-south-1.amazonaws.com/ezgif.com-gif-maker.gif" alt="Chrome Extension Video progress indicator" width="600" height="341"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;💻 This extension will display a numeric percentage on the top right side of the player and will show the progress of the video completed.&lt;/p&gt;

&lt;p&gt;Either Binge-watching or just exploring youtube videos, always be informed of the video progress in the form of a percentage. Being an engineer, I always have an eye for User Experience in any product that I use.&lt;/p&gt;

&lt;p&gt;So while watching videos on major OTT platforms, after switching to full screen, I had to hover over the screen again and again to check the remaining time and the same scenario occurred during college days while preparing for exams, long lectures on youtube watching at 2X speed and that too one day before the exam, it was hard for me to cope-up with those lectures and waiting when it will end.&lt;/p&gt;

&lt;p&gt;So in order to ease my life, I developed this extension. After successfully testing it on youtube, extended the support for Netflix, Amazon Prime Video, Disney HotStar, and many other platforms.&lt;/p&gt;

&lt;p&gt;I’ve added it on google chrome store&lt;/p&gt;

&lt;p&gt;You can try and do let me know if there is any room for improvement.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/3yEUUis"&gt;Chrome Store Link&lt;/a&gt;&lt;br&gt;
&lt;a href="https://bit.ly/3Eeh6l2"&gt;Website Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have some questions? Would love to connect on &lt;a href="https://www.linkedin.com/in/ali-abbas-software-developer/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How we upload File with some data to nodeJS using Simple Form </title>
      <author>Deepak</author>
      <pubDate>Sat, 18 Dec 2021 07:50:27 +0000</pubDate>
      <link>https://dev.to/deepakjaiswal/how-we-upload-file-with-some-data-to-nodejs-using-simple-form-1he2</link>
      <guid>https://dev.to/deepakjaiswal/how-we-upload-file-with-some-data-to-nodejs-using-simple-form-1he2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h2&gt;

&lt;p&gt;first you have to install some libraray to your to your project&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;npm i express multer mongoose&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#indexjs"&gt;
  &lt;/a&gt;
  index.js
&lt;/h2&gt;

&lt;p&gt;app.use(express.static(__dirname('/public'))&lt;br&gt;
//set folder as static folder&lt;br&gt;
app.use(express.urlencoded({extended:false}))&lt;br&gt;
//set req.body of data are accessible from index.html&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;form action="/api/post" method="post" enctype="multipart/form-data" &amp;gt;&lt;br&gt;
&amp;lt;input type="text" name="name"/&amp;gt;&lt;br&gt;
&amp;lt;input type="email" name="email"/&amp;gt;&lt;br&gt;
&amp;lt;input type="file" name="file" id="file" /&amp;gt;&lt;br&gt;
&amp;lt;nput type="submit" /&amp;gt;&lt;br&gt;
&amp;lt;/form&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#indexjs"&gt;
  &lt;/a&gt;
  index.js
&lt;/h2&gt;

&lt;p&gt;`const upload = multer({ dest: 'uploads/' })&lt;/p&gt;

&lt;p&gt;const app = express()&lt;br&gt;
//this code for single file upload&lt;br&gt;
app.post('/api/post', upload.single('file'), function (req, res, next) {&lt;br&gt;
  const {name,email}=req.body&lt;br&gt;
  // req.file is the &lt;code&gt;file&lt;/code&gt; file&lt;br&gt;
     res.send({name,email,filename:req.file.filename})&lt;br&gt;
  // req.body will hold the text fields, if there were any&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>database</category>
    </item>
  </channel>
</rss>
