<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Building the Portfolio: WebOS</title>
      <author>Raghav Dhingra</author>
      <pubDate>Fri, 18 Jun 2021 13:29:15 +0000</pubDate>
      <link>https://dev.to/raghavdhingra/building-the-portfolio-webos-1d51</link>
      <guid>https://dev.to/raghavdhingra/building-the-portfolio-webos-1d51</guid>
      <description>&lt;p&gt;The portfolio is one of the most crucial tasks for the developers to create. It not only represents the &lt;em&gt;brief-up&lt;/em&gt; of the dev, rather exhibits the &lt;em&gt;potential&lt;/em&gt; that they have.&lt;br&gt;
Not confined to presenting the projects, and the experience, but it's an art and emotion to showcase the skills and expertise. It might take years of experience to develop an engaging and attractive portfolio.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-i-came-up-with-the-idea"&gt;
  &lt;/a&gt;
  How I came up with the idea
&lt;/h2&gt;

&lt;p&gt;While wandering around the internet and stuff, I explored many interesting ideas and inspirations to create a portfolio. But perceiving a unique idea requires time and creativity. In the era of software, it's not easy to get a unique design to follow up.&lt;/p&gt;

&lt;p&gt;I am fond of listening to EDM. So back in 2019, I was listening to Alan Walker's song "Play" and at the end of the video, there was a link given for their website.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iuGXWqVz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gxzo3bhwjek5vba7wfgz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iuGXWqVz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gxzo3bhwjek5vba7wfgz.png" alt="P74y youtube video"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was totally amazed after seeing the website. It was an Operating system-based portal, well designed. You can head up to &lt;a href="https://p74y.com"&gt;p74y.com&lt;/a&gt; to view.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sIMEs487--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h8b13bakbbr0xn6fp8jk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sIMEs487--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h8b13bakbbr0xn6fp8jk.png" alt="P74y website"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#initial-inspiration"&gt;
  &lt;/a&gt;
  Initial Inspiration
&lt;/h3&gt;

&lt;p&gt;Hence, got an inspiration to design my portfolio in an appearance of an Operating System.&lt;br&gt;
I have started working on the base design, how it will look. The first theme that I have planned out was a Window-based Portfolio, that will have some minor functionalities of accessing different instances of the desktop in the explorer.&lt;br&gt;
It includes the portfolio, projects, and a setting explorer from where customization can be done. But it feels more static and less engaging.&lt;br&gt;
Tech Stack: Django, CSS, Js, PostgreSQL&lt;br&gt;
Time Duration: 1 month&lt;br&gt;
Deployed on &lt;strong&gt;Heroku&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can have a look at the old portfolio design at &lt;a href="https://archive.raghavdhingra.com"&gt;archive.raghavdhingra.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CWM8aZsp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1zs7t975yj5trvj06dx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CWM8aZsp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1zs7t975yj5trvj06dx.png" alt="Archived Portfolio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#restructuring-the-portfolio"&gt;
  &lt;/a&gt;
  Restructuring the Portfolio
&lt;/h3&gt;

&lt;p&gt;After designing and releasing, I got engaged with some internships and other projects. But again it stuck on the mind, about the unattractive and constant portfolio.&lt;br&gt;
Over a span of one year, I had polished up my skills and experience in other languages and libraries.&lt;br&gt;
I have initiated the whole project from scratch and implemented the knowledge gained over that period, which really gave me a push to design it more extensible. I was also practicing data structures and algorithms, which again assisted me to make it more versatile.&lt;br&gt;
Hence, worked out with the design, and the tech stack. It took around 2 months &lt;code&gt;(* overall, over a span of few months)&lt;/code&gt; to finalize it. The end outline was to design the portfolio in the appearance of &lt;strong&gt;Linux&lt;/strong&gt;.&lt;br&gt;
Tech Stack: React/Redux, Django, PostgreSQL, CSS3&lt;br&gt;
Duration: 2 months **&lt;br&gt;
Deployed on &lt;strong&gt;Google Cloud Platform&lt;/strong&gt;, and &lt;strong&gt;Netlify&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can view the latest portfolio at &lt;a href="https://raghavdhingra.com"&gt;raghavdhingra.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LR8yHBX7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u17r9dn2ehb9zj4nw3nc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LR8yHBX7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u17r9dn2ehb9zj4nw3nc.png" alt="Screenshot 2021-06-18 at 2.45.49 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-ideation"&gt;
  &lt;/a&gt;
  Features ideation
&lt;/h3&gt;

&lt;p&gt;It was a crucial moment to define the features to embrace the portfolio. There was a lot of stuff coming up to my mind. At the same time, consulted some of my colleagues and friends for the ideation phase. Eventually, made a list of all the features to be implemented.&lt;/p&gt;

&lt;p&gt;The portfolio encompasses some of the interesting features,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Integrated File System&lt;/strong&gt;: Creation, updation, and deletion of files and folders within the portfolio.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Root terminal&lt;/strong&gt;: Terminal for accessing the features of the portfolio through the root user.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Settings tab&lt;/strong&gt;: Customizing the portfolio according the users, in terms of background theme, font, clicks, etc.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Browser&lt;/strong&gt;: For browsing different stuff within the portfolio.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Camera&lt;/strong&gt;: For clicking out images&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Text Editor&lt;/strong&gt;: Editing and creating the text files for future use.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Explorers&lt;/strong&gt;: For glancing the portfolio, and other stuff present on the website.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And &lt;em&gt;much more&lt;/em&gt;...&lt;br&gt;
Would definitely love to explore it.&lt;/p&gt;

&lt;p&gt;All the stuff is stored within the local storage, hence your data is being preserved after the portfolio is being refreshed.&lt;br&gt;
P.S. I am not collecting any data, you can check out the network tab for any request made.😂&lt;/p&gt;

&lt;p&gt;The most interesting thing while developing the whole portfolio is that no external library is used. All the features, including, the file system, terminal, are created using vanilla js (Pure Js)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1n_G-xUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjv4v8uyqvj79eckxzw7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1n_G-xUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjv4v8uyqvj79eckxzw7.png" alt="Screenshot 2021-06-18 at 6.25.34 PM"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8AmRZRAE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iybvytfswus9t5jlnexv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8AmRZRAE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iybvytfswus9t5jlnexv.png" alt="Screenshot 2021-06-18 at 6.26.27 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The project is Open Sourced at:&lt;/p&gt;

&lt;p&gt;WebOS -&lt;br&gt;
Frontent: &lt;a href="https://github.com/raghavdhingra/Web-OS"&gt;https://github.com/raghavdhingra/Web-OS&lt;/a&gt;&lt;br&gt;
Backend: &lt;a href="https://github.com/raghavdhingra/OS_2_Server"&gt;https://github.com/raghavdhingra/OS_2_Server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Archived Website - &lt;br&gt;
&lt;a href="https://github.com/raghavdhingra/Portfolio.OS"&gt;https://github.com/raghavdhingra/Portfolio.OS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do follow up on GitHub: &lt;a href="https://github.com/raghavdhingra"&gt;https://github.com/raghavdhingra&lt;/a&gt;&lt;br&gt;
Stay Tuned for more content!&lt;/p&gt;

</description>
      <category>portfolio</category>
      <category>react</category>
      <category>redux</category>
      <category>webdev</category>
    </item>
    <item>
      <title>JavaScript Interview Question #48: Dog-sized Cat</title>
      <author>Coderslang: Become a Software Engineer</author>
      <pubDate>Fri, 18 Jun 2021 13:06:31 +0000</pubDate>
      <link>https://dev.to/coderslang/javascript-interview-question-48-dog-sized-cat-7hd</link>
      <guid>https://dev.to/coderslang/javascript-interview-question-48-dog-sized-cat-7hd</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dtl1jx_Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-48.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dtl1jx_Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-48.png" alt="javascript interview question #48"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How many errors are in this code snippet? What’s the output?&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;In JavaScript there are two ways to get access to the object properties.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;using the dot
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;big&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Rex&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 2&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// big&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;using square brackets
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;big&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// Tom&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;age&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;  &lt;span class="c1"&gt;// 5&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;big&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;  &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice, that we’ve used field names as plain strings inside of the square brackets.&lt;/p&gt;

&lt;p&gt;If we go to the original question, then the statement&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Is the same as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;big&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which is equivalent to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;big&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In all three cases, we get access to the field &lt;code&gt;big&lt;/code&gt; of the object &lt;code&gt;cat&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;ANSWER&lt;/strong&gt;: There are no errors in the code snippet. The value &lt;code&gt;false&lt;/code&gt; appears in the console when the code is executed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://js.coderslang.com"&gt;Learn Full-Stack JavaScript&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>.NET 6 Preview 2 (Release notes + New features)</title>
      <author>Dotnetsafer</author>
      <pubDate>Fri, 18 Jun 2021 13:05:01 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/net-6-preview-2-release-notes-new-features-176h</link>
      <guid>https://dev.to/dotnetsafer/net-6-preview-2-release-notes-new-features-176h</guid>
      <description>&lt;h2&gt;
  &lt;a href="#net-6-preview-2-announcement"&gt;
  &lt;/a&gt;
  .NET 6 Preview 2 Announcement 📰
&lt;/h2&gt;

&lt;p&gt;On &lt;strong&gt;March 11&lt;/strong&gt; of this year &lt;em&gt;.NET 6 Preview 2&lt;/em&gt; was &lt;strong&gt;officially announced&lt;/strong&gt;. This new version includes runtime performance improvements in initial versions of &lt;em&gt;.NET MAUI,&lt;/em&gt; new &lt;em&gt;APIs,&lt;/em&gt; compilers for &lt;em&gt;Apple Silicon&lt;/em&gt; and more.&lt;br&gt;&lt;br&gt;
&lt;em&gt;Microsoft&lt;/em&gt; plans to release monthly previews through October. Releasing in &lt;strong&gt;November&lt;/strong&gt; the &lt;strong&gt;final version&lt;/strong&gt; of &lt;em&gt;.NET 6&lt;/em&gt;, with all the new features, such as enhancements for all .NET applications, including &lt;strong&gt;desktop, mobile, server,&lt;/strong&gt;&lt;strong&gt;cloud&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;IoT.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  Support 💻
&lt;/h2&gt;

&lt;p&gt;This new version of .NET 6 can be downloaded &lt;strong&gt;right now&lt;/strong&gt; for &lt;em&gt;Windows, Linux and MacOS.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As we have discussed before, .NET 6 will be officially released in November 2021 and will be &lt;strong&gt;supported&lt;/strong&gt; for &lt;strong&gt;3 years&lt;/strong&gt;. Microsoft promises that .NET 6 will be a big change from .NET 5.&lt;/p&gt;

&lt;p&gt;The additions that Microsoft promises to bring are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Android&lt;/li&gt;
&lt;li&gt;iOS&lt;/li&gt;
&lt;li&gt;Mac and Mac Catalyst for x64 and M1 chips&lt;/li&gt;
&lt;li&gt; Windows Arm64&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance 🚀
&lt;/h2&gt;

&lt;p&gt;Microsoft claims that .NET 6 performance will be &lt;strong&gt;much higher&lt;/strong&gt; than .NET 5. That is very likely since we have seen how in the jumps of its previous versions the &lt;strong&gt;performance&lt;/strong&gt; has been &lt;strong&gt;increased&lt;/strong&gt; at the same time that the &lt;strong&gt;memory consumption&lt;/strong&gt; has been &lt;strong&gt;reduced&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;They also promise to &lt;strong&gt;increase the performance&lt;/strong&gt; of tools and services to ensure that .NET developers are as productive as possible. Below we can see some of the first performance tests. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eM8ahL5a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1200/1%2Aqsqw54DM6sReMqMnbv0ygw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eM8ahL5a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1200/1%2Aqsqw54DM6sReMqMnbv0ygw.png" alt="net"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#net-has-a-lot-of-experience-developing-client-applications"&gt;
  &lt;/a&gt;
  .NET has a lot of experience developing client applications. 👨‍💻
&lt;/h2&gt;

&lt;p&gt;One of the most important parts of what comes to be .NET 6 is mobile development, which is now &lt;strong&gt;offered separately&lt;/strong&gt; from Xamarin. Over time, &lt;em&gt;Xamarin&lt;/em&gt; has moved closer to the mainstream of .NET. At this time, with the development of Android, iOS and MacOs it will be integrated into the .NET SDK experience and the .&lt;em&gt;NET libraries&lt;/em&gt; will be used.&lt;/p&gt;

&lt;p&gt;Microsoft tells us that over the years they have been working to incorporate &lt;em&gt;Mono&lt;/em&gt; into &lt;em&gt;.NET&lt;/em&gt;, allowing developers to take full advantage of both runtimes without having to worry about compatibility or working with different .NET versions. Microsoft on .NET 5 moved &lt;strong&gt;Blazor WebAssembly&lt;/strong&gt; and is currently using that same model for Xamarin.&lt;/p&gt;

&lt;p&gt;Since all .NET applications will now run in the same libraries, Microsoft wants to &lt;strong&gt;increase&lt;/strong&gt; the amount of code that is shared across desktop and mobile platforms. To do this they introduce us to &lt;strong&gt;Xamarin.Forms&lt;/strong&gt;, Xamarin’s cross-platform user interface framework, which is evolving into the .NET cross-platform application user interface. This will allow you to easily write applications for Windows, MacOS, iOS and Android with the same code base. &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#net-maui%C2%A0"&gt;
  &lt;/a&gt;
  .NET MAUI 🔝
&lt;/h2&gt;

&lt;p&gt;They also tell us that .NET MAUI will be added as an &lt;strong&gt;enhancement&lt;/strong&gt; to .NET 6.&lt;br&gt;&lt;br&gt;
.NET MAUI is not just for client application developers. Thanks to all the .NET 6 enhancements, existing Blazor applications will run natively on MacOS and Windows via .NET MAUI.&lt;/p&gt;

&lt;p&gt;Another major feature that Microsoft is focusing on is the &lt;strong&gt;packaging issue&lt;/strong&gt;, as there are so many developers with different target platforms, alongside different ways of developing applications. At the end of the day that’s a lot of packages to distribute. They especially focus on applications with the &lt;em&gt;Blazor desktop&lt;/em&gt;, as they want that experience to be as seamless as possible. &lt;/p&gt;

&lt;p&gt;Right now Microsoft is looking for strategies to &lt;strong&gt;improve the release and version control&lt;/strong&gt; both locally and in the cloud, as well as on the desktop, so that developers can &lt;strong&gt;package&lt;/strong&gt;, &lt;strong&gt;distribute&lt;/strong&gt;, &lt;strong&gt;launch&lt;/strong&gt; and &lt;strong&gt;update&lt;/strong&gt; their applications on different architectures and desktop platforms. &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#summary-of-whats-new-in%C2%A0net6%C2%A0"&gt;
  &lt;/a&gt;
  Summary of what’s new in .NET6 🏅
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  You will be able to &lt;strong&gt;create applications&lt;/strong&gt; for &lt;strong&gt;MacOS, iOS and Android with the .NET libraries.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  It will allow to &lt;strong&gt;create iOS, Android, Windows and MacOS applications&lt;/strong&gt; from the same code base &lt;strong&gt;using .NET MAUI.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  The ability to &lt;strong&gt;share more code and resources&lt;/strong&gt; between platforms (such as icons, images and more) will be implemented.&lt;/li&gt;
&lt;li&gt;  Ease of &lt;strong&gt;running Blazor web applications&lt;/strong&gt; natively on &lt;strong&gt;MacOS and Windows.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  You can &lt;strong&gt;easily package and distribute&lt;/strong&gt; applications for all the target frameworks you include.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Microsoft ends (for now) telling us the news in .NET 6 telling us that they have made a &lt;strong&gt;lot of progress&lt;/strong&gt; in development and that they will continue to &lt;strong&gt;add more features&lt;/strong&gt; in each Preview of .NET 6.&lt;/p&gt;

&lt;p&gt;We are going to dedicate the remainder of this article to dig a little deeper into the &lt;strong&gt;new features&lt;/strong&gt; of &lt;strong&gt;.NET 6 Preview 2.&lt;/strong&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#crossplatform%C2%A0net-application-user-interface"&gt;
  &lt;/a&gt;
  Cross-platform .NET application user interface ✅
&lt;/h2&gt;

&lt;p&gt;From Microsoft, they tell us they have &lt;strong&gt;added .NET MAUIs&lt;/strong&gt; and unique project developer experiences for &lt;strong&gt;Android iOS and Mac Catalyst&lt;/strong&gt;. They also tell us that they have updated their repository with samples of projects that can already be run with .NET 6 Preview 2.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#mac-catalyst%C2%A0"&gt;
  &lt;/a&gt;
  Mac Catalyst ✅
&lt;/h2&gt;

&lt;p&gt;The function of adding the following &lt;em&gt;TargetFramework&lt;/em&gt; configuration to any project will be implemented to be able to compile it on MacOS desktop, using &lt;strong&gt;Mac Catalyst&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TargetFrameworks&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;net6&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;net6&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ios&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;TargetFrameworks&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TargetFrameworks&lt;/span&gt; &lt;span class="n"&gt;Condition&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;" '$(OS)' != 'Windows_NT' "&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TargetFrameworks&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="n"&gt;net6&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;maccatalyst&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;TargetFrameworks&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Microsoft tells us that they have enabled a &lt;strong&gt;unique experience for .NET MAUI&lt;/strong&gt; applications. Now what you get is a very clean solution that can be &lt;strong&gt;run&lt;/strong&gt; on &lt;strong&gt;Android, iOS, and MacOS.&lt;/strong&gt; They also tell us that they will add &lt;strong&gt;Windows to .NET MAUI&lt;/strong&gt; in a future Preview.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#shared-application-icons-images-and-fonts%C2%A0"&gt;
  &lt;/a&gt;
  Shared application icons, images, and fonts ✅
&lt;/h2&gt;

&lt;p&gt;Icons, images, and fonts can be placed in one location in your code, and the &lt;em&gt;.NET MAUI&lt;/em&gt; will allow you to work natively on all platforms it targets. These will just track &lt;em&gt;SharedImage&lt;/em&gt; or &lt;em&gt;SharedFont&lt;/em&gt; in your &lt;em&gt;.csproj&lt;/em&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ItemGroup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SharedImage&lt;/span&gt; &lt;span class="n"&gt;Include&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"appicon.svg"&lt;/span&gt; &lt;span class="n"&gt;ForegroundFile&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"appiconfg.svg"&lt;/span&gt; &lt;span class="n"&gt;IsAppIcon&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SharedFont&lt;/span&gt; &lt;span class="n"&gt;Include&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Resources\Fonts\ionicons.ttf"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ItemGroup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both accept &lt;strong&gt;wildcards&lt;/strong&gt; to &lt;strong&gt;include all files&lt;/strong&gt; within one location.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ItemGroup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SharedImage&lt;/span&gt; &lt;span class="n"&gt;Include&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"appicon.svg"&lt;/span&gt; &lt;span class="n"&gt;ForegroundFile&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"appiconfg.svg"&lt;/span&gt; &lt;span class="n"&gt;IsAppIcon&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SharedFont&lt;/span&gt; &lt;span class="n"&gt;Include&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Resources\Fonts\ionicons.ttf"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ItemGroup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#launch-applications-with-host-builder-with-mauiapp%C2%A0"&gt;
  &lt;/a&gt;
  Launch applications with Host Builder with MauiApp ✅
&lt;/h2&gt;

&lt;p&gt;They currently have extensions for configuring fonts, services, and compatibility renderers for migrate Xamarin.Forms projects. IWindow &lt;strong&gt;was added&lt;/strong&gt; for multi-window support &lt;strong&gt;in a future release&lt;/strong&gt;. They also aim to integrate library authors and control providers with the .NET MAUI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Application&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MauiApp&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;IAppHostBuilder&lt;/span&gt; &lt;span class="nf"&gt;CreateBuilder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; 
        &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateBuilder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;RegisterCompatibilityRenderers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ConfigureServices&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddTransient&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MainPage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
                &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddTransient&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IWindow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MainWindow&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ConfigureFonts&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;hostingContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddFont&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ionicons.ttf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"IonIcons"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;IWindow&lt;/span&gt; &lt;span class="nf"&gt;CreateWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IActivationState&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Maui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Controls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Compatibility&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Forms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetService&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IWindow&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#control-drivers%C2%A0"&gt;
  &lt;/a&gt;
  Control drivers ✅
&lt;/h2&gt;

&lt;p&gt;Lastly, the first controls and properties have been introduced that implement a new controller approach. These include partial label and input, button, and slider and switch implementations. The sample application is &lt;em&gt;HelloMaui&lt;/em&gt;, it runs from a single project to &lt;strong&gt;MacOS, iOS and Android&lt;/strong&gt; displaying the current set of ported controls.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mac OS&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vfZsyhjM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1200/0%2AWgTV-glYVcdFEqtg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vfZsyhjM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1200/0%2AWgTV-glYVcdFEqtg.png" alt="mac"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iOS&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NSDIkvkc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1200/0%2AqAyNfa8_AInZbfwV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NSDIkvkc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1200/0%2AqAyNfa8_AInZbfwV.png" alt="ios"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Android&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XsEh-Y1c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1200/0%2A4PwayS8P5ioUpgqI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XsEh-Y1c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1200/0%2A4PwayS8P5ioUpgqI.png" alt="android"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>csharp</category>
      <category>programming</category>
    </item>
    <item>
      <title>Day 30/30 : Responsive Profile Cards Using HTML and CSS</title>
      <author>Somanath Goudar</author>
      <pubDate>Fri, 18 Jun 2021 12:04:05 +0000</pubDate>
      <link>https://dev.to/somanathgoudar/day-30-30-responsive-profile-cards-using-html-and-css-2lbb</link>
      <guid>https://dev.to/somanathgoudar/day-30-30-responsive-profile-cards-using-html-and-css-2lbb</guid>
      <description>&lt;p&gt;Welcome to Day 30 of this &lt;a href="https://dev.to/somanathgoudar/30dayschallenge-30-days-extreme-html-css-challenge-50k1"&gt;Challenge&lt;/a&gt;. This is what I created today. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;➜ Here is the Demo :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7tYyM-D9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://1.bp.blogspot.com/-6wq3UTzi1DM/YKon_vd7fmI/AAAAAAAAAJU/so2GsR0P1F48jQRzZewTOZcvcSqhxMFhgCLcBGAsYHQ/s16000/p30.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7tYyM-D9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://1.bp.blogspot.com/-6wq3UTzi1DM/YKon_vd7fmI/AAAAAAAAAJU/so2GsR0P1F48jQRzZewTOZcvcSqhxMFhgCLcBGAsYHQ/s16000/p30.gif" alt="Responsive Profile Cards Using HTML and CSS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;➜ Video Tutorial :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/0gyDGZmvTSA"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;strong&gt;➜ Source Code :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.futurecodersweb.com/2021/06/responsive-profile-cards-using-html-and.html"&gt;https://www.futurecodersweb.com/2021/06/responsive-profile-cards-using-html-and.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;➜ Instagram Post and Reel for Day 30 :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.instagram.com/future_coderss/"&gt;See Post and Reel&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Hey, If You don't know what is happening here. Don't Worry, I am doing a crazy challenge 😅. Read More about it from the post below.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/somanathgoudar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnNEMcDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--15QGQnyq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600953/fdee0195-6d25-410d-9d97-c10ffaa4eb7d.jpeg" alt="somanathgoudar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/somanathgoudar/30dayschallenge-30-days-extreme-html-css-challenge-50k1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🤯 30DaysChallenge - 30 Days Extreme HTML &amp;amp; CSS CHALLENGE 🤯&lt;/h2&gt;
      &lt;h3&gt;Somanath Goudar ・ May 19 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#frontend&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#30daysofcode&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Support Me :&lt;/strong&gt;&lt;br&gt;
👉 Buy me a Coffee: &lt;a href="https://www.buymeacoffee.com/somanathgoudar"&gt;https://www.buymeacoffee.com/somanathgoudar&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://www.instagram.com/somanath_goudar/"&gt;Follow Me on Instagram&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://www.instagram.com/future_coderss/"&gt;Follow Future Coders on Instagram&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://www.youtube.com/channel/UC_nTrhTr5fnBGjOxnkPUmmA"&gt;Subscribe to My Main Channel&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://www.youtube.com/channel/UCzGSyMOf2jPt1MkNBB3SJ3g"&gt;Subscribe to Channel Created for this Challenge&lt;/a&gt;&lt;/p&gt;




</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Tools o improve your unit test  with .NET</title>
      <author>Jéssica Nathany</author>
      <pubDate>Fri, 18 Jun 2021 11:56:06 +0000</pubDate>
      <link>https://dev.to/jessicanathany/tools-o-improve-your-unit-test-with-net-1ekb</link>
      <guid>https://dev.to/jessicanathany/tools-o-improve-your-unit-test-with-net-1ekb</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lNDWi_vA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpevyiez0pljycytlb2c.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lNDWi_vA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpevyiez0pljycytlb2c.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, I will show you some kind tools for you can write unit test better and make you job easier. In this case, I'm using here the Dotnet platform C# language. But first, let's understand some concepts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test stuntmen&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, what are test stuntmen? They are fake implementation the object real can be simulated the unit real or the object real.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Mock&lt;/em&gt;&lt;br&gt;
Are what we are talking about here: objects pre-programmed with expectations which form a specification of the calls they are expected to receive.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Stubs&lt;/em&gt;&lt;br&gt;
Provide canned answers to calls made during the test, usually not responding at all to anything outside what's programmed in for the test.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fakes&lt;/em&gt;&lt;br&gt;
Are objects actually have working implementations, but usually take some shortcut that makes them not suitable for production (an in-memory database is a good example).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Spies&lt;/em&gt;&lt;br&gt;
Are stubs that also record some information based on how they were called. One form of this might be an email service that records how many messages it was sent.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dummy&lt;/em&gt;&lt;br&gt;
Are objects are passed around but never actually used. Usually, they are just used to fill parameter lists.&lt;br&gt;
Fake objects actually have working implementations, but usually take some.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;XUnit Code Snippets&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you use these "code snippets", you can save time coding/typing to create unit test code based on xUnit framework. You can use write the command below I will show two options.&lt;/p&gt;

&lt;p&gt;You can to do download the Snippets in your Visual Studio&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WQK7GtYH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2y12nwgjzykatks4ruj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WQK7GtYH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2y12nwgjzykatks4ruj.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use command bellow&lt;br&gt;
1.xtestm [Tab] or&lt;br&gt;
2.fact [Tab]&lt;/p&gt;

&lt;p&gt;Then, this snippet expanded following C# code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ufAcEa8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ara4anftib076ghy0vug.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ufAcEa8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ara4anftib076ghy0vug.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--320sDAUy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/65ldlx5z6reo7fuce9gc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--320sDAUy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/65ldlx5z6reo7fuce9gc.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NBuilder&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Is a library that allows you to rapidly create test data, automatically. Some examples below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZE7PYQez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6twiaf3lwkgxdvdulsj4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZE7PYQez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6twiaf3lwkgxdvdulsj4.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ve6bSSr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6im0vn0anbmsdd93ww36.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ve6bSSr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6im0vn0anbmsdd93ww36.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Its a great idea and facility so much if you need to generate a quantity of data for testing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Faker.NET&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This library is different the NBuilder, because if you want something witch looks like actual names, address, email, telephone, etc you can use Faker.NET &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OJ-5FD3K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkaqpveukl464ev9skkx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OJ-5FD3K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkaqpveukl464ev9skkx.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coverlet&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Coverlet is a cross platform code coverage framework for .NET, with support for line, branch and method coverage. It works with .NET Framework on Windows and .NET Core on all supported platforms.&lt;/p&gt;

&lt;p&gt;Coverlet documentation reflect the current repository state of the features, not the released ones.&lt;br&gt;
Check the changelog to understand if the documented feature you want to use has been officially released. You can see for more details in &lt;a href="https://github.com/coverlet-coverage/coverlet"&gt;Coverlete Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let´s first install the package coverlete in your test project in image bellow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IekP3Ea---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwmhbh6uas5xj0gvyhqe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IekP3Ea---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwmhbh6uas5xj0gvyhqe.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can to configure the tests execute, for to generate the XML file format, for code coverage with the command and image bellow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dotnet test --verbosity minimal --collect:"XPlat Code Coverage"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ILOG1tFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/51srxsv3uk2e7bnmw7qd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ILOG1tFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/51srxsv3uk2e7bnmw7qd.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The option --collect:”XPlat Code Coverage”  will create the file &lt;strong&gt;coverage.cobertura.xml&lt;/strong&gt; in a folder named identified by a GUID and located in the TestResults directory of the test project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eeg74b7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9z704p4ea3p5u27jl4ca.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eeg74b7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9z704p4ea3p5u27jl4ca.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Install Report Generator the command bellow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dotnet tool install --global dotnet-reportgenerator-globaltool --version 4.8.6&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e6lxR2Bm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/va8d6lyop9e482et05cb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e6lxR2Bm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/va8d6lyop9e482et05cb.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the power shell open the folder where the xml file was generated, and write the command &lt;strong&gt;reportgenerator "-reports:coverage.cobertura.xml" "-targetdir:coveragereport" -reporttypes:Html&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qiM6rNQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lme77zrv3oqvapsc4j6f.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qiM6rNQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lme77zrv3oqvapsc4j6f.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2--rP-U7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wp0j1vvxmyperapxwmcm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2--rP-U7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wp0j1vvxmyperapxwmcm.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the report generator created files in which it shows the test coverage of your code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7vW66HZH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ff7y7jdqwia6w8cixyto.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7vW66HZH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ff7y7jdqwia6w8cixyto.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hM2vK5Wf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdskw0lx450yuj7f68t7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hM2vK5Wf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdskw0lx450yuj7f68t7.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DgbO-ELH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/181siwutiyb6mswc8cjz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DgbO-ELH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/181siwutiyb6mswc8cjz.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pAfLtXw0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tuwz8z2kml83k5q4sn5f.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pAfLtXw0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tuwz8z2kml83k5q4sn5f.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Whenever I can, I write an article to document my programs and processes so I don't forget. Here I have put some tools that I use in my personal projects and at work to improve the way I write my unit tests, and observe test coverage. I hope you enjoyed it and it helps you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://martinfowler.com/articles/mocksArentStubs.html"&gt;Martin Fowler - article MocksArentStubs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.microsoft.com/pt-br/dotnet/core/testing/unit-testing-code-coverage?tabs=windows"&gt;Documentation dotnet core unit testing code&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.jerriepelser.com/blog/creating-test-data-with-nbuilder-and-faker/"&gt;Jerrie Pelser&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/coverlet-coverage/coverlet"&gt;Coverlate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Links&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://github.com/JessicaNathany/unit-test"&gt;Unit Test project in Github&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/moq/moq4/wiki/Quickstart"&gt;Mock4 Quickstart&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/nbuilder/nbuilder"&gt;NBuilder GitHub&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.nuget.org/packages/Faker.Net"&gt;Faker.NET&lt;/a&gt;&lt;br&gt;
&lt;a href="https://nbuilder.wordpress.com/documentation/"&gt;NBuilder documentation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?&amp;lt;br&amp;gt;%0AitemName=jsakamoto.xUnitCodeSnippets"&gt;XUnitCodeSnippets&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.nuget.org/packages/moq/"&gt;Link package Moq&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.nuget.org/packages/coverlet.msbuild/"&gt;coverlet.msbuild&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/coverlet-coverage/coverlet"&gt;coverlet-coverage&lt;/a&gt;&lt;/p&gt;

</description>
      <category>testing</category>
      <category>testdev</category>
      <category>dotnet</category>
      <category>csharp</category>
    </item>
    <item>
      <title>Build a Break Scheduler using Python</title>
      <author>Ayushi Rawat </author>
      <pubDate>Fri, 18 Jun 2021 11:55:42 +0000</pubDate>
      <link>https://dev.to/ayushi7rawat/build-a-break-scheduler-using-python-2bm7</link>
      <guid>https://dev.to/ayushi7rawat/build-a-break-scheduler-using-python-2bm7</guid>
      <description>&lt;p&gt;Hello reader! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Working from home is the new normal&lt;/strong&gt;. and It is a must to ensure a healthy work-life balance. You cannot just grab a laptop and keep working all day long, it will affect your health drastically.&lt;/p&gt;

&lt;p&gt;Schedule your breaks, by far the way out. It works out well for me. In this blog post, we will learn how to build a &lt;strong&gt;breaks Scheduler.&lt;/strong&gt; We will see the implementation in &lt;strong&gt;Python&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ayushi7rawat/Ultimate-Python-Resource-Hub"&gt;Check out the Repository for Ultimate Resource in python&lt;/a&gt;. Drop a star if you find it useful! Got anything to add? Open a PR on the same!&lt;/p&gt;

&lt;p&gt;You can refer to my &lt;strong&gt;YouTube video Tutorial&lt;/strong&gt; to see a working tutorial for better understanding and a step-by-step guide of the same. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/qF8QG7Fr1Vk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-will-be-covered-in-this-blog"&gt;
  &lt;/a&gt;
  What will be covered in this Blog
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;  &lt;span class="n"&gt;Why&lt;/span&gt; &lt;span class="n"&gt;breaks&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;important&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;how&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Utilize&lt;/span&gt; &lt;span class="n"&gt;them&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt;  &lt;span class="n"&gt;What&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;webbrowser&lt;/span&gt; &lt;span class="n"&gt;Module&lt;/span&gt;
&lt;span class="mf"&gt;3.&lt;/span&gt;  &lt;span class="n"&gt;How&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;simple&lt;/span&gt; &lt;span class="n"&gt;breaks&lt;/span&gt; &lt;span class="n"&gt;Scheduler&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Let's get started!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-breaks-are-important-amp-how-to-utilize-them"&gt;
  &lt;/a&gt;
  Why breaks are important &amp;amp; how to Utilize them?
&lt;/h2&gt;

&lt;p&gt;Working from home can be a tiring desk job. You need to take care of your mental health. Well you can schedule your breaks to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Take small five minutes break every hour&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Drink water frequently.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stretch your muscles.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prepare Tea/Coffee or any healthy drink and take a small walk for few minutes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you receive a non-work call, again do a little walk and talk.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How do you Utilize and plan your breaks?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#module-used"&gt;
  &lt;/a&gt;
  Module Used:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#webbrowser-module"&gt;
  &lt;/a&gt;
  webbrowser Module:
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://docs.python.org/3/library/webbrowser.html#module-webbrowser"&gt;&lt;code&gt;webbrowser&lt;/code&gt;&lt;/a&gt; module provides a high-level interface to allow displaying Web-based documents to users. Under most circumstances, simply calling the &lt;code&gt;open()&lt;/code&gt; function from this module will do the right thing. The script &lt;strong&gt;webbrowser&lt;/strong&gt; can be used as a command-line interface for the module. It accepts a URL as the argument. &lt;/p&gt;

&lt;p&gt;If you wish to know more about it, you can refer to &lt;a href="https://docs.python.org/3/library/webbrowser.html#module-webbrowser"&gt;&lt;strong&gt;webbrowser Module&lt;/strong&gt; Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that you are familiar with &lt;em&gt;Why breaks are important &amp;amp; how to Utilize them?&lt;/em&gt; and have acquired basic knowledge of &lt;em&gt;webbrowser  module,&lt;/em&gt; we can move forward to &lt;em&gt;the coding section.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#time-to-code"&gt;
  &lt;/a&gt;
  Time to Code!
&lt;/h2&gt;

&lt;p&gt;You can find all the code at my &lt;a href="https://github.com/ayushi7rawat/Youtube-Projects/tree/master/Break%20Scheduler"&gt;GitHub Repository&lt;/a&gt;. &lt;strong&gt;Drop a star&lt;/strong&gt; if you find it useful.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2ux2YBIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vy16075bdremiubv2fry.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ux2YBIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vy16075bdremiubv2fry.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
In order to access the Python library, we need to import the package into our python script. Use the following command to do so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;webbrowser&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have imported the library using the command &lt;code&gt;import requests&lt;/code&gt;, let's proceed.&lt;/p&gt;

&lt;p&gt;Let's display a welcome message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Initiating the Break Scheduler!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's ask the user to input the number of breaks he wishes to take or since you are running the script for yourself, you can also hardcode the value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;breaks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'input the number of times you wish to take break today! '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;breaks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#breaks = 2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you can set the break interval according to your need. I am setting the break interval as every hour for now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;gap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initially let's set the counter as zero&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's define the URL, you wish to open in the interval&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://www.youtube.com/c/AyushiRawat"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's make use of &lt;code&gt;random&lt;/code&gt; module to display a random message at every break interval. Let's store the messages to be displayed in &lt;code&gt;messages&lt;/code&gt; for the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Time for a break!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Let's take a break!"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our resultant data is stored in &lt;code&gt;res&lt;/code&gt;. We will make use of the &lt;code&gt;text&lt;/code&gt; method to extract our desired weather details and let's display the result.&lt;/p&gt;

&lt;p&gt;Now, let's run a while loop until the counter becomes equal to the number of desired breaks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;breaks&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;#Let's print the break message
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;#opening the browser window.
&lt;/span&gt;    &lt;span class="n"&gt;webbrowser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will introduce &lt;code&gt;sleep&lt;/code&gt; here to schedule the breaks. A random message will be displayed on the screen and the URL will open automatically at every interval.&lt;/p&gt;

&lt;p&gt;At last, let's increase the counter by one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, let's display the termination message when the scripts end.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Terminating the Break Scheduler!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. That all we have to do to build a simple break scheduler. And with that, it's a wrap!  I hope you found the article useful! Share in the comments below.&lt;/p&gt;

&lt;p&gt;I create content about &lt;strong&gt;Career, Blogging, Programming, and Productivity&lt;/strong&gt;, If this is something that interests you, please share the article with your friends and connections. You can also subscribe to my newsletter to get updates every time I write something!&lt;/p&gt;

&lt;p&gt;Thank you for reading, If you have reached so far, please like the article, It will encourage me to write more such articles. Do share your valuable suggestions, I appreciate your honest feedback!&lt;/p&gt;

&lt;p&gt;I would strongly recommend you to Check out the &lt;a href="https://www.youtube.com/watch?v=jAOkWehMF6E"&gt;YouTube video&lt;/a&gt; of the same and &lt;strong&gt;don't forget to subscribe to my Channel&lt;/strong&gt;. I would love to connect with you at &lt;a href="https://twitter.com/ayushi7rawat"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/ayushi7rawat/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You should definitely check out my other Blogs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/python-39-all-you-need-to-know"&gt;Python 3.9: All You need to know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/github-cli-10-all-you-need-to-know"&gt;GitHub CLI 1.0: All you need to know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/how-to-make-your-own-google-chrome-extension-1"&gt;How to make your own Google Chrome Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/run-javascript-from-python"&gt;Run Javascript from Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/automate-whatsapp-using-python"&gt;Automate WhatsApp using Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/automate-cowin-vaccine-slots-availablity-using-python"&gt;Automate Cowin Vaccine slots Availability using Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ayushirawat.com/what-is-competitive-programming-or-beginners-guide"&gt;What is Competitive Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/webbrowser.html"&gt;https://docs.python.org/3/library/webbrowser.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See you in my next Blog article, Take care!!&lt;/p&gt;

</description>
      <category>python</category>
      <category>computerscience</category>
      <category>career</category>
      <category>programming</category>
    </item>
    <item>
      <title>🔥🔥backend for login form. Easy to make fully working form</title>
      <author>Techy Programmers</author>
      <pubDate>Fri, 18 Jun 2021 11:47:55 +0000</pubDate>
      <link>https://dev.to/kunaal438/how-to-make-fully-working-login-form-with-database-full-backend-685</link>
      <guid>https://dev.to/kunaal438/how-to-make-fully-working-login-form-with-database-full-backend-685</guid>
      <description>&lt;p&gt;Hello, glad you are here. I am kunaal and today we will see how to make a fully working login and register form with psql databse and nodejs as a backend.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#video-tutorials"&gt;
  &lt;/a&gt;
  Video Tutorials
&lt;/h1&gt;

&lt;p&gt;Watch these tutorial to learn to make this login register form. You can see its demo also.&lt;/p&gt;

&lt;p&gt;Part - 1:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Lcih8lCY19k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Part - 2:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/I3ZNqmPBOPQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I hope you understood everything. If you have any doubt or you find any mistake that I made or you have any suggestion feel free to ask me in comment.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are interested in programming and want to know how I a 15yr old teen do coding make these design. You can follow me on my Instagram. I am also planning to post my game development stuff on Instagram.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/kunaal438/fullstack-login-form"&gt;Source Code&lt;/a&gt;, &lt;a href="https://www.youtube.com/c/TechyProgrammers/"&gt;My youtube Channel&lt;/a&gt;, &lt;a href="https://www.instagram.com/techy_programmers/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What is Asynchronous JavaScript?</title>
      <author>Badr Eddine El-Harchali</author>
      <pubDate>Fri, 18 Jun 2021 11:33:18 +0000</pubDate>
      <link>https://dev.to/badr_eddine/what-is-asynchronous-javascript-961</link>
      <guid>https://dev.to/badr_eddine/what-is-asynchronous-javascript-961</guid>
      <description>&lt;p&gt;If you want to build projects efficiently, then this concept is for you.&lt;/p&gt;

&lt;p&gt;The theory of async JavaScript helps you break down big complex projects into smaller tasks.&lt;/p&gt;

&lt;p&gt;Then you can use any of these three techniques – &lt;strong&gt;callbacks&lt;/strong&gt;, &lt;strong&gt;promises&lt;/strong&gt; or &lt;strong&gt;Async/await&lt;/strong&gt; – to run those small tasks in a way that you get the best results.&lt;/p&gt;

&lt;p&gt;Let's dive in!🎖️&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#synchronous-vs-asynchronous-javascript"&gt;
  &lt;/a&gt;
  Synchronous vs Asynchronous JavaScript
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2urdl8V5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624013264720/HHdHvJBk3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2urdl8V5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624013264720/HHdHvJBk3.png" alt="What is JavaScript (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-synchronous-system"&gt;
  &lt;/a&gt;
  What is a Synchronous System?
&lt;/h2&gt;

&lt;p&gt;In a synchronous system, tasks are completed one after another.&lt;/p&gt;

&lt;p&gt;Think of this as if you have just one hand to accomplish 10 tasks. So, you have to complete one task at a time.&lt;/p&gt;

&lt;p&gt;Take a look at the GIF 👇 – one thing is happening at a time here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sxme137G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624013408688/2XECEnlsx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sxme137G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624013408688/2XECEnlsx.gif" alt="giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll see that until the first image is loaded completely, the second image doesn't start loading.&lt;/p&gt;

&lt;p&gt;Well, JavaScript is by default Synchronous &lt;strong&gt;[single threaded]&lt;/strong&gt;. Think about it like this – one thread means one hand with which to do stuff.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-asynchronous-system"&gt;
  &lt;/a&gt;
  What is an Asynchronous System?
&lt;/h2&gt;

&lt;p&gt;In this system, tasks are completed independently.&lt;/p&gt;

&lt;p&gt;Here, imagine that for 10 tasks, you have 10 hands. So, each hand can do each task independently and at the same time.&lt;/p&gt;

&lt;p&gt;Take a look at the GIF 👇 – you can see that each image loads at the same time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--28tJXWqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624013556316/qppiksujU.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--28tJXWqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624013556316/qppiksujU.gif" alt="giphy (1).gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again, all the images are loading at their own pace. None of them is waiting for any of the others.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-summarize-synchronous-vs-asynchronous-js"&gt;
  &lt;/a&gt;
  To Summarize Synchronous vs Asynchronous JS:
&lt;/h2&gt;

&lt;p&gt;When three images are on a marathon, in a:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;**Synchronous **system, three images are in the same lane. One can't overtake the other. The race is finished one by one. If image number 2 stops, the following image stops.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XKdthkH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624013814215/-1Wy5wtj9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XKdthkH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624013814215/-1Wy5wtj9.png" alt="w1r9y4ghhq0t8wjb1u9h.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;**Asynchronous **system, the three images are in different lanes. They'll finish the race on their own pace. Nobody stops for anybody:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bdbhU7FH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624013883654/NM4lzXP8d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bdbhU7FH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624013883654/NM4lzXP8d.png" alt="ehknx5shc4orh32s0ktk.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#synchronous-and-asynchronous-code-examples"&gt;
  &lt;/a&gt;
  Synchronous and Asynchronous Code Examples:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h3vzd8i8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624013952298/PsZXgfXMK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h3vzd8i8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624013952298/PsZXgfXMK.png" alt="pzbnpcza9rbj8xgiby95.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's look at some examples and clear up any doubts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#synchronous-code-example"&gt;
  &lt;/a&gt;
  Synchronous Code Example
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qbowziJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624014042786/9uooRNhhR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qbowziJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624014042786/9uooRNhhR.png" alt="5m6p1qy522lj3auvl5ty.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To test a synchronous system, write this code in JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; I &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; eat &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; Ice Cream &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the result in the console: 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9CvU_Q7_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624014807776/0acJGD2_6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9CvU_Q7_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624014807776/0acJGD2_6.png" alt="Capture d’écran 2021-06-18 121216.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#asynchronous-code-example"&gt;
  &lt;/a&gt;
  Asynchronous code example
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0LbDGY4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624014840494/nrfK8Oqgv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0LbDGY4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624014840494/nrfK8Oqgv.png" alt="y5d0o8unbe8c67qeqz0w.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's say it takes two seconds to eat some ice cream. Now, let's test out an asynchronous system. Write the below code in JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Don't worry, we'll discuss the &lt;code&gt;setTimeout()&lt;/code&gt; function later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// This will be shown after 2 seconds&lt;/span&gt;

    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ice Cream&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's the result in the console: 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8C3cpeHB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624015283279/MQllyQ2g_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8C3cpeHB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624015283279/MQllyQ2g_.png" alt="ffffffffffffffffffffffffffffffffff.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's your medal for reading until the end. ❤️&lt;br&gt;
&lt;strong&gt;Suggestions and criticisms are highly appreciated ❤️&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M2yhEE-3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624015369657/aqFl0XejL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M2yhEE-3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624015369657/aqFl0XejL.png" alt="usxsz1lstuwry3jlly4d.png"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Gandhi's Letter to Hittler</title>
      <author>Mischievous Loner</author>
      <pubDate>Fri, 18 Jun 2021 10:55:02 +0000</pubDate>
      <link>https://dev.to/mischievous/gandhi-s-letter-to-hittler-3poo</link>
      <guid>https://dev.to/mischievous/gandhi-s-letter-to-hittler-3poo</guid>
      <description>&lt;h2&gt;
  &lt;a href="#trying-background-attachment-fixed"&gt;
  &lt;/a&gt;
  Trying background attachment fixed.
&lt;/h2&gt;




&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mischievous-loner/embed/XWMGeyV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>Steps to Create A To-Do App With MERN stack</title>
      <author>Chytra K R</author>
      <pubDate>Fri, 18 Jun 2021 10:54:10 +0000</pubDate>
      <link>https://dev.to/chytrakr/steps-to-create-a-to-do-app-with-mern-stack-4912</link>
      <guid>https://dev.to/chytrakr/steps-to-create-a-to-do-app-with-mern-stack-4912</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tools-you-will-need"&gt;
  &lt;/a&gt;
  Tools You Will Need
&lt;/h2&gt;

&lt;p&gt;Make sure Node and NPM are installed on your computer. You can download both at nodejs.org (NPM is included in your Node installation)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  Tech Stack
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt;&lt;br&gt;
&lt;a href="https://expressjs.com/en/starter/installing.html"&gt;Express.js&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://www.mongodb.com/cloud"&gt;MongoDB&lt;/a&gt;&lt;br&gt;
&lt;a href="https://reactjs.org/docs/getting-started.html"&gt;React.js&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#dependencies-for-nodejs"&gt;
  &lt;/a&gt;
  Dependencies for Node.js
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/body-parser"&gt;body-parser&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/mongoose"&gt;mongoose&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/mongoose-auto-increment"&gt;mongoose-auto-increment&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-your-node-express-backend"&gt;
  &lt;/a&gt;
  Create your Node (Express) Backend
&lt;/h2&gt;

&lt;p&gt;First create a folder for your project, called to-do-node (for example).&lt;br&gt;
Then, open that folder in your code editor.&lt;br&gt;
To create our Node project, run the following command in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm init -y&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;This will create a package.json file that will allow us to keep track of all our app scripts and manage any dependencies our Node app needs.&lt;/p&gt;

&lt;p&gt;We'll use Express to create a simple web server for us that runs on port 3000.&lt;/p&gt;

&lt;p&gt;So let's create an index file where our app starts to run with the name of &lt;code&gt;index.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express')
const app = express()
const bodyParser = require('body-parser');

//import router
const router = require('./app/index.js');

// body parser
app.use(bodyParser.urlencoded({ limit: '100mb', extended: true }))
app.use(bodyParser.json({ limit: '100mb', extended: true }))

app.use(function(req, res, next) {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Methods", "GET, PUT, POST, DELETE");
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, Authorization");

  if ('OPTIONS' === req.method) {
    //respond with 200
    res.send(200);
  }
  else {
    //move on
    next();
  }
});

app.get('/', (req, res) =&amp;gt; {
  res.send("incorrect route");
})

//add routes
const base = '/api/v1/';
app.use(base, router);

app.listen(process.env.PORT || 3000, () =&amp;gt; console.log('Running on port 3000!'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then in our terminal, we will install dependencies which we need:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm I express mongoose body-parser nodemon mongoose-auto-increment&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Create a folder called &lt;code&gt;app&lt;/code&gt; inside the project folder and add &lt;code&gt;index.js&lt;/code&gt; file to defines routes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');

// Routes Import
const toDo = require("./toDo/index.js");

const router = express.Router();

// Adding Routes
router.use('/to-do', toDo);

module.exports = router;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create folder name called config and add &lt;code&gt;db.js&lt;/code&gt; file to that.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;db.js&lt;/code&gt; file will have the following configurations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mongoose = require('mongoose');
mongoose.connect('mongodb+srv://&amp;lt;mongodb_username&amp;gt;:&amp;lt;cluster_password&amp;gt;@cluster0.nxcni.mongodb.net/toDo?retryWrites=true&amp;amp;w=majority', { useNewUrlParser: true });
module.exports = mongoose.connection;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-write-apis-now"&gt;
  &lt;/a&gt;
  Let's write APIs now.
&lt;/h2&gt;

&lt;p&gt;Create a folder called toDo and &lt;code&gt;model.js&lt;/code&gt;, &lt;code&gt;index.js&lt;/code&gt;, and &lt;code&gt;router.js&lt;/code&gt; files in that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#indexjs"&gt;
  &lt;/a&gt;
  index.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = require("./router");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#modeljs"&gt;
  &lt;/a&gt;
  model.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mongoose = require('mongoose'); 
const autoIncrement = require('mongoose-auto-increment');
const db = require('../config/db.js');

autoIncrement.initialize(db);

const schema = new config.mongoose.Schema({
  toDos: [
    {
      toDo: String,
      tag: String,
      tagColor: String,
      done: Boolean
    }
  ],
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  },
  status: {
    type: Boolean,
    default: true
  }
}, {
  strict: true
});

var toDo = mongoose.model('toDos', schema);
module.exports = toDo;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#routerjs"&gt;
  &lt;/a&gt;
  router.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const config = require('../config/routes.js');
const router = config.express.Router();
const collection = require('./model.js');

// @route GET api/v1/to-do/list
// @desc get users list with pagination
// @access Public
router.get('/list', function (req, res) {
    if(!req.query.id) {
          res.status(200).send({data: []});
        return false;
    }
    getToDosList(req.query.tag ? req.query.tag : '', req.query.id).then(resp =&amp;gt; {
          res.status(200).send(resp[0]);
    }, err =&amp;gt; {
          res.status(500).send({message: "Something went wrong, please try after sometime"});
    })
});

// @route CREATE api/v1/to-do/add
// @desc add to-do
// @access Public
router.post('/add', function(req, res) {
    if(!req.query.id) {
        collection.create({toDos: [{toDo: req.body.text, done: false, tag: req.body.tag, tagColor: req.body.tagColor}]}, function (err, toDo) {
            if (!err) {
                return res.status(200).json({error: false, data: toDo, message: 'success'})
            } else {
                  return res.status(500).send({error: true, message: 'Error adding to-do'})
            }
        });
    } else {
            let updateData = {
            $push: {
                "toDos": {toDo: req.body.text, done: false, tag: req.body.tag, tagColor: req.body.tagColor}
            }
        };
            updateToDo({_id: req.query.id}, updateData).then(toDo =&amp;gt; {
              return res.status(200).json({error: false, data: toDo, message: 'success'})
            }, err =&amp;gt; {
            return res.status(500).send({error: true, message: 'Error adding to-do'})
            })
    }
});

// @route UPDATE api/v1/to-do/done
// @desc update toDo status
// @access Public
router.put('/done/:userId/:toDoId', function(req, res) {
    let updateData = {
        $set: {
            "toDos.$.done": req.body.done
        }
    };
    updateToDo({_id: req.params.userId, "toDos._id": req.params.toDoId}, updateData).then((toDo) =&amp;gt; {
        return res.status(200).json({error: false, message: 'Updated successfully'})
    }, err =&amp;gt; {
        return res.status(500).send({error: true, message: err})
    })
});

// @route UPDATE api/v1/to-do/delete
// @desc delete toDo
// @access Public
router.put('/delete/:userId/:toDoId', function(req, res) {
    let updateData = { "$pull": { "toDos": { "_id": req.params.toDoId } } }
    updateToDo({_id: req.params.userId, "toDos._id": req.params.toDoId}, updateData).then((toDo) =&amp;gt; {
        return res.status(200).json({error: false, message: 'Updated successfully'})
    }, err =&amp;gt; {
        return res.status(500).send({error: true, message: err})
    })
});

// function to get to-dos list with tag filter
function getToDosList(tag, id) {
    return new Promise(function(resolve, reject) {
        let agg = [
            {
                "$unwind": "$toDos"
            }, {
                "$match": {
                    $or: [{"_id": id}, {"toDos.tag": {$regex: `${tag}.*`, $options: "i" }}]
                }
            }, {
                "$group": {
                    _id: null,
                    data: {$push: "$toDos"}
                }
            }
        ]
        collection.aggregate(agg, function(err, response) {
          if(err) return reject({message: "Something went wrong"})
          if(!response) return reject({message: "Error while getting remitters data"})
          return resolve(response)
        })
    })
}

//function to update to-do
function updateToDo(query, updateData) {
    return new Promise(function(resolve, reject) {
        collection.findOneAndUpdate(query, updateData, {new: true},
            function (err, resp) {
                    if (err) return reject({error: 1, message: "There was a problem while updating data"});
                    return resolve(resp);
            }
        );
    })
}

function getToDos(query) {
    return new Promise(function(resolve, reject) {
        collection.find(query,
            function (err, resp) {
                    if (err) return reject({error: 1, message: "There was a problem while updating data"});
                    return resolve(resp);
            }
        );
    })
}


module.exports = router

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we can run our app by running &lt;code&gt;nodemon index.js&lt;/code&gt; in our terminal and we should see that app is running on port 3000.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dependencies-for-reactjs"&gt;
  &lt;/a&gt;
  Dependencies for React.js
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/bootstrap"&gt;bootstrap&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/react-bootstrap"&gt;react-bootstrap&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/react-icons"&gt;react-icons&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-your-react-frontend"&gt;
  &lt;/a&gt;
  Create your React Frontend
&lt;/h2&gt;

&lt;p&gt;After creating our backend, let's move to the frontend.&lt;/p&gt;

&lt;p&gt;Open another terminal tab and use create-react-app to create a new React project with the name to-do-react (for example):&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx create-react-app to-do-react&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;After that, we will have a React app with all of its dependencies installed.&lt;/p&gt;

&lt;p&gt;Now, go to the folder&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd to-do-react&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Change directory to src and run the below commands:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd src&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rm *&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now create index.js file by running below command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;touch index.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This file will render our app to an HTML file which is in the public folder. Also, create a folder name &lt;code&gt;components&lt;/code&gt; with the file name &lt;code&gt;app.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mkdir components &amp;amp;&amp;amp; cd components &amp;amp;&amp;amp; touch app.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;app.js will contain our To-Do app.&lt;/p&gt;

&lt;p&gt;Edit &lt;code&gt;index.js&lt;/code&gt; file in src:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import ReactDOM from 'react-dom';
import App from './components/app';
import 'bootstrap/dist/css/bootstrap.min.css';

ReactDOM.render(&amp;lt;App/&amp;gt;, document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a folder with the name of &lt;code&gt;api&lt;/code&gt; and add the file with name of &lt;code&gt;to-do.js&lt;/code&gt; and write API calls in that file as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import axios from 'axios';

let base = 'http://localhost:3000/api/v1/';

export default function api(url, method='GET', data={}) {
    return new Promise(function(resolve, reject) {
        const requestOptions = {
            url: base + url,
            method: method,
            headers: {
                'Content-Type': 'application/json'
            },
            data
        };
        axios(requestOptions)
        .then(function (response) {
            resolve(response.data);
        })
        .catch(function (error) {
            reject(error);
        });
    });
}

export function AddToDoAPI(data) {
    return new Promise(function(resolve, reject) {
        api(`to-do/add?id=${localStorage.userId ? localStorage.userId : ''}`, 'POST', data)
        .then((resp) =&amp;gt; {
            return resolve(resp);
        }, (error) =&amp;gt; {
            return reject(error.response.data.message);
        })
    })
}

export function GetToDoListAPI(tag='') {
    return new Promise(function(resolve, reject) {
        api(`to-do/list?id=${localStorage.userId ? localStorage.userId : ''}&amp;amp;tag=${tag}`)
        .then((resp) =&amp;gt; {
            return resolve(resp);
        }, (error) =&amp;gt; {
            console.log(error)
            debugger
            return reject(error.response.data.message);
        })
    })
}

export function UpdateToDoAPI(data, toDoId) {
    return new Promise(function(resolve, reject) {
        api(`to-do/done/${localStorage.userId}/${toDoId}`, 'PUT', data)
        .then((resp) =&amp;gt; {
            return resolve(resp);
        }, (error) =&amp;gt; {
            return reject(error.response.data.message);
        })
    })
}

export function DeleteToDoAPI(toDoId) {
    return new Promise(function(resolve, reject) {
        api(`to-do/delete/${localStorage.userId}/${toDoId}`, 'PUT', {})
        .then((resp) =&amp;gt; {
            return resolve(resp);
        }, (error) =&amp;gt; {
            return reject(error.response.data.message);
        })
    })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Edit &lt;code&gt;app.js&lt;/code&gt; in components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, {Component} from 'react';

// Bootstrap for react
import Container from 'react-bootstrap/Container';
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import Button from 'react-bootstrap/Button';
import InputGroup from 'react-bootstrap/InputGroup';
import FormControl from 'react-bootstrap/FormControl';
import ListGroup from 'react-bootstrap/ListGroup';
import Form from 'react-bootstrap/Form'
import Dropdown from 'react-bootstrap/Dropdown'
import DropdownButton from 'react-bootstrap/DropdownButton'
import {AddToDoAPI, GetToDoListAPI, UpdateToDoAPI, DeleteToDoAPI} from '../api/to-do'
import { BsStop, BsX } from 'react-icons/bs';
import {Badge} from "react-bootstrap";

class AppComponent extends Component {
    constructor(props) {
        super(props);

        // Setting up state
        this.state = {
            userInput : "",
            list:[],
            selectedTag: "Other",
            selectedTagColor: "grey",
            tags: [
                {tagName: 'Other', color: 'grey'},
                {tagName: 'Work', color: 'red'},
                {tagName: 'Personal', color: 'green'}
            ]
        }
    }
    componentDidMount() {
        this.getItems()
    }

    // Set a user input value
    updateInput(value){
        this.setState({
            userInput: value,
        });
    }

    // Set a selected tag value
    updateTag(value){
        this.setState({
            selectedTag: value.split(" ")[0],
            selectedTagColor: value.split(" ")[1]
        });
    }

    // Add item if user input in not empty
    addItem(event){
        if(event.code === 'Enter') {
            AddToDoAPI({text: this.state.userInput, tag: this.state.selectedTag, tagColor: this.state.selectedTagColor}).then(resp =&amp;gt; {
                if(!localStorage.userId) {
                    localStorage.setItem('userId', resp.data._id);
                }
                this.getItems()
            })
        }
    }

    //Get to-do list
    getItems(tag='') {
        GetToDoListAPI(tag).then(resp =&amp;gt; {
            // Update list
            const list = [...resp ? resp.data : []];
            // reset state
            this.setState({
                list,
                userInput: ""
            });
        })
    }

    UpdateToDo(val, id) {
        UpdateToDoAPI({done: val}, id).then(resp =&amp;gt; {
            this.getItems()
        })
    }

    // Function to delete item from list use id to delete
    deleteItem(id) {
        DeleteToDoAPI(id).then(resp =&amp;gt; {
            this.getItems()
        })
    }

    render(){
        return(
        &amp;lt;Container&amp;gt;

            &amp;lt;Row style={{
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                fontSize: '3rem',
                fontWeight: 'bolder',
                fontFamily: 'DejaVu Sans Mono, monospace',
                paddingTop: 2
                }}
                &amp;gt;TODO LIST
            &amp;lt;/Row&amp;gt;
            &amp;lt;hr style={{marginTop: 0}}/&amp;gt;
            &amp;lt;Row&amp;gt;
                &amp;lt;Col md={{ span: 5, offset: 4 }}&amp;gt;
                    &amp;lt;InputGroup className="mb-3"&amp;gt;
                        &amp;lt;DropdownButton
                            variant="outline-secondary"
                            id="input-group-dropdown-2"
                            title={this.state.selectedTag}
                            align="end"
                            size="lg"
                            style={{backgroundColor: 'white'}}
                            onSelect = {e =&amp;gt; this.updateTag(e)}
                            &amp;gt;
                                {this.state.tags.map(tag =&amp;gt; (
                                    &amp;lt;span style={{display: 'flex'}}&amp;gt;&amp;lt;BsStop style={{fontSize: 30, marginTop: 1, color: tag.color}}/&amp;gt;&amp;lt;Dropdown.Item key={tag.tagName} eventKey={tag.tagName + ' ' + tag.color}&amp;gt;{tag.tagName}&amp;lt;/Dropdown.Item&amp;gt;&amp;lt;/span&amp;gt;
                                ))}
                        &amp;lt;/DropdownButton&amp;gt;
                        &amp;lt;FormControl
                            placeholder="add item . . . "
                            size="lg"
                            value = {this.state.userInput}
                            onChange = {item =&amp;gt; this.updateInput(item.target.value)}
                            onKeyPress = {e =&amp;gt; this.addItem(e)}
                            aria-label="add something"
                            aria-describedby="basic-addon2"
                        /&amp;gt;
                    &amp;lt;/InputGroup&amp;gt;
                &amp;lt;/Col&amp;gt;
            &amp;lt;/Row&amp;gt;
            {this.state.list.length ? 
                &amp;lt;Row&amp;gt;
                    &amp;lt;Col md={{ span: 5, offset: 4 }} style={{paddingBottom: 18}}&amp;gt;
                        &amp;lt;Button variant="primary" style={{paddingTop: 0, paddingBottom: 0}} onClick={e =&amp;gt; this.getItems('')} size="sm"&amp;gt;All&amp;lt;/Button&amp;gt;{' '}
                        &amp;lt;Button variant="secondary" style={{paddingTop: 0, paddingBottom: 0}} onClick={e =&amp;gt; this.getItems('Other')} size="sm"&amp;gt;Other&amp;lt;/Button&amp;gt;{' '}
                        &amp;lt;Button variant="danger" style={{paddingTop: 0, paddingBottom: 0}} onClick={e =&amp;gt; this.getItems('Work')} size="sm"&amp;gt;Work&amp;lt;/Button&amp;gt;{' '}
                        &amp;lt;Button variant="success" style={{paddingTop: 0, paddingBottom: 0}} onClick={e =&amp;gt; this.getItems('Personal')} size="sm"&amp;gt;Personal&amp;lt;/Button&amp;gt;{' '}
                    &amp;lt;/Col&amp;gt;
                &amp;lt;/Row&amp;gt; : null
            }
            &amp;lt;Row&amp;gt;
                &amp;lt;Col md={{ span: 5, offset: 4 }}&amp;gt;
                    &amp;lt;ListGroup&amp;gt;
                    {/* map over and print items */}
                    {this.state.list.map(item =&amp;gt; {return(

                        &amp;lt;ListGroup.Item variant="white" action
                             key={item._id}&amp;gt;
                            &amp;lt;Form.Group id="formGridCheckbox" style={{display: 'flex'}}&amp;gt;
                            &amp;lt;Form.Check type="checkbox" style={{width: 10}} className="my-1 mr-sm-2" onChange={e =&amp;gt; this.UpdateToDo(!item.done, item._id)} checked={item.done}/&amp;gt;
                            {item.done ? &amp;lt;span style={{textDecoration: 'line-through', marginTop: 5, width: 380}}&amp;gt;{item.toDo}&amp;lt;/span&amp;gt; : &amp;lt;span style={{marginTop: 5, width: 380}}&amp;gt;{item.toDo}&amp;lt;/span&amp;gt;}
                            &amp;lt;BsStop style={{fontSize: 25, marginTop: 1, color: item.tagColor, float: 'right', width: 30}}/&amp;gt;
                            &amp;lt;BsX
                                onClick = { () =&amp;gt; this.deleteItem(item._id) }
                                style={{float: 'right', fontSize: 25, marginLeft: 'auto', width: 30}}
                            /&amp;gt;
                            &amp;lt;/Form.Group&amp;gt;
                        &amp;lt;/ListGroup.Item&amp;gt;
                    )})}
                    &amp;lt;/ListGroup&amp;gt;
                &amp;lt;/Col&amp;gt;
            &amp;lt;/Row&amp;gt;
        &amp;lt;/Container&amp;gt;
        );
    }
}

export default AppComponent;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Start the server by typing the following command in the terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Output: Open &lt;code&gt;http://localhost:3000&lt;/code&gt; in browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LdvmpkmY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m41f3clondcm2830obv1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LdvmpkmY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m41f3clondcm2830obv1.png" alt="To-Do app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, Apply filters and see the personalized to-dos:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XPjo5Aw4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/alt66asdpvbp1l4pq5mw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XPjo5Aw4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/alt66asdpvbp1l4pq5mw.png" alt="To-Do app"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>GitHub Pages with Dynamic Routes</title>
      <author>mkt</author>
      <pubDate>Fri, 18 Jun 2021 10:29:05 +0000</pubDate>
      <link>https://dev.to/mktcode/github-pages-with-dynamic-routes-dli</link>
      <guid>https://dev.to/mktcode/github-pages-with-dynamic-routes-dli</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SwAdqDdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xo5csn857fnxelq77xa3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SwAdqDdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xo5csn857fnxelq77xa3.png" alt="GitHub Pages Dynamic Routes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt; is a super convenient hosting service for static sites, e.g. a personal portfolio or blog or a project’s documentation and even modern web apps are in many cases not much more than a static HTML file and (a lot of) Javascript. But static sites come with the downside of... well... being static. That means you can’t have dynamic routes, like &lt;code&gt;your-project.github.io/posts/&amp;lt;post-slug&amp;gt;&lt;/code&gt; where &lt;code&gt;&amp;lt;post-slug&amp;gt;&lt;/code&gt; is a dynamic parameter. All possible routes need to be known in advance and point to a static file. Maybe those files are generated by some build process and whenever you add a new blog post, you just re-deploy the page. Using CI/CD pipelines like GitHub Actions/Workflows, that process might even boil down to pushing a new markdown file to your repository and that is sufficiently convenient for a lot of scenarios. But sometimes it’s not and you just need dynamic paths, especially when user generated content is involved or a project becomes more complex.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-dynamic-routes-even-work"&gt;
  &lt;/a&gt;
  How do dynamic routes even work?
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;If you are well familiar with the concept and you just want to know how to trick GitHub Pages into supporting dynamic routes, you can skip this part and continue with The Solution.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A route/path is traditionally pointing to a (static) file on the server that is represented by a domain.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;your-server.com/some/path/index.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you try to access a file that does not exist on that server, it will respond with an error, which usually means it will serve you a default &lt;code&gt;404.html&lt;/code&gt; that comes with the server. You’ve probably seen something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yGGK5_Af--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pm36kkk4l2g0x5zfj1hj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yGGK5_Af--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pm36kkk4l2g0x5zfj1hj.png" alt="Nginx 404 Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s such a default error file, in this case served by an nginx server. However, you can configure a server in a way that it serves you a certain resource/file, no matter what path you request. Let’s say you have an &lt;code&gt;index.html&lt;/code&gt; on the server and you configured it accordingly. You can now call &lt;code&gt;your-server.com/index.html&lt;/code&gt; but also &lt;code&gt;your-server.com/some/path/that/does-not-exist.html&lt;/code&gt;. It will always return the same &lt;code&gt;index.html&lt;/code&gt; file. Now, that file can also be a script instead of just some static HTML file. Otherwise your dynamic routes wouldn’t be that dynamic since they all serve exactly the same content.&lt;/p&gt;

&lt;p&gt;A &lt;a href="https://en.wikipedia.org/wiki/Front_controller"&gt;front controller&lt;/a&gt; is such a dynamic script that handles all requests to your server and serves content dynamically, e.g. by fetching data from a database, based on what the actual request was, and then generating an HTML response from a template. This way you can support routes with dynamic parts, that you don’t have to know in advance, like the &lt;code&gt;/posts/&amp;lt;post-slug&amp;gt;&lt;/code&gt; example from above.&lt;br&gt;
GitHub Pages&lt;/p&gt;

&lt;p&gt;GitHub Pages does not support such a front controller because it is not meant to serve dynamic content. Sure. You can use Javascript in your static HTML files to change its content dynamically, e.g. based on user interaction, and most web apps, as mentioned before, are nothing more than a static HTML file and then Javascript takes over from there. But all this happens in your browser and not on GitHub’s servers. So if you call &lt;code&gt;your-username.github.io/some/file.html&lt;/code&gt; it will look for exactly that file and nothing else and if it can’t find it, because you didn’t add it to your repository, it will show you this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lU5Bm0GY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5p7yetieh2mq5z9318ah.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lU5Bm0GY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5p7yetieh2mq5z9318ah.png" alt="GitHub Pages 404 Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That is GitHub’s default &lt;code&gt;404.html&lt;/code&gt; file. At this point I assume that most developers/users would now simply accept the bitter reality that GitHub Pages might not be the right service for them and instead move on to a more comprehensive hosting solution, where they have more control over what the server actually does behind the scenes. But not me! I’m a lazy minimalist and one platform account must be enough!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#an-oldfashioned-alternative"&gt;
  &lt;/a&gt;
  An old-fashioned alternative
&lt;/h3&gt;

&lt;p&gt;At first I considered just being fine with a compromise and instead of having “real” dynamic routes, I could go back in the history of single page apps and use the &lt;code&gt;#&lt;/code&gt; method, &lt;a href="https://www.w3schools.com/angular/tryit.asp?filename=try_ng_routing"&gt;like the old AngularJS&lt;/a&gt;. In case you ever wondered, the part after the &lt;code&gt;#&lt;/code&gt; is not really part of the actual URL a server responds to. It is just used by the browser to jump to an HTML anchor and you can access it in Javascript. The server does not even know about this part. It’s client-side only. But that means you can have routes that look like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;your-server.com/#/posts/&amp;lt;post-id&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The app lives at &lt;code&gt;/&lt;/code&gt; on the server and processes the part after &lt;code&gt;#&lt;/code&gt; when running in the browser. When clicking a link in your app, it just updates the part after &lt;code&gt;#&lt;/code&gt; and changes the content accordingly via Javascript. But that doesn’t look that nice and modern frameworks, like Next.js do not even support this form of routing anymore. &lt;a href="https://nuxtjs.org/docs/2.x/configuration-glossary/configuration-router#fallback"&gt;Vue’s Nuxt.js actually has a fallback option&lt;/a&gt; but still...&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;You already saw part of the solution in this post. It’s the 404 page. GitHub Pages actually allows you to add a custom &lt;code&gt;404.html&lt;/code&gt; to your repository, to adjust it to your project’s branding and so on. If you are familiar with the front controller pattern, you might have an “aahhhhhaaaa” moment now. The important part of this pattern is that it just takes any request and routes it to your app where the request is then handled. Well.. a 404 page is not much different. It handles aaaaall requests... that do not match any existing resource. You know where I am going with this? It is a bit different though. A classical front controller lives on the server and sends the desired response back to you as if the resource you requested actually exists physically. Tricking GitHub Pages into supporting dynamic routes is a bit more... tricky. Because it simply doesn’t! But we can make it look as if it does. The average human eye won’t notice the difference and it even works with the dynamic routing features of modern frameworks like Vue’s Nuxt.js or React’s Next.js.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#proof-of-concept"&gt;
  &lt;/a&gt;
  Proof of concept
&lt;/h3&gt;

&lt;p&gt;The simple trick is to let your custom &lt;code&gt;404.html&lt;/code&gt; redirect any request back to your app and then your app uses the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API"&gt;browser history API&lt;/a&gt; to update the URL that your browser shows, to whatever was requested originally. You need to pass that information to your app when redirecting. For that I use... guess what?... our old friend, the &lt;code&gt;#&lt;/code&gt;. I have a GitHub page set up here: &lt;a href="https://mktcode.github.io/static-dynamic-routing/"&gt;https://mktcode.github.io/static-dynamic-routing&lt;/a&gt; and its &lt;code&gt;404.html&lt;/code&gt; looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/static-dynamic-routing/#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/static-dynamic-routing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So instead of showing some 404 Not found! message, it just redirects you to the root path where the app lives. Note that this GitHub Page example lives in the subdirectory &lt;code&gt;/static-dynamic-routing/&lt;/code&gt; which is normal, when you set up a GitHub page for a repository. It will live under &lt;code&gt;&amp;lt;your-username&amp;gt;.github.io/&amp;lt;repo-name&amp;gt;/&lt;/code&gt;. That’s why we have to do some replacements here. Otherwise we’d redirect the user to &lt;code&gt;mktcode.github.io/&lt;/code&gt;. Fortunately you can &lt;a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site"&gt;configure a custom domain for your GitHub Page&lt;/a&gt; very easily and then you don’t have to take care of this.&lt;/p&gt;

&lt;p&gt;So now, no matter what route we call, we’ll end up at our app and it will know about that route, so it can act accordingly. In my little example I do not much more than replacing the displayed URL in the address bar and manipulating some content. That’s basically how dynamic routing works in those modern frameworks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;My App&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;My App&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Post Path: {PATH}&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pushState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Some title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/static-dynamic-routing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;header&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;header&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{PATH}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try opening this link in your browser: &lt;a href="https://mktcode.github.io/static-dynamic-routing/posts/my-post"&gt;https://mktcode.github.io/static-dynamic-routing/posts/my-post&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For a split second you can see the &lt;code&gt;#&lt;/code&gt; in your browser’s address bar. That’s when the redirect happens and then we pretend it never did happen. And that’s basically all there is to it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-with-nuxtjs"&gt;
  &lt;/a&gt;
  Use with Nuxt.js
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;If you are more the react type of person, you’ll have to implement that on your own. I’ll only show the Nuxt.js way.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nuxtjs.org/docs/2.x/features/file-system-routing#dynamic-routes"&gt;In Nuxt.js you can easily configure dynamic routes&lt;/a&gt; by just creating a file like &lt;code&gt;/pages/posts/_slug.vue&lt;/code&gt;. Nuxt will do the rest and you have routes like &lt;code&gt;/posts/my-post-title&lt;/code&gt;. This even works in static site mode but only if the site is delivered by the integrated Nuxt server or any other server configured in the same way (think: front controller pattern). With GitHub Pages this does not work and you’ll just see the 404 page. But here’s the proof that my approach works totally fine even with Nuxt.js:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mktcode.github.io/dynamic-nuxt-gh-pages/post/my-totally-dynamic-post-title"&gt;https://mktcode.github.io/dynamic-nuxt-gh-pages/post/my-totally-dynamic-post-title&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All it needs is &lt;a href="https://github.com/mktcode/dynamic-nuxt-gh-pages/blob/main/static/404.html"&gt;&lt;code&gt;the 404.html&lt;/code&gt; file in the &lt;code&gt;static&lt;/code&gt; directory&lt;/a&gt; and a &lt;a href="https://github.com/mktcode/dynamic-nuxt-gh-pages/blob/main/middleware/gh-pages-dynamic-routes.js"&gt;router middleware&lt;/a&gt;, which performs a nuxt-internal redirect to the original route, resulting in the address bar of your browser being updated. If that route does not exist in your application, the &lt;a href="https://nuxtjs.org/docs/2.x/concepts/views/#error-page"&gt;Nuxt error page&lt;/a&gt; shows. By the way... It now uses &lt;code&gt;#!&lt;/code&gt; for the redirect, to still allow normal HTML anchors. Everything that worked before should still work, plus... dynamic routes for GitHub Pages! Well... kind of. :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The End
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Hope you enjoyed my first ever article! :) Follow me on &lt;a href="https://twitter.com/@thecodelander"&gt;Twitter&lt;/a&gt; and &lt;a href="https://github.com/mktcode"&gt;GitHub&lt;/a&gt; and comment and bla bla bla. There’s more to come! Five years later... “Hey I think I’ll start writing dev articles!” :D&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Introducing Scatter Flow Diagram For Performance Engineering</title>
      <author>Harinder Seera 🇭🇲</author>
      <pubDate>Fri, 18 Jun 2021 10:08:01 +0000</pubDate>
      <link>https://dev.to/aws-builders/introducing-scatter-flow-diagram-for-performance-engineering-d45</link>
      <guid>https://dev.to/aws-builders/introducing-scatter-flow-diagram-for-performance-engineering-d45</guid>
      <description>&lt;p&gt;Other than the application architects, most often than not, performance engineers are the next people to know the overall application architecture and how everything fits together &amp;amp; communicates. Sometimes they are the only ones who understand it better.&lt;/p&gt;

&lt;p&gt;A while back a colleague reached out to me and requested I give him a high-level application architecture walk-through. He wanted to have this knowledge so he could debug a performance degradation. During the walk-through of the architecture, I was also producing response time scatter plots from different components to help him with his investigation. I was educating him but also helping him narrow down potential areas to focus his investigate.&lt;/p&gt;

&lt;p&gt;Architecture was complex and it required different system data to be analyzed. It became apparent to me that I needed a different and some what simple approach to help him better understand the architecture and make sense of the data. Hence I came up with Scatter Flow Diagram (shown below).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HxqgFbos--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c80uy4f324e2745t2qcs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HxqgFbos--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c80uy4f324e2745t2qcs.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scatter Flow Diagram is a novel way of combining high-level application architecture with scatter plot. It visualizes ingress and egress response time using scatter plots for each component. It overlays response time from each component onto the application architecture. It shows the flow of response time (right to left) across components and how it varying.&lt;/p&gt;

&lt;p&gt;I found the following benefits of using the Scatter Flow Diagram:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Visually we could see which component(s) are potential areas for his investigation. It gave him the starting point. This also helped him engage the right people to debug and fix the problem (highlighted below).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--14o9EzDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dksiqm7sc1g5ge4jidf3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--14o9EzDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dksiqm7sc1g5ge4jidf3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Leftmost graph response time ranges from 0 to 4000ms. The rightmost graph response time ranges from 0 to 600ms. Plus the leftmost graphs have a higher response time variance compared to the other two.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;He could share this visualization with other team members (within or outside) and observation easily viewable. Diagram visualized the data backing his observation. Teams didn't have to run multiple queries to extract and visualize the data or look at different dashboards.&lt;/li&gt;
&lt;li&gt;Different teams could also see the high-level architecture of how their own component communicates with other component.&lt;/li&gt;
&lt;li&gt;It was easy for us to overlay &amp;amp; visualize how response time was changing across each component.&lt;/li&gt;
&lt;li&gt;Also it highlighted areas where Observability was lacking.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This same diagram can be extended to response code or error rate across different components.&lt;/p&gt;




&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;If you enjoyed this article feel free to share on social media 🙂&lt;/p&gt;

&lt;p&gt;Say Hello on: &lt;a href="https://www.linkedin.com/in/hpseera/"&gt;Linkedin&lt;/a&gt; | &lt;a href="https://twitter.com/harinderseera"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github repo: &lt;a href="https://github.com/hseera"&gt;hseera&lt;/a&gt;&lt;/p&gt;

</description>
      <category>performance</category>
      <category>architecture</category>
      <category>visualization</category>
      <category>observability</category>
    </item>
  </channel>
</rss>
