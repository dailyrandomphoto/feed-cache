<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The Engineering Executive Operating System — Part 2 </title>
      <author>Conor Bronsdon</author>
      <pubDate>Fri, 30 Jul 2021 15:39:56 +0000</pubDate>
      <link>https://dev.to/linearb/the-engineering-executive-operating-system-part-2-2heg</link>
      <guid>https://dev.to/linearb/the-engineering-executive-operating-system-part-2-2heg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-engineering-executive-operating-system-part-2"&gt;
  &lt;/a&gt;
  The Engineering Executive Operating System — Part 2
&lt;/h2&gt;

&lt;p&gt;Today on the &lt;a href="https://devinterrupted.com/podcast/the-engineering-executive-operating-system-part-2"&gt;Dev Interrupted&lt;/a&gt;, we premiere the second and final episode in our two-part series with Tech Executive Consultant and author, Aviv Ben-Yosef.&lt;/p&gt;

&lt;p&gt;If you haven’t listened to the first episode, we highly recommend checking it out. Aviv is an expert at onboarding new employees, particularly those joining leadership positions.&lt;/p&gt;

&lt;p&gt;In episode 2 we discuss how leadership can provide a workplace culture where employees are encouraged to speak up and question leadership decisions as well as how to create high impact R&amp;amp;D organizations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://avivbenyosef.com/tech-executive-operating-system/"&gt;Get a sample chapter of Aviv’s book here.&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/6MrAOnueZ07n4KdjnXDx8M"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-2-highlights-include"&gt;
  &lt;/a&gt;
  Part 2 Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Each member of a team becoming a force multiplier&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“Chutzpah driven development”&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to have candid discussions between leadership and employees&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Providing a culture where employees can tell leadership they are wrong&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating high-impact R&amp;amp;D organizations and teams&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/H_oyLCAX2qw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#join-the-dev-interrupted-server"&gt;
  &lt;/a&gt;
  Join the Dev Interrupted Server
&lt;/h2&gt;

&lt;p&gt;With over 1400 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.com/invite/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NISG-j8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2878/1%2ABAy13fLk6AB3z5sJNtmP4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NISG-j8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2878/1%2ABAy13fLk6AB3z5sJNtmP4g.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://devinterrupted.com/podcast/the-engineering-executive-operating-system-part-2"&gt;https://devinterrupted.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>management</category>
      <category>leadership</category>
      <category>devops</category>
      <category>agile</category>
    </item>
    <item>
      <title>Unboxing a Database-How Databases Work Internally</title>
      <author>Elegberun Olugbenga</author>
      <pubDate>Fri, 30 Jul 2021 15:23:53 +0000</pubDate>
      <link>https://dev.to/gbengelebs/unboxing-a-database-how-databases-work-internally-155h</link>
      <guid>https://dev.to/gbengelebs/unboxing-a-database-how-databases-work-internally-155h</guid>
      <description>&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@nuvaproductions?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Javier Miranda&lt;/a&gt; on &lt;a href="https://unsplash.com/@nuvaproductions?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Databases are one of those abstract, mysterious things that "just work" when you run an insert statement, where's the data stored?. How is it stored? Why are queries so fast? What's underneath the black box of a database? Sometimes it all just feels like magic. &lt;/p&gt;

&lt;p&gt;It's 1 am in Lagos and I can't sleep. I pick up my phone and head to Google to help me demystify this black box. The next words you read are my attempt to unbox a database.&lt;/p&gt;

&lt;p&gt;My focus on this article will be on SQL databases but I believe the underlying concepts can be passed to other types of databases. Before we go on let us define some terms.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database
&lt;/h2&gt;

&lt;p&gt;A database is a set of physical files(data) on a hard disk stored and accessed electronically from a computer system. Usually created by the &lt;strong&gt;CREATE DATABASE&lt;/strong&gt; statement.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#database-management-system"&gt;
  &lt;/a&gt;
  Database management system
&lt;/h2&gt;

&lt;p&gt;A database management system is software that handles the storage, retrieval, and updating of data in a computer system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DQwsHzn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86sxwxawaoacafgf470t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DQwsHzn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86sxwxawaoacafgf470t.png" alt="dbms"&gt;&lt;/a&gt;&lt;/p&gt;
Popular database management systems



&lt;h2&gt;
  &lt;a href="#database-engine"&gt;
  &lt;/a&gt;
  Database engine
&lt;/h2&gt;

&lt;p&gt;A database engine is the underlying software component that a database management system uses to create, read, update and delete data from a database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-difference-between-a-database-management-system-and-a-database-engine"&gt;
  &lt;/a&gt;
  What is the difference between a database management system and a database engine?
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;database management&lt;/strong&gt; system is the software with its functions that allow us to connect to a &lt;strong&gt;database engine&lt;/strong&gt;. The database engines are the internal tools that allow or facilitate a certain number of operations on the tables and their data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-a-database-management-system-store-data"&gt;
  &lt;/a&gt;
  How does a database management system store data?
&lt;/h2&gt;

&lt;p&gt;Most database management systems store data in files. MySQL for example stores data in files in a specific directory that has the system variable "datadir". Opening a MySQL console and running the following command will tell you exactly where the folder is located.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysql&amp;gt;  SHOW VARIABLES LIKE 'datadir';
+---------------+-----------------+
| Variable_name | Value           |
+---------------+-----------------+
| datadir       | /var/lib/mysql/ |
+---------------+-----------------+
1 row in set (0.01 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;a href="https://stackoverflow.com/questions/10378693/how-does-mysql-store-data"&gt;stack overflow answer&lt;/a&gt; explains it really well.&lt;/p&gt;

&lt;p&gt;As you can see from the above command, my "datadir" was located in /var/lib/mysql/. The location of the "datadir" may vary in different systems. The directory contains folders and some configuration files. Each folder represents a MySQL database and contains files with data for that specific database, below is a screenshot of the "datadir" directory in my system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GG5qdLFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otqaz8lnxwoz2dajmdr7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GG5qdLFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otqaz8lnxwoz2dajmdr7.png" alt="mysql"&gt;&lt;/a&gt;&lt;/p&gt;
a data dir folder in a system



&lt;p&gt;Each folder in the directory represents a MySQL database. Each database folder contains files that represent the tables in that database. There are two files for each table, one with a .frm extension and the other with a .idb extension. See the screenshot below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YLFdTIy0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4m1q0u99tt8rezjjcq9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YLFdTIy0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4m1q0u99tt8rezjjcq9.png" alt="mysql2"&gt;&lt;/a&gt;&lt;/p&gt;
Files in a database folder



&lt;ul&gt;
&lt;li&gt;The .frm table file stores the table's format. &lt;a href="https://dev.mysql.com/doc/internals/en/frm-file-format.html"&gt;Details: MySQL .frm File Format&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;The .ibd file stores the table's data. &lt;a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-multiple-tablespaces.html"&gt;Details: InnoDB File-Per-Table Tablespaces&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we insert a record into a table we are actually inserting into a datafile. A page (representing the rows of the table)is created in that datafile. By default, all datafiles have a page size of 16KB, you can reduce or increase the page size depending on the database engine you are using.&lt;/p&gt;

&lt;p&gt;As more and more records are inserted into the table(datafile) several data pages are created.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-pages-relate-to-table-rows"&gt;
  &lt;/a&gt;
  How Pages Relate to Table Rows
&lt;/h2&gt;

&lt;p&gt;The maximum row length is slightly less than half a database page. For example, the maximum row length is slightly less than 8KB for the default 16KB InnoDB page size. For 64KB pages, the maximum row length is slightly less than 16KB.&lt;/p&gt;

&lt;p&gt;If a row does not exceed the maximum row length, all of its data is stored locally within the page. If a row exceeds the maximum row length the database engine stores a 20-byte pointer to the next page locally in the row, and stores the remaining rows externally in overflow pages.&lt;/p&gt;

&lt;p&gt;These two articles do a wonderful job of describing how data pages look in sql server. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.c-sharpcorner.com/UploadFile/ff0d0f/how-sql-server-stores-data-in-data-pages-part-1/"&gt;how-sql-server-stores-data-in-data-pages-part1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.c-sharpcorner.com/UploadFile/ff0d0f/how-sql-server-stores-data-in-data-pages-part-2/"&gt;how-sql-server-stores-data-in-data-pages-part2&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let us assume we have a table(tblEmployees) and we insert a single record into it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;INSERT&lt;/span&gt; &lt;span class="n"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;tblEmployees&lt;/span&gt; &lt;span class="nf"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;Abhishek&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a sample data page of that insertion into the datafile. It is divided into 3 main sections&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#section-1page-header"&gt;
  &lt;/a&gt;
  Section 1:Page Header
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9A7BQTjP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2hmh4p65rcqnj85epihc.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9A7BQTjP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2hmh4p65rcqnj85epihc.jpeg" alt="page-header"&gt;&lt;/a&gt;&lt;/p&gt;
Page Header



&lt;ul&gt;
&lt;li&gt;m_type =1 indicates that it is a data page.&lt;/li&gt;
&lt;li&gt;m_nextpage: This is the link to the memory location of the next data page that will be created, in this case, we have a single data page so it is(0:0).&lt;/li&gt;
&lt;li&gt;m_Prevpage: This is the link to the memory location of the previous data page. Since we have a single data page the value is(0:0). &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#section-2actual-data"&gt;
  &lt;/a&gt;
  Section 2:Actual Data
&lt;/h3&gt;

&lt;p&gt;The actual data that we insert into our table is stored in this section. If you remember, we inserted 1 record with an employee named "Abhishek". That record will be saved here, in this section as shown below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NmcIdo9R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hnmrbzwtu5xun058tv07.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NmcIdo9R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hnmrbzwtu5xun058tv07.jpeg" alt="actual-data"&gt;&lt;/a&gt;&lt;/p&gt;
Actual Data



&lt;ul&gt;
&lt;li&gt;Record Type = PRIMARY_RECORD, which means it's our actual data.&lt;/li&gt;
&lt;li&gt;Memory Dump = This points to the Actual data's location in memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#section-3offset-table"&gt;
  &lt;/a&gt;
  Section 3:Offset Table
&lt;/h3&gt;

&lt;p&gt;Offset Table: This section of the data file tells you where the record Abhishek is saved exactly in memory.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JFNYUJE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxp7ska6onsxbztdwvw2.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JFNYUJE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxp7ska6onsxbztdwvw2.jpeg" alt="offset-table"&gt;&lt;/a&gt;&lt;/p&gt;
Offset Table



&lt;p&gt;If you see the row offset, it's pointing to the actual data's location.&lt;/p&gt;

&lt;p&gt;These diagrams show how rows are stored in a  datafile.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-does-indexing-work"&gt;
  &lt;/a&gt;
  How does indexing work?
&lt;/h2&gt;

&lt;p&gt;A database index is a data structure that improves the speed of data retrieval operations on a database table.&lt;/p&gt;

&lt;p&gt;Indexing is the way to get an unordered table into an order that will maximize the query efficiency. A Clustered Index is a special type of index that reorders the way records in the table are physically stored on the disk. So how does it work?&lt;/p&gt;

&lt;p&gt;In reality, the database table does not reorder itself every time the query conditions change to optimize the query performance, what happens is that when you create an index you cause the database to create a data structure which in most cases is likely to be a B+Tree. The main advantage of this data structure is that it is sortable and this makes our search more efficient.&lt;/p&gt;

&lt;p&gt;A B+Tree is a type of dictionary, no more and no less. If you think about a linguistic dictionary, it's ordered by "words", and associated with each word is a definition. You look up a word and get a definition.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IaHANN8P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yrqlqco1psk4ex01zpi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IaHANN8P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yrqlqco1psk4ex01zpi.jpg" alt="Indexed Dictionary"&gt;&lt;/a&gt;&lt;/p&gt;
An Indexed Dictionary



&lt;p&gt;So the context of a map data structure is that you have keys ("words") and you want to map this to values ("definitions").&lt;/p&gt;

&lt;p&gt;B+trees have an advantage for certain types of queries. For example, you can do range queries, say if you want to find all entries where the key is between two values (e.g. all words in the dictionary starting with "q").&lt;/p&gt;

&lt;p&gt;B+trees are page-structured (meaning they can be implemented on top of fixed-size disk pages; which minimizes the number of disk accesses needed to perform a query.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;Let us assume we have a table called Employee_Detail. We can create a clustered index with the following command on the Emp_Iid column.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Create Clustered Index My_ClusteredIndex  
on Employee_Detail(Emp_Iid) 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's insert some records&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Head over to this &lt;a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html"&gt;site&lt;/a&gt; and insert records from 1 to 6 simulating how records will be inserted in a database. You will see how the tree automatically adjusts as records are being inserted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Another thing to note the data value locations never change but the (pointers to those values are the ones that are constantly shifting).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The B+Tree will be formed like this. - The center point of the records which in our case is 3 will be the head node. All the Ids that are lower than 3 will be moved to the left and the Ids greater than 3 to the right as shown in this diagram.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WOOzUrI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8ahdte53ai5d1vshxwv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WOOzUrI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8ahdte53ai5d1vshxwv.png" alt="btree"&gt;&lt;/a&gt;&lt;/p&gt;
BTree Visualized



&lt;p&gt;The left side value of each node is always less than the node itself and the right-side value is always greater than the node. The last set of values are called leaf nodes and they contain the actual data value while the intermediate rows hold pointers to the actual data value location.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Think of it like a dictionary that contains a name tag. All the words with "c" are labeled under the "c" tag. words higher than "c" are shifted to the right and words lower than "c" to the left. The tag "c" does not contain the value but a (pointer) to the actual words&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;From the earlier explanation on how SQL stores data in data pages we can infer that the leaf nodes represent data pages containing the table rows. &lt;/p&gt;

&lt;p&gt;If we want to get the employees where Emp_Iid is 4.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;select * from employee_Detail where Emp_Iid=4  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In a normal case, the system will perform 4 comparisons, the first for 1, the second for 2, and the third for 3  and in the fourth comparison, it will find the desired result.&lt;/p&gt;

&lt;p&gt;Using an index, the system only does a single comparison because 3 is the head node of the B+Tree and it knows that 4 is greater than 3 so the record will be on the right. Once it checks the next key It will find a pointer to the data value 4 which is the value that is being requested.&lt;/p&gt;

&lt;p&gt;From this example, we can say that by using an index we can increase the speed of data retrieval.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#components-of-a-database-engine"&gt;
  &lt;/a&gt;
  Components of a Database Engine
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eveqe-In--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0wqk2vpxfvi7br0dvce.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eveqe-In--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0wqk2vpxfvi7br0dvce.png" alt="database-engine"&gt;&lt;/a&gt;&lt;/p&gt;
Components of a database engine



&lt;p&gt;All SQL database engines have a compiler to translate the SQL statement into byte code and a virtual machine to evaluate the byte code. &lt;/p&gt;

&lt;p&gt;The RDBMS processes the SQL statement by:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.Parsing&lt;/strong&gt;: Validates the statement by checking the SQL statement against the system’s catalog and seeing if these databases, tables, and columns that the user wants exist, and if the user has privileges to execute the SQL query.&lt;br&gt;
Under the parsing stage, there is a syntax check, semantic check, and shared pool check.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#syntax-check"&gt;
  &lt;/a&gt;
  Syntax check
&lt;/h3&gt;

&lt;p&gt;A statement that breaks a rule for well-formed SQL syntax fails the check. For example, the following statement fails because the keyword FROM is misspelled as FORM:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SQL&amp;gt; SELECT * FORM employees;
SELECT * FORM employees
         *
ERROR at line 1:
ORA-00923: FROM keyword not found where expected
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#semantic-check"&gt;
  &lt;/a&gt;
  Semantic Check
&lt;/h3&gt;

&lt;p&gt;The semantics of a statement is its meaning. A semantic check determines whether a statement is meaningful, for example, whether the objects and columns in the statement exist.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SQL&amp;gt; SELECT * FROM nonexistent_table;
SELECT * FROM nonexistent_table
              *
ERROR at line 1:
ORA-00942: table or view does not exist

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#shared-pool-check"&gt;
  &lt;/a&gt;
  Shared Pool Check
&lt;/h3&gt;

&lt;p&gt;During the parse, the database performs a shared pool check to determine whether it can skip resource-intensive steps of statement processing.&lt;/p&gt;

&lt;p&gt;To this end, the database uses a hashing algorithm to generate a hash value for every SQL statement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.Compiling (Binding)&lt;/strong&gt;: Generates a query plan for the statement which is the binary representation of the steps required to carry out the statement. In almost all SQL engines, it will be byte code. What has now been compiled is a command-line shell — a program that reads SQL statements and now sends them to the database server for optimization and execution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.Optimizing&lt;/strong&gt;: Optimizes the query plan and chooses the best algorithms such as for searching and sorting. This feature is called the Query Optimizer. The Query Optimizer devises several possible ways to execute the query i.e. several possible execution plans. An execution plan is, in essence, a set of physical operations (an index seek, a nested loop join, and so on) to be performed.&lt;br&gt;
Once this is done, we now have a prepared SQL statement.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;This example shows the execution plan of a SELECT statement when AUTOTRACE is enabled. The statement selects the last name, job title, and department name for all employees whose last names begin with the letter A.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT e.last_name, j.job_title, d.department_name 
FROM   hr.employees e, hr.departments d, hr.jobs j
WHERE  e.department_id = d.department_id
AND    e.job_id = j.job_id
AND    e.last_name LIKE 'A%';

Execution Plan
----------------------------------------------------------
Plan hash value: 975837011

--------------------------------------------------------------------------------
| Id| Operation                     | Name        |Rows|Bytes|Cost(%CPU)|Time  |
-------------------------------------------------------------------------------------
| 0 | SELECT STATEMENT              |             |  3 | 189 | 7(15)| 00:00:01 |
|*1 |  HASH JOIN                    |             |  3 | 189 | 7(15)| 00:00:01 |
|*2 |   HASH JOIN                   |             |  3 | 141 | 5(20)| 00:00:01 |
| 3 |    TABLE ACCESS BY INDEX ROWID| EMPLOYEES   |  3 |  60 | 2 (0)| 00:00:01 |
|*4 |     INDEX RANGE SCAN          | EMP_NAME_IX |  3 |     | 1 (0)| 00:00:01 |
| 5 |    TABLE ACCESS FULL          | JOBS        | 19 | 513 | 2 (0)| 00:00:01 |
| 6 |   TABLE ACCESS FULL           | DEPARTMENTS | 27 | 432 | 2 (0)| 00:00:01 |
-------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
--------------------------------------------------------

   1 - access("E"."DEPARTMENT_ID"="D"."DEPARTMENT_ID")
   2 - access("E"."JOB_ID"="J"."JOB_ID")
   4 - access("E"."LAST_NAME" LIKE 'A%')
       filter("E"."LAST_NAME" LIKE 'A%')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4.Executing&lt;/strong&gt;: The RDBMS executes the SQL statement by running the query plan.&lt;/p&gt;

&lt;p&gt;For an in-depth view, check out this &lt;a href="https://docs.oracle.com/database/121/TGSQL/tgsql_sqlproc.htm#TGSQL186"&gt;tutorial&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;This article has covered a lot of ground, but by now you should have an understanding (or at least an appreciation) of the components and processes that form the databases we use every day.&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

&lt;p&gt;Follow me here and across my social media for more content like this &lt;a href="https://www.linkedin.com/in/olugbenga-elegberun/"&gt;Linkedin&lt;/a&gt;. &lt;a href="https://twitter.com/ElegberunDaniel?s=09"&gt;Twitter&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references-and-more"&gt;
  &lt;/a&gt;
  REFERENCES AND MORE
&lt;/h2&gt;

&lt;p&gt;1.&lt;a href="https://blog.devgenius.io/how-a-sql-database-engine-works-c319200889d7"&gt;How a sql database engine works by Andres reyes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href="https://medium.com/@grepdennis/how-a-sql-database-engine-works-c67364e5cdfd"&gt;How a sql database engine works by Dennis Pham&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href="https://www.red-gate.com/simple-talk/databases/sql-server/performance-sql-server/the-sql-server-query-optimizer/"&gt;The sql server query optimizer by Benjamin Nevarez&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;a href="https://www.freecodecamp.org/news/database-indexing-at-a-glance-bb50809d48bd/"&gt;An in-depth look at Database Indexing by Kousik Nath&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;a href="https://dzone.com/articles/database-btree-indexing-in-sqlite"&gt;Database btree indexing in sqlite by Dhanushka Madushan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6.&lt;a href="https://www.sqlskills.com/blogs/paul/inside-the-storage-engine-using-dbcc-page-and-dbcc-ind-to-find-out-if-page-splits-ever-roll-back/"&gt;Inside the storage engine by Paul Randal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;7.&lt;a href="https://cs.stackexchange.com/questions/27985/b-tree-and-how-it-is-used-in-practice"&gt;B-tree and how it is used in practice answered by Pseudonym&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;8.&lt;a href="https://www.c-sharpcorner.com/UploadFile/f0b2ed/index-in-sql/"&gt;Index in sql by Pankaj Kumar Choudhary&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;9.&lt;a href="https://www.c-sharpcorner.com/UploadFile/ff0d0f/how-sql-server-stores-data-in-data-pages-part-1/"&gt;How sql server stores data in data pages part 1 by Abhishek Yadav&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;10.&lt;a href="https://www.c-sharpcorner.com/UploadFile/ff0d0f/how-sql-server-stores-data-in-data-pages-part-2/"&gt;How sql server stores data in data pages part 2 by Abhishek Yadav&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;11.&lt;a href="https://docs.oracle.com/database/121/TGSQL/tgsql_sqlproc.htm#TGSQL186"&gt;SQL Processing by Oracle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;12.&lt;a href="https://stackoverflow.com/questions/2468202/how-does-a-sql-query-work"&gt;How does a sql query work by &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;13.&lt;a href="https://hackernoon.com/how-sql-database-engine-work-483e32o7"&gt;How sql database engine works by Vijay Singh Khatri&lt;/a&gt;&lt;/p&gt;

</description>
      <category>database</category>
      <category>bigdata</category>
      <category>distributedsystems</category>
    </item>
    <item>
      <title>Fun with Compose: Bad UI in a Great Framework</title>
      <author>Michael Friend</author>
      <pubDate>Fri, 30 Jul 2021 15:03:14 +0000</pubDate>
      <link>https://dev.to/touchlab/fun-with-compose-bad-ui-in-a-great-framework-1b43</link>
      <guid>https://dev.to/touchlab/fun-with-compose-bad-ui-in-a-great-framework-1b43</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;To celebrate Jetpack Compose finally hitting 1.0, I wanted to take a bit of a deep dive to see what the framework has to offer. Instead of more of the same code labs with useful UI, I decided to bring back an old reddit trend of creating the absolute worst volume control UI possible (&lt;a href="https://uxdesign.cc/the-worst-volume-control-ui-in-the-world-60713dc86950"&gt;highlights here&lt;/a&gt;). You can take a look at the code on my Github. &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mrf7"&gt;
        mrf7
      &lt;/a&gt; / &lt;a href="https://github.com/mrf7/volume-gore"&gt;
        volume-gore
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-results"&gt;
  &lt;/a&gt;
  The Results
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Microtransactions&lt;/th&gt;
&lt;th&gt;Radio Buttons&lt;/th&gt;
&lt;th&gt;Catapult (WIP)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src="https://i.giphy.com/media/gCeelw0MJgkjCQ7fiF/giphy.gif"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="https://i.giphy.com/media/qbKWJdGpLOBxZvR70o/giphy.gif"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="https://i.giphy.com/media/VWD8QmlLT0h2Ymw2kW/giphy.gif"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Digits Of PI&lt;/th&gt;
&lt;th&gt;Seven Segment&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src="https://i.giphy.com/media/8h1loDBBTvdzGyI3Re/giphy.gif"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="https://i.giphy.com/media/dLYhwt8pRCIQPwu30m/giphy.gif"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#takeaways"&gt;
  &lt;/a&gt;
  Takeaways
&lt;/h2&gt;

&lt;p&gt;As someone who’s never really been a fan of UI work, building UI in Compose has been extremely pleasant and straightforward. Things like custom animations that I haven't done in the View system were surprisingly simple and concise. With Compose I no longer need to context switch between writing Kotlin code and XML layouts, the flow between writing backend code and UI code is much more seamless. The best part was the often lauded &lt;code&gt;LazyColumn&lt;/code&gt; in compose that turns 3 files worth of boilerplate &lt;code&gt;RecyclerView&lt;/code&gt; code into a couple lines. While it took some effort to change my approach for the Compose mental model, this is a huge leap in the right direction towards making UI work quicker for experienced devs and easier for new devs to learn. &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#lessons-learned"&gt;
  &lt;/a&gt;
  Lessons Learned
&lt;/h2&gt;

&lt;p&gt;A vital concept when learning Compose is how the runtime manages state and recomposition via &lt;code&gt;(Mutable)State&lt;/code&gt; objects. Most of the "magic" of recomposition relies on the &lt;code&gt;getValue&lt;/code&gt; and &lt;code&gt;setValue&lt;/code&gt; methods of these classes. and if you mistakenly go around these methods to read and update your apps state, you can actually prevent the UI from updating as you intended. &lt;/p&gt;

&lt;p&gt;I learned this the hard way while implementing the editable seven segment display by using a &lt;code&gt;MutableState&amp;lt;MutableList&amp;gt;&lt;/code&gt; and updating the underlying &lt;code&gt;MutableList&lt;/code&gt; values on user interaction (i.e. &lt;code&gt;state.value[index] = newValue&lt;/code&gt;). Desugaring that statement to &lt;code&gt;state.getValue()[index] = newValue&lt;/code&gt; we see that we're never calling &lt;code&gt;MutableState.setValue&lt;/code&gt;, so the Compose runtime has no indication of the underlying value change, never triggering a recomposition. On top of that, even if something else triggered a recomposition, the UI wouldn't be updated since we mutated the list without changing the reference, so the underlying equality check used to determine if our composable should run again  never detects a change.&lt;/p&gt;

&lt;p&gt;Luckily,Compose gives us a &lt;code&gt;mutableStateListOf(...)&lt;/code&gt; and &lt;code&gt;List.toMutableStateList()&lt;/code&gt; that return a &lt;code&gt;SnapshotStateList&lt;/code&gt;, which is a subclass of &lt;code&gt;MutableList&lt;/code&gt; (and equivalents for &lt;code&gt;Maps&lt;/code&gt;). That means we can just treat it as a  &lt;code&gt;MutableList&lt;/code&gt; and the state updates will be handled for us when we do things like &lt;code&gt;snapshotStateList[index]  = newValue&lt;/code&gt;. The main rule of thumb to learn from this is that in Compose you should avoid mutating objects you intend to use as a state and instead emit a brand new value to your LiveData/Flow/State using the &lt;code&gt;copy&lt;/code&gt; method on data classes. You can force this practice on yourself by avoiding &lt;code&gt;var&lt;/code&gt;s entirely in classes used for UI state. &lt;/p&gt;

&lt;p&gt;For a demonstration of this issue, here’s a snippet showing my initial &lt;code&gt;MutableList&lt;/code&gt; approach, a functional workaround I made using a list of mutable states, and the proper solution using &lt;code&gt;mutableStateListOf()&lt;/code&gt;. &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Now that Compose is officially at 1.0, you should give it a shot ASAP. Wherever you update the state of your UI, keep an eye out for spots that mutate the value in the &lt;code&gt;State&lt;/code&gt; instead of the &lt;code&gt;State&lt;/code&gt; itself. Above all, don't be afraid to get creative and have fun when playing with compose, you might be surprised by the things you're able to make easily compared to the old View system. &lt;/p&gt;

</description>
      <category>android</category>
      <category>compose</category>
      <category>ux</category>
      <category>jetpackcompose</category>
    </item>
    <item>
      <title>Getting Started with Python Web Development. </title>
      <author>Mwenda Harun Mbaabu</author>
      <pubDate>Fri, 30 Jul 2021 14:59:41 +0000</pubDate>
      <link>https://dev.to/grayhat/getting-started-with-python-web-development-1jl9</link>
      <guid>https://dev.to/grayhat/getting-started-with-python-web-development-1jl9</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NUaZbPgE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4xfy2nf4y2327ki8hi1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NUaZbPgE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4xfy2nf4y2327ki8hi1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt; is an interpreted, object-oriented, high-level programming language with dynamic semantics. It has high-level built in data structures, combined with dynamic typing and dynamic binding, make it very attractive for Rapid Application Development, as well as for use as a scripting or glue language to connect existing components together. &lt;/p&gt;

&lt;p&gt;Python has a number of frameworks, all geared towards their particular brand of application development. In this boot camp we are going to specifically learn flask and FastAPI. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-framework"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Web Framework&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;web framework&lt;/strong&gt; is an architecture containing tools, libraries, and functionalities suitable to build and maintain massive web projects using a fast and efficient approach. &lt;br&gt;
They are designed to streamline programs and promote code reuse. &lt;br&gt;
To create the server-side of the web application, you need to use a server-side language. Python is home to numerous such frameworks, famous among which are Django, &lt;strong&gt;Flask&lt;/strong&gt; and &lt;strong&gt;FastAPI&lt;/strong&gt; .&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#fastapi"&gt;
  &lt;/a&gt;
  &lt;strong&gt;FastAPI&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;From the official documentation, FastAPI is a modern [and] fast (high-performance) web framework for building APIs with Python 3.6+ based on standard Python type hints.&lt;br&gt;
As evident from the name, FastAPI is extremely fast and it owes this to the to out of the box support of the async feature of Python 3.6+. This is why it is recommended to use the latest versions of Python.&lt;br&gt;
A number of tech giants like Microsoft, Uber and Netflix are already using FastAPI to build their applications.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#key-features-of-fastapi"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Key features of FastAPI&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Fast:&lt;/strong&gt; It offers very high performance, on par with NodeJS and Go (thanks to Starlette and Pydantic). It is considered to be one of the fastest Python frameworks available.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Fast to code:&lt;/strong&gt; It increases the speed to develop applications by about 200% to 300%.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Intuitive:&lt;/strong&gt; It offers great editor support. The developer needs to spend less time debugging the code to verify whether the code syntax is correct or not.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Less bugs:&lt;/strong&gt; It reduces about 40% of human (developer) induced bugs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Easy:&lt;/strong&gt; It is designed to be easy to use and learn. Also, the official documentation is lucid and well structured and thus takes less time to read.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Short:&lt;/strong&gt; It supports minimize code duplication. It offers multiple features from each parameter declaration. It also has fewer bugs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Standards-based:&lt;/strong&gt; It is based on (and fully compatible with) the open standards for APIs, OpenAPI (previously known as Swagger) and JSON schema.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Robust:&lt;/strong&gt; Get production-ready code with automatic interactive documentation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#python-virtual-environments"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Python Virtual Environments.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is often useful to have one or more Python environments where you can experiment with different combinations of packages without affecting your main installation.&lt;br&gt;
 Python supports this through virtual environments. The virtual environment is a copy of an existing version of Python with the option to inherit existing packages.&lt;br&gt;
 A virtual environment is also useful when you need to work on a shared system and do not have permission to install packages as you will be able to install them in the virtual environment. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-a-python-virtual-environment"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Creating a Python virtual environment.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1). Install the virtualenv package&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pip3&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;virtualenv&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2). Create the virtual environment,&lt;/strong&gt; for our case called dev.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;venv&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;virtualenv&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3). Activate the virtual environment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mac OS / Linux :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Windows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt;\&lt;span class="n"&gt;Scripts&lt;/span&gt;\&lt;span class="n"&gt;activate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4). Deactivate the virtual environment.&lt;/strong&gt;&lt;br&gt;
To deactivate the virtual environment and use your original Python environment, simply type &lt;strong&gt;‘deactivate’.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;deactivate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Python virtualenv documentation:&lt;/strong&gt; &lt;a href="https://docs.python.org/3/tutorial/venv.html"&gt;https://docs.python.org/3/tutorial/venv.html&lt;/a&gt;  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hello-world-fastapi-app"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Hello World FASTAPI App&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_root&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"Message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Hello World"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#running-you-hello-world-program-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Running You Hello World program 🥳 🥳 🥳 :&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Make sure you have uvicord installed using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;uvicorn&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;standard&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the server with a prompt to reload everytime you makes some changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;uvicorn&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nb"&gt;reload&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#more-fastapi-resources"&gt;
  &lt;/a&gt;
  &lt;strong&gt;More FastAPI Resources.&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Working with templates:&lt;/strong&gt; 
&lt;a href="https://fastapi.tiangolo.com/advanced/templates/"&gt;https://fastapi.tiangolo.com/advanced/templates/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Working with static files:&lt;/strong&gt; &lt;br&gt;
&lt;a href="https://fastapi.tiangolo.com/tutorial/static-files/"&gt;https://fastapi.tiangolo.com/tutorial/static-files/&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Deploying FastAPI service on Amazon Web Services:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://adem.sh/blog/tutorial-fastapi-aws-lambda-serverless"&gt;https://adem.sh/blog/tutorial-fastapi-aws-lambda-serverless&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#flask"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Flask&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Python &lt;strong&gt;Flask&lt;/strong&gt; Framework is a lightweight micro-framework based on Werkzeug, Jinja2.&lt;br&gt;
It is called a micro framework because it aims to keep its core functionality small yet typically extensible to cover an array of small and large applications. &lt;br&gt;
Flask Framework depends on two external libraries: The Jinja2 template, Werkzeug WSGI toolkit. &lt;/p&gt;

&lt;p&gt;Remember to use the virtual environment , and while inside your  virtual environment run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;  &lt;span class="n"&gt;flask&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pip3&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#hello-world-flask-application"&gt;
  &lt;/a&gt;
  Hello World Flask Application
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello, World!'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="o"&gt;---&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;____&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;___&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-creating-flask-app-object"&gt;
  &lt;/a&gt;
  &lt;strong&gt;- Creating Flask App Object.&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;The Python flask module contains all the classes and functions needed for building a Flask app. The Flask class can be imported to create the main application object. It takes the name of the app as an argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Import Flask class
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="c1"&gt;# Create Flask object
&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-running-flask-app"&gt;
  &lt;/a&gt;
  &lt;strong&gt;- Running Flask App.&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;A Flask app can be run by exporting the FLASK_APP environment variable and running flask run in the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#creating-a-route"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Creating a Route.&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Routes in a Flask app can be created by defining a view function and associating a URL with it using the route() decorator. Routes specify how the Flask app handles requests it receives, such as what to display on the webpage at a certain URL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello, World!'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#returning-html-from-route"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Returning HTML From Route.&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;In a Flask app, HTML can be returned from a view function to be rendered on a webpage. The HTML can be returned as a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'&amp;lt;h1&amp;gt;Hello, World!&amp;lt;/h1&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#variable-rules"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Variable Rules.&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Variable rules allow a Flask app to respond to dynamic URLs. Variable sections of a URL can be indicated by angular brackets and an optional converter: &lt;a&gt;converter:variable_name&lt;/a&gt;. These variable parts will then be passed to the view function as arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/page/&amp;lt;int:pg_num&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pg_num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;h1&amp;gt;Displaying results for page &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;pg_num&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;/h1&amp;gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#name-main"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;".&lt;/strong&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;”&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt; &lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;____&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;___&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The conditional check if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;" simply checks if the script being executed is app.py.&lt;br&gt;
Say you created a script called utils.py that only contains print(&lt;strong&gt;name&lt;/strong&gt;). If you import utils.py into app.py and run app.py, the print statement from utils.py will output utils, which is the name of the file. &lt;br&gt;
In the case of app.py the name variable will be “main”.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Note:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;If you want to install Flask with support for async, use the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pip3&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create a view function using async:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/embed/&amp;lt;embed_id&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_embed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;embed_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;async_render_embed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;embed_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#caveat"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Caveat:&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Async support in flask comes as an add-on 🥲.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>python</category>
      <category>datascience</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>My solution for React Router type safety</title>
      <author>Leonid Fenko</author>
      <pubDate>Fri, 30 Jul 2021 14:52:48 +0000</pubDate>
      <link>https://dev.to/fenok/my-solution-for-react-router-type-safety-53hd</link>
      <guid>https://dev.to/fenok/my-solution-for-react-router-type-safety-53hd</guid>
      <description>&lt;p&gt;I like my code fully typed. Unfortunately, type safety for route parameters has never been a strong suit of React Router.&lt;/p&gt;

&lt;p&gt;If all you need is to build a path with parameters, the use of &lt;a href="https://reactrouter.com/web/api/generatePath"&gt;generatePath&lt;/a&gt; will give you some typing, albeit &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/issues/52914"&gt;not perfect&lt;/a&gt;. However, there is no built-in way to build a query or a hash, let alone type them, and there is no type safety for a route state either.&lt;/p&gt;

&lt;p&gt;Things get even worse when it comes to parsing. There is no built-in way to parse a query or a hash, and all typing is almost exclusively done by casting, which is error-prone.&lt;/p&gt;

&lt;p&gt;There are some libraries for providing this type safety, but they are more or less incomplete and restrictive. The best I've seen so far is &lt;a href="https://www.npmjs.com/package/typesafe-routes"&gt;typesafe-routes&lt;/a&gt;, but it offers no type safety for a route state and a hash, and it puts restrictions on what paths can be used. For instance, it doesn't support custom regexps for parameters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h2&gt;

&lt;p&gt;Enter &lt;a href="https://www.npmjs.com/package/react-router-typesafe-routes"&gt;react-router-typesafe-routes&lt;/a&gt;. It tries to be as comprehensive, extensible, and non-restrictive as possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#route-definition"&gt;
  &lt;/a&gt;
  Route definition
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-typesafe-routes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./path/to/state&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someRoute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/path/:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are several helpers for processing different parts of a route:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;path&lt;/code&gt; uses &lt;a href="https://reactrouter.com/web/api/generatePath"&gt;generatePath&lt;/a&gt; to build a path string, making it possible to use any path template that's compatible with React Router. When it comes to parsing, React Router extracts params from a path string, and &lt;code&gt;path&lt;/code&gt; performs various checks on these params to ensure that they belong to the specified path template. By default, &lt;code&gt;path&lt;/code&gt; infers types of path params from a path template in the same way as &lt;a href="https://reactrouter.com/web/api/generatePath"&gt;generatePath&lt;/a&gt; does.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;query&lt;/code&gt; uses (configurable!) &lt;a href="https://www.npmjs.com/package/query-string"&gt;query-string&lt;/a&gt; to build and parse a query string. By default, &lt;code&gt;query&lt;/code&gt; uses the same types for query params as &lt;a href="https://www.npmjs.com/package/query-string"&gt;query-string&lt;/a&gt; does.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;hash&lt;/code&gt; just takes care of the &lt;code&gt;#&lt;/code&gt; symbol while building and parsing a hash string. By default, &lt;code&gt;hash&lt;/code&gt; uses the &lt;code&gt;string&lt;/code&gt; type for a hash.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;state&lt;/code&gt; is an ad-hoc helper written by the user. The library doesn't provide a generic helper for route state processing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As expected, the types can be improved:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-typesafe-routes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someRoute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/path/:id(&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;d+)?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;optional&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;search&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;optional&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="c1"&gt;// Use "" as a fallback&lt;/span&gt;
    &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;subscribe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;param&lt;/code&gt; helper defines a set of transformers that transform values while building and parsing. The built-in transformers are &lt;code&gt;param.string&lt;/code&gt;, &lt;code&gt;param.number&lt;/code&gt;, &lt;code&gt;param.boolean&lt;/code&gt;, &lt;code&gt;param.null&lt;/code&gt;, &lt;code&gt;param.date&lt;/code&gt;, &lt;code&gt;param.oneOf()&lt;/code&gt;, and &lt;code&gt;param.arrayOf()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;optional&lt;/code&gt; modifier means that the corresponding value can be &lt;code&gt;undefined&lt;/code&gt;. An unsuccessful parsing of an &lt;code&gt;optional&lt;/code&gt; parameter will also result in &lt;code&gt;undefined&lt;/code&gt;. It's possible to specify a fallback value that will be returned instead of &lt;code&gt;undefined&lt;/code&gt;. This should be particularly useful for query params.&lt;/p&gt;

&lt;p&gt;Note that query params are &lt;code&gt;optional&lt;/code&gt; by their nature. React Router doesn't consider the query part on route matching, and the app shouldn't break in case of manual URL changes.&lt;/p&gt;

&lt;p&gt;The transformers are very permissive. It's possible to (natively!) store arrays in a query and even in a path, and it's possible to write custom transformers for storing any serializable data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#route-usage"&gt;
  &lt;/a&gt;
  Route usage
&lt;/h3&gt;

&lt;p&gt;Use &lt;code&gt;Route&lt;/code&gt; components as usual:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;someRoute&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./path/to/routes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;someRoute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use &lt;code&gt;Link&lt;/code&gt; components as usual:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;someRoute&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./path/to/routes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Everything is fully typed!&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;someRoute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;search&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;strawberries&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;someRoute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buildLocation&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;private&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;search&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;strawberries&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Parse params with usual hooks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useParams&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;someRoute&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./path/to/routes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// You can use useRouteMatch() instead of useParams()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;someRoute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;useParams&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Parse only what you need:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useParams&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;someRoute&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./path/to/routes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Again, you can also use useRouteMatch()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;someRoute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parsePath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;useParams&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;someRoute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parseQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;someRoute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parseHash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;someRoute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parseState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;p&gt;A more detailed description is available at the &lt;a href="https://github.com/fenok/react-router-typesafe-routes#readme"&gt;project page&lt;/a&gt;. The library requires battle-testing and has yet to reach version &lt;code&gt;1.0.0&lt;/code&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Beating TimSort at Merging</title>
      <author>Adam Gordon Bell</author>
      <pubDate>Fri, 30 Jul 2021 14:49:40 +0000</pubDate>
      <link>https://dev.to/adamgordonbell/beating-timsort-at-merging-29hc</link>
      <guid>https://dev.to/adamgordonbell/beating-timsort-at-merging-29hc</guid>
      <description>&lt;p&gt;Here is a problem. You are tasked with improving the hot loop of a Python program: maybe it is an in-memory sequential index of some sort. The slow part is the updating, where you are adding a new sorted list of items to the already sorted index. You need to combine two sorted lists and keep the result sorted. How do you do that update?&lt;/p&gt;

&lt;p&gt;Yes, this sounds like a LeetCode problem, and maybe in the real-world you would reach for some existing &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/SortedSet.html"&gt;sorted set&lt;/a&gt; &lt;a href="http://www.cplusplus.com/reference/set/set/"&gt;data structure&lt;/a&gt;, but if you were working with python lists, you might do something like this&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;merge_sorted_lists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;sorted_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt; &lt;span class="c1"&gt;# Compare both heads
&lt;/span&gt;            &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Pop from the head
&lt;/span&gt;            &lt;span class="n"&gt;sorted_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;sorted_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Add the remaining of the lists
&lt;/span&gt;    &lt;span class="n"&gt;sorted_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sorted_list&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Python has a built-in method in &lt;a href="https://github.com/python/cpython/blob/3.7/Lib/heapq.py#L314"&gt;&lt;code&gt;heapq.merge&lt;/code&gt;&lt;/a&gt; that does this. It takes advantage of the fact that our lists are already sorted, so we can get a new sorted list linear time rather than the &lt;code&gt;n*log(n)&lt;/code&gt; time it would take for combining and sorting two unsorted lists.&lt;/p&gt;

&lt;p&gt;Imagine my surprise then when I saw this performance graph from Stack Overflow:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a7mheXWz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/performance-sort1-800-629c946b4.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a7mheXWz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/performance-sort1-800-629c946b4.webp" alt="Python sort is beating merge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sorting the list is faster than just merging the list in almost all cases! That doesn't sound right, but I checked it, and it's true. As Stack Overflow user &lt;a href="https://stackoverflow.com/users/4279/jfs"&gt;JFS&lt;/a&gt; puts it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Long story short, unless &lt;code&gt;len(l1 + l2)&lt;/code&gt; &amp;gt;= 1,000,000 use sort&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The reason sort beats merge in most cases is because of a man named Tim Peters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#timsort"&gt;
  &lt;/a&gt;
  TimSort
&lt;/h2&gt;

&lt;p&gt;Python's &lt;code&gt;list.sort&lt;/code&gt; is the original implementation of a hybrid sorting algorithm called TimSort, named after its author, &lt;a href="https://github.com/python/cpython/commit/92f81f2e63b5eaa6d748d51a10e32108517bf3bf#diff-6d09fc0f0b57214c2e3a838d366425836c296fa931fe9dc430f604b7e3950c29"&gt;Tim&lt;/a&gt; Peters.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[Here is] stable, natural merge sort, modestly called&lt;br&gt;
Timsort (hey, I earned it ). It has supernatural performance on many&lt;br&gt;
kinds of partially ordered arrays (less than lg(N!) comparisons needed, and&lt;br&gt;
as few as N-1), yet as fast as Python's previous highly tuned sample sort&lt;br&gt;
hybrid on random arrays.&lt;/p&gt;
&lt;/blockquote&gt;
Tim Peters explaining TimSort



&lt;p&gt;Timsort is designed to find runs of sequential numbers and merge them together:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The main routine marches over the array once, left to right,&lt;br&gt;
alternately identifying the next run, then merging it into the previous&lt;br&gt;
runs "intelligently". Everything else is complication for speed, and some&lt;br&gt;
hard-won measure of memory efficiency.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is why &lt;code&gt;(x + y).sort()&lt;/code&gt; can be surprisingly fast: once it finds the sequential runs of numbers, it functions like our merge algorithm: combining the two sorted lists in linear time.&lt;/p&gt;

&lt;p&gt;Timsort does have to do extra work, though. It needs to do a pass over the data to find these sequential runs, and &lt;code&gt;heapq.merge&lt;/code&gt; knows where the runs are ahead of time. Timsort overcomes this disadvantage by being written in C rather than Python. Or as ShawdowRanger on Stack Overflow explains it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CPython's &lt;code&gt;list.sort&lt;/code&gt; is implemented in C (avoiding interpreter overhead), while &lt;code&gt;heapq.merge&lt;/code&gt; is mostly implemented in Python, and optimizes for the "many iterables" case in a way that slows the "two iterables" case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means that if I drop down to C and write a C extension I should be able to beat Timsort. This turned out to be easier than I thought it would be&lt;sup id="fnref2"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-c-extension"&gt;
  &lt;/a&gt;
  The C Extension
&lt;/h2&gt;

&lt;p&gt;The bulk of the C Extension, whose performance I'm going to cover in a minute, is just the pop the stack algorithm discussed before, but using an index to point to the head of the stack (&lt;a href="https://github.com/earthly/pymerge/blob/main/merge.c"&gt;full version&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;  &lt;span class="c1"&gt;//New List&lt;/span&gt;
  &lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;mergedList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyList_New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;elem1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyList_GetItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;listObj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i1&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;elem2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyList_GetItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;listObj2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i2&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyObject_RichCompareBool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Py_LT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// List1 has smallest, Pop from list 1&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;PyList_SetItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;mergedList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;elem1&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="c1"&gt;// List2 has smallest, Pop from list 2&lt;/span&gt;
        &lt;span class="n"&gt;PyList_SetItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;mergedList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;elem2&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;i2&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;i2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;i1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//One list is empty, add remainder of other list to result&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mergedList&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
C merge





&lt;p&gt;The nice thing about C extensions in Python is that they are easy to use. Once compiled, I can just &lt;code&gt;import merge&lt;/code&gt; and use my new merge method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;merge&lt;/span&gt;

&lt;span class="c1"&gt;# create some sorted lists
&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1700&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1800&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# merge them
&lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing-it"&gt;
  &lt;/a&gt;
  Testing It
&lt;/h2&gt;

&lt;p&gt;Testing my new merge with a list of integers and floats, we can see that we are beating Timsort, especially for long lists:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;merge&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;timeit&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1700&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1800&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;merge_test&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="n"&gt;m1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sort_test&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="n"&gt;m2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
   &lt;span class="n"&gt;m2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;sort_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sort_test()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"from __main__ import sort_test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;merge_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"merge_test()"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"from __main__ import merge_test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'timsort took &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;sort_time&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; seconds'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'merge took &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;merge_time&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; seconds'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;timsort took 3.9523325259999997 seconds
merge took 3.0547665259999994 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Graphing the performance we get this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sTYjGbUx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/beating-with-hetro1-1000-f0ab30520.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sTYjGbUx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/beating-with-hetro1-1000-f0ab30520.png" alt="Our Merge beating TimSort"&gt;&lt;/a&gt;&lt;/p&gt;
We are beating Timsort with our merge





&lt;p&gt;But if we switch to a list of only integers &lt;code&gt;sort&lt;/code&gt; is beating us for small lists and even on big lists our performance improvement is thin at best:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mBNkqrEY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/losing-with-homo-1000-f3e6b8fd6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mBNkqrEY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/losing-with-homo-1000-f3e6b8fd6.png" alt="Our Merge beating TimSort"&gt;&lt;/a&gt;&lt;/p&gt;
With lists of all `int` or all `float` we lose our advantage.



&lt;p&gt;What is going on here?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#timsorts-special-comparisons"&gt;
  &lt;/a&gt;
  Timsort's Special Comparisons
&lt;/h2&gt;

&lt;p&gt;It turns out that Timsort has some extra tricks up its sleeves in the case of a list of integers. In that initial pass over the list, it checks the types of the elements, and if they are all uniform it tries to use a cheaper comparison operation.&lt;/p&gt;

&lt;p&gt;Specifically, if your list is all &lt;a href="https://github.com/python/cpython/blob/main/Objects/listobject.c#L2085"&gt;longs&lt;/a&gt;, &lt;a href="https://github.com/python/cpython/blob/main/Objects/listobject.c#L2113"&gt;floats&lt;/a&gt;, or &lt;a href="https://github.com/python/cpython/blob/main/Objects/listobject.c#L2061"&gt;Latin strings&lt;/a&gt; Timsort will save a lot of cycles on the comparison operations.&lt;/p&gt;

&lt;p&gt;Learning from Timsort we can bring in these comparison operations ourselves. We don't want to do a full pass over the list, or we will lose our advantage, so we can just specialize our merge by offering separate calls for longs, floats, and Latin alphabet strings like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Default comparison&lt;/span&gt;
&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Compare assuming ints&lt;/span&gt;
&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;merge_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Compare assuming floats&lt;/span&gt;
&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;merge_float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Compare assuming latin&lt;/span&gt;
&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;merge_latin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
merge.h





&lt;h2&gt;
  &lt;a href="#beating-timsort"&gt;
  &lt;/a&gt;
  Beating TimSort
&lt;/h2&gt;

&lt;p&gt;Doing that, we now can finally beat Timsort at merging sorted lists, not just when the list is a heterogeneous mix of elements, but also when it's all integers, or floating-point numbers, or one byte per char strings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tpzAbcla--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/summary1-int-1000-b27eb2dbe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tpzAbcla--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/summary1-int-1000-b27eb2dbe.png" alt="Our Merge beating TimSort"&gt;&lt;/a&gt;&lt;/p&gt;
merge vs TimSort for `int`.



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rfbKwIz0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/summary2-float-1000-28225b9ff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rfbKwIz0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/summary2-float-1000-28225b9ff.png" alt="Our Merge beating TimSort"&gt;&lt;/a&gt;&lt;/p&gt;
merge vs TimSort for `float`.



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eh_cD5M9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/summary3-latin-1000-af4f97615.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eh_cD5M9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/summary3-latin-1000-af4f97615.png" alt="Our Merge beating TimSort"&gt;&lt;/a&gt;&lt;/p&gt;
merge vs TimSort for Latin alphabet strings.



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uuyRItk8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/summary4-else-1000-34d33a495.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uuyRItk8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/python-timsort-merge/summary4-else-1000-34d33a495.png" alt="Our Merge beating TimSort"&gt;&lt;/a&gt;&lt;/p&gt;
merge vs TimSort for everything without a specialized compare.



&lt;p&gt;The default &lt;code&gt;merge&lt;/code&gt; beats Timsort for heterogeneous lists, and the specialized versions are there for when you have uniform types in your list, and you need to go fast.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#timsort-is-good"&gt;
  &lt;/a&gt;
  TimSort Is Good
&lt;/h2&gt;

&lt;p&gt;There, I have beat Timsort for merging sorting lists, although I had to pull in some code from TimSort itself to get here. I'm not sure how valuable this is: if you need to go fast, you might not choose Python, but it was a fun learning project.&lt;/p&gt;

&lt;p&gt;Also, I learned that dropping down to C isn't as scary as it sounds. The build steps are a bit more involved, but with the included &lt;a href="https://github.com/earthly/pymerge/blob/main/Earthfile"&gt;Earthfile&lt;/a&gt;, the build is a one-liner and works cross-platform. You can find the code &lt;a href="https://github.com/earthly/pymerge"&gt;on GitHub&lt;/a&gt; and an intro to &lt;a href="https://earthly.dev/"&gt;Earthly&lt;/a&gt; on this very site, and with that example, you can build your own C extension reasonably quickly.&lt;/p&gt;

&lt;p&gt;The surprising thing, though, is how good Timsort still is. It wasn't designed for merging sorted lists but for sorting real-world data. It turns out real-world data is often partially sorted, just like our use case.&lt;/p&gt;

&lt;p&gt;Timsort on partially sorted data shows us where Big O notation can misinform us. If your input always keeps you near the median or best-case performance, then the worst-case performance doesn't matter much. It's no wonder then that since its first creation, Timsort has spread from Python to JavaScript, Swift, and Rust. Thank you, Tim Peters!&lt;/p&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;Practically, you might not want to use pop, but just track an index of where the head of the stack should be, like the C code shown later. &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;It was easier because my teammate Alex has experience writing C extensions for Python, so by the time I had found the Python header files, Alex had already put together a prototype solution. &lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>python</category>
      <category>computerscience</category>
      <category>cpp</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Introduction to Python Functions</title>
      <author>Mary-softeng</author>
      <pubDate>Fri, 30 Jul 2021 14:42:53 +0000</pubDate>
      <link>https://dev.to/marysofteng/introduction-to-python-functions-de1</link>
      <guid>https://dev.to/marysofteng/introduction-to-python-functions-de1</guid>
      <description>&lt;p&gt;What are python functions?&lt;br&gt;
Python Functions are a set of actions that we group together, and give a name to. The core functions in Python language includes string.title() and list.sort(). In python one can define his or her own functions, in order to "teach" Python new behavior.&lt;/p&gt;

&lt;p&gt;Advantages of using Python functions&lt;br&gt;
•We write a set of instructions once. We save some work in this simple example, and we save even more work in larger programs.&lt;br&gt;
•When our function works, we don't have to worry about that code anymore. Every time you repeat code in your program. Writing a function means there is one place to fix mistakes, and when those bugs are fixed, we can be confident that this function will continue to work correctly.&lt;br&gt;
•We can modify our function's behavior, and that change takes effect every time the function is called. This is much better than deciding we need some new behavior, and then having to change code in many different places in our program.&lt;/p&gt;

&lt;p&gt;Basic python syntax&lt;br&gt;
In Python a function is defined using the def keyword:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--phjYupG_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tjyrprdh3cap0mmjuc3j.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--phjYupG_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tjyrprdh3cap0mmjuc3j.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Calling a Function&lt;br&gt;
To call a function, use the function name followed by parenthesis:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1z3GJY1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w66m0u3nb69que7n81xv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1z3GJY1B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w66m0u3nb69que7n81xv.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Arguments in Python&lt;br&gt;
Information can be passed into functions as arguments.&lt;br&gt;
Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma.&lt;br&gt;
The following example has a function with one argument (planguage). When the function is called, we pass along a programming language, which is used inside the function.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mAKNWOIx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmbk2mhlipbcrd24etfb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mAKNWOIx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmbk2mhlipbcrd24etfb.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;NOTE: &lt;br&gt;
A parameter is the variable listed inside the parentheses in the function definition.&lt;br&gt;
An argument is the value that is sent to the function when it is called.&lt;/p&gt;

&lt;p&gt;Number of Arguments&lt;br&gt;
By default, a function must be called with the correct number of arguments. Meaning that if your function expects 2 arguments, you have to call the function with 2 arguments, not more, and not less.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zJCuiqCE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ku6ykej9locdx03rpnm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zJCuiqCE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ku6ykej9locdx03rpnm.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Arbitrary Arguments, *args&lt;br&gt;
If you do not know how many arguments that will be passed into your function, add a * before the parameter name in the function definition.&lt;br&gt;
This way the function will receive a tuple of arguments, and can access the items accordingly:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bt1xFLqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rd3q83gldz5k4onjxmh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bt1xFLqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rd3q83gldz5k4onjxmh.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keyword Arguments&lt;br&gt;
You can also send arguments with the key = value syntax.&lt;br&gt;
This way the order of the arguments does not matter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xsLdDF2Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iu2szu8vprtpet2bleg9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xsLdDF2Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iu2szu8vprtpet2bleg9.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Arbitrary Keyword Arguments, *&lt;em&gt;kwargs&lt;br&gt;
If you do not know how many keyword arguments that will be passed into your function, add two asterisk: *&lt;/em&gt; before the parameter name in the function definition.&lt;br&gt;
This way the function will receive a dictionary of arguments, and can access the items accordingly:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PA7hFWrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2awo17342y30rzttnkd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PA7hFWrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2awo17342y30rzttnkd.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Default Parameter Value&lt;br&gt;
If we call the function without argument, it uses the default value:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BX32pKST--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8bwwimdaxtuw55h33srl.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BX32pKST--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8bwwimdaxtuw55h33srl.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Passing a List as an Argument&lt;br&gt;
You can send any data types of argument to a function (string, number, list, dictionary etc.), and it will be treated as the same data type inside the function.&lt;br&gt;
E.g. if you send a List as an argument, it will still be a List when it reaches the function:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MfGSy1tC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cx108ipx39cmqrrhrhqq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MfGSy1tC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cx108ipx39cmqrrhrhqq.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Return Values&lt;br&gt;
To let a function return a value, use the return statement:&lt;br&gt;
The pass Statement&lt;br&gt;
Function definitions cannot be empty, but if you for some reason have a function definition with no content, put in the pass statement to avoid getting an error.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZEDpy3tL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3kqjcyua9git9pz18ib.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZEDpy3tL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3kqjcyua9git9pz18ib.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Recursion&lt;br&gt;
Python also accepts function recursion, which means a defined function can call itself.&lt;br&gt;
Recursion is a common mathematical and programming concept. It means that a function calls itself. This has the benefit of meaning that you can loop through data to reach a result.&lt;br&gt;
The developer should be very careful with recursion as it can be quite easy to slip into writing a function which never terminates, or one that uses excess amounts of memory or processor power. However, when written correctly recursion can be a very efficient and mathematically-elegant approach to programming.&lt;br&gt;
In this example, tri_recursion() is a function that we have defined to call itself ("recurse"). We use the k variable as the data, which decrements (-1) every time we recurse. The recursion ends when the condition is not greater than 0 (i.e. when it is 0).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://colab.research.google.com/drive/1SjCatUpRuRxsVJdsqKevanBmeS5OcWib#scrollTo=wwOiOiqDxvix"&gt;https://colab.research.google.com/drive/1SjCatUpRuRxsVJdsqKevanBmeS5OcWib#scrollTo=wwOiOiqDxvix&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s6sxpPK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckalikj4mmesmp4jasqj.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s6sxpPK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckalikj4mmesmp4jasqj.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Three more satisfying buttons and how to make them</title>
      <author>Ammadeo</author>
      <pubDate>Fri, 30 Jul 2021 14:24:07 +0000</pubDate>
      <link>https://dev.to/ammadeo/three-more-satisfying-buttons-and-how-to-make-them-5abc</link>
      <guid>https://dev.to/ammadeo/three-more-satisfying-buttons-and-how-to-make-them-5abc</guid>
      <description>&lt;p&gt;Satisfying buttons can take many forms. Let's see three more!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#simple-button"&gt;
  &lt;/a&gt;
  Simple button
&lt;/h1&gt;

&lt;p&gt;Not every satisfying button must be hard to implement. This simple button will use only small transitions and shadows to make it feel great.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-look"&gt;
  &lt;/a&gt;
  How does it look?
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ammadeo/embed/BaWEEoZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-make-it"&gt;
  &lt;/a&gt;
  Let's make it
&lt;/h2&gt;

&lt;p&gt;The implementation will be very similar to the one in the first part of this series. So if You didn't read it, do it now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Use realistic shadows */&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;-1px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.06&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
              &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;-3px&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.08&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c"&gt;/* Make sure that transform-origin match translate() direction. 
     It makes translate() and scale() work it the same axis */&lt;/span&gt;  
  &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* On button press */&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Make shadows much smaller */&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.06&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
              &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;-1px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.08&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c"&gt;/* Apply perspective transformation */&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="c"&gt;/* Translate down on Y axis */&lt;/span&gt;
    &lt;span class="n"&gt;translatey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.25em&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="c"&gt;/* Make button smaller */&lt;/span&gt;
    &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#plastic-button"&gt;
  &lt;/a&gt;
  Plastic button
&lt;/h1&gt;

&lt;p&gt;The button will deform inwards on press.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-see-the-implementation"&gt;
  &lt;/a&gt;
  Let's see the implementation
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ammadeo/embed/jOBRgvQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-make-it"&gt;
  &lt;/a&gt;
  How to make it?
&lt;/h2&gt;

&lt;p&gt;To make a neuromorphic button, we need to give it a few shadows. By default, we want to make it look raised.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Add outside shadows */&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="c"&gt;/* Top left white shadow */&lt;/span&gt;
    &lt;span class="m"&gt;-4px&lt;/span&gt; &lt;span class="m"&gt;-4px&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.14&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c"&gt;/* Bottom right black shadow */&lt;/span&gt;
    &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.14&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* On button press */&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Add inside shadows */&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="c"&gt;/* Inner top left black shadow */&lt;/span&gt;
    &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;-4px&lt;/span&gt; &lt;span class="m"&gt;-4px&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.14&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c"&gt;/* Inner bottom right white shadow */&lt;/span&gt;
    &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.14&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c"&gt;/* Make it a bit darker */&lt;/span&gt;
  &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;brightness&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.96&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget about UX! Let's add a light border around it to make it easier to spot.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Add glass-like border  */&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Learn more about plastic like buttons from &lt;a href="https://uxdesign.cc/neumorphism-in-user-interfaces-b47cef3bf3a6"&gt;Neumorphism in user interfaces&lt;/a&gt; by Michal Malewicz.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#glowing-button"&gt;
  &lt;/a&gt;
  Glowing button
&lt;/h1&gt;

&lt;p&gt;This button is made of glass and has a colourful light inside. The light follows a user's interactions — like mouse movement.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-see-it-in-action"&gt;
  &lt;/a&gt;
  Let's see it in action
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ammadeo/embed/mdmxOwP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-implement-it"&gt;
  &lt;/a&gt;
  How to implement it
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;I'd say upfront the implementation is not beginner-friendly.&lt;/strong&gt;&lt;br&gt;
Firstly We'll use inner shadows to make a glass-like effect.&lt;br&gt;
If You want to learn more about Glassmorphism, check out &lt;a href="https://blog.prototypr.io/new-glassmorphism-how-to-create-neon-glass-effect-ui-design-3a6c866d3b63"&gt;New Glassmorphism? How to Create Neon Glass Effect UI Design&lt;/a&gt; by &lt;br&gt;
Przemysław Baraniak.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Background color in HSL 
     It's "raw" because it needs to work with custom alpha */&lt;/span&gt;
  &lt;span class="py"&gt;--color-background-raw&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;12%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;16%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;/* Glass effect inner shadows */&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;-3px&lt;/span&gt; &lt;span class="m"&gt;0.25em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;-0.25em&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;-2em&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color-background-raw&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0.05&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0.25em&lt;/span&gt; &lt;span class="m"&gt;0.5em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we'll use the &lt;strong&gt;after pseudo-element&lt;/strong&gt; as a glowing circle following a user's interactions. Let's make use of the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Properties_and_Values_API/guide"&gt;CSS Properties and Values API&lt;/a&gt;. This API allows us to define types of CSS Properties, which is needed to animate them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Use CSS Properties and Values API
It enables transitions for css properties 
*/&lt;/span&gt;
&lt;span class="c"&gt;/* Will control the left position of the glowing circle. */&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="n"&gt;--glow-left&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Allow any length or percentage e.g. 1px, 1em or 20% */&lt;/span&gt;
  &lt;span class="nt"&gt;syntax&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'&amp;lt;length-percentage&amp;gt;'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* Allow children elements to inherit this property */&lt;/span&gt;
  &lt;span class="nt"&gt;inherits&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* Set default value */&lt;/span&gt;
  &lt;span class="nt"&gt;initial-value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/* Will control the top position of the glowing circle. */&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="n"&gt;--glow-top&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;syntax&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'&amp;lt;length-percentage&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;inherits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;initial-value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Glowing circle */&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nc"&gt;.glow&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Make sure it shows */&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;/* Position it */&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--glow-top&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--glow-left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c"&gt;/* Keep it centred */&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c"&gt;/* Make it smooth!
     This is why we need CSS Properties and Values API
   */&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="nb"&gt;top&lt;/span&gt; &lt;span class="m"&gt;80ms&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;left&lt;/span&gt; &lt;span class="m"&gt;80ms&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's use a bit of JavaScript to control them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Select the button&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button.glow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Set glow position css properties&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setGlowPosition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Get the event's coordinates relative to the button&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;offsetX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;offsetY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientY&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Prevent setting position on keyboard click&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offsetX&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;offsetY&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// wait for animation frame for better performance&lt;/span&gt;
    &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// set css property&lt;/span&gt;
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--glow-left&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;offsetX&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--glow-top&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;offsetY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Set glow position on mousemove (mouse) and click (touch and keyboard)&lt;/span&gt;
&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mousemove&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setGlowPosition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setGlowPosition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#challenge-for-you"&gt;
  &lt;/a&gt;
  Challenge for You
&lt;/h1&gt;

&lt;p&gt;Make Your satisfying button and share it in a comment below. I'd love to see it!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>tutorial</category>
      <category>design</category>
    </item>
    <item>
      <title>Elixir Wizards Talk: "Dealing With a Monster Ecto Query"</title>
      <author>Mackenzie</author>
      <pubDate>Fri, 30 Jul 2021 14:19:36 +0000</pubDate>
      <link>https://dev.to/maco/elixir-wizards-talk-dealing-with-a-monster-ecto-query-1k52</link>
      <guid>https://dev.to/maco/elixir-wizards-talk-dealing-with-a-monster-ecto-query-1k52</guid>
      <description>&lt;p&gt;Last month, I spoke at the first-ever &lt;a href="https://smartlogic.io/about/community/elixir-wizards-conference/"&gt;Elixir Wizards Conference&lt;/a&gt;. It was a lightning talk walking through a refactor I did before the 2020 US Presidential Election, titled "Dealing With a Monster Ecto Query."&lt;/p&gt;

&lt;p&gt;I work for a news company, so the presidential election is a huge deal; we can't have downtime. I knew which query was our bottleneck, so I optimized it right before the election. This took advantage of a few Elixir features, like atoms, the pin operator, and concurrency primitives.&lt;/p&gt;

&lt;p&gt;You can watch the talk below:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-82nj9rWSwc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/maco/slides/tree/main/monster_ecto_query"&gt;Source code for slides&lt;/a&gt;&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>conferencetalk</category>
      <category>ecto</category>
    </item>
    <item>
      <title>Hover Effects Using CSS For Beginners </title>
      <author>Kiran Raj R</author>
      <pubDate>Fri, 30 Jul 2021 14:13:01 +0000</pubDate>
      <link>https://dev.to/kiranrajvjd/hover-effects-using-css-for-beginners-4a7p</link>
      <guid>https://dev.to/kiranrajvjd/hover-effects-using-css-for-beginners-4a7p</guid>
      <description>&lt;p&gt;Here is a list of few card hover effects created using CSS. They are created only using CSS, the logic behind it is too simple, hope it will be useful to beginners in web development. &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/eYWreOb?height=600&amp;amp;default-tab=result,css&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/VwbxMov?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/GRmdMLj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/eYWrGxP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/bGWMoOR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/ExmLwRG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/poPVdjO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/LYymORp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/GRmdONE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You can find some text effect using CSS &lt;a href="https://dev.to/kiranrajvjd/simple-text-effects-using-css-3dgp"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope it will be useful.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_is5DQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7VaB3EeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/2bf2e16e-98a9-450b-af3a-1fbd51fce623.png" alt="kiranrajvjd"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/35-simple-css-based-pre-loaders-gfl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;35+ Simple CSS Based Pre Loaders&lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R ・ May 28 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_is5DQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7VaB3EeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/2bf2e16e-98a9-450b-af3a-1fbd51fce623.png" alt="kiranrajvjd"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/30-awesome-css-animation-resources-h9c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;30+🔥 Awesome CSS Animation Resources&lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R ・ May 24 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_is5DQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7VaB3EeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/2bf2e16e-98a9-450b-af3a-1fbd51fce623.png" alt="kiranrajvjd"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/awesome-resource-for-your-web-projects-75-background-resources-2cm8" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🔥Awesome Resource For Your Web Projects: 75+ Background Resources🔥&lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R ・ May 19 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>What are Callbacks in JavaScript?</title>
      <author>Saji Wang</author>
      <pubDate>Fri, 30 Jul 2021 14:00:22 +0000</pubDate>
      <link>https://dev.to/codesphere/what-are-callbacks-in-javascript-297h</link>
      <guid>https://dev.to/codesphere/what-are-callbacks-in-javascript-297h</guid>
      <description>&lt;p&gt;Anyone familiar with programming, already knows what functions do and how to use them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But, what exactly is a callback function?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let me walk you through a few examples that will help you understand what callback functions are and how to use them in JavaScript.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h2&gt;

&lt;p&gt;Let's start with what a function is.&lt;br&gt;
A function is a block of code that can be executed repeatedly, as needed. Functions are really useful because you write the code once and then you can run it multiple times.&lt;br&gt;
To run the code inside a function, simply call the function.&lt;br&gt;
Here's an example that defines a function and then calls it ‒&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In the code sample above, we created a function called greet() (lines 1 ‒ 3) that has a parameter called name. This parameter serves as a placeholder so that when the function is called, a value can be passed to the parameter.&lt;/p&gt;

&lt;p&gt;In line 6, we called the greet() function and we passed the string value 'John' as an argument.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#callback-functions"&gt;
  &lt;/a&gt;
  Callback Functions
&lt;/h2&gt;

&lt;p&gt;A callback function is simply a function that is passed into another function as an argument, which is then triggered when the other function is executed.&lt;br&gt;
The following is an example of using a simple callback function.&lt;/p&gt;

&lt;p&gt;Let's start by creating an array of numbers that we will use in our example ‒&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Here's a function that checks for even numbers ‒&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;To find all the even numbers in the array that we created above, we can use the JavaScript filter() method, which returns a new array that only contains the numbers that match the function's condition, meaning that they are even.&lt;/p&gt;

&lt;p&gt;Now, we can pass the evenNumbers() function, described above, to the filter() method and assign it to the filteredEvenNumbers variable, as shown below ‒&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In this example, the evenNumbers() function is a &lt;strong&gt;callback function&lt;/strong&gt;, because it is being passed as an argument to another function.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#synchronous-callback-functions"&gt;
  &lt;/a&gt;
  Synchronous Callback Functions
&lt;/h2&gt;

&lt;p&gt;By default, JavaScript runs code sequentially from top to bottom by completing one command line before starting the next.&lt;/p&gt;

&lt;p&gt;The evenNumbers() function we created is an example of a synchronous callback function.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#asynchronous-callback-functions"&gt;
  &lt;/a&gt;
  Asynchronous Callback Functions
&lt;/h2&gt;

&lt;p&gt;Asynchronicity means that JavaScript does not wait for the operation of a command line to complete before it starts executing the next line of the code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you are familiar with setTimeout, then you've been using callback functions all along!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the following example, we are going to use the setTimeout() method that only executes after 2 seconds ‒&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In the example above, we used the setTimeout() method and called the greet() function to execute 2 seconds later. JavaScript starts counting 2 seconds. But meanwhile, it proceeds to the next command, which immediately displays 'Hello Oliver!'. Then after the 2 seconds are over, the greet() function is run, and displays 'Hello world!'. &lt;/p&gt;

&lt;p&gt;Therefore, even though the greet() function was called before the sayName() function, they were executed in reverse order.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-next%C2%A0step"&gt;
  &lt;/a&gt;
  The Next Step
&lt;/h2&gt;

&lt;p&gt;I hope this tutorial has helped you understand what callback functions are and how to use them as easily as functions!&lt;br&gt;
There is still much to learn about callback functions, so I encourage you to continue practicing and learning.&lt;/p&gt;




&lt;p&gt;To practice using callbacks, check out &lt;a href="https://link.codesphere.com/BY"&gt;Codesphere&lt;/a&gt;, an online code editor in which you can build, test, and deploy your apps all within a single tab of your browser.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>🚀10 Trending projects on GitHub for web developers - 30th July 2021</title>
      <author>Iain Freestone</author>
      <pubDate>Fri, 30 Jul 2021 13:41:06 +0000</pubDate>
      <link>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-30th-july-2021-bnc</link>
      <guid>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-30th-july-2021-bnc</guid>
      <description>&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://www.iainfreestone.com"&gt;www.iainfreestone.com&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-trackingjs"&gt;
  &lt;/a&gt;
  1. tracking.js
&lt;/h3&gt;

&lt;p&gt;The tracking.js library brings different computer vision algorithms and techniques into the browser environment. By using modern HTML5 specifications, we enable you to do real-time color tracking, face detection and much more — all that with a lightweight core (~7 KB) and intuitive interface.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/eduardolundgren"&gt;
        eduardolundgren
      &lt;/a&gt; / &lt;a href="https://github.com/eduardolundgren/tracking.js"&gt;
        tracking.js
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A modern approach for Computer Vision on the web
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/eduardolundgren/tracking.js/master/banner.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c7xYMW5m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/eduardolundgren/tracking.js/master/banner.svg" alt="Banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;👉 &lt;strong&gt;&lt;a href="https://github.com/eduardolundgren/tracking.js/issues/395"&gt;https://github.com/eduardolundgren/tracking.js/issues/395&lt;/a&gt;&lt;/strong&gt; 👈&lt;/p&gt;
&lt;/div&gt;

&lt;h1&gt;
tracking.js&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/eduardolundgren/tracking.js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2dfe482f92cd5a20e5ddd3a1c11d165aded53464888fde2072fe6de96e4fbcf6/687474703a2f2f696d672e736869656c64732e696f2f7472617669732f6564756172646f6c756e646772656e2f747261636b696e672e6a732e7376673f7374796c653d666c6174" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://david-dm.org/eduardolundgren/tracking.js#info=devDependencies" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/fa24b464ae2ea49fee34a0cf13b67410e4558531aed7c44aa0650758059f7f7d/687474703a2f2f696d672e736869656c64732e696f2f64617669642f6465762f6564756172646f6c756e646772656e2f747261636b696e672e6a732e7376673f7374796c653d666c6174" alt="DevDependencies Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The tracking.js library brings different computer vision algorithms and techniques into the browser environment. By using modern HTML5 specifications, we enable you to do real-time color tracking, face detection and much more — all that with a lightweight core (~7 KB) and intuitive interface.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com" rel="nofollow"&gt;Official website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html" rel="nofollow"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/api/" rel="nofollow"&gt;API Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Install&lt;/h2&gt;
&lt;p&gt;Install via &lt;a href="http://bower.io/" rel="nofollow"&gt;Bower&lt;/a&gt;, &lt;a href="https://www.npmjs.com/" rel="nofollow"&gt;npm&lt;/a&gt;, or &lt;a href="https://github.com/eduardolundgren/tracking.js/archive/master.zip"&gt;download as a zip&lt;/a&gt;:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;bower install tracking
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;npm install tracking
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;
Examples&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://trackingjs.com/examples/face_tag_friends.html" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Z1D731v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.githubusercontent.com/assets/398893/3709347/ec72876c-1453-11e4-8450-149d06d487f2.jpg" alt="Demo 1"&gt;&lt;/a&gt;
&lt;a href="http://trackingjs.com/examples/face_fish_tank.html" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J0WvKN8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.githubusercontent.com/assets/398893/3709357/1a1c2e16-1454-11e4-804d-e6ada6c65997.jpg" alt="Demo 2"&gt;&lt;/a&gt;
&lt;a href="http://trackingjs.com/examples/color_hexgl.html" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wOxNmLGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.githubusercontent.com/assets/398893/3709361/38f86e8a-1454-11e4-811d-52bd21b37e85.jpg" alt="Demo 3"&gt;&lt;/a&gt;
&lt;a href="http://trackingjs.com/examples/color_draw_something.html" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KJNItWli--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.githubusercontent.com/assets/398893/3709464/5447a302-1456-11e4-96b2-d2fae28e2a01.jpg" alt="Demo 4"&gt;&lt;/a&gt;
&lt;a href="http://trackingjs.com/examples/color_fish_tank.html" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Tiq-IP5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.githubusercontent.com/assets/398893/3709469/6a3e859a-1456-11e4-982a-d46a55890e1e.jpg" alt="Demo 5"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://trackingjs.com/docs.html#trackers" rel="nofollow"&gt;Trackers&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html#color-tracker" rel="nofollow"&gt;Color Tracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html#object-tracker" rel="nofollow"&gt;Object Tracker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://trackingjs.com/docs.html#utilities" rel="nofollow"&gt;Utilities&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html#feature-detection" rel="nofollow"&gt;Feature Detection (Fast)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html#feature-descriptor" rel="nofollow"&gt;Feature Descriptor (Brief)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html#convolution" rel="nofollow"&gt;Convolution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html#gray-scale" rel="nofollow"&gt;Gray Scale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html#image-blur" rel="nofollow"&gt;Image Blur&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html#integral-image" rel="nofollow"&gt;Integral Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html#sobel" rel="nofollow"&gt;Sobel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html#viola-jones" rel="nofollow"&gt;Viola Jones&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://trackingjs.com/docs.html#web-components" rel="nofollow"&gt;Web Components&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html#color-element" rel="nofollow"&gt;Color Element&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://trackingjs.com/docs.html#object-element" rel="nofollow"&gt;Object Element&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Browser Support&lt;/h2&gt;
&lt;p&gt;You can plug &lt;em&gt;tracking.js&lt;/em&gt; into some well supported HTML elements such as &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/398893/3528325/20373e76-078e-11e4-8e3a-1cb86cf506f0.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_c82fED9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.githubusercontent.com/assets/398893/3528325/20373e76-078e-11e4-8e3a-1cb86cf506f0.png" alt="IE"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/398893/3528328/23bc7bc4-078e-11e4-8752-ba2809bf5cce.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eud2Dysl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.githubusercontent.com/assets/398893/3528328/23bc7bc4-078e-11e4-8752-ba2809bf5cce.png" alt="Chrome"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/398893/3528329/26283ab0-078e-11e4-84d4-db2cf1009953.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cB3ew3ym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.githubusercontent.com/assets/398893/3528329/26283ab0-078e-11e4-84d4-db2cf1009953.png" alt="Firefox"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/398893/3528330/27ec9fa8-078e-11e4-95cb-709fd11dac16.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tNW0SMKK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.githubusercontent.com/assets/398893/3528330/27ec9fa8-078e-11e4-95cb-709fd11dac16.png" alt="Opera"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a rel="noopener noreferrer" href="https://cloud.githubusercontent.com/assets/398893/3528331/29df8618-078e-11e4-8e3e-ed8ac738693f.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5RWeZ_R8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.githubusercontent.com/assets/398893/3528331/29df8618-078e-11e4-8e3e-ed8ac738693f.png" alt="Safari"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IE 9+ ✔
&lt;/td&gt;
&lt;td&gt;Latest ✔
&lt;/td&gt;
&lt;td&gt;Latest ✔
&lt;/td&gt;
&lt;td&gt;Latest ✔
&lt;/td&gt;
&lt;td&gt;Latest ✔
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;However, the browser support may vary if you request the user's camera (which relies on &lt;a href="http://caniuse.com/#feat=stream" rel="nofollow"&gt;getUserMedia API&lt;/a&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/eduardolundgren/tracking.js"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#2-welcome-ui"&gt;
  &lt;/a&gt;
  2. Welcome UI
&lt;/h3&gt;

&lt;p&gt;Welcome to the Welcome UI library created by Welcome to the jungle, a customizable design system with react, styled-components, styled-system and reakit.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/WTTJ"&gt;
        WTTJ
      &lt;/a&gt; / &lt;a href="https://github.com/WTTJ/welcome-ui"&gt;
        welcome-ui
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Customizable design system of @wttj with react • styled-components • styled-system • reakit
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Welcome UI&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/WTTJ/welcome-ui/master/docs/public/illustration.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9fg2WRk1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/WTTJ/welcome-ui/master/docs/public/illustration.png" width="300"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Welcome to the &lt;em&gt;Welcome UI library&lt;/em&gt; created by &lt;a href="https://www.welcometothejungle.com" rel="nofollow"&gt;Welcome to the jungle&lt;/a&gt;, a customizable design system with react • styled-components • styled-system and reakit.&lt;/p&gt;
&lt;p&gt;Here you'll find all the core components you need to create a delightful webapp.&lt;/p&gt;
&lt;p&gt;🌴 &lt;a href="https://welcome-ui.com" rel="nofollow"&gt;Discover all the components&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/WTTJ/welcome-ui/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/7c3d302529a2054f54b29f489364d8cb66c883ecc25994b161b728bc207abe9c/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f6c2f77656c636f6d652d75692e737667" alt="License"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/96a65b603836722d6177a916708bdedc4e88f093b24c8a907a68d8e051c12d9d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6465253230666f726d6174696e672d70726574746965722d626c75652e737667"&gt;&lt;img src="https://camo.githubusercontent.com/96a65b603836722d6177a916708bdedc4e88f093b24c8a907a68d8e051c12d9d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6465253230666f726d6174696e672d70726574746965722d626c75652e737667" alt="Code formating"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9f2038c6513488b38a31f31c82920ec478eafe0e6123150826ab6d3d7855751e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d7374796c65642d2d636f6d706f6e656e74732d6666363962342e737667"&gt;&lt;img src="https://camo.githubusercontent.com/9f2038c6513488b38a31f31c82920ec478eafe0e6123150826ab6d3d7855751e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d7374796c65642d2d636f6d706f6e656e74732d6666363962342e737667" alt="Code style"&gt;&lt;/a&gt; &lt;a href="https://github.com/WTTJ/welcome-ui/blob/master/CONTRIBUTING.mdx"&gt;&lt;img src="https://camo.githubusercontent.com/f677fb729d428823ee6adfc930e859ecb27eab2b72080031f406243cb64c047e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d6d656469756d737072696e67677265656e2e737667" alt="PRs Welcome"&gt;&lt;/a&gt; &lt;a href="https://conventionalcommits.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/74420c84a8cdfb2ed88abc162cde2dd9fc6dcf14f2ee0ec0779eb2cca98836e9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6e76656e74696f6e616c253230436f6d6d6974732d312e302e302d79656c6c6f772e737667" alt="Conventional Commits"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;1 - Install the &lt;strong&gt;peer dependencies&lt;/strong&gt; listed below:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;yarn add @xstyled/styled-components @xstyled/system prop-types react react-dom styled-components&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;2 - Install the the &lt;strong&gt;core&lt;/strong&gt; component and any other components you need for your webapp e.g. if you need just a button…&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;yarn add @welcome-ui/core @welcome-ui/button&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Import library &amp;amp; Theme&lt;/h2&gt;
&lt;p&gt;Getting started&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-v"&gt;React&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'react'&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;createTheme&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-v"&gt;WuiProvider&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'@welcome-ui/core'&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-v"&gt;Button&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'@welcome-ui/button'&lt;/span&gt;
&lt;span class="pl-c"&gt;// Add theme options (if you want)&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;options&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-c1"&gt;defaultFontFamily&lt;/span&gt;: &lt;span class="pl-s"&gt;'Helvetica'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;headingFontFamily&lt;/span&gt;: &lt;span class="pl-s"&gt;'Georgia'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;colors&lt;/span&gt;: &lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-c1"&gt;primary&lt;/span&gt;: &lt;span class="pl-kos"&gt;{&lt;/span&gt;
      &lt;span class="pl-c1"&gt;500&lt;/span&gt;: &lt;span class="pl-s"&gt;'#124C80'&lt;/span&gt;
    &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
    &lt;span class="pl-c1"&gt;success&lt;/span&gt;: &lt;span class="pl-kos"&gt;{&lt;/span&gt;
      &lt;span class="pl-c1"&gt;500&lt;/span&gt;: &lt;span class="pl-s"&gt;'#32CD32'&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/WTTJ/welcome-ui"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#3-waypoint"&gt;
  &lt;/a&gt;
  3. Waypoint
&lt;/h3&gt;

&lt;p&gt;Waypoint allows developers to define their application build, deploy, and release lifecycle as code, reducing the time to deliver deployments through a consistent and repeatable workflow.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/hashicorp"&gt;
        hashicorp
      &lt;/a&gt; / &lt;a href="https://github.com/hashicorp/waypoint"&gt;
        waypoint
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A tool to build, deploy, and release any application on any platform.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/hashicorp/waypoint/main/website/public/img/logo-fullcolor-whitebackground-rbg.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LUrXSg-x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/hashicorp/waypoint/main/website/public/img/logo-fullcolor-whitebackground-rbg.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
Waypoint&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Website: &lt;a href="https://www.waypointproject.io" rel="nofollow"&gt;https://www.waypointproject.io&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Tutorials: &lt;a href="https://learn.hashicorp.com/waypoint" rel="nofollow"&gt;HashiCorp Learn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Forum: &lt;a href="https://discuss.hashicorp.com/c/waypoint" rel="nofollow"&gt;Discuss&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Waypoint allows developers to define their application build, deploy, and release lifecycle as code, reducing the time to deliver deployments through a consistent and repeatable workflow.&lt;/p&gt;
&lt;p&gt;Waypoint supports a number of build methods and target platforms out of the box
and more can be easily added via plugins:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cloud Native Buildpacks&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Kubernetes&lt;/li&gt;
&lt;li&gt;AWS EC2 and ECS&lt;/li&gt;
&lt;li&gt;Azure Container Instances&lt;/li&gt;
&lt;li&gt;Google Cloud Run&lt;/li&gt;
&lt;li&gt;And many more...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Waypoint runs on Linux, Mac OS X, and Windows.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please note&lt;/strong&gt;: We take Waypoint's security and our users' trust very seriously. If you
believe you have found a security issue in Waypoint, please &lt;a href="https://www.hashicorp.com/security#vulnerability-reporting" rel="nofollow"&gt;responsibly disclose&lt;/a&gt; by
contacting us at &lt;a href="https://raw.githubusercontent.com/hashicorp/waypoint/main/mailto:security@hashicorp.com"&gt;security@hashicorp.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Quick Start&lt;/h2&gt;
&lt;p&gt;A few quick start guides are available on the &lt;a href="https://www.waypointproject.io/docs/getting-started" rel="nofollow"&gt;Waypoint website&lt;/a&gt;
and on &lt;a href="https://learn.hashicorp.com/waypoint" rel="nofollow"&gt;HashiCorp Learn&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.waypointproject.io/docs/getting-started" rel="nofollow"&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.hashicorp.com/tutorials/waypoint/get-started-intro" rel="nofollow"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.hashicorp.com/tutorials/waypoint/get-started-install" rel="nofollow"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.hashicorp.com/tutorials/waypoint/get-started-docker" rel="nofollow"&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.hashicorp.com/tutorials/waypoint/get-started-kubernetes" rel="nofollow"&gt;Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.hashicorp.com/tutorials/waypoint/get-started-nomad" rel="nofollow"&gt;Nomad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.hashicorp.com/tutorials/waypoint/get-started-ui" rel="nofollow"&gt;Waypoint UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.hashicorp.com/tutorials/waypoint/aws-ecs" rel="nofollow"&gt;AWS ECS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.hashicorp.com/tutorials/waypoint/azure-container-instance" rel="nofollow"&gt;Azure Container Instance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://learn.hashicorp.com/tutorials/waypoint/google-cloud-run" rel="nofollow"&gt;Google Cloud&lt;/a&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/hashicorp/waypoint"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#4-vs-code-database-client"&gt;
  &lt;/a&gt;
  4. VS Code Database Client
&lt;/h3&gt;

&lt;p&gt;Database Client for Visual Studio Code. It supports databases MySQL/MariaDB, Microsoft SQL Server, PostgreSQL, SQLite, MongoDB, Redis, and ElasticSearch.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/cweijan"&gt;
        cweijan
      &lt;/a&gt; / &lt;a href="https://github.com/cweijan/vscode-database-client"&gt;
        vscode-database-client
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Database Client For Visual Studio Code
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Database Client&lt;/h1&gt;
&lt;p&gt;Database Client for Visual Studio Code. It supports databases MySQL/MariaDB, Microsoft SQL Server, PostgreSQL, SQLite, MongoDB, Redis, and ElasticSearch.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Project site: &lt;a href="https://github.com/cweijan/vscode-database-client"&gt;vscode-database-client&lt;/a&gt;, &lt;a href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/README_CN.md"&gt;中文文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/#database-client"&gt;Database Client&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/#connect"&gt;Connect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/#table"&gt;Table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/#execute-sql-query"&gt;Execute SQL Query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/#generate-mock-data"&gt;Generate Mock Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/#history"&gt;History&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/#backupimport"&gt;Backup/Import&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/#setting"&gt;Setting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/#filter"&gt;Filter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;Install from vscode marketplace &lt;a href="https://marketplace.visualstudio.com/items?itemName=cweijan.vscode-mysql-client2" rel="nofollow"&gt;vscode-database-client&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Connect&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Open Database Explorer panel, then click the&lt;code&gt;+&lt;/code&gt; button.&lt;/li&gt;
&lt;li&gt;Select your database type, input connection config then click the connect button.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/images/connection.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KPQzxw5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/cweijan/vscode-database-client/master/images/connection.jpg" alt="connection"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Table&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Click table to open table view.&lt;/li&gt;
&lt;li&gt;Then you can do data modification on the view page.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/images/QueryTable.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o_xHaNzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/cweijan/vscode-database-client/master/images/QueryTable.jpg" alt="query"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Execute SQL Query&lt;/h2&gt;
&lt;p&gt;In the Database Explorer panel, click the &lt;code&gt;Open Query&lt;/code&gt; button.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/images/newquery.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H6FicuvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/cweijan/vscode-database-client/master/images/newquery.jpg" alt="newquery"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That will open a sql editor bind of database, it provider:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;IntelliSense sql edit.&lt;/li&gt;
&lt;li&gt;snippets:&lt;code&gt;sel、del、ins、upd、joi&lt;/code&gt;...&lt;/li&gt;
&lt;li&gt;Run selected or current cursor sql (Shortcut : Ctrl+Enter).&lt;/li&gt;
&lt;li&gt;Run all sql (Shortcut : Ctrl+Shift+Enter).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/images/run.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D5_AVrSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/cweijan/vscode-database-client/master/images/run.jpg" alt="run"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Generate Mock Data&lt;/h2&gt;
&lt;p&gt;You can easily generate test data.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/cweijan/vscode-database-client/master/images/mockData.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9DuStEdP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/cweijan/vscode-database-client/master/images/mockData.jpg" alt="mockData"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
History&lt;/h2&gt;
&lt;p&gt;Click the history button to open the list…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/cweijan/vscode-database-client"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#5-create-eth-app"&gt;
  &lt;/a&gt;
  5. Create Eth App
&lt;/h3&gt;

&lt;p&gt;Create Ethereum-powered apps with one command.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/paulrberg"&gt;
        paulrberg
      &lt;/a&gt; / &lt;a href="https://github.com/paulrberg/create-eth-app"&gt;
        create-eth-app
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Create Ethereum-powered apps with one command
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Create Eth App &lt;a href="https://prettier.io" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/48a41f43affa2e6253d6a48e0ee662ec53ce13c46442ac815e81d36b6e6b434d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64655f7374796c652d70726574746965722d6666363962342e737667" alt="Styled with Prettier"&gt;&lt;/a&gt; &lt;a href="http://commitizen.github.io/cz-cli/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/aca3301042bdedae125df537db587fe82c2123dc8a2c46f0859840b5fa4b7f1a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6d6d6974697a656e2d667269656e646c792d627269676874677265656e2e737667" alt="Commitizen Friendly"&gt;&lt;/a&gt; &lt;a href="https://opensource.org/licenses/MIT" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/78f47a09877ba9d28da1887a93e5c3bc2efb309c1e910eb21135becd2998238a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667" alt="License: MIT"&gt;&lt;/a&gt; &lt;a href="https://github.com/facebook/create-react-app/blob/master/CONTRIBUTING.md"&gt;&lt;img src="https://camo.githubusercontent.com/7c0ba324ca86899e51bd333f373b37b8939d40a263fa734f091f992bdc7fdd9b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d626c75652e737667" alt="PRs Welcome"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Create Ethereum-powered apps with one command.&lt;/p&gt;
&lt;p&gt;Create Eth App works on macOS, Windows, and Linux.&lt;br&gt;
If something doesn’t work, please &lt;a href="https://github.com/paulrberg/create-eth-app/issues/new"&gt;file an issue&lt;/a&gt;.&lt;br&gt;
If you have questions or need help, please ask in our &lt;a href="https://discord.gg/bsS8T47" rel="nofollow"&gt;Discord&lt;/a&gt; community.&lt;/p&gt;
&lt;h2&gt;
Quick Overview&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;yarn create eth-app my-eth-app
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; my-eth-app
yarn react-app:start&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;If you've previously installed &lt;code&gt;create-eth-app&lt;/code&gt; globally via &lt;code&gt;yarn global add create-eth-app&lt;/code&gt;, we recommend you
uninstall the package using &lt;code&gt;yarn global remove create-eth-app&lt;/code&gt; and use the &lt;code&gt;yarn create eth-app&lt;/code&gt; shorthand to ensure that you use the last version.&lt;/p&gt;
&lt;p&gt;Then open &lt;a href="http://localhost:3000/" rel="nofollow"&gt;http://localhost:3000/&lt;/a&gt; to see your app.&lt;br&gt;
When you’re ready to deploy to production, create a minified bundle with &lt;code&gt;yarn run react-app:build&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/paulrberg/create-eth-app/develop/./screencast.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hF4sTEu---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/paulrberg/create-eth-app/develop/./screencast.gif" width="600" alt="yarn react-app:start"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
Creating an App&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;You’ll need to have Node 8.16.0 or Node 10.16.0 or later version on your local development machine&lt;/strong&gt; (but it’s not required on the server). You can use &lt;a href="https://github.com/creationix/nvm#installation"&gt;nvm&lt;/a&gt; (macOS/Linux) or &lt;a href="https://github.com/coreybutler/nvm-windows#node-version-manager-nvm-for-windows"&gt;nvm-windows&lt;/a&gt; to switch Node versions between…&lt;/p&gt;
&lt;/div&gt;


&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/paulrberg/create-eth-app"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h3&gt;
  &lt;a href="#6-jsii"&gt;
  &lt;/a&gt;
  6. JSii
&lt;/h3&gt;

&lt;p&gt;jsii allows code in any language to naturally interact with JavaScript classes. It is the technology that enables the AWS Cloud Development Kit to deliver polyglot libraries from a single codebase!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/aws"&gt;
        aws
      &lt;/a&gt; / &lt;a href="https://github.com/aws/jsii"&gt;
        jsii
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      jsii allows code in any language to naturally interact with JavaScript classes. It is the technology that enables the AWS Cloud Development Kit to deliver polyglot libraries from a single codebase!
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/aws/jsii/main/./logo/png/128.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jcv4H4oz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/aws/jsii/main/./logo/png/128.png" alt="jsii"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://cdk.dev" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/77f72ca5a7f8e06ee5be5981b9db9ad36731ec4a2bbf10918dde04a09ddeb2d0/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d536c61636b266d6573736167653d63646b2e64657626636f6c6f723d627269676874677265656e266c6f676f3d736c61636b" alt="Join the chat at https://cdk.Dev"&gt;&lt;/a&gt;
&lt;a href="https://raw.githubusercontent.com/aws/jsii/main/#contributors-"&gt;&lt;img src="https://camo.githubusercontent.com/6e82457b7261ec730ecd636f553d8b2118715ad8bda6d89aa99eeda80bd1d9dd/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f616c6c2d636f6e7472696275746f72732f6177732f6a7369692f6d61696e3f6c6162656c3d254532253943254138253230416c6c253230436f6e7472696275746f7273" alt="All Contributors"&gt;&lt;/a&gt;
&lt;a href="https://github.com/aws/jsii/actions?query=workflow%3AMain+branch%3Amain"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eAtDDLD_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws/jsii/workflows/Main/badge.svg" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/jsii" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ae1430366f8227660b6bc0a03e7025a866626c5ab61a9bb72887c40b1d44b09b/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f6a7369693f6c6f676f3d6e706d" alt="npm"&gt;&lt;/a&gt;
&lt;a href="https://hub.docker.com/r/jsii/superchain" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/80b1a3645b3490b03ce5248d931b2586b64f355d12ddbe70ba2407173e4a4e66/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f636b65722d6a7369692532467375706572636861696e2d627269676874677265656e3f6c6f676f3d646f636b6572" alt="docker"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Overview&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;jsii&lt;/code&gt; allows code in any language to naturally interact with JavaScript classes. It is the technology that enables the
&lt;a href="https://github.com/aws/aws-cdk"&gt;AWS Cloud Development Kit&lt;/a&gt; to deliver polyglot libraries from a single codebase!&lt;/p&gt;
&lt;p&gt;A class library written in &lt;strong&gt;TypeScript&lt;/strong&gt; can be used in projects authored in &lt;strong&gt;TypeScript&lt;/strong&gt; or &lt;strong&gt;Javascript&lt;/strong&gt; (as
usual), but also in &lt;strong&gt;Python&lt;/strong&gt;, &lt;strong&gt;Java&lt;/strong&gt;, &lt;strong&gt;C#&lt;/strong&gt; (and other languages from the &lt;em&gt;.NET&lt;/em&gt; family), ...&lt;/p&gt;
&lt;h2&gt;
❓ Documentation&lt;/h2&gt;
&lt;p&gt;Head over to our &lt;a href="https://aws.github.io/jsii" rel="nofollow"&gt;documentation website&lt;/a&gt;!&lt;/p&gt;
&lt;h1&gt;
📖 Blog Posts&lt;/h1&gt;
&lt;p&gt;Here's a collection of blog posts (in chronological order) related to &lt;code&gt;jsii&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;2020-01-11:&lt;/strong&gt; &lt;a id="user-content-blog-mbonig" href="https://raw.githubusercontent.com/aws/jsii/main/"&gt; &lt;/a&gt;&lt;a href="https://www.matthewbonig.com/2020/01/11/creating-constructs/" rel="nofollow"&gt;How to Create CDK Constructs&lt;/a&gt;, by &lt;a href="http://www.matthewbonig.com/" rel="nofollow"&gt;Matthew Bonig&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;2020-05-27:&lt;/strong&gt; &lt;a id="user-content-blog-floydpink" href="https://raw.githubusercontent.com/aws/jsii/main/"&gt; &lt;/a&gt;&lt;a href="https://aws.amazon.com/fr/blogs/opensource/generate-python-java-dotnet-software-libraries-from-typescript-source/" rel="nofollow"&gt;Generate Python, Java, and .NET software libraries from a TypeScript
source&lt;/a&gt;, by &lt;a href="https://harimenon.com/" rel="nofollow"&gt;Hari Pachuveetil&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;2020-12-23:&lt;/strong&gt; &lt;a id="user-content-blog-romainmuller" href="https://raw.githubusercontent.com/aws/jsii/main/"&gt; &lt;/a&gt;&lt;a href="https://aws.amazon.com/blogs/opensource/how-the-jsii-open-source-framework-meets-developers-where-they-are/" rel="nofollow"&gt;How the jsii open source framework meets developers where they are
&lt;/a&gt;, by &lt;a href="https://github.com/RomainMuller"&gt;Romain Marcadier&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;ℹ️ If you wrote blog posts about &lt;code&gt;jsii&lt;/code&gt; and would like to have them referenced here, do…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/aws/jsii"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#7-flagiconcss"&gt;
  &lt;/a&gt;
  7. flag-icon-css
&lt;/h3&gt;

&lt;p&gt;A collection of all country flags in SVG — plus the CSS for easier integration&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/lipis"&gt;
        lipis
      &lt;/a&gt; / &lt;a href="https://github.com/lipis/flag-icon-css"&gt;
        flag-icon-css
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🎏 A collection of all country flags in SVG — plus the CSS for easier integration
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
flag-icon-css&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;A collection of all country flags in SVG — plus the CSS for easier integration
See the &lt;a href="https://flagicons.lipis.dev" rel="nofollow"&gt;demo&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
Install&lt;/h2&gt;
&lt;p&gt;You can either &lt;a href="https://github.com/lipis/flag-icon-css/archive/master.zip"&gt;download&lt;/a&gt;
the whole project as is or install it via Bower or NPM:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;$ bower install flag-icon-css
$ npm install flag-icon-css&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;For using the flags inline with text add the classes &lt;code&gt;.flag-icon&lt;/code&gt; and
&lt;code&gt;.flag-icon-xx&lt;/code&gt; (where &lt;code&gt;xx&lt;/code&gt; is the
&lt;a href="https://www.iso.org/obp/ui/#search/code/" rel="nofollow"&gt;ISO 3166-1-alpha-2 code&lt;/a&gt;
of a country) to an empty &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;. If you want to have a squared version flag
then add the class &lt;code&gt;flag-icon-squared&lt;/code&gt; as well. Example:&lt;/p&gt;
&lt;div class="highlight highlight-text-html-basic position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;span&lt;/span&gt; &lt;span class="pl-c1"&gt;class&lt;/span&gt;="&lt;span class="pl-s"&gt;flag-icon flag-icon-gr&lt;/span&gt;"&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;span&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;span&lt;/span&gt; &lt;span class="pl-c1"&gt;class&lt;/span&gt;="&lt;span class="pl-s"&gt;flag-icon flag-icon-gr flag-icon-squared&lt;/span&gt;"&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;span&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;You could also apply this to any element, but in that case you'll have to use the
&lt;code&gt;flag-icon-background&lt;/code&gt; instead of &lt;code&gt;flag-icon&lt;/code&gt; and you're set. This will add the
correct background with the following CSS properties:&lt;/p&gt;
&lt;div class="highlight highlight-source-css position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c1"&gt;background-size&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/lipis/flag-icon-css"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#8-mermaid"&gt;
  &lt;/a&gt;
  8. Mermaid
&lt;/h3&gt;

&lt;p&gt;Generation of diagram and flowchart from text in a similar manner as markdown &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mermaid-js"&gt;
        mermaid-js
      &lt;/a&gt; / &lt;a href="https://github.com/mermaid-js/mermaid"&gt;
        mermaid
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Generation of diagram and flowchart from text in a similar manner as markdown
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
mermaid &lt;a href="https://travis-ci.org/mermaid-js/mermaid" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0d7e7effeff169cc55aeade60bb087abcc507122e8d5ab7d8dba780590029d75/68747470733a2f2f7472617669732d63692e6f72672f6d65726d6169642d6a732f6d65726d6169642e7376673f6272616e63683d6d6173746572" alt="Build Status"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/mermaid" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7da8b7965d1f5f3cadbdf9f4ef9983b1da2a7f1fbc22a9bf0ac7a305eba5959e/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f6d65726d616964" alt="NPM"&gt;&lt;/a&gt; &lt;a href="https://coveralls.io/github/mermaid-js/mermaid?branch=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9e5716a33036665843728776991d398c189d6fc61dc5a4bd91de686ef6a3bc7e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6d65726d6169642d6a732f6d65726d6169642f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status"&gt;&lt;/a&gt; &lt;a href="https://join.slack.com/t/mermaid-talk/shared_invite/enQtNzc4NDIyNzk4OTAyLWVhYjQxOTI2OTg4YmE1ZmJkY2Y4MTU3ODliYmIwOTY3NDJlYjA0YjIyZTdkMDMyZTUwOGI0NjEzYmEwODcwOTE" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/eaa8f296d1ffaf8630076d6af62392be1d03e86c7c21fcb258f9a2b17a26fa73/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6d6573736167653d6a6f696e2532306368617426636f6c6f723d396366266c6f676f3d736c61636b266c6162656c3d736c61636b" alt="Join our Slack!"&gt;&lt;/a&gt; &lt;a href="https://percy.io/Mermaid/mermaid" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b5059bda3f1e150a4efde71c4764a36049ea24135156d700e3d1587e6cd8f03b/68747470733a2f2f70657263792e696f2f7374617469632f696d616765732f70657263792d62616467652e737667" alt="This project is using Percy.io for visual regression testing."&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/mermaid-js/mermaid/develop/./img/header.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---1jtpLL_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/mermaid-js/mermaid/develop/./img/header.png" alt="banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🏆 &lt;strong&gt;Mermaid was nominated and won the &lt;a href="https://osawards.com/javascript/2019" rel="nofollow"&gt;JS Open Source Awards (2019)&lt;/a&gt; in the category "The most exciting use of technology"!!!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thanks to all involved, people committing pull requests, people answering questions! 🙏&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
About&lt;/h2&gt;
&lt;p&gt;Mermaid is a Javascript based diagramming and charting tool that uses Markdown-inspired text definitions and a renderer to create and modify complex diagrams.  The main purpose of Mermaid is to help documentation catch up with development.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Doc-Rot is a Catch-22 that Mermaid helps to solve.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Diagramming and documentation costs precious developer time and gets outdated quickly
But not having diagrams or docs ruins productivity and hurts organizational learning. &lt;br&gt;
Mermaid addresses this problem by cutting the time, effort and tooling that is required to create modifiable diagrams and charts, for smarter and more reusable content
The text definitions for Mermaid diagrams allows for it to be updated easily, it can also be made part of production…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mermaid-js/mermaid"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#9-babylonjs"&gt;
  &lt;/a&gt;
  9. Babylon.js
&lt;/h3&gt;

&lt;p&gt;Babylon.js is a powerful, beautiful, simple, and open game and rendering engine packed into a friendly JavaScript framework. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/BabylonJS"&gt;
        BabylonJS
      &lt;/a&gt; / &lt;a href="https://github.com/BabylonJS/Babylon.js"&gt;
        Babylon.js
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Babylon.js is a powerful, beautiful, simple, and open game and rendering engine packed into a friendly JavaScript framework.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Babylon.js&lt;/h1&gt;
&lt;p&gt;Getting started? Play directly with the Babylon.js API using our &lt;a href="https://playground.babylonjs.com/" rel="nofollow"&gt;playground&lt;/a&gt;. It also contains a lot of samples to learn how to use it.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://badge.fury.io/js/babylonjs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/df71cfd7e712177705d052f40735126af6690378961a7104a64da8aa7654a3f3/68747470733a2f2f62616467652e667572792e696f2f6a732f626162796c6f6e6a732e737667" alt="npm version"&gt;&lt;/a&gt;
&lt;a href="https://dev.azure.com/babylonjs/ContinousIntegration/_build/latest?definitionId=1&amp;amp;branchName=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1359a4c9ddcece577e36590e8c1717e14b88c565ab3363ce3db26e44da5b3bf4/68747470733a2f2f6465762e617a7572652e636f6d2f626162796c6f6e6a732f436f6e74696e6f7573496e746567726174696f6e2f5f617069732f6275696c642f7374617475732f43493f6272616e63684e616d653d6d6173746572" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="http://isitmaintained.com/project/BabylonJS/Babylon.js" title="Average time to resolve an issue" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5bc9324b6c6cf75063681fa0c9535f92efa2a28a202e21b4b29421b4f00a3f3f/687474703a2f2f697369746d61696e7461696e65642e636f6d2f62616467652f7265736f6c7574696f6e2f426162796c6f6e4a532f426162796c6f6e2e6a732e737667" alt="Average time to resolve an issue"&gt;&lt;/a&gt;
&lt;a href="https://isitmaintained.com/project/babylonJS/babylon.js" title="Percentage of issues still open" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c46a699cad4de04cafb76af52f73b34eb4b4e0b94d8b569b97f2dfd96d2b75e1/68747470733a2f2f697369746d61696e7461696e65642e636f6d2f62616467652f6f70656e2f626162796c6f6e4a532f626162796c6f6e2e6a732e737667" alt="Percentage of issues still open"&gt;&lt;/a&gt;
&lt;a href="https://img.badgesize.io/BabylonJS/Babylon.js/master/dist/preview%20release/babylon.js.svg?compression=gzip" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c59bc7b3af6f58fe97dd0ad96d6401c7c340708ee290238eec3372a5b489fe4e/68747470733a2f2f696d672e626164676573697a652e696f2f426162796c6f6e4a532f426162796c6f6e2e6a732f6d61737465722f646973742f7072657669657725323072656c656173652f626162796c6f6e2e6a732e7376673f636f6d7072657373696f6e3d677a6970" alt="Build Size"&gt;&lt;/a&gt;
&lt;a href="https://twitter.com/intent/follow?screen_name=babylonjs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/69af60c8ccc5b072db79002809eed2c200e54f90961fefa2d035280e6853a345/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f626162796c6f6e6a732e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f77" alt="Twitter"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/7ece69f0da9a479764c62443022d013462d18afae57b68a4e0e3b52750006ad4/68747470733a2f2f696d672e736869656c64732e696f2f646973636f757273652f75736572733f7365727665723d6874747073253341253246253246666f72756d2e626162796c6f6e6a732e636f6d"&gt;&lt;img src="https://camo.githubusercontent.com/7ece69f0da9a479764c62443022d013462d18afae57b68a4e0e3b52750006ad4/68747470733a2f2f696d672e736869656c64732e696f2f646973636f757273652f75736572733f7365727665723d6874747073253341253246253246666f72756d2e626162796c6f6e6a732e636f6d" alt="Discourse users"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Any questions?&lt;/strong&gt; Here is our official &lt;a href="https://forum.babylonjs.com/" rel="nofollow"&gt;forum&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
CDN&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cdn.babylonjs.com/babylon.js" rel="nofollow"&gt;https://cdn.babylonjs.com/babylon.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cdn.babylonjs.com/babylon.max.js" rel="nofollow"&gt;https://cdn.babylonjs.com/babylon.max.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additional references can be found on &lt;a href="https://cdn.babylonjs.com/xxx" rel="nofollow"&gt;https://cdn.babylonjs.com/xxx&lt;/a&gt; where &lt;code&gt;xxx&lt;/code&gt; is the folder structure you can find in the /dist folder like &lt;a href="https://cdn.babylonjs.com/gui/babylon.gui.min.js" rel="nofollow"&gt;https://cdn.babylonjs.com/gui/babylon.gui.min.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For the preview release, use the following URLs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://preview.babylonjs.com/babylon.js" rel="nofollow"&gt;https://preview.babylonjs.com/babylon.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://preview.babylonjs.com/babylon.max.js" rel="nofollow"&gt;https://preview.babylonjs.com/babylon.max.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additional references can be found on &lt;a href="https://preview.babylonjs.com/xxx" rel="nofollow"&gt;https://preview.babylonjs.com/xxx&lt;/a&gt; where xxx is the folder structure you can find in the /dist/preview release folder like &lt;a href="https://preview.babylonjs.com/gui/babylon.gui.min.js" rel="nofollow"&gt;https://preview.babylonjs.com/gui/babylon.gui.min.js&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
npm&lt;/h2&gt;
&lt;p&gt;BabylonJS and its modules are published on npm with full typing support. To install, use:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;npm install babylonjs --save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will allow you to import BabylonJS entirely using:&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-c1"&gt;*&lt;/span&gt; &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-c1"&gt;BABYLON&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'babylonjs'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;or individual classes using:&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-v"&gt;Scene&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-v"&gt;Engine&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'babylonjs'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;If using TypeScript, don't forget to add 'babylonjs' to…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/BabylonJS/Babylon.js"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#10-dinerojs"&gt;
  &lt;/a&gt;
  10. Dinero.js
&lt;/h3&gt;

&lt;p&gt;Money is complex, and the primitives of the language aren't enough to properly represent it. Dinero.js is a JavaScript library that lets you express monetary values, but also perform mutations, conversions, comparisons, formatting, and overall make money manipulation easier and safer in your application.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/dinerojs"&gt;
        dinerojs
      &lt;/a&gt; / &lt;a href="https://github.com/dinerojs/dinero.js"&gt;
        dinero.js
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Create, calculate, and format money in JavaScript and TypeScript.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a href="https://v2.dinerojs.com/docs" rel="nofollow"&gt;
    &lt;img alt="Dinero.js" src="https://res.cloudinary.com/practicaldev/image/fetch/s--R9L_J8YH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/dinerojs/dinero.js/main/.github/banner.png"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://www.npmjs.com/package/dinero.js?activeTab=versions" rel="nofollow"&gt;&lt;img alt="Stability: alpha" src="https://camo.githubusercontent.com/d6941b3cbb65bb62764d1dbe8270071a0464c8ec8ea83b41031a81f335ddc46f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f73746162696c6974792d616c7068612d6634643033662e737667"&gt;&lt;/a&gt;
  &lt;a href="https://circleci.com/gh/dinerojs/dinero.js" rel="nofollow"&gt;&lt;img alt="CircleCI" src="https://camo.githubusercontent.com/5abcd47ea24e13bba2cf4a9e464a80228aa9b471768c35c3145d99afe2c49a20/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f6275696c642f67682f64696e65726f6a732f64696e65726f2e6a73"&gt;&lt;/a&gt;
  &lt;a href="https://github.com/dinerojs/dinero.js/blob/master/LICENSE"&gt;&lt;img alt="NPM" src="https://camo.githubusercontent.com/f1c906234d046fba23ccdeac2fd04fcffe1e6b4e889c76259bd816c90f1768a7/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f6c2f64696e65726f2e6a73"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  Dinero.js lets you create, calculate, and format money safely in JavaScript and TypeScript.&lt;br&gt;
  &lt;a href="https://v2.dinerojs.com/docs" rel="nofollow"&gt;&lt;strong&gt;v2.dinerojs.com/docs&lt;/strong&gt;&lt;/a&gt;
&lt;/p&gt;




&lt;p&gt;Money is complex, and the primitives of the language aren't enough to properly represent it. Dinero.js is a JavaScript library that lets you express monetary values, but also perform mutations, conversions, comparisons, formatting, and overall make money manipulation easier and safer in your application.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ℹ️ Dinero.js v2 is currently in alpha. For v1, check the &lt;a href="https://github.com/dinerojs/dinero.js/tree/v1"&gt;&lt;code&gt;v1&lt;/code&gt; branch&lt;/a&gt; and &lt;a href="https://v1.dinerojs.com/" rel="nofollow"&gt;docs&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
📦 Install&lt;/h2&gt;

&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;npm install dinero.js@alpha
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;

yarn add dinero.js@alpha&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
⚡️ Quick start&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Dinero&lt;/code&gt; objects are minimal. Every function in &lt;code&gt;dinero.js&lt;/code&gt; is side-effect free, allowing you only to bundle exactly what you use.&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-c1"&gt;USD&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'@dinero.js/currencies'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;dinero&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s1"&gt;add&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'dinero.js'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;d1&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;dinero&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-c1"&gt;amount&lt;/span&gt;: &lt;span class="pl-c1"&gt;500&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-c1"&gt;currency&lt;/span&gt;: &lt;span class="pl-c1"&gt;USD&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;d2&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;dinero&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-c1"&gt;amount&lt;/span&gt;: &lt;span class="pl-c1"&gt;800&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-c1"&gt;currency&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/dinerojs/dinero.js"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#stargazing"&gt;
  &lt;/a&gt;
  Stargazing 📈
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-7-days"&gt;
  &lt;/a&gt;
  Top risers over last 7 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/jwasham/coding-interview-university"&gt;Coding Interview University&lt;/a&gt; +2,546 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +2,509 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nocodb/nocodb"&gt;NocoDB&lt;/a&gt; +1,038 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/alan2207/bulletproof-react"&gt;Bulletproof React&lt;/a&gt; +1,037 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/supabase/supabase"&gt;Supabase&lt;/a&gt; +735 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-7-days"&gt;
  &lt;/a&gt;
  Top growth(%) over last 7 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/alan2207/bulletproof-react"&gt;Bulletproof React&lt;/a&gt; +71%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bring-shrubbery/use-cookie-consent"&gt;useCookieConsent&lt;/a&gt; +34%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/junhoyeo/use-color"&gt;use-color&lt;/a&gt; +25%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/vechai/vechaiui"&gt;Vechai UI&lt;/a&gt; +17%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/elad2412/the-new-css-reset"&gt;The New CSS Reset&lt;/a&gt; +15%&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-30-days"&gt;
  &lt;/a&gt;
  Top risers over last 30 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +11,622 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jwasham/coding-interview-university"&gt;Coding Interview University&lt;/a&gt; +5,094 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms&lt;/a&gt; +3,408 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/solidjs/solid"&gt;Solid&lt;/a&gt; +3,121 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; +3,080 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-30-days"&gt;
  &lt;/a&gt;
  Top growth(%) over last 30 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/ossf/scorecard"&gt;Security Scorecards&lt;/a&gt; +179%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/NoQuarterTeam/boilerplate"&gt;Fullstack Boilerplate&lt;/a&gt; +171%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/netlify/framework-info"&gt;Framework Info&lt;/a&gt; +147%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/snowpackjs/astro"&gt;Astro&lt;/a&gt; +72%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bradtraversy/50projects50days"&gt;50 Projects in 50 Days&lt;/a&gt; +65%&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://www.iainfreestone.com"&gt;www.iainfreestone.com&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article you can &lt;a href="https://twitter.com/iain_freestone"&gt;follow me&lt;/a&gt; on Twitter where I regularly post bite size tips relating to HTML, CSS and JavaScript.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
