<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Talk Notes: 'Talmudic Gems For Rails Developers' (RailsConf 2021)</title>
      <author>Sylwia Vargas</author>
      <pubDate>Wed, 14 Apr 2021 14:49:24 +0000</pubDate>
      <link>https://dev.to/sylwiavargas/talk-notes-talmudic-gems-for-rails-developers-railsconf-2021-3a9n</link>
      <guid>https://dev.to/sylwiavargas/talk-notes-talmudic-gems-for-rails-developers-railsconf-2021-3a9n</guid>
      <description>&lt;p&gt;âœ¨ &lt;strong&gt;What is this post about&lt;/strong&gt;: As a part of my professional growth, I make time to watch conference talks on Ruby, Rails, JS, React, tech writing, and tech trivia. Previously, I'd just watch them but now I will take and publish notes for future reference. This talk was a part of RailsConf 2021 that I'm participating in at the time of writing. &lt;/p&gt;

&lt;p&gt;âœ¨ &lt;strong&gt;Talk:&lt;/strong&gt; 'Talmudic Gems For Rails Developers' by &lt;a href="https://twitter.com/yechielk"&gt;Yechiel Kalmenson&lt;/a&gt;, or &lt;a class="mentioned-user" href="https://dev.to/yechielk"&gt;@yechielk&lt;/a&gt;
 &lt;/p&gt;

&lt;p&gt;âœ¨ &lt;strong&gt;One-paragraph summary&lt;/strong&gt;: Am I my colleagueâ€™s keeper? To what extent are we responsible for the consequences of our code? More than two thousand years ago conversations on central questions of human ethics were enshrined in one of the primary ancient wisdom texts, the Talmud.&lt;/p&gt;

&lt;p&gt;âœ¨ &lt;strong&gt;Impression&lt;/strong&gt;:  I absolutely LOVED this talk and I will reference it often moving forward. I loved how Yechiel was calm and funny and smart and knowledgeable, how the talk was well-organized, and how much I have learned from it ðŸ’•&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#intro"&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#parallels-between-talmudic-studies-and-programming"&gt;Parallels between Talmudic studies and programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#read-more"&gt;Read more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Talmud&lt;/strong&gt;: a written record of the conversations between ancient Jewish sages; it's a living document; you can put yourself in between the debates; 
&amp;gt; "it's like an ancient twitter thread" ðŸ˜‚&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#parallels-between-talmudic-studies-and-programming"&gt;
  &lt;/a&gt;
  Parallels between Talmudic studies and programming
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;similarities for starters:

&lt;ul&gt;
&lt;li&gt;teasing out the abstraction from a specific example&lt;/li&gt;
&lt;li&gt;highly analytical with a strong creative component&lt;/li&gt;
&lt;li&gt;require prolonged concentration ("being in the zone")&lt;/li&gt;
&lt;li&gt;similarities in method&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;How to grow ourselves&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"Appoint For Yourself A Mentor, And Acquire For Yourself A Companion" &lt;a href="https://www.sefaria.org/Pirkei_Avot.1.6?lang=bi&amp;amp;with=all&amp;amp;lang2=en"&gt;Avot 1:6&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;We all owe our knowledge to books and courses -- we all depend on others to be where we are (and to provide a sanity check)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;How do we find a mentor&lt;/strong&gt;: Yechiel's relationships started more organically, someone he knew and reached out for feedback or for advice&lt;/li&gt;
&lt;li&gt;"One who is timid cannot learn, nor can an impatient person teach" &lt;a href="https://www.sefaria.org/Pirkei_Avot.2.5?lang=bi&amp;amp;with=all&amp;amp;lang2=en"&gt;Avot 2:5&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;do ask if you have a question! approach people!&lt;/li&gt;
&lt;li&gt;surround yourself with people who are like yourself; do pair-program with others;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;chavruta&lt;/strong&gt;: a way of studying Talmud between two people who bounce ideas off each other (just like pair-programming), helping each other grow and teaching each other; &lt;a href="https://www.chabad.org/library/article_cdo/aid/1144871/jewish/Chavruta-Learning-Torah-in-Pairs.htm"&gt;see here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;"Do Not Separate Yourself From The Community" &lt;a href="https://www.sefaria.org/Pirkei_Avot.2.4?lang=bi&amp;amp;with=all&amp;amp;lang2=en"&gt;Avot 2:4&lt;/a&gt;: participate in events, share resources, talk, be active&lt;/li&gt;
&lt;li&gt;consistency: Yechiel does not condone #100DaysOfCode, &lt;a href="https://blog.yechiel.me/100days0fcode-c32a5a1e1ef1?gi=960d195b7af8"&gt;he wanted to rename it to #86DaysOfCode&lt;/a&gt;, which leaves one day for mental health to not burn out; &lt;/li&gt;
&lt;li&gt;"One who reviews their studies one hundred times is not comparable to one who reviews their studies one hundred and one times" &lt;a href="https://www.sefaria.org/Chagigah.9b.10?lang=bi&amp;amp;with=all&amp;amp;lang2=en"&gt;Chagigah 9b&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;"When I did the #100DaysOfCode challenge, where I really noticed the growth was not on the 100th day when I sat down and coding was natural. I didn't have to force myself. By doing something over and over and over again, you build habits, you make it a part of you and that's where the true growth happens"&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;How to grow our team&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mentor others: paying it forward, helping others, investments; but&lt;/li&gt;
&lt;li&gt;"I have learned much from my teachers.. but from my students, I have learned more than from all of them" &lt;a href="https://www.sefaria.org/Taanit.7a.12?lang=bi&amp;amp;with=all&amp;amp;lang2=en"&gt;Ta'anit 7a&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;"If you only know Aleph, teach Aleph!" The Lubavitcher Rebbe -&amp;gt; find someone who doesn't know Aleph and teach them Aleph&lt;/li&gt;
&lt;li&gt;If you can't mentor others, blog it out! There's no reason not to!&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;How to grow the world around us&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we are all in it together&lt;/li&gt;
&lt;li&gt;"Just-World Fallacy": we assume that if someone is down the luck, we assume that they deserve it&lt;/li&gt;
&lt;li&gt;"Error messages" are your friends, they tell you what's broken and what you can fix&lt;/li&gt;
&lt;li&gt;"In programming, you spend the majority of your time with things being broken. Hell, if it worked  you'd be done programming" Steve Klabnik&lt;/li&gt;
&lt;li&gt;MINASWAN - Matz Is Nice, And So Are We&lt;/li&gt;
&lt;li&gt;A nice shout-out to Ben Greenberg ( &lt;a class="mentioned-user" href="https://dev.to/bengreenberg"&gt;@bengreenberg&lt;/a&gt;
 ) and Ariel Caplan ( &lt;a class="mentioned-user" href="https://dev.to/amcaplan"&gt;@amcaplan&lt;/a&gt;
 ) for inclusive PRs to Rails repo&lt;/li&gt;
&lt;li&gt;CHECK OUT &lt;a href="https://www.sefaria.org/Bava_Batra.10a.2?lang=bi&amp;amp;with=all&amp;amp;lang2=en"&gt;THIS WONDERFUL STORY ABOUT DRILLING A WHOLE UNDER ONE'S SEAT ON A BOAT&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;"It is not your duty to finish the work, but neither are you at liberty to neglect it" &lt;a href="https://www.sefaria.org/Pirkei_Avot.2.16?lang=bi&amp;amp;with=all&amp;amp;lang2=en"&gt;Avot 2:16&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#read-more"&gt;
  &lt;/a&gt;
  Read more
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://torahandtech.dev/"&gt;Torah &amp;amp;&amp;amp; Tech&lt;/a&gt; - Yechiel's and Ben Greenberg's newsletter that I love dearly&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chabad.org/library/article_cdo/aid/1144871/jewish/Chavruta-Learning-Torah-in-Pairs.htm"&gt;chvruta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://blog.yechiel.me/100days0fcode-c32a5a1e1ef1?gi=960d195b7af8"&gt;Introducing #86DaysOfCode&lt;/a&gt; by Yechiel&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>rails</category>
      <category>techtalks</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Wireworld! Svelte Edition </title>
      <author>Nathan Kallman</author>
      <pubDate>Wed, 14 Apr 2021 14:49:02 +0000</pubDate>
      <link>https://dev.to/kallmanation/wireworld-svelte-edition-1lgj</link>
      <guid>https://dev.to/kallmanation/wireworld-svelte-edition-1lgj</guid>
      <description>&lt;p&gt;This is Wireworld! Sorry, you don't know what a Wireworld is? How dare you not intimately know something I learned a few minutes ago!&lt;/p&gt;

&lt;p&gt;A Wireworld is similar to the famous &lt;a href="https://playgameoflife.com"&gt;Game of Life&lt;/a&gt;. An infinite world of square cells, each in a distinct, finite state. But unlike boring life that has only two states: alive and dead; Wireworld has four! That's like... twice as good?&lt;/p&gt;

&lt;p&gt;A Wireworld cell could either be: nothing, a conductor (wire), an electron tail, or an electron head. An electron head always becomes an electron tail which always becomes a wire, while a wire will stay a wire unless exactly one or two neighbors are an electron head, in which case it will follow suit (and nothing continues to be nothing).&lt;/p&gt;

&lt;p&gt;You can see those rules in action in the animation above. You can also play with those rules over here: &lt;a href="https://wireworld.klmntn.com"&gt;wireworld.klmntn.com&lt;/a&gt; (warning, it's only somewhat useable on mobile)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-making-of"&gt;
  &lt;/a&gt;
  The Making Of
&lt;/h1&gt;

&lt;p&gt;Every three months, &lt;a href="https://root.engineering"&gt;Root&lt;/a&gt; sets aside three days (called "hack days") for all its engineers to work on something of their choice. This time around I wanted to have some fun and also learn a little about &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt; (Root mostly uses React &amp;amp; React Native). So I chose to make a browser-based Wireworld using Svelte!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/kallmanation"&gt;
        kallmanation
      &lt;/a&gt; / &lt;a href="https://github.com/kallmanation/wireworld"&gt;
        wireworld
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A Wireworld (duh)
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Wireworld&lt;/h1&gt;
&lt;p&gt;A &lt;a href="https://en.wikipedia.org/wiki/Wireworld" rel="nofollow"&gt;Wireworld&lt;/a&gt; is a &lt;a href="https://en.wikipedia.org/wiki/Cellular_automaton" rel="nofollow"&gt;cellular automaton&lt;/a&gt; (like Conway's Game of Life) with four states:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;wire&lt;/li&gt;
&lt;li&gt;electron head&lt;/li&gt;
&lt;li&gt;electron tail&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These four states transition by the following rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;null -&amp;gt; null&lt;/li&gt;
&lt;li&gt;tail -&amp;gt; wire&lt;/li&gt;
&lt;li&gt;head -&amp;gt; tail&lt;/li&gt;
&lt;li&gt;wire -&amp;gt; head (iff exactly 1 or 2 &lt;a href="https://en.wikipedia.org/wiki/Moore_neighborhood" rel="nofollow"&gt;neighbors&lt;/a&gt; are an electron head)&lt;/li&gt;
&lt;li&gt;wire -&amp;gt; wire (otherwise)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Wireworlds are Turing-complete and are interesting in that they can so closely mirror digital transistor behavior with such simple rules.&lt;/p&gt;
&lt;p&gt;This is an implementation of a Wireworld and can be found at &lt;a href="https://wireworld.klmntn.com" rel="nofollow"&gt;wireworld.klmntn.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/kallmanation/wireworld"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#decisions-decisions-decisions"&gt;
  &lt;/a&gt;
  Decisions, Decisions, Decisions
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#framework"&gt;
  &lt;/a&gt;
  Framework
&lt;/h3&gt;

&lt;p&gt;How did I settle on Svelte? I'm already working in React and Vue and have worked a little with Ember long ago (I've even played with the now abandoned &lt;a href="https://github.com/intercellular/cell"&gt;Cell.js&lt;/a&gt;). Angular seems to be a different flavor of the React/Vue/Ember gang. Svelte though looks to have some novel ideas that I wanted to expose myself to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#graphics"&gt;
  &lt;/a&gt;
  Graphics
&lt;/h3&gt;

&lt;p&gt;There's really only three options for displaying anything on web:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;HTML + CSS&lt;/li&gt;
&lt;li&gt;SVG (+ light CSS)&lt;/li&gt;
&lt;li&gt;Canvas&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The nature of a Wireworld's rendering requirements makes HTML + CSS a no-go. Canvas honestly might be the most appropriate as it can be optimized for high-frequency re-rendering. But future things I'd like to build would work well in SVG and I've already played with Canvas in the past, so I wanted to learn about graphics in SVG!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#world-loop"&gt;
  &lt;/a&gt;
  World Loop
&lt;/h3&gt;

&lt;p&gt;At the base of the simulation, something will need to decide what the next state should be based on the current state. This could be done in a procedural way with a switch / ifs or functional way or object-oriented. I've &lt;a href="https://dev.to/kallmanation/oop-vs-fp-a-comparison-using-unconditional-fizzbuzz-29i0"&gt;written about the similarities and differences before&lt;/a&gt;. I chose an object-oriented approach where each cell will be an object that responds to &lt;code&gt;nextState&lt;/code&gt;; call &lt;code&gt;nextState&lt;/code&gt; on all the cells and the world's next state has been found.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-learned"&gt;
  &lt;/a&gt;
  What I Learned
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#svg-just-works"&gt;
  &lt;/a&gt;
  SVG Just Works
&lt;/h3&gt;

&lt;p&gt;And by this I mean two things. First, SVG does not present a lot to learn above and beyond HTML + CSS (compared to the whole drawing API of a Canvas). I just put SVG tags right into Svelte components and, &lt;em&gt;bang,&lt;/em&gt; graphics.&lt;/p&gt;

&lt;p&gt;Second, SVG solves some of my biggest pains of drawing on Canvas. On Canvas, everything needs to be constantly erased and redrawn and if I ever want to move my viewport I'll need to do all the math to scale and translate my graphics (or learn and use another library to do it for me). With SVG, one &lt;code&gt;viewBox&lt;/code&gt; attribute on the top &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; tag handles all the scaling and translations (written by people who know a lot more about graphics than I do &lt;em&gt;and&lt;/em&gt; offloaded to the browser so no JS needs spend time on those calculations).&lt;/p&gt;

&lt;p&gt;Unless you have a very high paced game or some 3D graphics to render, I would recommend going down the SVG road.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#svelte-stores-are-great"&gt;
  &lt;/a&gt;
  Svelte Stores are Great
&lt;/h3&gt;

&lt;p&gt;I've always heard that Svelte is good because it compiles down to vanilla JavaScript not needing virtual DOM, making it faster. But the state management available with Svelte's stores is fantastic (suck it Redux). The derived stores open even more possibilities. But by far my favorite are the custom stores: I absolutely love the patterns that opens up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-state-of-capturing-input-sucks"&gt;
  &lt;/a&gt;
  The State of Capturing Input Sucks
&lt;/h3&gt;

&lt;p&gt;I had no idea how bad listening for things like key presses and dragging events are today. Given how nice and fairly standard a lot of the APIs across browsers and platforms have become, I was shocked at how rough this space is. I think if I had to do this again, this will be one area where I defer to a library (like &lt;a href="https://hammerjs.github.io"&gt;hammer.js&lt;/a&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#svelte-seems-to-be-lacking-tutorials"&gt;
  &lt;/a&gt;
  Svelte Seems to be Lacking Tutorials
&lt;/h3&gt;

&lt;p&gt;There's plenty of &lt;em&gt;examples&lt;/em&gt; over on the &lt;a href="https://svelte.dev/repl/hello-world"&gt;REPL&lt;/a&gt; site. But those examples have next to no explanation on how they work; nearly every search I tried led me to one of those examples, so it was a bit of work piecing the things together, looking at docs, and doing experiments to get things working.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wireworlds-like-to-light-on-fire"&gt;
  &lt;/a&gt;
  Wireworlds Like to Light On Fire
&lt;/h3&gt;

&lt;p&gt;Very often a misplaced wire or extra spark will cause my whole creation to devolve into closely packed electrons shooting every which way. This happens shockingly easily and I think makes a wonderful allegory to why our real computers are so hard to make and keep working correctly.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#things-to-make-and-do-in-a-wireworld"&gt;
  &lt;/a&gt;
  Things To Make and Do in a Wireworld
&lt;/h1&gt;

&lt;p&gt;If you just want to go play with it now: &lt;a href="https://wireworld.klmntn.com"&gt;wireworld.klmntn.com&lt;/a&gt;. First, go check out the few &lt;a href="https://wireworld.klmntn.com/examples"&gt;examples&lt;/a&gt; already included. A main building block in Wireworlds is the "transistor":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V7jxXRmO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wt99farh3a23fag0if55.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V7jxXRmO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wt99farh3a23fag0if55.gif" alt="Animation of a Wireworld Transistor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like a real &lt;a href="http://www.cburch.com/logisim/docs/2.7/en/html/libs/wiring/transist.html"&gt;P-type&lt;/a&gt; transistor; our Wireworld transistor allows the signal to pass when nothing is on the gate, but blocks the signal when the gate is "on" (it even looks like a transistor diagram).&lt;/p&gt;

&lt;p&gt;The next piece used in most designs is a signal generator:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1S4mPF5C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q0fdceai6gpcwnfvfbv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1S4mPF5C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q0fdceai6gpcwnfvfbv.gif" alt="Animation of a Signal Generator in a Wireworld"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Any loop of any shape with an electron moving around it can continuously emit electrons at a regular interval.&lt;/p&gt;

&lt;p&gt;And go have fun! Export your creations and comment below.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>svelte</category>
      <category>cellularautomaton</category>
    </item>
    <item>
      <title>JavaScript Interview Question #32: 0.1 + 0.1 + 0.1 === 0.3</title>
      <author>Coderslang: Become a Software Engineer</author>
      <pubDate>Wed, 14 Apr 2021 14:47:43 +0000</pubDate>
      <link>https://dev.to/coderslang/javascript-interview-question-32-0-1-0-1-0-1-0-3-4ebn</link>
      <guid>https://dev.to/coderslang/javascript-interview-question-32-0-1-0-1-0-1-0-3-4ebn</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rEpre1Ql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-32.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rEpre1Ql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-32.png" alt="js-test-32"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What will be logged to the console?&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;At a first glance, the answer is &lt;code&gt;true&lt;/code&gt; as &lt;code&gt;0.1 + 0.1 + 0.1&lt;/code&gt; is obviously equal to &lt;code&gt;0.3&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;But thatâ€™s only before we get into the details of how the numbers are represented in JavaScript.&lt;/p&gt;

&lt;p&gt;If you try to execute the statement &lt;code&gt;console.log(0.1 + 0.2)&lt;/code&gt; in JS, youâ€™ll get a number &lt;code&gt;0.30000000000000004&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This happens because in JavaScript and quite a few other programming languages some decimal numbers can't be represented exactly as they are.&lt;/p&gt;

&lt;p&gt;For example &lt;code&gt;0.1&lt;/code&gt; in binary will result in an endless fraction, the same way as &lt;code&gt;1/3&lt;/code&gt; becomes &lt;code&gt;0.333(3)&lt;/code&gt; in the decimal number system.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;ANSWER&lt;/strong&gt;: &lt;code&gt;false&lt;/code&gt; will be logged to the console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://js.coderslang.com/sign-in"&gt;Learn Full-Stack JavaScript&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Sails development with Docker and DockerÂ Compose</title>
      <author>Eudaimonia</author>
      <pubDate>Wed, 14 Apr 2021 14:18:32 +0000</pubDate>
      <link>https://dev.to/eudaimonia_ar/sails-development-with-docker-and-docker-compose-36l7</link>
      <guid>https://dev.to/eudaimonia_ar/sails-development-with-docker-and-docker-compose-36l7</guid>
      <description>&lt;p&gt;Docker makes it easy to set up and run a development environment and also simplifies the deployment of your applications. In this article we will see how to setup a Sails development workflow with Docker and Docker Compose.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-and-whys-docker-amp-docker-compose"&gt;
  &lt;/a&gt;
  Whats and whys: Docker &amp;amp; Docker Compose
&lt;/h1&gt;

&lt;p&gt;The goal of this article is to make setting up a Docker workflow for Sails as simple as possible. Docker makes it easier to set up and run a development environment and also simplifies the deployment. &lt;/p&gt;

&lt;p&gt;First, weâ€™ll get into how Docker and Docker Compose work and its benefits. Then a step by step guide to make our beloved Sails run inside a Docker container. Let's get started!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aEOAonmg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4v8sh7kawk5r78yez0u.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aEOAonmg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4v8sh7kawk5r78yez0u.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#containerization"&gt;
  &lt;/a&gt;
  Containerization
&lt;/h3&gt;

&lt;p&gt;Before talking about Docker and Sails we need to understand what is containerization and why we want it.&lt;br&gt;
Containerization is a form of virtualization, through which applications are run in isolated user spaces called containers. We can think of a container as a lightweight virtual machine (but to be clear, it is not).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eZnE9rY9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1njhg35emitkono64h6y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eZnE9rY9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1njhg35emitkono64h6y.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zcuEvqlK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16o7ijl9n57b2p35f349.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zcuEvqlK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16o7ijl9n57b2p35f349.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Comparing Containers and Virtual Machines&lt;/em&gt; [1]&lt;/p&gt;

&lt;p&gt;But, why do we want it?&lt;/p&gt;

&lt;p&gt;With containerization, everything an application needs to run, let's say, its binaries, libraries, configuration files and dependencies, are encapsulated and isolated in its container. This makes it easier to set up and run a development environment, and also simplifies the deployment by reducing the chances of missing or different versions of libraries, files or dependencies errors.&lt;/p&gt;

&lt;p&gt;The container itself is abstracted away from the host OS, with only limited access to underlying resources. Isolation has its advantages, for example portability, stability and security.&lt;/p&gt;

&lt;p&gt;So, standard, lightweight, secureâ€¦ &lt;strong&gt;yes as developers we want containerization!&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#docker-and-docker-compose"&gt;
  &lt;/a&gt;
  Docker and Docker Compose
&lt;/h3&gt;

&lt;p&gt;The word "Docker" refers to several things including an open source project, tools and a company (Docker Inc., the company that primarily supports the project and tools).&lt;/p&gt;

&lt;p&gt;Talking about the tools, Docker is a tool designed to make it easier to create, deploy, and run applications by using containers.&lt;/p&gt;

&lt;p&gt;Container orchestration automates the deployment, management, scaling, and networking of containers. It can help you deploy the same application across different environments without needing to redesign it. As an example, microservices in containers make it easy to orchestrate services, including storage, networking, and security. &lt;strong&gt;Docker Compose is an orchestration tool for Docker containers.&lt;/strong&gt; [2]&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#installing-docker"&gt;
  &lt;/a&gt;
  Installing Docker
&lt;/h3&gt;

&lt;p&gt;Mac: &lt;a href="https://docs.docker.com/docker-for-mac/install/"&gt;https://docs.docker.com/docker-for-mac/install/&lt;/a&gt;&lt;br&gt;
Windows: &lt;a href="https://docs.docker.com/docker-for-windows/install/"&gt;https://docs.docker.com/docker-for-windows/install/&lt;/a&gt;&lt;br&gt;
Ubuntu: &lt;a href="https://docs.docker.com/engine/install/ubuntu/"&gt;https://docs.docker.com/engine/install/ubuntu/&lt;/a&gt;&lt;br&gt;
Others: &lt;a href="https://docs.docker.com/engine/install/"&gt;https://docs.docker.com/engine/install/&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#sails-containerization"&gt;
  &lt;/a&gt;
  Sails containerization
&lt;/h1&gt;

&lt;p&gt;Now, how do we make Sails, our beloved Node framework, run inside a container? &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#sails-cli-image"&gt;
  &lt;/a&gt;
  Sails CLI image
&lt;/h3&gt;

&lt;p&gt;Our container needs an image to run. Let's create one.&lt;br&gt;
To do so, create docker-sails-cli directory and a file named Dockerfile inside it with this content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:lts&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; sails@1.4.2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The FROM statement declares we are using node latest lts version as base image for ours. The syntax used is &lt;code&gt;imageName:tag&lt;/code&gt;, if no tag is specified, the default is used. [3]&lt;/p&gt;

&lt;p&gt;At the same time Node lts image is based on Debian Streatch. So this is our project environment, Sails 1.4.2, node 14.15.4 (at the time of writing this) running on a Debian Streatch.&lt;/p&gt;

&lt;p&gt;Now we need to build our image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker build &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;-t&lt;/span&gt; sails-cli:1.4.2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simple, right?&lt;/p&gt;

&lt;p&gt;Letâ€™s see what we did.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker build [context] -t [tag]&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;context&lt;/strong&gt;: The context where we are building. As we are in the same directory as the Dockerfile we use &lt;code&gt;.&lt;/code&gt;.  And also, thereâ€™s no need to specify the file name as Dockerfile is the default one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tag&lt;/strong&gt;: It is optional, but we want to tag the image we just built as we are probably going to have many different images with different versions for different projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-new-sails-project"&gt;
  &lt;/a&gt;
  Creating a new Sails project
&lt;/h3&gt;

&lt;p&gt;Once we have our Sails CLI image built we are going to use it to create a new Sails project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;:/app &lt;span class="nt"&gt;-w&lt;/span&gt; /app sails-cli:1.4.0 sails new sails-docker-example &lt;span class="nt"&gt;--no-frontend&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;docker run&lt;/strong&gt;: Create and run a new container&lt;br&gt;
&lt;strong&gt;--rm&lt;/strong&gt;: Remove container after process finishes as we donâ€™t need the container after that&lt;br&gt;
&lt;strong&gt;-v&lt;/strong&gt;: Mount current working directory (in our host computer) in /app path inside container. As a result we are sharing current directory with the container&lt;br&gt;
&lt;strong&gt;-w&lt;/strong&gt;: Set container current working directory to /app&lt;br&gt;
&lt;strong&gt;sails-cli:1.4.0&lt;/strong&gt;: Our previously built Sails image&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sails new sails-docker-example --no-frontend&lt;/strong&gt;: Sails CLI command we want to run in the container.&lt;/p&gt;

&lt;p&gt;As a result, after running &lt;code&gt;sails new&lt;/code&gt; in the container, we are going to find a new directory created with our new Sails project. &lt;/p&gt;

&lt;p&gt;Now, letâ€™s run our project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;sails-docker-example
docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;:/app &lt;span class="nt"&gt;-w&lt;/span&gt; /app &lt;span class="nt"&gt;-p&lt;/span&gt; 1337:1337 sails-cli:1.4.0 sails lift
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;-i&lt;/strong&gt;: Keep STDIN open even if not attached&lt;br&gt;
&lt;strong&gt;-t&lt;/strong&gt;: Allocate a pseudo-TTY&lt;br&gt;
&lt;strong&gt;-p&lt;/strong&gt;: Maps container 1337 to host computer so we can reach our app through localhost:1337&lt;/p&gt;

&lt;p&gt;It's alive!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3wYV5aEJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3chsoinwvj4pmagcqpxp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3wYV5aEJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3chsoinwvj4pmagcqpxp.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#running-and-debugging"&gt;
  &lt;/a&gt;
  Running and debugging
&lt;/h3&gt;

&lt;p&gt;As you may notice, although our project is running, if you modify a file you will need to stop the container and launch it again to get the changes applied.&lt;/p&gt;

&lt;p&gt;Nodemon to the rescue!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;:/app &lt;span class="nt"&gt;-w&lt;/span&gt; /app sails-cli:1.4.0 npm &lt;span class="nb"&gt;install &lt;/span&gt;nodemon &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, open &lt;strong&gt;package.json&lt;/strong&gt; and in the &lt;strong&gt;scripts&lt;/strong&gt; section add a new one, &lt;strong&gt;debug&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"debug"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nodemon --inspect=0.0.0.0 app.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"NODE_ENV=production node app.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And run again, but this time instead of sails lift we are going to run with npm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;:/app &lt;span class="nt"&gt;-w&lt;/span&gt; /app &lt;span class="nt"&gt;-p&lt;/span&gt; 1337:1337 &lt;span class="nt"&gt;-p&lt;/span&gt; 9229:9229 sails-cli:1.4.0 npm run debug
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, modify a file, save it and verify that the project is restarted automatically.&lt;/p&gt;

&lt;p&gt;Finally, as we are running inside a container we need a way to get the debugger connected to the process, so we are mapping the 9559 port.&lt;/p&gt;

&lt;p&gt;If you use VS Code you can use the following configuration in the &lt;br&gt;
launch.json file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"configurations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"address"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"localRoot"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"${workspaceFolder}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Attach to Remote"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"port"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;9229&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"remoteRoot"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"request"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"attach"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"skipFiles"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;node_internals&amp;gt;/**"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"restart"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#docker-compose"&gt;
  &lt;/a&gt;
  Docker compose
&lt;/h1&gt;

&lt;p&gt;As we mentioned before Docker Compose is an orchestration tool. Compose allows us to define our infrastructure, letâ€™s say, services, networks, volumes in an YAML file.&lt;/p&gt;

&lt;p&gt;As a first step we will create a very simple file defining our Sails service on it. For this service we will set image, command, ports mapping, volume mounts, working directory, etc, as we did with Docker command line tool.&lt;/p&gt;

&lt;p&gt;Our docker-compose.yml:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3'&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;api&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sails-cli:1.4.0&lt;/span&gt; &lt;span class="c1"&gt;# same as with docker cli&lt;/span&gt;
        &lt;span class="c1"&gt;# Run npm install before starting sails to keep our dependencies installed and updated&lt;/span&gt;
        &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sh -c "npm install &amp;amp;&amp;amp; npm run debug"&lt;/span&gt;
        &lt;span class="na"&gt;working_dir&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/app&lt;/span&gt; &lt;span class="c1"&gt;# same as -w with docker cli&lt;/span&gt;
        &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# same as -p with docker cli&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;1337:1337'&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;9229:9229'&lt;/span&gt;
        &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# same as -v with docker cli&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.:/app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we will use docker-compose command to lift our service.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result is the same as running with Docker CLI.&lt;/p&gt;

&lt;p&gt;In case we want to remove the created infrastructure, once stopped, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose down
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will remove all the containers, networks, volumes created with &lt;code&gt;docker-compose up&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#database-containerization"&gt;
  &lt;/a&gt;
  Database containerization
&lt;/h1&gt;

&lt;p&gt;In most cases we will require a database for our project. In this example we will be using MongoDB but itâ€™s possible to do the same with other db engine supported by Sails. [4]&lt;/p&gt;

&lt;p&gt;For those who donâ€™t know, MongoDB is a free and open-source cross-platform document-oriented database program. [5]&lt;/p&gt;

&lt;p&gt;Fortunately MongoDB has an official image that we will be using to add a database service to our project.&lt;/p&gt;

&lt;p&gt;First, we need to add Sails MongoDB adapter to our project. As we did before, we can add and install a dependency to our project with Docker like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;:/app &lt;span class="nt"&gt;-w&lt;/span&gt; /app sails-cli:1.4.0 npm &lt;span class="nb"&gt;install &lt;/span&gt;sails-mongo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, modify our project config and set mongo as our default adapter.&lt;/p&gt;

&lt;p&gt;In the config/datastore.js file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sails-mongo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB_URL&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we need to add MongoDB service to our docker-compose.yml and provision Sails service with needed config.&lt;/p&gt;

&lt;p&gt;docker-compose.yml&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3'&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;api&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sails-cli:1.4.0&lt;/span&gt;
        &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sh -c "npm install &amp;amp;&amp;amp; npm run debug"&lt;/span&gt;
        &lt;span class="na"&gt;working_dir&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/app&lt;/span&gt;
        &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;1337:1337'&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;9229:9229'&lt;/span&gt;
        &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.:/app&lt;/span&gt;
        &lt;span class="na"&gt;env_file&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./sails.env&lt;/span&gt; &lt;span class="c1"&gt;# set env vars using a file&lt;/span&gt;

    &lt;span class="na"&gt;db&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongodb&lt;/span&gt; &lt;span class="c1"&gt;# set name to the container&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo:4.4&lt;/span&gt; &lt;span class="c1"&gt;# as of this writing, the latest version is 4.4.3&lt;/span&gt;
        &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./mongo:/data/db&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We added a db service to our compose file, and also set an env file to Sails service. We will use that file to config our database connection.&lt;/p&gt;

&lt;p&gt;sails.env&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DB_URL=mongodb://root:@mongodb:27017/sails
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Compose allows us to connect to db using the container name as network address, that is why we can use &lt;strong&gt;mongodb&lt;/strong&gt; as the address in our connection url.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important note&lt;/strong&gt;: we are not enabling MongoDB authentication for this example but it is a good idea to do so for production environments. [6]&lt;/p&gt;

&lt;p&gt;Finally, use &lt;code&gt;docker-compose up&lt;/code&gt; to run, you will see MongoDB output along with Sails.&lt;/p&gt;

&lt;p&gt;And we are done, a fully Sails development environment running on Docker!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xPFMK-hP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlh5ipk0erii4jlnanyc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xPFMK-hP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlh5ipk0erii4jlnanyc.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you so much for reading my post, comments are welcome! &lt;/p&gt;

&lt;p&gt;Here is the link to the writter's twitter &lt;a class="mentioned-user" href="https://dev.to/vidueirof"&gt;@vidueirof&lt;/a&gt;
 for any questions you may have.Â &lt;/p&gt;

&lt;p&gt;[1] &lt;a href="https://www.docker.com/resources/what-container"&gt;https://www.docker.com/resources/what-container&lt;/a&gt;&lt;br&gt;
[2] &lt;a href="https://www.docker.com/why-docker"&gt;https://www.docker.com/why-docker&lt;/a&gt;&lt;br&gt;
[3] &lt;a href="https://hub.docker.com/_/node"&gt;https://hub.docker.com/_/node&lt;/a&gt;&lt;br&gt;
[4] &lt;a href="https://sailsjs.com/documentation/concepts/extending-sails/adapters/available-adapters"&gt;https://sailsjs.com/documentation/concepts/extending-sails/adapters/available-adapters&lt;/a&gt;&lt;br&gt;
[5] &lt;a href="https://www.mongodb.com"&gt;https://www.mongodb.com&lt;/a&gt;&lt;br&gt;
[6] &lt;a href="https://hub.docker.com/_/mongo"&gt;https://hub.docker.com/_/mongo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>docker</category>
      <category>dockercompose</category>
      <category>sails</category>
      <category>api</category>
    </item>
    <item>
      <title>How to capture picture using JavaScript | Webcam Js Tutorial</title>
      <author>Stackfindover</author>
      <pubDate>Wed, 14 Apr 2021 14:16:07 +0000</pubDate>
      <link>https://dev.to/stackfindover/how-to-capture-picture-using-javascript-webcam-js-tutorial-4cf2</link>
      <guid>https://dev.to/stackfindover/how-to-capture-picture-using-javascript-webcam-js-tutorial-4cf2</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Hello, guys In this tutorial we will try to solve the mentioned query. and also we will learn how to capture picture using JavaScript.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-query"&gt;
  &lt;/a&gt;
  Common Query
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;How to capture picture using JavaScript?&lt;/li&gt;
&lt;li&gt;How to capture a webcam image using JavaScript?&lt;/li&gt;
&lt;li&gt;How to draw a snapshot of a webcam in HTML?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For capturing pictures using JavaScript, first we need the Webcam JS library&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;See Also:-&lt;/strong&gt; &lt;a href="https://blogs.stackfindover.com/how-to-integrate-webcam-using-javascript/"&gt;How to Integrate Webcam using JavaScript&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-webcam-js"&gt;
  &lt;/a&gt;
  What is webcam js?
&lt;/h3&gt;

&lt;p&gt;Webcam.js is an &lt;strong&gt;Open Source JavaScript library that allows us to capture a picture from the webcam&lt;/strong&gt;. It uses HTML5 &lt;strong&gt;getUserMedia&lt;/strong&gt; API to capture the picture.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#webcam-js-quick-start-guide"&gt;
  &lt;/a&gt;
  Webcam Js Quick Start Guide
&lt;/h3&gt;

&lt;p&gt;We need to host the &lt;code&gt;webcam.js&lt;/code&gt; and &lt;code&gt;webcam.swf&lt;/code&gt; files on your web server, and drop in this HTML snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"webcam.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"camera"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"snapShot"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;language=&lt;/span&gt;&lt;span class="s"&gt;"JavaScript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;Webcam&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#camera&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;takeSnapShot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;Webcam&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;snap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data_uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;snapShot&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;img src=" &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;data_uri&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; " width="400" height="400"&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"cameraBtn"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"takeSnapShot()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a live camera view in the &lt;code&gt;#camera&lt;/code&gt; DIV, and when the Take Snapshot link is clicked it will take a still snapshot, convert it to a JPEG, and deliver a &lt;a href="http://en.wikipedia.org/wiki/Data_URI_scheme"&gt;Data URI&lt;/a&gt; which is inserted into the &lt;code&gt;#snapShot&lt;/code&gt; DIV as a standard &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#webcam-js-configuration"&gt;
  &lt;/a&gt;
  Webcam Js Configuration
&lt;/h3&gt;

&lt;p&gt;If you want to change the default settings, just call &lt;code&gt;Webcam.set()&lt;/code&gt; and pass in a hash with any of the following keys:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Height    : Auto
Width   : Auto
dest_width :    Auto
dest_height :   Auto
crop_width :    Disabled
crop_height :   Disabled
image_format :  jpeg
force_flash :   false
jpeg_quality :  90
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I will show you an example of overriding some parameters. Remember to call this before you attach the viewer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Webcam&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;650&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;310&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;dest_width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;dest_height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;620&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;image_format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jpeg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;jpeg_quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;force_flash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;   
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#capture-picture-using-javascript-video-output"&gt;
  &lt;/a&gt;
  Capture picture using JavaScript Video Output
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/7zCM8CJaJFo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#capture-picture-using-javascript-codepen-output"&gt;
  &lt;/a&gt;
  Capture picture using JavaScript Codepen Output
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;We will update soon:)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-full-article-with-source-code"&gt;
  &lt;/a&gt;
  &lt;a href="https://blogs.stackfindover.com/how-to-capture-picture-using-javascript/"&gt;Check Full Article With Source Code&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Â¿ CÃ³mo instalar Neovim en Windows ?</title>
      <author>Teo Dev</author>
      <pubDate>Wed, 14 Apr 2021 14:10:20 +0000</pubDate>
      <link>https://dev.to/teodev1611/como-instalar-neovim-en-windows-2aic</link>
      <guid>https://dev.to/teodev1611/como-instalar-neovim-en-windows-2aic</guid>
      <description>&lt;p&gt;Vamos a aprender como instalar este Fork de Vim en Windows. Pero antes veamos como naciÃ³ Neovim y sus pasos para la instalaciÃ³n &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#-c%C3%B3mo-surgi%C3%B3-neovim-"&gt;
  &lt;/a&gt;
  Â¿ CÃ³mo surgiÃ³ Neovim ?
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;El nacimiento de Neovim fue un parto natural. La comunidad enviaba sus mejoras al repositorio de Vim, y muchas de ellas eran descartadas. A no ser que arreglaran algÃºn tipo de error que entonces eran rÃ¡pidamente asimiladas. Pero un usuario lo cambiÃ³ todo. EnviÃ³ una mejora para dar una funcionalidad asÃ­ncrona que permitirÃ­a que Vim pudiera ejecutase de una manera que no congelara al propio editor. Pero sin explicaciÃ³n alguna, tambiÃ©n fue rechazada. Ni corto ni perezoso decidiÃ³ crear un fork. Una copia del cÃ³digo fuente. Donde continuarÃ­a su propia mejora. Poco a poco otros desarrolladores encontraron un lugar donde podÃ­an aÃ±adir sus ideas. Creando una continua y creciente flujo de ayudas que moldearon a Neovim tal como lo conocemos. SegÃºn &lt;a href="https://programadorwebvalencia.com/diferencias-entre-neovim-y-vim/"&gt;PROGRAMADORWEBVALENCIA&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ahora que sabemos como naciÃ³ neovim veamos su instalaciÃ³n en el sistema operativo Windows.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-descargar-neovim"&gt;
  &lt;/a&gt;
  1.- Descargar NeoVim
&lt;/h2&gt;

&lt;p&gt;Para Windows podemos instalar el package manager &lt;a href="https://chocolatey.org/"&gt;Chocolatey&lt;/a&gt; que es la opciÃ³n que recomiendo procedamos a instalar con choco:&lt;/p&gt;

&lt;p&gt;1.1 Instalar Chocolatey&lt;/p&gt;

&lt;p&gt;Este paso lo podemos omitir si ya tienes instalado chocolatey para eso ejecuta este comando en powershell.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;choco -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si el comando responde algo asÃ­ podemos saltar este paso.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rvVCa9eX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5g37p2y8g11sqtmadsk4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rvVCa9eX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5g37p2y8g11sqtmadsk4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En el caso que no instalamos chocolatey con este comando pero el &lt;em&gt;Powershell deberÃ­a estar como administrador&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ahora que esta instalado cerramos el powershell y lo volvemos a abrir como administrador y proseguimos con este comando&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;choco install neovim -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#2-instalar-el-package-manager"&gt;
  &lt;/a&gt;
  2. Instalar el package manager
&lt;/h1&gt;

&lt;p&gt;Ahora procedemos a instalar el package manager mÃ¡s famoso y maduro llamado &lt;a href="https://github.com/junegunn/vim-plug"&gt;Vim Plug&lt;/a&gt; una vez llegado a ese sitio corremos el siguiente comando en &lt;em&gt;Powershell como administrador&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iwr -useb https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim |`
    ni "$(@($env:XDG_DATA_HOME, $env:LOCALAPPDATA)[$null -eq $env:XDG_DATA_HOME])/nvim-data/site/autoload/plug.vim" -Force
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Una vez terminado el comando proseguimos con la instalaciÃ³n de git.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3instalaci%C3%B3n-de-git"&gt;
  &lt;/a&gt;
  3.InstalaciÃ³n de Git
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;PODEMOS OMITIR ESTE PASO SI YA TIENES INSTALADO GIT&lt;/em&gt; lo puedes comprobar con:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git --version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La pregunta es para que instalamos git por que la mayorÃ­a de package managers se basan en git por eso para evitar errores&lt;/p&gt;

&lt;p&gt;Vamos a este link &lt;a href="https://git-scm.com/"&gt;Descarga de Git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KeCO_JNp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g45u7ptcg7txmjprgpzr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KeCO_JNp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g45u7ptcg7txmjprgpzr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Damos click en la imagen y damos siguiente siguiente siguiente y cuando pida el editor seleccionamos Vim y listo.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-configurar-el-editor"&gt;
  &lt;/a&gt;
  4.- Configurar el editor
&lt;/h1&gt;

&lt;p&gt;Para configurar Neovim podemos ir a la siguiente carpeta&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:\Users\TuUsuario\AppData\Local\nvim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Una vez en la carpeta puedes clonar mi configuraciÃ³n o crear un archivo llamado init.vim para la configuraciÃ³n desde 0.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-clonar-mi-configuraci%C3%B3n-opcional"&gt;
  &lt;/a&gt;
  5.- Clonar mi configuraciÃ³n OPCIONAL
&lt;/h1&gt;

&lt;p&gt;Si quieres tener Neovim con mi configuraciÃ³n lo que tienes que tener en cuenta es:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tener instalado Node para descargar puedes hacerlo aquÃ­ &lt;a href="https://nodejs.org/en/"&gt;Descarga de Node&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Para instalar localiza tu carpeta de configuraciÃ³n que previamente he explicado luego de eso da click derecho y presiona abrir git bash aquÃ­:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4_R4jc5P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3uprzdy1x0x5s0yhuij.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4_R4jc5P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3uprzdy1x0x5s0yhuij.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ahora corre este comando:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/TeoDev1611/NeoVim-Config.git .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esto clonarÃ¡ mi configuraciÃ³n si quieres ver la configuraciÃ³n completa y su github aquÃ­ el link &lt;a href="https://github.com/TeoDev1611/NeoVim-Config"&gt;Mi configuraciÃ³n&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#agradecimientos"&gt;
  &lt;/a&gt;
  Agradecimientos
&lt;/h1&gt;

&lt;p&gt;Gracias por ver este artÃ­culo hasta el final cualquier cosa que quieras agregar los comentarios &lt;/p&gt;

</description>
      <category>spanish</category>
      <category>vim</category>
      <category>neovim</category>
    </item>
    <item>
      <title>What courses do you recommend for blockchain development?</title>
      <author>Shaquil Maria</author>
      <pubDate>Wed, 14 Apr 2021 13:58:20 +0000</pubDate>
      <link>https://dev.to/theowlsden/what-courses-do-you-recommend-for-blockchain-development-4mcf</link>
      <guid>https://dev.to/theowlsden/what-courses-do-you-recommend-for-blockchain-development-4mcf</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@hiteshchoudhary?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Hitesh Choudhary&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/blockchain?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lately, the new trend is blockchain technologies. Everybody is developing some sort of smart contracts and decentralized applications nowadays. As technology advances and the hype increases, more and more companies start to consider blockchain for their projects. This means an increase in the demand for dApps developers and resources to learn about the technology. &lt;/p&gt;

&lt;p&gt;What courses did you follow, if any? Where do you keep up to date with the developments of the blockchain space?&lt;/p&gt;

&lt;p&gt;Let's create a list of interesting courses and resources for blockchain development.&lt;/p&gt;

</description>
      <category>help</category>
      <category>discuss</category>
      <category>blockchain</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Talk Notes: "Designing APIs: Less Data is More" (RailsFonc 2021)</title>
      <author>Sylwia Vargas</author>
      <pubDate>Wed, 14 Apr 2021 13:57:23 +0000</pubDate>
      <link>https://dev.to/sylwiavargas/talk-notes-designing-apis-less-data-is-more-railsfonc-2021-5c5j</link>
      <guid>https://dev.to/sylwiavargas/talk-notes-designing-apis-less-data-is-more-railsfonc-2021-5c5j</guid>
      <description>&lt;p&gt;âœ¨ &lt;strong&gt;What is this post about&lt;/strong&gt;: As a part of my professional growth, I make time to watch conference talks on Ruby, Rails, JS, React, tech writing, and tech trivia. Previously, I'd just watch them but now I will take and publish notes for future reference. This talk was a part of RailsConf 2021 that I'm participating in at the time of writing. &lt;/p&gt;

&lt;p&gt;âœ¨ &lt;strong&gt;Talk&lt;/strong&gt;: 'Designing APIs: Less Data is More' by &lt;a href="https://twitter.com/DamirSvrtan"&gt;Damir Svrtan&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;âœ¨ &lt;strong&gt;One-paragraph summary&lt;/strong&gt;: Often developers design APIs that expose more than is needed - unnecessary fields, redundant relationships, and endpoints that no one asked for. These kinds of practices, later on, introduce communication overhead, extra maintenance costs, negative performance impacts, and waste time that could have been spent better otherwise. &lt;/p&gt;

&lt;p&gt;âœ¨ &lt;strong&gt;Impression&lt;/strong&gt;:  I really loved this talk! ðŸ’• So clear, well-organized, and concise. I loved Damir's calm way of presentation! &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#notes"&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#read-more"&gt;Read more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Main pain points when building/maintaining an API:

&lt;ul&gt;
&lt;li&gt;overly flexible APIs with queries no one asked for&lt;/li&gt;
&lt;li&gt;unused endpoints&lt;/li&gt;
&lt;li&gt;redundant functionality: extra fields, extra relationships, extra input fields&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;1st principle: Bloated API surface&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;redundant fields&lt;/strong&gt;: don't expose redundant attributes&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;redundant relationships&lt;/strong&gt;: don't expose redundant relationships because that increases the dev costs (testing, negative performance impacts, batch/eager loading because of data size)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;redundant input fields&lt;/strong&gt;: if the user can't interact with a field (for instance, update it), don't serve it to them&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;deprecation cycle is costly&lt;/strong&gt;: involves a lot of communication and coordination, breaking clients, &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;delaying decisions is better&lt;/strong&gt; as long as it doesn't impact our roadmaps -- adding later when we have more knowledge is better

&lt;ul&gt;
&lt;li&gt;it's easier to add a feature than to remove it in the future&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;"You're supposed to build your API according to your business needs -- the logic should be on the server, not on the client"&lt;/li&gt;
&lt;li&gt;Ambiguity deteriorates DevEx - they'll wonder what happens if they play around with a field&lt;/li&gt;
&lt;li&gt;if &lt;strong&gt;YAGNI&lt;/strong&gt; (&lt;em&gt;you ain't gonna need it&lt;/em&gt;), don't include it&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;2nd principle: Strict to Loose&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Avoid extra flexibility&lt;/strong&gt;: APIs need to be ready to be flexible in the future but don't need to be flexible right now; build only what your client needs (because it's unneeded code and more code = more maintenance + more tests); it's easier to go from required to optional (clients will still be able to communicate just fine), not the other way round;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Breaks First!&lt;/strong&gt; (or how to apply defensive programming in your APIs): add pagination with limits from the beginning because it's super hard to add retroactively but super easy to adjust in the future (if you want to increase the number)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;How to avoid these problems:

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Adopt schema first&lt;/strong&gt;: what's the product, for whom you're building it? Don't play guessing games&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Talk to your clients&lt;/strong&gt;: don't be speculative, be iterative;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Exceptions: trying to get ahead of a competitor, constraints due to the release cycles, &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;tl;dr&lt;/strong&gt;: redundant work slows down progress on important features + "the road to hell is paved with good intentions"&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#read-more"&gt;
  &lt;/a&gt;
  Read more
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://xuorig.medium.com/graphql-mutation-design-anemic-mutations-dd107ba70496"&gt;GraphQL Mutation Design: Anemic Mutations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>techtalks</category>
      <category>rails</category>
    </item>
    <item>
      <title>Dynamic import - recipe for a lightning fast application</title>
      <author>Zoltan Takacs</author>
      <pubDate>Wed, 14 Apr 2021 13:40:16 +0000</pubDate>
      <link>https://dev.to/taki9/dynamic-import-recipe-for-a-lightning-fast-application-2fa0</link>
      <guid>https://dev.to/taki9/dynamic-import-recipe-for-a-lightning-fast-application-2fa0</guid>
      <description>&lt;p&gt;In this article we will delve into the dynamic import of JavaScript modules and the lazy loading of React components. We will examine through a real example how they work and how we can make our web application faster by reducing our initial bundle size. It is common to use TypeScript for its static type system. We often need types from our dependencies, but if we don't pay attention it can ruin our hardly achieved code splitting. I will show you a fairly new syntax to avoid it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dynamic-import"&gt;
  &lt;/a&gt;
  Dynamic import
&lt;/h2&gt;

&lt;p&gt;Dynamic import has reached the stage 4 of the TC39 process and is included in the ECMAScript 2020 language specification. Webpack, currently the most popular JavaScript module bundler, already supports it since the v2 which was released in 2017. It makes it possible to load parts of your application at runtime. Maybe you use a heavy dependency only on specific cases or you want to load only the desired localization files on a multi-language page based on the user's preferences. This way you can make your site more performant and lightweight at the same time.&lt;/p&gt;

&lt;p&gt;The syntax of the dynamic import is quite simple, it just extends the import keyword by making it possible to use it followed by parentheses with the path of your dependency in between.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;module/example&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This sytax looks like a function call, but it is not. Import is not defined as a function, it is a specific operator.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The code above loads the module at runtime and logs its default export to the console. This is just a basic example, you can use anything exported by the module in the callback function or load multiple modules at once with Promise.all.&lt;/p&gt;

&lt;p&gt;All popular modern bundlers support it and they automatically split dynamically imported modules to a separate bundle. All of the import statements of that module or dependency should be dynamic across your project to work as expected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reactlazy"&gt;
  &lt;/a&gt;
  React.lazy
&lt;/h2&gt;

&lt;p&gt;It is also possible to import React components dynamically since React 16.6.  &lt;code&gt;React.lazy&lt;/code&gt; is a function which will handle your dynamic import and make a renderable React component from it. It has one parameter, which is a function returning the import:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lazy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./MyComponent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Module bundlers will handle dynamic imports as &lt;code&gt;React.lazy&lt;/code&gt; parameter the same as described above.&lt;/p&gt;

&lt;p&gt;It is important to know that the component must be the default export of the imported module. If it is not given (e.g. a third party library exports it by name), you can create a module to handle it in your application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-library&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can wrap the lazy loaded component by React Suspense with a fallback component. It will render the fallback while the dynamic component is loading.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Loader&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyComponent&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#importing-types"&gt;
  &lt;/a&gt;
  Importing types
&lt;/h2&gt;

&lt;p&gt;Previously TypeScript tried to omit type-only imports from compiled JavaScript code, but it cannot accurately recognized and removed accurately. In some edge cases the import was compiled to your code even if it is only used as a type. They added a new syntax to the language at version 3.8 to prevent this problem:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SomeType&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;external-dependency&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way you can use external types confidently without pulling in a new dependency to your main bundle. You can read more about this in the &lt;a href="https://devblogs.microsoft.com/typescript/announcing-typescript-3-8-beta/#type-only-imports-exports"&gt;TypeScript release note&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#real-life-example"&gt;
  &lt;/a&gt;
  Real life example
&lt;/h2&gt;

&lt;p&gt;At Sense/Net we are developing a headless CMS called sensenet. One part of our product is the admin-ui that makes content management easy for the customers. It is a complex React application with a lot of internal and external dependencies. Over time our bundle became huge, so we started to optimize it with multiple techniques. One of these is the better usage of lazy loading pages and dependencies.&lt;/p&gt;

&lt;p&gt;The biggest improvement was achieved by lazy loading Monaco Editor. It is a code editor which powers Visual Studio Code. It is around 2 MB of parsed JavaScript code and only used on 3 or 4 pages by our application. You definitely don't want to load it for pages where it is not used.&lt;/p&gt;

&lt;p&gt;We applied all the above methods to separate its code to a chunk and load it only on-demand. We use it in multiple isolated parts of our application so we had to make these changes for each import of the editor.&lt;/p&gt;

&lt;p&gt;An interesting part was the usage of imported functions. We created a new React state which stores the return value of the function. We load and call the function inside a useEffect and show a loader until the state gets a value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Loader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUri&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;monaco&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-monaco-editor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;setUri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;monaco&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`sensenet:File`&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;})()&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Loader&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;In conclusion, JavaScript and its ecosystem give us a lot of opportunity to improve the performance of our applications. One of the most important aspect of user experience is speed, so it is definitely worth the effort. Hopefully in the future it will be even more easier to achieve such optimization.&lt;/p&gt;

&lt;p&gt;If you need help or have any feedback, feel free to comment here.&lt;/p&gt;

&lt;p&gt;Thanks for reading my article! If you enjoyed it give a star to &lt;a href="https://github.com/SenseNet/sn-client"&gt;sensenet&lt;/a&gt; on GitHub. I hope that you'll &lt;a href="https://www.sensenet.com/tryit"&gt;give a try to our headless CMS for free&lt;/a&gt;, we are eager to hear your feedback.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>react</category>
      <category>performance</category>
    </item>
    <item>
      <title>JavaScript: Why Does `this` Work Like This?</title>
      <author>Nico Zerpa (he/him)</author>
      <pubDate>Wed, 14 Apr 2021 13:39:43 +0000</pubDate>
      <link>https://dev.to/nicozerpa/javascript-why-does-this-work-like-this-478i</link>
      <guid>https://dev.to/nicozerpa/javascript-why-does-this-work-like-this-478i</guid>
      <description>&lt;p&gt;"I hate this about JavaScript", "It creates so much confusion and so many bugs for zero gain.", "It's broken, Don't use it!" That's what many JavaScript devs think about the &lt;code&gt;this&lt;/code&gt; keyword. &lt;strong&gt;For many of them, &lt;code&gt;this&lt;/code&gt; has definitely given them the most trouble with more complex apps.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are many articles out there about what the keyword means in different contexts, but now, I'd prefer to explain how &lt;code&gt;this&lt;/code&gt; works, so that you can have a better understanding of it.&lt;/p&gt;

&lt;p&gt;First of all, &lt;strong&gt;let's remember that the JavaScript object system is based on prototypes.&lt;/strong&gt; What is a prototype? It's actually just an object that can be "inherited" by other objects. As prototypes are simple objects, they can have prototypes themselves.&lt;/p&gt;

&lt;p&gt;When you try to access a property or method of a given object, first it searches the property on the object itself. If it can't find it, then it searches on the object's prototype. If it still can't find it, it searches on the prototype's prototype. And then, it keeps searching until the property is found. If it can't find the property anywhere, it's &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's see an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;DogThatQuacks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;DogThatQuacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bark&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; says "Quack!"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bartholomew&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;DogThatQuacks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bartholomew&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Outputs 'Bartholomew says "Quack!"'&lt;/span&gt;
&lt;span class="nx"&gt;bartholomew&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bark&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the last line, the JavaScript engine first searches if the object &lt;code&gt;bartholomew&lt;/code&gt; has a &lt;code&gt;bark&lt;/code&gt; method. Since it hasn't (its only own property is &lt;code&gt;name&lt;/code&gt;), then it looks into the prototype. It finds the method there, and finally executes &lt;code&gt;DogThatQuacks.prototype.bark&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The thing is, the method &lt;code&gt;bark&lt;/code&gt; exists in the object &lt;code&gt;DogThatQuacks.prototype&lt;/code&gt;, not in &lt;code&gt;bartholomew&lt;/code&gt;. How can the method access &lt;code&gt;bartholomew.name&lt;/code&gt;? That's because &lt;strong&gt;the value of &lt;code&gt;this&lt;/code&gt; depends on how you call the function.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You're eventually calling the method &lt;code&gt;DogThatQuacks.prototype.bark&lt;/code&gt;, but you are calling it as a method of the object &lt;code&gt;bartholomew&lt;/code&gt;. For that reason, &lt;code&gt;this&lt;/code&gt; is a reference to &lt;code&gt;bartholomew&lt;/code&gt; in this case. Now, let's play a little more with it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Outputs 'undefined says "Quack!"'&lt;/span&gt;
&lt;span class="nx"&gt;DogThatQuacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bark&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// Outputs 'undefined says "Quack!"', but&lt;/span&gt;
&lt;span class="c1"&gt;// it throws an error in strict mode&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bark&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bartholomew&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bark&lt;/span&gt;
&lt;span class="nx"&gt;bark&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the first example, we're calling &lt;code&gt;DogThatQuacks.prototype.bark&lt;/code&gt; directly! As you can guess, &lt;code&gt;this&lt;/code&gt; is a reference to the prototype itself, which doesn't have the &lt;code&gt;name&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;And in the second case, it will throw an error if you're using strict mode, and "undefined says Quack!" if not in strict mode. Why? because you're not calling &lt;code&gt;bark&lt;/code&gt; as a method of an object, you're calling it as a simple function.&lt;/p&gt;

&lt;p&gt;When you're calling functions in strict mode, &lt;code&gt;this&lt;/code&gt; is not defined. And if the strict mode is not active, it references the global object. &lt;strong&gt;Again, the value of &lt;code&gt;this&lt;/code&gt; depends on how you call the function.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;More examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeDogBark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;barkMethod&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;barkMethod&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Outputs 'undefined says "Quack!"', but&lt;/span&gt;
&lt;span class="c1"&gt;// it throws an error in strict mode&lt;/span&gt;
&lt;span class="nx"&gt;makeDogBark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bartholomew&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nx"&gt;DogThatQuacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actuallyBark&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;internalFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; now says "Woof!"`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;internalFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Outputs 'undefined now says "Woof!"', but&lt;/span&gt;
&lt;span class="c1"&gt;// it throws an error in strict mode&lt;/span&gt;
&lt;span class="nx"&gt;bartholomew&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actuallyBark&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the first example, you're passing &lt;code&gt;bartholomew.bark&lt;/code&gt; as an argument to the function &lt;code&gt;makeDogBark&lt;/code&gt;. However, the function calls the argument &lt;code&gt;barkMethod&lt;/code&gt;, that is, a simple function. &lt;/p&gt;

&lt;p&gt;In the second case, you're again calling the simple function &lt;code&gt;internalFunction&lt;/code&gt;, so this is undefined or the global object, depending on whether strict mode is enabled or not.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Also, you should consider that all of it also applies to classes.&lt;/strong&gt; That's why classes in JavaScript are just syntactic sugar for prototypes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CatThatSaysMoo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;meow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; says "Moo!"`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;florence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CatThatSaysMoo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Florence&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Outputs 'Florence says "Moo!"'&lt;/span&gt;
&lt;span class="nx"&gt;florence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// Outputs 'undefined says "Moo!"'&lt;/span&gt;
&lt;span class="nx"&gt;CatThatSaysMoo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;meowFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;florence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meow&lt;/span&gt;

&lt;span class="c1"&gt;// Throws an error, `this` is undefined&lt;/span&gt;
&lt;span class="nx"&gt;meowFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have to pass a method as an argument to a function, or if you need to store the method in a variable, you can use arrow functions (which "inherits" the &lt;code&gt;this&lt;/code&gt; from the parent scope) or the &lt;code&gt;bind&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;DogThatQuacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actuallyBark&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;internalFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// It inherits the `this` from&lt;/span&gt;
        &lt;span class="c1"&gt;// `DogThatQuacks.prototype.actuallyBark`&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; now says "Woof!"`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;internalFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Outputs 'Bartholomew now says "Woof!"'&lt;/span&gt;
&lt;span class="nx"&gt;bartholomew&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actuallyBark&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="c1"&gt;// If fixes `this` as a reference&lt;/span&gt;
&lt;span class="c1"&gt;// to the object `florence`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;meowFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;florence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;florence&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Outputs 'Florence says "Moo!"'&lt;/span&gt;
&lt;span class="nx"&gt;meowFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;p.s. Did you like what you've read? Every week I send an email with free tips and insights to become a better JavaScript dev. If you're interested, &lt;a href="https://nicozerpa.com/newsletter/"&gt;click here to subscribe&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>oop</category>
    </item>
    <item>
      <title>Testing Application Monitoring Locally with a Docker Composition</title>
      <author>Julien Acroute</author>
      <pubDate>Wed, 14 Apr 2021 13:37:35 +0000</pubDate>
      <link>https://dev.to/camptocamp-ops/testing-application-monitoring-locally-with-a-docker-composition-47hn</link>
      <guid>https://dev.to/camptocamp-ops/testing-application-monitoring-locally-with-a-docker-composition-47hn</guid>
      <description>&lt;p&gt;In the &lt;a href="https://dev.to/camptocamp-ops/implement-prometheus-metrics-in-a-flask-application-p18"&gt;previous post&lt;/a&gt;, we saw how to implement metrics in a simple Python Flask application. In this post we will see how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;start a local monitoring stack with a Docker composition&lt;/li&gt;
&lt;li&gt;configure Prometheus to scrape metrics from our application&lt;/li&gt;
&lt;li&gt;build a Grafana dashboard&lt;/li&gt;
&lt;li&gt;commit the Dashboard definition so other developers can also use it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NkfYJMNm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8agspyl7u60gvuptmaj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NkfYJMNm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8agspyl7u60gvuptmaj.png" alt="final-grafana-dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before launching an application in a Kubernetes cluster, we need to make sure that it generates the right metrics. This will be done using a Prometheus stack running in a Docker composition.&lt;/p&gt;

&lt;p&gt;This test Prometheus stack will be made of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://prometheus.io/"&gt;Prometheus&lt;/a&gt;: Core component that will:

&lt;ul&gt;
&lt;li&gt;scrape application metrics &lt;/li&gt;
&lt;li&gt;store metrics in a time series database&lt;/li&gt;
&lt;li&gt;expose metrics for use with Grafana&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://grafana.com/docs/grafana/latest/"&gt;Grafana&lt;/a&gt;: Visualization of Prometheus metrics &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To be able to run this Docker composition, you will need to &lt;a href="https://docs.docker.com/get-docker/"&gt;install Docker&lt;/a&gt; and &lt;a href="https://docs.docker.com/compose/install/"&gt;install docker-compose&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#start-prometheus"&gt;
  &lt;/a&gt;
  Start Prometheus
&lt;/h1&gt;

&lt;p&gt;Let's write a &lt;code&gt;docker-compose.yml&lt;/code&gt; file that will start a Docker container for Prometheus:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3'&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;prometheus&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prom/prometheus:v2.26.0&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;9090:9090"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Be sure to use only spaces for indentation in the YAML file, not tabs.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Start the Docker composition with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up &lt;span class="nt"&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This composition starts Prometheus with the default configuration and allows access to the web interface on &lt;a href="http://localhost:9090/"&gt;http://localhost:9090/&lt;/a&gt;.&lt;br&gt;
You will be redirected to the "Graph" page where you can query metrics using the &lt;a href="https://prometheus.io/docs/prometheus/latest/querying/examples/"&gt;PromQL&lt;/a&gt; format.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ybLFrUSP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8johj968a72mq5voiazq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ybLFrUSP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8johj968a72mq5voiazq.png" alt="prometheus-home"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;a href="http://localhost:9090/targets"&gt;Status â†’ Targets&lt;/a&gt; menu, you can find all exporters from which Prometheus retrieves metrics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1obsGns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tujuneaq13su1j2miiim.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1obsGns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tujuneaq13su1j2miiim.png" alt="prometheus-targets-menu"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the default setup, there is only one defined target, which points to the &lt;a href="http://localhost:9090/metrics"&gt;metrics endpoint of Prometheus itself&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5WSzk3Yh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qb41nrewopvgkt6da8wy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5WSzk3Yh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qb41nrewopvgkt6da8wy.png" alt="prometheus-default-target"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now it's time to configure Prometheus to retrieve metrics from our application!&lt;/p&gt;

&lt;p&gt;Prometheus is running in a container but needs to access the application that runs on the host. We will start the application with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;flask run &lt;span class="nt"&gt;--host&lt;/span&gt; 0.0.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the new &lt;code&gt;--host&lt;/code&gt; option, our application is running on all network interfaces, including the interface used by containers. From a container, you can connect to the host with the special IP address &lt;code&gt;172.17.0.1&lt;/code&gt; (the bridge address for the &lt;code&gt;172.17.0.0&lt;/code&gt; network, linked to the host). So let's create a &lt;code&gt;prometheus.yaml&lt;/code&gt; file that contains the Prometheus configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;scrape_configs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;job_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;view_buy&lt;/span&gt;
    &lt;span class="na"&gt;metrics_path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/metrics&lt;/span&gt;
    &lt;span class="na"&gt;static_configs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;targets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;172.17.0.1:5000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;line 2:&lt;/em&gt; define the name of the Prometheus exporter; here we use the name of the application&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;line 5:&lt;/em&gt; IP address and port of the application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;The &lt;code&gt;prometheus.yaml&lt;/code&gt; file must be in the same folder as &lt;code&gt;docker-compose.yaml&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We edit the &lt;code&gt;docker-compose.yaml&lt;/code&gt; as follow to inject the Prometheus configuration in the container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3'&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;prometheus&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prom/prometheus:v2.26.0&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./prometheus.yml:/etc/prometheus/prometheus.yml&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;9090:9090"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Letâ€™s restart the Docker composition with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up &lt;span class="nt"&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now be able to see a target that points to the application running on the host on the &lt;a href="http://localhost:9090/targets"&gt;target list page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W4teOmQn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35dc5u6pas9vra53388c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W4teOmQn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35dc5u6pas9vra53388c.png" alt="prometheus-app-target"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This target has a static label with the name of the application set in the &lt;code&gt;prometheus.yaml&lt;/code&gt; file: &lt;code&gt;job="view_buy"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can now display all metrics from this target on the &lt;a href="http://localhost:9090/graph?g0.range_input=1h&amp;amp;g0.expr=%7Bjob%3D%22view_buy%22%7D&amp;amp;g0.tab=1"&gt;Graph page&lt;/a&gt;. In order to query the time series for our label, you just need to surround the label and value with curly braces: &lt;code&gt;{job="view_buy"}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ek1zWbNY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/id0c2r4939w3we5xeocg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ek1zWbNY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/id0c2r4939w3we5xeocg.png" alt="prometheus-target-metrics"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's time to generate some traffic!&lt;/p&gt;

&lt;p&gt;Open 3 terminals and run the following commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;watch -n 1 "curl localhost:5000/view/product1"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;watch -n 2 "curl localhost:5000/view/product2"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;watch -n 3 "curl localhost:5000/buy/product1"&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the &lt;a href="http://localhost:9090/graph"&gt;Graph page&lt;/a&gt; of the Prometheus Web UI, you can query the &lt;code&gt;view_total&lt;/code&gt; metric using the following PromQL expression: &lt;a href="http://localhost:9090/graph?g0.range_input=1h&amp;amp;g0.expr=view_total&amp;amp;g0.tab=1"&gt;&lt;code&gt;view_total&lt;/code&gt;&lt;/a&gt;. A visual representation of the metrics is available in the &lt;a href="http://localhost:9090/graph?g0.range_input=1h&amp;amp;g0.expr=view_total&amp;amp;g0.tab=0"&gt;Graph tab&lt;/a&gt;, just under the "Execute" button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cclPNNWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fiwm85f6bo362r9km96o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cclPNNWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fiwm85f6bo362r9km96o.png" alt="prometheus-graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#start-grafana"&gt;
  &lt;/a&gt;
  Start Grafana
&lt;/h1&gt;

&lt;p&gt;Add a new service to the Docker composition by editing the &lt;code&gt;docker-compose.yml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3'&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;prometheus&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prom/prometheus:v2.26.0&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./prometheus.yml:/etc/prometheus/prometheus.yml&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;9090:9090"&lt;/span&gt;
  &lt;span class="na"&gt;grafana&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;grafana/grafana:7.5.2&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3000:3000"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to create the &lt;code&gt;datasource.yaml&lt;/code&gt; file with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="na"&gt;datasources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Prometheus&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prometheus&lt;/span&gt;
    &lt;span class="na"&gt;access&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;proxy&lt;/span&gt;
    &lt;span class="na"&gt;isDefault&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http://prometheus:9090/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This file configures the connection between Grafana and Prometheus. The hostname of the Prometheus container is &lt;code&gt;prometheus&lt;/code&gt; because this is the name of the service in the Docker composition. Restart the Docker composition with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up &lt;span class="nt"&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now access the &lt;a href="http://localhost:3000/"&gt;Grafana Web UI&lt;/a&gt; using the default login/password &lt;code&gt;admin/admin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zw1P72eb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j18vvu0zedij46um4u58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zw1P72eb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j18vvu0zedij46um4u58.png" alt="grafana-login"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Skip the password change for now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LFRxxKbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfndwrewmza84i3pw89r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LFRxxKbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfndwrewmza84i3pw89r.png" alt="grafana-skip"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5WyvAxtR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oybg0p03azxgp881j6cl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5WyvAxtR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oybg0p03azxgp881j6cl.png" alt="grafana-explore"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;a href="http://localhost:3000/explore"&gt;Explore view&lt;/a&gt;, you can use the following expression to visualize the number of views for each product: &lt;a href="http://localhost:3000/explore?orgId=1&amp;amp;left=%5B%22now-1h%22,%22now%22,%22Prometheus%22,%7B%22exemplar%22:true,%22expr%22:%22view_total%22%7D%5D"&gt;&lt;code&gt;view_total&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YGVdPNL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1x12ucs9sco47bs3qh07.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YGVdPNL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1x12ucs9sco47bs3qh07.png" alt="grafana-promql"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;view_total&lt;/code&gt; metric is a &lt;em&gt;Counter&lt;/em&gt;, a metric that always increases. As suggested by Grafana, it is better to display a &lt;a href="http://localhost:3000/explore?orgId=1&amp;amp;left=%5B%22now-1h%22,%22now%22,%22Prometheus%22,%7B%22exemplar%22:true,%22expr%22:%22rate%28view_total%5B5m%5D%29%22%7D%5D"&gt;temporal derivative of the value&lt;/a&gt;, which can be achieved using the &lt;code&gt;rate()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Now we have more meaningful information about the number of views of products. The unit is &lt;em&gt;view per second&lt;/em&gt;. For example, "product2" has 0.5 view per second, which makes sense as it corresponds to one view each 2 seconds.&lt;/p&gt;

&lt;p&gt;Finally, in the legend, you can find the labels of each &lt;em&gt;time series&lt;/em&gt;, one per product.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0xelEbl9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyleo29qtjkf5er8fw9w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0xelEbl9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyleo29qtjkf5er8fw9w.png" alt="grafana-rate"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's create a dashboard now.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-a-grafana-dashboard"&gt;
  &lt;/a&gt;
  Creating a Grafana Dashboard
&lt;/h1&gt;

&lt;p&gt;In the Grafana web UI, you can &lt;a href="http://localhost:3000/dashboard/new"&gt;create a new dashboard&lt;/a&gt;. Choose "Add an empty panel". Then type the following expression: &lt;code&gt;rate(view_total[5m])&lt;/code&gt; and validate with 'Shift+Enter'.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K2VhDVAh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6k0qso61x2gta3vm14k1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K2VhDVAh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6k0qso61x2gta3vm14k1.png" alt="grafana-add-panel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To improve the legend, you can define the "Legend Format" and extract label values with the expression &lt;code&gt;{{&amp;lt;label name&amp;gt;}}&lt;/code&gt;. For our application, we will use &lt;code&gt;{{product}}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dkoyZlgH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obkxl7aieibcxpaxav1k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dkoyZlgH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obkxl7aieibcxpaxav1k.png" alt="grafana-dashboard1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The legend looks better as we now only have the name of the product. It's also possible to add a prefix and a suffix, using e.g.: &lt;code&gt;Product {{product}} views&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you can click on the "Apply" button to save modifications of the dashboard. You can then add a new panel for purchases. Finally, click on the save ðŸ’¾ button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u_O7pNRT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2vobxqtc8aevfpovjcz7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_O7pNRT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2vobxqtc8aevfpovjcz7.png" alt="grafana-dashboard2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#persisting-metrics-and-dashboards"&gt;
  &lt;/a&gt;
  Persisting Metrics and Dashboards
&lt;/h1&gt;

&lt;p&gt;If you stop or restart the current Docker composition, you will lose all the metrics retrieved by Prometheus and the Dashboard you just built. To persist data, with this local setup, we will use Docker volumes.&lt;/p&gt;

&lt;p&gt;We will first create a Docker volume to persist Prometheus metrics. The time series database is stored in &lt;code&gt;/prometheus/&lt;/code&gt; inside the container so we will mount the volume on this path:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3'&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;prometheus&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prom/prometheus:v2.26.0&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./prometheus.yml:/etc/prometheus/prometheus.yml&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;prometheus:/prometheus&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;9090:9090"&lt;/span&gt;
  &lt;span class="na"&gt;grafana&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;grafana/grafana:7.5.2&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3000:3000"&lt;/span&gt;
&lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;prometheus&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;line 7:&lt;/em&gt; we add a volume to persist the content of &lt;code&gt;/prometheus&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;last 2 lines:&lt;/em&gt; a top level &lt;code&gt;volumes&lt;/code&gt; key is used to define volumes used in the Docker composition&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, you can apply changes with &lt;code&gt;docker-compose.yml&lt;/code&gt;. Metrics are now persisted across restarts of the Docker composition. Note that mounting the volume resets all metrics previously retrieved.&lt;/p&gt;

&lt;p&gt;In order to persist the Grafana dashboard, we will create a file that contains the definition of the dashboard:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Switch back to the &lt;a href="http://localhost:3000/"&gt;Grafana web ui&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;Open your dashboard&lt;/li&gt;
&lt;li&gt;Go to settings âš™ and then "JSON Model"&lt;/li&gt;
&lt;li&gt;Copy the JSON definition of the dashboard&lt;/li&gt;
&lt;li&gt;Paste the copied content into a new &lt;code&gt;dashboard.json&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TAyYnRld--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/az5agpva942zzfjaxfmz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TAyYnRld--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/az5agpva942zzfjaxfmz.png" alt="grafana-dashboard-settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dLQ9HHA4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5db0mmwgoxdx884it601.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dLQ9HHA4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5db0mmwgoxdx884it601.png" alt="grafana-json-model"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GTOdjXCu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8g9810lcu281vm77d2m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GTOdjXCu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8g9810lcu281vm77d2m.png" alt="grafana-json-model-copy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last step is to mount this dashboard in the Grafana container.&lt;/p&gt;

&lt;p&gt;Create a &lt;code&gt;dashboards.yaml&lt;/code&gt; file with the following contents:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;provisionned&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;dashboards'&lt;/span&gt;
    &lt;span class="na"&gt;orgId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="na"&gt;folder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;
    &lt;span class="na"&gt;folderUid&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;file&lt;/span&gt;
    &lt;span class="na"&gt;disableDeletion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
    &lt;span class="na"&gt;editable&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;updateIntervalSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
    &lt;span class="na"&gt;allowUiUpdates&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
    &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/var/lib/grafana/dashboards&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This file tells Grafana to load every dashboard defined in the &lt;code&gt;/var/lib/grafana/dashboards&lt;/code&gt;. Finally, modify the Docker composition to include &lt;code&gt;dashboards.yaml&lt;/code&gt; and &lt;code&gt;dashboard.json&lt;/code&gt; in the Grafana container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3'&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;prometheus&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prom/prometheus:v2.26.0&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./prometheus.yml:/etc/prometheus/prometheus.yml&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;prometheus:/prometheus&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;9090:9090"&lt;/span&gt;
  &lt;span class="na"&gt;grafana&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;grafana/grafana:7.5.2&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;grafana:/var/lib/grafana&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./dashboard.json:/var/lib/grafana/dashboards/dashboard.json&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3000:3000"&lt;/span&gt;

&lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;prometheus&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;grafana&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update the Docker composition with &lt;code&gt;docker-compose up -d&lt;/code&gt;. Your dashboard should be automatically loaded into Grafana.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ulrOapPf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ztf19ogdtoq0t7qg3nub.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ulrOapPf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ztf19ogdtoq0t7qg3nub.png" alt="grafana-provisionned"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dashboard-modification-workflow"&gt;
  &lt;/a&gt;
  Dashboard Modification Workflow
&lt;/h1&gt;

&lt;p&gt;If you modify the dashboard, remember to copy the new JSON Model to the &lt;code&gt;dashboard.json&lt;/code&gt; file and restart Grafana with &lt;code&gt;docker-compose restart grafana&lt;/code&gt;. Now, your modifications are persisted as code in the &lt;code&gt;dashboard.json&lt;/code&gt; and you can commit the dashboard definition within your project repository.&lt;/p&gt;

&lt;p&gt;If someone wants to try your project, they just need to run the application and the monitoring stack with &lt;code&gt;docker-compose up -d&lt;/code&gt;. They can then access your dashboard, see the evolution of metrics and create or modify graphs.&lt;/p&gt;

&lt;p&gt;In this post, we were able to start a monitoring stack to retrieve metrics from our test application and build a dashboard to visualize the evolution of product views and purchases. We created several files that can be committed in Git and used later by other developers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;You are now ready to launch a monitoring stack aside your application, whichever language youâ€™re using. You can also integrate the application as a new service in the Docker composition to ease test and demo.&lt;br&gt;
This Docker composition should help you get your application monitoring code ready for production, so you can now deploy it on a Kubernetes cluster, and avoid the usual pitfalls of a new Kubernetes deployment.&lt;/p&gt;

&lt;p&gt;In the next post, we will deploy the application and its monitoring in a Kubernetes cluster and see how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;integrate the application monitoring with the Prometheus Operator&lt;/li&gt;
&lt;li&gt;create alerts based on application metrics&lt;/li&gt;
&lt;li&gt;package everything in a Helm Chart&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>prometheus</category>
      <category>tutorial</category>
      <category>docker</category>
      <category>monitoring</category>
    </item>
    <item>
      <title>go-portfinder: Go implementation of npm portfinder</title>
      <author>Prasanna Kumar</author>
      <pubDate>Wed, 14 Apr 2021 13:15:53 +0000</pubDate>
      <link>https://dev.to/pgollangi/go-portfinder-go-implementation-of-npm-portfinder-52jm</link>
      <guid>https://dev.to/pgollangi/go-portfinder-go-implementation-of-npm-portfinder-52jm</guid>
      <description>&lt;p&gt;Go implementation of npm &lt;a href="https://www.npmjs.com/package/portfinder"&gt;portfinder&lt;/a&gt;. A simple tool to find an open port on the current machine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;go get github.com/pgollang/go-portfinder
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/pgollang/go-portfinder"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
     &lt;span class="c"&gt;// scans and returns first open port on all network interfaces of current machine.&lt;/span&gt;
     &lt;span class="n"&gt;openPort&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;portfinder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetPort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;PortFinderOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;StartPort&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;9090&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="n"&gt;StopPort&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;9099&lt;/span&gt;
     &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Repo: &lt;a href="https://github.com/pgollangi/go-portfinder"&gt;https://github.com/pgollangi/go-portfinder&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>productivity</category>
      <category>go</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
