<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Use console.log() like a pro</title>
      <author>Marko Denic</author>
      <pubDate>Mon, 23 Nov 2020 06:13:05 +0000</pubDate>
      <link>https://dev.to/denicmarko/use-console-log-like-a-pro-3h6o</link>
      <guid>https://dev.to/denicmarko/use-console-log-like-a-pro-3h6o</guid>
      <description>&lt;p&gt;Using &lt;code&gt;console.log()&lt;/code&gt; for JavaScript debugging is the most common practice among developers. But, there is more...&lt;/p&gt;

&lt;p&gt;The console object provides access to the browser’s debugging console. The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-most-common-console-methods" class="anchor"&gt;
  &lt;/a&gt;
  The most common Console methods:
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;console.log()&lt;/code&gt; – For general output of logging information.&lt;br&gt;
&lt;code&gt;console.info()&lt;/code&gt; – Informative logging of information.&lt;br&gt;
&lt;code&gt;console.debug()&lt;/code&gt; – Outputs a message to the console with the log level debug.&lt;br&gt;
&lt;code&gt;console.warn()&lt;/code&gt; – Outputs a warning message.&lt;br&gt;
&lt;code&gt;console.error()&lt;/code&gt; – Outputs an error message.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GF6xhSeL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bigab0doaj4g83coh4qj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GF6xhSeL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bigab0doaj4g83coh4qj.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-css-styles-for-a-consolelog" class="anchor"&gt;
  &lt;/a&gt;
  Custom CSS styles for a console.log()
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;console.log&lt;/code&gt; output can be styled in DevTools using the CSS format specifier.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kuY7Uh4W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6uwc3fntea5bc8ofbbqw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kuY7Uh4W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6uwc3fntea5bc8ofbbqw.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#string-substitutions" class="anchor"&gt;
  &lt;/a&gt;
  String substitutions
&lt;/h2&gt;

&lt;p&gt;When passing a string to one of the console object’s methods that accept a string (such as log()), you may use these substitution strings:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;%s&lt;/code&gt; – &lt;code&gt;string&lt;/code&gt;&lt;br&gt;
&lt;code&gt;%i&lt;/code&gt; or &lt;code&gt;%d&lt;/code&gt; – &lt;code&gt;integer&lt;/code&gt;&lt;br&gt;
&lt;code&gt;%o&lt;/code&gt; or &lt;code&gt;%0&lt;/code&gt; – &lt;code&gt;object&lt;/code&gt;&lt;br&gt;
&lt;code&gt;%f&lt;/code&gt; – &lt;code&gt;float&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H3r7BZaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g4iw28vguze8bhbm4u4d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H3r7BZaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g4iw28vguze8bhbm4u4d.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consoleassert-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.assert()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Log a message and stack trace to console if the first argument is false.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h379C17f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zgjl6o5avcec2udjrxmt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h379C17f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zgjl6o5avcec2udjrxmt.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consoleclear-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.clear()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Clear the console.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SOOHt-Zt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gt16umfrcdq54g0lcyfx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SOOHt-Zt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gt16umfrcdq54g0lcyfx.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consolecount-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.count()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Log the number of times this line has been called with the given label.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--imeCt7I6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b050f6ae9zv2g6xxszbr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--imeCt7I6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b050f6ae9zv2g6xxszbr.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consoledir-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.dir()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Displays an interactive list of the properties of the specified JavaScript object.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M37fHhXM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gziekeanyicibnqzss5s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M37fHhXM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gziekeanyicibnqzss5s.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consolegroup-endraw-and-raw-consolegroupend-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.group()&lt;/code&gt; and &lt;code&gt;console.groupEnd()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Creates a new inline group, indenting all following output by another level. To move back out a level, call &lt;code&gt;groupEnd()&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bFEZ1aNs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/whkb5d3amdsx5guj59fv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bFEZ1aNs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/whkb5d3amdsx5guj59fv.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-elements-in-the-console" class="anchor"&gt;
  &lt;/a&gt;
  HTML elements in the console
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zgmwhsh5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7recngvjuawmnpsddpmr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zgmwhsh5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7recngvjuawmnpsddpmr.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consolememory-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.memory&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The memory property can be used to check out the heap size status&lt;/p&gt;

&lt;p&gt;Note: memory is a property and not a method.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v3pNN7xL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6zuzeuokgwzhryw6napk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v3pNN7xL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6zuzeuokgwzhryw6napk.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consoletable-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.table()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Displays tabular data as a table.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ASbw_jCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ubm6wel1oxogwkhtdd4n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ASbw_jCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ubm6wel1oxogwkhtdd4n.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consoletime-endraw-and-raw-consoletimeend-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.time()&lt;/code&gt; and &lt;code&gt;console.timeEnd()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;console.time()&lt;/code&gt; – Starts a timer with a name specified as an input parameter. Up to 10,000 simultaneous timers can run on a given page.&lt;br&gt;
&lt;code&gt;console.timeEnd()&lt;/code&gt; – Stops the specified timer and logs the elapsed time in seconds since it started.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B0schP9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ahjfy3qjyh27dyss0lye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B0schP9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ahjfy3qjyh27dyss0lye.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consoletrace-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.trace()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Outputs a stack trace.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wi1DvePC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tg975vima3lraytrjmul.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wi1DvePC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tg975vima3lraytrjmul.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;If you like this article, chances are you'd like what I tweet as well. Consider following me on &lt;a href="https://twitter.com/denicmarko"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to decide on programming language for a project</title>
      <author>Shantun Parmar</author>
      <pubDate>Mon, 23 Nov 2020 05:08:15 +0000</pubDate>
      <link>https://dev.to/parmarshantun/how-to-decide-on-programming-language-for-a-project-2fp2</link>
      <guid>https://dev.to/parmarshantun/how-to-decide-on-programming-language-for-a-project-2fp2</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xLz3pIVw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.andersenlab.com/wp-content/uploads/2019/05/How-to-Decide-on-Programming-Language-for-a-Project-1024x528.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xLz3pIVw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.andersenlab.com/wp-content/uploads/2019/05/How-to-Decide-on-Programming-Language-for-a-Project-1024x528.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Before starting work on any project, whether it be a small “domestic” application or a high-profile Enterprise solution, the people who initiate the development start have the question: “In what language will we write?”. It may seem rather easy to answer, but not everyone knows that the first question should be “What will we write?”.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This question is not idle, as the answer to it should be much more specifics than it might seem at first glance. It is often the case that the decision about how to start development, at the level of a medium-sized company, is taken by people who are far from this exact development. Of course, most often there is a technical director who takes on the whole burden of determining a particular development course, but what if there is no such person? An outside auditor in the person of an experienced developer will not read the tea leaves to understand what you want to receive in the end. You will receive either a denial of assistance or incomplete answer, and it won’t be wrong of them: as the question, so the answer.&lt;/p&gt;

&lt;p&gt;In this article, we will discuss the focal points of choosing development technologies and the mistakes that leaders and managers make, as well as why a changeable fashion should not be followed.&lt;/p&gt;

&lt;p&gt;Let’s suppose you already have a clear picture of a project and its technical specification. Now, in order not to slip up while choosing the development technologies, you should have at least a basic idea of the difference between programming languages. There are a lot of answers to this question, but now we are talking about fundamental differences and areas of application. Only if you understand these differences, you can ask a crucial question: “What are the pros and cons of the X programming language?” and get a clear answer to it that can be applied to the requirements of your project.&lt;/p&gt;

&lt;p&gt;We will not use professional terms and divide languages into high-level, low-level, object-oriented, and so on. In our case, we need a short list of five items, each of which is simply and transparently related to any technical specification:&lt;/p&gt;

&lt;p&gt;1. Platform (application area of a language)&lt;br&gt;
2. Language flexibility&lt;br&gt;
3. Development time and “life” of the project.&lt;br&gt;
4. Performance&lt;br&gt;
5. Language community&lt;/p&gt;

&lt;p&gt;Answers to these five questions can be given by any qualified specialist. In addition, they are simple enough to understand, transparent, and, what is more important, clearly show whether we can use a given language for the development or not.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Different languages – different areas&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The best way to define a programming language and a primary vector for development is to use the experience of the community. At the same time, it is not necessary to be a developer in order to make the right decision – just look at which programming languages are popular in the required field and get through their characteristics in accordance with the list attached above.&lt;/p&gt;

&lt;p&gt;Each of the programming languages has advantages and disadvantages.&lt;/p&gt;

&lt;p&gt;Let’s take Python as an example. This programming language is like a Swiss knife with another small Swiss knife inside – in theory, anything can be written in it if you do not have requirements for memory consumption and speed of the final product, of course. Besides, Python has a very low learning curve, so finding Python developers (and even training your own during the project development) will not be a problem, and a huge number of open libraries significantly simplifies the life of programmers. However, as soon as you need the application to be not only simple but also fast in terms of operation, with severe restrictions on the consumption of system resources, you’d better forget about Python. Same if you need a multithreaded application: the implementation of the Python language does not support multithreading.&lt;/p&gt;

&lt;p&gt;Let’s go back to our list of factors and consider Python through it:&lt;/p&gt;

&lt;p&gt;1. Application area: almost everything and everywhere&lt;br&gt;
2. Flexibility: impressive&lt;br&gt;
3. Development time: fast&lt;br&gt;
4. Performance: available only if you have significant or unlimited computing power.&lt;br&gt;
5. Language community: a vast army of developers of all levels.&lt;/p&gt;

&lt;p&gt;As you see, the main problem of Python that was taken as an example is its gluttony. If we make a web application that will revolve somewhere on Google servers, then we can afford the development in this language. But if it is about a mobile or even desktop application, when the target device can be of low power, forget about Python.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;And most importantly: such nuances can be found in any programming language. Some of them may not be important to you, while others will be fatal. And in order to understand clearly what will affect the project and what will not, you need to know what exactly you will get after the development, and who will use it.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s consider another one language, let it be C++. Its learning curve is higher than this of Python, but it has a number of advantages that Python is deprived of. For instance, C++ allows controlling the resource consumption by our software, which makes it an excellent choice for writing efficient applications that are to work in a limited environment. Thus, C ++ is widely used in the gaming industry, where a team needs to “embed” a logic that is very solid in complexity and size into a limited space of the final user configuration, which is far from the server in terms of power. Here we can also include mobile applications and games which have to be content with low-power processors and a very modest amount of RAM, which, among other things, will need to be shared with other “residents” of the device.&lt;/p&gt;

&lt;p&gt;On the other hand, you need to understand that C ++ is like a sword consisting entirely of a blade, without a handle. An experienced developer will manage it masterfully, but a weak team will create an application that won’t differ much from the project in a more gluttonous Python, but at the same time will be slower to build. Also, C ++ doesn’t have managed development environment that exists in more “architectural” young languages, it means the software development process itself will be long and painful, and the result obtained at the output may not be a joy.&lt;/p&gt;

&lt;p&gt;As an outcome, let’s go through our list of factors, now in the application to C ++:&lt;/p&gt;

&lt;p&gt;1. Application area: apps that require fast speed and work in a limited environment.&lt;br&gt;
2. Flexibility: low&lt;br&gt;
3. Development time: longer than average&lt;br&gt;
4. Performance: this language is about the effective use of every megabyte of memory. It is used to create the most efficient applications in terms of power consumption.&lt;br&gt;
5. Language community: a vast army of developers, but some of them are “pests” since the learning curve of the language is very high.&lt;/p&gt;

&lt;p&gt;The examples mentioned above are a bit exaggerated but very indicative, and most importantly, they dismiss ultimatum statements like “the X language is the best” or “the X language is suitable for anything.” As you see, &lt;em&gt;&lt;strong&gt;there is no universal language&lt;/strong&gt;&lt;/em&gt;. Each of them has a number of noticeable differences that will either make your project wildly successful or bury it under endless cycles of corrections and improvements.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;New-fashioned programming languages and their danger&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In addition to the popular programming languages which are on everyone’s lips, there are also new-fashioned ones in the truest sense of the word. Most often these are some novelties that offer advanced features other languages don’t have, or they have some specific syntax. In fact, this is not so important. What is really important is that choosing a new-fashioned programming language instead of the merely popular one is most likely a direct path to abyss.&lt;/p&gt;

&lt;p&gt;All new-fashioned programming languages have one thing in common: their communities involve very few truly experienced developers and even fewer manuals, documentation, and expertise.&lt;/p&gt;

&lt;p&gt;In fact, this means that the developers have not found or developed the optimal ways to solve various problems using this language yet, and hence, are experimenting. But experiments are acceptable on domestic projects, and when it comes to commercial development, such surprises are not a good idea, because business loves predictability and specifics.&lt;/p&gt;

&lt;p&gt;It also happens that you already have an experienced developer of some new-fashioned language, and according to the list of factors, it suits you perfectly, so why not start the development?&lt;/p&gt;

&lt;p&gt;The problem is that along with development, the application is often needed to be maintained for a sufficiently long time, and this requires human resources. Fortunately or not, exotic/new-fashioned programming languages are rarely spread out enough for their community to grow to really noticeable dimensions. This means that if you need a second, third, or tenth one developer in your team, then you will try to close the vacancy for months, if ever. Most often, the future of projects in new-fashioned languages is either to be supported by people who have mastered this very language right in the workplace or to be rewritten for something more commonly used and understandable. Both options cost extra time, money, and nerve cells of leaders.&lt;/p&gt;

&lt;p&gt;Here is an example. Only 3-4 years ago, hundreds of companies and projects were looking for Ruby developers specifically familiar with the Ruby on Rails framework, instead of PHP or JavaScript developers. “Rails” were so popular and its developers so highly-paid, that the representatives of this community allowed themselves statements like:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;“Ruby on Rails and PHP are like Apple Macintosh and PC. We are few, but we are the elite. Ruby on Rails and PHP is a culture against chaos. ”&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It seemed that RoR was a future, but the fashion implicated in technical necessity was over: several new libraries that covered the need for Ruby on Rails functionality in development were released for steadily developing JavaScript, and the popularity of the Ruby language and its framework began to fade. Yes, Ruby on Rails is still used on many projects, experienced RoR developers are in demand in the market, but the number of vacancies is fewer than several years ago. This happened, first of all, because the programming languages competing with Ruby on Rails also did not stand still, and due to the updates, the creation of new frameworks and libraries, an urgent need for RoR eventually disappeared.&lt;/p&gt;

&lt;p&gt;Once in a few years, some language or framework “shoots”, and a small community is built around it very quickly. For example, Rust or Golang are popular now. And no one knows whether these languages will find a lodgement or will be replaced by more stable and matured “old-timers”. Generally speaking, getting into development relying on a new-fashioned language or technology is very risky, since in the future there may be severe problems with support, which we will discuss in detail below.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Areas of application, terms, and support&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It is crucial to understand which area the project is being developed in because there are no universal programming languages – they all live and develop in their own specialized niches. At the same time, languages and technologies are segmented not only by area (web, mobile, desktop, and so on) of the development but also by a sphere of application. For example, the same web development can be conditionally divided into client front-end and server back-end. And for both these parts of one and the same web project, languages and technologies will be different. It means that in order to create a web project, hiring a team of JavaScript or PHP-developers who will make you the front-end part is not enough: you will also need back-end experts. This evident nuance often eludes people who are far from programming, which leads to an expansion of estimates at best, or to waste of time and budget losses at worst.&lt;/p&gt;

&lt;p&gt;Another aspect that is often ignored is the life cycle of the project. Often the customer builds solely from the development timeframe from the moment of receiving the technical specification to the delivery of a working project. The peculiarity of the dev-sphere is that after the stage of active development, a less intensive but vitally important period of support begins. And this further support is what a large number of companies stumble on.&lt;/p&gt;

&lt;p&gt;The classic scenario is as follows: ignoring the necessity for future support and expert advice, the customer chooses the fastest and cheapest option on the most unsuitable technology. Wrong choice and tight deadlines result in the poor quality of code and work on the principle “we will insert a crutch here because we don’t have time”. In the future, the support of such code, the introduction of new features, and improvements will cost way more. At the same time, the project without at least minimal support is doomed to decline and stagnation in a year or two: the IT sphere is continuously evolving, offering more and more new solutions to old problems that instantly become the standard. It is not necessary to search far for examples – just open any site which was launched a decade ago and hasn’t been supported and updated since that moment, and see what web development solutions were in use during that period. At least they cause an ironical smile, and more often – resentment and dissatisfaction.&lt;/p&gt;

&lt;p&gt;This simple and absolutely transparent way of checking described by us is needed in order to avoid situations when you are persuaded to create something in a language that is “convenient” for the executor or advisor. For example, if somebody persuades you to write a mobile game for Android in Python or convinces you that instead of transparent and understandable JavaScript or PHP, you definitely should introduce a little outdated Ruby on Rails, which is expensive in terms of salaries, or try the currently new-fashioned language.&lt;/p&gt;

&lt;p&gt;The opinion of experts and experienced developers still should be listened, as this is their territory, but a simple list of factors “area, flexibility, time, performance, community” will help either identify an attempt of an unashamed cheat, or prevent a gross error by ignoring the opinion of professionals.&lt;/p&gt;

&lt;p&gt;Be careful.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--urJBRQKE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://secure.gravatar.com/avatar/c09de36bd46989a788c19d25ae0e2940%3Fs%3D80%26d%3Dblank%26r%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--urJBRQKE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://secure.gravatar.com/avatar/c09de36bd46989a788c19d25ae0e2940%3Fs%3D80%26d%3Dblank%26r%3Dg" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Article You may like&lt;/em&gt;&lt;br&gt;
&lt;a href="https://www.coodingdessign.com/more/steps-to-develop-best-administration-of-it-product-project-management/"&gt;Steps to develop best administration of IT Product (Project Management)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#author-shantun-parmar" class="anchor"&gt;
  &lt;/a&gt;
  Author: &lt;span&gt;&lt;a href="http://www.shantunparmar.in"&gt;Shantun Parmar&lt;/a&gt;&lt;/span&gt;
&lt;/h4&gt;

</description>
      <category>javascript</category>
      <category>100daysofcode</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>The Ultimate Guide to JWT client side auth (Stop using local storage!!!)</title>
      <author>Kati Frantz</author>
      <pubDate>Mon, 23 Nov 2020 04:41:46 +0000</pubDate>
      <link>https://dev.to/bahdcoder/the-ultimate-guide-to-jwt-client-side-auth-stop-using-local-storage-3an9</link>
      <guid>https://dev.to/bahdcoder/the-ultimate-guide-to-jwt-client-side-auth-stop-using-local-storage-3an9</guid>
      <description>&lt;p&gt;Hello, my name is Kati Frantz, and thank you so much for checking out this tutorial. I want to talk about how to handle JWTs effectively and securely on the client-side. &lt;/p&gt;

&lt;p&gt;The most popular practice in the industry today is to save your JWT in a cookie or local storage. I've done this for a couple of years, and I have even taught others to do the same, but I didn't think it was a big deal until one of the applications I worked on was hacked. &lt;/p&gt;

&lt;p&gt;This was an &lt;code&gt;XSS&lt;/code&gt; attack. This is an attack in which a malicious person runs malicious code on the client's browser directly attacking your application. &lt;/p&gt;

&lt;p&gt;Now, they could do this to get access to local storage or cookies and extract the JWT from there.&lt;/p&gt;

&lt;p&gt;These tokens used in sessions are usually long-lived, and the attackers can get access to your API for a very long time. &lt;/p&gt;

&lt;p&gt;The solution we want to talk about today is one that would, first of all, prevent us from saving our tokens in a risky place, and secondly, implementing another solution that makes sure even if the attacker manages to get hold of a token, the access to the API would expire almost immediately.&lt;/p&gt;

&lt;p&gt;Let's get started.&lt;/p&gt;

&lt;p&gt;For this tutorial, the first thing we need is a real project. I have set up a &lt;a href="https://github.com/bahdcoder/jwt-best-practices"&gt;sample project&lt;/a&gt; with user registration, login, and logout. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;/api&lt;/code&gt; folder has a fully-featured graphql and auth server using just 20 lines of &lt;a href="https://github.com/tenseijs/tensei.git"&gt;Tensei.js&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tensei/auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;tensei&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tensei/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tensei/graphql&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;tensei&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Customer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;middlewareOptions&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="na"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;databaseConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sqlite&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;dbName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tensei.sqlite&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;p&gt;The &lt;code&gt;/client&lt;/code&gt; folder is a React.js project generated with &lt;a href="https://create-react-app.dev"&gt;create react app&lt;/a&gt;. We have three routes: &lt;code&gt;Login&lt;/code&gt;, &lt;code&gt;Register&lt;/code&gt;, and &lt;code&gt;Dashboard&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#user-registration" class="anchor"&gt;
  &lt;/a&gt;
  User registration
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Iz90Y85V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/bahdcoder/image/upload/v1606002630/register-page-jwt-tutorial.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iz90Y85V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/bahdcoder/image/upload/v1606002630/register-page-jwt-tutorial.png" alt="registe-page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When a user registers a new account, we make a request to the backend to get a JWT so we can automatically login the customer. At this point, this is usually when we'll set the JWT to local storage, but we won't be doing that. Here's the implementation of the register function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;client&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="na"&gt;register_customer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;authorization&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`Bearer &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;setCustomer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We do not set the &lt;code&gt;token&lt;/code&gt; to local storage, but we save it in memory. Here, we're setting it on the HTTP client so we can make subsequent authenticated requests to the API.&lt;/p&gt;

&lt;p&gt;Next, we set the customer and redirect to the dashboard.&lt;/p&gt;

&lt;p&gt;There's something very important that happens when we receive a response from the backend. Let's have a look at the backend response:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kdx-d59G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/bahdcoder/image/upload/v1606003553/Screenshot_2020-11-22_at_1.05.20_AM_imp0pr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kdx-d59G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/bahdcoder/image/upload/v1606003553/Screenshot_2020-11-22_at_1.05.20_AM_imp0pr.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8K8WMv3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/bahdcoder/image/upload/v1606003552/Screenshot_2020-11-22_at_1.05.33_AM_emerbc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8K8WMv3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/bahdcoder/image/upload/v1606003552/Screenshot_2020-11-22_at_1.05.33_AM_emerbc.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The backend set's an &lt;code&gt;HttpOnly&lt;/code&gt; cookie called &lt;code&gt;___refresh_token&lt;/code&gt; on the response. This cookie has the unique property of not being accessible from the client-side. This means if you run &lt;code&gt;document.cookie&lt;/code&gt; in the developer console, you won't see the &lt;code&gt;___refresh_token&lt;/code&gt; cookie. &lt;/p&gt;

&lt;p&gt;This is because an &lt;code&gt;HttpOnly&lt;/code&gt; cookie can only be exchanged with the server, and cannot be accessed using client-side javascript.&lt;/p&gt;

&lt;p&gt;Using this kind of cookie to set the refresh token gives us additional security, and assurance that the token can't fall into the wrong hands.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#understanding-refresh-tokens" class="anchor"&gt;
  &lt;/a&gt;
  Understanding refresh tokens
&lt;/h3&gt;

&lt;p&gt;The token we received in the JSON response from the API is an access token. This type of token gives the customer access to the API resources. &lt;/p&gt;

&lt;p&gt;An access token should expire in about 10 to 15 minutes so that if it falls into the wrong hands, it becomes invalid as soon as possible.&lt;/p&gt;

&lt;p&gt;A refresh token on the other hand does not give access. Instead, it can be used to request a new access token. That way, before the access token expires, you can silently request a new access token to keep your customers logged in.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#handling-silent-refresh" class="anchor"&gt;
  &lt;/a&gt;
  Handling silent refresh
&lt;/h3&gt;

&lt;p&gt;After registration, the customer is redirected to the dashboard, and they can access the dashboard because they are logged in. What happens when she refreshes the page or opens the app in a new tab? &lt;/p&gt;

&lt;p&gt;Well, since we only set the token in memory, the customer loses access and is redirected to the sign-in page instead.&lt;/p&gt;

&lt;p&gt;This is not pleasant, and we need to persist the customer's session somehow. &lt;/p&gt;

&lt;p&gt;That's where a silent refresh comes in. Before actually redirecting the customer to the sign-in screen, we need to check if the user has an active session. We do this by calling the API to request a new access token.&lt;/p&gt;

&lt;p&gt;A good place to do this is &lt;a href="https://github.com/bahdcoder/jwt-best-practices/blob/master/client/src/store/index.js"&gt;when the app mounts&lt;/a&gt;, showing a loading indicator to the user while we make this request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCustomer&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;working&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setWorking&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refreshToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;client&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;refresh_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="na"&gt;refresh_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expires_in&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;authorization&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`Bearer &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;setCustomer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setWorking&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;refreshToken&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As soon as the app mounts, we make an HTTP request to the backend to refresh the access token. Since the &lt;code&gt;___refresh_token&lt;/code&gt; is already set on the customer's browser, it is sent along with the request.&lt;/p&gt;

&lt;p&gt;The backend gets the cookie, authenticates this cookie, and sends back a new access token with the customer's information.&lt;/p&gt;

&lt;p&gt;We then set the &lt;code&gt;token&lt;/code&gt; on the HTTP client for subsequent requests and set the customer in the state. This means every time the customer visits the app, their session is fetched from the API and they are automatically logged in.&lt;/p&gt;

&lt;p&gt;This solves the first problem, and the customer has a persistent session, but the access token will expire in 10 minutes, and we need to handle this case too. &lt;/p&gt;

&lt;p&gt;The API also responds with how long the JWT takes to expire, so we can use this value to know when to silently call the API to get a new access token.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCustomer&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;working&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setWorking&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refreshToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;client&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;refresh_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="na"&gt;refresh_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expires_in&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;authorization&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`Bearer &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;refreshToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expires_in&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="nx"&gt;setCustomer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setWorking&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;refreshToken&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;p&gt;We're using the &lt;code&gt;expires_in&lt;/code&gt; value to set a &lt;code&gt;setTimeout&lt;/code&gt; to refresh the token. This means a few milliseconds before the token expires, the &lt;code&gt;refreshToken()&lt;/code&gt; method is called again, and it'll set a new access token.&lt;/p&gt;

&lt;p&gt;Great, we can now keep the customer always logged in with the access token only stored in memory.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#handling-logout" class="anchor"&gt;
  &lt;/a&gt;
  Handling logout
&lt;/h3&gt;

&lt;p&gt;What happens when the user needs to logout? We do not have access to the &lt;code&gt;___refresh_token&lt;/code&gt; cookie from client-side javascript, so how do we clear it?&lt;/p&gt;

&lt;p&gt;We need to call the API, and the API would invalidate the &lt;code&gt;___refresh_token&lt;/code&gt;. On the &lt;a href="https://github.com/bahdcoder/jwt-best-practices/blob/master/client/src/pages/Dashboard.js"&gt;dashboard page&lt;/a&gt;, when the &lt;code&gt;logout&lt;/code&gt; button is clicked, we'll invoke the following function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;remove_refresh_token&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/auth/signin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nx"&gt;setCustomer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;p&gt;We call the &lt;code&gt;remove_refresh_token&lt;/code&gt; endpoint on the backend, and the response invalidates the &lt;code&gt;___refresh_token&lt;/code&gt; cookie as such:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yy12FAZA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/bahdcoder/image/upload/v1606006228/Screenshot_2020-11-22_at_1.49.50_AM_ntxxw7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yy12FAZA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/bahdcoder/image/upload/v1606006228/Screenshot_2020-11-22_at_1.49.50_AM_ntxxw7.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The backend response contains a &lt;code&gt;Set-Cookie&lt;/code&gt; header, which sets the &lt;code&gt;Max-Age&lt;/code&gt; of the &lt;code&gt;___refresh_token&lt;/code&gt; header to &lt;code&gt;0&lt;/code&gt; and its value to &lt;code&gt;''&lt;/code&gt;, thus expiring it and making it invalid.&lt;/p&gt;

&lt;p&gt;We then set the customer to &lt;code&gt;null&lt;/code&gt; and redirect to the sign-in page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cross-domain-considerations" class="anchor"&gt;
  &lt;/a&gt;
  Cross domain considerations
&lt;/h3&gt;

&lt;p&gt;In the example project, the client and server run on separate domains. This would most likely be the case for your application, and to allow two domains to exchange sensitive information with each other, you need to set some configuration on both client and server.&lt;/p&gt;

&lt;p&gt;On the server, first, you need to enable &lt;code&gt;CORS&lt;/code&gt;, allowing the client domain to request resources from the server. Secondly, you need to allow the exchange of credentials. This informs the server to accept sensitive information such as cookies from the incoming client request. On our demo server, we configured this as such:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;middlewareOptions&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Tensei.js uses &lt;code&gt;apollo-server-express&lt;/code&gt; behind the scenes for the graphql server, and this configuration is directly passed to it.&lt;/p&gt;

&lt;p&gt;On the client, you need to configure your HTTP client such as Axios or Fetch to include sensitive credentials when making requests to an external API. In the demo project we used &lt;code&gt;graphql-request&lt;/code&gt;, which we configured as such:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GraphQLClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;graphql-request&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_API_URL&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:4500/graphql&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;include&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;When building applications that are not customer-facing, for tutorials or just fun projects, security might not be a big deal, but if working with real customer data, security has to be a top priority. &lt;/p&gt;

&lt;p&gt;I highly recommend implementing a very secure JWT authentication system when building applications that would be used in the real world. &lt;/p&gt;

&lt;p&gt;Please consider &lt;a href="https://twitter.com/bahdcoder"&gt;following me on Twitter&lt;/a&gt; and also checking out &lt;a href="https://github.com/tenseijs/tensei"&gt;tensei.js&lt;/a&gt; and giving it a star. &lt;/p&gt;

&lt;p&gt;Thank you very much for reading so far, and I hope this changes the way you handle JWT.&lt;/p&gt;

</description>
      <category>react</category>
      <category>tenseijs</category>
      <category>jwt</category>
      <category>auth</category>
    </item>
    <item>
      <title>Sign Up, Login &amp; Logout Users with Firebase Authentication</title>
      <author>Maasa Kono</author>
      <pubDate>Mon, 23 Nov 2020 00:09:39 +0000</pubDate>
      <link>https://dev.to/maasak/sign-up-login-logout-users-with-firebase-authentication-3oa9</link>
      <guid>https://dev.to/maasak/sign-up-login-logout-users-with-firebase-authentication-3oa9</guid>
      <description>&lt;p&gt;Most apps these days require creation of a user to login and logout for access to the tools that they offer.  Let's go over the basics of implementing these functionalities through Firebase Authentication with a user's email and password!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setting-up" class="anchor"&gt;
  &lt;/a&gt;
  Setting Up
&lt;/h1&gt;

&lt;p&gt;First, let's grab the Firebase SDK snippet from our project's settings in the Firebase Console, and paste it into the bottom of our main &lt;code&gt;index.html&lt;/code&gt; file's &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag so that we can use the Firebase functions in our app.  We will also add a script tag specifically for Firebase Authentication, and call &lt;code&gt;firebase.auth()&lt;/code&gt; set it to a &lt;code&gt;const&lt;/code&gt; variable &lt;code&gt;auth&lt;/code&gt; for its service interface.  &lt;/p&gt;

&lt;p&gt;And, of course, let's remember to also include the script for the main &lt;code&gt;index.js&lt;/code&gt; file. &lt;/p&gt;

&lt;p&gt;All together, it should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://www.gstatic.com/firebasejs/8.1.1/firebase-app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Below is the additional script for Firebase Auth --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://www.gstatic.com/firebasejs/8.1.1/firebase-auth.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;firebaseConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AIzaSyDP5OCeuEQD3IJXI252-fa3atPKhPaxPOl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;authDomain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;your-project-name.firebaseapp.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;databaseURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://your-project-name.firebaseio.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;projectId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;your-project-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializeApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firebaseConfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"scripts/index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now let's make a basic form with input fields for &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;, as well as buttons for &lt;code&gt;Sign Up&lt;/code&gt;, &lt;code&gt;Login&lt;/code&gt; and &lt;code&gt;Logout&lt;/code&gt; that will go inside the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; of our &lt;code&gt;index.html&lt;/code&gt; file above the script tags:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Email&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Password&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"signup-btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sign Up&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"login-btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Login&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"logout-btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Logout&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Great!  Now let's add an &lt;code&gt;index.js&lt;/code&gt; file in the same directory and start building the functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sign-up" class="anchor"&gt;
  &lt;/a&gt;
  Sign Up
&lt;/h2&gt;

&lt;p&gt;Since we have a &lt;code&gt;Sign Up&lt;/code&gt; button, we will start off by querying it by the button's ID (in this case it is &lt;code&gt;"signup-btn"&lt;/code&gt;) and store this in a variable &lt;code&gt;signupBtn&lt;/code&gt;.  Upon a click event on this DOM element, we'll next want to grab the &lt;code&gt;password&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt; values, and save them into variables to pass into the Firebase  function &lt;a href="https://firebase.google.com/docs/reference/js/firebase.auth.Auth#createuserwithemailandpassword"&gt;&lt;code&gt;createUserWithEmailAndPassword&lt;/code&gt;&lt;/a&gt;.  This is an asynchronous operation that returns a Promise, so let's tag on a &lt;code&gt;.then()&lt;/code&gt;, which takes a callback function (for our purposes, it will be &lt;code&gt;cred&lt;/code&gt; for "credentials"), and let us know in the browser console that the user has signed up.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;signupBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#signup-btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;signupBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createUserWithEmailAndPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cred&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;User signed up!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's test it out now in the browser.  After entering an email and password and clicking the &lt;code&gt;Sign Up&lt;/code&gt; button, let's navigate over to our Firebase Console and refresh it to see the new user that has been added: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Wsr80Yz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/69qbc5ez8oyigh5prtth.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Wsr80Yz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/69qbc5ez8oyigh5prtth.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It works!  You'll notice that Firebase also automatically generates a UID for the user as well.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#login" class="anchor"&gt;
  &lt;/a&gt;
  Login
&lt;/h2&gt;

&lt;p&gt;We'll now set up our login function and add an event listener on that &lt;code&gt;Login&lt;/code&gt; button.  It's going to look pretty similar to what we've done with the sign-up function above, but the main difference here is the Firebase function we'll be using to sign in, which is &lt;a href="https://firebase.google.com/docs/auth/web/password-auth#sign_in_a_user_with_an_email_address_and_password"&gt;&lt;code&gt;signInWithEmailAndPassword&lt;/code&gt;&lt;/a&gt;.  This also returns a Promise, so we'll add a &lt;code&gt;.then&lt;/code&gt; to log in the browser console a little message if we successfully sign in, and a &lt;code&gt;.catch&lt;/code&gt; to show an error message if we don't.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loginBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#login-btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;loginBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signInWithEmailAndPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cred&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Logged in user!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#logout" class="anchor"&gt;
  &lt;/a&gt;
  Logout
&lt;/h2&gt;

&lt;p&gt;This will be the quickest function to build, as all we need to call here is Firebase's &lt;a href="https://firebase.google.com/docs/auth/web/password-auth#next_steps"&gt;&lt;code&gt;signOut&lt;/code&gt;&lt;/a&gt; function.  Again, we'll use the browser console to just make sure this is working.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logoutBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#logout-btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;logoutBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signOut&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;User signed out!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#keeping-track-of-auth-state" class="anchor"&gt;
  &lt;/a&gt;
  Keeping Track of Auth State
&lt;/h2&gt;

&lt;p&gt;With the above three functions, a user can now sign up, login and logout of our app, but we also need to keep track of the sign-in state of the user in order to determine when to show certain data.  To do this, we will use Firebase's &lt;a href="https://firebase.google.com/docs/reference/js/firebase.auth.Auth#onauthstatechanged"&gt;&lt;code&gt;onAuthStateChanged&lt;/code&gt;&lt;/a&gt; method, which returns either the signed in Firebase user, or &lt;code&gt;null&lt;/code&gt; if not signed in.  When calling this function, we'll first check to see if the user exists, and if so then put in the console that they are logged in.  Let's reference the user by &lt;code&gt;user.email&lt;/code&gt; so that we will see their actual email address; else, when the user is not signed in, we will simply log a message indicating that the user is logged out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onAuthStateChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; is logged in!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;User is logged out!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once we've got these working, we can then put additional functionalities to read data only when the user is logged in, show a signup page when logged out, etc. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#helpful-link" class="anchor"&gt;
  &lt;/a&gt;
  Helpful Link
&lt;/h2&gt;

&lt;p&gt;🔥 &lt;a href="https://www.youtube.com/playlist?list=PL4cUxeGkcC9jUPIes_B8vRjn1_GaplOPQ"&gt;The Net Ninja's Firebase Auth Tutorial&lt;/a&gt; 🔥 &lt;br&gt;
&lt;em&gt;I cannot say enough how helpful I found these tutorial videos.  &lt;a href="https://www.thenetninja.co.uk/"&gt;The Net Ninja&lt;/a&gt; is amazing at breaking down concepts into short videos at a time, and I had such a great time following along because his explanations are easy to understand.  I would highly recommend checking it out!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://firebase.google.com/docs/auth"&gt;Firebase Authentication Documentation&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>firebase</category>
      <category>authentication</category>
    </item>
    <item>
      <title>5 Mindsets to avoid when you start coding</title>
      <author>Fum</author>
      <pubDate>Sun, 22 Nov 2020 23:37:14 +0000</pubDate>
      <link>https://dev.to/funbeedev/5-mindsets-to-avoid-when-you-start-coding-3o65</link>
      <guid>https://dev.to/funbeedev/5-mindsets-to-avoid-when-you-start-coding-3o65</guid>
      <description>&lt;p&gt;Are you a total newbie and want to learn how to code? Or are you already in the process of learning? &lt;/p&gt;

&lt;p&gt;I’m going to talk though some mindsets to avoid in your quest to improve your coding skills.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-avoid-spending-too-long-on-theory" class="anchor"&gt;
  &lt;/a&gt;
  1. Avoid spending too long on theory
&lt;/h2&gt;

&lt;p&gt;If you’re a complete beginner to the world of coding, the variety of programming languages available and getting used to technical terms related to software development can become overwhelming.&lt;/p&gt;

&lt;p&gt;However, don’t get carried away researching things like choosing the absolute ideal first programming language. Or feeling like you need to know all programming terms and concepts. The field of software development is vast, and one can easily spend years looking at the theory. If your primary aim is to develop software programs (and not to obtain a PhD in computer science) then I suggest you focus on the development part. &lt;/p&gt;

&lt;p&gt;Let’s say you’re completely new to coding and you want to get started developing your first program. Of course, there’s no harm in doing some reading on fundamental topics. In fact I suggest you read up on the very basics.&lt;/p&gt;

&lt;p&gt;Some research you might want to do can include: How to set up your development environment, good programming languages for beginners and knowing about essential tools every developer should use such as git.&lt;/p&gt;

&lt;p&gt;It’s good of course to get some background knowledge to have an initial idea of what coding involves. However, the point is not to get too worried about going in depth on each of the fundamentals. Instead, try to write your first program as soon as you can.  Once you do this, you’ve already gone further than most people who just think about wanting to code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-dont-just-watch-people-code" class="anchor"&gt;
  &lt;/a&gt;
  2. Don't just watch people code
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xa_epHMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qh3guxz0eqikvzsrqfs6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xa_epHMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qh3guxz0eqikvzsrqfs6.jpg" alt="dog watching laptop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What’s possibly worse than spending too much time reading up on theory? You guessed it, watching people code.&lt;/p&gt;

&lt;p&gt;As the desire to learn to code gains popularity, the amount of video material on coding has also grown. These are videos you may have come across such as ‘code with me’ videos. This is where you watch people code an application or they go through tutorials on programming languages. I’d advise not to use such videos as a primary way of teaching yourself to code for a number of reasons.&lt;/p&gt;

&lt;p&gt;While such videos can be useful to some extent in getting a feel of the process of coding, it won’t teach you important lessons on knowing how to tackle problems on your own. And trust me, knowing how to tackle problems you come across is a huge part of what becoming a developer is all about.&lt;/p&gt;

&lt;p&gt;You're missing out on evolving your own methods of solving problems if you rely too much on videos. While some can be useful, video tutorials typically take a very hand holding approach, as they tell you step by step how to solve problems.&lt;/p&gt;

&lt;p&gt;So instead of relying on how people solve problems themselves, start on your own and develop your own ability to solve problems. It might be more frustrating this way, especially for a beginner, but this is a skill you need to build up to tackle challenges you will surely come across.&lt;/p&gt;

&lt;p&gt;Keep in mind this does not mean videos can’t be useful or that should not ask for help when you need it. It’s about developing awareness of knowing how to tackle an obstacle when you come across it. Without these skills, it will get tough when you come across a tricky problem that can’t be easily solved by a simple Google search.&lt;/p&gt;

&lt;p&gt;I also want to address the types of coding related videos you might find yourself watching such as: &lt;em&gt;How to learn coding fast, How to get a first development job fast, Make money fast by coding&lt;/em&gt;, you get the picture…&lt;/p&gt;

&lt;p&gt;Coding is a skill that takes patience to build up so trying from the start to find shortcuts isn’t the best idea. There is certainly no harm watching such videos perhaps for entertaining purposes or for some motivation. Just remember, this won’t largely contribute to the actual work involved in learning how to code, which is by &lt;strong&gt;&lt;em&gt;actually writing code&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-doing-paid-courses-is-not-essential" class="anchor"&gt;
  &lt;/a&gt;
  3. Doing paid courses is not essential
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p8E4Fd9V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9apmtsxbmf2qk1dpia73.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p8E4Fd9V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9apmtsxbmf2qk1dpia73.jpg" alt="start coding for free"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many resources available on the web to help you on your journey in learning to code. This includes the availability of many programming courses. With many of the courses claiming they can teach you how to code in no time at all, it may be tempting to try out a paid course right away to get quicker results. It's however not essential to pay to obtain the resources you need to learn to code.&lt;/p&gt;

&lt;p&gt;Thanks to the internet, there are many free resources available that will teach you what you need on the basics of coding. As we talked about, when you’re just getting started, an overview of the fundamentals is a good place to start. This can be obtained from many websites. Even sites that offer paid courses often have articles with free information on the basics of programming. The point is, there is plenty of free material available that's more than enough to help you get started without having to pay a penny.&lt;/p&gt;

&lt;p&gt;If you want to learn Python for example, a website I used initially and I often use as a refresher is &lt;a href="https://www.learnpython.org/"&gt;learnpython.org&lt;/a&gt;. They have free interactive tutorials, meaning you’re learning by reading code and each lesson has an exercise you can attempt at the end.&lt;/p&gt;

&lt;p&gt;Not to say there isn't a benefit to joining a paid course. If you're willing to invest in such courses go ahead and try one out. Maybe knowing you've paid for it can be a motivation to go through all the material! Just make sure you do the necessary research beforehand on what the course contains and how it will benefit you in your journey in learning to code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-dont-resist-help-when-you-need-it" class="anchor"&gt;
  &lt;/a&gt;
  4. Don't resist help when you need it
&lt;/h2&gt;

&lt;p&gt;One of the most important mindsets to adopt as a coder is knowing that it’s OK to ask for help when you’re stuck.&lt;/p&gt;

&lt;p&gt;As you become more familiar with how programmers tend to work, you’ll quickly realise that even the most experienced of coders will always rely on support from others when coming across a problem they’re unable to solve from their knowledge alone. You might have heard of sites such as &lt;a href="https://stackoverflow.com/"&gt;Stackoverflow&lt;/a&gt; which is a huge platform where people can ask questions and gain answers to all sorts of programming related queries.&lt;/p&gt;

&lt;p&gt;As you code you’ll certainly run into problems on things you have no clue on. When you run to Google for help, you’ll learn to appreciate the existence of coding sites and communities where answers to all sorts of programming related questions are available.&lt;/p&gt;

&lt;p&gt;You might also find yourself running into the same problems again and again. In such cases, it's a good idea to make a note of the solution so you aren’t always searching for the same answers. Learning how to overcome issues you’ve come across already is a great way to improve your efficiency as a coder.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-dont-delay-just-start-coding-already" class="anchor"&gt;
  &lt;/a&gt;
  5. Don't delay, just start coding already!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--704wzrmb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h716nvphulzndiveqlv5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--704wzrmb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h716nvphulzndiveqlv5.jpg" alt="start coding everyone can"&gt;&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;This is probably the most important mindset to have when you want to learn to code and is an expansion on the first point of not spending too long on theory.&lt;/p&gt;

&lt;p&gt;No one can truly become good at coding by just reading about it or watching others code. You need to be proactive and actually start writing code. As mentioned, there are tons of free resources that will help you get started in writing your first program using any programming language. Pick a programming language and write your first ‘Hello world’ program as soon as you can.&lt;/p&gt;

&lt;p&gt;If you're reading this and are a newbie and want to start coding, remember that just getting started with writing code is where you want to be as soon as possible. This also goes for any experienced developers who wish to learn a new language or improve skills in languages they already know.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We discussed the mindsets to avoid when you’re starting out in the world of coding. Overall it’s important not to spend too much time at the start getting too deep into the many complex areas and topics of software development and to start coding right away. Learn by doing is the key philosophy here, so learn to code by doing some coding!&lt;/p&gt;

&lt;p&gt;Agree or disagree with the points discussed? Would love to hear your comments. Also feel free to share your own thoughts on mindsets to avoid when you start coding.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was originally posted on the &lt;a href="https://inspirezone.tech/blog"&gt;inspirezone tech blog&lt;/a&gt;. Inspirezone is a brand new community focusing on building development skills through a welcoming online coding collaboration environment. Checkout some of our open source projects on our &lt;a href="https://github.com/inspirezonetech"&gt;Github page&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>learning</category>
    </item>
    <item>
      <title>An Introvert's Personal Guide to Tech Twitter</title>
      <author>Sarah Shook 💎</author>
      <pubDate>Sun, 22 Nov 2020 19:12:20 +0000</pubDate>
      <link>https://dev.to/joojaco/an-introvert-s-personal-guide-to-tech-twitter-4oim</link>
      <guid>https://dev.to/joojaco/an-introvert-s-personal-guide-to-tech-twitter-4oim</guid>
      <description>&lt;p&gt;Looking through my Twitter feed, you probably wouldn’t know that I'm an introvert. In "real" life, I have a small circle of friends, crowds overwhelm me, and I need a lot of alone time (though nowadays that's rare since I'm a parent). This article is a personal guide to why and how I started using Twitter, how I navigate it currently, and how it can benefit you as a developer.&lt;/p&gt;

&lt;p&gt;In my current part-time role, I am the only developer at the company. I'm self-taught, and none of my family or friends code. I'm extremely familiar with looking for coding solutions on Stack Overflow and Google. But even with the many (free) online resources available, self-doubt (a.k.a. Imposter Syndrome) and loneliness become especially prevalent without interaction with other developers. I do not use Facebook or Instagram, but I'd used Twitter several years ago, and I decided to give it another go, focusing on tech tweets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-story" class="anchor"&gt;
  &lt;/a&gt;
  My Story
&lt;/h3&gt;

&lt;p&gt;My first tweet was "Twitter commit -m 'first tweet'", which didn't get much engagement (which I expected). My first few days on Twitter, I spent time searching for people to follow in the tech industry and began to read through the stream of thoughts of those I decided to follow. One person made a post saying "Treat your tweets as having a conversation" (paraphrasing). As someone who is okay without much conversation, but loves a challenge, I decided to do just that (with the caveat that I would not be upset if another person did not continue that conversation). And that approach worked! I started commenting on posts to which I related, and people responded back! Even some of the bigger developer accounts engaged with me. &lt;/p&gt;

&lt;p&gt;I began tweeting my own posts and received engagement on those! By the time I was about two weeks into using Twitter, I hit 200 followers, including a few of the "big players", which absolutely floored me! I suffer with anxiety and depression, and my husband told me that he hadn't seem me smile so much in months; I was on a Twitter high. It was such a revelation that I could finally talk to people who had similar interests and goals. I challenged myself with a popular tech Twitter challenge - #100DaysOfCode, where you code for 1 hour a day for 100 days in a row; I didn't finish this challenge due to my hectic schedule as a parent, but during my participation I started cheering on others on their journeys and vice versa. Over the course of the next few months, I started building actual relationships with other Twitter users and I made (dare I say it…?) friends with other people all over the world. &lt;/p&gt;

&lt;p&gt;At first my goal was to start developing relationships with other developers - to gain a support system and to support others. I'm happy to say I've met that goal, and my next goal is to start providing beneficial content so that I can start giving back to the community that has already given so much to me. &lt;/p&gt;

&lt;p&gt;Joining Twitter has been 100% the best professional and personal decision I've made since being in tech. If I could give my past-self advice when I started coding, it would be to join Twitter - the amount of supportive and genuine people on the platform can boost not only your confidence, but also your skills and career!&lt;/p&gt;

&lt;p&gt;Now that I've told you my story, let's get on to the tips and expectations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tips" class="anchor"&gt;
  &lt;/a&gt;
  Tips
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Engage (and tweet) often. Other people are more likely to follow active accounts, and being active helps you cultivate relationships!&lt;/li&gt;
&lt;li&gt;Take breaks when you need them. This may seem counter-intuitive to the previous tip, but Twitter might become overwhelming (especially as an introvert!). Taking a break for a few days is completely acceptable, and you'll come back with a refreshed outlook.&lt;/li&gt;
&lt;li&gt;Keep your feed genuine and positive - follow those who inspire you or who are filled with authenticity. I put off joining Twitter for a long time because I've heard that it is "toxic", but that depends on the people you follow and engage with. The Tech Twitter community is overall a very positive environment full of supportive people.&lt;/li&gt;
&lt;li&gt;Tech Twitter is 98% positive, but it still has trolls and negativity from time to time. You can mute, block, and/or report users who post offensive content. &lt;/li&gt;
&lt;li&gt;Join a challenge like #100DaysOfCode. This will connect you to others who are on similar paths. Or don't join, but comment and encourage those who are participating. Cheering someone on is a great way to start creating genuine connections. &lt;/li&gt;
&lt;li&gt;From an introvert's perspective, I recommend closing Direct Messages (DM), except if you and someone follow each other. Otherwise, you might find yourself with unsolicited (and sometimes perverse) messages, especially if you are a woman. This is one con of Twitter, but can be (mostly) avoided if you close your DMs to your network.&lt;/li&gt;
&lt;li&gt;Don't be a jerk. Seriously. Cancel culture is real on Twitter, and most of the time people get "cancelled" for repeatedly posting and commenting negatively. &lt;/li&gt;
&lt;li&gt;Have fun! Engaging with people all over the globe opens you up to an entirely different (online) world. &lt;/li&gt;
&lt;li&gt;When you first start out, feel free to take things slow. Work on getting used to engaging with strangers (this was the scariest point of taking the plunge, as I am a very shy person, but Twitter has immensely helped me come out of my shell). Once you're comfortable, you might want to figure out a goal for using the platform, and start taking steps to achieve those goals. Depending on your desired outcome, you'll need to navigate your interactions and tweets differently. Of course, goals may grow and change as you become more involved with the Twitterverse. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#expectations" class="anchor"&gt;
  &lt;/a&gt;
  Expectations
&lt;/h3&gt;

&lt;p&gt;As I mentioned earlier, treat Twitter as a conversation; however, don't get discouraged if not everyone engages back. Especially for larger accounts, it may be difficult for someone to respond or like every comment. I personally try to at least like every comment, but I've had a few tweets where even that wasn't possible! Just keep actively engaging; I guarantee many people will reciprocate.&lt;/p&gt;

&lt;p&gt;Don't judge others for using the platform in a way that is different from you (I've had this mindset). When I first joined, I wanted to build relationships, and that was it. I didn't understand why others would care about follower count or how to boost their engagement, but now that I've been on the platform for months, I do understand those reasonings now. The more followers you have means the more you can promote your work and help others. I used to think it was egotistical to self-promote, but now I believe self-promotion can gain you even more opportunities. In my opinion, building relationships is the best part about Twitter, but I now understand that it can be used for MANY purposes.&lt;/p&gt;

&lt;p&gt;Different people enjoy different things; if you find that Twitter is not enjoyable, you can stop using it at any time. But I highly recommend giving it a try; there are seemingly unlimited opportunities available from Twitter once you are an active user.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits" class="anchor"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h3&gt;

&lt;p&gt;Opportunities are abound on Twitter. Here are a few of the many benefits you can gain:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As an introvert, you learn how to put yourself "out there" and talk to others regularly.&lt;/li&gt;
&lt;li&gt;Networking with other developers. You can talk to others in similar roles, in roles you aspire to achieve, or give advice those more junior than you. You can ask for help with coding problems, and the chance is high that someone will respond and try to assist you in finding the solution. You can learn new things every day by following and engaging with people who have expertise in different languages.&lt;/li&gt;
&lt;li&gt;When you build relationships from networking, you may be asked to join a podcast, YouTube video, or a networking event. After finding your voice on Twitter, you may find that you want to begin engaging on other platforms as well!&lt;/li&gt;
&lt;li&gt;Helping others. Even if you are a new developer, there is always someone who is newer than you, and Twitter provides you an opportunity to share your knowledge with others who have questions or need help. Tech Twitter includes a huge demographic of people who want to celebrate others' successes.&lt;/li&gt;
&lt;li&gt;Giveaways. You can find people giving things away regularly, and it is possible to win them!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;As an introvert who gets anxious at the thought of meeting new people, joining a new social media site may seem overwhelming, but it's not as overwhelming as trying to meet people in "real" life. Also, as a developer, it is almost imperative that you talk to others in your field, especially if you are on a small team at work (or if you are the only developer!). The Tech Twitter community is overall a highly positive and inclusive space, and once you begin tweeting, you'll begin meeting people with similar aspirations across the world. If you decide that Twitter isn't for you, that's ok! But what's stopping you from giving it a go?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-recommendations-of-who-to-follow" class="anchor"&gt;
  &lt;/a&gt;
  Bonus: Recommendations of Who to Follow
&lt;/h3&gt;

&lt;p&gt;When I started my account, I had no clue as to who to follow. Here are a few of my favorite accounts (of people I regularly interact with) in alphabetical order:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/agentm831"&gt;@agentm831&lt;/a&gt;: Mo is a fellow introvert who thinks Twitter can seem intimidating sometimes. His advice is, "If you are willing to open up, even a bit, you will find many awesome people out there." &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/anniebombanie_"&gt;@anniebombanie_&lt;/a&gt;: Annie has a design background and shares her development journey, tips, and challenges she faces as a developer. She is relatable and genuine.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/catalinmpit"&gt;@catalinmpit&lt;/a&gt;: Catalin is a superb content creator and developer. He blogs regularly about tips for development, and his feed is full of knowledge and wit.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/catvscode"&gt;@catvscode&lt;/a&gt;: Cat is a developer and blogger with an amazing portfolio. She shares her true feelings about job hunting in the tech industry (it's not always sunshine and rainbows). If you are struggling to find a job in the tech world, you'll relate to what she shares. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/CLSulzberger"&gt;@CLSulzberger&lt;/a&gt;: C is a new developer learning to code. Most of his tweets are re-tweets, but he is very engaging in comments, and he is a nice person to get to know.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/DThompsonDev"&gt;@DThompsonDev&lt;/a&gt;: If you join Tech Twitter, Danny will show up on your feed at some point (probably regularly), so you might as well go ahead and follow him! He has an interesting journey into tech, and posts content to encourage and inspire new developers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/elaineinthebay"&gt;@elaineinthebay&lt;/a&gt;: Elaine is a developer in the Bay area who loves conversation design, has an amazing portfolio, and tweets about her experience as a contractor; she also spreads encouragement with her tweets. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/elyktrix"&gt;@elyktrix&lt;/a&gt;: Kyle is a developer who builds a lot of cool projects. He'll set personal goals (e.g. build 7 versions of a portfolio in 7 days), and will share his progress and final results. He tweets about being a front-end developer, and now has a store where you can buy developer-related clothes.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/FrancescoCiull4"&gt;@FrancescoCiull4&lt;/a&gt;: Francesco is a developer from Italy who has challenged himself with casually interviewing other developers across the world. He's spoken with a LOT of great developers, and he has a &lt;a href="http://youtube.com/FrancescoCiulla"&gt;YouTube channel&lt;/a&gt; where he documents his conversations. His Twitter and YouTube channel are full of inspiration from developers across the globe! &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/HTMLmom"&gt;@HTMLmom&lt;/a&gt;: Tay is a super-mom juggling parenting, college, and working. She shares her coding journey through college, and is a great person to follow, especially if you are a parent. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/madsbrodt"&gt;@madsbrodt&lt;/a&gt;: Mads is a developer who is working on becoming fully self-employed. He tweets out tips for new developers, how to start your coding journey, and is great to follow for inspiration.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/miss_lorsx"&gt;@miss_lorsx&lt;/a&gt;: Lors is a full-time developer who also creates beneficial content for developers. On top of working and creating content, she is also a parent, and she is an inspiration for parent coders.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/RiaCorpeno"&gt;@RiaCorpeno&lt;/a&gt;: Ria's journey into coding is very interesting - she started in chemistry, and after seeing developers code, fell in love with it. She blogs about coding and includes other developers in her posts who share their tips. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/rothecoder"&gt;@rothecoder&lt;/a&gt;: Ro is a developer who is passionate about physical and mental health (she even runs a Discord server for devs who help each other stay mentally healthy!), and she is one of the most supportive people I've had the honor of meeting on Twitter.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/SimonHoiberg"&gt;@SimonHoiberg&lt;/a&gt;: Simon is a powerhouse business owner who shares useful libraries, code snippets, and tips to help you on your journey, especially if your goal is to be self-employed. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/skay_tech"&gt;@skay_tech&lt;/a&gt;: Skay is another parent coder who blogs about his journey. He doesn't only post about coding, which is a refreshing break in the stream of tech tweets.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/svpino"&gt;@svpino&lt;/a&gt;: Santiago has been working with Machine Learning for over 5 years, and if ML is interesting to you, he's someone you should follow!&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/TheJackForge"&gt;@TheJackForge&lt;/a&gt;: Jack documents his coding journey and provides a LOT of humor in his feed. If you think programming can't be funny, he'll prove you wrong!&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/tadaspetra"&gt;@tadaspetra&lt;/a&gt;: Tadas is a Senior Developer currently focusing on Flutter. He is also leaving his job to be self-employed, and is documenting his journey. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/towernter"&gt;@towernter&lt;/a&gt;: Tawanda provides memes for developers, and is a breath of fresh air between the more serious and productive tweets. &lt;/li&gt;
&lt;li&gt;And, if you want to follow me... &lt;a href="https://twitter.com/joojaco"&gt;@joojaco&lt;/a&gt;: I'm Sarah, and I tweet about coding as a parent, my journey through bootcamp, and random thoughts. My account is not 100% tech tweets, because my life involves so much more than tech.
&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Best RESTful API Practices and Tools</title>
      <author>Adnan Babakan (he/him)</author>
      <pubDate>Sun, 22 Nov 2020 17:59:09 +0000</pubDate>
      <link>https://dev.to/adnanbabakan/best-restful-api-practices-and-tools-1pbh</link>
      <guid>https://dev.to/adnanbabakan/best-restful-api-practices-and-tools-1pbh</guid>
      <description>&lt;p&gt;Hey, DEV.to community!&lt;/p&gt;

&lt;p&gt;Web development has been changed drastically in the past few years. Websites used to use template engines to render the page and send it to the client. There used to be SOAP protocol to retrieve information from another server which usually used XML as its specification language. Later on, RESTful appeared and people started using it with JSON. Nowadays, RESTful is something that controls the whole website instead of only the remote parts. Showing a post, showing the list of posts, user data and etc, all are done by RESTful instead of server-rendered representation. Bottom line, RESTful is very important these days in web development and other software that need to connect to a server and retrieve some data, and this importance urges us to use a good pattern and related tools in order to achieve the best quality and assure the maintainability of the system.&lt;/p&gt;

&lt;p&gt;In my experience of developing RESTful APIs I've encountered many issues and gained some information while going on. Here I am sharing what I've learned and how I design RESTful APIs as well as the answer to frequently asked questions.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-restful" class="anchor"&gt;
  &lt;/a&gt;
  What is RESTful?
&lt;/h1&gt;

&lt;p&gt;RESTful is an architectural style of designing an end-point in which software can retrieve data. RESTFul APIs usually return JSON data as it is readable by many programming languages with no effort.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Is it possible to return anything else than JSON?&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Technically speaking, yes! RESTful is just a pattern of design and doesn't specifically make you use JSON. A RESTful API can return plain text, XML, CSV, or any other format but since the community already has chosen JSON it is better to go on with that. Many tools used to design a RESTful API assume your end-points to be returning JSON and nothing else.&lt;/p&gt;

&lt;p&gt;For further information on how RESTful API's should act please refer to &lt;a href="https://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven"&gt;https://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven&lt;/a&gt;. This information is added here thanks to:&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__375538"&gt;
  
    .ltag__user__id__375538 .follow-action-button {
      background-color: #2e0338 !important;
      color: #ffffff !important;
      border-color: #2e0338 !important;
    }
  
    &lt;a href="/dualyticalchemy" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pr2oUkni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3JCie25K--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/375538/4a9566d0-65cc-453c-bf48-70eb6e9168cf.jpg" alt="dualyticalchemy image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/dualyticalchemy"&gt;⚫️ nothingness negates itself&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/dualyticalchemy"&gt;nobody leaves the cave before the end of a new dawn&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#how-to-design-a-restful-api-server" class="anchor"&gt;
  &lt;/a&gt;
  How to design a RESTful API server?
&lt;/h1&gt;

&lt;p&gt;A RESTful API server can be designed using almost every back-end programming language. We will discuss this later in this article. Here we are trying to understand the pattern of RESTful API. What usually is needed in an application is the ability of CRUD. CRUD stands for Create, Read, Update, and Delete. These are four things every application has. Just like creating a post, reading a post, updating a post, and finally deleting the post. In a RESTful API, you would create a path (route) called &lt;code&gt;/posts&lt;/code&gt;. The usual naming convention is using the plural form. CRUD has four actions, so we need to assign four actions to this path as well. The HTTP protocol has four methods suitable for this matter, being &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;. These methods can be respectively used for CRUD actions. Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET /posts # Get the posts list
GET /posts/{id} # Get the post with id of {id}
POST /posts # Create post
PUT /posts/{id} # Update the post with id of {id}
DELETE /posts/{id} # Delete the post with id of {id}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;A route prefix like &lt;code&gt;/post&lt;/code&gt; is often called a collection as well.&lt;/p&gt;

&lt;p&gt;Don't use abbreviated pathnames like &lt;code&gt;/p&lt;/code&gt; for &lt;code&gt;/posts&lt;/code&gt;. This makes it harder to remember what the end-point does.&lt;/p&gt;

&lt;p&gt;Never use verbs in a pathname. This means that the following routes are not considered as a good RESTful API:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;POST /createPost
POST /deletePost
POST /updatePost
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;HTTP methods aren't that different when it comes to &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, and &lt;code&gt;DELETE&lt;/code&gt;. But using &lt;code&gt;POST&lt;/code&gt; for every route makes it ambiguous.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Why do we need to use the plural form of nouns?&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Using a singular form can be confusing. Imagine using the route &lt;code&gt;/post&lt;/code&gt; but receiving all of the posts! It doesn't make sense!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Why shouldn't we use verbs in pathnames?&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Using a verb in a pathname is going to make the API end-points much more than needed. But in the case of using HTTP methods on the same route, you have a very concise and easy-to-understand API.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;For example, can we use GET to create a record?&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
Again technically speaking, yes! But you shouldn't, as the &lt;code&gt;GET&lt;/code&gt; method is conventionally used for retrieving data. And even if you pay attention it makes more sense to say "Get that post" to get that post's data instead of calling it "Post that post" to get that post's data.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#nesting" class="anchor"&gt;
  &lt;/a&gt;
  Nesting
&lt;/h1&gt;

&lt;p&gt;Imagine you have a post and you want to retrieve its comments as well. You can use the nesting method to represent the belongings of a resource (like a post) or in a hierarchical situation.&lt;/p&gt;

&lt;p&gt;Since you already have a route for &lt;code&gt;GET /posts/{id}&lt;/code&gt; you need to add a set of routes as below:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET /posts/{id}/comments # Get all comments of post with id of {id}
GET /posts/{id}/comments/{cid} # Get the comment with id of {cid} of post with id of {id}
POST /posts/{id}/comments # Send a comment belonging to post with id of {id}
PUT /posts/{id}/comments/{cid} # Update the comment with id of {cid} of post with id of {id}
DELETE /posts/{id}/comments/{cid} # Delete the comment with id of {cid} of post with id of {id}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#querying" class="anchor"&gt;
  &lt;/a&gt;
  Querying
&lt;/h1&gt;

&lt;p&gt;Not always you need to get all the posts or all data of a specific resource. Sometimes you need to filter it, sort it, or paginate it. Despite the fact that how you do this matter in your back-end code you should follow some rules to make your end-points clearer:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use a full name for the query
Do not use &lt;code&gt;p&lt;/code&gt; for paginating or &lt;code&gt;f&lt;/code&gt; for filters.&lt;/li&gt;
&lt;li&gt;If your query param takes more than one word, separate them with an underline (often referred to as snake_case). For instance, never use &lt;code&gt;limitPerPage&lt;/code&gt; or &lt;code&gt;limitperpage&lt;/code&gt;, instead you should use &lt;code&gt;limit_per_page&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Do not ever combine two data into one
Although some people rather combine some data, I strictly dislike this behavior since it reduces the readability. For example, when ordering the date you should use two query params called &lt;code&gt;order_by&lt;/code&gt; and &lt;code&gt;order&lt;/code&gt;. As an example, a route should be like &lt;code&gt;/posts/?order_by=date&amp;amp;order=asc&lt;/code&gt; instead of &lt;code&gt;/posts/?order_by=date:asc&lt;/code&gt; or &lt;code&gt;/posts/?order_by=date:desc&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, a route with queries should look like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET /posts/?page=1&amp;amp;limit_per_page=20&amp;amp;order_by=date&amp;amp;order=desc
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Instead of this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET /posts/?p=1&amp;amp;lpp=20&amp;amp;&amp;amp;o=date:desc
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#errors" class="anchor"&gt;
  &lt;/a&gt;
  Errors
&lt;/h1&gt;

&lt;p&gt;Whenever a task is done successfully return the response with code 200. Whenever a route is not found return the response with code 400. Some programmers forget to do this and they only mention the result in the JSON response instead of in the HTTP response itself as well. Returning a code makes it much easier to handle responses. Here is the list of standard HTTP response codes: &lt;a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes"&gt;https://en.wikipedia.org/wiki/List_of_HTTP_status_codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An error should as well contain a human-readable message and a domain-specific message that only your application can understand for later usages. For example, this can be an error message:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;HTTP/1.1 403 Forbidden
...
{
    "status": 403,
    "err_code": "permission_denied",
    "message": "User doesn't have enough privileges"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;A fault-tolerant API should not return the error message generated by the server or language. In case any error happens make sure to handle it (for example by using a try/catch block) and return an appropriate JSON response.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#version-your-api" class="anchor"&gt;
  &lt;/a&gt;
  Version your API
&lt;/h1&gt;

&lt;p&gt;Over time you might need to change some of your APIs functionality. This might as well break the applications using it. So in order to prevent this problem version your API and let the previous API be there for a while until you replace all the previous APIs with the new API. One of the most used ways of doing this is prefixing all of the API end-points with the version. For instance:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/api/v1/post
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#what-languagesframeworks-and-database-should-we-use-to-design-a-restful-api-server" class="anchor"&gt;
  &lt;/a&gt;
  What languages/frameworks and database should we use to design a RESTful API server?
&lt;/h1&gt;

&lt;p&gt;As mentioned before, RESTful is just a commonly accepted pattern is not a language-specific thing. Thus you can design a RESTful API server using your own preferred language/framework.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wM4tmmxQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0g36y3jzfzaitlbepbii.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wM4tmmxQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0g36y3jzfzaitlbepbii.png" alt="Express"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is really common as I am writing this post is the &lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt; framework. It is super easy and fast to make a RESTful API using Express. Express is built on top of Node.js so you should know JavaScript to utilize this framework.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rUFI_VzC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/636ryisk00ynn1plpp26.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rUFI_VzC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/636ryisk00ynn1plpp26.png" alt="Laravel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another option can be &lt;a href="https://laravel.com/"&gt;Laravel&lt;/a&gt;. Laravel provides almost every asset needed for a RESTful API out of the box, like authentication and routings. Laravel is written in PHP.&lt;/p&gt;

&lt;p&gt;These mentioned frameworks are completely personal opinionated. You can go on with any other option. I've mentioned these since I've tried many options and found these easy and fun to work with.&lt;/p&gt;

&lt;p&gt;A database can be a huge matter when writing any application. A RESTful API server is no exception as well. Your database should be fast and maintainable. Depending on the needs of your application you should choose your database. If you need database-side relations you should go with an RDBMS like MySQL or PostgreSQL. If you are planning on growing your database horizontally you'd better choose MongoDB.&lt;/p&gt;

&lt;p&gt;Designing a RESTful API doesn't necessarily need to be done by one programming language/framework. An approach can be microservices written in multiple languages. You might need multiple databases based on their usages or multiple programming languages based on their useful libraries or performances in specific situations. This is where microservices can help.&lt;/p&gt;

&lt;p&gt;Imagine you are assigned to design an API for an image sharing and processing website and you want it to be super fast and you choose Express/Node.js for your back-end code. But you know that Python has many good libraries for AI or image processing. Here you can implement Python as a microservice to help you complete your main API server.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#testing-your-api-server" class="anchor"&gt;
  &lt;/a&gt;
  Testing your API server
&lt;/h1&gt;

&lt;p&gt;While designing an API server (be it RESTful or not) you need to test it every time you make a new route or make changes to the previous ones. It is impossible to reload the browser every time or make a form using HTML to send the data back and forth along with custom headers. So what you need is API testing software. There are many tools out there but what I usually prefer to use is Postman. It is free and simple.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.postman.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NFaMilS5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7bw9mmoib12ylwelrz4u.png" alt="Postman"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Postman features every kind of feature you need to test your API, including all HTTP methods, custom headers, params, and so on. It prettifies the JSON response and also generates you the code needed to make an HTTP request as you defined in many languages and cURL.&lt;/p&gt;



&lt;p&gt;I hope you've enjoyed this article!&lt;/p&gt;

&lt;p&gt;BTW! Check out my free Node.js Essentials E-book here:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/adnanbabakan" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8TX0be8j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--JPa-VH8o--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/241266/cec6a6bb-2d41-48b8-a16a-dc5af3941a3d.jpg" alt="adnanbabakan image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/adnanbabakan/nodejs-essentials-free-e-book-5319" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;NodeJS Essentials | Free E-Book&lt;/h2&gt;
      &lt;h3&gt;Adnan Babakan (he/him) ・ Sep 11 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#books&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>node</category>
      <category>javascript</category>
      <category>php</category>
      <category>api</category>
    </item>
    <item>
      <title>React time input⏳</title>
      <author>Andriy Chemerynskiy</author>
      <pubDate>Sun, 22 Nov 2020 16:31:34 +0000</pubDate>
      <link>https://dev.to/andrewchmr/react-hh-mm-ss-time-input-cfl</link>
      <guid>https://dev.to/andrewchmr/react-hh-mm-ss-time-input-cfl</guid>
      <description>&lt;p&gt;At my work, I had to add input which is quite similar to YouTube's "Start at" input for sharing video:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_IA0IkA1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fm1do8httzc8n2o89oqr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_IA0IkA1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fm1do8httzc8n2o89oqr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a pro level programmer, so the first thing I did was googling. However, all inputs that I found were different from what I needed. &lt;/p&gt;

&lt;p&gt;So I implemented my own clone of YouTube's "Start at" time input.&lt;/p&gt;




&lt;p&gt;Before I jump into the implementation part, here is the demo of what we are going to archive:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j-qcYBUk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yffdx3fqdvihomong03f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j-qcYBUk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yffdx3fqdvihomong03f.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Behind the scenes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User types in&lt;/li&gt;
&lt;li&gt;When he finishes typing and clicks somewhere else &lt;code&gt;onBlur&lt;/code&gt; event is fired&lt;/li&gt;
&lt;li&gt;Getting seconds from input value (&lt;code&gt;getSecondsFromHHMMSS(value&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Converting those seconds back to hh:mm:ss format (&lt;code&gt;toHHMMSS(seconds)&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It may sound complicated now, but it will be clear a moment later 😉&lt;/p&gt;




&lt;p&gt;So let's start coding. &lt;/p&gt;

&lt;p&gt;Let's add a basic structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;96&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;108&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;110&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#606c6e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-0.4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Helvetica Neue"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Helvetica&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TimeInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0:00&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; 
     &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
     &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TimeInput&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We created &lt;code&gt;TimeInput&lt;/code&gt; component that has an initial value set to &lt;code&gt;O:00&lt;/code&gt; and we update the state on every change.&lt;/p&gt;

&lt;p&gt;Now we will add &lt;code&gt;onBlur&lt;/code&gt; handler:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TimeInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0:00&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;+&lt;/span&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onBlur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getSecondsFromHHMMSS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toHHMMSS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;    &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
      &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;     &lt;span class="nx"&gt;onBlur&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onBlur&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TimeInput&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;onBlur&lt;/code&gt; function makes the same steps that I described earlier:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Getting seconds from input value (getSecondsFromHHMMSS(value)&lt;/li&gt;
&lt;li&gt;Converting those seconds back to hh:mm:ss format (toHHMMSS(seconds))&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;Math.max(0, getSecondsFromHHMMSS(value))&lt;/code&gt; returns 0 if seconds are negative, so we don't have wrong values in our input.&lt;/p&gt;

&lt;p&gt;Now let's take a closer look at &lt;code&gt;getSecondsFromHHMMSS&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getSecondsFromHHMMSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;str1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;str2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;str3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;val1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;val2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;val3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// seconds&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;val1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// minutes * 60 + seconds&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;val1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;val2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// hours * 60 * 60 + minutes * 60 + seconds&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;val1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;val2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;val3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We split the input's value by ":". Then we grab 3 values from this array and convert them to numbers.&lt;/p&gt;

&lt;p&gt;Depending on the context &lt;code&gt;val1&lt;/code&gt;, &lt;code&gt;val2&lt;/code&gt;, &lt;code&gt;val3&lt;/code&gt; represent different values and handle those cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Only seconds (eg. &lt;code&gt;10&lt;/code&gt;, &lt;code&gt;40&lt;/code&gt;, &lt;code&gt;70&lt;/code&gt; etc.) &lt;/li&gt;
&lt;li&gt;Minutes and seconds (eg. &lt;code&gt;1:20&lt;/code&gt;, &lt;code&gt;0:10&lt;/code&gt;, &lt;code&gt;14:40&lt;/code&gt; etc.)&lt;/li&gt;
&lt;li&gt;Hours, minutes, and seconds (eg. &lt;code&gt;1:12:40&lt;/code&gt;, &lt;code&gt;123:49:12&lt;/code&gt; etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, we format seconds from &lt;code&gt;getSecondsFromHHMMSS&lt;/code&gt; back to &lt;code&gt;hh:mm:ss&lt;/code&gt; format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toHHMMSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hours&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secNum&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3600&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;minutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secNum&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;secNum&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`0&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;00&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^0/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;We get &lt;code&gt;hours&lt;/code&gt;, &lt;code&gt;minutes&lt;/code&gt;, &lt;code&gt;seconds&lt;/code&gt; from total seconds using simple math &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;map&lt;/code&gt; those values and if the value is less than 10 we add &lt;code&gt;0&lt;/code&gt; to it&lt;/li&gt;
&lt;li&gt;We don't want to show values like &lt;code&gt;00&lt;/code&gt; (exception is seconds), so we &lt;code&gt;filter&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;join&lt;/code&gt; our strings with ":"&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;replace&lt;/code&gt; leading zero&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And it's working 😎&lt;/p&gt;

&lt;p&gt;Codepen: &lt;a href="https://codepen.io/andrewchmr-the-vuer/pen/wvWLRVw"&gt;https://codepen.io/andrewchmr-the-vuer/pen/wvWLRVw&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;I hope this article was helpful and saved you the time of thinking about how to do this 😉&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>react</category>
      <category>timeinput</category>
      <category>time</category>
      <category>javascript</category>
    </item>
    <item>
      <title>100 Days Of Python: Days 1 through 5</title>
      <author>Diana Chin</author>
      <pubDate>Sun, 22 Nov 2020 15:51:39 +0000</pubDate>
      <link>https://dev.to/redlotusdesignz/100-days-of-python-days-1-through-5-30kh</link>
      <guid>https://dev.to/redlotusdesignz/100-days-of-python-days-1-through-5-30kh</guid>
      <description>&lt;p&gt;Hello, everyone! I decided to start my &lt;em&gt;100 Days Of Python&lt;/em&gt; series as a way of logging my progress on relearning the basics of Python. The last time I’ve worked on Python was when I was in college. Since I’m interested in automation as well as improving on my game apps, I figured it’ll be a great way to strengthen my programming skill. My hope is that by the time I finish the challenge, I’ll be able to have a better understanding of the language. &lt;/p&gt;

&lt;p&gt;Without further ado, here’s my progress on the first five days of the challenge. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-1-band-name-generator" class="anchor"&gt;
  &lt;/a&gt;
  Day 1: Band Name Generator
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rbtQC8ka--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605475123406/8wafC_OSW.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rbtQC8ka--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605475123406/8wafC_OSW.gif" alt="Python-Day1.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Getting into the basics such as variables and combining string texts were a breeze. I did learn about utilizing f-strings when adding variables in your printed statements. Created a fun band generator that simply joins the two inputs into one statement.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-2-tip-calculator" class="anchor"&gt;
  &lt;/a&gt;
  Day 2: Tip Calculator
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--doTeYVej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605475137607/uTjrrYRmN.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--doTeYVej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605475137607/uTjrrYRmN.gif" alt="Python-Day2.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The tip calculator project was a fun way of utilizing mathematical expressions, especially when calculating percentages and remainders. Not to mention, working with floats and how to round off numbers. This project asks for three inputs: the total amount of the bill, how many people to split the bill, and the tip percentage you want to give. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-3-cow-island-text-adventure-game" class="anchor"&gt;
  &lt;/a&gt;
  Day 3: Cow Island Text Adventure Game
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ej1fMIpA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605475157022/eja2141Cn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ej1fMIpA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605475157022/eja2141Cn.gif" alt="Python-Day3.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learned about if-else statements and how they can be nested when making choices, depending on the user’s input. I have to admit, the indentation of the nested statements made me confused at first. What helped was creating a diagram that determines the logic flow of how the if-else statements are conducted.  I had fun making the Cow Island game as it reminded me of my visual novel game development where you had to pick and choose your own adventure. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-4-rock-paper-scissors-game" class="anchor"&gt;
  &lt;/a&gt;
  Day 4: Rock Paper Scissors Game
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q9PLzZlm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605475167021/sOQaUMjYf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q9PLzZlm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605475167021/sOQaUMjYf.gif" alt="Python-Day4.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learned about using the &lt;code&gt;random()&lt;/code&gt; module, creating arrays, and how to utilize them for the rock, paper, and scissors project. It involved using nested statements, some ASCII art, and making the computer provide a random choice to indicate if you win or lose the game. One thing I could’ve improved on the project was adding a statement that lets the users know that if they inputted an incorrect number or provided a letter, they would receive an error from the program. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-5-password-generator" class="anchor"&gt;
  &lt;/a&gt;
  Day 5: Password Generator
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H7v1rolF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605475176599/72ChBovn5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H7v1rolF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1605475176599/72ChBovn5.gif" alt="Python-Day5.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So far, I think Day 5’s project in creating a password generator was a proud moment of mine. This project utilizes for loops, along with lists and the random() module. The option to make it easy was on the table in terms of simply joining the inputs into one. For example, the easy way would’ve had the output “abc!%$123”. However, I wanted to take it one step notch by using the &lt;code&gt;random.shuffle()&lt;/code&gt; function to shuffle the contents from the list and therefore, output the password in an entirely different order. Some of the letters, symbols, and numbers may be duplicated in the end result, but that’s due to the &lt;code&gt;random.choice()&lt;/code&gt; function when it was passed through the for loops. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thats-all-for-now" class="anchor"&gt;
  &lt;/a&gt;
  That’s all for now!
&lt;/h1&gt;

&lt;p&gt;I anticipate my next article will cover Days 6 through 10 in about a week or so, assuming that life events or anything strange won't get in the way 😂 If you happen to like this article, feel free to share and &lt;a href="http://twitter.com/redlotusdesignz"&gt;tweet at me&lt;/a&gt; on your thoughts. &lt;/p&gt;

</description>
      <category>python</category>
      <category>codenewbie</category>
      <category>100daysofcode</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Creating Postman Collections</title>
      <author>Automation Bro</author>
      <pubDate>Sun, 22 Nov 2020 15:42:39 +0000</pubDate>
      <link>https://dev.to/automationbro/creating-postman-collections-1cdp</link>
      <guid>https://dev.to/automationbro/creating-postman-collections-1cdp</guid>
      <description>&lt;p&gt;Postman Collections allow you to group multiple requests together which you can store in folders and reuse later on as needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-using-postman-collections" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Advantages of using Postman Collections&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Postman Collections gives you the following advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keeps your workspace organized. You can keep all your requests in one location so that you can reuse them whenever you need.&lt;/li&gt;
&lt;li&gt;Share collections with your teammates for easier collaboration. For example – if you create a signup API request with user details in the body, when you share the collection they will have access to the same information&lt;/li&gt;
&lt;li&gt;Postman can generate API documentation by taking advantage of the collections&lt;/li&gt;
&lt;li&gt;Run your collections together. For example, if you have 10 API requests in your collection, you can now run all of them together instead of running each one of them individually and you can then automate your test runs using collections&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Collections are a really powerful concept in Postman and understanding how to create and use collections effectively will really help you a lot in API testing.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#check-out-the-video-below-to-learn-more-about-postman-collections-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Check out the video below to learn more about Postman Collections –&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/PBTYdZYrcQQ"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Note: in the video above, we are using Trello APIs to demonstrate the Collections example. Check out this video to set up your Trello API key and token – &lt;a href="https://youtu.be/n4aBczKjINo"&gt;https://youtu.be/n4aBczKjINo&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#to-learn-about-api-test-automation-using-javascript-check-out-my-free-tutorial-series-here-" class="anchor"&gt;
  &lt;/a&gt;
  To learn about API Test Automation using JavaScript, check out my free tutorial series here –
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ZSVw3TyZur4&amp;amp;list=PL6AdzyjjD5HDR2kNRU2dA1C8ydXRAaaBV"&gt;JavaScript API Test Automation Tutorial Series&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;I hope this video helped you out, let me know if you have any questions in the comments below!&lt;/p&gt;

&lt;p&gt;Happy testing! &lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;📧 Subscribe to my &lt;a href="https://automationbro.com/mailing-list"&gt;mailing list&lt;/a&gt; to get access to more content like this &lt;br&gt;
👍 Follow &lt;a class="comment-mentioned-user" href="https://dev.to/automationbro"&gt;@automationbro&lt;/a&gt;
 on Twitter for the latest updates&lt;/p&gt;

</description>
      <category>postman</category>
      <category>api</category>
      <category>testing</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Progressive Web Apps Will Save The Open Web</title>
      <author>Justin Hunter</author>
      <pubDate>Sun, 22 Nov 2020 15:13:46 +0000</pubDate>
      <link>https://dev.to/polluterofminds/progressive-web-apps-will-save-the-open-web-k7p</link>
      <guid>https://dev.to/polluterofminds/progressive-web-apps-will-save-the-open-web-k7p</guid>
      <description>&lt;p&gt;&lt;em&gt;This article first appeared &lt;a href="https://polluterofminds"&gt;on my site&lt;/a&gt;, so make sure to check out my other writing there.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Not enough people know about the power of &lt;a href="https://web.dev/tags/progressive-web-apps/"&gt;Progressive Web Apps&lt;/a&gt; (PWAs). Whenever I bring the concept up with friends (including developer friends), they tend not to understand what the benefits of PWAs are or why any users would ever use a PWA over the traditional web browser they know and love (or maybe hate). My answers to the confusions surrounding PWAs are numerous, but I want to try to use some practical examples to explain why I think PWAs will save the open web even as we see walled gardens raising their walls higher by the day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#case-study-in-anticompetitive-practices" class="anchor"&gt;
  &lt;/a&gt;
  Case Study in Anti-Competitive Practices
&lt;/h2&gt;

&lt;p&gt;You may have heard of the "epic" battle being waged in courts between Epic Games and Apple. If not, the tl;dr is Epic Games no longer wants to pay Apple 30% of the proceeds they receive from players who purchase their in-game currency on iOS devices. Epic released an in-game payment system on iOS that bypassed Apple's payment system, and, very expectedly, they got banned. They did the same thing on Android devices, and they were subsequently banned on Android too. Epic used the bans as a springboard to file anti-trust lawsuits against both Google and Apple.&lt;/p&gt;

&lt;p&gt;This case study is not about whether you stand with Epic, stand with Apple, or stand in the corner twiddling your thumbs. What it is is an illustration of anti-competitive practices and their impact on the web. Apple is a walled garden. There is no disputing this. It's a fact paraded around as convenience, as security, as usability. Your iOS device or iPad is not yours in the sense you cannot install whatever you want on it. You can only install what Apple says you can install.&lt;/p&gt;

&lt;p&gt;There is some truth in the protective qualities of a walled garden approach like this. Apple has been known for decades now for its stability and its lack of viruses. Yet, that stability and security comes at a cost. You may not be getting the best deals you can when making payments in-app for the software you use on your phone or iPad. Surely, apps tack on a percentage to whatever they would otherwise charge to help offset the fees Apple extracts. And what about those older Apple devices that are no longer supported by Apple? Those perfectly serviceable iPads lying in the junk heaps or in your junk drawers? In an open ecosystem, in the open web world, a device's age has no bearing on whether it can be used, on whether new software can be installed.&lt;/p&gt;

&lt;p&gt;So, take sides in the Epic vs. Apple battle if you want, but the point is not about that one particular battle. The point is about the wider problems a closed web (and make no mistake, native apps on phones and tablets are part of the new web) pose to everyday people.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-pwas-can-solve-this-problem" class="anchor"&gt;
  &lt;/a&gt;
  How PWAs Can Solve This Problem
&lt;/h2&gt;

&lt;p&gt;Progressive Web Apps, at their core, are nothing more than web apps. They are applications you access via a traditional desktop browser or a mobile browser. And yet, PWAs offer something so much more than the traditional experience.&lt;/p&gt;

&lt;p&gt;PWAs offer a place on your phone's or tablet's home screen. They offer an opportunity to live among the convenience layer offered by having an app available with just a simple click on your home screen. PWAs also offer the opportunity for apps built for the web to live in your start menu or in your dock on desktops and Macs.&lt;/p&gt;

&lt;p&gt;As exciting as the proposition of a web app being something that can be installed like a native app is, that only scratches the surface of the potential offered by PWAs. APIs that offer near-native app access are powerful and can create an experience that is indistinguishable from native apps. Push notifications, file system access, splash screens, offline support, and more are all available through PWAs just like they are with native apps. Web apps can be distracting if for nothing more than the always-there option to open another tab. With PWAs, you can focus. With a web app that opens like a full-screen, native app, you can focus on the thing you intended to do. This benefits users, but it also benefits the app developers in that their users are less likely to leave quickly.&lt;/p&gt;

&lt;p&gt;The biggest benefit PWAs provide is their circumventive nature. Apple, unless they decide to entirely disregard web standards, cannot prevent PWAs from being installed on user's home screens. Apple and Google cannot levy 30% taxes on purchases made in these apps. As devices age, they can still continue to be useful with new software obtained outside the App Store and Play Store ecosystems. Competition can be restored.&lt;/p&gt;

&lt;p&gt;To prove my point, I offer you another mini-case study:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Luna&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Luna is a still-in-beta streaming video game service. Much like Google Stadia or Nvidia GeForce Now, Luna offers players a nice library of games they can play for a monthly fee. The players do not need to worry so much about their device's hardware capabilities as these games stream from powerful, remote machines straight to the player's device or computer.&lt;/p&gt;

&lt;p&gt;Apple refuses to allow streaming gaming services on the App Store without significant concessions from the providers. So, Amazon Luna decided not to even worry about a native iOS or iPadOS app that would have to be submitted for review to the App Store police. Instead, they built their service as a PWA.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1qENXzXl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yleuc5dr5ltphbbqcnnt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1qENXzXl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yleuc5dr5ltphbbqcnnt.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I installed the Amazon Luna PWA on my iPhone and my iPad. The experience of firing it up feels incredible. It feels like I'm launching a traditional native app. And yet, it's not. It's free from the shackles of app store regulations.&lt;/p&gt;

&lt;p&gt;Luna is not even the first contender in what I expect to be an onslaught of companies offering PWA experiences so that they, as companies, may have more flexibility in their offerings and so that users have more options available to them. Nvidia GeForce Now, since September, has had the option to install their service as a PWA on mobile devices.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FPzZWpFr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6h0myhm2rp50x4ua9q99.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FPzZWpFr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6h0myhm2rp50x4ua9q99.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Streaming gaming services face rules that do not apply to streaming video services, so they may ultimately be the ones that lead the charge in widespread PWA adoption. PWAs are not new, and many big companies, including Google (which is odd considering their ban on Epic), Starbucks, Pinterest, and Twitter support PWAs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-downsides" class="anchor"&gt;
  &lt;/a&gt;
  The Downsides
&lt;/h2&gt;

&lt;p&gt;There is a whole new (and really old) world of opportunity offered by PWAs, but that is not to say they are perfect. PWAs have a lot of power. The APIs get better by the month and that means developers get an increasing amount of access to your device.&lt;/p&gt;

&lt;p&gt;This means the onus of security shifts from app store reviewers to users themselves. This feels like the right tradeoff, but there will surely be malicious actors as PWAs gain popularity, and there will surely be users that fall victim to those actors.&lt;/p&gt;

&lt;p&gt;But the web is a place for sovereignty and choice. Part of that is responsibility. If people are never given the opportunity to learn how to protect themselves, they will always be beholden to others. Perhaps, PWAs offer people the opportunity to take back control and truly learn how to protect themselves.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I'm excited about the future PWAs offer. The web, including mobile apps, should be open. It should be competitive. Despite Facebooks and Googles and Apples, the web can remain open, and PWAs will play a role.&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>programming</category>
      <category>pwa</category>
    </item>
    <item>
      <title>Vue + Tailwind 2.0: dark mode using Vuex, localStorage, and user's default preference</title>
      <author>Tony Ketcham (he/they)</author>
      <pubDate>Sun, 22 Nov 2020 14:31:47 +0000</pubDate>
      <link>https://dev.to/tonyketcham/vue-tailwind-2-0-dark-mode-using-vuex-localstorage-and-user-s-default-preference-439g</link>
      <guid>https://dev.to/tonyketcham/vue-tailwind-2-0-dark-mode-using-vuex-localstorage-and-user-s-default-preference-439g</guid>
      <description>&lt;p&gt;&lt;a href="//tailwindcss.com"&gt;TailwindCSS 2.0&lt;/a&gt; is sick. Native dark mode, tons of colors, tons of other shit. I just so happened to start a new &lt;a href="//gridsome.org"&gt;Gridsome&lt;/a&gt; project for documenting my recently developed tea dependency right when Tailwind 2.0 dropped, and I wanted to toss in some theme toggling to represent the dark times ahead.&lt;/p&gt;

&lt;p&gt;The kind of conditional theming I want is a little complex:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;first-time visitors should be displayed their OS/browser preferred theme&lt;/li&gt;
&lt;li&gt;the user's theme choice should be respected throughout their session&lt;/li&gt;
&lt;li&gt;the user's theme choice should be saved in local storage so that they don't have to battle the UI when they return&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While Tailwind has an option to pop theme selection into manual mode, the example in the docs for driving stick is vague and purposely non-specific. &lt;code&gt;CTRL+C&lt;/code&gt; &lt;code&gt;CTRL+V&lt;/code&gt; won't do a ton for us here, so we're on our own in VS Code.&lt;/p&gt;

&lt;p&gt;Let's implement our own stateful dark mode solution using &lt;a href="https://vuex.vuejs.org/#what-is-a-state-management-pattern"&gt;Vuex&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Storage"&gt;localStorage&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-deep-state" class="anchor"&gt;
  &lt;/a&gt;
  The deep state
&lt;/h2&gt;

&lt;p&gt;After dicking around trying to add Vuex into an existing Gridsome project for 45 minutes while the official Gridsome docs decided to take me out back to the &lt;code&gt;console.error&lt;/code&gt; firing squad, I eventually got to the point of being the proud father to my very own Vuex store:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vuex&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./modules/theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Vuex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vuex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="na"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="na"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;theme&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now inside that &lt;code&gt;theme.js&lt;/code&gt; module, we can do some simple tricks to tuck most of our logic away from the frontend. Let's start with the state and mutation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;SET_THEME&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We're keeping the mutation incredibly simple so that its sole responsibility is updating the theme's state. Saving that to localStorage allows us to retrieve the user's most recently selected theme after closing the page and coming back later, essentially like a cookie. &lt;/p&gt;

&lt;p&gt;Now think about what happens when a first-time user pops on our site. There's a chance they've selected either the light or dark theme on their OS or browser, which we can and should respect. Notice that we haven't initialized the theme state with anything yet. That's going to be our first action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
 &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;initTheme&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;commit&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cachedTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="c1"&gt;//  `true` if the user has set theme to `dark` on browser/OS&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userPrefersDark&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(prefers-color-scheme: dark)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cachedTheme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_THEME&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cachedTheme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userPrefersDark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_THEME&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
                &lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_THEME&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This action will then see if the user has been to the site before: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If so, we use their cached theme preference. &lt;/li&gt;
&lt;li&gt;If the person is new, we check to see if their system is set to dark mode. If so, we commit our store &amp;amp; cache to dark mode. &lt;/li&gt;
&lt;li&gt;Else, we default to light mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can dispatch this action from an omnipresent root of the app that everyone will hit no matter their point of entry:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// for me this is `layouts/Default.vue`, but for you it may be `App.vue` or something else&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;beforeMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;initTheme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we need a switch to toggle the theme. &lt;/p&gt;

&lt;p&gt;Before making that component, let's go back to &lt;code&gt;theme.js&lt;/code&gt; to add in the logic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;// This simply flips whatever was most recently committed to storage.&lt;/span&gt;
    &lt;span class="nx"&gt;toggleTheme&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;commit&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_THEME&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_THEME&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;getters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;getTheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tailwind-20s-raw-dark-endraw-class" class="anchor"&gt;
  &lt;/a&gt;
  Tailwind 2.0's &lt;code&gt;dark&lt;/code&gt; class
&lt;/h2&gt;

&lt;p&gt;From here, we can add in some properties to conditionally render on dark mode. Then we'll set up a watcher that will react to changes to the theme selection by running a function that adds and removes Tailwind's &lt;code&gt;dark&lt;/code&gt; css class to the root node of our app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;main&lt;/span&gt;
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"min-h-screen 
           bg-green-50 text-gray-700 
           dark:bg-gray-900 dark:text-purple-50"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ThemeToggler/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;mapGetters&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ThemeToggler&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../components/ThemeToggler.vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ThemeToggler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;beforeMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;initTheme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;mapGetters&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;getTheme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newTheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldTheme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;newTheme&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And the last piece, our incredibly underwhelming toggler:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; 
     &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"toggleTheme"&lt;/span&gt;
     &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dark:text-red-400 text-cyan-200"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      Theme Toggle
    &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;toggleTheme&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toggleTheme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creative-freedom" class="anchor"&gt;
  &lt;/a&gt;
  Creative freedom
&lt;/h2&gt;

&lt;p&gt;This is lovely because you can get wild, replace the text with some SVGs, and add transitions out the wazoo to translate between states. You can use Vue's built-in transition elements or Tailwind's transition classes, or both!&lt;/p&gt;

&lt;p&gt;If you have any questions, suggestions, or more elegant solutions, please post them below! I spotted a couple of areas that could be more elegant, like using Vue's conditional classes instead of vanilla-ing the &lt;code&gt;dark&lt;/code&gt; class on and off the root element.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>tutorial</category>
      <category>tailwind</category>
      <category>gridsome</category>
    </item>
  </channel>
</rss>
