<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Dynamic terraform deployments using DevOps replace tokens</title>
      <author>Marcel.L</author>
      <pubDate>Thu, 26 Aug 2021 07:36:30 +0000</pubDate>
      <link>https://dev.to/pwd9000/dynamic-terraform-deployments-using-devops-replace-tokens-5aeb</link>
      <guid>https://dev.to/pwd9000/dynamic-terraform-deployments-using-devops-replace-tokens-5aeb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#replace-tokens"&gt;
  &lt;/a&gt;
  Replace tokens
&lt;/h2&gt;

&lt;p&gt;Replace tokens is a DevOps extension that can be installed into your DevOps Organisation from the Azure DevOps &lt;a href="https://marketplace.visualstudio.com/items?itemName=qetza.replacetokens"&gt;marketplace&lt;/a&gt;, simply put it is an Azure Pipelines extension that replace tokens in files with variable values. Today we will look at how we can use this Devops extension working with a terraform HCL code base, to dynamically deploy infrastructure hosted on Azure based on environments defined as variables in DevOps using terraform.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-replace-tokens"&gt;
  &lt;/a&gt;
  Installing Replace Tokens
&lt;/h2&gt;

&lt;p&gt;Before we can use replace tokens we have to install it into our Devops Organisation from the &lt;a href="https://marketplace.visualstudio.com/items?itemName=qetza.replacetokens"&gt;marketplace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Go to DevOps Organisation Settings and select the &lt;strong&gt;Extensions&lt;/strong&gt; tab followed by &lt;strong&gt;Browse marketplace&lt;/strong&gt; and search for &lt;strong&gt;Replace tokens&lt;/strong&gt;. In addition also install the terraform extension called &lt;strong&gt;Terraform&lt;/strong&gt; by Microsoft DevLabs as we will use this later on to use terraform tasks in our DevOps pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AJ7PDY8m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Replace-Tokens/assets/ado_task.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AJ7PDY8m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Replace-Tokens/assets/ado_task.png" alt="ado_task"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-layout-and-objective"&gt;
  &lt;/a&gt;
  Project layout and objective
&lt;/h2&gt;

&lt;p&gt;For this tutorial we will write a simple terraform configuration that will deploy a resource group, but we will use the &lt;strong&gt;replace tokens task&lt;/strong&gt; to manipulate our configuration file to deploy 3 different resource groups based on environment. For example &lt;code&gt;Infra-dev-Rg&lt;/code&gt;, &lt;code&gt;Infra-uat-Rg&lt;/code&gt; and &lt;code&gt;Infra-prod-Rg&lt;/code&gt;. I have set up a new project in my organisation called &lt;strong&gt;DynamicTerraform&lt;/strong&gt;, I also created a repository called &lt;strong&gt;Infrastructure&lt;/strong&gt;. Inside of my repository I have created the following paths:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;\terraform-azurerm-resourcegroup&lt;/code&gt; This location will be my root path used to store the main terraform configuration files which will be used to deploy a simple resource group.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\terraform-azurerm-resourcegroup\pipelines&lt;/code&gt; This location will be used to store and configure yaml deployment pipelines for the resources in my root path.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\terraform-azurerm-resourcegroup\pipelines\variables&lt;/code&gt; This location will be used to store and configure yaml variable template files used for my pipelines.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any additional future resources can be created in new root paths e.g.: &lt;code&gt;\terraform-azurerm-resourceX&lt;/code&gt;, &lt;code&gt;\terraform-azurerm-resourceY&lt;/code&gt;, &lt;code&gt;\terraform-azurerm-resourceZ&lt;/code&gt; etc... For this tutorial we will just be using &lt;code&gt;\terraform-azurerm-resourcegroup&lt;/code&gt; to deploy a simple resource groups dynamically based on environments for &lt;code&gt;dev&lt;/code&gt;, &lt;code&gt;uat&lt;/code&gt; and &lt;code&gt;prod&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--miad6DKI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Replace-Tokens/assets/rep_layout.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--miad6DKI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Replace-Tokens/assets/rep_layout.png" alt="rep_layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#terraform-configuration"&gt;
  &lt;/a&gt;
  Terraform Configuration
&lt;/h2&gt;

&lt;p&gt;As a pre-req I have also pre-created an Azure DevOps &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints?view=azure-devops&amp;amp;tabs=yaml#create-a-service-connection"&gt;service connection&lt;/a&gt; that will be used to allow my pipelines to access Azure via the terraform task we installed earlier, and I also pre-created an Azure storage account which will act as my terraform &lt;a href="https://www.terraform.io/docs/language/settings/backends/azurerm.html"&gt;backend&lt;/a&gt; to safely store my terraform state files in.&lt;/p&gt;

&lt;p&gt;Under my repo path: &lt;code&gt;\terraform-azurerm-resourcegroup\&lt;/code&gt;, I have created the following three terraform files:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;main.tf&lt;/strong&gt; (Main terraform configuration file)
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;   &lt;span class="c1"&gt;# code/terraform-azurerm-resourcegroup/main.tf&lt;/span&gt;

   &lt;span class="c1"&gt;##################################################&lt;/span&gt;
   &lt;span class="c1"&gt;# Terraform Config                               #&lt;/span&gt;
   &lt;span class="c1"&gt;##################################################&lt;/span&gt;
   &lt;span class="nx"&gt;terraform&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;required_version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&amp;gt;= ~{terraformVersion}~"&lt;/span&gt;

     &lt;span class="nx"&gt;backend&lt;/span&gt; &lt;span class="s2"&gt;"azurerm"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;resource_group_name&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"~{terraformBackendRG}~"&lt;/span&gt;
       &lt;span class="nx"&gt;storage_account_name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"~{terraformBackendSA}~"&lt;/span&gt;
       &lt;span class="nx"&gt;container_name&lt;/span&gt;       &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"tfstate"&lt;/span&gt;
       &lt;span class="nx"&gt;key&lt;/span&gt;                  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"infra_~{environment}~_rg.tfstate"&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="nx"&gt;required_providers&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;azurerm&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;source&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"hashicorp/azurerm"&lt;/span&gt;
         &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"~&amp;gt; 2.73"&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="s2"&gt;"azurerm"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;features&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
     &lt;span class="nx"&gt;skip_provider_registration&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="c1"&gt;##################################################&lt;/span&gt;
   &lt;span class="c1"&gt;# RESOURCES                                      #&lt;/span&gt;
   &lt;span class="c1"&gt;##################################################&lt;/span&gt;
   &lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"azurerm_resource_group"&lt;/span&gt; &lt;span class="s2"&gt;"resource_group"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;name&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resource_group_name&lt;/span&gt;
     &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;
     &lt;span class="nx"&gt;tags&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tags&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you look at the our terraform configuration you will notice the following values: &lt;code&gt;~{terraformVersion}~&lt;/code&gt;, &lt;code&gt;~{terraformBackendRG}~&lt;/code&gt;, &lt;code&gt;~{terraformBackendSA}~&lt;/code&gt; and &lt;code&gt;~{environment}~&lt;/code&gt;, we will be dynamically changing the values inside of &lt;code&gt;~{ }~&lt;/code&gt; with values from our pipeline variable file later on in this tutorial using &lt;strong&gt;replace tokens&lt;/strong&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;variables.tf&lt;/strong&gt; (Terraform variable definition file)
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;   &lt;span class="c1"&gt;# code/terraform-azurerm-resourcegroup/variables.tf&lt;/span&gt;

   &lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="s2"&gt;"resource_group_name"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;type&lt;/span&gt;        &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
     &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Specifies the name of the resource group that will be created."&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="s2"&gt;"location"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;type&lt;/span&gt;        &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
     &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"The location/region where Azure resource will be created."&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="s2"&gt;"tags"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;type&lt;/span&gt;        &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
     &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Specifies a map of tags to be applied to the resources created."&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;resourcegroup.auto.tfvars&lt;/strong&gt; (Terraform variables which will be dynamically changed by replace tokens task)
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;   &lt;span class="c1"&gt;# code/terraform-azurerm-resourcegroup/resourcegroup.auto.tfvars&lt;/span&gt;

   &lt;span class="nx"&gt;resource_group_name&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Infra-~{environment}~-Rg"&lt;/span&gt;
   &lt;span class="nx"&gt;location&lt;/span&gt;            &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"~{location}~"&lt;/span&gt;
   &lt;span class="nx"&gt;tags&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;terraformDeployment&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"true"&lt;/span&gt;
     &lt;span class="nx"&gt;Environment&lt;/span&gt;         &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"~{environment}~"&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Again, if you look at the our &lt;strong&gt;TFVARS&lt;/strong&gt; configuration file you will notice the following values: &lt;code&gt;~{environment}~&lt;/code&gt; and &lt;code&gt;~{location}~&lt;/code&gt;, we will be dynamically changing the values inside of &lt;code&gt;~{ }~&lt;/code&gt; with values from our pipeline variable file later on in this tutorial using &lt;strong&gt;replace tokens&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#devops-pipeline-variable-file"&gt;
  &lt;/a&gt;
  DevOps Pipeline Variable file
&lt;/h2&gt;

&lt;p&gt;Under my repo path: &lt;code&gt;\terraform-azurerm-resourcegroup\pipelines\variables&lt;/code&gt;, I have created the following four yaml variable template files:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;common_vars.yml&lt;/strong&gt; (Declares variables that will be used in all pipelines).
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;   &lt;span class="c1"&gt;# code/terraform-azurerm-resourcegroup/pipelines/variables/common_vars.yml&lt;/span&gt;

   &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
     &lt;span class="c1"&gt;#Terraform Config + backend&lt;/span&gt;
     &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;terraformVersion&lt;/span&gt;
       &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;1.0.5'&lt;/span&gt;

     &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;terraformBackendRG&lt;/span&gt;
       &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;TF-Core-Rg'&lt;/span&gt;

     &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;terraformBackendSA&lt;/span&gt;
       &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;tfcorebackendsa'&lt;/span&gt;

     &lt;span class="c1"&gt;#Variables used for service connection&lt;/span&gt;
     &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AzureServiceConnection&lt;/span&gt;
       &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;TF-Terraform-SP'&lt;/span&gt;

     &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rootDirName&lt;/span&gt;
       &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;terraform-azurerm-resourcegroup'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;dev_vars.yml&lt;/strong&gt; (Declares variables that will be used in DEV specific pipeline).
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;   &lt;span class="c1"&gt;# code/terraform-azurerm-resourcegroup/pipelines/variables/dev_vars.yml&lt;/span&gt;

   &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
     &lt;span class="c1"&gt;#Development Variables&lt;/span&gt;
     &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;environment&lt;/span&gt;
       &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;dev'&lt;/span&gt;

     &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;location&lt;/span&gt;
       &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;uksouth'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;uat_vars.yml&lt;/strong&gt; (Declares variables that will be used in UAT specific pipeline).
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;   &lt;span class="c1"&gt;# code/terraform-azurerm-resourcegroup/pipelines/variables/uat_vars.yml&lt;/span&gt;

   &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
     &lt;span class="c1"&gt;#UAT Variables&lt;/span&gt;
     &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;environment&lt;/span&gt;
       &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;uat'&lt;/span&gt;

     &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;location&lt;/span&gt;
       &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;uksouth'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;prod_vars.yml&lt;/strong&gt; (Declares variables that will be used in PROD specific pipeline).
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;   &lt;span class="c1"&gt;# code/terraform-azurerm-resourcegroup/pipelines/variables/prod_vars.yml&lt;/span&gt;

   &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
     &lt;span class="c1"&gt;#Production Variables&lt;/span&gt;
     &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;environment&lt;/span&gt;
       &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;prod'&lt;/span&gt;

     &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;location&lt;/span&gt;
       &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;ukwest'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You will notice that the variable &lt;strong&gt;names&lt;/strong&gt; in each yaml template are aligned with the values used on the terraform configuration files earlier: &lt;code&gt;~{environment}~&lt;/code&gt;, &lt;code&gt;~{location}~&lt;/code&gt;, &lt;code&gt;~{terraformBackendRG}~&lt;/code&gt;, &lt;code&gt;~{terraformBackendSA}~&lt;/code&gt;. Also note that our production variable file has a different location specified: &lt;code&gt;ukwest&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#devops-pipeline"&gt;
  &lt;/a&gt;
  DevOps Pipeline
&lt;/h2&gt;

&lt;p&gt;Under my repo path: &lt;code&gt;\terraform-azurerm-resourcegroup\pipelines\&lt;/code&gt;, I have created the following three yaml pipelines (one for each environment):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;dev_deployment.yml&lt;/strong&gt; (Deploy dev RG)
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;   &lt;span class="c1"&gt;# code/terraform-azurerm-resourcegroup/pipelines/dev_deployment.yml&lt;/span&gt;

   &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment-Dev-RG-$(Rev:rr)&lt;/span&gt;
   &lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;none&lt;/span&gt;

   &lt;span class="c1"&gt;### ADO variable group linked to SSH secure vars ###&lt;/span&gt;
   &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
     &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;variables/common_vars.yml&lt;/span&gt;
     &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;variables/dev_vars.yml&lt;/span&gt;

   &lt;span class="na"&gt;stages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
     &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;stage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TF_DEPLOY_DEV_RG&lt;/span&gt;
       &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy Dev ResourceGroup&lt;/span&gt;
       &lt;span class="na"&gt;dependsOn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[]&lt;/span&gt;
       &lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
         &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;deployment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TF_Deploy_Dev_Rg&lt;/span&gt;
           &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Terraform - Dev - RG&lt;/span&gt;
           &lt;span class="na"&gt;pool&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
             &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Azure Pipelines&lt;/span&gt;
             &lt;span class="na"&gt;vmImage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;windows-latest&lt;/span&gt;
           &lt;span class="na"&gt;workspace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
             &lt;span class="na"&gt;clean&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;all&lt;/span&gt;
           &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Infra-Dev&lt;/span&gt;
           &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
             &lt;span class="na"&gt;runOnce&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
               &lt;span class="na"&gt;deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                 &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                   &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;checkout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;self&lt;/span&gt;

                   &lt;span class="c1"&gt;### Install Terraform Version from commom_vars&lt;/span&gt;
                   &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TerraformInstaller@0&lt;/span&gt;
                     &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                       &lt;span class="na"&gt;terraformVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ variables.terraformVersion }}&lt;/span&gt;

                   &lt;span class="c1"&gt;### replace tokens in tf and tfvars.&lt;/span&gt;
                   &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;qetza.replacetokens.replacetokens-task.replacetokens@3&lt;/span&gt;
                     &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Replace&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tokens&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;in&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tfvars&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;and&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tf'&lt;/span&gt;
                     &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                       &lt;span class="na"&gt;rootDirectory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(System.DefaultWorkingDirectory)'&lt;/span&gt;
                       &lt;span class="na"&gt;targetFiles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
                         &lt;span class="s"&gt;${{ variables.rootDirName }}\*.tf&lt;/span&gt;
                         &lt;span class="s"&gt;${{ variables.rootDirName }}\*.tfvars&lt;/span&gt;
                             &lt;span class="s"&gt;encoding: 'utf-8'&lt;/span&gt;
                       &lt;span class="na"&gt;actionOnMissing&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;warn'&lt;/span&gt;
                       &lt;span class="na"&gt;keepToken&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
                       &lt;span class="na"&gt;tokenPrefix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;~{'&lt;/span&gt;
                       &lt;span class="na"&gt;tokenSuffix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;}~'&lt;/span&gt;

                   &lt;span class="c1"&gt;### Terraform Init&lt;/span&gt;
                   &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TerraformTaskV2@2&lt;/span&gt;
                     &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Terraform Init&lt;/span&gt;
                     &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                       &lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;azurerm'&lt;/span&gt;
                       &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;init'&lt;/span&gt;
                       &lt;span class="na"&gt;workingDirectory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(System.DefaultWorkingDirectory)/${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.rootDirName&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
                       &lt;span class="na"&gt;backendServiceArm&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.AzureServiceConnection&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
                       &lt;span class="na"&gt;backendAzureRmResourceGroupName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.terraformBackendRG&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
                       &lt;span class="na"&gt;backendAzureRmStorageAccountName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.terraformBackendSA&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
                       &lt;span class="na"&gt;backendAzureRmContainerName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;tfstate'&lt;/span&gt;
                       &lt;span class="na"&gt;backendAzureRmKey&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Infra_${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.environment&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}_rg.tfstate'&lt;/span&gt;

                   &lt;span class="c1"&gt;### Terraform Plan&lt;/span&gt;
                   &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TerraformTaskV2@2&lt;/span&gt;
                     &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Terraform Plan&lt;/span&gt;
                     &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                       &lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;azurerm'&lt;/span&gt;
                       &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;plan'&lt;/span&gt;
                       &lt;span class="na"&gt;workingDirectory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(System.DefaultWorkingDirectory)/${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.rootDirName&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
                       &lt;span class="na"&gt;commandOptions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;--out=$(System.DefaultWorkingDirectory)/${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.rootDirName&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}/plan.tfplan'&lt;/span&gt;
                       &lt;span class="na"&gt;environmentServiceNameAzureRM&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.AzureServiceConnection&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;

                   &lt;span class="c1"&gt;### Terraform Apply&lt;/span&gt;
                   &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TerraformTaskV2@2&lt;/span&gt;
                     &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Terraform Apply&lt;/span&gt;
                     &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                       &lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;azurerm'&lt;/span&gt;
                       &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;apply'&lt;/span&gt;
                       &lt;span class="na"&gt;workingDirectory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(System.DefaultWorkingDirectory)/${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.rootDirName&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
                       &lt;span class="na"&gt;environmentServiceNameAzureRM&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.AzureServiceConnection&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;uat_deployment.yml&lt;/strong&gt; (Deploy uat RG)
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;   &lt;span class="c1"&gt;# code/terraform-azurerm-resourcegroup/pipelines/uat_deployment.yml&lt;/span&gt;

   &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment-UAT-RG-$(Rev:rr)&lt;/span&gt;
   &lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;none&lt;/span&gt;

   &lt;span class="c1"&gt;### ADO variable group linked to SSH secure vars ###&lt;/span&gt;
   &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
     &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;variables/common_vars.yml&lt;/span&gt;
     &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;variables/uat_vars.yml&lt;/span&gt;

   &lt;span class="na"&gt;stages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
     &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;stage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TF_DEPLOY_UAT_RG&lt;/span&gt;
       &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy Uat ResourceGroup&lt;/span&gt;
       &lt;span class="na"&gt;dependsOn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[]&lt;/span&gt;
       &lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
         &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;deployment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TF_Deploy_Uat_Rg&lt;/span&gt;
           &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Terraform - Uat - RG&lt;/span&gt;
           &lt;span class="na"&gt;pool&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
             &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Azure Pipelines&lt;/span&gt;
             &lt;span class="na"&gt;vmImage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;windows-latest&lt;/span&gt;
           &lt;span class="na"&gt;workspace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
             &lt;span class="na"&gt;clean&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;all&lt;/span&gt;
           &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Infra-Uat&lt;/span&gt;
           &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
             &lt;span class="na"&gt;runOnce&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
               &lt;span class="na"&gt;deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                 &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                   &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;checkout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;self&lt;/span&gt;

                   &lt;span class="c1"&gt;### Install Terraform Version from commom_vars&lt;/span&gt;
                   &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TerraformInstaller@0&lt;/span&gt;
                     &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                       &lt;span class="na"&gt;terraformVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ variables.terraformVersion }}&lt;/span&gt;

                   &lt;span class="c1"&gt;### replace tokens in tf and tfvars.&lt;/span&gt;
                   &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;qetza.replacetokens.replacetokens-task.replacetokens@3&lt;/span&gt;
                     &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Replace&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tokens&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;in&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tfvars&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;and&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tf'&lt;/span&gt;
                     &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                       &lt;span class="na"&gt;rootDirectory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(System.DefaultWorkingDirectory)'&lt;/span&gt;
                       &lt;span class="na"&gt;targetFiles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
                         &lt;span class="s"&gt;${{ variables.rootDirName }}\*.tf&lt;/span&gt;
                         &lt;span class="s"&gt;${{ variables.rootDirName }}\*.tfvars&lt;/span&gt;
                             &lt;span class="s"&gt;encoding: 'utf-8'&lt;/span&gt;
                       &lt;span class="na"&gt;actionOnMissing&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;warn'&lt;/span&gt;
                       &lt;span class="na"&gt;keepToken&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
                       &lt;span class="na"&gt;tokenPrefix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;~{'&lt;/span&gt;
                       &lt;span class="na"&gt;tokenSuffix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;}~'&lt;/span&gt;

                   &lt;span class="c1"&gt;### Terraform Init&lt;/span&gt;
                   &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TerraformTaskV2@2&lt;/span&gt;
                     &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Terraform Init&lt;/span&gt;
                     &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                       &lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;azurerm'&lt;/span&gt;
                       &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;init'&lt;/span&gt;
                       &lt;span class="na"&gt;workingDirectory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(System.DefaultWorkingDirectory)/${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.rootDirName&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
                       &lt;span class="na"&gt;backendServiceArm&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.AzureServiceConnection&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
                       &lt;span class="na"&gt;backendAzureRmResourceGroupName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.terraformBackendRG&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
                       &lt;span class="na"&gt;backendAzureRmStorageAccountName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.terraformBackendSA&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
                       &lt;span class="na"&gt;backendAzureRmContainerName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;tfstate'&lt;/span&gt;
                       &lt;span class="na"&gt;backendAzureRmKey&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Infra_${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.environment&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}_rg.tfstate'&lt;/span&gt;

                   &lt;span class="c1"&gt;### Terraform Plan&lt;/span&gt;
                   &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TerraformTaskV2@2&lt;/span&gt;
                     &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Terraform Plan&lt;/span&gt;
                     &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                       &lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;azurerm'&lt;/span&gt;
                       &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;plan'&lt;/span&gt;
                       &lt;span class="na"&gt;workingDirectory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(System.DefaultWorkingDirectory)/${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.rootDirName&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
                       &lt;span class="na"&gt;commandOptions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;--out=$(System.DefaultWorkingDirectory)/${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.rootDirName&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}/plan.tfplan'&lt;/span&gt;
                       &lt;span class="na"&gt;environmentServiceNameAzureRM&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.AzureServiceConnection&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;

                   &lt;span class="c1"&gt;### Terraform Apply&lt;/span&gt;
                   &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TerraformTaskV2@2&lt;/span&gt;
                     &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Terraform Apply&lt;/span&gt;
                     &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                       &lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;azurerm'&lt;/span&gt;
                       &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;apply'&lt;/span&gt;
                       &lt;span class="na"&gt;workingDirectory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(System.DefaultWorkingDirectory)/${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.rootDirName&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
                       &lt;span class="na"&gt;environmentServiceNameAzureRM&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.AzureServiceConnection&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;prod_deployment.yml&lt;/strong&gt; (Deploy prod RG)
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;   &lt;span class="c1"&gt;# code/terraform-azurerm-resourcegroup/pipelines/prod_deployment.yml&lt;/span&gt;

   &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment-Prod-RG-$(Rev:rr)&lt;/span&gt;
   &lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;none&lt;/span&gt;

   &lt;span class="c1"&gt;### ADO variable group linked to SSH secure vars ###&lt;/span&gt;
   &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
     &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;variables/common_vars.yml&lt;/span&gt;
     &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;variables/prod_vars.yml&lt;/span&gt;

   &lt;span class="na"&gt;stages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
     &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;stage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TF_DEPLOY_PROD_RG&lt;/span&gt;
       &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy Prod ResourceGroup&lt;/span&gt;
       &lt;span class="na"&gt;dependsOn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[]&lt;/span&gt;
       &lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
         &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;deployment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TF_Deploy_Prod_Rg&lt;/span&gt;
           &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Terraform - Prod - RG&lt;/span&gt;
           &lt;span class="na"&gt;pool&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
             &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Azure Pipelines&lt;/span&gt;
             &lt;span class="na"&gt;vmImage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;windows-latest&lt;/span&gt;
           &lt;span class="na"&gt;workspace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
             &lt;span class="na"&gt;clean&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;all&lt;/span&gt;
           &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Infra-Prod&lt;/span&gt;
           &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
             &lt;span class="na"&gt;runOnce&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
               &lt;span class="na"&gt;deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                 &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                   &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;checkout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;self&lt;/span&gt;

                   &lt;span class="c1"&gt;### Install Terraform Version from commom_vars&lt;/span&gt;
                   &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TerraformInstaller@0&lt;/span&gt;
                     &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                       &lt;span class="na"&gt;terraformVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ variables.terraformVersion }}&lt;/span&gt;

                   &lt;span class="c1"&gt;### replace tokens in tf and tfvars.&lt;/span&gt;
                   &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;qetza.replacetokens.replacetokens-task.replacetokens@3&lt;/span&gt;
                     &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Replace&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tokens&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;in&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tfvars&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;and&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tf'&lt;/span&gt;
                     &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                       &lt;span class="na"&gt;rootDirectory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(System.DefaultWorkingDirectory)'&lt;/span&gt;
                       &lt;span class="na"&gt;targetFiles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
                         &lt;span class="s"&gt;${{ variables.rootDirName }}\*.tf&lt;/span&gt;
                         &lt;span class="s"&gt;${{ variables.rootDirName }}\*.tfvars&lt;/span&gt;
                             &lt;span class="s"&gt;encoding: 'utf-8'&lt;/span&gt;
                       &lt;span class="na"&gt;actionOnMissing&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;warn'&lt;/span&gt;
                       &lt;span class="na"&gt;keepToken&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
                       &lt;span class="na"&gt;tokenPrefix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;~{'&lt;/span&gt;
                       &lt;span class="na"&gt;tokenSuffix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;}~'&lt;/span&gt;

                   &lt;span class="c1"&gt;### Terraform Init&lt;/span&gt;
                   &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TerraformTaskV2@2&lt;/span&gt;
                     &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Terraform Init&lt;/span&gt;
                     &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                       &lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;azurerm'&lt;/span&gt;
                       &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;init'&lt;/span&gt;
                       &lt;span class="na"&gt;workingDirectory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(System.DefaultWorkingDirectory)/${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.rootDirName&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
                       &lt;span class="na"&gt;backendServiceArm&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.AzureServiceConnection&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
                       &lt;span class="na"&gt;backendAzureRmResourceGroupName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.terraformBackendRG&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
                       &lt;span class="na"&gt;backendAzureRmStorageAccountName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.terraformBackendSA&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
                       &lt;span class="na"&gt;backendAzureRmContainerName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;tfstate'&lt;/span&gt;
                       &lt;span class="na"&gt;backendAzureRmKey&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Infra_${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.environment&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}_rg.tfstate'&lt;/span&gt;

                   &lt;span class="c1"&gt;### Terraform Plan&lt;/span&gt;
                   &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TerraformTaskV2@2&lt;/span&gt;
                     &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Terraform Plan&lt;/span&gt;
                     &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                       &lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;azurerm'&lt;/span&gt;
                       &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;plan'&lt;/span&gt;
                       &lt;span class="na"&gt;workingDirectory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(System.DefaultWorkingDirectory)/${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.rootDirName&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
                       &lt;span class="na"&gt;commandOptions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;--out=$(System.DefaultWorkingDirectory)/${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.rootDirName&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}/plan.tfplan'&lt;/span&gt;
                       &lt;span class="na"&gt;environmentServiceNameAzureRM&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.AzureServiceConnection&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;

                   &lt;span class="c1"&gt;### Terraform Apply&lt;/span&gt;
                   &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;task&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TerraformTaskV2@2&lt;/span&gt;
                     &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Terraform Apply&lt;/span&gt;
                     &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                       &lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;azurerm'&lt;/span&gt;
                       &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;apply'&lt;/span&gt;
                       &lt;span class="na"&gt;workingDirectory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$(System.DefaultWorkingDirectory)/${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.rootDirName&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
                       &lt;span class="na"&gt;environmentServiceNameAzureRM&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.AzureServiceConnection&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now we can configure each pipeline, which will consume its own corresponding variable template file as well as a common variable template file, but use the same terraform configuration code to dynamically deploy the same resource group but each having its own state file, name and tags dynamically.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tzXvVrwL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Replace-Tokens/assets/pipelines.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tzXvVrwL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Replace-Tokens/assets/pipelines.png" alt="pipelines"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also remember to set the environments in Azure DevOps as shown on each of our yaml pipelines e.g.:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# code/terraform-azurerm-resourcegroup/pipelines/dev_deployment.yml#L21-L21&lt;/span&gt;

&lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Infra-Dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yQOO8Tf4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Replace-Tokens/assets/environments.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yQOO8Tf4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Replace-Tokens/assets/environments.png" alt="environments"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After each pipeline has been run, you will notice that our terraform configuration was dynamically changed each time with the &lt;strong&gt;replace tokens task&lt;/strong&gt;, replacing the values on our &lt;strong&gt;TF&lt;/strong&gt; and &lt;strong&gt;TFVARS&lt;/strong&gt; files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9TSNoUU3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Replace-Tokens/assets/replace_token.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9TSNoUU3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Replace-Tokens/assets/replace_token.png" alt="replace_token"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll also see the each resource group have been dynamically created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7wL26jO1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Replace-Tokens/assets/rg_dep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7wL26jO1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Replace-Tokens/assets/rg_dep.png" alt="rg_dep"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Remember we changed prod to be in the UK West region on our variable template file for prod.&lt;/p&gt;

&lt;p&gt;Also note that each of the deployments have their own unique state file based on the environment as depicted on each of the yaml pipelines and declared in the variable files e.g.:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# code/terraform-azurerm-resourcegroup/pipelines/dev_deployment.yml#L58-L58&lt;/span&gt;

&lt;span class="na"&gt;backendAzureRmKey&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Infra_${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;variables.environment&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}_rg.tfstate'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nQu-n3ri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Replace-Tokens/assets/state.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nQu-n3ri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/DevOps-Replace-Tokens/assets/state.png" alt="state"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this post and have learned something new. You can also find the code samples used in this blog post on my &lt;a href="https://github.com/Pwd9000-ML/blog-devto/tree/master/posts/DevOps-Replace-Tokens/code"&gt;Github&lt;/a&gt; page. ❤️&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#author"&gt;
  &lt;/a&gt;
  &lt;em&gt;Author&lt;/em&gt;
&lt;/h3&gt;


&lt;div class="ltag__user ltag__user__id__620034"&gt;
  
    .ltag__user__id__620034 .follow-action-button {
      background-color: #0cbb58 !important;
      color: #000000 !important;
      border-color: #0cbb58 !important;
    }
  
    &lt;a href="/pwd9000" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Amb4rEJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--L_SDLOmq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/620034/93be2c72-3a13-478e-8af1-a4bedc1b2331.jpeg" alt="pwd9000 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/pwd9000"&gt;Marcel.L&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/pwd9000"&gt;Cloud Solutions Architect and DevOps enthusiast.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>tutorial</category>
      <category>azure</category>
      <category>productivity</category>
      <category>devops</category>
    </item>
    <item>
      <title>The one and only SEO checklist you will ever need</title>
      <author>Kars van Iersel</author>
      <pubDate>Thu, 26 Aug 2021 07:11:35 +0000</pubDate>
      <link>https://dev.to/karsvaniersel/the-one-and-only-seo-checklist-you-will-ever-need-34k3</link>
      <guid>https://dev.to/karsvaniersel/the-one-and-only-seo-checklist-you-will-ever-need-34k3</guid>
      <description>&lt;p&gt;If you are an SEO newbie or have some experience but would like to get a step-by-step SEO guide on how to avoid common website promotion mistakes, here's a list of SEO tasks based on best practices that you should take into account when creating and optimising your websites.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;So you got your fancy website or blog up and running, but now you need to rank high in Google. The question is always how do I make sure I rank so that my pages get found by Google? Well Look no further, I've compiled a complete step-by-step SEO checklist of SEO tasks based on the best practices. I guarantee you that you will see results if you can check all of them!&lt;/p&gt;

&lt;p&gt;I'm currently working on a Notion board with an actionable checklist that you guys can duplicate and use! I will update this post once I'm done with that. Consider checking back on this page for the Notion link, or follow me on Twitter or subscribe to my newsletter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-keyword-research"&gt;
  &lt;/a&gt;
  1. Keyword research 🔬
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#analyse-competitor-keywords"&gt;
  &lt;/a&gt;
  Analyse competitor keywords
&lt;/h3&gt;

&lt;p&gt;To begin the process of gathering keywords for your website, start by researching a competitor's page that ranks well in search engines. This is because these pages may contain highly valuable keywords already proven to work on Google and other search engines.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://moz.com/seo-competitor-analysis"&gt;The Guide to SEO Competitor Analysis by Moz&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.semrush.com/blog/how-to-do-seo-competitive-analysis/"&gt;How to Do an SEO Competitive Analysis by SEMrush&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://ahrefs.com/blog/competitive-analysis/"&gt;How to Do an SEO Competitor Analysis [Template Included] by Ahrefs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.advancedwebranking.com/seo-competitor-analysis/"&gt;Your Essential Guide to Crushing Competition [w/ Template] by Advanced Web Ranking&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://databox.com/seo-competitive-analysis-tips-and-tools"&gt;The SEO Competitive Analysis Tools &amp;amp; Tips 100+ Marketers Rely On Most by Databox&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#collect-core-keywords"&gt;
  &lt;/a&gt;
  Collect core keywords
&lt;/h3&gt;

&lt;p&gt;A semantic core of a website is the collection of keywords that describes what you're selling and helps gain top search results. You describe your website by these core keywords.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://ahrefs.com/blog/keyword-research/"&gt;How to Do Keyword Research for SEO by Ahrefs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://moz.com/keyword-research-guide"&gt;The SEO Keyword Research Master Guide by Moz&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.semrush.com/blog/keyword-research-guide-for-seo/"&gt;The 2021 Keyword Research Guide for SEO by SEMrush&lt;/a&gt; 
&lt;a href="https://www.searchenginejournal.com/keyword-research-seo-beginners-guide/379386/"&gt;- How to Do Keyword Research for SEO: A Step-by-Step Guide by Search Engine Journal
&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://mangools.com/blog/keyword-research/"&gt;Keyword research for SEO by Mangools&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://backlinko.com/keyword-research"&gt;Keyword Research: The Definitive Guide (2021) by Backlinko&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://ftf.agency/keyword-research-now/"&gt;How To Do Keyword Research in 2020 by Nick Eubank&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.semrush.com/academy/courses/keyword-research-course-with-greg-gifford"&gt;Keyword Research Course with Greg Gifford by SEMrush&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.youtube.com/watch?v=ek0yCkmfVuM"&gt;Keyword Research for SEO Today: Guide, Steps, Tips, Tools, Mistakes and more! by Crawling Mondays&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#keyword-mapping"&gt;
  &lt;/a&gt;
  Keyword mapping
&lt;/h3&gt;

&lt;p&gt;Keyword mapping is the process of breaking down a list of keywords into semantic clusters that allows you to distribute them between your site's pages. This can help avoid keyword cannibalization, which occurs when several pages on one website compete for the same words in search results.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://riseatseven.com/blog/keyword-mapping-guide/"&gt;A beginner’s guide to keyword mapping (with template)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.semrush.com/blog/guide-keyword-mapping-improve-seo-content/"&gt;A Four-Step Guide on Keyword Mapping To Improve Your SEO and Content Strategy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.digitalthirdcoast.com/blog/create-successful-keyword-mapping-strategy"&gt;How to Create a Successful Keyword Mapping Strategy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.aleydasolis.com/en/search-engine-optimization/keyword-mapping-cheatsheet/"&gt;The Keywords Mapping Cheatsheet For Different Types of Sites [with a Google Sheets Included] &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.searchenginejournal.com/keyword-mapping-seo-success/388082/"&gt;How to Leverage Keyword Mapping for SEO Success&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-onpage-seo-optimisation"&gt;
  &lt;/a&gt;
  2. On-page SEO optimisation 📈
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#install-a-web-analytics-tool-and-set-up-your-goals"&gt;
  &lt;/a&gt;
  Install a web analytics tool and set up your goals
&lt;/h3&gt;

&lt;p&gt;Web analytics tools track how many visitors your website is receiving and what these users are doing on the site. To measure performance, you need to set goals for different user actions (such as registrations or transactions). Goals help define marketing strategies by identifying key objectives that can be adjusted over time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://moz.com/blog/smart-seo-goals"&gt;How Do You Set Smart SEO Goals for Your Team/Agency/Project? by Moz
&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://databox.com/how-to-set-seo-goals"&gt;How to Set SEO Goals for Your Team (That Actually Drive Action) by Elise Dopson
&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.kevin-indig.com/blog/the-roi-of-seo-how-to-predict-traffic-and-revenue/"&gt;The ROI of SEO – how to predict traffic and revenue by Kevin Indig
&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.searchenginejournal.com/set-achieve-realistic-seo-goals/288839/"&gt;How to Set &amp;amp; Achieve Realistic SEO Goals by Search Engine Journal&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.botify.com/blog/seo-okrs"&gt;OKRs for SEO: How to Set SEO Goals That Increase Your Value &amp;amp; Get You Greater Investment by Botify
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#add-your-website-to-google-search-console"&gt;
  &lt;/a&gt;
  Add your website to Google Search Console
&lt;/h3&gt;

&lt;p&gt;Google Search Console is a free tool that tracks website rankings and helps reveal indexed pages. It also shows errors on the site, which can give insight into how to improve it for search engines to rank it higher.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://search.google.com/search-console/about"&gt;Google Search Console Coverage, URL Inspection &amp;amp; Crawl Stats Reports by Google
&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://search.google.com/search-console/about"&gt;Google Search Console Performance Report by Google&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#register-a-local-business-on-google-maps"&gt;
  &lt;/a&gt;
  Register a local business on Google Maps
&lt;/h3&gt;

&lt;p&gt;Google Maps is a useful tool for finding local businesses. To show up on Google Maps, you must complete the registration process by filling out all necessary information and verifying that your business exists in real life. Doing so will boost your visibility within search results relevant to users of certain areas, which should lead to increased website traffic from people looking at those specific regions who are interested in what you're selling!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.google.com/business/"&gt;Google My Business by Google&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.brightlocal.com/free-local-seo-tools/"&gt;BrightLocal's Free Local SEO Tools: Local Listings Health Scanner, Local Search Results Checker, and more! by BrightLocal&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gsuite.google.com/marketplace/app/%F0%9F%A4%96_postamatic/460920737213"&gt;Postamatic: Build your Google My Business Posts, Q + As, and manage GMB Reviews via the Google My Business API by Two Octobers + AgencyAutomaters&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#create-a-logical-site-structure"&gt;
  &lt;/a&gt;
  Create a logical site structure
&lt;/h3&gt;

&lt;p&gt;The structure of the website is what determines how easy it is to find all pages on a site. Organizing each section, subsection, and page in an open-ended way makes it easier for bots that search engines use to crawl through your site and index every single one of its pages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://ahrefs.com/blog/internal-links-for-seo/"&gt;Internal Links for SEO: An Actionable Guide by Ahrefs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.kevin-indig.com/blog/internal-linking-the-full-guide-to-internal-link-axioms/"&gt;Internal Linking for SEO: best practices, strategies, axioms by Kevin Indig&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.semrush.com/blog/internal-links-guide-to-building-strategy-that-works/"&gt;Internal Links: A Guide to Building a Strategy that Works by SEMrush&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://backlinko.com/hub/seo/internal-links"&gt;Internal Linking Guide by Backlinko&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://sitebulb.com/resources/guides/internal-link-optimisation-for-seo/"&gt;Internal Link Optimisation for SEO by Sitebulb&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://yoast.com/internal-linking-for-seo-why-and-how/"&gt;Internal linking for SEO: Why and how? by Yoast&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#secure-the-website-by-migrating-it-to-https"&gt;
  &lt;/a&gt;
  Secure the website by migrating it to HTTPS
&lt;/h3&gt;

&lt;p&gt;HTTPS protocol is an extension of the HTTP developed for safe communication. It's needed to maintain site security so no information such as visitor actions or their contact details are retrievable. The presence of this HTTPS has been influential in Google search rankings since 2014, and its influence on these rankings will likely grow over time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#define-the-preferred-domain-www-or-nonwww"&gt;
  &lt;/a&gt;
  Define the preferred domain (www or non-www)
&lt;/h3&gt;

&lt;p&gt;Search engines will see example.com and example.com as separate pages, so defining the preferred domain is useful in avoiding page duplication since it allows you to specify which one should be indexed by search engines first if both are found on a website's link list or sitemap file for instance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-robotstxt-file"&gt;
  &lt;/a&gt;
  Create a robots.txt file
&lt;/h3&gt;

&lt;p&gt;When building a website, the robots.txt file is used to tell search engine crawlers which pages are and aren't indexed on our site. For example, we wouldn't want any sensitive information or internal documents being crawled as it could cause damage if they were viewed publicly; therefore, these specific pages should be blocked from access by bots for them not to appear on Google Search results.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-an-xml-sitemap"&gt;
  &lt;/a&gt;
  Create an XML sitemap
&lt;/h3&gt;

&lt;p&gt;The sitemap.xml file is a document in the Extensible Markup Language (XML) that lists all of your website's URLs to help search engine robots index them faster. Sitemaps are used on websites where content changes frequently or has lots of pages and helps Google find those quickly so their users can have better browsing experiences with minimal time waiting for results.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/search/docs/advanced/sitemaps/overview"&gt;Learn about sitemaps by Google&lt;/a&gt; 
&lt;a href="https://backlinko.com/hub/seo/sitemaps"&gt;XML Sitemaps by Backlinko&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.oncrawl.com/oncrawl-seo-thoughts/optimize-xml-sitemap/"&gt;How to Optimize Your XML Sitemap to Improve Your SEO by OnCrawl
&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.semrush.com/blog/xml-sitemap/"&gt;How to Create an XML Sitemap: Tips &amp;amp; Best Practices by SEMRush&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.searchenginejournal.com/xml-sitemap-best-practices/237649/"&gt;How to Optimize XML Sitemaps: 13 SEO Best Practices by Search Engine Journal&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#set-a-language-with-hreflang-attribute"&gt;
  &lt;/a&gt;
  Set a language with .hreflang attribute
&lt;/h3&gt;

&lt;p&gt;The hreflang attribute is used to define a website's language or regional URL in case the site has translated versions. This tells Google what URLs to display for specific regions and which version of your content they should index during crawls.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/search/docs/advanced/crawling/managing-multi-regional-sites"&gt;Managing multi-regional and multilingual sites by Google&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.onely.com/blog/ultimate-guide-to-international-seo/"&gt;The Ultimate Guide to International SEO by Onely&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.slideshare.net/aleydasolis/international-seo-for-ecommerce-websites-sejlive-sejesummit"&gt;International SEO for E-Commerce Websites by Aleyda Solis&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.semrush.com/blog/7-ways-to-fail-at-international-seo/"&gt;7 Ways to Fail at International SEO by Aleyda Solis&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.aleydasolis.com/en/search-engine-optimization/avoiding-hreflang-issues-by-following-a-6-steps-implementation-process/"&gt;An Hreflang Implementation Guide: How to add and Implement Hreflang Tags by Aleyda Solis&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#create-seofriendly-urls"&gt;
  &lt;/a&gt;
  Create SEO-friendly URLs
&lt;/h3&gt;

&lt;p&gt;The SEO-friendly URL is more readable and includes keywords that are recognized by search engine robots. This has a positive effect on the page’s ranking because it helps both users and bots understand what they can find on this webpage quickly. For example: /seo-checklist vs. /xn-sEoChecKListeX123534098/. /seo-checklist/ is the type of friendly URL you want to aim for.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-breadcrumb-navigation"&gt;
  &lt;/a&gt;
  Use breadcrumb navigation
&lt;/h3&gt;

&lt;p&gt;Breadcrumbs show a user how they moved around between the pages on your website so that he/she does not get lost. They are also helpful to search engines as it clarifies the hierarchy of all webpages, and can be shown in snippets within SERPs (Search Engine Results Pages).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improve-your-seo-with-userfriendly-interlinking"&gt;
  &lt;/a&gt;
  Improve your SEO with user-friendly interlinking
&lt;/h3&gt;

&lt;p&gt;The purpose of internal links is to make a website more navigable and structured. They can direct the user towards other parts of the site, establish information hierarchy by pointing out what content comes first or last in an article, spread link weight across pages that are related so it does not all rest on one page alone (this enhances search engine optimization), and ultimately give your online presence authority.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://ahrefs.com/blog/internal-links-for-seo/"&gt;Internal Links for SEO: An Actionable Guide by Ahrefs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.kevin-indig.com/blog/internal-linking-the-full-guide-to-internal-link-axioms/"&gt;Internal Linking for SEO: best practices, strategies, axioms by Kevin Indig&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.semrush.com/blog/internal-links-guide-to-building-strategy-that-works/"&gt;Internal Links: A Guide to Building a Strategy that Works by SEMrush&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://backlinko.com/hub/seo/internal-links"&gt;Internal Linking Guide by Backlinko&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://sitebulb.com/resources/guides/internal-link-optimisation-for-seo/"&gt;Internal Link Optimisation for SEO by Sitebulb&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://yoast.com/internal-linking-for-seo-why-and-how/"&gt;Internal linking for SEO: Why and how? by Yoast&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#check-http-status-codes"&gt;
  &lt;/a&gt;
  Check HTTP status codes
&lt;/h3&gt;

&lt;p&gt;When a web browser requests information from the server, it receives an HTTP status code in response. These codes are divided into classes and tell browsers if everything goes well or not; they let you know whether all pages of your website function as expected. Search engines may lower rankings for websites with many incorrect responses that have wrong status codes since this signals to them there is something suspicious going on at these sites--they're probably trying to hide their low-quality content by sending back fake statuses instead of real ones!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-canonical-urls"&gt;
  &lt;/a&gt;
  Use Canonical URLs
&lt;/h3&gt;

&lt;p&gt;Duplicate content is a problem for websites that want to appear unique in search engines. A canonical tag tells robots which page they should index and rank higher, so you can avoid the penalty of duplicate pages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-the-markup-validity-of-web-documents-in-html"&gt;
  &lt;/a&gt;
  Check the markup validity of web documents in HTML
&lt;/h3&gt;

&lt;p&gt;The validity of your website's HTML code is extremely important in terms of search engine optimization. If it contains a lot of errors, such as deprecated tags or misspelled words, then this can damage how well the website ranks on Google and other major search engines.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fix-broken-links"&gt;
  &lt;/a&gt;
  Fix broken links
&lt;/h3&gt;

&lt;p&gt;Broken links are detrimental to the user experience, and as a result, they can hurt your website's signals that search engine robots look at. When non-working links discourage users from exploring further on your site, it means an error for search engines. If there is a great number of such errors, then this tells them you have low-quality content which will affect their overall rankings in results.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mind-the-number-of-outbound-links"&gt;
  &lt;/a&gt;
  Mind the number of outbound links
&lt;/h3&gt;

&lt;p&gt;If a website has too many irrelevant links, search engines may consider it spam. For this reason, the site's rankings in search results might plummet significantly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-404-error-page"&gt;
  &lt;/a&gt;
  Create a 404 error page
&lt;/h3&gt;

&lt;p&gt;Non-existing pages can occur when a page is redirected, deleted, renamed. All such non-existent pages should be sent to the 404 status code which will inform users what happened and how they need to overcome it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improve-the-page-load-speed"&gt;
  &lt;/a&gt;
  Improve the page load speed
&lt;/h3&gt;

&lt;p&gt;One of the most influential Google ranking factors is page load speed. It refers to how long it takes for a webpage's content and images to show up after loading on the website, which can dramatically impact whether users choose your site or another one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://web.dev/vitals/"&gt;Core Web Vitals by web.dev
&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://builtvisible.com/googles-page-experience-update-and-core-web-vitals-everything-you-need-to-know/"&gt;Google’s Page Experience Update and Core Web Vitals: Everything you need to know by Builtvisible
&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://kinsta.com/learn/page-speed/"&gt;A Beginner’s Guide to Website Speed Optimization by Kinsta
&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://seosly.com/google-page-experience-audit/"&gt;Google Page Experience Audit (15 Steps + Free Audit Template) by Olga Zarzeczna
&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hallanalysis.com/2020/10/27/optimizing-for-performance-in-seo-and-speed/"&gt;Optimizing For Performance in SEO and Speed by Joe Hall&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-mobile-optimisation"&gt;
  &lt;/a&gt;
  3. Mobile optimisation 📱
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#create-a-responsive-version-of-your-website"&gt;
  &lt;/a&gt;
  Create a responsive version of your website
&lt;/h3&gt;

&lt;p&gt;Most of the traffic these days comes from mobile devices. Roughly 60/70% of web visitors, visit your website on a mobile device. That is why Google started using a Mobile-first type of indexing. This means that Google cares more about your mobile site than your desktop version. Making sure your website works great on mobile is one of the most important factors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/search/mobile-sites"&gt;Mobile Optimization Guidelines by Google&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/search/mobile-sites/mobile-first-indexing"&gt;Mobile-first indexing best practices by Google&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://backlinko.com/mobile-seo-guide"&gt;Mobile SEO: The Definitive Guide by Backlinko&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.slideshare.net/aleydasolis/mobile-first-seo-at-wceu"&gt;Mobile First SEO by Aleyda Solis&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://yoast.com/mobile-seo-ultimate-guide/"&gt;Mobile SEO: The ultimate guide by Yoast&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://trafficthinktank.com/preparing-for-googles-mobile-only-index/"&gt;Preparing for Google’s Mobile-Only Index by Patrick Hathaway&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.semrush.com/academy/courses/mobile-seo-course-with-greg-gifford"&gt;Mobile SEO Course with Greg Gifford by SEMRush&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-content-strategy"&gt;
  &lt;/a&gt;
  4. Content strategy ✏️
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#write-unique-titles-for-each-page"&gt;
  &lt;/a&gt;
  Write unique titles for each page
&lt;/h3&gt;

&lt;p&gt;The title tag is the essential part of web page coding that determines a website's ranking on search engine result pages (SERPs). While it only takes up to 70 characters, being able to optimize your titles can make or break you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#write-unique-meta-descriptions-for-each-page"&gt;
  &lt;/a&gt;
  Write unique meta descriptions for each page
&lt;/h3&gt;

&lt;p&gt;Meta descriptions are snippets of content that appear in the search engines as a preview of your page. They're also an opportunity for you to tell users what they'll find on your site and whether it's relevant to their query or intent about landing pages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/search/docs/guides/search-gallery"&gt;Google's Search Gallery by Google&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://moz.com/learn/seo/serp-features"&gt;What is a SERP Feature? Appearance, description and obtainability﻿ by Moz&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://komarketing.com/blog/understanding-google-serp-features-complete-guide/"&gt;Understanding Google SERP Features in 2021: The Complete Guide by Komarketing&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ignitevisibility.com/serp-features/"&gt;Ultimate Guide to Google SERP Features by John E Lincoln
&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.rankranger.com/google-serp-features-guide"&gt;Visual Guide to Google SERP Features by RankRanger&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.accuranker.com/blog/how-you-can-use-serp-features-to-boost-traffic"&gt;How You Can Use SERP Features to Boost Traffic by Accuranker&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#optimise-htags"&gt;
  &lt;/a&gt;
  Optimise H-tags
&lt;/h3&gt;

&lt;p&gt;The HTML headings in a website are important because they give search engines an indication of what the page is about. There are six different levels to choose from, all with varying degrees of importance when it comes to SEO (search engine optimization). Keywords should be distributed evenly throughout each level as this will show Google which keywords deserve more weight than others and allow them to rank accordingly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-alt-tags-on-every-image"&gt;
  &lt;/a&gt;
  Use alt tags on every image
&lt;/h3&gt;

&lt;p&gt;The alt attribute or alt tag is an HTML attribute for a text that describes an image in detail. It must be placed directly in the image tag and not as a separate link like title tags. Alt tags help search engines quickly get a better understanding of what’s illustrated on an image, users who might otherwise have difficulty viewing images, especially those with disabilities because it will read out to them what's described on each picture that has this feature which also helps people understand why they should click into something if pictures are explaining how things work instead of just words alone whereas screen readers use these descriptions when images aren't displayed at all due to technical difficulties, etc...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/search/docs/advanced/guidelines/google-images"&gt;Google Images best practices by Google&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.searchenginejournal.com/on-page-seo/image-optimization/"&gt;11 Important Image SEO Tips You Need to Know by Search Engine Journal&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ahrefs.com/blog/image-seo/"&gt;Image SEO: 12 Actionable Tips (for More Organic Traffic) by Ahrefs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.contentkingapp.com/academy/image-seo/"&gt;Image SEO: the Ultimate Guide by ContentKing&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.iloveseo.net/how-to-optimize-your-ecommerce-for-google-images-and-visual-search/"&gt;How to optimize your Ecommerce for Google Images and Visual Search by Gianluca Fiorelli&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#optimise-content-both-for-crawlers-and-people"&gt;
  &lt;/a&gt;
  Optimise content both for crawlers and people
&lt;/h3&gt;

&lt;p&gt;Search engine robots have the user's best interest in mind. They like it when content is original and valuable, which means that keywords should be included naturally in a piece of writing instead of being stuffed into sentences just to tick boxes on an SEO checklist.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/search/docs/advanced/crawling/large-site-managing-crawl-budget"&gt;Large site owner's guide to managing your crawl budget by Google
&lt;/a&gt;  - &lt;a href="https://www.contentkingapp.com/academy/crawl-budget/"&gt;Crawl budget explained by ContentKing&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.onely.com/blog/ultimate-guide-crawl-budget/"&gt;The Ultimate Guide to Crawl Budget Optimization by Onely&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://yoast.com/crawl-budget-optimization/"&gt;How to optimize your crawl budget by Yoast&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.deepcrawl.com/blog/best-practice/optimize-crawl-budget-tips-examples/"&gt;An SEO’s Guide to Crawl Budget Optimisation by Deepcrawl&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.botify.com/blog/crawl-budget-optimization"&gt;All About Crawl Budget Optimization (&amp;amp; How One Site Used It to Double Organic Traffic in Under 3 Months) by Botify&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.searchenginejournal.com/technical-seo/crawl-budget/"&gt;7 Tips to Optimize Crawl Budget for SEO by Search Engine Journal&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#create-fresh-content"&gt;
  &lt;/a&gt;
  Create fresh content
&lt;/h3&gt;

&lt;p&gt;As a website owner, it is important to look at your user intent and demand so that you can meet their expectations. You need eye-catching content with relevant information for the reader to attract them as they surf through various websites online.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#develop-a-content-plan"&gt;
  &lt;/a&gt;
  Develop a content plan
&lt;/h3&gt;

&lt;p&gt;The content plan is a list of pieces that will be published on the site to help it rank higher. The updates play an important role because they work alongside SEO and make sure what's being shared online isn't just about promotion but also relevant information for users. It helps streamline the publication process by keeping track of upcoming web pages so there aren’t any delays or overlaps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-a-blog-to-your-website"&gt;
  &lt;/a&gt;
  Add a blog to your website
&lt;/h3&gt;

&lt;p&gt;Using a blog to attract, engage and convert users is important for any marketing strategy. Blogs are also an overlooked way of improving your website's search engine rankings (SERP).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-offpage-seo-optimisation"&gt;
  &lt;/a&gt;
  5. Off-page SEO optimisation 🚀
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#check-quantity-and-quality-of-sites-backlinks"&gt;
  &lt;/a&gt;
  Check quantity and quality of site's backlinks
&lt;/h3&gt;

&lt;p&gt;Backlinks from different web sources to our website play a significant role in how the site ranks on search engine results. It's important to have both quantity and quality backlinks when it comes to SEO, since having too much of one or not enough of another will impact your link profile negatively.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#analyse-your-competitors-backlinks"&gt;
  &lt;/a&gt;
  Analyse your competitors' backlinks
&lt;/h3&gt;

&lt;p&gt;To understand what a backlink profile should look like, it's important to research competitors that rank highly in the SERPs.&lt;/p&gt;

&lt;p&gt;Competitor research is an integral part of a link-building strategy. Analyzing competitor backlinks helps you get insight into how your website can improve its ranking on Google search results pages. It also enables you to see exactly where opponents are gaining all their links and learn from them so that your site doesn't make similar mistakes when trying to gain rankings yourself!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-link-building-strategy"&gt;
  &lt;/a&gt;
  Create a link building strategy
&lt;/h3&gt;

&lt;p&gt;A link-building strategy is a process of prioritizing your website's links to help you get more backlinks and compete with top-ranking competitors. This may depend on how many backlinks you currently have, along with those from high competition sites'&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://moz.com/beginners-guide-to-link-building"&gt;The Beginner's Guide to Link Building by Moz&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ahrefs.com/blog/link-building/"&gt;The Beginner’s Guide to Link Building by Ahrefs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://backlinko.com/link-building"&gt;Link Building for SEO: The Definitive Guide (2021) by Backlinko&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://smart.linkresearchtools.com/linkthing/link-building/golden-rules-link-building"&gt;7 Golden Rules of Link Building for 2021 and beyond by Christoph Cemper&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://mangools.com/blog/link-building-techniques-checklist/"&gt;60+ link building techniques checklist [2021 update] by Paddy Moogan&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.aira.net/link-building-book/"&gt;The Link Building Book by Gisele Navarro&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#collaborate-with-websites-by-sharing-relevant-content-within-the-industry-or-niche"&gt;
  &lt;/a&gt;
  Collaborate with websites by sharing relevant content within the industry or niche
&lt;/h3&gt;

&lt;p&gt;One of the most important factors to consider when looking for backlinks is if your host website has a related topic. If it does, then you should exchange guest posts with them because they would be more valuable than on an authoritative site unrelated to yours. That means you should do exchanges and write guest blogs at resources popular in your targeted niche!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://neomam.com/blog/link-prospecting/"&gt;How to Find Sites That Will Want to Link to Your Content by Gisele Navarro&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#participate-in-niche-forum-discussions-and-answer-the-questions"&gt;
  &lt;/a&gt;
  Participate in niche forum discussions and answer the questions
&lt;/h3&gt;

&lt;p&gt;Users who are potentially interested in some product or service often search for relevant forums where they can find fresh information and reviews. Participation on the forum creates content, which helps websites rank higher in Google's results pages as well as increasing traffic to a website. Q&amp;amp;A platforms (Yahoo Answers, Quora) not only provide interesting answers about different topics but also help increase brand awareness and attract targeted users back to your site.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#encourage-users-to-write-reviews-about-your-product-or-service"&gt;
  &lt;/a&gt;
  Encourage users to write reviews about your product or service
&lt;/h3&gt;

&lt;p&gt;You can choose to use a review aggregator, where the user's opinion about services/products is shared and it will impact your decision whether or not you should try out that service/product. Search engines evaluate mentions of reviews for websites impacted by local SEO in particular.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-images-videos-and-documents-for-website-promotion"&gt;
  &lt;/a&gt;
  Use images, videos, and documents for website promotion
&lt;/h3&gt;

&lt;p&gt;With the growing number of tools to create shareable multimedia content, businesses need to understand how these media can be best optimized and integrated into their overall SEO strategy. We will look at some common types of sharable files as well as a few tips on optimizing them properly to maximize search visibility. The key to efficient use lies in maximizing search visibility with proper optimizations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-social-media-strategy"&gt;
  &lt;/a&gt;
  6. Social media strategy 🧑🏾‍🤝‍🧑🏾
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#learn-the-social-signals-model-of-your-industry"&gt;
  &lt;/a&gt;
  Learn the social signals model of your industry
&lt;/h3&gt;

&lt;p&gt;Social media shares increase the visibility of a page and its user engagement metrics which leads to an increase in the SERP ranking. Before starting any social media campaign, define what sort of content will strike a chord for your particular business segment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aim-to-create-viral-content"&gt;
  &lt;/a&gt;
  Aim to create viral content
&lt;/h3&gt;

&lt;p&gt;To drive additional traffic to your website, you should grow a strong social account on Facebook, Twitter, and Pinterest. Social accounts can help increase search engine rankings by engaging in positive interactions with the users who share links for relevant content that matches what is listed under "content."&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-social-media-buttons-to-your-website"&gt;
  &lt;/a&gt;
  Add social media buttons to your website
&lt;/h3&gt;

&lt;p&gt;The fact that you have influential accounts on Twitter, Facebook, and Pinterest will inevitably attract a lot of people to your website. These platforms are also great for increasing the search engine rankings of your site!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-the-open-graph-protocol-for-social-media-posts"&gt;
  &lt;/a&gt;
  Use the Open Graph protocol for social media posts
&lt;/h3&gt;

&lt;p&gt;Interested in learning how to share your content with the world via social media? Open Graph is a protocol that allows you to control the way it looks when shared on Facebook. It is a meta tags structure for each post headline, description, and preview so that they attract more clicks and shares!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this post can help you a bit! I will keep this post updated when I find newer or better links that are relevant to these steps. Consider following me on Twitter or subscribing to my newsletter in order to stay up to date!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to Use MongoDB With Laravel</title>
      <author>Shahed Nasser</author>
      <pubDate>Thu, 26 Aug 2021 06:49:39 +0000</pubDate>
      <link>https://dev.to/shahednasser/how-to-use-mongodb-with-laravel-4n6o</link>
      <guid>https://dev.to/shahednasser/how-to-use-mongodb-with-laravel-4n6o</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally posted on &lt;a href="https://blog.shahednasser.com/how-to-use-mongodb-with-laravel/"&gt;my personal blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://laravel.com"&gt;Laravel&lt;/a&gt; is a popular PHP framework that has been around for a long time now. With Laravel, you can easily build web apps, APIs, and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com"&gt;MongoDB&lt;/a&gt; is a popular NoSQL database that has also been popular for a while now. With MongoDB, you can build databases that are collections of JSON-like documents.&lt;/p&gt;

&lt;p&gt;Laravel is usually used with relational databases like MySQL and provides easy interfaces, facades, and methods to access, insert, update and delete the data in it.&lt;/p&gt;

&lt;p&gt;Laravel does not come with native support for MongoDB. In order to use MongoDB with Laravel, some configurations and libraries are required to successfully integrate the two.&lt;/p&gt;

&lt;p&gt;In this tutorial, we'll learn how to integrate MongoDB with Laravel. We'll create a simple blog with authentication and posts management.&lt;/p&gt;

&lt;p&gt;You can find the code for this tutorial on &lt;a href="https://github.com/shahednasser/laravel-mongodb-tutorial"&gt;this GitHub Repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#required"&gt;
  &lt;/a&gt;
  Required
&lt;/h3&gt;

&lt;p&gt;Before going through the tutorial, make sure you have the following installed on your machine:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.php.net/downloads.php"&gt;PHP&lt;/a&gt; &amp;gt;= 7.3&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getcomposer.org/download/"&gt;Composer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mongodb.com/try/download/community"&gt;MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, you need to install &lt;a href="https://docs.mongodb.com/drivers/php/"&gt;MongoDB's PHP extension&lt;/a&gt;. You can do so with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pecl install mongodb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're running on a Mac OS with Apple M1 and you get an error about &lt;code&gt;pcre2.h&lt;/code&gt;, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cp /opt/homebrew/Cellar/pcre2/10.36/include/pcre2.h /opt/homebrew/Cellar/php\@7.*/7.*.*/include/php/ext/pcre/pcre2.h
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where &lt;code&gt;7.*&lt;/code&gt; and &lt;code&gt;7.*.*&lt;/code&gt; depend on your PHP version installed.&lt;/p&gt;

&lt;p&gt;These dependencies are essential for development. So, make sure you have them all installed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optional"&gt;
  &lt;/a&gt;
  Optional
&lt;/h3&gt;

&lt;p&gt;The following are not required, but are optional to be able to follow with the article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://blog.shahednasser.com/use-mingo-to-easily-manage-your-mongodb-databases/"&gt;Mingo&lt;/a&gt;, a software that allows you to easily manage and view the MongoDB databases on a server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#create-laravel-website"&gt;
  &lt;/a&gt;
  Create Laravel Website
&lt;/h2&gt;

&lt;p&gt;In your terminal, run the following command to create a new Laravel website:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer create-project laravel/laravel laravel-mongodb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, change to the directory of the website you just created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd laravel-mongodb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try to start the server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan serve
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If everything is ok, the website will be available at &lt;code&gt;localhost:8000&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-integration-library"&gt;
  &lt;/a&gt;
  Install Integration Library
&lt;/h2&gt;

&lt;p&gt;In order to integrate MongoDB with Laravel, we need to use the package &lt;a href="https://github.com/jenssegers/laravel-mongodb"&gt;jenssegers/mongodb&lt;/a&gt;. So, we'll install it with Composer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer require jenssegers/mongodb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configure-the-connection"&gt;
  &lt;/a&gt;
  Configure the Connection
&lt;/h2&gt;

&lt;p&gt;After installing the library, we need to configure the connection to our MongoDB server.&lt;/p&gt;

&lt;p&gt;Make sure that your MongoDB server is running. Then, go to &lt;code&gt;.env&lt;/code&gt; in your Laravel project and update the following keys:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DB_CONNECTION=mongodb
DB_HOST=127.0.0.1
DB_PORT=27017
DB_DATABASE=blog
DB_USERNAME=
DB_PASSWORD=
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that we're using the default values for &lt;code&gt;DB_HOST&lt;/code&gt; and &lt;code&gt;DB_PORT&lt;/code&gt; for a local MongoDB server.&lt;/p&gt;

&lt;p&gt;Make sure to add &lt;code&gt;DB_USERNAME&lt;/code&gt; and &lt;code&gt;DB_PASSWORD&lt;/code&gt; based on your MongoDB username and password. If you don't have any, then you can leave it empty.&lt;/p&gt;

&lt;p&gt;Next, open &lt;code&gt;config/database.php&lt;/code&gt; and add the following inside the array of the &lt;code&gt;connections&lt;/code&gt; key:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'connections' =&amp;gt; [
    ....,
    'mongodb' =&amp;gt; [
      'driver' =&amp;gt; 'mongodb',
      'host' =&amp;gt; env('DB_HOST', '127.0.0.1'),
      'port' =&amp;gt; env('DB_PORT', 27017),
      'database' =&amp;gt; env('DB_DATABASE', 'blog'),
      'username' =&amp;gt; env('DB_USERNAME', ''),
      'password' =&amp;gt; env('DB_PASSWORD', '')
    ],
],
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all that we need to do to create the connection between MongoDB and Laravel.&lt;/p&gt;

&lt;p&gt;To test it out, we can migrate the default migrations that come with a Laravel project and see if the database will be created in MongoDB:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the connection was done correctly, the migrations will run successfully with no errors.&lt;/p&gt;

&lt;p&gt;To check that the database and collections have been created successfully, you can go to your MongoDB server whether by using the command line/terminal or using a GUI like &lt;a href="https://blog.shahednasser.com/use-mingo-to-easily-manage-your-mongodb-databases/"&gt;Mingo&lt;/a&gt;. You'll see that the database has been created successfully with the necessary collections.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#change-the-models"&gt;
  &lt;/a&gt;
  Change the Models
&lt;/h2&gt;

&lt;p&gt;By default, Laravel uses &lt;a href="https://laravel.com/docs/8.x/eloquent"&gt;Eloquent&lt;/a&gt; for all its models. As Eloquent does not support MongoDB, we need to change the class that our models extend. The class is provided from the package &lt;code&gt;jenssegers/mongodb&lt;/code&gt; that we installed earlier. It allows us to use our models and access data just like we would when using MySQL or other supported databases.&lt;/p&gt;

&lt;p&gt;Currently, we only have one model, which is the &lt;code&gt;User&lt;/code&gt; model. Go to &lt;code&gt;app/Models/User.php&lt;/code&gt; and change the class it extends by changing the &lt;code&gt;Authenticatable&lt;/code&gt; class used at the beginning of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Jenssegers\Mongodb\Auth\User as Authenticatable;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the &lt;code&gt;User&lt;/code&gt; is a model that can undergo authentication like registering and logging in, it should extend &lt;code&gt;Jenssegers\Mongodb\Auth\User&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The next change we need to make is related to casting dates. In order to use dates as Carbon objects, add the following inside the &lt;code&gt;User&lt;/code&gt; class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; /**
   * The attributes that should be cast to native types.
   *
   * @var array
   */
protected $dates = ['email_verified_at'];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all that is required to make a model compatible with both Laravel's Eloquent and MongoDB. We'll see in the next sections how we can access, add, modify and delete the data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-authentication"&gt;
  &lt;/a&gt;
  Add Authentication
&lt;/h2&gt;

&lt;p&gt;We'll add authentication to our website to allow users to register and log in. To do this and save time on creating the authentication forms and routes, we'll use &lt;a href="https://laravel.com/docs/8.x/starter-kits#laravel-breeze"&gt;Laravel's Breeze&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Breeze provides sleek-looking authentication forms using &lt;a href="https://tailwindcss.com"&gt;Tailwind CSS&lt;/a&gt; and &lt;a href="https://alpinejs.dev"&gt;AlpineJS&lt;/a&gt;. You don't need to know either to go through the tutorial.&lt;/p&gt;

&lt;p&gt;The next few parts of the tutorial that are related to installing and configuring Breeze are optional. If you're not interested in following this part of the tutorial you can skip it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-breeze"&gt;
  &lt;/a&gt;
  Install Breeze
&lt;/h3&gt;

&lt;p&gt;First, we'll install Breeze:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan breeze:install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we need to install the required NPM dependencies and compile the Breeze assets:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install &amp;amp;&amp;amp; npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! Now, we'll have nice-looking authentication forms and routes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-authentication"&gt;
  &lt;/a&gt;
  Testing Authentication
&lt;/h3&gt;

&lt;p&gt;Start the server if it isn't already started and go to &lt;code&gt;localhost:8000/register&lt;/code&gt;. You'll see a registration form that includes the basic user fields required by default in Laravel.&lt;/p&gt;

&lt;p&gt;Try creating a user. You'll then be redirected to &lt;code&gt;localhost:8000/dashboard&lt;/code&gt;, which is the default in Breeze.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changing-default-route"&gt;
  &lt;/a&gt;
  Changing Default Route
&lt;/h3&gt;

&lt;p&gt;By default, Breeze redirects authenticated users to the route &lt;code&gt;/dashboard&lt;/code&gt;. We'll change it to the home page.&lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;routes/web.php&lt;/code&gt; and change the content to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::get('/', [PostController::class, 'home'])-&amp;gt;middleware(['auth'])-&amp;gt;name('home');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when the user goes to &lt;code&gt;localhost:8000&lt;/code&gt; and they're not logged in, they will be redirected to the sign-in form. If they're logged in, they can access the blog.&lt;/p&gt;

&lt;p&gt;Next, create the controller that will handle this request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan make:controller PostController
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the controller, add the following method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function home() {
    return view('home');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will just return the view &lt;code&gt;home&lt;/code&gt;. This view is actually now named &lt;code&gt;dashboard.blade.php&lt;/code&gt; and it's in &lt;code&gt;resources/views&lt;/code&gt;. So, rename it to &lt;code&gt;home.blade.php&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, change the link for the home page in the navigation by replacing &lt;code&gt;route('dashboard')&lt;/code&gt; in &lt;code&gt;resources/views/layouts/navigation.blade.php&lt;/code&gt; with &lt;code&gt;route('home')&lt;/code&gt; everywhere it's used. Additionally, replace texts that have &lt;code&gt;Dashboard&lt;/code&gt; in them with &lt;code&gt;Home&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, change the route that should be redirected to when the user is authenticated in &lt;code&gt;app/Providers/RouteServiceProvider.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public const HOME = '/';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you try to access the website on &lt;code&gt;localhost:8000&lt;/code&gt;, if you're still logged in you'll see the page we saw earlier after signing up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implement-crud-operations"&gt;
  &lt;/a&gt;
  Implement CRUD Operations
&lt;/h2&gt;

&lt;p&gt;In this section, we'll see how to create a new model that's compatible with MongoDB and perform Create, Read, Update and Delete (CRUD) operations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-the-migration"&gt;
  &lt;/a&gt;
  Create the Migration
&lt;/h3&gt;

&lt;p&gt;First, create the migration which will create a new &lt;code&gt;posts&lt;/code&gt; collection in the database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan make:migration create_posts_table
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create the migration file &lt;code&gt;database/migration/YEAR_MONTH_DAY_TIME_create_posts_table&lt;/code&gt;, where &lt;code&gt;YEAR&lt;/code&gt;, &lt;code&gt;MONTH&lt;/code&gt;, &lt;code&gt;DAY&lt;/code&gt;, and &lt;code&gt;TIME&lt;/code&gt; depend on when you create this migration.&lt;/p&gt;

&lt;p&gt;Open the file and inside the &lt;code&gt;up&lt;/code&gt; method, change the code to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Schema::create('posts', function (Blueprint $table) {
      $table-&amp;gt;id();
      $table-&amp;gt;string('title');
      $table-&amp;gt;longText('content');
      $table-&amp;gt;foreignId('user_id')-&amp;gt;constrained('users')-&amp;gt;cascadeOnDelete()-&amp;gt;cascadeOnUpdate();
      $table-&amp;gt;timestamps();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a collection where documents inside will have the fields &lt;code&gt;_id&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;content&lt;/code&gt;, &lt;code&gt;user_id&lt;/code&gt; which will act as a foreign key towards the &lt;code&gt;users&lt;/code&gt; table, and timestamps fields like &lt;code&gt;created_at&lt;/code&gt; and &lt;code&gt;updated_at&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Run the following to execute the migration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will add a new collection &lt;code&gt;posts&lt;/code&gt; in your database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-the-model"&gt;
  &lt;/a&gt;
  Create the Model
&lt;/h3&gt;

&lt;p&gt;Next, we'll create the &lt;code&gt;Post&lt;/code&gt; model for the &lt;code&gt;posts&lt;/code&gt; table. Run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan make:model Post
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we did with the &lt;code&gt;User&lt;/code&gt; model, we need to change the class the model extends. For &lt;code&gt;User&lt;/code&gt;, we used &lt;code&gt;Jenssegers\Mongodb\Auth\User&lt;/code&gt; as the model was authenticatable.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Post&lt;/code&gt; model is not authenticatable. So, it will just extend the class &lt;code&gt;Jenssegers\Mongodb\Eloquent\Model&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At the beginning of &lt;code&gt;app/Models/Post.php&lt;/code&gt; change the class &lt;code&gt;Model&lt;/code&gt; used to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Jenssegers\Mongodb\Eloquent\Model;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the class, add the following to define the model's fields:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;protected $fillable = [
    'title',
    'content',
    'user_id'
];

protected $dates = ['created_at', 'updated_at'];

public function user () {
    return $this-&amp;gt;belongsTo(User::class);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have set the fillable fields to be &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;content&lt;/code&gt;, and &lt;code&gt;user_id&lt;/code&gt;. We've also set the dates to be &lt;code&gt;created_at&lt;/code&gt; and &lt;code&gt;updated_at&lt;/code&gt;. Finally, we've added a &lt;code&gt;belongsTo&lt;/code&gt; relationship between &lt;code&gt;Post&lt;/code&gt; and &lt;code&gt;User&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#show-posts"&gt;
  &lt;/a&gt;
  Show Posts
&lt;/h3&gt;

&lt;p&gt;We'll add a blade component that will be used to display posts. Create the file &lt;code&gt;resources/views/components/post.blade.php&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="bg-white overflow-hidden shadow-sm sm:rounded-lg"&amp;gt;
 &amp;lt;div class="p-6 bg-white border-b border-gray-200"&amp;gt;
   &amp;lt;h1 class="text-xl md:text-2xl"&amp;gt;{{ $post['title']}}&amp;lt;/h1&amp;gt;
   &amp;lt;p class="my-2"&amp;gt;{{ $post['content'] }}&amp;lt;/p&amp;gt;
   &amp;lt;small class="text-gray-500"&amp;gt;{{ $post['user']['name'] }} - {{ $post['created_at'] }}&amp;lt;/small&amp;gt;
 &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're just showing the title, content, name of the user, and the date the post is created.&lt;/p&gt;

&lt;p&gt;Next, we'll change the home page to display all posts, if there are any.&lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;resources/views/home.blade.php&lt;/code&gt; and change the content to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;x-app-layout&amp;gt;
  &amp;lt;x-slot name="header"&amp;gt;
    &amp;lt;h2 class="font-semibold text-xl text-gray-800 leading-tight"&amp;gt;
      {{ __('Home') }}
    &amp;lt;/h2&amp;gt;
  &amp;lt;/x-slot&amp;gt;

  &amp;lt;div class="py-12"&amp;gt;
    &amp;lt;div class="max-w-7xl mx-auto sm:px-6 lg:px-8"&amp;gt;
      @empty($posts)
        &amp;lt;div class="bg-white overflow-hidden shadow-sm sm:rounded-lg"&amp;gt;
          &amp;lt;div class="p-6 bg-white border-b border-gray-200"&amp;gt;
            There are no posts
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      @endempty

      @foreach ($posts as $post)
        @component('components.post', ['post' =&amp;gt; $post])
        @endcomponent
      @endforeach
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/x-app-layout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if there are any posts, they'll be each displayed as cards. If there aren't any, the message "There are no posts" will be shown.&lt;/p&gt;

&lt;p&gt;Finally, we need to pass the &lt;code&gt;$posts&lt;/code&gt; variable from the controller to the view. Change the &lt;code&gt;home&lt;/code&gt; method to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function home() {
    $posts = Post::with(['user'])-&amp;gt;get();
    return view('home', ['posts' =&amp;gt; $posts-&amp;gt;toArray()]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are able to read data from our MongoDB database the same way we would with the MySQL database, using the same Eloquent methods.&lt;/p&gt;

&lt;p&gt;If you try opening the blog now, you'll see that the message "there are no posts is showing."&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-and-update-a-post"&gt;
  &lt;/a&gt;
  Create and Update a Post
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Create Post&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We'll create a form that allows the logged-in user to create a post.&lt;/p&gt;

&lt;p&gt;First, add the route in &lt;code&gt;web/routes.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::get('/posts/create', [PostController::class, 'createForm'])-&amp;gt;middleware(['auth'])-&amp;gt;name('post.form');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, add the &lt;code&gt;createForm&lt;/code&gt; method in &lt;code&gt;PostController&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function createForm() {
    return view('post_form');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, create the view file &lt;code&gt;resources/view/post_form.blade.php&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;x-app-layout&amp;gt;
 &amp;lt;x-slot name="header"&amp;gt;
   &amp;lt;h2 class="font-semibold text-xl text-gray-800 leading-tight"&amp;gt;
     {{ isset($post) ? __('Edit Post') :__('Create Post') }}
   &amp;lt;/h2&amp;gt;
 &amp;lt;/x-slot&amp;gt;

 &amp;lt;div class="py-12"&amp;gt;
   &amp;lt;div class="max-w-7xl mx-auto sm:px-6 lg:px-8"&amp;gt;
    &amp;lt;div class="bg-white overflow-hidden shadow-sm sm:rounded-lg"&amp;gt;
     &amp;lt;div class="p-6 bg-white border-b border-gray-200"&amp;gt;

      &amp;lt;!-- Session Status --&amp;gt;

      &amp;lt;x-auth-session-status class="mb-4" :status="session('status')" /&amp;gt;

      &amp;lt;!-- Validation Errors --&amp;gt;

      &amp;lt;x-auth-validation-errors class="mb-4" :errors="$errors" /&amp;gt;

      &amp;lt;form method="POST" action="{{ route('post.save') }}"&amp;gt;
       @csrf
       @if (isset($post))
        &amp;lt;input type="hidden" name="id" value="{{ $post-&amp;gt;_id }}" /&amp;gt;
       @endif
       &amp;lt;div&amp;gt;
        &amp;lt;x-label for="title" :value="__('Title')" /&amp;gt;
        &amp;lt;x-input id="title" class="block mt-1 w-full" type="text" name="title" :value="old('title') ?: (isset($post) ? $post-&amp;gt;title : '')" required autofocus /&amp;gt;
       &amp;lt;/div&amp;gt;
       &amp;lt;div class="mt-3"&amp;gt;
        &amp;lt;x-label for="content" :value="__('Content')" /&amp;gt;
        &amp;lt;textarea id="content" name="content" class="block mt-1 w-full rounded-md shadow-sm border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" rows="5"&amp;gt;{{ old('content') ?: (isset($post) ? $post-&amp;gt;content : '') }}&amp;lt;/textarea&amp;gt;
       &amp;lt;/div&amp;gt;
       &amp;lt;div class="flex items-center justify-end mt-4"&amp;gt;
        &amp;lt;x-button&amp;gt;
          {{ __('Save') }}
        &amp;lt;/x-button&amp;gt;
       &amp;lt;/div&amp;gt;
      &amp;lt;/form&amp;gt;
     &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
   &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
&amp;lt;/x-app-layout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that we're making the form ready for editing as well (which we'll go over later). The form has 2 fields, &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;content&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our form is now ready, the last thing we need to do is add a link to it in the navigation bar. In &lt;code&gt;resources/views/layouts/navigation.blade.php&lt;/code&gt; add the following under the link for "Home":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;x-nav-link :href="route('post.form')" :active="request()-&amp;gt;routeIs('post.form')"&amp;gt;
     {{ __('Create Post') }}
 &amp;lt;/x-nav-link&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you go on the website now, you'll see a new link in the navigation bar for "Create Post".&lt;/p&gt;

&lt;p&gt;Go to that page. You'll see the form we created which has the 2 fields we mentioned.&lt;/p&gt;

&lt;p&gt;Next, we need to implement the post method that will handle saving the post.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;routes/web.php&lt;/code&gt;, add the following new route:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::post('/posts/create', [PostController::class, 'save'])-&amp;gt;middleware(['auth'])-&amp;gt;name('post.save');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, add the &lt;code&gt;save&lt;/code&gt; method in &lt;code&gt;PostController&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function save(Request $request) {

    Validator::validate($request-&amp;gt;all(), [
      'id' =&amp;gt; 'nullable|exists:posts,_id',
      'title' =&amp;gt; 'required|min:1',
      'content' =&amp;gt; 'required|min:1'
    ]);

    /** @var User $user */
    $user = Auth::user();
    $id = $request-&amp;gt;get('id');

    if ($id) {
      $post = Post::query()-&amp;gt;find($id);
      if ($post-&amp;gt;user-&amp;gt;_id !== $user-&amp;gt;_id) {
        return redirect()-&amp;gt;route('home');
      }
    } else {
      $post = new Post();
      $post-&amp;gt;user()-&amp;gt;associate($user);
    }

    $post-&amp;gt;title = $request-&amp;gt;get('title');
    $post-&amp;gt;content = $request-&amp;gt;get('content');

    $post-&amp;gt;save();

    return redirect()-&amp;gt;route('home');
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this method, we're first validating the fields that are required, which are &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;content&lt;/code&gt;. We're also validating &lt;code&gt;id&lt;/code&gt; which will be passed only when the post is being edited. So, it can be nullable, but when it's available, it should exist in the &lt;code&gt;posts&lt;/code&gt; collection in the field &lt;code&gt;_id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Suggested Read: &lt;a href="https://blog.shahednasser.com/beginners-guide-to-validation-in-laravel/"&gt;Beginner’s Guide to Validation in Laravel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, if the post is being edited, we're validating that the user editing this post is actually the user that created it. The post's user can be easily accessed through the relationship we defined in the class.&lt;/p&gt;

&lt;p&gt;Finally, we're creating or updating the post, setting the title, content, and user creating it. Then, we redirect back home.&lt;/p&gt;

&lt;p&gt;You can now try adding a post. Open the form and enter a title and content, then click Save. If everything is done correctly, you'll be redirected to the home page and you can see the new post added.&lt;/p&gt;

&lt;p&gt;You can also check on your MongoDB server if the new post has been added successfully.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit Post&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As mentioned earlier, the form is ready to be used for editing a post.&lt;/p&gt;

&lt;p&gt;We'll add an edit button for posts that will allow the user to edit a post.&lt;/p&gt;

&lt;p&gt;First, create the file &lt;code&gt;resources/views/components/edit.blade.php&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"&amp;gt;
 &amp;lt;path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" /&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This component is just an edit icon from &lt;a href="https://heroicons.com"&gt;Heroicons&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, we'll use this icon to add an edit button. Change &lt;code&gt;resources/views/components/post.blade.php&lt;/code&gt; to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="bg-white overflow-hidden shadow-sm sm:rounded-lg"&amp;gt;
 &amp;lt;div class="p-6 bg-white border-b border-gray-200"&amp;gt;
   &amp;lt;h1 class="text-xl md:text-2xl"&amp;gt;{{ $post['title']}}&amp;lt;/h1&amp;gt;
   &amp;lt;p class="my-2"&amp;gt;{{ $post['content'] }}&amp;lt;/p&amp;gt;
   &amp;lt;small class="text-gray-500"&amp;gt;{{ $post['user']['name'] }} - {{ $post['created_at'] }}&amp;lt;/small&amp;gt;
   @if(\Auth::user()-&amp;gt;_id === $post['user']['_id'])
    &amp;lt;a href="{{ route('post.edit.form', ['id' =&amp;gt; $post['_id']]) }}" class="inline-block align-middle pb-1 text-decoration-none text-gray-600"&amp;gt;
     @component('components.edit')
     @endcomponent
    &amp;lt;/a&amp;gt;
   @endif
 &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will add the link to edit the post only when the post belongs to the current user.&lt;/p&gt;

&lt;p&gt;Next, add a new route to go to the form and edit the post:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::get('/posts/{id}/edit', [PostController::class, 'editForm'])-&amp;gt;middleware(['auth'])-&amp;gt;name('post.edit.form');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, add the method &lt;code&gt;editForm&lt;/code&gt; in &lt;code&gt;PostController&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function editForm(Request $request, $id) {
    $post = Post::query()-&amp;gt;find($id);
    if (!$post) {
      return redirect()-&amp;gt;route('home');
    }
    return view('post_form', ['post' =&amp;gt; $post]);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all we need to add to be able to edit a post. Try opening the website and clicking on the edit icon for any of the posts. It will take you to the same post form, but with the values filled.&lt;/p&gt;

&lt;p&gt;Try making edits to the post and click save. You'll be redirected to the home page and you can see the post has been updated.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#delete-post"&gt;
  &lt;/a&gt;
  Delete Post
&lt;/h3&gt;

&lt;p&gt;The last thing we need to add is the ability to delete a post.&lt;/p&gt;

&lt;p&gt;Create the file &lt;code&gt;resources/views/components/delete.blade.php&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"&amp;gt;
 &amp;lt;path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similar to the edit button, we're creating a component for a delete icon to use for the button.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;resources/views/components/post.blade.php&lt;/code&gt; add the following after the edit link:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form method="POST" action="{{ route('post.delete') }}" class="inline-block align-middle"&amp;gt;
    @csrf
    &amp;lt;input type="hidden" name="id" value="{{ $post['_id'] }}" /&amp;gt;
    &amp;lt;button type="submit" class="border-0 bg-transparent text-red-400"&amp;gt;
        @component('components.delete')
        @endcomponent
    &amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, add a new route in &lt;code&gt;routes/web.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::post('/posts/delete', [PostController::class, 'delete'])-&amp;gt;middleware(['auth'])-&amp;gt;name('post.delete');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, create the &lt;code&gt;delete&lt;/code&gt; method in &lt;code&gt;PostController&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function delete(Request $request) {
    Validator::validate($request-&amp;gt;all(), [
      'id' =&amp;gt; 'exists:posts,_id'
    ]);

    $post = Post::query()-&amp;gt;find($request-&amp;gt;get('id'));
    $post-&amp;gt;delete();

    return redirect()-&amp;gt;route('home');
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, we're validating that the ID is sent in the request and that it's a post that exists. Then, we're deleting the post.&lt;/p&gt;

&lt;p&gt;Notice how to delete we can use the same eloquent methods we use in Laravel.&lt;/p&gt;

&lt;p&gt;For simplicity, we're omitting the validation check to make sure that the post belongs to the logged-in user.&lt;/p&gt;

&lt;p&gt;Go to the home page now. You'll see a delete icon next to each post. Try clicking on one of them. You'll be redirected back to the home page and the post will be deleted.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this tutorial, we were able to connect a Laravel website to a MongoDB server. As we saw, the integration is simple and seamless.&lt;/p&gt;

&lt;p&gt;Even with the integration, you can use Eloquent models like you would when using other supported databases.&lt;/p&gt;

&lt;p&gt;More can be done with &lt;code&gt;jenssegers/mongodb&lt;/code&gt; package. You can try adding to the website we created a search bar or advanced search with filters. Make sure to check out the documentation of the package, as well.&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>mongodb</category>
      <category>php</category>
      <category>tutorial</category>
    </item>
    <item>
      <title> PE featured in LA WEEKLY </title>
      <author>perpetual . education</author>
      <pubDate>Thu, 26 Aug 2021 06:24:27 +0000</pubDate>
      <link>https://dev.to/perpetual_edu/pe-featured-in-la-weekly-4n7a</link>
      <guid>https://dev.to/perpetual_edu/pe-featured-in-la-weekly-4n7a</guid>
      <description>&lt;p&gt;(from the article)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#try-something-new-perpetual-education-is-the-best-online-programming-and-design-school"&gt;
  &lt;/a&gt;
  Try Something New: Perpetual Education Is The Best Online Programming And Design School
&lt;/h2&gt;

&lt;p&gt;One of the more exciting new schools in this space is &lt;a href="https://perpetual.education"&gt;Perpetual Education&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Perpetual Education popped in 2021, right here in Los Angeles. They believe that the future will require designers with a broader knowledge and understanding of the entire design process.&lt;/p&gt;

&lt;p&gt;Their flagship course, “Design for The Web” (DFTW) is a 6-month online design and programming mentorship. DFTW combines the best parts of a stepped college curriculum, boot camp pace, flexibility of a MOOC, and one-on-one meetings with the instructor.&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;




&lt;p&gt;Read the whole thing here: &lt;a href="https://www.laweekly.com/best-online-programming-and-design-school"&gt;https://www.laweekly.com/best-online-programming-and-design-school&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Importing metadata from the AWS Glue data catalog into Apache Atlas with EMR</title>
      <author>Christopher Thompson H.</author>
      <pubDate>Thu, 26 Aug 2021 06:22:52 +0000</pubDate>
      <link>https://dev.to/aws-builders/importing-metadata-from-the-aws-glue-data-catalog-into-apache-atlas-with-emr-4h8k</link>
      <guid>https://dev.to/aws-builders/importing-metadata-from-the-aws-glue-data-catalog-into-apache-atlas-with-emr-4h8k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-going-to-be-implemented"&gt;
  &lt;/a&gt;
  What is going to be implemented
&lt;/h2&gt;

&lt;p&gt;We will implement Apache Atlas through the AWS EMR service by connecting the Hive catalog directly to the Glue service, being able to dynamically classify your data and see the lineage of your data as it goes through different processes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8bwn8TWK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bsxohqzl3jq6omwzeb5g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8bwn8TWK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bsxohqzl3jq6omwzeb5g.png" alt="architecture of reference"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#presentation-of-services-to-use"&gt;
  &lt;/a&gt;
  Presentation of services to use
&lt;/h2&gt;

&lt;p&gt;Amazon EMR is a managed service that simplifies the implementation of big data frameworks like Apache Hadoop and Spark. If you are using Amazon EMR, you can choose from a predefined set of applications or choose your own from the list.&lt;/p&gt;

&lt;p&gt;The Apache Atlas project is a set of core governance services that enables companies to effectively and efficiently meet their compliance requirements with the entire enterprise data ecosystem. Apache Atlas provides metadata governance and management capabilities for organizations to catalog their data assets, classify and control these assets, and provide collaboration capabilities internally. In other words, help teams make the cycle of their own data transparent. For this reason, it is important in some business or architectural solutions to have these mechanisms of transparency and governance of their own data, in order to make the most of the knowledge of their data, through predictions in different ways. For example, market predictions, customer safety sessions, generation of impact campaigns, among many other ways to take advantage of the behavior of your data.&lt;/p&gt;

&lt;p&gt;Of the many features that Apache Atlas offers, the main feature of interest in this article is Apache Hive's data lineage and metadata management. After a successful Atlas setup, use native tools to import tables from Hive, analyze your data, and intuitively present your data lineage to your end users.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#implementation-steps"&gt;
  &lt;/a&gt;
  Implementation Steps
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-create-gluesettingsjson-configuration-file"&gt;
  &lt;/a&gt;
  1.- Create glue-settings.json configuration file
&lt;/h3&gt;

&lt;p&gt;The first thing we will need to do is create a .json file with the following structure on our local computer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Classification"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"hive-site"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"hive.metastore.client.factory.class"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-preparation-of-environment-in-aws-review-of-defaultemrrole-and-network-infrastructure"&gt;
  &lt;/a&gt;
  2.- Preparation of environment in AWS (Review of default_emr_role and network infrastructure)
&lt;/h3&gt;

&lt;p&gt;This step is important for when we launch an EMR for the first time through the AWS CLI, especially for our command that we will execute in the following steps. The reason for this step is that when you start an EMR cluster you need to assign it a role, however when you first create it, that role is automatically created with the name default_emr_role.&lt;/p&gt;

&lt;p&gt;This is easily solved by launching a test cluster through the AWS Management Console. When you launch the cluster for the first time through the console, it will automatically create the default_emr_role role for you, which you can use with the lifting of our original cluster.&lt;/p&gt;

&lt;p&gt;Then you can go directly to the IAM service and check if the default role is already created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KW8gTxdr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4g7cezu5xdnl4b1rlim.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KW8gTxdr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4g7cezu5xdnl4b1rlim.png" alt="IAM Roles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advanced tip:&lt;/strong&gt; If you want to implement Apache Atlas in a limited and productive scenario, you must create a new role with the least possible privilege for EMR, which will be the one you will use to execute the following steps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't forget to delete the test cluster that you used to create the role.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-prepare-parameters-to-create-and-run-emr-cluster"&gt;
  &lt;/a&gt;
  3.- Prepare parameters to create and run EMR cluster
&lt;/h3&gt;

&lt;p&gt;This step is important for the execution of the following code. The parameters to define are the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cluster_Name:&lt;/strong&gt; The name of the cluster you will need&lt;br&gt;
&lt;strong&gt;Instance_Type:&lt;/strong&gt; The type of family that each node will have&lt;br&gt;
&lt;strong&gt;Instance_Vol_Size:&lt;/strong&gt; The size of the EBS that is configured with the EMR&lt;br&gt;
&lt;strong&gt;Key_Name:&lt;/strong&gt; The name of the key pair created for the use and connection of this EMR&lt;br&gt;
&lt;strong&gt;Subnet_id:&lt;/strong&gt; The id of a subnet to use for this EMR&lt;br&gt;
&lt;strong&gt;S3_EMR_LOGDIR:&lt;/strong&gt; EMR machine log location&lt;/p&gt;

&lt;p&gt;In my case, the parameters that I will choose are the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CLUSTER_NAME=EMR-Atlas
INSTANCE_TYPE=m4.large
INSTANCE_VOL_SIZE=80
KEY_NAME=key-0a97d3c96668decaf
SUBNET_ID=subnet-09de17cf9eb1c56d3
S3_EMR_LOGDIR=s3://aws-logs-39483989-us-east-1/elasticmapreduce/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To obtain the subnet, you must go to the Amazon VPC service and obtain the ID of the subnet that you are going to use. You can also do it by command with the AWS CLI. For more information I leave you the following link: &lt;a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html"&gt;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-create-emr-cluster-with-aws-cli"&gt;
  &lt;/a&gt;
  4.- Create EMR Cluster with AWS CLI
&lt;/h3&gt;

&lt;p&gt;After having everything configured, the EMR cluster is created through the AWS CLI. It is important to note that these steps could be carried out through the AWS management console, decomposing the command according to the configuration options that are made from the interface. In my case, I find it easier to use the AWS CLI.&lt;/p&gt;

&lt;p&gt;The command with all our previously defined configurations would be the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws emr create-cluster &lt;span class="nt"&gt;--applications&lt;/span&gt; &lt;span class="nv"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Hive &lt;span class="nv"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;HBase &lt;span class="nv"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Hue &lt;span class="nv"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Hadoop &lt;span class="nv"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ZooKeeper &lt;span class="nt"&gt;--release-label&lt;/span&gt; emr-5.33.0 &lt;span class="nt"&gt;--instance-groups&lt;/span&gt;  &lt;span class="nv"&gt;InstanceGroupType&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;MASTER,InstanceCount&lt;span class="o"&gt;=&lt;/span&gt;1,InstanceType&lt;span class="o"&gt;=&lt;/span&gt;m4.large &lt;span class="nv"&gt;InstanceGroupType&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;CORE,InstanceCount&lt;span class="o"&gt;=&lt;/span&gt;1,InstanceType&lt;span class="o"&gt;=&lt;/span&gt;m4.large &lt;span class="nt"&gt;--use-default-roles&lt;/span&gt; &lt;span class="nt"&gt;--ebs-root-volume-size&lt;/span&gt; 80 &lt;span class="nt"&gt;--ec2-attributes&lt;/span&gt; &lt;span class="nv"&gt;KeyName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;apache-atlas,SubnetId&lt;span class="o"&gt;=&lt;/span&gt;subnet-0d95c4cdf3119f9ae &lt;span class="nt"&gt;--configurations&lt;/span&gt; file://./glue_settings.json &lt;span class="nt"&gt;--tags&lt;/span&gt; &lt;span class="nv"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;EMR-Atlas &lt;span class="nt"&gt;--name&lt;/span&gt; &lt;span class="s2"&gt;"EMR-Atlas"&lt;/span&gt; &lt;span class="nt"&gt;--steps&lt;/span&gt; &lt;span class="nv"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;CUSTOM_JAR,Jar&lt;span class="o"&gt;=&lt;/span&gt;command-runner.jar,ActionOnFailure&lt;span class="o"&gt;=&lt;/span&gt;TERMINATE_CLUSTER,Args&lt;span class="o"&gt;=&lt;/span&gt;bash,-c,&lt;span class="s1"&gt;'curl https://s3.amazonaws.com/aws-bigdata-blog/artifacts/aws-blog-emr-atlas/apache-atlas-emr.sh -o /tmp/script.sh; chmod +x /tmp/script.sh; /tmp/script.sh'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create an EMR cluster that you can monitor if you want from the AWS management console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-modify-importhivesh-script-in-emr-cluster"&gt;
  &lt;/a&gt;
  5.- Modify import-hive.sh script in EMR cluster
&lt;/h3&gt;

&lt;p&gt;When we have the cluster up and running, we must enter the cluster with any of the various possible forms of connection. In my case I use an SSH connection. If you want more information about the steps I leave you the following link: &lt;a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-connect-master-node.html"&gt;https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-connect-master-node.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you are already inside the cluster, you must execute the following commands in order:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo cp&lt;/span&gt; &lt;span class="nt"&gt;-ai&lt;/span&gt; /apache/atlas/bin/import-hive.sh&lt;span class="o"&gt;{&lt;/span&gt;,.org&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;sudo &lt;/span&gt;vim /apache/atlas/bin/import-hive.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This in order to modify the &lt;code&gt;import-hive.sh&lt;/code&gt; file. You could also use another editor that suits you other than vim.&lt;/p&gt;

&lt;p&gt;When you are inside the &lt;code&gt;import-hive.sh&lt;/code&gt; file, you must make the following changes:&lt;/p&gt;

&lt;p&gt;You will have to change this line of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;CP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ATLASCPPATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HIVE_CP&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HADOOP_CP&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;CP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ATLASCPPATH&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HIVE_CP&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HADOOP_CP&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:/usr/lib/hive/auxlib/aws-glue-datacatalog-hive2-client.jar"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the objective that Glue catalog to read directly to the base Atlas catalog.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-importing-the-glue-data-catalog-to-atlas"&gt;
  &lt;/a&gt;
  6.- Importing the Glue data catalog to Atlas
&lt;/h3&gt;

&lt;p&gt;Run the modified script to import the Glue metadata into Atlas.&lt;/p&gt;

&lt;p&gt;The user is &lt;code&gt;admin&lt;/code&gt; and the password is &lt;code&gt;admin&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;/apache/atlas/bin/import-hive.sh


Enter username &lt;span class="k"&gt;for &lt;/span&gt;atlas :- admin
Enter password &lt;span class="k"&gt;for &lt;/span&gt;atlas :-

2021-08-25T13:58:234,43 INFO &lt;span class="o"&gt;[&lt;/span&gt;main] org.apache.atlas.hive.bridge.HiveMetaStoreBridge - Successfully imported 5 tables from database aws_db
Hive Meta Data imported successfully!!!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this way you will have already imported the glue catalog into Atlas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advanced tip:&lt;/strong&gt; If you want to automate this catalog update you will have to run the &lt;code&gt;import-hive.sh&lt;/code&gt; shell file again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-connection-to-atlas"&gt;
  &lt;/a&gt;
  7.- Connection to Atlas
&lt;/h3&gt;

&lt;p&gt;Finally, you must build a tunnel locally from the EMR in order to build an endpoint to connect to the atlas interface. For this, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ssh"&gt;&lt;code&gt;&lt;span class="k"&gt;ssh&lt;/span&gt; -i apache-atlas.pem -vnNT -L &lt;span class="m"&gt;21000&lt;/span&gt;:localhost:21000 hadoop@&lt;span class="err"&gt;{&lt;/span&gt;ip_of_your_cluster&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this to connect to the interface you can access the following link:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="http://localhost:21000"&gt;http://localhost:21000&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The login screen will be displayed as shown below: Login with the password &lt;code&gt;admin&lt;/code&gt; and user &lt;code&gt;admin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LypgtvzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5771paum4phna5mkfni.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LypgtvzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5771paum4phna5mkfni.png" alt="Apache Atlas login"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Already inside the interface, if you search for hive_table you will find the information of your glue catalog:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nuDo49g6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7p9ob0p7zwjkslwt1t92.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nuDo49g6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7p9ob0p7zwjkslwt1t92.png" alt="Apache Atlas interfaces"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#references-links"&gt;
  &lt;/a&gt;
  References Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://atlas.apache.org/#/"&gt;https://atlas.apache.org/#/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html"&gt;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://aws.amazon.com/jp/blogs/news/metadata-classification-lineage-and-discovery-using-apache-atlas-on-amazon-emr/"&gt;https://aws.amazon.com/jp/blogs/news/metadata-classification-lineage-and-discovery-using-apache-atlas-on-amazon-emr/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-connect-master-node.html"&gt;https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-connect-master-node.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-what-is-emr.html"&gt;https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-what-is-emr.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aws</category>
      <category>architecture</category>
      <category>cloud</category>
      <category>government</category>
    </item>
    <item>
      <title>JavaScript Promises The Easy Way👨‍🎓🤓.</title>
      <author>Lokesh_Choudhary</author>
      <pubDate>Thu, 26 Aug 2021 05:55:03 +0000</pubDate>
      <link>https://dev.to/lokeshchoudharylc/javascript-promises-the-easy-way-41a5</link>
      <guid>https://dev.to/lokeshchoudharylc/javascript-promises-the-easy-way-41a5</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-a-promise-in-javascript"&gt;
  &lt;/a&gt;
  What is a Promise in JavaScript:
&lt;/h1&gt;

&lt;h6&gt;
  &lt;a href="#definition-by-mdn"&gt;
  &lt;/a&gt;
  &lt;em&gt;Definition by MDN:&lt;/em&gt;
&lt;/h6&gt;

&lt;p&gt;&lt;em&gt;A Promise is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a promise to supply the value at some point in the future.&lt;/em&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#sourcemdn-link-here"&gt;
  &lt;/a&gt;
  Source(MDN): &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;Link Here&lt;/a&gt;
&lt;/h6&gt;

&lt;h4&gt;
  &lt;a href="#thanks-for-reading-i-hope-now-you-now-understand-everything"&gt;
  &lt;/a&gt;
  Thanks for reading, I hope now you now understand everything.
&lt;/h4&gt;

&lt;p&gt;What, No? Didn't Understand.&lt;/p&gt;

&lt;p&gt;No problem that why I am here writing this beautiful article for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-literal-meaning-of-a-promise"&gt;
  &lt;/a&gt;
  The literal meaning of a promise.
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Your parents promised you to buy a new computer, but on a condition that you have to get good grades in school&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In our real life this is a meaning of a Promise, So it highly depends that you could get a new computer or couldn't if you didn't get good grades in school and even if you did well in exams until the results come the promise from your parent will be in a pending state.  &lt;/p&gt;

&lt;p&gt;Just like that in JavaScript Programming a Promise has three states:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Pending:&lt;br&gt;
&lt;em&gt;You will either get new computer or not.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fulfilled/Resolved:&lt;br&gt;
&lt;em&gt;You will get a new computer for sure.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rejected:&lt;br&gt;
&lt;em&gt;Sorry, you will not get a new computer.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#now-enough-for-the-example-lets-get-started-with-some-coding"&gt;
  &lt;/a&gt;
  Now enough for the example lets get started with some coding🤩💻.
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HzUr9o_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ielny44dfj5w2t1cydw7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HzUr9o_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ielny44dfj5w2t1cydw7.png" alt="code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So what is happening is this code example is that, I have assigned a boolean value &lt;code&gt;goodGrades&lt;/code&gt; and also in some real world cases this could be a external fetch request you are making to get some data or any other function for which you are not sure to get a result that's why you use a Promise.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;goodGrades&lt;/code&gt; is true you the Promise will resolve or otherwise if false the Promise will reject and give the specified Error (reason).&lt;/p&gt;

&lt;p&gt;Also you can chain a Promise with &lt;code&gt;then()&lt;/code&gt; and &lt;code&gt;catch()&lt;/code&gt; or put in a &lt;code&gt;try catch&lt;/code&gt; block.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So this is the most basic way I could found to explain JavaScript Promises.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading.
&lt;/h3&gt;

&lt;p&gt;This is my first post here, feedbacks are appreciated.&lt;/p&gt;

&lt;p&gt;And also about what topic should I write next?&lt;br&gt;
More on JavaScript?&lt;br&gt;
Backend with NodeJs/ExpressJs?&lt;br&gt;
Databases?&lt;br&gt;
Or Anything else.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Demystifying state management</title>
      <author>Kevin Pennekamp</author>
      <pubDate>Thu, 26 Aug 2021 05:52:21 +0000</pubDate>
      <link>https://dev.to/crinklesio/demystifying-state-management-2c1c</link>
      <guid>https://dev.to/crinklesio/demystifying-state-management-2c1c</guid>
      <description>&lt;p&gt;State management is one of the most complicated, and opinionated topics in modern and JavaScript-focused front-end development. But before diving in, what is state? State, in all its different forms, is nothing more than values we use to determine what to show towards our users and what behavior we allow. That is it. A global or application state is nothing more than a (complex) JavaScript object accessible from our UI code. We can read from it and we can change it. When we change it, we see the change or effect from the change reflected on the screen. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-states"&gt;
  &lt;/a&gt;
  Types of states
&lt;/h2&gt;

&lt;p&gt;Let's discuss the different types first. Many say they manage their state on a global level, using packages like Redux. But, people often forget that they use different types of states as well, even when they don't know it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D_CC_-tW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bevl72hukm3zfjlzmm6o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D_CC_-tW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bevl72hukm3zfjlzmm6o.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Local&lt;/strong&gt;: state that is used by a single UI component.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Shared&lt;/strong&gt;: state that is used by many UI components. It is often managed in a parent or wrapper component. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Global&lt;/strong&gt;: a special kind of &lt;em&gt;shared&lt;/em&gt; state, as it lives on the highest level, accessible to all UI components (or even helper functions). &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Meta&lt;/strong&gt;: also known as 'state about state'. It tells you something about &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Route&lt;/strong&gt;: state stored in the current URL of the application (e.g. object IDs or pagination information).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Remote&lt;/strong&gt;: a copy of the data coming from a server. The responses of fetch requests are stored as 1-on-1 copies in this state. It should not deviate from the server (except when applying &lt;a href="https://www.smashingmagazine.com/2016/11/true-lies-of-optimistic-user-interfaces/"&gt;optimistic UI&lt;/a&gt;). &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The above image is coming from a &lt;a href="https://github.com/crinklesio/reference-architecture"&gt;reference architecture&lt;/a&gt; from client-side applications. It is only used to visualize the different types.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You don't have to manage these types of states all by yourself, most of the time. Many packages can be used to help you around. When looking at the React eco-system, packages like Redux (global), &lt;a href="https://swr.vercel.app/"&gt;SWR&lt;/a&gt; (remote), React Router (route, ), and &lt;a href="https://react-query.tanstack.com/"&gt;React-Query&lt;/a&gt; (remote), are all good examples of packages that do a lot for you. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#eventdriven"&gt;
  &lt;/a&gt;
  Event-driven
&lt;/h2&gt;

&lt;p&gt;The best-known state management pattern is the flux pattern. It gained popularity with the 'Redux' package. It is a great example of an event-driven pattern. Let's take a closer look at its flow. The user, via the view, dispatches an action, via an action creator. The dispatched action is nothing more than a simple JavaScript object describing the type, and the payload. It is an &lt;em&gt;event&lt;/em&gt;. Within the store, many different reducers act upon the dispatched &lt;em&gt;event&lt;/em&gt; and change the content of the store. The view queries the store to display the correct information to the user. When changes happen, the store notifies the view.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N33N6ZEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xa0exqvu0q9y708fbjz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N33N6ZEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xa0exqvu0q9y708fbjz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A core concept within this pattern is the &lt;em&gt;reducer&lt;/em&gt; pattern. A reducer is a function that takes a state object and action as input and returns a state object. Based on the action, it determines how to change the state for the output. This is often achieved by using a switch statement. But it can also be achieved using a &lt;em&gt;strategy&lt;/em&gt; pattern. A big benefit of the strategy pattern is that each 'case' is a separate function. Makes variable naming inside a complex reducer a lot easier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;action1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;action2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;strategies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;EVENT_1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;EVENT_2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;__default__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reduce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;strategies&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;strategies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__default__&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Event-driven state management is related to &lt;a href="https://statecharts.dev/"&gt;state machines&lt;/a&gt;. State machines allow us to model state more , in a way that can be visualized. Below is an example of a state machine for an animated toast message. This toast message should disappear after X seconds. Implementing something like this is easy when already using reducers. By adding if-statements, we can guard state changes: "You can do action X if we are in state Y". &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N33N6ZEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xa0exqvu0q9y708fbjz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N33N6ZEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xa0exqvu0q9y708fbjz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#atomic"&gt;
  &lt;/a&gt;
  Atomic
&lt;/h2&gt;

&lt;p&gt;Most event-driven solutions go for a single global store. The atom pattern does it differently. Instead of having a single global state, we have many different global states of single values. The popularity of this pattern rose with the introduction of Recoil from Facebook. This pattern is often seen as easier. Because everything is a single value, you don't have the overarching boilerplate of action creators, actions, events, etc. You just have a global value, and when you change it, your application re-renders. &lt;/p&gt;

&lt;p&gt;Another benefit is its &lt;em&gt;decoupled&lt;/em&gt; nature. When using a single store, you have to register the structure, default values, etc. in a single place. You cannot modularize your code. With atoms, you can define them where ever you want. Lastly, atoms can be combined (in most implementations). This means you can use atoms in other atoms. When an underlying atom changes, the parent atom changes as well. You don't have to worry about re-render or listening, it is all managed for you. &lt;/p&gt;

&lt;p&gt;It does have some downsides. When the number of atoms grows, managing them can become a hassle. You have to name them all, and you have to be aware that they exist. Also, managing a complex structure of dependencies between atoms can become quite a task for developers. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reactivity-and-proxies"&gt;
  &lt;/a&gt;
  Reactivity and proxies
&lt;/h2&gt;

&lt;p&gt;Many modern front-end frameworks are &lt;em&gt;reactive&lt;/em&gt;. When a state changes, the framework knows that it should re-render. Or in other words, the state lets the framework knows it changed. This mental model is very like a &lt;em&gt;proxy&lt;/em&gt;. A proxy is a wrapper object that is being called, instead of accessing the targeted object . This allows us to add custom behavior to various calls. &lt;/p&gt;

&lt;p&gt;Proxies are ideal to create reactive and robust state management. The basic power lays in the fact that we can add listeners to state changes. Besides, the values of a proxy can directly be changed. You do not have to invoke the change via a function. If you want to create a more complex proxy, you could implement validators that validate changes before applying a state change. You could even add several layers of 'middleware' before each state change. You can go nuts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Count updated:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;count&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Count updated: 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code snippet above shows an example proxy. As you can see, we add a &lt;code&gt;listener&lt;/code&gt; function for when the value of &lt;code&gt;count&lt;/code&gt; changes. Now when we change the value of &lt;code&gt;count&lt;/code&gt;, the &lt;code&gt;listener&lt;/code&gt; function is triggered. Do note that this particular implementation is not &lt;em&gt;immutable&lt;/em&gt;. You can change the value . Many people prefer to have an immutable state, as it is less prone to development errors. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;Now you should have a better understanding of some fundamentals of state management. Knowing the different types of state and how to manage state is the start. With proper state management, you can get a long way in complex web applications. But it is the start. There are many (more) ways to manage data that are important in client-side applications. When you master state, go dive into persistent storage or caching.    &lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Python Collections: Hackerrank Question on Counter</title>
      <author>Kathan Vakharia</author>
      <pubDate>Thu, 26 Aug 2021 05:49:09 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/python-collections-hackerrank-question-on-counter-80i</link>
      <guid>https://dev.to/kathanvakharia/python-collections-hackerrank-question-on-counter-80i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-question"&gt;
  &lt;/a&gt;
  The Question
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.hackerrank.com/challenges/word-order/problem"&gt;https://www.hackerrank.com/challenges/word-order/problem&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You are given &lt;em&gt;n&lt;/em&gt; words. Some words may repeat. For each word, output its number of occurrences. The output order should correspond with the input order of appearance of the word.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-approach"&gt;
  &lt;/a&gt;
  The Approach
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;store the words as they come in the Counter. &lt;/li&gt;
&lt;li&gt;print them.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;🧾 I hope you remember, &lt;code&gt;Counter&lt;/code&gt; after python 3.7 internally maintains insertion order.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;

&lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;#n -&amp;gt; no of words
&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;#
&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>python</category>
      <category>hackerrank</category>
      <category>counter</category>
    </item>
    <item>
      <title>5 VS Code Extensions which I use extensively[2021]🤩</title>
      <author>Shyamal Joshi</author>
      <pubDate>Thu, 26 Aug 2021 05:35:45 +0000</pubDate>
      <link>https://dev.to/shyamaljoshi/5-vs-code-extensions-which-i-use-extensively-2a8i</link>
      <guid>https://dev.to/shyamaljoshi/5-vs-code-extensions-which-i-use-extensively-2a8i</guid>
      <description>&lt;p&gt;What are the &lt;strong&gt;Extensions&lt;/strong&gt; in VScode 🤔? Actually without VScode Extensions life way so boring🥱.Extensions provides you more productivity as a Developer. So see listed Extensions and download it and use it. Thank me latter😁.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1live-server"&gt;
  &lt;/a&gt;
  1.Live Server:
&lt;/h2&gt;

&lt;p&gt;I think this is the most basic extension every web developer must use and most of you already have this extension.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lnq89eN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6fxqj8j1kpfhrf7j2n5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lnq89eN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6fxqj8j1kpfhrf7j2n5.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;Install the Extension by clicking here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2auto-close-tag"&gt;
  &lt;/a&gt;
  2.Auto Close Tag
&lt;/h2&gt;

&lt;p&gt;Oh dude it's too boring to add closing tags😣, and sometimes we got stuck in the hierarchy if we don't close tag but now Auto Close Tag Extension is here for us😎&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F7HhN2wC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jg5rxkl2y6qtibppxf0e.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F7HhN2wC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jg5rxkl2y6qtibppxf0e.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag"&gt;Install the Extension by clicking here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3prettier-formatter-for-visual-studio-code"&gt;
  &lt;/a&gt;
  3.Prettier Formatter for Visual Studio Code:
&lt;/h2&gt;

&lt;p&gt;Did you ever noticed that your code doesn't have proper hierarchy and for that reason even you yourself don't able to debug the code. Trust me its a very bad nightmare 😖.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HxtiVh3C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/df2t1qcxwywvjuzcojk2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HxtiVh3C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/df2t1qcxwywvjuzcojk2.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode&amp;amp;ssr=false#overview"&gt;Install the Extension by clicking here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4bracket-pair-colorizer-2"&gt;
  &lt;/a&gt;
  4.Bracket Pair Colorizer 2:
&lt;/h2&gt;

&lt;p&gt;This is also a good extension for the same hierarchy problem, By using this extension you can colorize your bracket pairs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WmKviAle--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gy853m1p7ewf9y1jaclg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WmKviAle--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gy853m1p7ewf9y1jaclg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2"&gt;Install the Extension by clicking here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5auto-rename-tag"&gt;
  &lt;/a&gt;
  5.Auto Rename Tag:
&lt;/h2&gt;

&lt;p&gt;Guys we are at our last extension as the name suggest this extension , If you rename your any one of tag then automatically this tag will rename the other tag also.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1DkwN-GB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4s8wh4jn1lqzkwqskmgm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1DkwN-GB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4s8wh4jn1lqzkwqskmgm.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;Install the Extension by clicking here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>Little TV Series Survey using pure HTML, CSS and Javascript
for practicing those technologies.</title>
      <author>R0land013</author>
      <pubDate>Thu, 26 Aug 2021 03:52:53 +0000</pubDate>
      <link>https://dev.to/r0land013/little-tv-series-survey-using-pure-html-css-and-javascript-for-practicing-those-technologies-2g60</link>
      <guid>https://dev.to/r0land013/little-tv-series-survey-using-pure-html-css-and-javascript-for-practicing-those-technologies-2g60</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hello everybody!&lt;/strong&gt; I feel so happy because I have just&lt;br&gt;
created my second web page using pure &lt;strong&gt;HTML&lt;/strong&gt;, &lt;strong&gt;CSS&lt;/strong&gt; and &lt;strong&gt;Javascript&lt;/strong&gt;,&lt;br&gt;
and I loved the result.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Efj9SAql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/csy2hmdksu0isewnoq8a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Efj9SAql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/csy2hmdksu0isewnoq8a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
This web page, was created to practice the mentioned technologies.&lt;br&gt;
It let you choose a series from &lt;em&gt;'The Big Bang Theory'&lt;/em&gt;, &lt;em&gt;'Mr. Robot'&lt;/em&gt;&lt;br&gt;
and &lt;em&gt;'Game of Thrones'&lt;/em&gt;(Some of my favorite series). When you choose&lt;br&gt;
the series, the web page will show you some data about it, and it&lt;br&gt;
will let you choose your favorite character from that series. Then&lt;br&gt;
you have to leave a comment about why did you like about that series.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6vCQyiUa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n80i9iiz93n3qqud2hu7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6vCQyiUa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n80i9iiz93n3qqud2hu7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
When you click &lt;em&gt;'submit'&lt;/em&gt;, a thankful message will appear.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gs0wpZE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arxffsun68ebm2ish1qg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gs0wpZE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arxffsun68ebm2ish1qg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
It also validate that you are selecting a series and leaving a comment.&lt;/p&gt;

&lt;p&gt;The repository of this little project is:&lt;br&gt;
&lt;a href="https://github.com/R0land013/TV-Series-Survey"&gt;https://github.com/R0land013/TV-Series-Survey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Leave a comment showing what do you think about this practice.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>React VS Vue | How about some style ✨?</title>
      <author>Atif Aiman</author>
      <pubDate>Thu, 26 Aug 2021 02:43:42 +0000</pubDate>
      <link>https://dev.to/alserembani94/react-vs-vue-how-about-some-style-1ofi</link>
      <guid>https://dev.to/alserembani94/react-vs-vue-how-about-some-style-1ofi</guid>
      <description>&lt;p&gt;Previously, I talked about features offered by both frameworks, and shout out to &lt;a class="mentioned-user" href="https://dev.to/fyodorio"&gt;@fyodorio&lt;/a&gt;
 for asking me to do comparison about both frameworks' approach on CSS. Well, it's gonna be long article, but I hope I can open to possibilities offered by frameworks and later can be used however you see fit.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/alserembani94" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XfqPzcq4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--BEjPGr6W--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/186380/b3ea7705-180e-4b18-979d-1e6467225f89.png" alt="alserembani94"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/alserembani94/react-vs-vue-what-about-them-2o" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;React VS Vue | What about them?&lt;/h2&gt;
      &lt;h3&gt;Atif Aiman ・ Aug 19 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vue&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;I will talk about the beginning, on how people use CSS back then, and later will dive into specifics such as preprocessors and postprocessors, as well as available CSS frameworks. I know most of you love Tailwind, so hold on you cup of drink, and dwell in the history first, shall we?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#inline-styles"&gt;
  &lt;/a&gt;
  Inline Styles
&lt;/h2&gt;

&lt;p&gt;In the beginning of times, after 4 years of the existence of HTML, comes the debut of CSS. Although that time, styling is not that great (as we evaluate the styling on current standard), but the debut of CSS brings great change to the web development. To style an element, you only need to add &lt;code&gt;style&lt;/code&gt; attribute to the element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"margin: 16px"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Style, in this matter, is the only style available at that time, and it's still available to this day. Element's &lt;code&gt;style&lt;/code&gt; will always be treated at the top level, since we style it directly to a extremely specific element. Just imagine, there are hundreds, thousands of elements that uses the same style. Crazy right? But our predecessors used to do this, you know!&lt;/p&gt;

&lt;p&gt;Well, for React and Vue, both of them are available! Though it differs on how you want to use it, especially when you need dynamic styling for a specific element, you might use &lt;code&gt;style&lt;/code&gt; attributes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-jsx"&gt;
  &lt;/a&gt;
  React JSX
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// React&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#00d8ff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note that the first curly bracket is to trigger javascript code inside JSX, and the second curly bracket is for object notation.&lt;/p&gt;

&lt;p&gt;Since React is using JSX, anything inside curly bracket should always use camelCase.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#vue"&gt;
  &lt;/a&gt;
  Vue
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Vue --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;:style=&lt;/span&gt;&lt;span class="s"&gt;"{ backgroundColor }"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#42b883&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are the respective example for the usage of &lt;code&gt;style&lt;/code&gt; attribute for both React and Vue. However, we are too lazy to make ourselves repeat the code and read millions of line, so we are gonna escalate this a little bit!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#selectors"&gt;
  &lt;/a&gt;
  Selectors
&lt;/h2&gt;

&lt;p&gt;We want to avoid repetitive works, so the existence of CSS helps us a lot on splitting the code between HTML and CSS, thus comes the selectors such as elements, classes, ids, siblings, and finally a cursed &lt;code&gt;!important&lt;/code&gt; 💀&lt;/p&gt;

&lt;p&gt;So, in standard HTML, you can use &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag to handle it for you. As usual, you either use a global one, from element selector, to the most specific selector, the id, and then increasing the specificity by using siblings, data-attributes, and &lt;code&gt;!important&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="m"&gt;#35495e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In React, we don't have &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag, so we cannot do this way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vue"&gt;
  &lt;/a&gt;
  Vue
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"#42b883"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#stylesheet"&gt;
  &lt;/a&gt;
  Stylesheet
&lt;/h2&gt;

&lt;p&gt;Cascading StyleSheet (CSS), as the word describes, is a sheet of styles, where we can split the styling totally from the HTML. Quite neat right? So when we want to debug the CSS, we can just open the sheet, without going through HTML codes. Easier to read, easier for bug-hunting. To import the sheet, just use the code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"your-css-sheet.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since React and Vue both are using Javascript, we instead use Javascript way of importing the sheet. Both have the same implementation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/path/to/your-css-sheet.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and later just use the class that is declared inside your CSS files. Neat!&lt;/p&gt;

&lt;p&gt;However, heed this advice. Until this point, if you use general selectors, and import your CSS that the global level, that means all element, includes the children of the component will have the same styles. There are some case, you need the specificity, so you make a class e.g. &lt;code&gt;.Header__wrapper__link&lt;/code&gt;. Imagine how specific you want to make it, but there are a better war for both React and Vue. Read more below!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#modules-and-scopes"&gt;
  &lt;/a&gt;
  Modules and scopes
&lt;/h2&gt;

&lt;p&gt;This is where some concerns arises. As I talked before, there are some use cases, where we need to specifically target a specific component, without affecting other components, including the children component. This is where modules and scopes comes in.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Modules and scopes are only available for javascript, and not vanilla HTML.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Usually, we have a file called &lt;code&gt;your-style.css&lt;/code&gt;. Do you know that you can actually modularise your CSS by just changing from &lt;code&gt;.css&lt;/code&gt; to &lt;code&gt;.module.css&lt;/code&gt;? Let me explain how it works.&lt;/p&gt;

&lt;p&gt;Assume that this is your &lt;code&gt;your-style.css&lt;/code&gt; sheet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.blog&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#00000011&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: In &lt;code&gt;.module.css&lt;/code&gt;, it is not allowed to use element selector at the base of selector. As example, &lt;code&gt;div &amp;gt; .blog&lt;/code&gt; is not allowed, but &lt;code&gt;.blog &amp;gt; div&lt;/code&gt; is allowed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After compile, when you inspect your element in your browser, you will see the element this way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"blog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, if you convert it to &lt;code&gt;your-style.module.css&lt;/code&gt;, javascript will help in hashing your class, so it will only target that specific element in specific component. In result, you will see this result during inspection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"blog-12ba89"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React
&lt;/h3&gt;

&lt;p&gt;To use in React, simply import you module css.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;your-style.module.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"styles.blog"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#vue"&gt;
  &lt;/a&gt;
  Vue
&lt;/h3&gt;

&lt;p&gt;Since Vue also supports in-file stylesheet, so there are two ways of using &lt;code&gt;.module.css&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"styles.blog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;your-style.module.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OR you can just do it inside your &lt;code&gt;.vue&lt;/code&gt; file!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"blog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt; &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.blog&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#00000011&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately, for Vue, you need to set up module loader to use CSS modules. You can refer to &lt;a href="https://vue-loader.vuejs.org/guide/css-modules.html"&gt;the documentation on Vue Loader&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But, don't be sad, for there is a Vue way of doing things, that is scopes!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"blog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt; &lt;span class="na"&gt;scoped&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.blog&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#00000011&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Different on how CSS modules handle things, instead of hashing the class itself, it create a data-attribute which handles the hashing. So the output should be like below when you inspect your website.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"blog"&lt;/span&gt; &lt;span class="na"&gt;data-v-f3f3eg9&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#preprocessors-and-postprocessors"&gt;
  &lt;/a&gt;
  Preprocessors and Postprocessors
&lt;/h2&gt;

&lt;p&gt;Sometimes, when we write our own CSS, there is a time where the class name initials are the same such as &lt;code&gt;blog__#&lt;/code&gt;, or maybe you refer to the same initial selector such as &lt;code&gt;div &amp;gt; .wrapper&lt;/code&gt; and &lt;code&gt;div &amp;gt; .title&lt;/code&gt;. As your stylesheet grows, you find out that you need to copy the same sheet over and over (pun intended).&lt;/p&gt;

&lt;p&gt;Of course, this is one of the example of the use case, but this is the time where you should consider using preprocessors or postprocessors to do the job.&lt;/p&gt;

&lt;p&gt;Preprocessors such as LESS, SASS, SCSS, and postprocessors such as PostCSS are CSS-to-go for developers that well versed in CSS, since they support plugins and have some features such as nesting and variables (though I personally feel variables can be done using vanilla CSS). Let me show you some example on how they work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.blog&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;__wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#000000&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will later processed and the result will be as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.blog&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.blog&lt;/span&gt; &lt;span class="nc"&gt;.title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.blog__wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#00000011&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just imagine how easy your CSS can be debug later on!&lt;/p&gt;

&lt;p&gt;These, of course can be used for both React and Vue, but you need to let your compiler know what you are using. You might need to find the loader of your desired preprocessor or postprocessor and install it as your dependency.&lt;/p&gt;

&lt;p&gt;Since Vue also supports in-file styling, after you install the loader. you can do it this way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"scss"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.blog&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;__wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#000000&lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You only need to add &lt;code&gt;lang&lt;/code&gt; attribute to your &lt;code&gt;style&lt;/code&gt;, and you are good to go!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#cssinjs"&gt;
  &lt;/a&gt;
  CSS-in-JS
&lt;/h2&gt;

&lt;p&gt;Since we are using Javascript, why not having Javascript all the way? Of course, it is also available! It is one of the option, so you can use it if you want.&lt;/p&gt;

&lt;p&gt;There are tons of libraries out there for CSS-in-JS, especially for React, so developer can do code sharing between React and React Native for development, since React Native didn't support CSS. &lt;a class="mentioned-user" href="https://dev.to/michelebertoli"&gt;@michelebertoli&lt;/a&gt;
 did a good job discovering &lt;a href="https://michelebertoli.github.io/css-in-js/"&gt;most of CSS-in-JS libraries&lt;/a&gt;, so you can explore there.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#css-frameworks"&gt;
  &lt;/a&gt;
  CSS Frameworks
&lt;/h2&gt;

&lt;p&gt;There are a ton of CSS frameworks that can be used as well, so you can use their CDN and just use all the utilities available for you. CSS frameworks such as Bootstrap, TailwindCSS, Materialize, Bulma etc. help developers to focus on component development, instead of composing your own CSS.&lt;/p&gt;

&lt;p&gt;All you need to do, is to head to their respective framework documentation, and install it, or import it to your project to get going.&lt;/p&gt;

&lt;p&gt;Personally, I really love TailwindCSS and Bulma for the features offered, but I won't explain further.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There are a lot of ways you want to style your components. Of course, React and Vue has its own way of doing styling, so you can choose one of them that suits your style. Improving developer experience is one thing  that we need to keep in mind, especially when working in a team.&lt;/p&gt;

&lt;p&gt;But of course, for you web artisans out there, you are cool 😎!&lt;/p&gt;

&lt;p&gt;Anything lacking, you can comment down below!&lt;/p&gt;

&lt;p&gt;Peace be upon ya!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>vue</category>
    </item>
    <item>
      <title>Can I Write A Clean Code?</title>
      <author>Jeff Chavez</author>
      <pubDate>Thu, 26 Aug 2021 01:54:31 +0000</pubDate>
      <link>https://dev.to/jctechdev/can-i-write-clean-code-4lbb</link>
      <guid>https://dev.to/jctechdev/can-i-write-clean-code-4lbb</guid>
      <description>&lt;p&gt;I have been having difficulties in writing clean code. But the series of posts in Medium helped a lot. So here are the links to the posts and my takeaways that are worth sharing from &lt;a href="https://faun.pub/writing-clean-code-9f3a4e8d06b7"&gt;part 1&lt;/a&gt;, &lt;a href="https://faun.pub/writing-clean-code-part-2-1e89dcf774df"&gt;part 2&lt;/a&gt;, &lt;a href="https://faun.pub/writing-clean-code-part-3-83ff269f9e58"&gt;part 3&lt;/a&gt;, &amp;amp; &lt;a href="https://faun.pub/writing-clean-code-part-4-bc436800a7f5"&gt;part 4&lt;/a&gt; of the &lt;strong&gt;Writing Clean Code&lt;/strong&gt; series by &lt;a href="https://medium.com/@logeshvarl"&gt;Logeshvar L&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Avoid redundant information. E.g: UserWithNameAndAge is more redundant and is very lengthy. Prefer User&lt;/li&gt;
&lt;li&gt;Follow the casing conventions according to the language you’re using. Example: camelCase in Java/Javascript, snake_case in Python and so on.&lt;/li&gt;
&lt;li&gt;Be consistent in naming your variables/methods. Example: Avoid using getAge(), fetchName(), retrieveMail(). Instead, be consistent and name them getAge(), getName(), and getMail().&lt;/li&gt;
&lt;li&gt;Avoid slang, unclear abbreviations and disinformation (indicative of wrong data structure in the variable name, etc).&lt;/li&gt;
&lt;li&gt;Avoid comments that say the obvious or those which are misleading.&lt;/li&gt;
&lt;li&gt;Never comment out code, just remove.&lt;/li&gt;
&lt;li&gt;Use comments only when you want to provide licensing information, warnings or there is a need to provide API documentation.&lt;/li&gt;
&lt;li&gt;Use comments when code is difficult to grasp at a single sight and it would make it easier by providing some comments as explanations (e.g: regex).&lt;/li&gt;
&lt;li&gt;Properly format the code by adding blank lines to separate unrelated concepts and grouping similar/ related concepts together.&lt;/li&gt;
&lt;li&gt;Do not write an unreadably long line of code or name in a single line. Split them into multiple lines and use precise short names.&lt;/li&gt;
&lt;li&gt;Write functions with a minimum number of parameters.&lt;/li&gt;
&lt;li&gt;Keep your functions simple to read and understand without writing 100s of lines of code inside a single function. Instead, split into multiple short functions.&lt;/li&gt;
&lt;li&gt;Consider splitting of functions, but be sensible.&lt;/li&gt;
&lt;li&gt;Increase reusability and make code DRY (Don’t Repeat Yourself).&lt;/li&gt;
&lt;li&gt;Try not to mix different levels of abstraction in the function.&lt;/li&gt;
&lt;li&gt;Avoid unexpected side effects.&lt;/li&gt;
&lt;li&gt;Check if your function makes unit testing easier.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are the takeaways that you can pretty much read in the blog posts. After reading the posts. I hope we can all answer the question above that Yes! We can write clean code with practice and tips provided in the blog posts. &lt;/p&gt;

&lt;p&gt;I encourage you to read each post as he provides helpful examples and detailed steps/tips to implement writing clean code.&lt;/p&gt;

&lt;p&gt;I'll surely get back to these posts as I write codes.&lt;/p&gt;

&lt;p&gt;To God be the glory!&lt;/p&gt;

</description>
      <category>cleancode</category>
      <category>javascript</category>
      <category>functions</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
