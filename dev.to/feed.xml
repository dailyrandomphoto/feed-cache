<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Here's why software engineers choose Linux over Windows for programming</title>
      <author>Suhail Kakar</author>
      <pubDate>Thu, 22 Jul 2021 15:06:31 +0000</pubDate>
      <link>https://dev.to/suhailkakar/here-s-why-software-engineers-choose-linux-over-windows-for-programming-2mi7</link>
      <guid>https://dev.to/suhailkakar/here-s-why-software-engineers-choose-linux-over-windows-for-programming-2mi7</guid>
      <description>&lt;p&gt;This articles was firstly published on my &lt;a href="https://blog.suhailkakar.com"&gt;own&lt;/a&gt; blog &lt;a href="https://blog.suhailkakar.com/heres-why-software-engineers-choose-linux-over-windows-for-programming"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was a big fan of Windows OS, and have been using it for years because it is user-friendly, well-designed, and convenient. However, since I started programming I found that a Linux distro (such as Ubuntu, Manjaro, and Arch) is the best Operating System to start with.&lt;/p&gt;

&lt;p&gt;In this article, I am going to share, why I most of the software engineers choose Linux over Windows for programming&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#preinstalled-compilers"&gt;
  &lt;/a&gt;
  Pre-installed Compilers
&lt;/h3&gt;

&lt;p&gt;The primary reason behind the popularity of Linux is the availability of compilers or interpreter. You don't have to download them yourself. On the other hand, Windows does not come with pre-installed compilers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#open-source"&gt;
  &lt;/a&gt;
  Open Source
&lt;/h3&gt;

&lt;p&gt;Unlike Windows OS which is commercial, Linux is an open source software that is freely available to download. There are hundreds of Linux distributions available out of which almost five-hundred distro are in active development.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#community-support"&gt;
  &lt;/a&gt;
  Community Support
&lt;/h3&gt;

&lt;p&gt;All newcomers can find help on any of the Linux forums. If you are stuck somewhere in your development process or need help in your coding process, just Google it and you can find several Linux based helpful resources.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h3&gt;

&lt;p&gt;Linux is much powerful and versatile than Windows. It is light-weight OS, which makes it faster than Windows. You will notice a significant improvement in speed on a Linux distro when you start working it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#secure"&gt;
  &lt;/a&gt;
  Secure
&lt;/h3&gt;

&lt;p&gt;Linux is considered to be more secure than Windows. No antivirus is needed. Since it is open source, several developers are working on it and everyone can contribute code. It is likely that someone will find a vulnerability long before hackers can target a Linux distro. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#shell"&gt;
  &lt;/a&gt;
  Shell
&lt;/h3&gt;

&lt;p&gt;If Linux does not have what you need, you can still get all the functionalities that you need from the command line. Simply enter the command and it will atomically download and install the package. Which saves a lot of efforts.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>linux</category>
      <category>programming</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Improving Mobile App Performance with a Powerful Database </title>
      <author>Margo McCabe</author>
      <pubDate>Thu, 22 Jul 2021 14:49:29 +0000</pubDate>
      <link>https://dev.to/harperdb/improving-mobile-app-performance-with-a-powerful-database-7j5</link>
      <guid>https://dev.to/harperdb/improving-mobile-app-performance-with-a-powerful-database-7j5</guid>
      <description>&lt;p&gt;You are probably aware that there are seemingly endless options to consider when it comes to selecting a database and other technologies for your mobile app. With so many choices, it can be difficult and confusing to determine what really matters when it comes to your tech stack. A little while back, I wrote an extensive article on the different &lt;a href="https://dev.to/harperdb/database-architectures-use-cases-explained-5711"&gt;database architectures and use cases&lt;/a&gt; available to provide guidance on picking the right technology for the right project. While that is still an accurate and solid resource, this article takes a deeper dive into considerations for improving the performance of specifically mobile apps. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mobile-vs-web-apps"&gt;
  &lt;/a&gt;
  Mobile vs. Web Apps
&lt;/h3&gt;

&lt;p&gt;First and foremost, perhaps we should take a quick look at the difference between mobile and web apps. Mobile apps live and run on a mobile device itself, whereas web apps are accessed through a web browser and will adapt to whichever device you’re viewing them on. &lt;a href="https://careerfoundry.com/en/blog/web-development/what-is-the-difference-between-a-mobile-app-and-a-web-app/"&gt;Native mobile apps&lt;/a&gt; are built for a specific platform, such as iOS for Apple or Android for, well, pretty much everything else. They are downloaded and installed through an app store and have access to system resources, such as GPS and the camera function. &lt;a href="https://careerfoundry.com/en/blog/web-development/what-is-the-difference-between-a-mobile-app-and-a-web-app/"&gt;Web apps&lt;/a&gt;, however, are not native to a particular system, and do not need to be downloaded or installed. Due to their responsive nature, they may look and function a lot like mobile apps, which is where some confusion arises. &lt;/p&gt;

&lt;p&gt;To dig a bit deeper, mobile apps that are created for a targeted platform using the platform-specific SDK are categorized into &lt;a href="https://www.clariontech.com/blog/mobile-app-vs-web-app-which-is-the-right-one-for-you"&gt;Native Mobile Apps&lt;/a&gt;. Whereas &lt;a href="https://www.clariontech.com/blog/mobile-app-vs-web-app-which-is-the-right-one-for-you"&gt;Hybrid Mobile Apps&lt;/a&gt; are developed on platforms that provide code that is compatible with all available operating systems. Lastly, you may have heard of Progressive Web Apps (PWA’s), which many people claim is the future. With &lt;a href="https://www.clariontech.com/blog/mobile-app-vs-web-app-which-is-the-right-one-for-you"&gt;PWA’s&lt;/a&gt;, “The focus is towards creating web applications that have a look and feel exactly like native apps, without users having to download and install any software.” &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mobile-app-performance-challenges"&gt;
  &lt;/a&gt;
  Mobile App Performance Challenges
&lt;/h3&gt;

&lt;p&gt;While many companies may have incredible technology otherwise, their mobile apps often struggle with performance, latency, and/or connectivity issues. This can be due to numerous factors. Perhaps the organization did not put a lot of time or resources into building their mobile apps from the ground up, and therefore they do not stand on a solid foundation. Or maybe they are battling with latency issues due to &lt;a href="https://dev.to/harperdb/reducing-data-latency-with-geographically-distributed-databases-41oa"&gt;centralized databases&lt;/a&gt; and cloud/vendor lock-in. Speaking of the database - is it equipped to handle the right amount of users and frequent updates? Does it store data offline or handle complex queries? These are all things to consider when building a new mobile app from scratch, or adding new features to an existing app, etc. Bear in mind that it’s not impossible (and actually with some technologies it’s quite easy) to migrate from one database to another if needed. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#database-considerations"&gt;
  &lt;/a&gt;
  Database Considerations
&lt;/h3&gt;

&lt;p&gt;In my &lt;a href="https://dev.to/harperdb/database-architectures-use-cases-explained-5711"&gt;database architectures and use cases&lt;/a&gt; blog, I mentioned that when selecting a database, it’s important to consider your data type / structure, data volume, consistency, write &amp;amp; read frequency, hosting, cost, security, and integration constraints. While these certainly stand true, there are a few additional things you may want to consider when it comes to mobile apps: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for multiple mobile app platforms&lt;/li&gt;
&lt;li&gt;Scalability &lt;/li&gt;
&lt;li&gt;Data synchronization &lt;/li&gt;
&lt;li&gt;Multi layer data model considerations &lt;/li&gt;
&lt;li&gt;Network connectivity &lt;/li&gt;
&lt;li&gt;Pushing new app updates and database changes&lt;/li&gt;
&lt;li&gt;Resolving data conflicts between devices &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Clearly there is a lot to consider here, and it can be quite overwhelming to figure out what type of database technology might be the best fit. For starters, some databases fit nicely into one category when it comes to data structure / type of functionality. Other technologies take more of a hybrid approach, enabling cross-functionality or combining the functionality of different tools into one. So, unless you have a very specific project or limited long term goals, it might be best to go with a more flexible hybrid technology that encompasses more functionality into one package to reduce the number of systems needed. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-which-database-should-you-use"&gt;
  &lt;/a&gt;
  So, Which Database Should You Use?
&lt;/h3&gt;

&lt;p&gt;Here I’ll try to provide a fair (while potentially still a little biased) explanation as to why &lt;a href="https://harperdb.io/?utm_source=devto&amp;amp;utm_medium=mobileapp"&gt;HarperDB&lt;/a&gt; is the best option for improving the performance of your mobile app. From a high level, HarperDB is a modern hybrid database that combines the functionality of some of the best tools on the market into one, so it really covers a lot of bases. As a distributed database, it can be installed anywhere while presenting a single interface across a range of clouds, with backend ability to keep data synchronized everywhere. HarperDB is read and write optimized, handling upwards of 100K requests per second per node.&lt;/p&gt;

&lt;p&gt;Of course there are other great options out there as well. For example, &lt;a href="https://www.simform.com/mobile-app-developers-database-selection/#criteria"&gt;this article&lt;/a&gt; published several years ago lists different database options based on functionality needed. HarperDB basically works everywhere in that table, and provides all of the functionality mentioned. &lt;/p&gt;

&lt;p&gt;Instead of trying to compare 300 different database options on the market, it might simplify your decision to do comparisons of this vs. that. This will enable you to take a deeper look at your needs and compare things like performance and cost. For example, in &lt;a href="https://harperdb.io/harperdb-vs-mongodb/?utm_source=devto&amp;amp;utm_medium=mobileapp"&gt;benchmark tests&lt;/a&gt;, HarperDB is 37 times faster than MongoDB and tends to be more cost effective. It also supports SQL on JSON. Cockroach is a better fit for fintech use cases, whereas HarperDB may be a better fit for industries like gaming, ticketing, military, and media. You can’t lock out HarperDB’s database globally, and our clustering methodology relies on eventual consistency which allows for more efficient replication than more structured options. Relational databases like MySQL can be significantly more resource intensive, requiring more maintenance and strict data structure. Whereas HarperDB can run on machines of all vertical scale from a Raspberry Pi to a supercomputer, requiring little to no maintenance, and with a dynamic schema allowing for easy data ingestion. This &lt;a href="https://dev.to/harperdb/harperdb-vs-mongodb-vs-postgresql-49en"&gt;HarperDB vs. MongoDB vs. PostgreSQL&lt;/a&gt; comparison may be helpful as well. &lt;/p&gt;

&lt;p&gt;Are you facing challenges around app &lt;a href="https://dev.to/harperdb/reducing-data-latency-with-geographically-distributed-databases-41oa"&gt;latency&lt;/a&gt;? Or worried about being truly &lt;a href="https://dev.to/harperdb/industries-that-need-a-high-performing-low-latency-distributed-database-5cn4"&gt;geo-distributed&lt;/a&gt;? With HarperDB, you can simply spin up more nodes to scale horizontally, putting HarperDB in various regions closer to your end users, which will reduce latency and improve app performance, all while accessing data in real time. By distributing APIs and data storage, and shifting application logic to the edge, you can remove bottlenecks and reduce infrastructure and cost. Globally replicating data at the speed of the Internet, HarperDB reduces app latency, improves performance and accessibility, and reduces overall complexity when it comes to data management. Lastly, HarperDB is about to release &lt;a href="https://harperdb.io/docs/custom-functions/"&gt;Custom Functions&lt;/a&gt;, which will enable developers to code their own custom API endpoints, utilizing core HarperDB methods, which results in a simplified tech stack and improved performance.&lt;/p&gt;

&lt;p&gt;Mobile apps are constantly evolving, and you need a flexible database that can adjust on the fly without affecting performance. Even the most advanced and impressive technologies in the world will be brought down by a poor foundation or outdated database. Staying up to speed (literally) with modern technology is the best way to remain afloat in this highly competitive market. Therefore, the selection when it comes to your tech stack should not be taken lightly. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>database</category>
      <category>mobile</category>
      <category>programming</category>
    </item>
    <item>
      <title>UI Dev Newsletter #66</title>
      <author>Silvestar Bistrović</author>
      <pubDate>Thu, 22 Jul 2021 14:43:07 +0000</pubDate>
      <link>https://dev.to/starbist/ui-dev-newsletter-66-5fml</link>
      <guid>https://dev.to/starbist/ui-dev-newsletter-66-5fml</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://web.dev/lcp-lazy-loading/"&gt;The performance effects of too much lazy-loading&lt;/a&gt;&lt;br&gt;
Rick Viscomi and Felix Arntz share data-driven advice for lazy-loading images with Core Web Vitals in mind.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://css-tricks.com/meta-theme-color-and-trickery/"&gt;Meta Theme Color and Trickery&lt;/a&gt;&lt;br&gt;
Manuel Matuzović explores the possibilities of a 'theme-color' meta tag.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/colabottles/why-accessibility-26mf"&gt;Why Accessibility?&lt;/a&gt;&lt;br&gt;
Todd Libby explains why accessibility should be an equal citizen of your project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://uxdesign.cc/designing-a-chair-a-story-about-junior-designers-vs-senior-designers-24be40b1d2cb"&gt;Designing a chair: A story about Junior vs. Senior Designers.&lt;/a&gt;&lt;br&gt;
Stan Reimgen explains the difference between junior and senior designers, which could be applied to developers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar"&gt;Lexical grammar&lt;/a&gt;&lt;br&gt;
MDN contributors describe everything about JavaScript's lexical grammar from control characters and white space to automatic semicolon insertion and browser compatibility.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.kevinpowell.co/article/why-i-dont-like-being-called-the-king-of-css/"&gt;Why I am not the King&lt;/a&gt;&lt;br&gt;
Kevin Powell shares a lot of helpful CSS resources and professionals in his humble post.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.dottedsquirrel.com/javascript-language/"&gt;Trends Come And Go, But JavaScript Is Forever&lt;/a&gt;&lt;br&gt;
Aphinya Dechalert explores a little into the history of JavaScript and its good and bad parts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.smashingmagazine.com/2021/07/frustrating-design-patterns-broken-frozen-filters/"&gt;Frustrating Design Patterns: Broken Filters&lt;/a&gt;&lt;br&gt;
Vitaly Friedman describes how to design better filters on the web.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://buttondown.email/starbist"&gt;Subscribe to the newsletter here!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>a11y</category>
    </item>
    <item>
      <title>Data Structures in Typescript - Binary Search Tree</title>
      <author>Ricardo Borges</author>
      <pubDate>Thu, 22 Jul 2021 14:39:38 +0000</pubDate>
      <link>https://dev.to/ricardo_borges/data-structures-in-typescript-binary-search-tree-5en3</link>
      <guid>https://dev.to/ricardo_borges/data-structures-in-typescript-binary-search-tree-5en3</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-a-tree-data-structure"&gt;
  &lt;/a&gt;
  What is a Tree data structure
&lt;/h3&gt;

&lt;p&gt;Before we talk BST, we have to understand that a tree is a kind of &lt;a href="https://ricardoborges.dev/data-structures-in-typescript-graph"&gt;Graph&lt;/a&gt; with a root node and no cycles, each node can have zero or more child nodes, nodes can store any type of data, also those nodes may or may not be in a particular order, nodes that have no children are called leaves.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JySxGxsk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1626722908/data%2520structures/tree/tree_sgyxim.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JySxGxsk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1626722908/data%2520structures/tree/tree_sgyxim.png" alt="tree"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#binary-tree"&gt;
  &lt;/a&gt;
  Binary Tree
&lt;/h3&gt;

&lt;p&gt;A Binary tree is a tree that each node has up to two nodes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DfAcMY-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1626722908/data%2520structures/tree/binary-tree_qpopld.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DfAcMY-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1626722908/data%2520structures/tree/binary-tree_qpopld.png" alt="binary tree"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#binary-search-tree"&gt;
  &lt;/a&gt;
  Binary Search Tree
&lt;/h3&gt;

&lt;p&gt;A BST is a Binary tree that follows these properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All left descendants nodes are less or equal to their parent node&lt;/li&gt;
&lt;li&gt;All right descendants nodes are greater than their parent node&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e1X2ZjEJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1626722908/data%2520structures/tree/bst_yeac5b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e1X2ZjEJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dje4crtui/image/upload/v1626722908/data%2520structures/tree/bst_yeac5b.png" alt="binary search tree"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BST definitions can slightly vary, you may find a BSTs that the left subtree is less than the parent node (&lt;code&gt;left subtree &amp;lt; parent &amp;lt;= right subtree&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Also, some BSTs may or may not allow duplicated nodes.&lt;/p&gt;

&lt;p&gt;BST is useful when you need to insert, delete and search comparable elements. You can use an array for those operations, but, although access an element in an array is done in a constant time, whenever you insert or delete an element, the other elements have to be shifted, in a BST, on the other hand, you only need to adjust the pointers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#searching-in-the-bst"&gt;
  &lt;/a&gt;
  Searching in the BST
&lt;/h3&gt;

&lt;p&gt;The search starts from the root node, if the element you are searching for is greater than the current node value, then search for it in the right subtree, otherwise search in the left subtree, repeat this until the current node value is equal to the element you are searching for or until you reach a leaf node and there is nowhere to go:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// empty tree&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// start from root node&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// data greater than current element&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// you are on a leaf node, nowhere to go&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rightNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// go to the right subtree&lt;/span&gt;
        &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rightNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// you are on a leaf node, nowhere to go&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leftNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// go to the left subtree&lt;/span&gt;
        &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leftNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#inserting-in-the-bst"&gt;
  &lt;/a&gt;
  Inserting in the BST
&lt;/h3&gt;

&lt;p&gt;When inserting a new element in BST you have to keep its properties, so start from the root node, if the new element value is greater than the root node value, search for an empty position in the right subtree, otherwise search for an empty position in the left subtree:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// empty tree, insert the first node (the root node)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// start from the root node&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// search for an empty position in the right subtree&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rightNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rightNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// insert node&lt;/span&gt;
        &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rightNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rightNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// search for an empty position in the left subtree&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leftNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leftNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// insert node&lt;/span&gt;
        &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leftNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leftNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#binary-search-tree-traversal"&gt;
  &lt;/a&gt;
  Binary Search Tree traversal
&lt;/h3&gt;

&lt;p&gt;There are three ways to traverse a BST, they differ on which order the nodes are visited (often, printed):&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#inorder-traversal"&gt;
  &lt;/a&gt;
  In-Order traversal
&lt;/h4&gt;

&lt;p&gt;First visit left branch, then the current node, and finally the right branch, because of how elements are distributed in the BST, they will be visited in the ascending order:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;inOrderTraversal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;inOrderTraversal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leftNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;inOrderTraversal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rightNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#preorder-traversal"&gt;
  &lt;/a&gt;
  Pre-Order traversal
&lt;/h4&gt;

&lt;p&gt;Visit the current node before its children:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;preOrderTraversal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preOrderTraversal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leftNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preOrderTraversal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rightNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#postorder-traversal"&gt;
  &lt;/a&gt;
  Post-Order traversal
&lt;/h4&gt;

&lt;p&gt;Visit the current node's children first, then the current node:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;postOrderTraversal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postOrderTraversal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leftNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postOrderTraversal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rightNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's an implementation of a BST in typescript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BinarySearchTreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;leftNode&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;BinarySearchTreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;rightNode&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;BinarySearchTreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BinarySearchTree&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;BinarySearchTreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;comparator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;comparator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;comparator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;comparator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;BinarySearchTreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BinarySearchTreeNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;comparator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rightNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rightNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rightNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BinarySearchTreeNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rightNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leftNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leftNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leftNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BinarySearchTreeNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leftNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;BinarySearchTreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;comparator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;comparator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rightNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rightNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leftNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leftNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;inOrderTraversal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BinarySearchTreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inOrderTraversal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leftNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inOrderTraversal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rightNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;preOrderTraversal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BinarySearchTreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preOrderTraversal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leftNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preOrderTraversal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rightNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;postOrderTraversal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BinarySearchTreeNode&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postOrderTraversal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leftNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postOrderTraversal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rightNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;comparator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BinarySearchTree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;comparator&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inOrderTraversal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bst&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unlike Graphs, a tree doesn't really need a Tree class, just a Node class would usually suffice.&lt;/p&gt;

</description>
      <category>datastructures</category>
      <category>typescript</category>
      <category>bst</category>
      <category>binarytree</category>
    </item>
    <item>
      <title>Hoppscotch is celebrating 30,000 GitHub Stars 🎉</title>
      <author>Liyas Thomas</author>
      <pubDate>Thu, 22 Jul 2021 14:30:34 +0000</pubDate>
      <link>https://dev.to/liyasthomas/hoppscotch-is-celebrating-30-000-github-stars-1gg9</link>
      <guid>https://dev.to/liyasthomas/hoppscotch-is-celebrating-30-000-github-stars-1gg9</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;a href="http://hoppscotch.io"&gt;Hoppscotch&lt;/a&gt; is an open source API development ecosystem.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H0_nXlRr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a43rnrxo19wdnw9svocx.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H0_nXlRr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a43rnrxo19wdnw9svocx.jpeg" alt="Hoppscotch screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since the initial commit (~2 years ago), Hoppscotch has evolved from being an open source side project to an enterprise developer tool.&lt;/p&gt;

&lt;p&gt;App: &lt;a href="http://hoppscotch.io"&gt;hoppscotch.io&lt;/a&gt;&lt;br&gt;
GitHub: &lt;a href="https://github.com/hoppscotch/hoppscotch"&gt;github.com/hoppscotch/hoppscotch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hoppscotch is celebrating the milestone of reaching 30,000 GitHub Stars.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is an achievement of our whole community. Thank you for each contribution, love, and all the commitments that you made to improve Hoppscotch. We are lucky to build this open-source project with you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Many people ask me why it got so popular. Here's my answer.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most developers have side projects. That’s how we try out new things or make something that we miss on the market or in our dev stack. But most side projects end up unfinished and never actually see the light of day. And even if a developer builds up the courage to show his work to the public, he quickly finds out that just publishing a repository doesn’t bring the masses to his doorstep.&lt;/p&gt;

&lt;p&gt;When I set out to create Hoppscotch, of course, I haven’t had the faintest idea if anyone else would be interested in it. But I was mainly scratching my own itch — I knew how to make a web app and I hoped I’d build something that would serve my needs much better than existing tools on the market. That should be your primary motivator — not to chase stars, likes, and other popular content, but to create something for yourself that will make your job easier. There’s a chance you will not be the only one that will find it useful.&lt;/p&gt;

&lt;p&gt;I’d like to share with you what I did to make sure that the project doesn’t end up in the dustbin of history. I will concentrate on open source software, but the following advice may as well apply to any creative endeavor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Build a solution&lt;/strong&gt;&lt;br&gt;
Look around - think about the tools and products you use every day and the underlying problems they solve.&lt;/p&gt;

&lt;p&gt;Instead of identifying a solution first, the initial step is to identify the problem. &lt;strong&gt;The key here is to be very specific about the problem you are identifying.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once you’ve identified the problem, the next step is to ideate possible solutions, and they don’t have to necessarily be technical solutions.&lt;/li&gt;
&lt;li&gt;Then, from those proposed solutions, create prototypes and begin to test each one.&lt;/li&gt;
&lt;li&gt;Continue testing and refining the prototypes until you have enough validation to move full-steam ahead with the one that is working.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Read more in my article: &lt;a href="https://dev.to/liyasthomas/solve-your-own-problem-everything-else-will-follow-12bc"&gt;Solve your own problem, everything else will follow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Build in public&lt;/strong&gt;&lt;br&gt;
Document your journey of building the project. Engage with your users in public forums like &lt;a href="https://dev.to"&gt;dev.to&lt;/a&gt;. Write blogs and articles, talk to your audience, share your milestones, ask for help, get feedback and iterate over the product.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Build for public&lt;/strong&gt;&lt;br&gt;
Ship early, ship often. Release the first version as soon as it’s useful. Don’t wait for it to be perfect. For inspiration, &lt;a href="https://codepen.io/liyasthomas/full/XWNGRoo"&gt;here's the initial public MVP release of Hoppscotch&lt;/a&gt;. You don’t have to be satisfied with it. You’ll never be. But you should be eager for some feedback.&lt;/p&gt;

&lt;p&gt;When you add a useful feature to your project, you don’t have to wait for anything to release it or deploy it. It just has to work. The feedback loop with inputs from other people will tell you whether what you’re building makes sense or whether you should take it in other directions. It’s good to get that feedback as soon as possible.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#roadmap"&gt;
  &lt;/a&gt;
  Roadmap
&lt;/h3&gt;

&lt;p&gt;Me and &lt;a href="https://dev.to/andrewtheant"&gt;Andrew Bastin&lt;/a&gt; having been building Hoppscotch in public for the past ~2 years. Today is the starting point of many exciting moves and features that will come to Hoppscotch from the very beginning of next month.&lt;/p&gt;

&lt;p&gt;We started to work on different features among which are the capability for teams to collaborate in real-time, workspaces, and some others you'll hear of soon. As always, we are grounding our work on the multiple insights that our users gave us and we are more grateful than ever to have such a committed community.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;To put it in a nutshell, we'll work on our main focus and priority: making our users happy with new features and improving Hoppscotch as much as we can do.&lt;/p&gt;

&lt;p&gt;Contact: &lt;a href="mailto:liyas@hoppscotch.io"&gt;liyas@hoppscotch.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read the tweet&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0gBIY9YD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E61ICjwVEAUlAlW.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--LsxNSNC3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1395705272862232583/d-9B7uEk_normal.jpg" alt="Liyas Thomas profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Liyas Thomas
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/liyasthomas"&gt;@liyasthomas&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Hoppscotch is celebrating the milestone of reaching 30,000 GitHub Stars 🎉&lt;br&gt;&lt;br&gt;This is an achievement of our whole community. Thank you for each contribution, love, and all the commitments that you made to improve Hoppscotch. We are lucky to build this open source project with you. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:33 PM - 21 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1417870384284590084" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1417870384284590084" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1417870384284590084" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>opensource</category>
    </item>
    <item>
      <title>The 7 Categories of Engineering Management w/ Ian Nowland of Datadog</title>
      <author>Conor Bronsdon</author>
      <pubDate>Thu, 22 Jul 2021 14:20:07 +0000</pubDate>
      <link>https://dev.to/linearb/the-7-categories-of-engineering-management-w-ian-nowland-of-datadog-3de1</link>
      <guid>https://dev.to/linearb/the-7-categories-of-engineering-management-w-ian-nowland-of-datadog-3de1</guid>
      <description>&lt;p&gt;You can’t learn to swim by reading a book.&lt;/p&gt;

&lt;p&gt;The same principle applies to coaching engineering managers. In this episode of &lt;a href="https://devinterrupted.com/podcast/7-categories-of-engineering-management/"&gt;Dev Interrupted&lt;/a&gt;, Ian Nowland SVP of Core Engineering at Datadog, discusses how the reality of coaching engineering managers is different from what they tell you during conferences, as well as diving into his 7 categories of engineering management.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/2bTUfObUK2mgtRQYX7yX8h"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Episode Highlights include:&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;The realities of coaching direct reports&lt;/li&gt;
&lt;li&gt;How Ian measures the impact of his teams&lt;/li&gt;
&lt;li&gt;The 7 Categories of Engineering Management&lt;/li&gt;
&lt;li&gt;How to adopt a learning mindset to engineering management&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#join-the-dev-interrupted-discord-server"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Join the Dev Interrupted Discord Server&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With over 1200 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.gg/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" alt="Join the Dev Interrupted Discord Community!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>engineering</category>
      <category>management</category>
      <category>coaching</category>
      <category>team</category>
    </item>
    <item>
      <title>Getting Started with Jamstack</title>
      <author>Saji Wang</author>
      <pubDate>Thu, 22 Jul 2021 14:17:50 +0000</pubDate>
      <link>https://dev.to/codesphere/getting-started-with-jamstack-341o</link>
      <guid>https://dev.to/codesphere/getting-started-with-jamstack-341o</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Over the past couple of years, one tech stack that has consistently stood out from the crowd in developer conversations is Jamstack. In this article, we're going to go over what makes Jamstack so unique, as well as how you can get started creating your own Jamstack web app.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Let's get right into it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-jamstack"&gt;
  &lt;/a&gt;
  What is Jamstack?
&lt;/h2&gt;

&lt;p&gt;Jamstack is an architecture designed to make your web app faster, more secure, and easier to scale. Many people believe Jamstack is the next evolution in modern web development - and here's why.&lt;/p&gt;

&lt;p&gt;Jamstack is arguably the lightest technical stack out there. It eliminates the need to worry about infrastructure and servers, as it requires no real interaction with a database and relies mostly on third-party APIs in order to provide additional functionality, such as authentication and payment.&lt;br&gt;
A Jamstack app consists of static HTML pages, made dynamic using JavaScript and enhanced with third-party services via API and prebuilt Markup. That's where its name comes from &lt;strong&gt;J&lt;/strong&gt;avaScript, &lt;strong&gt;A&lt;/strong&gt;PI, and hypertext &lt;strong&gt;M&lt;/strong&gt;arkup.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-does-jamstack%C2%A0work"&gt;
  &lt;/a&gt;
  How Does Jamstack Work?
&lt;/h2&gt;

&lt;p&gt;Though JAMstack confusingly includes the word "stack", it is more of architecture for web applications that promise to be faster, cheaper, and more secure than the traditional model. The traditional model is the client-server model, where applications are served dynamically from a web server.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N9y1vzPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7qh2titgxr0ihb1nrl6s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N9y1vzPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7qh2titgxr0ihb1nrl6s.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The key concept behind Jamstack is to eliminate the need for a backend server for the app, at least in the form with which you may be accustomed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nQ7QyKNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qjf20w96cfcw4qugiyma.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nQ7QyKNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qjf20w96cfcw4qugiyma.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead, Jamstack sites are simply static files that are served by a special type of file-hosting called a CDN (Content Delivery Network). A CDN is actually a network of file servers around the world, all holding a copy of your site's files.&lt;br&gt;
Once your static site has been loaded by a browser, you can use JavaScript to generate HTTP requests to third-party services, including databases, search, identity management, payment processing, and serverless functions.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#jamstack-benefits"&gt;
  &lt;/a&gt;
  Jamstack Benefits
&lt;/h2&gt;

&lt;p&gt;So what are the benefits of Jamstack? Why go through the hassle of transforming your web app architecture?&lt;br&gt;
Jamstack's architecture is faster, cheaper, and more secure, which is made possible by the usage of a CDN and the elimination of a web server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. A CDN is generally faster than a webserver!&lt;/strong&gt;&lt;br&gt;
Since a CDN does not process requests and instead just serves files, the request/response loop is much shorter. And since CDNs can serve on the network edge, closer to the user, the latency of the response is minimized.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. A CDN is most likely less expensive than a webserver!&lt;/strong&gt;&lt;br&gt;
If you use a web server, it must run 24/7 listening for requests. Since cloud computing is charged by the minute, you'll be paying for your server, even when it's idle.&lt;br&gt;
CDN hosting is generally less expensive because a CDN service is only charged by the volume of data served, and therefore it's idle time doesn't cost anything.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. A CDN is generally more secure than a webserver!&lt;/strong&gt;&lt;br&gt;
Finally, unlike a web server, a CDN does not process requests and therefore has limited potentially exposed attack vectors for hackers. A Jamstack site will still connect to services, such as cloud databases, but since these are managed by specialist third parties, security gaps are usually minimal.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#how-do-i-get-started-using-jamstack"&gt;
  &lt;/a&gt;
  How Do I Get Started using Jamstack?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#building-the%C2%A0frontend"&gt;
  &lt;/a&gt;
  Building the Frontend
&lt;/h3&gt;

&lt;p&gt;Let's start with the Jamstack frontend. While the core of a Jamstack website is the static HTML that's delivered to the browser, JavaScript and the UI frameworks that build that experience are what have made its architecture popular.&lt;br&gt;
A common front-end framework for Jamstack is Next.js. The following demonstrates how to get started with Next.js for Jamstack development. The easiest way to get started is by typing the following command in your terminal, and I'll name the project mynextapp:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ npx create next-app mynextapp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;which will generate for us a default boilerplate page.&lt;br&gt;
Navigate into the newly made directory we just created by opening the folder in your code editor or by typing in the terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ cd mynextapp&lt;/code&gt;&lt;br&gt;
&lt;code&gt;$ code .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The following is an example of the default starter Next.js file tree, generated by the create-next-app command:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YmGhxWak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tyssryqssnlmgyqwv350.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YmGhxWak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tyssryqssnlmgyqwv350.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;node_modules&lt;/code&gt; folder is where all the dependencies are stored.&lt;/li&gt;
&lt;li&gt;The pages folder is where we keep all of our page components. The idea is that each page in Next.js has its own React component. At the moment, the only component we have is the &lt;code&gt;index.js&lt;/code&gt; component, which will be for the homepage.&lt;/li&gt;
&lt;li&gt;The api folder is for API endpoints.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;app.js&lt;/code&gt; file acts as the root component, and all of our different page components are rendered here:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vNV9Nerx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efqruj8zv1i3t1ri1gpb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vNV9Nerx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efqruj8zv1i3t1ri1gpb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The public folder is where all of our public assets are stored, such as images.&lt;/li&gt;
&lt;li&gt;The styles folder contains all of our CSS files and CSS modules.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.gitignore&lt;/code&gt; is for version control.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;package.json&lt;/code&gt; is to keep track of our various dependencies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the &lt;code&gt;package.json&lt;/code&gt; file, we have the &lt;code&gt;dev&lt;/code&gt; script, which spins up a local development server for us, to enable us to preview our app in the browser.&lt;/p&gt;

&lt;p&gt;In the terminal, run the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ npm run dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In your browser, type &lt;code&gt;localhost:3000&lt;/code&gt;, and the following will be displayed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AvYWCj7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kitop8xpxvwzt3vx9tsz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AvYWCj7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kitop8xpxvwzt3vx9tsz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The content shown in your browser is defined in the &lt;code&gt;index.js&lt;/code&gt; component. Replace all the content inside the main &lt;/p&gt; with a simple heading:


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now, we can see our new content displayed in the browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g-985Pdw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yluedk4i4t9xzr306n0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g-985Pdw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yluedk4i4t9xzr306n0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;The &lt;code&gt;index.js&lt;/code&gt; component is being pre-rendered before it even reaches the browser. During development, this is done via server-side rendering. The server renders the component, then sends the HTML file to the browser, which happens on each page request from the browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pages-and%C2%A0routes"&gt;
  &lt;/a&gt;
  Pages and Routes
&lt;/h2&gt;

&lt;p&gt;The pages folder is where we create all of our page components. Each page in Next.js is driven by a React component. So for an About page, we'd have an About component, for a Pricing page, we'd have a Pricing component, and so on. Each page component has its own file inside the pages folder. Therefore, the file name and location of each component are tied to the route for that particular page.&lt;/p&gt;

&lt;p&gt;For example, in the pages folder, let's create an &lt;code&gt;about.js&lt;/code&gt; file. Next.js will automatically create a route &lt;code&gt;/about&lt;/code&gt;, which is the name of the file, to serve up this component. The route name is tied to the file name.&lt;/p&gt;

&lt;p&gt;The one exception to the rule is &lt;code&gt;index.js&lt;/code&gt;. Next.js doesn't create a route &lt;code&gt;/index&lt;/code&gt;, it just creates the route /. So all we have to do is go to the root of the domain to see the &lt;code&gt;index.js&lt;/code&gt; component.&lt;br&gt;
In the &lt;code&gt;about.js&lt;/code&gt; file, let's create a stateless functional component and export it:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Go to &lt;code&gt;/about&lt;/code&gt; in the browser to see the About component page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YzQwrLmx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uj7o1lb8kiwc11d2otyp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YzQwrLmx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uj7o1lb8kiwc11d2otyp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can also create subfolders in the pages folder that contain page components.&lt;/p&gt;

&lt;p&gt;Let's create a subfolder called pricing and a file called &lt;code&gt;plan1.js&lt;/code&gt;. In the &lt;code&gt;plan1.js&lt;/code&gt; file, we'll create a stateless functional component called Plan1:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;When we have a subfolder, Next.js will create a route according to the subfolder as well. Therefore, in this case, the route is: localhost:3000/pricing/plan1&lt;br&gt;
And that's how easy it is to make a multi-page website with Next.js.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#building-the%C2%A0backend"&gt;
  &lt;/a&gt;
  Building the Backend
&lt;/h2&gt;

&lt;p&gt;Content is at the heart of any website or application. This may take a variety of forms, such as a blog or an online store. Tools like Auth0 provide user authentication and management, which can present a number of challenges on its own.&lt;/p&gt;

&lt;p&gt;There are additionally a number of cloud projects that make it simple to build serverless functions, from which you can begin developing your own backend service.&lt;/p&gt;

&lt;p&gt;The great thing about Jamstack apps is that they serve as a central point for bringing in any feature or service you require, paving the way for powerful solutions that are focused on addressing your specific challenge.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#deploying-your%C2%A0app"&gt;
  &lt;/a&gt;
  Deploying Your App
&lt;/h2&gt;

&lt;p&gt;Deploying a website and managing CI/CD systems is arguably one of the most difficult aspects of developing a web application.&lt;br&gt;
In the Jamstack world, tools such as Codesphere offer automated DevOps to make deployment easier.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-now"&gt;
  &lt;/a&gt;
  What Now?
&lt;/h2&gt;

&lt;p&gt;Given the advantages of Jamstack, many people in technology are expecting Jamstack's popularity to increase. Jamstack is growing rapidly, and may one day become the most popular architecture on the web.&lt;/p&gt;

&lt;p&gt;If you want to have a go at building your own Jamstack app or a solution to the painful CI/DC system management, go to &lt;a href="https://link.codesphere.com/BO"&gt;Codesphere&lt;/a&gt; provides an online code editor in which you can build, test, and deploy your apps all within a single tab of your browser.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>jamstack</category>
      <category>nextjs</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>Writing inclusive job adverts</title>
      <author>Rouan Wilsenach</author>
      <pubDate>Thu, 22 Jul 2021 14:09:36 +0000</pubDate>
      <link>https://dev.to/rouanw/writing-inclusive-job-adverts-1n0c</link>
      <guid>https://dev.to/rouanw/writing-inclusive-job-adverts-1n0c</guid>
      <description>&lt;p&gt;I recently spent some time helping a startup set up their technical hiring process. Diversity and inclusion are important to me and &lt;a href="https://dev.to/rouanw/want-to-be-a-better-developer-work-somewhere-inclusive-3j34"&gt;I love working at inclusive companies&lt;/a&gt;, so I wanted to make sure the hiring process was as inclusive as possible to help us build a diverse team.&lt;/p&gt;

&lt;p&gt;Here are the highlights of what I learned about inclusive job adverts. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-explicit-about-your-desire-to-be-inclusive"&gt;
  &lt;/a&gt;
  Be explicit about your desire to be inclusive
&lt;/h2&gt;

&lt;p&gt;Here's an easy win. Say somewhere in your job advert that you're open to applicants from different backgrounds. This template can get you started:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[Company Name] is an equal opportunity employer. We celebrate diversity and are committed to creating an inclusive environment for all employees. We welcome applications from those typically underrepresented in tech.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don't pretend your company is more inclusive than it is. Don't make any wild claims. Just say you'd love to hear from folks who are underrepresented – it makes a big difference to whether someone reading your job ad is likely to apply.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#optimise-for-clarity-and-transparency"&gt;
  &lt;/a&gt;
  Optimise for clarity and transparency
&lt;/h2&gt;

&lt;p&gt;What does it take for someone to go from reading your job advert to clicking "Apply"? Turns out that folks from underrepresented groups are less likely to apply for a job when the job description doesn't clearly set expectations. Here are some areas where you want to make sure you provide as much clarity as possible:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The job application process. This includes what the steps are, how long they take and how long the applicant will need to wait for feedback.&lt;/li&gt;
&lt;li&gt;What the role entails. What will the successful candidate's average day look like?&lt;/li&gt;
&lt;li&gt;What does the company do? What is the culture like?&lt;/li&gt;
&lt;li&gt;Benefits and compensation&lt;/li&gt;
&lt;li&gt;Constraints or deal-breakers. For example, is the job remote-friendly? Do you need to live in a specific country? &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#dont-overspecify-requirements"&gt;
  &lt;/a&gt;
  Don't over-specify requirements
&lt;/h2&gt;

&lt;p&gt;We've all seen the classic bulleted list of requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Master's degree in Computer Science&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Node&lt;/li&gt;
&lt;li&gt;Redux&lt;/li&gt;
&lt;li&gt;Postgres&lt;/li&gt;
&lt;li&gt;Woodwork&lt;/li&gt;
&lt;li&gt;Test-driven development&lt;/li&gt;
&lt;li&gt;Jenkins&lt;/li&gt;
&lt;li&gt;90s Sitcom Trivia&lt;/li&gt;
&lt;li&gt;AWS InfiniDash&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How is a person looking at this list supposed to make sense of it? Do they need to have done all of it in order to be considered? What if they're super-experienced with Node and React but haven't used Redux? Are they a bad hire?&lt;/p&gt;

&lt;p&gt;The problem with exhaustive lists of requirements is that they facilitate self-selection: the process where a candidate says to themselves "I don't meet the requirements" and doesn't apply. Research shows that women are less likely to apply for job adverts where they don't match all the listed requirements. Is Redux experience really something worth losing a great candidate over?&lt;/p&gt;

&lt;p&gt;Rather have a short list of the requirements that really matter. Karen Catlin recommends picking the five skills your candidate truly needs and including only those. She also advises that you avoid extra-curricular requirements like a well-populated GitHub profile, as these unnecessarily filter out great candidates.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#describe-experience-instead-of-prescribing-it"&gt;
  &lt;/a&gt;
  Describe experience instead of prescribing it
&lt;/h2&gt;

&lt;p&gt;What makes a software engineer experienced? This question is surprisingly easy to answer wrong. I've worked with self-taught engineers who can code circles around some folks that have an M.Sc. in Computer Science. Ten years of experience could be ten years of doing the same thing repeatedly and learning nothing. Someone else might have learned everything they need to know in a few short years, while working with world-class engineers.&lt;/p&gt;

&lt;p&gt;In the job adverts I put together, I tried an experiment. Instead of prescribing professional experience, I &lt;strong&gt;described&lt;/strong&gt; it. Here's what I mean:&lt;/p&gt;

&lt;p&gt;Traditional prescription of experience:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;At least a Bachelor's degree in Computer Science or related field&lt;/li&gt;
&lt;li&gt;5 years of software development experience&lt;/li&gt;
&lt;li&gt;At least 2 years of experience working with relational databases&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#my-experiment-a-description-of-experience-level"&gt;
  &lt;/a&gt;
  My experiment: a description of experience level
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;This example is for what you might call a "mid-level" engineer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;There is a technical stack in which you feel confident delivering features&lt;/li&gt;
&lt;li&gt;You have a broad base of engineering skills and have started to deepen your knowledge in one or two areas&lt;/li&gt;
&lt;li&gt;You're able to contribute to technical conversations about how to solve problems&lt;/li&gt;
&lt;li&gt;You ask questions about whether you're building the right thing, rather than just about how you're building it&lt;/li&gt;
&lt;li&gt;You've made some technical mistakes and learnt from them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This way, you're building a clear picture of where a person should be at in their career. You're talking about how you might judge someone's experience, rather than providing a box-ticking experience. This approach lets the candidate see what's important to you. If you've got well-articulated descriptions of your company's job grades or salary bands, you might find something there you can re-purpose. As a bonus, this may make salary negotiation fairer because the job requirements will be aligned with your internal promotion and pay processes.&lt;/p&gt;

&lt;p&gt;It is also worth including some wording that encourages folks to apply even if they don't meet all the listed requirements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-some-objective-analysis"&gt;
  &lt;/a&gt;
  Use some objective analysis
&lt;/h2&gt;

&lt;p&gt;Turns out people have done some research into the kind of language turns people away from job adverts. For example, the words we use are subtly "gender-coded". The research shows that you'll turn women away if your job description that is full of masculine-coded words.&lt;/p&gt;

&lt;p&gt;There's a great &lt;a href="http://gender-decoder.katmatfield.com/"&gt;online tool&lt;/a&gt; you can use to highlight gender-coded language in your job description. If you have too much masculine language, you can spend a little time rewording things to be more inclusive.&lt;/p&gt;

&lt;p&gt;For the startup I helped, it turned out the job adverts were "strongly masculine-coded". Some example words included: "leading", "competitors" and "decide".  Remember that none of the words are inherently bad. It's just that, once you have enough of them, your description starts to put people off applying for your job. Rather drop them and appeal to a broader audience. As a plus, the research shows the number of "feminine-coded" language in a job description has no impact on the number of male applicants.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ask-for-feedback"&gt;
  &lt;/a&gt;
  Ask for feedback
&lt;/h2&gt;

&lt;p&gt;Okay, so you've spent some time improving your job advert. Now test it. Reach out to your network and find some people who match the demographic you're trying to reach. Show them your job adverts and ask them how it makes them feel. Implement their suggestions. They'll also let you know if you've said something silly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#better-job-adverts-lead-to-better-candidates"&gt;
  &lt;/a&gt;
  Better job  adverts lead to better candidates
&lt;/h2&gt;

&lt;p&gt;Turns out the trick to attracting applicants from underrepresented backgrounds is simply to write a better job description. If you want to attract the many fantastic software engineers from underrepresented backgrounds, you need to put in a bit of work and create a better job advert. Be clear, be concise and be objective.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;I'd recommend you read &lt;a href="https://betterallies.com/buy/"&gt;The “Better Allies” Approach to Hiring&lt;/a&gt;. It's a great resource, with practical tips (checklists, even) for making your overall hiring process more inclusive.&lt;/p&gt;

</description>
      <category>inclusion</category>
      <category>hiring</category>
      <category>culture</category>
    </item>
    <item>
      <title>Mastering Web Scraping in Python: From Zero to Hero</title>
      <author>Ander Rodriguez</author>
      <pubDate>Thu, 22 Jul 2021 14:00:28 +0000</pubDate>
      <link>https://dev.to/anderrv/mastering-web-scraping-in-python-from-zero-to-hero-4fj4</link>
      <guid>https://dev.to/anderrv/mastering-web-scraping-in-python-from-zero-to-hero-4fj4</guid>
      <description>&lt;p&gt;Website scraping is much more than extracting content with some CSS selectors. We summarized years of expertise in this guide. With all these new tricks and ideas, you'll be able to scrape data reliably, faster, and more performant. And get some extra fields that you thought were not present.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;For the code to work, you will need  &lt;a href="https://www.python.org/downloads/"&gt;python3 installed&lt;/a&gt; . Some systems have it pre-installed. After that, install all the necessary libraries by running &lt;code&gt;pip install&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;requests beautifulsoup4 pandas
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Getting the HTML from a URL is easy with the requests library. Then pass the content to BeautifulSoup, and we can start getting data and querying with selectors. We won't go into much detail. In short, you can use  &lt;a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#css-selectors"&gt;CSS selectors&lt;/a&gt;  to get page elements and content. Some require a different syntax, but we'll discover that later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt; 

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://zenrows.com"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'html.parser'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Web Data Automation Made Easy - ZenRows
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To avoid requesting the HTML every time, we can store it in an HTML file and load BeautifulSoup from there. For a simple demo, we can do this manually. An easy way to do that is to view the page source, copy and paste it into a file. It is essential to visit the page without being logged in, as a crawler would do.&lt;/p&gt;

&lt;p&gt;Getting the HTML in here might look like a simple task, but nothing farther from the truth. We won't cover it in this blog post, but it deserves a complete guide. Our advice is to use this static approach since many websites will redirect you to a login page after a few requests. Some others will show a captcha, and in the worst-case scenario, your IP will get banned.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"test.html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"html.parser"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Web Data Automation Made Easy - ZenRows
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we load statically from a file, we can test as many times as possible without any networking or blocking problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explore-before%C2%A0coding"&gt;
  &lt;/a&gt;
  Explore before Coding
&lt;/h2&gt;

&lt;p&gt;Before we start coding, we have to understand the page's content and structure. For that, the easier way we know is to inspect the target page using a browser. &lt;em&gt;We will be using Chrome's DevTools, but other browsers have similar tools.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can open any product page on Amazon, for example, and a quick look will show us the product's name, price, availability, and many other fields. Before copying all those selectors, we recommend taking a couple of minutes to look for hidden inputs, metadata, and network requests.&lt;/p&gt;

&lt;p&gt;Beware of doing this with Chrome DevTools or similar means. You will see the content once the Javascript and network requests have (maybe) modified it. It is tiresome, but sometimes we must explore the original HTML to avoid running Javascript. We won't need to run a headless browser - i.e., Puppeteer - if we find everything, saving time and memory consumption.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: we won't include the URL request in the code snippets for every example. They all look like the first one. And remember, store an HTML file locally if you are going to test it several times.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hidden-inputs"&gt;
  &lt;/a&gt;
  Hidden Inputs
&lt;/h3&gt;

&lt;p&gt;Hidden inputs allow developers to include input fields that end-users cannot see nor modify. Many forms use these to include internal IDs or security tokens.&lt;/p&gt;

&lt;p&gt;In  &lt;a href="https://www.amazon.com/dp/B08F7PTF54"&gt;Amazon products&lt;/a&gt; , we can see that there are many more. Some will be available in other places or formats, but sometimes they are unique. Either way, hidden inputs' names tend to be more stable than classes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_RqZ1Wb6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yorwy1i8enylbpffuwte.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_RqZ1Wb6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yorwy1i8enylbpffuwte.png" alt="Hidden Inputs on Amazon Products"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#metadata"&gt;
  &lt;/a&gt;
  Metadata
&lt;/h3&gt;

&lt;p&gt;While some content is visible via UI, it might be easier to extract using metadata. You can get view count in numeric format and publish date in YYYY-mm-dd format in a  &lt;a href="https://www.youtube.com/watch?v=tmNXKqeUtJM"&gt;YouTube video&lt;/a&gt; . Those two can be obtained with means from the visible part, but there is no need. Spending a few minutes doing these techniques pays off.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;interactionCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'meta'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"interactionCount"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;interactionCount&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'content'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# 8566042 
&lt;/span&gt;
&lt;span class="n"&gt;datePublished&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'meta'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"datePublished"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datePublished&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'content'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# 2014-01-09
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#xhr-requests"&gt;
  &lt;/a&gt;
  XHR Requests
&lt;/h3&gt;

&lt;p&gt;Some other websites decide to load an empty template and bring all the data via XHR requests. In those cases, checking just the original HTML won't be enough. We need to inspect the networking, specifically the XHR requests.&lt;/p&gt;

&lt;p&gt;That's the case for  &lt;a href="https://www.auction.com/"&gt;Auction&lt;/a&gt; . Fill the form with any city and search. That will redirect you to a results page with a skeleton page while it performs some queries for the city you entered.&lt;/p&gt;

&lt;p&gt;That forces us to use a headless browser that can execute Javascript and intercept network requests, but we'll see its upsides also. Sometimes you can call the XHR endpoint directly, but they usually require cookies or other authentication methods. Or they can instantly ban you since that is not a regular user path. Be careful.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--crIRBCHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uoah8nepgu5ypnhle0ma.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--crIRBCHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uoah8nepgu5ypnhle0ma.png" alt="Auction.com XHR Requests"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We struck gold. Take another look at the image.&lt;/p&gt;

&lt;p&gt;All the data you can have, already clean and formatted, is ready to be extracted. And then some more. Geolocation, internal IDs, numerical price with no format, year built etcetera.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recipes-and-tricks-to-extract-reliable%C2%A0content"&gt;
  &lt;/a&gt;
  Recipes and Tricks to Extract Reliable Content
&lt;/h2&gt;

&lt;p&gt;Set aside your urges for a second. Getting everything with CSS selectors is an option, but there are many more. Take a look at all these, and then think again before using selectors directly. We are not saying those are bad and ours great. Don't get us wrong.&lt;/p&gt;

&lt;p&gt;We are trying to give you more tools and ideas. Then it will be your decision every time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-internal%C2%A0links"&gt;
  &lt;/a&gt;
  Getting Internal Links
&lt;/h3&gt;

&lt;p&gt;Now, we will start using BeautifulSoup to get meaningful content. This library allows us to get content by IDs, classes, pseudo-selectors, and many more. We will only cover a small subset of its capabilities.&lt;/p&gt;

&lt;p&gt;This example will extract all the internal links from the page. For simplicity's sake, only links starting with a slash will be considered internal. In a completer case, we should check domain and subdomains.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;internalLinks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; 
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'href'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'href'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'href'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;internalLinks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have all those links, we could deduplicate and queue them for future scraping. By doing it, we would be building a whole website crawler, not just for one page. Since that is an entirely different problem, we wanted to mention it and prepare a blog post to handle its usage and scalability. The number of pages to crawl can snowball.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Just a note of caution: be prudent while running this automatically. You can get hundreds of links in a few seconds, which would result in too many requests to the same site. If not handled carefully, captchas or bans will probably apply.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extracting-social-links-and%C2%A0emails"&gt;
  &lt;/a&gt;
  Extracting Social Links and Emails
&lt;/h3&gt;

&lt;p&gt;Another common scraping task is to extract social links and emails. There is no exact definition for "social links," so we'll obtain them based on domain. As for emails, there are two options: "mailto" links and checking the whole text.&lt;/p&gt;

&lt;p&gt;We will be using a  &lt;a href="https://www.webscraper.io/test-sites/e-commerce/allinone"&gt;scraping test site&lt;/a&gt;  for this demo.&lt;/p&gt;

&lt;p&gt;This first snippet will get all the links, similar to the previous one. Then loop over all of them, checking if any social domains or "mailto" are present. In that case, add that URL to the list and finally print it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'href'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; 
&lt;span class="n"&gt;to_extract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"facebook.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"twitter.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"mailto:"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="n"&gt;social_links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; 
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;social&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;to_extract&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;social&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
            &lt;span class="n"&gt;social_links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;social_links&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;# ['mailto:****@webscraper.io', 
# 'https://www.facebook.com/webscraperio/', 
# 'https://twitter.com/webscraperio']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This second one is a bit more tricky if you are not familiar with regular expressions. In short, they will try to match any text given a search pattern.&lt;/p&gt;

&lt;p&gt;In this case, it will try to match some characters (mainly letters and numbers), followed by [@], then again chars - the domain - [dot] and finally two to four characters - Internet top-level domains or TLD. It will find, for example, &lt;code&gt;test@example.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that this regex is not a complete one because it won't match composed TLDs such as &lt;code&gt;co.uk&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can run this expression in the entire content (HTML) or just the text. We use the HTML for completion, although we will duplicate the email since it's shown in the text and an href.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;emails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; 
    &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emails&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# ['****@webscraper.io', '****@webscraper.io']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parse-tables-automatically"&gt;
  &lt;/a&gt;
  Parse Tables Automatically
&lt;/h3&gt;

&lt;p&gt;HTML tables have been around forever, but they are still in use for displaying tabular content. We can take advantage of that since they are usually structured and well-formatted.&lt;/p&gt;

&lt;p&gt;Using  &lt;a href="https://en.wikipedia.org/wiki/List_of_best-selling_albums"&gt;Wikipedia's List of best-selling albums&lt;/a&gt;  as an example, we will extract all the values to an array and a pandas dataframe. It is a simple example, but you should manipulate all the data as if it came from a dataset.&lt;/p&gt;

&lt;p&gt;We start by finding a table and looping through all the rows ("tr"). For each of them, find cells ("td" or "th"). The following lines will remove notes and collapsible content from Wikipedia tables, not strictly necessary. Then, append the cell's stripped text to the row and the row to the final output. Print the result to check that everything looks fine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"table"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"sortable"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; 
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tr"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;new_row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; 
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;"td"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"th"&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt; 
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sup&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'sup'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
            &lt;span class="n"&gt;sup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;collapsible&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; 
                &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mw-collapsible-content"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
            &lt;span class="n"&gt;collapsible&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
        &lt;span class="n"&gt;new_row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_text&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
    &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;# [ 
#     ['Artist', 'Album', 'Released', ...], 
#     ['Michael Jackson', 'Thriller', '1982', ...] 
# ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another way is to use &lt;code&gt;pandas&lt;/code&gt; and import directly the HTML, as shown below. It will handle everything for us: the first line will match the headers, and the rest will be inserted as content with the right type. &lt;code&gt;read_html&lt;/code&gt; returns an array, so we take the first item and then remove a column that has no content.&lt;/p&gt;

&lt;p&gt;Once into a dataframe, we could do any operation, like ordering by sales, since pandas converted some columns to numbers. Or sum all the claim sales. Not truly useful here, but you get the idea.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt; 

&lt;span class="n"&gt;table_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;))[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="n"&gt;table_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;table_df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Ref(s)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table_df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# ['Artist', 'Album', 'Released' ... 
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table_df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dtypes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# ... Released int64 ... 
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table_df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Claimed sales*'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;# 422 
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table_df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; 
&lt;span class="c1"&gt;# Artist                     Pink Floyd 
# Album                      The Dark Side of the Moon 
# Released                   1973 
# Genre                      Progressive rock 
# Total certified copies...  24.4 
# Claimed sales*             45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#extract-from-metadata-instead-of%C2%A0html"&gt;
  &lt;/a&gt;
  Extract from Metadata instead of HTML
&lt;/h3&gt;

&lt;p&gt;As seen before, there are ways to get essential data without relying on visual content. Let's see an example using  &lt;a href="https://www.netflix.com/title/80189685"&gt;Netflix's The Witcher&lt;/a&gt; . We'll try to get the actors. Easy, right? A one-liner will do.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;actors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"item-starring"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; 
    &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"title-data-info-item-list"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;','&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;span class="c1"&gt;# ['Henry Cavill', 'Anya Chalotra', 'Freya Allan']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What if I told you that there are fourteen actors and actresses? Will you try to get 'em all? Do not scroll further if you want to try it by yourself. I'll wait.&lt;/p&gt;

&lt;p&gt;Nothing yet? Remember, there's more than meets the eye. You know three of them; search for those in the original HTML. To be honest, there's another place down below that shows the whole cast, but try to avoid it.&lt;/p&gt;

&lt;p&gt;Netflix includes a Schema.org snippet with the actor and actress list and many other data. As with the YouTube example, sometimes it is more convenient to use this approach. Dates, for example, are usually displayed in "machine-like" format, which is more helpful while scraping.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oEYF3NmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kiel0o92th01fd90c4sw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oEYF3NmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kiel0o92th01fd90c4sw.png" alt="Netflix Schema"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt; 

&lt;span class="n"&gt;ldJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"script"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"application/ld+json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;parsedJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ldJson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;actor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;actor&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;parsedJson&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'actors'&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt; 
&lt;span class="c1"&gt;# [... 'Jodhi May', 'MyAnna Buring', 'Joey Batey' ...]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some other times this is a practical approach if we don't want to render Javascript. We'll show an example using  &lt;a href="https://www.instagram.com/billieeilish/"&gt;Instagram Billie Eilish's profile&lt;/a&gt; . They are known blockers. After visiting a few pages, you will be redirected to a login page. Be careful while scraping Instagram and use local HTML for testing.&lt;/p&gt;

&lt;p&gt;We'll cover how to avoid those blocks or redirects in a future post. Stay tuned!&lt;/p&gt;

&lt;p&gt;The usual way would be to search for a class, in our case "Y8-fY". We advise against using these classes since they will probably change. They look autogenerated. Many modern websites use this kind of CSS, and it gets generated for every change, which means that we cannot rely on them.&lt;/p&gt;

&lt;p&gt;Plan B: &lt;code&gt;"header ul &amp;gt; li"&lt;/code&gt;, right? It will work. But we need Javascript rendering for that since it is not present on the first load. As stated before, we should try to avoid that.&lt;/p&gt;

&lt;p&gt;Take a look at the source HTML: title and description include followers, following, and post numbers. It might be a problem since they are in string format, but we can get over it. If we only want that data, we won't need a headless browser. Great!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;metaDescription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"meta"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'description'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metaDescription&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'content'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; 
&lt;span class="c1"&gt;# 87.9m Followers, 0 Following, 493 Posts ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#hidden-ecommerce-product-information"&gt;
  &lt;/a&gt;
  Hidden eCommerce Product Information
&lt;/h3&gt;

&lt;p&gt;Combining some of the techniques already seen, we aim to extract product information that is not visible. Our first example is a Shopify eCommerce,  &lt;a href="https://www.spigen.com/collections/tesla/products/tesla-model-3-ta100-sticker?variant=39270568230959"&gt;Spigen&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;Take a look on your own first if you want.&lt;/p&gt;

&lt;p&gt;Hint: look for the brand 🤐.&lt;/p&gt;

&lt;p&gt;We'll be able to extract it reliably, not from the product name nor the breadcrumbs, since we cannot say if they are always related.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1hEQiTFi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5x58w4pa839j5rswi4v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1hEQiTFi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5x58w4pa839j5rswi4v.png" alt="Spigen Schema Metadata"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Did you find them? In this case, they use "itemprop" and include Product and Offer from schema.org. We could probably tell if a product is in stock by looking at the form or the "Add to cart" button. But there is no need, we can trust on &lt;code&gt;itemprop="availability"&lt;/code&gt;. As for the brand, the same snippet as the one used for YouTube but changing the property name to "brand."&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;brand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'meta'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"brand"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;brand&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'content'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Tesla
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another Shopify example:  &lt;a href="https://nomz.com/collections/energy-bites/products/gift-box?variant=31459597090948"&gt;nomz&lt;/a&gt; . We want to extract the rating count and average, accessible in the HTML but somewhat hidden. The average rating is hidden from view using CSS.&lt;/p&gt;

&lt;p&gt;There's a screen reader only tag with the average and the count near it. Those two include text, not a big deal. But we know we can do better.&lt;/p&gt;

&lt;p&gt;It is an easy one if you inspect the source. The Product schema will be the first thing you see. Applying the same knowledge from the Netflix example, get the first "ld+json" block, parse the JSON, and all the content will be available!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="n"&gt;ldJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"script"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"application/ld+json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parsedJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ldJson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parsedJson&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"aggregateRating"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"ratingValue"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# 4.9
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parsedJson&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"aggregateRating"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"reviewCount"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# 57
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parsedJson&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"weight"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# 0.492kg -&amp;gt; extra, not visible in UI
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Last but not least, we will take advantage of data attributes, which are also common in eCommerce. While inspecting  &lt;a href="https://maruccisports.com/wood-bats/"&gt;Marucci Sports Wood Bats&lt;/a&gt; , we can see that every product has several data points that will come in handy. Price in numeric format, ID, product name, and category. We have there all the data we might need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; 
&lt;span class="n"&gt;cards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cards&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; 
        &lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'data-entity-id'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
        &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'data-name'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
        &lt;span class="s"&gt;'category'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'data-product-category'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
        &lt;span class="s"&gt;'price'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'data-product-price'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;})&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;# [ 
#    { 
#         "category": "Wood Bats, Wood Bats/Professional Cuts", 
#         "id": "1945", 
#         "name": "6 Bat USA Professional Cut Bundle", 
#         "price": "579.99" 
#    }, 
#    { 
#         "category": "Wood Bats, Wood Bats/Pro Model", 
#         "id": "1804", 
#          "name": "M-71 Pro Model", 
#          "price": "159.99" 
#    }, 
#    ... 
# ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#remaining-obstacles"&gt;
  &lt;/a&gt;
  Remaining Obstacles
&lt;/h2&gt;

&lt;p&gt;All right! You got all the data from that page. Now you have to replicate it to a second and then a third. Scale is important. And so is not getting banned.&lt;/p&gt;

&lt;p&gt;But you also have to convert this data and store it: CSV files or databases, whatever you need. Nested fields are not easy to export to any of those formats.&lt;/p&gt;

&lt;p&gt;We already took enough of your time. Take in all this new information, use it in your everyday work. Meanwhile, we'll be working on the following guides to overcoming all these obstacles!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We'd like you to go with three lessons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;CSS selectors are good, but there are other options.&lt;/li&gt;
&lt;li&gt;Some content is hidden - or not present - but accessible via metadata.&lt;/li&gt;
&lt;li&gt;Try to avoid loading Javascript and headless browsers to boost performance.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each of these has upsides and downsides, different approaches, and many, many alternatives. Writing a complete guide would be, well, a long book, not a blog post.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.zenrows.com/contact?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=mastering_scraping"&gt;Contact us&lt;/a&gt;  if you know any more website scraping tricks or have doubts about applying them.&lt;/p&gt;

&lt;p&gt;Remember, we covered scraping, but there is much more: crawling, avoiding being blocked, converting and storing the content, scaling the infrastructure, and more. Stay tuned!&lt;/p&gt;

&lt;p&gt;And if you liked the content, please share it.&lt;/p&gt;




&lt;p&gt;Originally published at  &lt;a href="https://www.zenrows.com/blog/mastering-web-scraping-in-python-from-zero-to-hero?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=mastering_scraping"&gt;https://www.zenrows.com&lt;/a&gt; &lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>My Impressions of Docker Development Containers</title>
      <author>Maina Wycliffe</author>
      <pubDate>Thu, 22 Jul 2021 13:49:54 +0000</pubDate>
      <link>https://dev.to/this-is-learning/my-impressions-of-docker-development-containers-23d4</link>
      <guid>https://dev.to/this-is-learning/my-impressions-of-docker-development-containers-23d4</guid>
      <description>&lt;p&gt;Docker development containers enable developers to set up development environment faster and consistently. With docker development containers, you can configure a container with all required tools and SDKs necessary for a project's development environment, which can easily and consistently be recreated with little to no &lt;strong&gt;hassle&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For instance, take an Angular project, this requires a few things to get started, like Typescript, NodeJS, Angular CLI, etc. This can easily be created using docker and once set up can easily be re-created on demand. As you can imagine, this can have several benefits, which we will look at later.&lt;/p&gt;

&lt;p&gt;On its own, it still leaves much to be desired though. But, a while back the Visual Studio Code team released a pack of extensions for remote development. These extensions enabled you to work with development environment hosted remotely such as docker containers, among others and continue with development workflow as you would if they were on your local PC.&lt;/p&gt;

&lt;p&gt;Combined with VS Code Remote - Container's extension, part of &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers"&gt;Visual Studio Remote extensions pack&lt;/a&gt;, which enables you to use docker as a full-fledged development environment. The Remote Container extension, provides you with tools to connect to a docker container and carry on with your development workflow on the container. &lt;/p&gt;

&lt;p&gt;On top of that, it provides tools to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generate Docker Environment Configurations for different environment requirements like Typescript, Golang, etc. This allows you fine-grained control over your development environment with exactly the dependencies you need to enable your development workflow. &lt;/li&gt;
&lt;li&gt;Clone a repository directly to docker containers. You can target different branches and PRs, allowing you to have a development environment per PR if need be.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#benefits-for-development"&gt;
  &lt;/a&gt;
  Benefits For Development
&lt;/h2&gt;

&lt;p&gt;For one, since docker containers are isolated environments, collision between different development environment dependencies is greatly reduced if not entirely eliminated. How many times have you required to have different versions of the same dependency installed, for instance NodeJS? Docker development container would eliminate such collisions entirely, reducing the need for tools such as NVM.&lt;/p&gt;

&lt;p&gt;Secondly, it is easier to onboard developers, as the development environment are already specified and it's a matter of building the containers. This makes it easy to onboard developers as they can set up their environment faster and go straight to understanding what actually matters to the organization. &lt;/p&gt;

&lt;p&gt;On top of on boarding new developers, reviewing PRs is easier, as you can easily and quickly create a new development environment per PR for review purpose. VS Code remote container extension provides you with tools to enable clone repository, branches or PRs into development containers, making this a more viable approach.&lt;/p&gt;

&lt;p&gt;Another key benefit is keeping your development environments up to date across team members becomes easier. When you come back from a vacation, with a single command, you can update your development environment making easy to continue as if you never left with little to no hinderances. &lt;/p&gt;

&lt;p&gt;Fully compatibility with GitHub Code Spaces. GitHub code spaces is a remote development environment that uses docker development containers under the hood. While still in beta and a lot could change, as of the moment of writing, they are fully compatible. This means that you can easily take your development environment on the road without needing to configure anything after the initial configuration. GitHub code spaces will provide you with all the computing power you need while on the road.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h2&gt;

&lt;p&gt;Steep learning curve. While VS Code helps to set up common development environments like NodeJS, Typescript, etc., setting a fine-grained environment will require you to understand docker and dockerfiles. This can be a barrier to people who aren't familiar to docker and adds an extra barrier to getting up to speed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we looked at Docker development containers and the benefits of using them. I am hoping that the benefits we looked at above convinced you to give docker development containers a try. &lt;/p&gt;

&lt;p&gt;If you are looking to get started, here some resources for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/remote/containers"&gt;Developing inside a Container using Visual Studio Code Remote Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/language/nodejs/develop/"&gt;Use containers for development | Docker Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/develop/"&gt;Develop with Docker | Docker Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>docker</category>
      <category>vscode</category>
      <category>tooling</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Integrate Video Conferencing API To Your Platform</title>
      <author>Sagar Kava</author>
      <pubDate>Thu, 22 Jul 2021 13:24:23 +0000</pubDate>
      <link>https://dev.to/sagarkava/how-to-integrate-video-conferencing-to-your-platform-1djm</link>
      <guid>https://dev.to/sagarkava/how-to-integrate-video-conferencing-to-your-platform-1djm</guid>
      <description>&lt;p&gt;Integrate and Embed high quality live Video conferencing API &amp;amp; SDK to your website and easy integration in just 10 minutes! Make Conversations more engaging by integrating 1-Click video platform on your web.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-video-conferencing-api"&gt;
  &lt;/a&gt;
  What are video conferencing API?
&lt;/h3&gt;

&lt;p&gt;Video conferencing API (Application Programmer’s Interface) is basically like a middle-man between a client’s web browser, and some back-end service that you build or use. An API service can read and write information to a database, for example&lt;/p&gt;

&lt;p&gt;If you are using a website that uses some kind of video conferencing, your web browser is getting your inputs, like your microphone, camera, or a stream of your desktop which can be sent through such an API to a video conferencing service. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-whats-the-purpose-of-video-conferencing-api-for-your-business-collaboration"&gt;
  &lt;/a&gt;
  So What’s the Purpose of Video conferencing API for Your Business Collaboration?
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#the-video-conferencing-api-and-offer-several-benefits-where-two-main-bonuses-are-significant"&gt;
  &lt;/a&gt;
  The video conferencing API and offer several benefits where two main bonuses are significant.
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Faster Software Delivery (Time-to-market Value)&lt;/strong&gt; : The robust APIs help businesses in creating video conference platforms with tools and infrastructure that are easy and quick to implement on cross-platforms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Saves Quite a Lot of Resources&lt;/strong&gt; : With different features enabled APIs and SDKs, developers or experts can integrate any specific chat functionality on any platform with less time consumption. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#embed-video-conferencing-in-your-application-and-web-in-just-10-minutes"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Embed video conferencing in your application and web in just 10 minutes!&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Following our announcement on launching the pre-built in the previous blog, we are excited to deliver the manual for the same. This blog will get the readers up and running with the pre-built in no time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-embed-video-callsconferencing-prebuilt"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How to embed video callsconferencing pre-built&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Embedding a video conferencing to your application becomes easy with &lt;a href="https://videosdk.live"&gt;Videosdk.live&lt;/a&gt;. With our Pre-built, you can add video conferencing on your website and application with just a few lines of code and nothing could be simpler than this. You can share URLs to the participants for the video calls and accommodate more than &lt;strong&gt;5000 people&lt;/strong&gt; over the same call.&lt;/p&gt;

&lt;p&gt;We provide you with a free set-up to experience how to use our prebuilt so you can make the best of it. We also offer you &lt;strong&gt;10,000 minutes, free every month.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Prebuilt SDK enables the opportunity to integrate real-time communication SDK without writing explicit code. It supports all modern javascript frameworks such as React JS, Vue, and Angular including Vanilla JS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-get-started-follow-the-steps"&gt;
  &lt;/a&gt;
  &lt;strong&gt;To get started, follow the steps&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;For better understanding, we have divided the prebuilt setup into few steps. Each step describes the code snippet that one needs to use while constructing integrating the SDK.&lt;/p&gt;

&lt;p&gt;The prebuilt has codes that sometimes become difficult for a fresher or an inexperienced developer. In that case, one can take the help of a developer to configure the setup. In aid, you can always reach us, we provide 24/7 customer support for our clients.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video-calls-with-videosdklive-offer-users-amazing-features-with-quality-as-our-prior-most-concern"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Video calls with Videosdk.live offer users amazing features with quality as our prior most concern.&lt;/strong&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;10,000 minutes free each month&lt;/li&gt;
&lt;li&gt;Participant capacity up to 5,000&lt;/li&gt;
&lt;li&gt;End-to-end encrypted calls&lt;/li&gt;
&lt;li&gt;HIPAA Compliance in enterprise mode&lt;/li&gt;
&lt;li&gt;HD and Full HD Video calls&lt;/li&gt;
&lt;li&gt;Audio support of 16kHz to 48kHz&lt;/li&gt;
&lt;li&gt;360 Spatial Audio&lt;/li&gt;
&lt;li&gt;Intelligence Active Speaker Switch&lt;/li&gt;
&lt;li&gt;Real-time messaging&lt;/li&gt;
&lt;li&gt;Cloud recording&lt;/li&gt;
&lt;li&gt;Whiteboard and poll support&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's begin with the prebuilt setup. Read all the steps carefully before installing one in your application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-0-generate-access-token-in-node-js"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 0:&lt;/strong&gt; Generate access token in Node JS
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Access token generation (server-side code)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An access token is required to authenticate with Videosdk and make any API calls. You can generate one with the _ &lt;strong&gt;API key&lt;/strong&gt; _ and _ &lt;strong&gt;secret&lt;/strong&gt; _ mentioned in your developer portal at the Videosdk console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require("express");
const jwt = require("jsonwebtoken");
const cors = require("cors");
const request = require("request");

const app = express();
const port = 9000;
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.get("/get-token", (req, res) =&amp;gt; {
  const API_KEY = process.env.ZUJONOW_API_KEY;
  const SECRET_KEY = process.env.ZUJONOW_SECRET_KEY;
  const options = { expiresIn: "10m", algorithm: "HS256" };
  const payload = {
    apikey: API_KEY,
    permissions: ["allow_join", "allow_mod", "ask_join"], // Trigger permission.
  };
  const token = jwt.sign(payload, SECRET_KEY, options);
  res.json({ token });
});

app.listen(port, () =&amp;gt; {
  console.log(`Example app listening at http://localhost:${port}`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://docs.videosdk.live/docs/tutorials/realtime-communication/prebuilt-sdk/quickstart-prebuilt-js"&gt;Documentation&lt;/a&gt;&lt;br&gt;
The available permissions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;_ &lt;strong&gt;allow_join&lt;/strong&gt; _: A participant will be permitted entry without request&lt;/li&gt;
&lt;li&gt;_ &lt;strong&gt;ask_join&lt;/strong&gt; _: A participant will not be permitted entry without request&lt;/li&gt;
&lt;li&gt;_ &lt;strong&gt;allow_mod&lt;/strong&gt; _: Allow participant to enable/disable other participant’s mic/ webcam&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The generated token must be sent in the _ &lt;strong&gt;Authorization&lt;/strong&gt; _ header for all API calls and it should also be used with the &lt;strong&gt;ZujoSDK.config(token&lt;/strong&gt;) method.&lt;/p&gt;

&lt;p&gt;After the initial step of access token generation, one reaches the next or the first step, creating or joining the meeting.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-1-create-or-join-the-meeting"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 1: Create or join the meeting&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Get a meeting ID for a new meeting or validate an existing meeting ID to join a meeting. Below mentioned are two code snippets, where one is for a new meeting and the other one is for an existing meeting for joining.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a new meeting ID&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.post("/create-meeting/", (req, res) =&amp;gt; {
  const token = req.body.token;
  const ZUJONOW_API_ENDPOINT = `${ZUJONOW_API_ENDPOINT}/api/meetings`;

  const options = {
    method: "POST",
    headers: {
      Authorization: token,
    },
  };

  fetch(ZUJONOW_API_ENDPOINT, options)
    .then((response) =&amp;gt; response.json())
    .then((result) =&amp;gt; res.json(result)) // result will contain meetingId
    .catch((error) =&amp;gt; throw error);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Validate existing meeting ID for joining&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.get("/validate-meeting/:token", (req, res) =&amp;gt; {
  const token = req.params.token;
  const ZUJONOW_API_ENDPOINT = `${ZUJONOW_API_ENDPOINT}/api/meetings`;

  const options = {
    method: "POST",
    headers: {
      Authorization: token,
    },
  };

  fetch(ZUJONOW_API_ENDPOINT, options)
    .then((response) =&amp;gt; response.json())
    .then((result) =&amp;gt; res.json(result)) // result will contain meetingId
    .catch((error) =&amp;gt; throw error);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://docs.videosdk.live/docs/tutorials/realtime-communication/prebuilt-sdk/quickstart-prebuilt-js"&gt;Documentation&lt;/a&gt;&lt;br&gt;
These two code snippets are the initial ones taking you further to the next part of the prebuilt, where you need to install the prebuilt in the web application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Install prebuilt SDK in your Web app&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One can install the prebuilt in your application by using either the &lt;strong&gt;script&lt;/strong&gt; or the &lt;strong&gt;npm package manager.&lt;/strong&gt; Please use the installation method suitable for your project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting up prebuilt SDK using&lt;/strong&gt; _ &lt;strong&gt;&lt;/strong&gt; _&lt;/p&gt;

&lt;p&gt;The easiest way to get started is by just adding our prebuilt script to your website.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://sdk.videosdk.live/embedded/index.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting up prebuilt SDK using NPM package manager&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another way is by installing _ &lt;strong&gt;@videosdk.live/js-prebuilt&lt;/strong&gt; _ in your app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @videosdk.live/js-prebuilt

#OR#

yarn add @videosdk.live/js-prebuilt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Heading towards the final steps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Add script into your application&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Initialize _ &lt;strong&gt;VideoSDKMeeting&lt;/strong&gt; _ on the page where you want to start the meeting&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const videoMeeting = new VideoSDKMeeting();

const videoMeetingSpecs = {
  micEnabled: true,
  webcamEnabled: true,
  name: "/* NAME OF PARTICIPANT */",
  meetingId: "/* MEETING ID */",
  redirectOnLeave: "/* REDIRECT ON LEAVE */",
  chatEnabled: true,
  screenShareEnabled: true,
  pollEnabled: true,
  whiteBoardEnabled: true,
  participantCanToggleSelfWebcam: true,
  participantCanToggleSelfMic: true,
  raiseHandEnabled: true,
  token: "/* YOUR TOKEN */",
  containerId: null,
};

videoMeeting.init(videoMeetingSpecs);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just copy the script and paste it into your application on the page where you want the meeting to take place.&lt;/p&gt;

&lt;p&gt;Hold on! There is one final step.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Run the Application&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once call _ &lt;strong&gt;init&lt;/strong&gt; _ and run the application, you will be able to see the meeting screen.&lt;/p&gt;

&lt;p&gt;Run the application with the prebuilt. Here is the video call API on your application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That’s it. You made it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Send the invite code to the participants or just open the same page in multiple tabs to join the meeting and appreciate yourself investing time on worthwhile goals.&lt;/p&gt;

&lt;p&gt;Connect with us. We are happy to serve you!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#find-our-documentation-here-documentation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Find our documentation here:&lt;/strong&gt;  &lt;strong&gt;&lt;a href="https://docs.videosdk.live/docs/tutorials/realtime-communication/prebuilt-sdk/quickstart-prebuilt-js"&gt;Documentation&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Quickstart for Prebuilt JS | videosdk.live Documentation&lt;/p&gt;

&lt;p&gt;videosdk.live tutorials will help you to deep dive into details of all the SDK and API. We tried to include example of all the possible programming langaguges.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-10000-minutes-free-every-month"&gt;
  &lt;/a&gt;
  🚀Get 10,000 minutes free every month🚀
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J2lZAuF0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://blog.videosdk.live/content/images/2021/07/Untitled-design--7--1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J2lZAuF0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://blog.videosdk.live/content/images/2021/07/Untitled-design--7--1.gif" alt="Launching: Prebuilt Video SDK for developers 1.0"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
      <category>chat</category>
    </item>
    <item>
      <title>NATO Condemns Cyberattack, Pegasus Cyber Espionage Tool, Steam’s New Console, &amp; more on DevNews!</title>
      <author>dev.to staff</author>
      <pubDate>Thu, 22 Jul 2021 13:23:44 +0000</pubDate>
      <link>https://dev.to/devteam/nato-condemns-cyberattack-pegasus-cyber-espionage-tool-steam-s-new-console-more-on-devnews-kjb</link>
      <guid>https://dev.to/devteam/nato-condemns-cyberattack-pegasus-cyber-espionage-tool-steam-s-new-console-more-on-devnews-kjb</guid>
      <description>&lt;p&gt;Season 5 of the DevNews podcast is here!&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devnews/s5-e1-pegasus-cyber-espionage-tool-steam-s-new-console-gunshot-detecting-tech-and-nato-condemns-a-cyberattack"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S5:E1 - Pegasus Cyber Espionage Tool, Steam’s New Console, Gunshot-Detecting Tech, and NATO Condemns a Cyberattack&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devnews"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevNews  

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s5-e1-pegasus-cyber-espionage-tool-steam-s-new-console-gunshot-detecting-tech-and-nato-condemns-a-cyberattack" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s5-e1-pegasus-cyber-espionage-tool-steam-s-new-console-gunshot-detecting-tech-and-nato-condemns-a-cyberattack" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s5-e1-pegasus-cyber-espionage-tool-steam-s-new-console-gunshot-detecting-tech-and-nato-condemns-a-cyberattack" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s5-e1-pegasus-cyber-espionage-tool-steam-s-new-console-gunshot-detecting-tech-and-nato-condemns-a-cyberattack" alt="DevNews" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJPvwj98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XOSCOlKI--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s5-e1-pegasus-cyber-espionage-tool-steam-s-new-console-gunshot-detecting-tech-and-nato-condemns-a-cyberattack"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devnews/s5-e1-pegasus-cyber-espionage-tool-steam-s-new-console-gunshot-detecting-tech-and-nato-condemns-a-cyberattack"&gt;
      &lt;img id="episode-profile-image" alt="S5:E1 - Pegasus Cyber Espionage Tool, Steam’s New Console, Gunshot-Detecting Tech, and NATO Condemns a Cyberattack" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--84VpOv6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3GWkSFQs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Hosts:&lt;/strong&gt; &lt;a class="mentioned-user" href="https://dev.to/saronyitbarek"&gt;@saronyitbarek&lt;/a&gt;
 &amp;amp; &lt;a class="mentioned-user" href="https://dev.to/joshpuetz"&gt;@joshpuetz&lt;/a&gt;
 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Guest:&lt;/strong&gt; &lt;a href="https://twitter.com/marcusjcarey"&gt;Marcus Carey&lt;/a&gt;, Enterprise Architect @ ReliaQuest &lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devnews"&gt;follow DevNews&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; &lt;em&gt;— or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Quick Listening Links&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s5-e1-pegasus-cyber-espionage-tool-steams-new-console/id1525581923?i=1000529678334"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/78vzczaR9YWT1b2b3c4dkJ"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cDovL2ZlZWRzLmNvZGVuZXdiaWUub3JnL2Rldm5ld3NfcG9kY2FzdC54bWw/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZuZXdzLzMz?sa=X&amp;amp;ved=0CAQQkfYCahcKEwjY1ebY4vbxAhUAAAAAHQAAAAAQCA"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.stitcher.com/show/devnews/episode/s5-e1-pegasus-cyber-espionage-tool-steams-new-console-gunshot-detecting-tech-and-nato-condemns-a-cyberattack-85594899"&gt;Stitcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devnews-dev-fH8hvsClkWp/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevNews-p1352512/?topicId=164637671"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.herokuapp.com/podcasts/devnews/episodes/174"&gt;DEV Pods website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  &lt;em&gt;Acknowledgements&lt;/em&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Our season five sponsor, &lt;a href="https://scoutapm.com/devnews"&gt;Scout APM&lt;/a&gt; ❤️ &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We hope you enjoy the season premiere of DevNews!&lt;/p&gt;

</description>
      <category>news</category>
      <category>podcast</category>
    </item>
  </channel>
</rss>
