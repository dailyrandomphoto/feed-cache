<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Polyfills in JavaScript 🔧⚙</title>
      <author>Suryaraj Bhaduri</author>
      <pubDate>Fri, 14 Jan 2022 18:05:19 +0000</pubDate>
      <link>https://dev.to/suryaraj1/polyfills-in-javascript-13kd</link>
      <guid>https://dev.to/suryaraj1/polyfills-in-javascript-13kd</guid>
      <description>&lt;p&gt;Who doesn't want their web apps to perform flawlessly across all web browsers i.e be &lt;strong&gt;cross-browser compatible&lt;/strong&gt;! But with more and more new features coming to JavaScript, many old browsers now do not have support for all of them.❗💀&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Polyfills&lt;/strong&gt; is the solution to the problem.🌈✨&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Basic JavaScript (if, else, for-loops, etc.)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;this&lt;/code&gt; keyword&lt;/li&gt;
&lt;li&gt;Prototype (can read from this &lt;a href="https://www.javascripttutorial.net/javascript-prototype/"&gt;link&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Higher order functions e.x &lt;code&gt;map()&lt;/code&gt;, &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;reduce()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Will to learn 🚀&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-polyfill"&gt;
  &lt;/a&gt;
  What is a Polyfill?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Polyfill&lt;/strong&gt; is a piece of code that is used to bring support for newer features in older browsers that currently do not have native support for these features.&lt;br&gt;
For example, suppose JavaScript releases a new function, say &lt;code&gt;x&lt;/code&gt; as a part of their language iteration. Now some older browsers might not have support for this function. But we developers would want our apps to be cross-browser compatible. Polyfills help us in making this possible with custom code.👨‍💻&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note📝- To code the polyfill for any feature, one must first be aware of the internal workings and specifications of the same.⚙&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#polyfill-demo"&gt;
  &lt;/a&gt;
  Polyfill Demo 🚀
&lt;/h2&gt;

&lt;p&gt;Enough talk, we need some code now.🤓👨‍💻&lt;/p&gt;

&lt;p&gt;For the sake of this blog we would be coding polyfills of three higher-order functions which were added to JavaScript as a part of ES5, namely &lt;code&gt;map()&lt;/code&gt;, &lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;reduce()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;❌ &lt;strong&gt;Disclaimer&lt;/strong&gt; - By no means should this be considered a guide to using the aforementioned higher-order functions.&lt;/p&gt;

&lt;p&gt;That being said, take a look at the following image for a refresher of these functions if you're feeling a bit rusty.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZCsjRBRf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8twv4je0nn21kgli4fia.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZCsjRBRf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8twv4je0nn21kgli4fia.jpg" alt="Higher Order Functions" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#polyfill-for-map"&gt;
  &lt;/a&gt;
  Polyfill for Map
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The &lt;code&gt;map()&lt;/code&gt; method creates a new array populated with the results of calling a provided function on every element in the calling array - MDN Web Docs&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's look at the following code. The code here is for -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;computing squares of numbers of a given array&lt;/li&gt;
&lt;li&gt;alternate casing of characters of a string (if the index is even , the character should be in uppercase else lowercase, e.x. &lt;code&gt;polyfill&lt;/code&gt; =&amp;gt; &lt;code&gt;PoLyFiLl&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2YOveO5q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ld3ttde02vnr2wogghwl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2YOveO5q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ld3ttde02vnr2wogghwl.png" alt="Map code" width="880" height="426"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, the fun part🌈!!&lt;br&gt;
Let's code the basic polyfill i.e our custom implementation for the &lt;code&gt;map&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Take a look at the following code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--10m1gZad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/se9s45ewexdd2ir7wjsv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--10m1gZad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/se9s45ewexdd2ir7wjsv.png" alt="Basic map polyfill" width="880" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👉Steps to code the polyfill for &lt;code&gt;map&lt;/code&gt; - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have a clear understanding of how &lt;code&gt;map()&lt;/code&gt; works&lt;/li&gt;
&lt;li&gt;Create a function, which here we have named &lt;code&gt;customMap&lt;/code&gt; and attach it to &lt;code&gt;Array.prototype&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Pass a function as an argument that would be run over every element (this resembles the &lt;code&gt;callback&lt;/code&gt; in &lt;code&gt;map&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Create a new array that is initially empty&lt;/li&gt;
&lt;li&gt;Loop over every element of the array using &lt;code&gt;this&lt;/code&gt; and push every new element to the new array&lt;/li&gt;
&lt;li&gt;Finally return the output array&lt;/li&gt;
&lt;li&gt;Voila!! 🎉🎉 You're ready with your first polyfill!!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's put our &lt;code&gt;customMap&lt;/code&gt; to the test.🚀🚀&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PgwzguO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rdykg3iuye4l8nk6acfq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PgwzguO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rdykg3iuye4l8nk6acfq.png" alt="Polyfill map use" width="880" height="526"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our polyfill passed the test i.e it yields the same results as the original &lt;code&gt;map&lt;/code&gt; function.✅✅&lt;/p&gt;

&lt;p&gt;Next, let's move to the &lt;code&gt;filter&lt;/code&gt; function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#polyfill-for-filter"&gt;
  &lt;/a&gt;
  Polyfill for Filter
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The &lt;code&gt;filter()&lt;/code&gt; method creates a new array with all elements that pass the test implemented by the provided function. - MDN Web Docs&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's look at the following code. The code here is for - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;filtering out all odd numbers from a given array of numbers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M534RhVj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggjhw56imrkj0gj2u4q0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M534RhVj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggjhw56imrkj0gj2u4q0.png" alt="Filter code" width="880" height="371"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, time to code the basic polyfill for the &lt;code&gt;filter&lt;/code&gt; function.🌈&lt;/p&gt;

&lt;p&gt;Look at the following code for better understanding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YUGe7DOG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0gntzar4nmdvm6u5q9a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YUGe7DOG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0gntzar4nmdvm6u5q9a.png" alt="Basic Filter polyfill" width="880" height="349"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👉Steps to code our &lt;code&gt;filter&lt;/code&gt; polyfill - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have a clear understanding of &lt;code&gt;filter()&lt;/code&gt; and how it works&lt;/li&gt;
&lt;li&gt;Create a function, which here we have named &lt;code&gt;customFilter&lt;/code&gt; and attach it to &lt;code&gt;Array.prototype&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Pass a function as an argument that would be run for each element &lt;/li&gt;
&lt;li&gt;Create a new empty array to store the filtered items&lt;/li&gt;
&lt;li&gt;Loop over the array items using &lt;code&gt;this&lt;/code&gt; and push only those items to the new array which satisfy the test&lt;/li&gt;
&lt;li&gt;Finally return the output array containing filtered items&lt;/li&gt;
&lt;li&gt;Superb!!🎉🎉 You have coded your &lt;code&gt;filter&lt;/code&gt; polyfill!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Similar to the above, let's put our &lt;code&gt;customFilter&lt;/code&gt; to the test.😅&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S5Mh8hcq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32lt62lwp8vaddcn53po.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S5Mh8hcq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32lt62lwp8vaddcn53po.png" alt="Filter polyfill run" width="880" height="344"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our polyfill for &lt;code&gt;filter&lt;/code&gt; yields the same result as using the inbuilt &lt;code&gt;filter&lt;/code&gt; function!!✅✅&lt;/p&gt;

&lt;p&gt;We've almost reached the end of the blog.🏁 Next, we would quickly cover the &lt;code&gt;reduce&lt;/code&gt; function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#polyfill-for-reduce"&gt;
  &lt;/a&gt;
  Polyfill for Reduce
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The &lt;code&gt;reduce()&lt;/code&gt; method executes a user-supplied “reducer” callback function on each element of the array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value. - MDN Web Docs&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's look at the code below. The code here -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;computes the sum of all elements of an array&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_V3srtO8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp0c4whcvm1pke2ygt9i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_V3srtO8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp0c4whcvm1pke2ygt9i.png" alt="Reduce code" width="880" height="268"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's try and write the basic polyfill for &lt;code&gt;reduce&lt;/code&gt; function. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;✔Recommended&lt;/strong&gt; - First try on your own and then proceed to the code below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pIGVrWS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/griiun46mvz9a6ibqmpb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pIGVrWS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/griiun46mvz9a6ibqmpb.png" alt="Polyfill for reduce" width="880" height="365"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's try testing whether our polyfill code works or not!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WtdezfFJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwy94ikqfkom4an6erx1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WtdezfFJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwy94ikqfkom4an6erx1.png" alt="Reduce polyfill run" width="880" height="321"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Awesome!! 🎉🎉 This also yields the same result as before.&lt;/p&gt;

&lt;p&gt;If you made it this far, pat your back. You're awesome!🌈🚀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-history-of-polyfill"&gt;
  &lt;/a&gt;
  Bonus🦄 - History of Polyfill
&lt;/h2&gt;

&lt;p&gt;The name Polyfill comes from the name of a product used to cover cracks and holes on a wall, called &lt;em&gt;Polyfilla&lt;/em&gt;. The term was coined by Remy Sharp while writing his book "Introducing HTML5" back in 2009. &lt;/p&gt;

&lt;p&gt;📕Can read more about this - &lt;a href="https://remysharp.com/2010/10/08/what-is-a-polyfill"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Congratulations!!&lt;/strong&gt; 🎉🎉 You made it till the end. If you're still here chances are you probably liked the blog. &lt;/p&gt;

&lt;p&gt;I am still learning Polyfills. Hope this blog gave you a decent introduction to what they are.&lt;/p&gt;

&lt;p&gt;Do let me know how you liked the blog and where I need to improve. Would be eagerly waiting for feedback!🙂&lt;/p&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Types of Angular Module</title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Fri, 14 Jan 2022 17:44:35 +0000</pubDate>
      <link>https://dev.to/this-is-angular/types-of-angular-module-amd</link>
      <guid>https://dev.to/this-is-angular/types-of-angular-module-amd</guid>
      <description>&lt;p&gt;Today we will understand about the different types of modules you can have in an application. If you are not aware of Angular Modules then I would suggest you to go through this  &lt;a href="https://dev.to/this-is-angular/understanding-angular-modules-41pb"&gt;post&lt;/a&gt;. Also you need to know how to create your own module. For that you can have a look at this &lt;a href="https://dev.to/this-is-angular/creating-custom-module-in-angular-4p66"&gt;post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;📣 &lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
This will be more of theory where we will understand the requirement of different types of modules. It can be different puzzle pieces for you as of now. But in coming posts I will cover all the module type with example. And then you will be able to see the puzzle completed. &lt;/p&gt;




&lt;p&gt;Before diving deep first lets understand why we need various types of modules. (By the way one of the module type we already saw in the earlier &lt;a href="https://dev.to/this-is-angular/creating-custom-module-in-angular-4p66"&gt;post&lt;/a&gt;). &lt;br&gt;
As your application grows in size you need to break/ group the application into various chunks for -&lt;/p&gt;

&lt;p&gt;&lt;code&gt;maintainability&lt;/code&gt;, &lt;br&gt;
&lt;code&gt;enhance the performance&lt;/code&gt;, &lt;br&gt;
&lt;code&gt;scalability&lt;/code&gt;, &lt;br&gt;
&lt;code&gt;easy deployment&lt;/code&gt;, &lt;br&gt;
&lt;code&gt;enhance the development process&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To meet the above requirement &lt;code&gt;module&lt;/code&gt; can be a key player (best friend).&lt;/p&gt;

&lt;p&gt;There are &lt;strong&gt;six&lt;/strong&gt; (6) types of modules an application can have (depending on the requirement. Not necessary an application should have all the six)&lt;/p&gt;

&lt;p&gt;1️⃣ Root Module (🔴 Mandatory 🔴)&lt;br&gt;
2️⃣ Feature Module (🟡 Optional 🟡)&lt;br&gt;
3️⃣ Routing Module ( 🟡 Optional 🟡)&lt;br&gt;
4️⃣ Service Module (🟡 Optional 🟡)&lt;br&gt;
5️⃣ Widget Module (🟡 Optional 🟡)&lt;br&gt;
6️⃣ Shared Module (🟡 Optional 🟡)&lt;/p&gt;

&lt;p&gt;1️⃣ &lt;strong&gt;Root Module&lt;/strong&gt;&lt;br&gt;
I bet you have already seen a glimpse of this module.&lt;br&gt;
When you create an Angular application for the first time you are provided with a module &lt;code&gt;app.module.ts&lt;/code&gt; remember???&lt;br&gt;
This is the root module (you can think this as the parent, all other modules will be directly or indirectly part of this module.&lt;br&gt;
Only &lt;strong&gt;one&lt;/strong&gt; root module is allowed in an application.&lt;/p&gt;

&lt;p&gt;2️⃣ &lt;strong&gt;Feature Module&lt;/strong&gt;&lt;br&gt;
In a large application (say an eCommerce application like amazon) with multiple different features you need to break the application into smaller chunks depending on the features (like users, product, payment etc.)&lt;br&gt;
These smaller chunks can be grouped under modules known as the Feature module.&lt;br&gt;
As an analogy you can think like you have a parent folder called entertainment under that you have different subcategory or folders like music, movies, games, photos etc. This subfolders you can think as feature module. All related items are grouped under one module.&lt;/p&gt;

&lt;p&gt;3️⃣ &lt;strong&gt;Routing Module&lt;/strong&gt;&lt;br&gt;
When an application has the navigation feature (more than one screen to display) then the routing module comes into play. In this scenario the Routing module is &lt;strong&gt;required&lt;/strong&gt;. &lt;br&gt;
If you are interested to know more about routing module you can have a look at this &lt;a href="https://dev.to/anubhab5/setting-up-angular-routing-from-scratch-1i07"&gt;post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;4️⃣ &lt;strong&gt;Service Module&lt;/strong&gt; - (I will talk in detail very soon)&lt;br&gt;
Modules that contain only services (can be utility services).&lt;br&gt;
The service module must be present only at the &lt;strong&gt;root module&lt;/strong&gt; .&lt;br&gt;
Once I talk about services this part would be more clearer to you.&lt;/p&gt;

&lt;p&gt;5️⃣ &lt;strong&gt;Widget Module&lt;/strong&gt;&lt;br&gt;
The third party UI component library module which exposes components/ pipes/ directives (in the export array) can be considered as widget module.&lt;br&gt;
For example you have built a table component and you want to share it with other teams in your org. The module which contains the table component can be considered as a widget module.&lt;br&gt;
The other team would be importing your module and use the table.&lt;/p&gt;

&lt;p&gt;6️⃣ &lt;strong&gt;Shared Module&lt;/strong&gt;&lt;br&gt;
The commonly used components/ directives/ pipes which are used across the application in different modules are put in a special module called the &lt;code&gt;shared module&lt;/code&gt;.&lt;br&gt;
Now consider you have made a table component. This table component need to be used in different screens of &lt;u&gt;your&lt;/u&gt; application across different modules. The only way you can do is by using the &lt;em&gt;Shared Module&lt;/em&gt;.&lt;/p&gt;




&lt;p&gt;Hope you enjoyed reading the post (only theory but this knowledge will be helpful in the coming days. Trust Me)&lt;/p&gt;

&lt;p&gt;If you liked it please do &lt;em&gt;like&lt;/em&gt; &lt;em&gt;share&lt;/em&gt; and &lt;em&gt;comment&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Coming up next &lt;em&gt;Communication between components&lt;/em&gt;.&lt;br&gt;
So stay tuned.&lt;/p&gt;

&lt;p&gt;I will be &lt;a href="https://twitter.com/Anubhab_0905"&gt;tweeting&lt;/a&gt; more on &lt;code&gt;Angular&lt;/code&gt; &lt;code&gt;JavaScript&lt;/code&gt; &lt;code&gt;TypeScript&lt;/code&gt; &lt;code&gt;CSS&lt;/code&gt;&lt;br&gt;
So hope to see you there too 😃&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cheers&lt;/strong&gt;!!!&lt;br&gt;
&lt;em&gt;Happy Coding&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>beginners</category>
      <category>typescript</category>
      <category>modules</category>
    </item>
    <item>
      <title>Access the Windows file system through WSL!</title>
      <author>Ivaylo Ivanov</author>
      <pubDate>Fri, 14 Jan 2022 17:38:34 +0000</pubDate>
      <link>https://dev.to/ivayloiv/access-the-windows-file-system-through-wsl-1ac4</link>
      <guid>https://dev.to/ivayloiv/access-the-windows-file-system-through-wsl-1ac4</guid>
      <description>&lt;p&gt;Have you ever wondered, how to access the windows file system through WSL? If the answer is yes you are in the right place!&lt;/p&gt;

&lt;p&gt;Microsoft WSL has given us an incredible way to access the windows file system, you have just to navigate through an exact path to do it. Without further due, let's dive into the topic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-use-the-cd-command-in-the-linux-terminal"&gt;
  &lt;/a&gt;
  1. Use the &lt;strong&gt;cd&lt;/strong&gt; command in the Linux terminal.
&lt;/h2&gt;

&lt;p&gt;To access the windows files you have to navigate through &lt;strong&gt;/mnt/your_windows_path&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /mnt/c/Users
&lt;span class="k"&gt;**&lt;/span&gt;OR&lt;span class="k"&gt;**&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; /mnt/d/your_folder/your_folder
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you have access to every file in the Linux and Windows file systems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-moving-files-between-the-two-systems-through-wsl"&gt;
  &lt;/a&gt;
  2. Moving files between the two systems through WSL.
&lt;/h2&gt;

&lt;p&gt;If you want to move files between the two operating systems you can simply use the &lt;strong&gt;cp&lt;/strong&gt; or &lt;strong&gt;mv&lt;/strong&gt; commands. &lt;br&gt;
&lt;strong&gt;cp&lt;/strong&gt; - command for copying files&lt;br&gt;
&lt;strong&gt;mv&lt;/strong&gt; - command for moving files&lt;br&gt;
&lt;strong&gt;Use of cp command&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cp&lt;/span&gt; /mnt/c/file.txt /home/username/Documents
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Use of mv command&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mv&lt;/span&gt;  /mnt/c/file.txt /home/username/Documents
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-editing-windows-files-through-wsl"&gt;
  &lt;/a&gt;
  3. Editing windows files through WSL.
&lt;/h2&gt;

&lt;p&gt;To edit windows files through the Linux terminal using WSL, you have to use any text editor that can be opened in the terminal. One of the most famous text editors is &lt;strong&gt;nano&lt;/strong&gt;. In our example, I am going to use the &lt;strong&gt;nano&lt;/strong&gt; editor.&lt;br&gt;
Type into the terminal &lt;strong&gt;nano&lt;/strong&gt; and the path to the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;nano /mnt/c/Users/file.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can edit freely files from your terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-creating-files-in-windows-through-wsl"&gt;
  &lt;/a&gt;
  4. Creating files in windows through WSL.
&lt;/h2&gt;

&lt;p&gt;To create a file in a specific windows directory you have first to navigate to it and then use the &lt;strong&gt;touch&lt;/strong&gt; command to create a file.&lt;br&gt;
&lt;strong&gt;touch&lt;/strong&gt; - a command that creates a file.&lt;br&gt;
&lt;strong&gt;!!! The file extension can be anything you want.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /mnt/c/Users/Public/Documents/ 
&lt;span class="nb"&gt;touch &lt;/span&gt;filename.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The file is created and can be opened from both systems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-deleting-files-from-the-windows-file-system-through-wsl"&gt;
  &lt;/a&gt;
  5. Deleting files from the windows file system through WSL.
&lt;/h2&gt;

&lt;p&gt;To delete windows files using WSL, you have to navigate to the directory where the file lives and use the &lt;strong&gt;rm&lt;/strong&gt; command.&lt;br&gt;
&lt;strong&gt;rm&lt;/strong&gt; - a command that deletes files / directories&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /mnt/c/Users/Public
&lt;span class="nb"&gt;sudo rm &lt;/span&gt;example_file.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations you learned 5 vital skills about working with the Linux terminal. 🎺🎺🎺&lt;br&gt;
If you have any questions, comment down, I will answer as soon as possible.&lt;/p&gt;

</description>
      <category>wsl</category>
      <category>linux</category>
      <category>tutorial</category>
      <category>bash</category>
    </item>
    <item>
      <title>Upcoming Solana NFT Projects - Moonly</title>
      <author>Stefan Smiljkovic</author>
      <pubDate>Fri, 14 Jan 2022 16:34:01 +0000</pubDate>
      <link>https://dev.to/shtefcs/upcoming-solana-nft-projects-moonly-353</link>
      <guid>https://dev.to/shtefcs/upcoming-solana-nft-projects-moonly-353</guid>
      <description>&lt;h2&gt;
  &lt;a href="#upcoming-solana-nft-projects-moonly"&gt;
  &lt;/a&gt;
  Upcoming Solana NFT Projects — Moonly
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--acS48op8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2864/0%2Akipawkqw35p9mwYz" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--acS48op8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2864/0%2Akipawkqw35p9mwYz" alt="" width="880" height="570"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good day, good people! After a short break from sharing my progress update for Automatio, I’m back with a new project. Meanwhile, I married and became a father, (minted) a beautiful girl called Mila.&lt;/p&gt;

&lt;p&gt;As you may know already, I devote time to building a no-code web automation tool called Automatio (a powerful web scraper and bot builder). But I also dived into Solana NFT blockchain development a couple of months ago. And despite the challenges, it’s been an exciting ride.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-quickly-whats-an-nft"&gt;
  &lt;/a&gt;
  But Quickly, What’s an NFT?
&lt;/h2&gt;

&lt;p&gt;NFT stands for non-fungible token. An NFT can be any physical item made available for sale digitally. This can be a painting, music, or any other sellable. And by non-fungible, it means an NFT isn’t replaceable, even with any other similar item. It’s essentially unique and tagged to the maker’s identity. In essence, no two same NFTs can exist at the same time. Each NFT item is identified in a blockchain using a unique token generated at the point of minting. And that’s why they call them non-fungible tokens, which means they’re non-replicable as each of them possesses a unique certificate.&lt;/p&gt;

&lt;p&gt;Minting, however, means creating an NFT item on a digital platform such as Solana to put it out for sale. NFTs exist on blockchains and are available for sales in cryptocurrencies. When you sell an NFT as the author, you invest in a lifetime passive income as the unique token trails your creation. So even whenever buyers resell your item, you get a certain percentage, called a royalty (determined by you), on each sale.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moonly"&gt;
  &lt;/a&gt;
  Moonly
&lt;/h2&gt;

&lt;p&gt;So, friends, I present to you, for the first time, &lt;a href="https://moon.ly"&gt;**Moonly&lt;/a&gt;**, the Solana blockchain project that has captured my time and passion. With a regularly updated database of trending NFT projects, it helps you recommend the best upcoming NFT projects worth investing in on Solana.&lt;/p&gt;

&lt;p&gt;I’ve been on to NFT for some years now, and I know how difficult it can be to decide what NFT project is worth the time and investment. This problem and other salient ones are what I vision Moonly to solve. It’s currently a prototype version. But with the current development metrics, I’m optimistic that it will be a handy NFT project companion, dishing out the best timely ideas to its users when it finally launches. Moonly not only recommends the best NFT project available on Solana but goes ahead to help you decide which one is worth minting at a particular time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-whats-moonly-and-how-does-it-work"&gt;
  &lt;/a&gt;
  So what’s Moonly, and how does it work?
&lt;/h2&gt;

&lt;p&gt;It’s an NFT recommender built on the Solana NFT blockchain. Since engagement determines, to a great extent, the potential worth of an NFT project, Moonly uses data analysis and detailed visualizations to give insights on metrics, such as the engagement pattern of NFT projects on Solana. Using these stats, it then tells you the most promising upcoming project with high potential to bring you passive income.&lt;/p&gt;

&lt;p&gt;The recommender relies heavily on several NFT data points sourced from several APIs. And we also scrape some using &lt;a href="https://automatio.co"&gt;**Automatio&lt;/a&gt;** in real-time. This is also a way to interlink my products and build a robust infrastructural framework.&lt;/p&gt;

&lt;p&gt;However, Moonly will recognize possible blue-chip NFT projects by analyzing over 18 different factors like social stats, engagement, validation of followers, growth rate, doxxed founders, roadmap, Discord community, etc. It will offer a set of tools to help you monitor existing NFT projects and better decide on trading factors like Floor Price, Volume, Listing count, historical data, undercut opportunities, and more.&lt;/p&gt;

&lt;p&gt;However, regardless of your experience with NFTs, the purpose of Moonly is to take you to the moon! It ensures that you invest only in solid NFT projects with high ROI (return on investment) potential.&lt;/p&gt;

&lt;p&gt;Having been a part of the Solana community for a while now, it became my first choice for blockchain technology. Indeed, it’s one of the fastest decentralized systems. It also offers a lower cost per transaction, and it’s more eco-friendly than most alternatives out there. Plus, it’s a friendly community. That’s why it’s popular among NFT creators and investors.&lt;/p&gt;

&lt;p&gt;Below, you can find the top 30 Solana NFT projects of all time, sorted by volume. Clicking on any of them redirects you to Moonly, where you can find more information about them. Nonetheless, note that what you currently see is just a prototype. A fully rebuilt version is coming soon, with more data for each project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/boryoku-dragonz-2"&gt;Boryoku Dragonz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/solana-monkey-business"&gt;Solana Monkey Business&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/shadowy-super-coder-dao-2"&gt;Shadowy Super Coder DAO&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/degen-coin-flip-2"&gt;Degen Coin Flip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/degen-ape-academy"&gt;Degen Ape Academy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/thugbirdz"&gt;Thugbirdz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/mindfolk"&gt;Mindfolk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/monkey-kingdom-2"&gt;Monkey Kingdom&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/taiyo-robotics"&gt;Taiyo Robotics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/portals-2"&gt;Portals&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/stoned-ape-crew-2"&gt;Stoned Ape Crew&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/aurory"&gt;Aurory&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/solsocks"&gt;SolSocks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/solsteinft"&gt;SolStein&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/og-flowers"&gt;OG Flowers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/zillaz"&gt;Zillaz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/baby-ape-social-club"&gt;Baby Ape Social Club&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/the-catalina-whale-mixer"&gt;The Catalina Whale Mixer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/turtles"&gt;Turtles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/nyan-heroes"&gt;Nyan Heroes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/playground-waves"&gt;Playground Waves&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/zero-g-labs-solanauts"&gt;Zero G Labs: Solanauts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/fine-fillies"&gt;Fine Fillies&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/ggsg-galactic-geckos"&gt;Galactic Geckos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/solsteads-surreal-estate"&gt;Solsteads Surreal Estate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/pesky-penguins"&gt;Pesky Penguins&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/solpunks"&gt;Solpunks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/famous-fox-federation"&gt;Famous Fox Federation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://moon.ly/nft/solana-monkette-business"&gt;Solana Monkette Business&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, I’d like to know, are you into the NFT games? If yes, what’s your chosen chain? Solana or Ethereum? And what NFT project are you holding? More importantly, I’d appreciate your honest feedback on the Moonly project itself.&lt;/p&gt;

&lt;p&gt;Peace.&lt;/p&gt;

</description>
      <category>nft</category>
      <category>solana</category>
      <category>crypto</category>
    </item>
    <item>
      <title>Hey! Did you know Dev.to has an API??</title>
      <author>Manu</author>
      <pubDate>Fri, 14 Jan 2022 16:22:09 +0000</pubDate>
      <link>https://dev.to/manuthecoder/hey-did-you-know-devto-has-an-api-3api</link>
      <guid>https://dev.to/manuthecoder/hey-did-you-know-devto-has-an-api-3api</guid>
      <description>&lt;p&gt;Have you ever wanted to embed a "Recent Posts" in your website? DEV.to has an API for this.&lt;/p&gt;

&lt;p&gt;Check out this example: &lt;a href="https://manuthecoder.ml"&gt;https://manuthecoder.ml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just make a simple HTTP request to this URL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://dev.to/api/articles?username=____YOUR_USERNAME_HERE____&amp;amp;per_page=5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example JS usage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://dev.to/api/articles?username=manuthecoder&amp;amp;per_page=10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;b&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/b&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/p&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;screw IE. nobody uses it lol&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Gitlab CI/CD + NodeJs + pm2</title>
      <author>Suman Sarkar</author>
      <pubDate>Fri, 14 Jan 2022 16:16:59 +0000</pubDate>
      <link>https://dev.to/sumansarkar/gitlab-cicd-nodejs-pm2-4llh</link>
      <guid>https://dev.to/sumansarkar/gitlab-cicd-nodejs-pm2-4llh</guid>
      <description>&lt;p&gt;✋ Hi this is Suman Sarkar, a web-dev from Kolkata with 5 years of experience in programming and little to none experience with CI/CD. Today I'll talk about how to setup Gitlab CI/CD with self hosted runners.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pointright-things-we-will-cover-in-this-article"&gt;
  &lt;/a&gt;
  👉 Things we will cover in this article
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;😕 What is CI/CD?&lt;/li&gt;
&lt;li&gt;👍 Setup a minimal expressjs API with pm2&lt;/li&gt;
&lt;li&gt;🧑‍💻 Setup our first ever Gitlab pipeline to install &amp;amp; restart our server whenever an update is pushed on the “dev” branch&lt;/li&gt;
&lt;li&gt;🏃 Install self-hosted runners on a linux server&lt;/li&gt;
&lt;li&gt;🔒 Register our local runner to Gitlab&lt;/li&gt;
&lt;li&gt;🔑 Add environment variables to Gitlab&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#confused-what-is-cicd"&gt;
  &lt;/a&gt;
  😕 What is CI/CD?
&lt;/h2&gt;

&lt;p&gt;From my perspective CI/CD or Continuous Integration &amp;amp; Continuous Deployment are processes that you set up for your own convenience so that you don't have to do boring things manually over and over, it is basically automating your workflow when you push an update to your project. Most of us do git pull and then sort of restart the server in order to make the changes into effect, there might be additional steps like building or testing and few other procedures that are specific to your project. I’ll not cover these today, today I’ll only cover how to setup CI/CD for an expressjs application with pm2, Gitlab pipeline and self-hosted runners.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thumbsup-setup-a-minimal-expressjs-api-with-pm2"&gt;
  &lt;/a&gt;
  👍 Setup a minimal expressjs API with pm2
&lt;/h2&gt;

&lt;p&gt;We start with creating a directory for our Node JS Express API&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;node-cicd-pm2
&lt;span class="nb"&gt;cd &lt;/span&gt;node-cicd-pm2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we initialise our project with &lt;code&gt;npm init -y&lt;/code&gt;. This creates a &lt;strong&gt;package.json&lt;/strong&gt; file in our project folder with basic information for our project.&lt;br&gt;
Next we add our dependencies by running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i –save express dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets create our very minimal server by creating our &lt;code&gt;index.js&lt;/code&gt; and pasting the below mentioned code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server is running on port http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we have required our dependencies express and dotenv then we have added a route that returns 'Hello World!'. We have also added a &lt;code&gt;.env&lt;/code&gt; file with only 1 variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PORT="3001"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and &lt;code&gt;ecosystem.config.js&lt;/code&gt; file with the following content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
    apps: [{
        name: "node-cicd-pm2",
        script: "./index.js"
    }]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will be used later to start our server as a process.&lt;/p&gt;

&lt;p&gt;Now, we start our server by running &lt;code&gt;node index.js&lt;/code&gt; and visit &lt;a href="http://localhost:3001/"&gt;http://localhost:3001/&lt;/a&gt;. It works on my machine! 😈&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IpmAOAM2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/544hed6gwezrqpsrjv5i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IpmAOAM2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/544hed6gwezrqpsrjv5i.png" alt="Gitlab CI/CD + NodeJs + pm2" width="496" height="208"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#runner-setup-our-first-ever-gitlab-pipeline"&gt;
  &lt;/a&gt;
  🏃 Setup our first ever Gitlab pipeline
&lt;/h2&gt;

&lt;p&gt;We start with creating a file specifically named &lt;code&gt;.gitlab-ci.yml&lt;/code&gt;. This is an YML file, if you don't like YML, bad news for you, but you can just copy paste and get things done. &lt;br&gt;
Now, paste the following code. I'll explain this in detail.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;stages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;build_stage&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;deploy_stage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets talk about stages, stage are the necessary steps that you can group and describe. We have 2 stages build_stage and deploy_stage. Though we are not building anything here but I like to call it the build stage where we'll install the dependencies. We will cover the deploy stage later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;.base-rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$CI_COMMIT_BRANCH&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;==&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;"dev"'&lt;/span&gt;
      &lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$CI_PIPELINE_SOURCE&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;==&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;"push"'&lt;/span&gt;
      &lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;never&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$CI_COMMIT_TAG&lt;/span&gt;
      &lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;never&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rules are to describe exactly when your pipeline should run. Here we are specifying that we want to run our pipeline whenever something is pushed onto dev branch by specifying &lt;strong&gt;when&lt;/strong&gt; to &lt;strong&gt;always&lt;/strong&gt;.&lt;br&gt;
&lt;strong&gt;$CI_PIPELINE_SOURCE&lt;/strong&gt; is a special(pre-defined) env. variable provided by Gitlab. It describes the mode our change. These can be the following values push, web, schedule, api, external, chat, webide, merge_request_event, external_pull_request_event, parent_pipeline, trigger, or pipeline. For the same of this article I'll not cover all of them, I am not familiar with most of them anyway.&lt;br&gt;
You can read more about the variables &lt;a href="https://docs.gitlab.com/ee/ci/variables/predefined_variables.html"&gt;here on Gitlab&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next up we have caches. The way every stage works is, it cleans or deletes everything a it has produce during its lifetime. In the build stage we will create a &lt;strong&gt;node_modules&lt;/strong&gt; folder which will contain our project's dependencies. When the &lt;strong&gt;build_stage&lt;/strong&gt; is finished we don't want it to be deleted. We want it to passed to the &lt;strong&gt;deploy_stage&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;global_cache&lt;/span&gt;
  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$CI_COMMIT_REF_SLUG&lt;/span&gt;
  &lt;span class="na"&gt;policy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pull-push&lt;/span&gt;
  &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;node_modules/&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;package-lock.json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have created a global cache policy here. The policy is pull-push meaning that the stages using this cache policy can pull from global cache and can push to it as well. In order to create new caches with every update, we must provide a slug or an unique identifier. Here we are using &lt;strong&gt;$CI_COMMIT_REF_SLUG&lt;/strong&gt; variable for that. Notice how we are specifying that we only want to cache &lt;code&gt;node_modules&lt;/code&gt; directory and &lt;code&gt;package-lock.json&lt;/code&gt; since these are the outputs that are generate with &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's now define our &lt;strong&gt;build_stage&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;stage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build_stage&lt;/span&gt;
  &lt;span class="na"&gt;extends&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.base-rules&lt;/span&gt;
  &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;npm i&lt;/span&gt;
  &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*global_cache&lt;/span&gt;
    &lt;span class="na"&gt;policy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;push&lt;/span&gt;
  &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;local_runner&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The build_stage extends the base_rule so that it will run only when something is pushed on the &lt;code&gt;dev&lt;/code&gt; branch.&lt;br&gt;
In this stage we don't want to pull anything from the global-cache, we just want to push the &lt;code&gt;node_modules&lt;/code&gt; directory and &lt;code&gt;package-lock.json&lt;/code&gt; file in the global-cache. We will cover &lt;strong&gt;tags&lt;/strong&gt; later int this article.&lt;/p&gt;

&lt;p&gt;Later we have the &lt;strong&gt;deploy_stage&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;stage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;deploy_stage&lt;/span&gt;
  &lt;span class="na"&gt;extends&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.base-rules&lt;/span&gt;
  &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;pm2&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;start&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ecosystem.config.js"&lt;/span&gt;
  &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*global_cache&lt;/span&gt;
    &lt;span class="na"&gt;policy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pull&lt;/span&gt;
  &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;local_runner&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this stage we are pulling the cache from global-cache and then starting our server with &lt;code&gt;pm2 start&lt;/code&gt; command. By pulling the cache we get our &lt;code&gt;node_modules&lt;/code&gt; directory with our project dependencies.&lt;/p&gt;

&lt;p&gt;If you have followed correctly, you should end up with a file with these content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;stages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;build_stage&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;deploy_stage&lt;/span&gt;

&lt;span class="na"&gt;.base-rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$CI_COMMIT_BRANCH&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;==&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;"dev"'&lt;/span&gt;
      &lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;$CI_PIPELINE_SOURCE&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;==&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;"push"'&lt;/span&gt;
      &lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;never&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$CI_COMMIT_TAG&lt;/span&gt;
      &lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;never&lt;/span&gt;

&lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;global_cache&lt;/span&gt;
  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$CI_COMMIT_REF_SLUG&lt;/span&gt;
  &lt;span class="na"&gt;policy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pull-push&lt;/span&gt;
  &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;node_modules/&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;package-lock.json&lt;/span&gt;

&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;stage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build_stage&lt;/span&gt;
  &lt;span class="na"&gt;extends&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.base-rules&lt;/span&gt;
  &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;node&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;--version"&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;npm i&lt;/span&gt;
  &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*global_cache&lt;/span&gt;
    &lt;span class="na"&gt;policy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;push&lt;/span&gt;
  &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;local_runner&lt;/span&gt;

&lt;span class="na"&gt;deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;stage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;deploy_stage&lt;/span&gt;
  &lt;span class="na"&gt;extends&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.base-rules&lt;/span&gt;
  &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;pm2&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;start&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ecosystem.config.js"&lt;/span&gt;
  &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*global_cache&lt;/span&gt;
    &lt;span class="na"&gt;policy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pull&lt;/span&gt;
  &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;local_runner&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#computer-install-selfhosted-runners-on-a-linux-server"&gt;
  &lt;/a&gt;
  💻 Install self-hosted runners on a linux server
&lt;/h2&gt;

&lt;p&gt;A little bit of background on runners, runners are like workers who does something that a computer should do. Like executing any commands or installing your project dependencies. Behind the scene they are docker containers provided by Gitlab. By default Gitlab uses a Ruby container but you can specify your container type. In this article though we will not use Gitlab's runners, we will install our own runner which is an open-source application made by Gitlab and maintained by the dev community. Self hosted runners are completely free so you don't have to worry about money 🤑.&lt;/p&gt;

&lt;p&gt;Installing the runner on your server is easy, you just have to run few commands. Visit this &lt;a href="https://docs.gitlab.com/runner/install/"&gt;page&lt;/a&gt; for instruction related to your OS environment. I'm running Ubuntu 20.10 so I'll follow with GNU/Linux Binary guide.. If you are using any debian machine then follow me.. Fire up your terminal and run the following commands..&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;curl &lt;span class="nt"&gt;-L&lt;/span&gt; &lt;span class="nt"&gt;--output&lt;/span&gt; /usr/local/bin/gitlab-runner &lt;span class="s2"&gt;"https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64"&lt;/span&gt;
&lt;span class="nb"&gt;sudo chmod&lt;/span&gt; +x /usr/local/bin/gitlab-runner
&lt;span class="nb"&gt;sudo &lt;/span&gt;useradd &lt;span class="nt"&gt;--comment&lt;/span&gt; &lt;span class="s1"&gt;'GitLab Runner'&lt;/span&gt; &lt;span class="nt"&gt;--create-home&lt;/span&gt; gitlab-runner &lt;span class="nt"&gt;--shell&lt;/span&gt; /bin/bash
&lt;span class="nb"&gt;sudo &lt;/span&gt;gitlab-runner &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;gitlab-runner &lt;span class="nt"&gt;--working-directory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/gitlab-runner
&lt;span class="nb"&gt;sudo &lt;/span&gt;gitlab-runner start
&lt;span class="nb"&gt;sudo &lt;/span&gt;gitlab-runner status

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step by step we get the binary, give it executable permissions, create a user called &lt;strong&gt;gitlab-runner&lt;/strong&gt; to run the runners process and then start our gitlab-runner service. The gitlab-runner user is created for security purpose so that it doesn't run as root user. It is generally advised by people who are smarter than me and have was more knowledge about operating systems 😅.&lt;br&gt;
Now, after the last command you should see something like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ALFS_H_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47x27khsncbgu1cjqb3v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ALFS_H_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47x27khsncbgu1cjqb3v.png" alt="Gitlab CI/CD + NodeJs + pm2 - Gitlab runner service is running" width="880" height="68"&gt;&lt;/a&gt; Again, it worked on my machine so I'm good! 😅. We are not done with this step though.. We have to login as the &lt;strong&gt;gitlab-runner&lt;/strong&gt; user and install node,  npm and pm2. I could not find any reference to what is the default password of gitlab-runner user so I will just reset it using the passwd command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;passwd gitlab-runner
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Setup your new password and login as the gitlab-runner user by running &lt;code&gt;su gitlab-runner&lt;/code&gt;&lt;br&gt;
For install node I'm using &lt;strong&gt;nvm&lt;/strong&gt;. Just follow the same process mentioned below and you should have everything you need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
&lt;span class="nb"&gt;source&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this should install nvm in you machine.&lt;br&gt;
Next, we install node and pm2 globally,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nvm install 16.13.2
npm i -g pm2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lock-register-our-local-runner-to-gitlab"&gt;
  &lt;/a&gt;
  🔒 Register our local runner to Gitlab
&lt;/h2&gt;

&lt;p&gt;We are almost done with our setup..&lt;br&gt;
Now, we need to register our runner to Gitlab, to do this go to Setting &amp;gt; CI/CD in your repository and expand the "Runners" section.&lt;br&gt;
At the left side you should see "Specific runners" section.&lt;br&gt;
The token should look something like this "fy7f3BqhVzLq3Mr-xxxx"&lt;br&gt;
In your local machine or wherever you have installed you runner just run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo gitlab-runner register
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should prompt you to specify an instance URL. Type &lt;code&gt;https://gitlab.com&lt;/code&gt; and press enter.&lt;br&gt;
Then paste the registration token that you found on Gitlab and press enter, next provide a description for your runner&lt;br&gt;
the most important step, providing a tag for your runner or tags. In the &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; file I had mention the tags as &lt;strong&gt;local_runner&lt;/strong&gt; so I will put that here. You can add multiple tags separated by comma but that's not mandatory. Tags will identify the runners to do their job. At last choose &lt;strong&gt;shell&lt;/strong&gt; as the executor. The End? Not yet! :'(&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-add-environment-variables-to-gitlab"&gt;
  &lt;/a&gt;
  🔑 Add environment variables to Gitlab
&lt;/h2&gt;

&lt;p&gt;Now we need to add env variable to Gitlab CI/CD section so that the we can provide a &lt;strong&gt;PORT&lt;/strong&gt; to our application. This is important because .env file is not commited to your version control. We add our env variable PORT under Setting &amp;gt; CI/CD &amp;gt; Variables section and we add the variable as protected. Next, super important - we need to make our dev branch as protected branch. Otherwise it won't fine the variables. You can do this from Settings &amp;gt; Repository &amp;gt; Protected branches section in your repo.&lt;/p&gt;

&lt;p&gt;✅ That is it, we are done with our pipeline setup. If everything is done correctly, when you commit a change on your dev branch it should trigger a pipeline with 2 job and you runner should start the pm2 process at 3001 port.&lt;/p&gt;

&lt;p&gt;Thanks for reading this article 🧑‍💻 If you face any problems, let me know in the comments down below! 🙂 &lt;br&gt;
Happy hacking!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f8kTRdaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/643zyaj7h6i1cyx1mcrq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f8kTRdaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/643zyaj7h6i1cyx1mcrq.gif" alt="Happy hacking" width="220" height="124"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>devops</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>Deploying a Dapp to Mainnet</title>
      <author>Rounak Banik</author>
      <pubDate>Fri, 14 Jan 2022 16:16:48 +0000</pubDate>
      <link>https://dev.to/rounakbanik/deploying-a-dapp-to-mainnet-3cob</link>
      <guid>https://dev.to/rounakbanik/deploying-a-dapp-to-mainnet-3cob</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FVCI_wXj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ry5q0kaegljb70hs745.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FVCI_wXj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ry5q0kaegljb70hs745.png" alt="Banner Image" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;2021 saw a major boom in web3 education and developer content. There a plethora of excellent tutorials available online that teach you everything you need to get started in web3, from building simple &lt;a href="https://docs.alchemy.com/tutorials/hello-world-smart-contract"&gt;Hello World contracts&lt;/a&gt; to creating full-fledged &lt;a href="https://medium.com/@austin_48503/%EF%B8%8F-minimum-viable-exchange-d84f30bd0c90"&gt;decentralized exchanges&lt;/a&gt; and &lt;a href="https://dev.to/dabit3/building-scalable-full-stack-apps-on-ethereum-with-polygon-2cfb"&gt;NFT marketplaces&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, almost every tutorial (including the ones published by us) show you how to launch apps on testnets with fake money. There is extremely little coverage on how to launch on a mainnet, and the considerations and challenges involved with the process.&lt;/p&gt;

&lt;p&gt;This article, therefore, is on one of the most-requested topics on our &lt;a href="https://discord.gg/8UqJXTX7Kd"&gt;Discord&lt;/a&gt;: how to develop and deploy a smart contract in the real world with real money.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h3&gt;

&lt;p&gt;We make the assumption that you are already familiar with developing smart contracts on EVM-compatible chains using tools like Solidity, Ethers, and Hardhat. If some of these terms sound alien to you, we strongly suggest going through &lt;a href="https://medium.com/scrappy-squirrels/tutorial-writing-an-nft-collectible-smart-contract-9c7e235e96da"&gt;this article&lt;/a&gt; first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-developing-contract-on-testnet"&gt;
  &lt;/a&gt;
  Step 1: Developing Contract on Testnet
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nxqtxTvb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h96fbsrplnxf01eaxyno.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nxqtxTvb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h96fbsrplnxf01eaxyno.png" alt="Mumbai" width="300" height="195"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first step remains the same as with every other tutorial. You develop and test your contract on a testnet of the blockchain (or sidechain) that you wish to launch on. For example, you would use Rinkeby or Ropsten if your network of choice was Ethereum and Mumbai if you preferred Polygon.&lt;/p&gt;

&lt;p&gt;Most testnets do a very good job of mimicking their corresponding mainnet and also provide free fake tokens to work with through faucets.&lt;/p&gt;

&lt;p&gt;You can reasonably expect your contract’s behaviour on a testnet to be almost identical to that on the mainnet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-auditing-and-optimizing-contract"&gt;
  &lt;/a&gt;
  Step 2: Auditing and Optimizing Contract
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B7PhA0Tt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/er6vhaovsgerzc9x8oqz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B7PhA0Tt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/er6vhaovsgerzc9x8oqz.png" alt="Solidity Finance" width="880" height="471"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deploying a contract on a testnet costs the same amount of gas as deploying to a mainnet (note that I’m referring to gas units and not gas price).&lt;/p&gt;

&lt;p&gt;Checking how much gas contract deployment consumes should give you a good early indication of how expensive deployment is going to be. In some cases, it may be possible to significantly reduce gas consumption (for example, using an ERC-1155 implementation in place of ERC-721 for an NFT dapp).&lt;/p&gt;

&lt;p&gt;Do take the time out to evaluate your choices and ensure that reduction of gas consumption does not come at the expense of security.&lt;/p&gt;

&lt;p&gt;Once you’re satisfied with the final version of the contract, you should get it audited.&lt;/p&gt;

&lt;p&gt;There are excellent services like &lt;a href="https://solidity.finance/"&gt;solidity.finance&lt;/a&gt; that will audit your contract for a fee. Do note that the fee may be steep for a lot of projects. But if your dapp is going to be handling assets of other people worth millions of dollars, then I believe that an audit is mandatory and definitely worth the price.&lt;/p&gt;

&lt;p&gt;On the other hand, if your project is of a significantly smaller scale (for example, a generative NFT project), then a professional audit may be overkill. In such cases, just ensure that the contract has been tested and walked through by at least two smart contract developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-estimating-cost-of-deployment"&gt;
  &lt;/a&gt;
  Step 3: Estimating Cost of Deployment
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c3gqoISz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvoq9r3sa6npf8m8064d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c3gqoISz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvoq9r3sa6npf8m8064d.png" alt="Gas" width="299" height="168"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you’re satisfied with the way your dapp behaves and are convinced that there are no glaring security loopholes, you can proceed to computing the total cost of deployment.&lt;/p&gt;

&lt;p&gt;As mentioned earlier, the amount of gas consumed across testnets and the mainnet is the same. To arrive at an estimate of deployment cost on a mainnet, all you need to do is multiply gas consumed with the gas price.&lt;/p&gt;

&lt;p&gt;Typically, deployments on Ethereum cost thousands of dollars whereas deployment to sidechains like Polygon and Binance can be done in under five dollars.&lt;/p&gt;

&lt;p&gt;We have a detailed tutorial on how to estimate costs and consider your chain options &lt;a href="https://medium.com/scrappy-squirrels/estimating-smart-contract-costs-f65acf818c26?source=collection_home---6------6-----------------------"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-acquiring-tokens"&gt;
  &lt;/a&gt;
  Step 4: Acquiring tokens
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jCBsJsaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3k840dqny4njvg7x98a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jCBsJsaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3k840dqny4njvg7x98a.png" alt="Moonpay" width="880" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This step may seem way too obvious to warrant an entire section but we have seen a few of our community members trip up in this step, especially when working with sidechains.&lt;/p&gt;

&lt;p&gt;Remember that you need to acquire a particular token in the chain that you’re working with. This means you need ETH on the Ethereum Mainnet, MATIC on the Polygon network, and BNB on the Binance Smart Chain.&lt;/p&gt;

&lt;p&gt;The easiest way to acquire these tokens on their respective chains is by using a ramp service like &lt;a href="https://www.moonpay.com/"&gt;Moonpay&lt;/a&gt; that allows you to purchase crypto using just a credit card.&lt;/p&gt;

&lt;p&gt;However, these services don’t work in all countries (India, for example). In such cases, you will unfortunately have to deal with steps like buying on centralized exchanges, KYCs, and withdrawal to Metamask.&lt;/p&gt;

&lt;p&gt;During withdrawal, make sure that your tokens are being transferred to the correct network. By default, most exchanges will send your MATIC and BNB to the Ethereum network. &lt;strong&gt;They are useless there and bridging them to the correct network is complicated and expensive&lt;/strong&gt;. Make sure you only use exchanges that have a direct ramp to the network you want to use.&lt;/p&gt;

&lt;p&gt;We will be releasing an article on the options you have while purchasing MATIC, BNB, FTM, and other sidechain cryptocurrencies soon.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-configuring-hardhat-and-alchemy"&gt;
  &lt;/a&gt;
  Step 5: Configuring Hardhat and Alchemy
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-vjeXt6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qx1zd3kv7z38brvhsuft.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q-vjeXt6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qx1zd3kv7z38brvhsuft.png" alt="Hardhat" width="880" height="458"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is now time for deployment!&lt;/p&gt;

&lt;p&gt;In order to deploy to a particular chain, we will need an RPC URL. We’ve already discussed how to acquire this using &lt;a href="https://alchemy.com/?a=d7d81950c0"&gt;Alchemy&lt;/a&gt; for the &lt;a href="https://medium.com/scrappy-squirrels/tutorial-writing-an-nft-collectible-smart-contract-9c7e235e96da"&gt;Rinkeby&lt;/a&gt; and &lt;a href="https://medium.com/scrappy-squirrels/tutorial-developing-for-polygon-and-sidechains-66bef9ec80ef"&gt;Polygon Mumbai&lt;/a&gt; testnets.&lt;/p&gt;

&lt;p&gt;For the corresponding mainnets, the process is identical: create an Alchemy app, set the network to the chain of your choice, and copy the HTTP RPC URL. Below is an app created for the Ethereum mainnet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FnfEXp6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkajlaa2xqzup34nor1n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FnfEXp6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkajlaa2xqzup34nor1n.png" alt="Alchemy App" width="800" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do note that Alchemy, at the time of writing, does not provide RPC URLs for every chain that you could potentially want to work with.&lt;/p&gt;

&lt;p&gt;For chains not supported by Alchemy (for example, Fantom Opera), you can use the public RPC URLs available. For instance, &lt;a href="https://rpc.ftm.tools/"&gt;https://rpc.ftm.tools/&lt;/a&gt; for Fantom.&lt;/p&gt;

&lt;p&gt;We now have everything to configure &lt;code&gt;hardhat.config.js&lt;/code&gt;. Add the mainnet network of your choice to &lt;code&gt;module.exports&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {  
    solidity: "0.8.4",  
    networks: {    
        rinkeby: {      
            url: RINKEBY_RPC_URL,      
            accounts: [`0x${PRIVATE_KEY}`],   
        },
        mainnet: {      
            url: ETHEREUM_RPC_URL,      
            accounts: [`0x${PRIVATE_KEY}`],   
        },
        polygon: {      
            url: POLYGON_RPC_URL,      
            accounts: [`0x${PRIVATE_KEY}`],   
        },          
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As is good practice, we have defined our RPC URLs and our wallet’s private key in a &lt;code&gt;.env&lt;/code&gt; file that will not be committed to our git repository.&lt;/p&gt;

&lt;p&gt;Now, running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx hardhat run scripts/deploy.js --network mainnet
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Will deploy your contract to the Ethereum mainnet. Similarly, running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx hardhat run scripts/deploy.js --network polygon
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Will deploy your contract to the Polygon mainnet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-gas-price"&gt;
  &lt;/a&gt;
  Setting Gas Price
&lt;/h3&gt;

&lt;p&gt;Do note that if you deploy your contract using our &lt;code&gt;deploy.js&lt;/code&gt; script from the previous tutorials, ethers will automatically set a gas price and deploy using that price.&lt;/p&gt;

&lt;p&gt;In testnets and sidechains like Polygon and Binance, this may not really be an issue. However, lower gas fees could result in savings worth thousands of dollars on Ethereum. Which is why it is prudent to set a gas price yourself.&lt;/p&gt;

&lt;p&gt;This is very easy to with ethers. In &lt;code&gt;deploy.js&lt;/code&gt;, add an argument to the &lt;code&gt;deploy()&lt;/code&gt; method to set a gas price as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const factory = await hre.ethers.getContractFactory('MyContract');    
const contract = await factory.deploy(arg1, 
                                      arg2, 
                                      {gasPrice:50000000000});    
await contract.deployed();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can probably deduce, we have deployed this contract by setting a gas fee of 50 Gwei.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optional-deploying-using-metamask-amp-remix"&gt;
  &lt;/a&gt;
  (Optional) Deploying using Metamask &amp;amp; Remix
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yNqqz_hY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gi2ihgpzlfb1k1zn3880.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yNqqz_hY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gi2ihgpzlfb1k1zn3880.png" alt="Remix" width="880" height="264"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you deploy using hardhat, it automatically drains your wallet of the funds that it needs to perform the request. In other words, there is no confirmation step in between. You issue a command to run the deployment script and boom! your funds are gone and your contract is deployed.&lt;/p&gt;

&lt;p&gt;If this is somewhat anxiety-inducing to you, you can consider using &lt;a href="https://remix.ethereum.org/"&gt;Remix&lt;/a&gt; as a viable alternative. Remix is world class IDE for developing and deploying contracts on Ethereum and EVM-based chains.&lt;/p&gt;

&lt;p&gt;Remix allows you to deploy your contracts using Metamask. By doing so, it places an important confirmation step in between where you can evaluate and approve the total amount you’re spending, and modify gas fees using Metamask’s interface.&lt;/p&gt;

&lt;p&gt;You also have the option of getting popup notifications from Metamask as and when your transaction is complete.&lt;/p&gt;

&lt;p&gt;We will be doing a tutorial on Remix very soon. There are plenty of great tutorials online that use Remix by default though so you shouldn’t find it too hard to learn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We hope this article has given you a good idea on the things you need to consider before you take the big step of launching your dapp to a mainnet and have real people use real money on it.&lt;/p&gt;

&lt;p&gt;If you have any questions, please feel free to drop them on the &lt;a href="https://discord.gg/8UqJXTX7Kd"&gt;#suggestions-and-qna channel&lt;/a&gt; of our Discord.&lt;/p&gt;

&lt;p&gt;If you don’t have questions, come say hi to us on our &lt;a href="https://discord.gg/8UqJXTX7Kd"&gt;Discord&lt;/a&gt; anyway! Also, if you liked our content, we would be super grateful if you tweet about us, follow us(@ScrappyNFTs and @Rounak_Banik), and invite your circle to our Discord. Thank you for your support!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#about-scrappy-squirrels"&gt;
  &lt;/a&gt;
  &lt;em&gt;About Scrappy Squirrels&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Scrappy Squirrels is a collection of 10,000+ randomly generated NFTs. Scrappy Squirrels are meant for buyers, creators, and developers who are completely new to the NFT ecosystem.&lt;/p&gt;

&lt;p&gt;The community is built around learning about the NFT revolution, exploring its current use cases, discovering new applications, and finding members to collaborate on exciting projects with.&lt;/p&gt;

&lt;p&gt;Join our community here: &lt;a href="https://discord.gg/8UqJXTX7Kd"&gt;https://discord.gg/8UqJXTX7Kd&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Powerful VS Code Setup: Amateur to Pro</title>
      <author>Deeshan Sharma</author>
      <pubDate>Fri, 14 Jan 2022 16:10:50 +0000</pubDate>
      <link>https://dev.to/deeshansharma/powerful-vs-code-setup-amateur-to-pro-4in3</link>
      <guid>https://dev.to/deeshansharma/powerful-vs-code-setup-amateur-to-pro-4in3</guid>
      <description>&lt;p&gt;&lt;em&gt;Believe it or not, VS Code or Visual Studio Code &lt;strong&gt;"Built by Microsoft"&lt;/strong&gt; is the most popular and most used code editor among developers.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So in support of this, if you are a newbie or experienced developer, I am here to show you how you can boost your vs code game and experience a whole new level and get the most out of your code editor.&lt;/p&gt;

&lt;p&gt;Topics Covered:~&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Extensions to get the most out of your editor&lt;/li&gt;
&lt;li&gt;Secret settings to improve the experience&lt;/li&gt;
&lt;li&gt;Editor's makeover&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#how-to-install-vs-code"&gt;
  &lt;/a&gt;
  How to install VS Code..?
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;If you already have it, you could just scroll to the next section.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Visit the &lt;a href="https://code.visualstudio.com/download"&gt;Official Download Page&lt;/a&gt; and download according to your OS and install it.&lt;/p&gt;

&lt;p&gt;There are more ways to install it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chocolatey &lt;em&gt;(my preference)&lt;/em&gt; will cover this in another blog&lt;/li&gt;
&lt;li&gt;Source code&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#extensions-to-get-the-most-out-of-your-editor"&gt;
  &lt;/a&gt;
  Extensions to get the most out of your editor
&lt;/h3&gt;

&lt;p&gt;The coolest thing about vs code is there is a huge community using it, hence you never feel left out, there are tons of extensions made by these awesome people which makes this the most useful feature of vs code.&lt;/p&gt;

&lt;p&gt;I have listed some of the useful and cool extensions for you to save time.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#general"&gt;
  &lt;/a&gt;
  General
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt;: A code formatter for rescue, use common styling among all the files and projects&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"&gt;Eslint&lt;/a&gt;: It is &lt;a href="https://en.wikipedia.org/wiki/Lint_(software)"&gt;code linter&lt;/a&gt; for JS &amp;amp; TS that will catch bugs even before you run the code&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=TabNine.tabnine-vscode"&gt;Tabnine&lt;/a&gt;: This is super awesome, this is the AI code completion assistant to amplify coding accuracy and boost productivity. This gives super-accurate suggestions&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker"&gt;Code Spell Checker&lt;/a&gt;: This will save you from committing misspelled words and feeling ashamed later&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;GitLens&lt;/a&gt;: Helps you in multi-author projects by showing author blame on each line, see file history, and much more&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare"&gt;Live Share&lt;/a&gt;: Enables real-time collaboration similar to Google Docs, multiple individuals could work on the same file, it enables to share the localhost, port, and even the terminal sessions most useful in pair programming&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense"&gt;Path Intellisense&lt;/a&gt;: This will help in autocompleting the filename and file path&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=albert.TabOut"&gt;TabOut&lt;/a&gt;: Get out of the quotes, brackets, etc just using &lt;code&gt;Tab&lt;/code&gt; and without the use of arrow keys&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments"&gt;Better Comments&lt;/a&gt;: This helps in creating more user-friendly comments with different highlighting for different types of comment&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=WakaTime.vscode-wakatime"&gt;WakaTime&lt;/a&gt;: It is responsible for metrics, insights, and time tracking automatically generated from your programming activity&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#web-development"&gt;
  &lt;/a&gt;
  Web Development
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;Auto Rename Tag&lt;/a&gt;: Renames the closing tag when you edit the opening tag or vice versa&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;Live Server&lt;/a&gt;: Launch a local development server with a live reload feature for static &amp;amp; dynamic pages&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=mkaufman.HTMLHint"&gt;HTML Lint&lt;/a&gt;: Linter for HTML&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint"&gt;Style Lint&lt;/a&gt;: Linter for CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#secret-settings-to-improve-the-experience"&gt;
  &lt;/a&gt;
  Secret settings to improve the experience
&lt;/h3&gt;

&lt;p&gt;Certain settings are turned off by default but are worth turning on and make life a lot easier. Open your vs code,&lt;/p&gt;

&lt;p&gt;There are two ways to change the settings in vs code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSON Way &lt;em&gt;(the preferred and easy way)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;GUI Way&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#the-json-way"&gt;
  &lt;/a&gt;
  The JSON way
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Open &lt;a href="https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette"&gt;VS Code Command Pallet&lt;/a&gt; using the keyboard shortcut &lt;code&gt;Ctrl+Shift+P&lt;/code&gt; on Windows or &lt;code&gt;Cmd+Shift+P&lt;/code&gt; on Mac or hit &lt;code&gt;F1&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Type &lt;em&gt;settings JSON&lt;/em&gt; in command pallet&lt;/li&gt;
&lt;li&gt;Open  &lt;em&gt;'Preferences: Open Settings (JSON)'&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Now copy the following lines to your &lt;code&gt;settings.json&lt;/code&gt; file
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"files.autoSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"afterDelay"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"files.trimTrailingWhitespace"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"editor.wordWrap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"on"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.formatOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.wordWrapColumn"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.formatOnPaste"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.quickSuggestions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.inlineSuggest.enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.codeActionsOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"source.fixAll"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"source.organizeImports"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.wordWrap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"on"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.defaultFormatter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"esbenp.prettier-vscode"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Extensions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;settings&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"git.autofetch"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"git.allowForcePush"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"git.autorefresh"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"git.autoRepositoryDetection"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"javascript.updateImportsOnFileMove.enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"always"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"typescript.updateImportsOnFileMove.enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"always"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"tabnine.experimentalAutoImports"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"prettier.singleQuote"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"prettier.endOfLine"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"crlf"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"prettier.jsxBracketSameLine"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"prettier.printWidth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"eslint.validate"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"typescript"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"javascript"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"typescriptreact"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"javascriptreact"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"better-comments.highlightPlainText"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#gui-way"&gt;
  &lt;/a&gt;
  GUI Way
&lt;/h4&gt;

&lt;p&gt;First of all, open the settings page&lt;br&gt;
hit &lt;code&gt;Ctrl+,&lt;/code&gt; on windows or &lt;code&gt;Cmd+,&lt;/code&gt; on mac to open the settings page or go to &lt;em&gt;File&amp;gt;Prefrences&amp;gt;Settings&lt;/em&gt;&lt;br&gt;
Now suppose for eg, you want to turn on the word wrap the entry in &lt;code&gt;settings.json&lt;/code&gt; is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"editor.wordWrap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"on"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;so in the search bar enter &lt;code&gt;editor.wordWrap&lt;/code&gt; and change the setting accordingly. This is the reason I prefer JSON way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#editors-makeover"&gt;
  &lt;/a&gt;
  Editor's Makeover
&lt;/h3&gt;

&lt;p&gt;It's time to change the editor's look and feel, I will walk you through some steps and you will love the way your editor looks&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#theme"&gt;
  &lt;/a&gt;
  Theme
&lt;/h4&gt;

&lt;p&gt;Let's start by changing the theme of your editor. There are numerous themes available in the marketplace. I have listed some of my favorites.&lt;/p&gt;

&lt;p&gt;To change your theme:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install the one you like&lt;/li&gt;
&lt;li&gt;Now to select it hit &lt;code&gt;Ctrl+K+T&lt;/code&gt; on windows and &lt;code&gt;Cmd+K+T&lt;/code&gt; on mac and select your theme or &lt;em&gt;click on the gear icon on the bottom left&amp;gt;Color Theme&amp;gt;Select the theme&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Themes&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=BeardedBear.beardedtheme"&gt;Bearded Theme&lt;/a&gt;: There are 25 variations of this theme I have listed two of my favorite

&lt;ul&gt;
&lt;li&gt;Black &amp;amp; Amethyst
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sE7J_fFF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98jy91p7zeqgtsihcb31.png" alt="Bearded Theme Black &amp;amp; Amethyst Example" width="880" height="495"&gt;
&lt;/li&gt;
&lt;li&gt;Anthracite
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---16piJsH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6ae1j3ugq5izvvwi1jh.png" alt="Bearded Theme Anthracite Example" width="880" height="495"&gt;
You can see all of the variations on &lt;a href="https://raw.githubusercontent.com/BeardedBear/bearded-theme/master/assets/themes.png"&gt;Official Bearded Theme Example&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=wesbos.theme-cobalt2"&gt;Cobolt2&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9vZVPWwH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/wesbos/cobalt2-vscode/cobalt2-updates/images/ss.png" alt="Official Cobolt2 Theme Example" width="880" height="626"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme"&gt;Github Dark Theme&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SNDqX8l9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n2t99ff36bu3x8ftcxba.png" alt="Github Dark Theme Example" width="880" height="495"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=enkia.tokyo-night"&gt;Tokyo Night&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ri3mveMa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/enkia/tokyo-night-vscode-theme/master/static/ss_tokyo_night.png" alt="Official Tokyo Night Theme Example" width="880" height="613"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#icons"&gt;
  &lt;/a&gt;
  Icons
&lt;/h4&gt;

&lt;p&gt;There are two types of icons in vs code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;File Icons: You see beside your files and folders, I prefer &lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme"&gt;Material Icon Theme&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Product Icons: You see all around the vs code, I prefer &lt;a href="https://marketplace.visualstudio.com/items?itemName=miguelsolorio.fluent-icons"&gt;Fluent Icons&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dl19moV0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s3u47o1z3zxvznlrsaz0.png" alt="Material Icon Theme Example" width="880" height="495"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To change the icons theme:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Click on the gear icon on the bottom left&amp;gt;File Icon Theme/Product Icon Theme&amp;gt;Select the theme&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also set the theme and icon theme from the &lt;code&gt;settings.json&lt;/code&gt; file just add these lines&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"workbench.colorTheme"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Bearded Theme Black &amp;amp; Amethyst"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;theme&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"workbench.iconTheme"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"material-icon-theme"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"workbench.productIconTheme"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"fluent-icons"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"material-icon-theme.folders.color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#42a5f5"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"material-icon-theme.folders.theme"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"specific"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#font"&gt;
  &lt;/a&gt;
  Font
&lt;/h4&gt;

&lt;p&gt;When it comes to the font I love &lt;a href="https://fonts.google.com/specimen/Fira+Code"&gt;Fira Code&lt;/a&gt;, which also supports font legislature.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ywO8062d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tonsky/FiraCode/raw/master/extras/logo.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ywO8062d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tonsky/FiraCode/raw/master/extras/logo.svg" alt="Official Fira Code Font Legislature Example Image" width="880" height="503"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Noticed those symbols, these are called legislature, believe me, this adds a star when someone looks into your editor&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add these lines to your &lt;code&gt;settings.json&lt;/code&gt; for the font configuration&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"editor.fontSize"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.lineHeight"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.letterSpacing"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.fontLigatures"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.fontFamily"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Fira Code, Operator Mono, Consolas, 'Courier New', monospace"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for the final touch-ups add these&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"editor.cursorBlinking"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"expand"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.cursorSmoothCaretAnimation"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Bored..?&lt;/em&gt;&lt;/strong&gt; Well we have completed the setup and you are good to go. I hope you loved it.&lt;/p&gt;

&lt;p&gt;Have I missed something..? or do you have something to share, please let me know in the comments.&lt;/p&gt;

&lt;p&gt;A moment please, &lt;br&gt;I am trying to create an awesome &amp;amp; productive dev community that really needs someone like you. So if you are interested join it on &lt;a href="https://discord.gg/JMQ5Nwe"&gt;Discord&lt;/a&gt;, invite your friends and let's get to know each other in a better way.&lt;/p&gt;

&lt;p&gt;Till then keep hustling&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>design</category>
    </item>
    <item>
      <title>A Penny for Your Thoughts – Our Community Sponsorship Program is Live!</title>
      <author>Heitor Ramon Ribeiro</author>
      <pubDate>Fri, 14 Jan 2022 16:09:31 +0000</pubDate>
      <link>https://dev.to/vue-storefront/a-penny-for-your-thoughts-our-community-sponsorship-program-is-live-5cgc</link>
      <guid>https://dev.to/vue-storefront/a-penny-for-your-thoughts-our-community-sponsorship-program-is-live-5cgc</guid>
      <description>&lt;p&gt;The time has come to finally announce Vue Storefront Community Sponsorship Program. Yes, you heard it right, ops, read it right. We want to sponsor our most active community members and projects in this program.&lt;/p&gt;

&lt;p&gt;The idea behind this program is to embrace our community and valorize our top contributors in the Vue Storefront ecosystem. We want you to have the opportunity to be sponsored to do what you like and be able to produce much more.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Also, this will help with all those questions you may get in your house about coding for free 🙂  Now, you contribute and get paid.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When this program was initially conceived, we wanted to make sure everyone in our community could be eligible one day. That's why we are not only sponsoring developers but also are sponsoring projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-want-to-apply-for-the-sponsorship-what-should-i-do"&gt;
  &lt;/a&gt;
  I want to apply for the sponsorship. What should I do?
&lt;/h2&gt;

&lt;p&gt;To apply for our sponsorship program, first, you must be involved in the Vue Storefront ecosystem. Having a project like an integration, extension, or module for Vue Storefront or being an active developer in our community or core project. Then you can fill up &lt;a href="https://forms.gle/K9QgyktrJBNQsKoM8"&gt;this form&lt;/a&gt; to start your application process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-it-possible-to-apply-from-a-project-outside-the-vue-storefront-ecosystem"&gt;
  &lt;/a&gt;
  Is it possible to apply from a project outside the Vue Storefront ecosystem?
&lt;/h2&gt;

&lt;p&gt;Unfortunately, we only accept applications from projects and developers that are a part of the Vue Storefront ecosystem. This does not mean that we will not sponsor developers and projects outside our ecosystem in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#does-the-sponsorship-cover-all-countries"&gt;
  &lt;/a&gt;
  Does the sponsorship cover all countries?
&lt;/h2&gt;

&lt;p&gt;We currently only sponsor developers and projects that belong to the GitHub sponsorship program or have an active Patreon sponsorship account.&lt;/p&gt;

&lt;p&gt;We know that this program will bring a lot of questions, like "How do I apply for the program?", "What are the pre-requisites?" and so on. To help you with all those questions, &lt;a href="https://docs.vuestorefront.io/v2/community/sponsorship-program.html"&gt;we prepared a document&lt;/a&gt; with some of them.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>sponsorship</category>
      <category>vue</category>
      <category>ecommerce</category>
    </item>
    <item>
      <title>JSON for Beginners in Plain English</title>
      <author>SnowBit</author>
      <pubDate>Fri, 14 Jan 2022 15:45:56 +0000</pubDate>
      <link>https://dev.to/codewithsnowbit/json-for-beginners-in-plain-english-4k8o</link>
      <guid>https://dev.to/codewithsnowbit/json-for-beginners-in-plain-english-4k8o</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fGImbIEj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1516637090014-cb1ab78511f5%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1170%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fGImbIEj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1516637090014-cb1ab78511f5%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1170%26q%3D80" alt="JSON" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JSON&lt;/strong&gt; is used for data transfer between client and server by software applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#history"&gt;
  &lt;/a&gt;
  History
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Before &lt;strong&gt;JSON&lt;/strong&gt; was introduced &lt;strong&gt;XML(Extensible Markup Language)&lt;/strong&gt; was the only preferred way to transfer data between client and server.&lt;/li&gt;
&lt;li&gt;Later in early 2000, &lt;strong&gt;JSON&lt;/strong&gt; got birth and replaced XML as a data format&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-json"&gt;
  &lt;/a&gt;
  What is JSON?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;JSON&lt;/strong&gt; stands for &lt;strong&gt;J&lt;/strong&gt;avaScript &lt;strong&gt;O&lt;/strong&gt;bject &lt;strong&gt;N&lt;/strong&gt;otation&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;JSON&lt;/strong&gt; is lightweight, while being human- and machine-readable.&lt;/li&gt;
&lt;li&gt;The collection of data contains a key-value pair where the key must be a &lt;strong&gt;string&lt;/strong&gt;, and the value can be any of the following:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GxlGYpId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642173391108/LvLB2PqQY.png" alt="value.png" width="880" height="620"&gt;
Image: json.org&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Important rules to keep in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In &lt;strong&gt;JSON&lt;/strong&gt; key values must be enclosed by double quotes&lt;/li&gt;
&lt;li&gt;Key and the value must be separated by a colon &lt;code&gt;:&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Each pair must be separated by comma &lt;code&gt;,&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's how JSON looks like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"SnowBit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"favouriteLang"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"JS"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it for now &lt;/p&gt;




&lt;p&gt;Thank you for reading, have a nice day!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N9GMtqT8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642086620246/trLPKY6le.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N9GMtqT8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642086620246/trLPKY6le.png" alt="Have a nice day.png" width="220" height="180"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow me on Twitter - &lt;a href="https://twitter.com/codewithsnowbit"&gt;@codewithsnowbit&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Subscribe me on YouTube - &lt;a href="https://www.youtube.com/channel/UCNTKqF1vhFYX_v0ERnUa1RQ?view_as=subscriber&amp;amp;sub_confirmation=1"&gt;Code With SnowBit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Who is using Nx?</title>
      <author>Jesse M. Holmes</author>
      <pubDate>Fri, 14 Jan 2022 15:39:48 +0000</pubDate>
      <link>https://dev.to/wolfhoundjesse/who-is-using-nx-45em</link>
      <guid>https://dev.to/wolfhoundjesse/who-is-using-nx-45em</guid>
      <description>&lt;p&gt;I'm using Nx with React and Nest to build an application for work, and I love it. Are you doing anything interesting with &lt;a href="https://nx.dev/"&gt;Nx&lt;/a&gt;?&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>discuss</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Perl Roles</title>
      <author>DragosTrif</author>
      <pubDate>Fri, 14 Jan 2022 15:34:14 +0000</pubDate>
      <link>https://dev.to/dragostrif/perl-roles-54ff</link>
      <guid>https://dev.to/dragostrif/perl-roles-54ff</guid>
      <description>&lt;p&gt;&lt;strong&gt;1. Roles Definition&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A role is a set of methods that provide extra behavior to a class. Roles can't be used independently they need a class to consume them. Roles are a good alternative to inheritance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. A sample role&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A role is declared in a  *.pm file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Moose::&lt;/span&gt;&lt;span class="nv"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;JSON&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;encode_json&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nv"&gt;requires&lt;/span&gt; &lt;span class="sx"&gt;qw( data )&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;to_json&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;encode_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Consuming a role&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the previous example the Role::JSON &lt;em&gt;requires&lt;/em&gt;&lt;br&gt;
 the consuming class to have a method named &lt;em&gt;data&lt;/em&gt;().&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Moose&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Role::JSON&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;data&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;__PACKAGE__&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;meta&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;make_immutable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you could would just call the method defined in the role in your program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;to_json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;# And that prints the following JSON&lt;/span&gt;
&lt;span class="c1"&gt;# { foo : 'bar' }&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4. Checking if class consumes a role&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because roles are not inherited you cannot use isa() to check if a class consumes a role instead you should use does():&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;does&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;Role::JSON&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;5. Roles without Moose/Moo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cpan module Role::Tiny allows you to use roles with vanilla OOP not just with Moose or Moo. Like Moose or Moo Role::Tiny  applies strict and warnings to the caller.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;Tiny&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;data&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
 &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;lib&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Role::Tiny::&lt;/span&gt;&lt;span class="nv"&gt;With&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;with&lt;/span&gt;  &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Role::Foo&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="o"&gt;....&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Role::Tiny makes available to your role the following method modifiers: &lt;em&gt;before&lt;/em&gt;, &lt;em&gt;around&lt;/em&gt; and &lt;em&gt;after&lt;/em&gt;.&lt;br&gt;
In this example when $self-&amp;gt;data is called the around block executes and you get JSON returned.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;Tiny&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;JSON&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;encode_json&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nv"&gt;requires&lt;/span&gt; &lt;span class="sx"&gt;qw( data )&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;around&lt;/span&gt; &lt;span class="s"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$orig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;encode_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$orig&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;  

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;6. Compositional safety&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Roles attempt to guarantee compositional safety. So if two roles have the same method defined and you try to consume them in the same class you will get an error message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt; &lt;span class="nv"&gt;Due&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;method&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="nv"&gt;conflicts&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;roles&lt;/span&gt; &lt;span class="o"&gt;....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just remember that in order to trigger the error message you need to consume all the roles at once:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;# good&lt;/span&gt;
&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;lib&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Role::Tiny::&lt;/span&gt;&lt;span class="nv"&gt;With&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;with&lt;/span&gt;  &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Role::XML&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Role::JSON&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="c1"&gt;# bad second method is ignored&lt;/span&gt;
&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;lib&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Role::Tiny::&lt;/span&gt;&lt;span class="nv"&gt;With&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;with&lt;/span&gt;  &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Role::XML&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt; 
&lt;span class="nv"&gt;with&lt;/span&gt;  &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Role::JSON&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;7. How to fix method collision&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;implement the methods yourself in your class, thus causing the corresponding role methods to be ignored&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For Moose use the &lt;em&gt;excludes&lt;/em&gt; key word&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Moose::&lt;/span&gt;&lt;span class="nv"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;serialize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;XML&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Moose::&lt;/span&gt;&lt;span class="nv"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;serialize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Moose&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nn"&gt;Role::Serializable::&lt;/span&gt;&lt;span class="nv"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="nn"&gt;Role::Serializable::&lt;/span&gt;&lt;span class="nv"&gt;XML&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;excludes&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;For Role::Tiny use  namespace::clean
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;XML&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;Tiny&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;serialize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;# serialize() will not be imported in the consuming class&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;namespace::&lt;/span&gt;&lt;span class="nv"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;8. Bibliography&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Beginning-Perl-Curtis-Poe-ebook-dp-B009K92D9I/dp/B009K92D9I/ref=mt_other?_encoding=UTF8&amp;amp;me=&amp;amp;qid="&gt;Beginning Perl by Curtis 'Ovid' Poe &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://modernperlbooks.com/"&gt;Modern Perl by Chromatic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.perl.com/article/47/2013/11/11/Use-roles-in-object-oriented-Perl-with-Role-Tiny/"&gt;Use roles in object oriented Perl with Role::Tiny by David Farrell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>perl</category>
      <category>programming</category>
      <category>oop</category>
    </item>
  </channel>
</rss>
