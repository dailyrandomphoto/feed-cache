<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Increase Developer Velocity by Removing Environment Bottlenecks</title>
      <author>Sam Allen</author>
      <pubDate>Fri, 07 May 2021 15:48:13 +0000</pubDate>
      <link>https://dev.to/allensam88/increase-developer-velocity-by-removing-environment-bottlenecks-48f7</link>
      <guid>https://dev.to/allensam88/increase-developer-velocity-by-removing-environment-bottlenecks-48f7</guid>
      <description>&lt;h3&gt;
  &lt;a href="#remove-environment-bottlenecks"&gt;
  &lt;/a&gt;
  Remove Environment Bottlenecks
&lt;/h3&gt;

&lt;p&gt;We’ve all heard the phrase “time is money” and we intuitively know this statement to be true, but understanding just how much money is spent on labor can be a tricky thing to estimate. This is especially true with complex operations like software development.  Before I learned how to write code in React/Node JS, I was an industrial engineer for many years and spent time studying this topic at university.&lt;/p&gt;

&lt;p&gt;Industrial engineering is a systems-thinking discipline that is obsessed with figuring out how to optimize resources and improve processes to get the most out of a system. It borrows from other fields like economics, project management, mechanical engineering, and statistics, to name a few, and lies at the intersection between business operations and engineering.  Quality, Cost, Schedule, and Safety can all be measured and quantified with incremental improvements made across each category.&lt;/p&gt;

&lt;p&gt;These topics can be easy to grapple with when dealing with a consistent, repeatable process like a manufacturing assembly line, hospital queue, or restaurant. However, wrestling with non-standard operations like software development can be nebulous, abstract, and difficult to shove into a one-type-fits-all solution. But that doesn’t mean that we shouldn’t attempt to understand it.  Any attempt at understanding and gathering data is still incrementally better than remaining ignorant and relying on gut-intuition alone.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h3&gt;

&lt;p&gt;As I started to learn how to write software applications a couple years ago, I had high hopes of perhaps crossing my industrial engineering and project management skills into the realm of software.  Gradually, as I began to understand the Agile/Scrum approach, I realized it is challenging to estimate computer programming labor resources and it’s not a very good planning approach, especially in a start-up culture.&lt;/p&gt;

&lt;p&gt;You don’t have a blueprint, there are no bills of materials, there is no work breakdown structure or sequence of operations.  Instead, it’s better to deal with chunks of hazy ranges, like “well, it could take a day or two, but less than a week” and then iterate toward a solution, biting off smaller chunks at a time.  Precedence is still knowable in many cases and you can break the problem into smaller pieces, but estimating how long it will take is not really worth figuring out because it doesn’t help you gain any ground toward solving the problem. Time estimation is purely an administrative task that will need to be repeated ad infinitum because no two tickets are ever the same.&lt;/p&gt;

&lt;p&gt;Software development can have many unknowns which further complicates any attempts at labor estimation.  The ‘Johari Window’ is a method for identifying known or unknown knowledge that a person and their surrounding organization may possess. Some things fall into the ‘known-unknown’ category which means you need to research something that you don’t know yet. But even worse, the ‘unknown-unknown’ realm often crops up, which is to say that you have no idea what is going on until you dive in and start to uncover hidden things.&lt;/p&gt;

&lt;p&gt;In software development, especially when trying something new and novel—like in a startup—there are many unknowns.  Pioneering into uncharted areas takes an extra amount of time and effort when building a greenfield product, fixing bugs, doing user research, discovering go-to-market fit, and so on.  As a company matures, some software development and ticket refinement might approach a stable steady-state, but in many cases, if the company continues to innovate, there will always be many unknowns.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h3&gt;

&lt;p&gt;So what are we supposed to do?  We know that software development labor is costly, and in fact, is often the top operating cost for a tech company. It’s important to investigate and attempt to understand how labor is allocated so we can begin to feel more confident about what we are willing to build or not.  There are important decisions that many managers face: should we build something in-house using our own labor resources?  Or can we get something off-the-shelf that can be customized to fit our needs?  It would also be good to know whether a manager’s most precious resource is blocked with bottlenecks and being under- or over-utilized.  Having a rough understanding of your labor resources can help make this type of decision much easier.&lt;/p&gt;

&lt;p&gt;One of the best ways to understand a complex system is to model it.  We see this all the time when we watch the weather report on the news when the reporter stands in front of a weather map and gives a rough forecast using a computer simulation.  Statistical modeling is now used in a variety of complex industries to make planning forecasts with many different input variables.&lt;/p&gt;

&lt;p&gt;It’s important to know that a model is just that: a simulation, a mock-up, an imaginary scenario.  It’s not real, just ask Morpheus in the Matrix.  Every statistical model relies heavily upon baseline assumptions and measured, knowable, controlled inputs that can be adjusted for a range of possible outcomes.  The more data you have, the more reliable the model becomes, but it has to start somewhere with a simplified version of reality broken up into discrete events built upon statistical averages.  &lt;/p&gt;

&lt;p&gt;So what are some of the safe assumptions we can make about a typical tech startup?  First, we would want to add boundaries to our system.  We can fix the number of employees and their typical working hours.  Tickets tend to vary widely, but it is possible to make different ticket types broken down into difficulty levels.  Let’s say the easy ones are half a day, while the tougher ones might take a week.  We also know the number of environments we have available for testing our code.  These might be custom built, maybe there are 2 or 3.&lt;/p&gt;

&lt;p&gt;Some other knowable assumptions might be how long it takes to deploy our code to production and whether a certain amount of tickets will need rework after QA testing, let’s say 25%.  It’s rather arbitrary, but in the absence of solid data, we can plug in some intuitive anecdotal numbers to start with.  If you hold all things consistent, but only adjust one variable at a time, then you can begin to compare the results to uncover any major bottlenecks in the system.  Models are a simplified version of reality, so we start really simply.  To use a crude example, we could simulate 5 farmers working 8 hrs/day in a 500 acre field using 3 tractors, record what happens, then run it again with only 2 tractors instead for comparison.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simulation-results"&gt;
  &lt;/a&gt;
  Simulation Results
&lt;/h3&gt;

&lt;p&gt;In this blog post, we will share the end results of our analysis. For a full detail of the simulation setup and results, you can download our free &lt;a href="https://releasehub.com/whitepaper"&gt;whitepaper&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Key takeaway: If we increase the number of available environments to 5 while keeping all other variables consistent, we saw the simulated throughput went up to 132 tickets, a 35% increase.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After running the baseline setup with only a single staging environment, we can see the team can complete 98 tickets, but more importantly, we can identify a major bottleneck as 32 tickets are piled up waiting for a test environment resource. If we increase the number of available environments to 5 while keeping all other variables consistent, we saw the simulated throughput went up to 132 tickets, a 35% increase. The bottleneck has also been eliminated and there are even a few surplus environments available.&lt;/p&gt;

&lt;p&gt;Again, to read the full results and analysis, be sure to download the free &lt;a href="https://releasehub.com/whitepaper"&gt;whitepaper&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>kubernetes</category>
      <category>agile</category>
    </item>
    <item>
      <title>5 Reasons Tailwind might not be the right choice. (WDS #1)</title>
      <author>Blake Campbell</author>
      <pubDate>Fri, 07 May 2021 15:47:33 +0000</pubDate>
      <link>https://dev.to/blaketweeted/5-reasons-tailwind-might-not-be-the-right-choice-wds-1-26hc</link>
      <guid>https://dev.to/blaketweeted/5-reasons-tailwind-might-not-be-the-right-choice-wds-1-26hc</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclaimer this is 100% satire. For fun on a Friday (Web Dev Satire #1)&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-the-license-is-too-controlling"&gt;
  &lt;/a&gt;
  1) The license is too controlling
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cz367i4k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/brvprqg1kddu4vs9ub2v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cz367i4k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/brvprqg1kddu4vs9ub2v.png" alt="Screen Shot 2021-05-07 at 11.16.35 AM"&gt;&lt;/a&gt;&lt;br&gt;
  The fact I have to sign a blood contract to use Tailwind is baffling. I'm hoping this is fixed in a future release. Until then, I'm trying to skate by, but Adam Wathan keeps calling me.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#2-readability"&gt;
  &lt;/a&gt;
  2) Readability
&lt;/h1&gt;

&lt;p&gt;My vision is pretty good with my glasses, but Tailwind's docs' most recent update recommends not looking at your code. Instead, you need to feel your code through your fingertips. I keep trying, but every time I look up, my code is a mess. It's not my fault. It's Tailwinds.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#3-not-enough-support"&gt;
  &lt;/a&gt;
  3) Not enough Support
&lt;/h1&gt;

&lt;p&gt;The TailwindUI team is not putting out too enough content. Components for React &amp;amp; Vue. What about components for AngularJS 1.X? Not to mention it doesn't support currently support Netscape browser, the largest browser of 1996. There are no plans to support Netscape in the future. It's disappointing.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#4-tailwind-is-forcing-me-to-use-it"&gt;
  &lt;/a&gt;
  4) Tailwind is forcing me to use it
&lt;/h1&gt;

&lt;p&gt;Despite how much I &lt;strong&gt;hate&lt;/strong&gt; Tailwind. I have to use it; there are no alternatives out there. If only some way I could use some other sort of styling. I'd name it CSS, Cascading Style Sheets; it would be revolutionary. Alas, there is nothing else I can use. &lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#5-there-arent-enough-articles-bashing-tailwind"&gt;
  &lt;/a&gt;
  5) There aren't enough articles bashing Tailwind.
&lt;/h1&gt;

&lt;p&gt;Every article I see about Tailwind is by people who completely understand it and love it. Where are all the naysayers? Its clear Tailwind is brainwashing developers. They won't get me and my tinfoil hat anytime soon.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;In case it isn't clear by now, this is satire! Web Dev has gotten so full of uninformed opinions, I thought I'd poke some fun. To the Tailwind team, you're great. To the people who hate Tailwind, cool. Happy Friday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>JavaScript Made Easy: Part 10</title>
      <author>David Tetreau</author>
      <pubDate>Fri, 07 May 2021 15:04:40 +0000</pubDate>
      <link>https://dev.to/dtetreau/javascript-made-easy-part-10-546c</link>
      <guid>https://dev.to/dtetreau/javascript-made-easy-part-10-546c</guid>
      <description>&lt;p&gt;For Part 10, we are going to learn about loops. Loops are extremely important because they can make code run as many times as you need them to, and they allow you to set conditions to make this happen. There are several types of loops. We will be discussing them all over the next several posts. Like functions, there is a lot to them. Open up your repl and code along!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-loop"&gt;
  &lt;/a&gt;
  For Loop
&lt;/h2&gt;

&lt;p&gt;"For loops" generally use three expressions that determine how many times they will run. However, these expressions are optional. Here is the syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;looped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;the loop ran&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;looped&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//logs the string with each iteration&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The terms we give those statements in the parenthesis are as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialization&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice in the first example that we did the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;initialized a variable called "looped" and assigned a string to it.&lt;/li&gt;
&lt;li&gt;used a "for loop" with three expressions in it.&lt;/li&gt;
&lt;li&gt;wrote the three expressions inside of the parenthesis which consisted of a variable named "i" equal to 0 (initialization), a condition which determines how many times the loop runs (condition), an expression which increments the variable. (post-expression).&lt;/li&gt;
&lt;li&gt;logged the value saved to the "looped" variable to the console every time the code block runs. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Try to change the three statements inside the parenthesis in the "for loop" and see what happens. Try to use different data types other than strings. Now, try the accumulator pattern like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This pattern adds every number from 1 to 100 and accumulates the total in the variable. The loop runs while the variable "i" is less than or equal to 100. &lt;/p&gt;

&lt;p&gt;You can also use a for loop to iterate over an array. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;primeNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;primeNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;primeNumbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This logs the values in the array individually every time the loop runs. This happens inside the code block when primeNumbers[i] is logged every time the loop runs. The value of "i" changes every time the loop runs because "i" is incremented. It is like logging the value located at the indexes primeNumbers[0], primeNumbers[1], primeNumbers[2], primeNumbers[3], etc. The expression in the middle of the parenthesis (the second expression) determines how long the loop with run. In this particular instance, the loop will run while the variable "i" is less than the length of the array (primeNumbers.length). Every time the loop runs, the third expression increases "i" by one. If you want to see this in action look below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//logs 0, 1, 2, 3, 4&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What happened in this example is that the value assigned to "i" increased every time the loop ran. When the code inside the brackets ran, it logged the current value of "i". Since the condition is at the beginning of the loop, as long as the condition is true before the loop runs, it will run again until the second statement is no longer true. Notice that the numbers that were logged started with 0. This is because as soon as the loop got to the point that the condition was true, it ran again. Take some time to do some variations of all of these examples of "for loops" and come up with some of your own. &lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this post! Please check out the entire "JavaScript Made Easy" series by David Tetreau. There will be a new post daily.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Easily sort imports and remove unused declarations on each save in VS Code</title>
      <author>Damir Drempetić</author>
      <pubDate>Fri, 07 May 2021 15:03:55 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/easily-sort-imports-and-remove-unused-declarations-on-each-save-in-vs-code-35k1</link>
      <guid>https://dev.to/bornfightcompany/easily-sort-imports-and-remove-unused-declarations-on-each-save-in-vs-code-35k1</guid>
      <description>&lt;p&gt;All this time I was using VSCode formatting on save which triggers the selected default formatter (&lt;code&gt;Prettier&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Also I was organizing and sorting my imports manually all the time. Or in other words, I didn’t. So foolish… &lt;/p&gt;

&lt;p&gt;Because it couldn’t be more simpler to enable it without installation of any additional &lt;code&gt;ESLint&lt;/code&gt; or &lt;code&gt;Prettier&lt;/code&gt; plugins. Of course, I’m assuming you already have &lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"&gt;ESLint&lt;/a&gt; and &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt; VS Code extensions because they are a must have for any JavaScript project.&lt;/p&gt;

&lt;p&gt;Just add the following to your VS Code settings.json:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"editor.formatOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"editor.codeActionsOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"source.fixAll"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"source.organizeImports"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"source.sortMembers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;fixAll&lt;/code&gt; is not necessary for this case but could be useful too.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;fixAll property turns on Auto Fix for all providers including ESLint, docs: &lt;a href="https://github.com/microsoft/vscode-docs/blob/efa17ec71d755cf14c4722c7d05d10c538cb0e97/release-notes/v1_41.md#eslint"&gt;https://github.com/microsoft/vscode-docs/blob/efa17ec71d755cf14c4722c7d05d10c538cb0e97/release-notes/v1_41.md#eslint&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;🚀 Voilà, while having all these enabled in your settings, VS Code will &lt;strong&gt;automatically&lt;/strong&gt; on each file save:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;run code formatting with default formatter&lt;/li&gt;
&lt;li&gt;sort imports&lt;/li&gt;
&lt;li&gt;remove all unused declarations&lt;/li&gt;
&lt;li&gt;run ESLint auto fix&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's always nice when you don't need to take care of these things manually, right? 😎 🤖&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>eslint</category>
      <category>prettier</category>
      <category>javascript</category>
    </item>
    <item>
      <title>React Without JSX</title>
      <author>mrwolferinc</author>
      <pubDate>Fri, 07 May 2021 14:50:36 +0000</pubDate>
      <link>https://dev.to/mrwolferinc/react-without-jsx-350i</link>
      <guid>https://dev.to/mrwolferinc/react-without-jsx-350i</guid>
      <description>&lt;p&gt;&lt;strong&gt;JSX is not a requirement for using React.&lt;/strong&gt; Using React without JSX is especially convenient for when you don't want to set up compilation in your build environment.&lt;/p&gt;

&lt;p&gt;This tutorial will show you how to use React without JSX. It will also show you how code written in JSX is converted to plain JavaScript.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#what-is-jsx"&gt;
  &lt;/a&gt;
  What is JSX?
&lt;/h1&gt;

&lt;p&gt;Consider the following variable declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello, world!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This strange tag syntax is neither a string nor HTML.&lt;/p&gt;

&lt;p&gt;It is JSX, and it is a syntax extension to JavaScript. It is recommended to use it with React to describe what the UI should look like. JSX may remind you of a template language, but it comes with the full power of JavaScript.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#converting-to-javascript"&gt;
  &lt;/a&gt;
  Converting to JavaScript
&lt;/h1&gt;

&lt;p&gt;Each JSX element is just syntactic steroids for calling &lt;code&gt;React.createElement(component, props, ...children)&lt;/code&gt;. This means that any code written in JSX can also be written in plain JavaScript.&lt;/p&gt;

&lt;p&gt;For example, this code is written in JSX:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello, $&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toWhat&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Hello&lt;/span&gt; &lt;span class="na"&gt;toWhat&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"world"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It can be compiled to this code that does not use JSX:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`Hello, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toWhat&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;toWhat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are curious to see more examples of how JSX is converted to JavaScript, you can try out the &lt;a href="https://babeljs.io/repl/#?presets=react&amp;amp;code_lz=GYVwdgxgLglg9mABACwKYBt1wBQEpEDeAUIogE6pQhlIA8AJjAG4B8AEhlogO5xnr0AhLQD0jVgG4iAXyJA"&gt;online Babel compiler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The component can either be provided as a string, as a subclass of &lt;code&gt;React.Component&lt;/code&gt;, or a plain function.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#shorthands"&gt;
  &lt;/a&gt;
  Shorthands
&lt;/h1&gt;

&lt;p&gt;If you get tired of typing &lt;code&gt;React.createElement&lt;/code&gt; so much, one common pattern is to assign a shorthand:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you use a shorthand form for &lt;code&gt;React.createElement&lt;/code&gt;, it can almost be as convenient to use React without JSX.&lt;/p&gt;




&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>RECT basics</title>
      <author>Emran H Khan</author>
      <pubDate>Fri, 07 May 2021 14:46:29 +0000</pubDate>
      <link>https://dev.to/emranhkhan/rect-basics-510l</link>
      <guid>https://dev.to/emranhkhan/rect-basics-510l</guid>
      <description>&lt;p&gt;&lt;strong&gt;What is React:&lt;/strong&gt; React is JavaScript library created by Facebook. It is tool for building UI components. React doesn't manipulate the browser's DOM directly, instead it creates copy of the DOM and save it in memory. This copied DOM is generally known as the 'VIRTUAL DOM'. React then finds out what changes have been made, and changes only that part in the DOM.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skills to learn React:&lt;/strong&gt;&lt;br&gt;
    1. HTML &amp;amp; CSS&lt;br&gt;
    2. JSX&lt;br&gt;
    3. Fundamental of JavaScript and ES6&lt;br&gt;
    4. Package manager (Node+Npm)&lt;br&gt;
    5. Git and CLI &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Render Function:&lt;/strong&gt; React renders HTML to web page by using a function called ReactDOM.render(). This function takes two arguments, HTML code and HTML element. The purpose of this function is to display the specified HTML code inside the specified element.&lt;/p&gt;

&lt;p&gt;Display a span inside the 'root' element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ReactDOM.render(&amp;lt;span&amp;gt;Hello World!&amp;lt;/span&amp;gt;, document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result is displayed in the &lt;code&gt;&amp;lt;div id='root'&amp;gt;&lt;/code&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;body&amp;gt;
  &amp;lt;div id='root'&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The HTML code here uses JSX which allows you to write HTML tags inside the JavaScript code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JSX:&lt;/strong&gt; JSX stands for JavaScript XML. It allows us to write HTML in React. JSX converts the HTML into react elemts.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;With JSX:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const newElement: &amp;lt;h1&amp;gt;Learning JSX!&amp;lt;/h1&amp;gt;
ReactDOM.render(newElement, document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Without JSX:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const newElement = React.createElement('h1', {}, 'Not using JSX');
ReactDOM.render(newElement, document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is clearly seen from the above example, it is far more easier to write JSX which eventually transpile our HTML to JavaScript at runtime.&lt;/p&gt;

&lt;p&gt;Expression can be written in JSX using the curly braces {}.&lt;br&gt;
And to write multiple HTML lines you have to put parentheses around the HTML and wrap everything in a single Top level element.&lt;br&gt;
For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const newElement = (
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;I am a header.&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt; I am a paragraph.&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Functional Component:&lt;/strong&gt; A component is an independent, reusable code block which divides the UI into smaller pieces. A functional component is basically a JavaScript/ES6 function that returns a React element(JSX). It needs to exported to be used later in somewhere else.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Welcome = (props) =&amp;gt; {
  return &amp;lt;h1&amp;gt;Hello, {props.name}&amp;lt;/h1&amp;gt;
}

export default Welcome;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And to use it we need to import it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Welcome from './Welcome';

const App = () =&amp;gt; {
  return(
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;Welcome /&amp;gt;
    &amp;lt;div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Props:&lt;/strong&gt; Props is short for properties ant they are used to pass data between React components. React's data flow between components is uni-directional (from parent to child only);&lt;br&gt;
For example, if you want to pass something from app to component you have to pass it like an attribute with suitable name.&lt;br&gt;
Here, I am passing 'name' from the App component to Welcome component. If you need to pass data dynamically just use the curly braces.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Welcome from './Welcome';

const App = () =&amp;gt; {
  return(
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;Welcome name="Justin" /&amp;gt;
    &amp;lt;div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, in the Welcome component we will get the data in the 'props'.&lt;br&gt;
And we can use it like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Welcome = (props) =&amp;gt; {
  return &amp;lt;h1&amp;gt;Hello {props.name}!&amp;lt;/h1&amp;gt;
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;State:&lt;/strong&gt; React has another special built-in object called state, which allows components to create and manage their own data. So unlike props, components cannot pass data with state, but they can create and manage it internally.&lt;br&gt;
React components are rendered (with state) based on the data in the state. State holds the initial information. So, when state changes, React gets informed and immediately re-renders the part of the DOM which actually needs to be changed. There is method called 'setState' which triggers the re-rendering process for the updated parts. React gets informed, knows which parts to change, and does it quickly without re-rendering the whole DOM.&lt;br&gt;
In functional components, with the help of React Hooks we can use this 'state'.&lt;br&gt;
We will implement a simple counter using React's useState hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from "react";

function Counter() {
  // Set the initial count state to zero, 0
  const [count, setCount] = useState(0);

  // Create handleIncrement event handler
  const handleIncrement = () =&amp;gt; {
    setCount(prevCount =&amp;gt; prevCount + 1);
  };

  //Create handleDecrement event handler
  const handleDecrement = () =&amp;gt; {
    setCount(prevCount =&amp;gt; prevCount - 1);
  };
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;div&amp;gt;
        &amp;lt;button onClick={handleDecrement}&amp;gt;-&amp;lt;/button&amp;gt;
        &amp;lt;h5&amp;gt;Count is {count}&amp;lt;/h5&amp;gt;
        &amp;lt;button onClick={handleIncrement}&amp;gt;+&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; setCount(0)}&amp;gt;Reset&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default Counter;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And use this component is the App.js like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
import Counter from "../Counter";

export default function App() {
  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;Counter/&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;useEffect:&lt;/strong&gt; A functional React component uses props and/or state to calculate the output. If the functional component makes calculations that don’t target the output value, then these calculations are named side-effects.&lt;/p&gt;

&lt;p&gt;useEffect() hook accepts 2 arguments:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;useEffect(callback[, dependencies])&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;callback is the callback function containing side-effect logic. &lt;code&gt;useEffect()&lt;/code&gt; executes the callback function after React has committed the changes to the screen.&lt;/p&gt;

&lt;p&gt;dependencies is an optional array of dependencies. &lt;code&gt;useEffect()&lt;/code&gt; executes callback only if the dependencies have changed between renderings.&lt;br&gt;
Put your side-effect logic into the callback function, then use the dependencies argument to control when you want the side-effect to run. That’s the sole purpose of &lt;code&gt;useEffect()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React Events:&lt;/strong&gt; Just like HTML, React can perform actions based on user events. Reach has the same events as HTML: click, change, mouserover etc.&lt;br&gt;
React events are written in camelCase sytax: &lt;code&gt;onClick&lt;/code&gt; instead of &lt;code&gt;onclick&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import ReactDOM from 'react-dom';

function shoot() {
  alert("Great Shot!");
}

const myelement = (
  &amp;lt;button onClick={shoot}&amp;gt;Take the shot!&amp;lt;/button&amp;gt;
);

ReactDOM.render(myelement, document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to pass an argument in the event handler, then you have to wrap the handler into an anonymous arrow function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import ReactDOM from 'react-dom';

function shoot(condition) {
  if (condition) {
    alert("Great Shot!");
  }
  alert("Keep going on");
}

const myelement = (
  &amp;lt;button onClick={() =&amp;gt; shoot(true)}&amp;gt;Take the shot!&amp;lt;/button&amp;gt;
);

ReactDOM.render(myelement, document.getElementById('root'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;React CSS:&lt;/strong&gt; To style an element with the inline style attribute, the value must be a JavaScript object. Properties with two name, like &lt;code&gt;background-color&lt;/code&gt;, must be written in camel case syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const MyHeader = () =&amp;gt; {
  return (
      &amp;lt;div&amp;gt;
      &amp;lt;h1 style={{color: "white", backgroundColor: 'black'}}&amp;gt;Hello Style!&amp;lt;/h1&amp;gt;
      &amp;lt;p&amp;gt;Add a little style!&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
    );
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also create an object with styling information, and refer it in the style attribute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const myStyle = {
  color: "white", 
  backgroundColor: 'black'
}

const MyHeader = () =&amp;gt; {
  return (
      &amp;lt;div&amp;gt;
      &amp;lt;h1 style={myStyle}&amp;gt;Hello Style!&amp;lt;/h1&amp;gt;
      &amp;lt;p&amp;gt;Add a little style!&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
    );
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Glassmorphism Login Form With HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Fri, 07 May 2021 14:24:43 +0000</pubDate>
      <link>https://dev.to/nikhil27b/glassmorphism-login-form-with-html-css-2k0l</link>
      <guid>https://dev.to/nikhil27b/glassmorphism-login-form-with-html-css-2k0l</guid>
      <description>&lt;p&gt;Today I created a Glassmorphism Login form with HTML &amp;amp; CSS. this login form is very simple but looks good I use the Glassmorphism effect to create this login form. I hope you like this also comments about your thoughts.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/MWpYEzj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Introducing... My New Site! ✨</title>
      <author>George Francis</author>
      <pubDate>Fri, 07 May 2021 14:20:04 +0000</pubDate>
      <link>https://dev.to/georgedoescode/introducing-my-new-site-5g8g</link>
      <guid>https://dev.to/georgedoescode/introducing-my-new-site-5g8g</guid>
      <description>&lt;p&gt;Check out the site here! &lt;a href="https://georgefrancis.dev/"&gt;https://georgefrancis.dev/&lt;/a&gt; 👀&lt;/p&gt;




&lt;p&gt;Hey! How's it going? I've been a little quiet on DEV recently, but... I'm very happy to finally share why! 🎉&lt;/p&gt;

&lt;p&gt;Well, as you might have noticed from the big ol' title/URL above, I have launched my very own site! As much as I love DEV 💛, and think it's a fantastic place to publish, I have found myself wanting a singular home for all of my CodePens, articles, and other bits and pieces — so I decided to build one. &lt;/p&gt;

&lt;p&gt;The site is built with &lt;a href="https://www.11ty.dev/"&gt;Eleventy&lt;/a&gt;, hosted on &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;, and is finished off with a healthy scoop of generative magic ✨ It features all of my past writing from DEV, and will be the best place to catch any new content from me going forward. &lt;/p&gt;

&lt;p&gt;Honestly, I could chat forever about the design process, tech stack, etc, &lt;em&gt;(and maybe I will someday)&lt;/em&gt; but for now, I'd just like to share the site with y'all! If you do have any specific questions, though, please do give me a shout. I'm always happy to chat.&lt;/p&gt;

&lt;p&gt;Anyway, now that the site is launched, I am starting to rattle through my ever-growing Trello list of article ideas, so expect some fresh new creative coding/generative art content from me soon 🎨&lt;/p&gt;

&lt;p&gt;In case you missed it up there ^ &lt;a href="https://www.georgefrancis.dev"&gt;here's a link to the site.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cheers! &lt;/p&gt;

&lt;p&gt;George 👀&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>css</category>
      <category>news</category>
    </item>
    <item>
      <title>Building a Kubernetes CI/CD Pipeline with GitLab and Helm</title>
      <author>Daniel Slapelis</author>
      <pubDate>Fri, 07 May 2021 14:10:46 +0000</pubDate>
      <link>https://dev.to/danielslapelis/building-a-kubernetes-ci-cd-pipeline-with-gitlab-and-helm-km9</link>
      <guid>https://dev.to/danielslapelis/building-a-kubernetes-ci-cd-pipeline-with-gitlab-and-helm-km9</guid>
      <description>&lt;p&gt;Everyone loves GitLab CI and Kubernetes.&lt;/p&gt;

&lt;p&gt;GitLab CI (Continuous Integration) is a popular tool for building and testing software developers write for applications. GitLab CI helps developers build code faster, more confidently, and detect errors quickly.&lt;/p&gt;

&lt;p&gt;Kubernetes, popularly shortened to K8s, is a portable, extensible, open-source platform for managing containerization workloads and services. K8s is used by companies of all sizes everyday to automate deployment, scaling, and managing applications in containers.&lt;/p&gt;

&lt;p&gt;The purpose of this post is to show how you can bolt on the Continuous Delivery (CD) piece of the puzzle to &lt;a href="https://dev.to/services/gitlab-professional-services-pipeline-healthcheck"&gt;build a CI/CD pipeline&lt;/a&gt; so you can deploy your applications to Kubernetes. But before we get too far, we're going to need to talk about Helm, which is an important part of the puzzle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-the-helm"&gt;
  &lt;/a&gt;
  What the Helm?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://helm.sh"&gt;Helm calls itself "the package manager for Kubernetes".&lt;/a&gt; That's a pretty accurate description. Helm is a versatile, sturdy tool DevOps engineers can use to define configuration files in, and perform variable substitution to create consistent deployments to our clusters, and have different variables for different environments.&lt;/p&gt;

&lt;p&gt;It's certainly the right solution to the problem we're covering here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-we-do-it"&gt;
  &lt;/a&gt;
  How do we do it?
&lt;/h2&gt;

&lt;p&gt;First off, a few prerequisites. You’re going to have to have this all hammered out before you started with the project. There’s links to helpful documentation below if you need help.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You already have an &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/getting-started.html"&gt;Amazon EKS cluster&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You already know how to use &lt;a href="https://docs.gitlab.com/ee/ci/"&gt;GitLab CI&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You have a &lt;a href="https://docs.gitlab.com/runner/executors/kubernetes.html"&gt;GitLab CI runner&lt;/a&gt; configured in your Kubernetes cluster.&lt;/li&gt;
&lt;li&gt;You have the &lt;a href="https://github.com/kubernetes-sigs/aws-load-balancer-controller"&gt;AWS Load Balancer Controller&lt;/a&gt; running in your cluster.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With those boxes checked, we can get started. You'll want to create a new repository in GitLab first for us to use in this example. Once you've done that we can get started with creating our files.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#file-tree"&gt;
  &lt;/a&gt;
  File tree
&lt;/h2&gt;

&lt;p&gt;Basically, at the end our folder/file structure is going to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;dir&amp;gt;
├── chart/
|   ├── Chart.yaml
|   ├── values.yaml
|   └── templates/
|      ├── deployment.yaml
|      ├── service.yaml
|      ├── ingress.yaml
|      └── configmap.yaml
└── gitlab-ci.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#valuesyaml"&gt;
  &lt;/a&gt;
  values.yaml
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;applicationName: my-first-app
certArn: your-certificate-arn
domain: your domain name
subnets: your subnets
securityGroups: your security groups
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deploymentyaml"&gt;
  &lt;/a&gt;
  deployment.yaml
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.applicationName }}
  namespace: {{ .Values.applicationName  }}
spec:
  replicas: 2
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: {{ .Values.applicationName }}
  template:
    metadata:
      labels:
        app: {{ .Values.applicationName  }}
    spec:
      containers:
        - name: {{ .Values.applicationName }}
          imagePullPolicy: Always
          image: nginx:1.19.4
          ports:
            - containerPort: 80
          volumeMounts:
            - mountPath: /usr/share/nginx/html/index.html
              name: nginx-conf
              subPath: index.html
      volumes:
        - name: nginx-conf
          configMap:
            name: {{ .Values.applicationName  }}-configmap
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the configuration file that defines our deployment. You can see there are a few lines with &lt;code&gt;{{ some text }}&lt;/code&gt;. This is how we use a variable we define in our values file within our chart.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configmapyaml"&gt;
  &lt;/a&gt;
  configmap.yaml
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.applicationName }}-configmap
  namespace: {{ .Values.applicationName }}
data:
  index.html: |
    &amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
      &amp;lt;h1&amp;gt;My first Helm deployment!&amp;lt;/h1&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
      &amp;lt;p&amp;gt;Thanks for checking out my first Helm deployment.&amp;lt;/p&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This config map just defines a simple index page that we'll display for our app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serviceyaml"&gt;
  &lt;/a&gt;
  service.yaml
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.applicationName }}
  namespace: {{ .Values.applicationName }}
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: {{ .Values.applicationName }}
    - port: 80
      targetPort: 80
      protocol: TCP
      name: {{ .Values.applicationName }}
  type: NodePort
  selector:
    app: {{ .Values.applicationName }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ingressyaml"&gt;
  &lt;/a&gt;
  ingress.yaml
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ .Values.applicationName }}
  namespace: {{ .Values.applicationName }}
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/subnets: {{ .Values.subnets }}
    alb.ingress.kubernetes.io/healthcheck-path: /
    alb.ingress.kubernetes.io/security-groups: {{ .Values.securityGroups }}
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/certificate-arn:  {{ .Values.certArn }}
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
spec:
  rules:
    - host: {{ .Values.applicationName }}.{{ .Values.domain }}
      http:
        paths:
        - path: /*
          backend:
            serviceName: ssl-redirect
            servicePort: use-annotation
        - path: /*
          backend:
            serviceName: {{ .Values.applicationName }}
            servicePort: 80
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#gitlabciyml"&gt;
  &lt;/a&gt;
  .gitlab-ci.yml
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stages:
  - deploy

variables:
  DOCKER_HOST: tcp://localhost:2375/
  DOCKER_DRIVER: overlay2
  APP_NAME: my-first-app

deploy:
  stage: deploy
  image: alpine/helm:3.2.1
  script:
    - helm upgrade ${APP_NAME} ./charts --install --values=./charts/values.yaml --namespace ${APP_NAME}
  rules:
    - if: $CI_COMMIT_BRANCH == 'master'
      when: always
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#okay-we-have-all-the-files-now-what"&gt;
  &lt;/a&gt;
  Okay we have all the files. Now what?
&lt;/h2&gt;

&lt;p&gt;Well, after you have all the files defined and your infrastructure follows our prerequisites, there's not much left to do.&lt;/p&gt;

&lt;p&gt;If you commit these files, GitLab will interpet your &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; file and initiate a pipeline. Our pipeline only has one stage and one job (deploy). It'll spin up a container in the cluster for the deployment using the &lt;code&gt;helm:3.2.1&lt;/code&gt; image and run our &lt;code&gt;script&lt;/code&gt; command. This does all of the heavy lifting for us with creating all of the files required in our namespace and starting our application.&lt;/p&gt;

&lt;p&gt;If you configure in Route53 a DNS record like &lt;code&gt;my-first-app.my-domain.com&lt;/code&gt; with an A record to the load balancer that the ingress controller created, you'll see the index page we defined in the configmap!&lt;/p&gt;

&lt;p&gt;This post first appeared on our &lt;a href="https://nextlinklabs.com/insights/kubernetes-ci-cd-gitlab-with-helm"&gt;blog&lt;/a&gt; where we write about &lt;a href="https://nextlinklabs.com/services/devops-consulting-services"&gt;devops and devops consulting services&lt;/a&gt;.  &lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>helm</category>
      <category>gitlab</category>
      <category>devops</category>
    </item>
    <item>
      <title>DISCUSS: The blurred line between front-end and fullstack</title>
      <author>Naseki</author>
      <pubDate>Fri, 07 May 2021 14:05:12 +0000</pubDate>
      <link>https://dev.to/naseki/discuss-the-blurred-line-between-front-end-and-fullstack-20co</link>
      <guid>https://dev.to/naseki/discuss-the-blurred-line-between-front-end-and-fullstack-20co</guid>
      <description>&lt;p&gt;The meaning of a "front-end webdeveloper" has really shifted over the years as more technologies started becoming the norm. Here are two of my favourite articles that talk about this: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/ooooops-i-guess-were-full-stack-developers-now/"&gt;&lt;strong&gt;CSS Tricks&lt;/strong&gt;: ooooops I guess we’re* full-stack developers now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://bradfrost.com/blog/post/front-of-the-front-end-and-back-of-the-front-end-web-development/"&gt;&lt;strong&gt;Brad Frost&lt;/strong&gt;: front-of-the-front-end and back-of-the-front-end web development&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#frontends-without-frontiers"&gt;
  &lt;/a&gt;
  Front-ends without frontiers
&lt;/h1&gt;

&lt;p&gt;I've started off as a front-end webdeveloper myself. As I started learning more back-end technologies it was hard for me to tell when I could start considering myself a fullstack. Even today, I'm not actually sure where the front-end ends and where the back-end begins.&lt;/p&gt;

&lt;p&gt;The front-end has become such a blurred subject that it made job hunting exceedingly slower. Now you have to carefully read every job description just to determine what kind of "front-end webdeveloper" they're talking about.&lt;/p&gt;

&lt;p&gt;I've even seen job descriptions that use front-end and fullstack interchangeably. Yes. Not even sure if that's intentional or they're a little confused themselves. 😶&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#%E2%9C%8D-comment-below-answering-the-following-questions"&gt;
  &lt;/a&gt;
  ✍ Comment below answering the following questions
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Do you consider yourself a fullstack webdeveloper? Why?&lt;/li&gt;
&lt;li&gt;If you could make a clear definition of "front-end" and "fullstack", what would it be?&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ciETrbsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sa0hfs0886uf0g7c0b7e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ciETrbsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sa0hfs0886uf0g7c0b7e.png" alt="Naseki logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/Naseki_"&gt;Twitter&lt;/a&gt; | &lt;a href="https://naseki.com"&gt;Website&lt;/a&gt; | &lt;a href="https://buttondown.email/Naseki/"&gt;Newsletter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>watercooler</category>
      <category>webdev</category>
    </item>
    <item>
      <title>#30DaysOfAppwrite : Server Side SDKs</title>
      <author>Christy Jacob</author>
      <pubDate>Fri, 07 May 2021 13:54:27 +0000</pubDate>
      <link>https://dev.to/appwrite/30daysofappwrite-server-side-sdks-24di</link>
      <guid>https://dev.to/appwrite/30daysofappwrite-server-side-sdks-24di</guid>
      <description>&lt;h1&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h1&gt;

&lt;p&gt;Appwrite is an open-source, self-hosted Backend-as-a-Service that makes app development &lt;strong&gt;easier&lt;/strong&gt; with a suite of SDKs and APIs to accelerate app development. &lt;a href="http://30days.appwrite.io/"&gt;#30DaysOfAppwrite&lt;/a&gt; is a month long event focussed at giving developers a walkthrough of all of Appwrite's features, starting from the basics to more advanced features like cloud functions! Alongside we will also be building a fully featured Medium Clone to demonstrate how these concepts can be applied when building a real world app. We also have some exciting prizes for developers who follow along with us!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#server-side-sdks"&gt;
  &lt;/a&gt;
  Server Side SDKs
&lt;/h1&gt;

&lt;p&gt;Welcome to Day 7 👋 . Today we're going to take a look at Appwrite's &lt;a href="https://appwrite.io/docs/sdks#server"&gt;Server Side SDKs&lt;/a&gt; and talk about the differences between the Client and Server SDKs. The differences between Client and Server Side SDKs seem to be mysterious for a lot of devs so this guide will aim to demystify some of those confusions.&lt;/p&gt;

&lt;p&gt;Appwrite's vision emphasizes the fact that Backend As A Service should not be designed only for front-end developers. Building upon this vision, Appwrite was designed to be platform agnostic and integrates seamlessly with client and server side applications. Because Appwrite is self-hosted it can be used behind your existing firewall and work alongside your existing backend services. Appwrite doesn't aim to replace your backend, instead work alongside it.&lt;/p&gt;

&lt;p&gt;Appwrite officially supports 6 Server Side SDKs with more in the pipeline. If you didn't already know, all our SDKs are automatically generated from the Swagger Specification of our APIs. This allows our small team to maintain a total of 8 (Client + Server) SDKs. We just ❤️ PRs! If you would like to help us create SDKs in your favourite language, feel free to check out &lt;a href="https://github.com/appwrite/sdk-generator"&gt;SDK Generator&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-are-they-different"&gt;
  &lt;/a&gt;
  🤔 How are they different?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#authentication"&gt;
  &lt;/a&gt;
  Authentication
&lt;/h3&gt;

&lt;p&gt;The key difference between the client and server-side SDKs is the authentication mechanism. Server side SDKs use a scoped API key to access the Appwrite API whereas the client side SDKs rely on a secure cookie for authentication. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scopes"&gt;
  &lt;/a&gt;
  Scopes
&lt;/h3&gt;

&lt;p&gt;The second main difference is the scopes that the client and server side SDKs are allowed to access. The scopes limit the kind of tasks you can achieve with the SDKs. The server side SDKs offer much more power and flexibility and allows you to control many more aspects of Appwrite. Using your API Keys, you can access Appwrite services using the SDK of your choice. &lt;/p&gt;

&lt;p&gt;To create a new API key, go to your API keys tab in your project setting using your Appwrite console and click the 'Add API Key' button. When adding a new API Key, you can choose the scopes that you would like to grant to your application. It is a best practice to allow &lt;strong&gt;only&lt;/strong&gt; the permissions you need to meet your project goals. If you need to replace your API Key, create a new key, update your app credentials and, once ready, delete your old key.&lt;/p&gt;

&lt;p&gt;When using Appwrite API from your Server Side with an API Key you will automatically run in &lt;code&gt;admin mode&lt;/code&gt;. Admin mode disables the default &lt;a href="https://appwrite.io/docs/permissions"&gt;user permission access control&lt;/a&gt; restrictions and allows you to access all the server resources ( Documents, Users, Collections, Files, Teams) in your project, regardless of the read and write permissions. This is very useful when you want to manipulate your users' data like files and documents or even if you want to get a list of your users. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is not recommended to run admin mode from a client as it will lead to huge privacy and security risks. Check the &lt;a href="https://appwrite.io/docs/admin"&gt;Admin Mode documentation&lt;/a&gt; to learn more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The following table is a good visualisation of what you can and cannot do with the Client and Server Side SDKs and is a good summary of what we've covered. &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Server&lt;/th&gt;
&lt;th&gt;Client&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;account&lt;/td&gt;
&lt;td&gt;Access to read and write on behalf of the currently logged-in user&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;users.read&lt;/td&gt;
&lt;td&gt;Access to read your project's users&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;users.write&lt;/td&gt;
&lt;td&gt;Access to create, update, and delete your project's users&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;teams.read&lt;/td&gt;
&lt;td&gt;Access to read your project's teams&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;teams.write&lt;/td&gt;
&lt;td&gt;Access to create, update, and delete your project's teams&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;collections.read&lt;/td&gt;
&lt;td&gt;Access to read your project's database collections&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;collections.write&lt;/td&gt;
&lt;td&gt;Access to create, update, and delete your project's database collections&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;documents.read&lt;/td&gt;
&lt;td&gt;Access to read your project's database documents&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;documents.write&lt;/td&gt;
&lt;td&gt;Access to create, update, and delete your project's database documents&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;files.read&lt;/td&gt;
&lt;td&gt;Access to read your project's storage files and preview images&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;files.write&lt;/td&gt;
&lt;td&gt;Access to create, update, and delete your project's storage files&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;functions.read&lt;/td&gt;
&lt;td&gt;Access to read your project's functions and code tags&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;functions.write&lt;/td&gt;
&lt;td&gt;Access to create, update, and delete your project's functions and code tags&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;execution.read&lt;/td&gt;
&lt;td&gt;Access to read your project's execution logs&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;execution.write&lt;/td&gt;
&lt;td&gt;Access to execute your project's functions&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;locale.read&lt;/td&gt;
&lt;td&gt;Access to access your project's Locale service&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;avatars.read&lt;/td&gt;
&lt;td&gt;Access to access your project's Avatars service&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;health.read&lt;/td&gt;
&lt;td&gt;Access to read your project's health status&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;Getting started with the server Side SDK and making your first request is really simple. For the sake of this example, we will choose the Node SDK - the same principles apply to all the other SDKs as well.  &lt;/p&gt;

&lt;p&gt;The first step is to create a Node project and install the &lt;code&gt;node-appwrite&lt;/code&gt; package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;getting-started
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;getting-started
&lt;span class="nv"&gt;$ &lt;/span&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;node-appwrite &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to head to your Appwrite Dashboard and create a new project. Give your project a name and click &lt;strong&gt;Create&lt;/strong&gt; to get started. Once the project is created, head over to the &lt;strong&gt;API keys&lt;/strong&gt; section and create a key with the required scopes (Make sure it has the &lt;code&gt;users.read&lt;/code&gt; and &lt;code&gt;users.write&lt;/code&gt; scopes since the example depends on that). Copy this key as we will need it in the next step. Also take a note of your &lt;strong&gt;Project ID&lt;/strong&gt; and &lt;strong&gt;API Endpoint&lt;/strong&gt; which can be found under the &lt;strong&gt;Settings&lt;/strong&gt; section in your Appwrite Dashboard. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ggeQRycE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3demvadzmxviscchucki.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ggeQRycE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3demvadzmxviscchucki.png" alt="Settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's time to initialise your SDK and make your first request. Fill in all the values you copied in the previous step. We will then try to create a user using the Appwrite SDK.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node-appwrite&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://[HOSTNAME_OR_IP]/v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5df5acd0d48c2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;919c2d18fb5d4...a2ae413da83346ad2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your secret key&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email@example.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There you have it! That was your first request using Appwrite's server-side SDK! If you would like to see this example in other languages that we support, you can check them out &lt;a href="https://appwrite.io/docs/getting-started-for-server"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you feel adventurous and would like to use the Appwrite API using your favourite HTTP request library, &lt;a href="https://dev.to/eldadfux/learn-how-you-can-take-advantage-of-the-appwrite-api-without-using-any-sdk-a41"&gt;this guide&lt;/a&gt; was written exactly for that!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;We hope you liked this write up. You can follow &lt;a href="https://twitter.com/search?q=%2330daysofappwrite"&gt;#30DaysOfAppwrite&lt;/a&gt; on Social Media to keep up with all of our posts. The complete event timeline can be found &lt;a href="http://30days.appwrite.io"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/discord"&gt;Discord Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appwrite.io/"&gt;Appwrite Homepage&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite"&gt;Appwrite's Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to reach out to us on Discord if you would like to learn more about Appwrite, Aliens or Unicorns 🦄. Stay tuned for tomorrow's article! Until then 👋&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>flutter</category>
      <category>webdev</category>
      <category>30daysofappwrite</category>
    </item>
    <item>
      <title>Data Structure APIs , A brief overview of APIs as they relate to JavaScript data structures.</title>
      <author>Dimer BWimBA</author>
      <pubDate>Fri, 07 May 2021 13:53:52 +0000</pubDate>
      <link>https://dev.to/dimer191996/data-structure-apis-a-brief-overview-of-apis-as-they-relate-to-javascript-data-structures-k59</link>
      <guid>https://dev.to/dimer191996/data-structure-apis-a-brief-overview-of-apis-as-they-relate-to-javascript-data-structures-k59</guid>
      <description>&lt;p&gt;Two month of data structure and I'm completely lost , i have ADHD  and  this is my only way to learn this stuff(writing).  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#anyway"&gt;
  &lt;/a&gt;
  anyway 🤭
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;🤗 I'm a straight up beginner and if I lie in this " article " fill free to correct me.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;leeeeet goooo 🦸‍♂️&lt;/p&gt;

&lt;p&gt;🦸 Data structures are all about choosing the right tool for the job. Do you need to store data in an ordered way, or do you just need to be able to store it and retrieve it quickly? What’s more important to your use case: how fast the data structure performs, or how much memory it takes up? Different data structures all have advantages, disadvantages, and use cases, and that’s the whole reason that there are different data structures!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;🤔Consider the &lt;code&gt;Array&lt;/code&gt; in JavaScript. It’s a really great data structure for storing ordered data because you can retrieve elements by index number. If you want the first element of an array, all you need to do is fetch it with index 0: &lt;code&gt;arrayName[0]&lt;/code&gt;. It also provides all sorts of helpful methods for manipulating elements, such as &lt;code&gt;.push()&lt;/code&gt; , &lt;code&gt;.pop()&lt;/code&gt; , &lt;code&gt;.sort()&lt;/code&gt; , and more. However, if you want to find out if a particular element exists in an array, you may need to iterate through the entire &lt;code&gt;array&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🦸 What if I asked you to keep track of a series of numbers as I gave them to you, and then asked at the end whether I’d given you a particular number, you could probably do that in your memory. But if I asked you to do that in a computer program, you’d have to make choices about how to store the data. Let’s look at two possibilities of how we’d build storeNumber() and doYouHaveThisNumber() functions. Given the following list of numbers:&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;1, 250, -42, 0.4, 17&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How might you store these numbers if I gave you each at a time? You might use an array:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const listOfNumbers = [];
const storeNumber = num =&amp;gt; listOfNumbers.push(num);
const doYouHaveThisNumber = num =&amp;gt; listOfNumbers.includes(num);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;In this program, &lt;code&gt;storeNumber()&lt;/code&gt; adds a number to the array, and &lt;code&gt;doYouHaveThisNumber()&lt;/code&gt; returns true if that number exists in the array, and false otherwise. Looks pretty good, but what if you had 10000000 numbers? &lt;code&gt;doYouHaveThisNumber()&lt;/code&gt; might start getting pretty slow, since &lt;code&gt;Array.prototype.includes()&lt;/code&gt; iterates through the entire array until it finds the input value.&lt;/p&gt;

&lt;p&gt;Let’s try using another built-in data type in JavaScript, the Object. Since all we want to keep track of is whether we received a particular number, we can just store those numbers in an object, and set their values to true if we received them:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const receivedNumbers = {};
const storeNumber = num =&amp;gt; receivedNumbers[num] = true;
const doYouHaveThisNumber = num =&amp;gt; receivedNumbers[num] === true;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;In this case, we’ll have the same result on the outside, but because retrieving a value from an object is much faster than iterating through an array, the overall result will be faster.&lt;/p&gt;

&lt;p&gt;In both cases, the public API of the code, meaning the parts of the code that we want the end-user to interact with, remained the same: we had two functions, &lt;code&gt;storeNumber()&lt;/code&gt; and &lt;code&gt;doYouHaveThisNumber()&lt;/code&gt;. The underlying implementation, or the way the functionality was actually achieved, is what altered.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;-&lt;/p&gt;

&lt;blockquote&gt;
&lt;h2&gt;
  &lt;a href="#but-wait-a-minute-wth-is-an-api"&gt;
  &lt;/a&gt;
  But wait a minute Wth is an API?
&lt;/h2&gt;

&lt;p&gt;API is an acronym for application programming interface. An API allows end-users to access properties and methods of data structures easily and without needing to do the “behind the scenes” work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, if you want to add a new element to the end of an array, you don’t need to loop through the entire array, counting how many elements there are, and then setting &lt;code&gt;myArray[currentCount + 1]&lt;/code&gt; equal to the new value. Instead, you can just call .push() with the value you want to add. As a JavaScript programmer, you don’t actually need to know the actual strategy, or the underlying implementation, of how &lt;code&gt;.push()&lt;/code&gt; added an element to the end of the array in order to use it.&lt;/p&gt;

&lt;p&gt;The API of arrays provides lots of useful functionality, from adding and removing elements to the start and end of the array, to iterator methods that call a function on each element. If you wanted to find the smallest number in an array of numbers, however, you’d have to implement that functionality yourself.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h2&gt;
  &lt;a href="#creating-your-own-apis"&gt;
  &lt;/a&gt;
  Creating Your Own APIs
&lt;/h2&gt;

&lt;p&gt;As you build your own data structures, you will implement the functionality to create public APIs. As in the example of &lt;code&gt;storeNumber()&lt;/code&gt; and &lt;code&gt;doYouHaveThisNumber()&lt;/code&gt;, the same public #API can be implemented in different ways, so it’s important to think about the advantages and disadvantages of different implementations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An #API is like a message to end-users. Some languages have classes that can have methods or fields that are either #public #(can be called from anywhere) or #private #(can only be called from within the class). Public methods are the ones that end-users of that class can call, and #private methods are only used by the class itself. #JavaScript doesn’t really support this concept, so properties that aren’t meant to be #public are often preceded by an underscore _. Let’s look at an example where we want to build a data structure with a restricted API.&lt;/p&gt;

&lt;p&gt;A stack is a data structure that only allows data to be added (pushed) or removed (popped) from the “top” of the stack. It just so happens that we could use an array as a stack, since it already has a &lt;code&gt;.push()&lt;/code&gt; and &lt;code&gt;.pop()&lt;/code&gt; method! However, arrays also allow you to add elements to the beginning or randomly access elements by index.&lt;/p&gt;

&lt;p&gt;We’re not going to cover all the ins and outs of the stack data structure right now, but to demonstrate public API vs implementation, let’s build a quick custom Stack class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Stack {
  constructor() {
    this._array = [];
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Stack, the array itself is stored as _array, so it’s a signal to other developers that to use the Stack as intended, they shouldn’t need to access it directly. From there, we can implement the &lt;code&gt;.push()&lt;/code&gt; and &lt;code&gt;.pop()&lt;/code&gt; methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Stack {
  constructor() {
    this._array = [];
  }

  push(newValue) {
    this._array.push(newValue);
  }

  pop() {
    return this._array.pop();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we’ve created a Stack data structure that limits direct interaction with the underlying data to &lt;code&gt;.push()&lt;/code&gt; and &lt;code&gt;.pop()&lt;/code&gt;. A developer could still access our underlying array to do other manipulation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const stack = new Stack();
stack._array.unshift('value');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;but they would then be breaking the intended behavior of the Stack class. The whole point of a public API is that we offer functionality to other end-users. If somebody were using our Stack class in a program, we could totally change the underlying implementation, and as long as the end-user API remained the same, their program should continue to function.&lt;/p&gt;

&lt;p&gt;As you build your own classes and data structures, it’s important to keep in mind this distinction between implementation #(what does this need internally to do its job) and the outside API #(how should users of this actually interact with it?).&lt;/p&gt;

</description>
      <category>datastructure</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>algorithms</category>
    </item>
  </channel>
</rss>
