<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Stand Out as Developer?</title>
      <author>Matthew Rungwe</author>
      <pubDate>Thu, 26 Nov 2020 10:36:44 +0000</pubDate>
      <link>https://dev.to/matthewrungwe/how-to-be-a-stand-out-as-developer-53h3</link>
      <guid>https://dev.to/matthewrungwe/how-to-be-a-stand-out-as-developer-53h3</guid>
      <description>&lt;p&gt;When I first started out, this question never came up in my mind. Like most, we start asking ourselves this question when we are now preparing for a job or further along in your career. &lt;/p&gt;

&lt;p&gt;So, what makes a you &lt;em&gt;stand out&lt;/em&gt; developer? On a general note, be good at what you do. While this response is correct, it is vague as to what to focus on and is often interpreted as hard skills. In this article, I will share a little about what can &lt;em&gt;stand out as a developer&lt;/em&gt; from when you starting out and throughout your career.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#path"&gt;Master your Path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#solving"&gt;Become a problem solver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#analytics"&gt;Develop an analytical mind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#innovative"&gt;Be Innovative&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#learn-to-learn"&gt;Learn how to Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#communication"&gt;Know how Communication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adapt"&gt;Be able to adapt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#best-practices"&gt;Follow best practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#time-management"&gt;Manage your time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bring-to-the-table"&gt;Have more you can bring to the table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#consistency"&gt;Be consistent&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h2 id="core-skills"&gt;Core Skills&lt;/h2&gt;

&lt;h3 id="path"&gt;Master your Path&lt;/h3&gt;

&lt;p&gt;First things first, you need to choose a path. For some it can be Front End Web Development, others Android Development or Cloud Engineering. After you've chosen a path, master it. You don't have to be perfect in the path that you chose but you do need to be competent in it and you need to understand a majority of the features in the path. &lt;/p&gt;

&lt;h3 id="solving"&gt;Become a problem solver&lt;/h3&gt;

&lt;p&gt;To those who are just starting out and those who have been in the industry for a while now, I think we can all agree that there is a great amount of problems that we get in writing the code. While we have people and databases to turn to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.stackoverflow.com"&gt;StackOverflow&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.google.com"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.grepper.com"&gt;Grepper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It amazing when you can solve your own problems. Being a &lt;em&gt;problem solver&lt;/em&gt; also means &lt;strong&gt;you need to be able to come up with ways to implement a feature or fix a bug&lt;/strong&gt; and if &lt;em&gt;solution one&lt;/em&gt; is not working, be able to come up with &lt;em&gt;solution two&lt;/em&gt;. Be able to work around abstacles.&lt;/p&gt;

&lt;h3 id="innovative"&gt;Be Innovative&lt;/h3&gt;

&lt;p&gt;Being innovative means being able to create a solution for a larger audience or to be deployed on a broader scale. &lt;br&gt;
Our world is filled with challenges and struggles. Being a developer does not just mean you can write code for your organization or yourself but it also means &lt;strong&gt;you are in a place to design solutions, come up with ideas&lt;/strong&gt; to a lot of problems being faced out there. &lt;/p&gt;




&lt;h3 id="transferable-skills"&gt;Transferable Skills&lt;/h3&gt;

&lt;p&gt;Transferable skills are soft skills. These can be carried across industries hence &lt;em&gt;transferable&lt;/em&gt;. Soft skills are important because as a developer, you are designing and developing solutions for people and not just for yourself. These &lt;em&gt;soft skills&lt;/em&gt; allow us to see beyond the screen and understand the world or live with it.&lt;/p&gt;

&lt;h3 id="learn-to-learn"&gt;Learn to learn&lt;/h3&gt;

&lt;p&gt;Learning never really ends. There is &lt;strong&gt;always going to be something that you did not know&lt;/strong&gt;, it can be a new technology or a more concise way to implement a feature. Be willing to learn yourself for growth and to improve the way you do things. Be willing to learn from others because everyone has something unique to share. Keep an open mind, never close your doors to growth because you never know what opportunity is around the corner. You can take a look at this article &lt;a href="https://dev.to/matthewrungwe/your-learning-plan-4dp8"&gt;Your Learning Plan&lt;/a&gt; I wrote on setting up a learning plan.&lt;/p&gt;

&lt;h3 id="communication"&gt;Know how to communicate&lt;/h3&gt;

&lt;p&gt;Communication is &lt;em&gt;extremely important&lt;/em&gt;. Most of your time as a developer is spent communicating, either with a team or with a client. Ask questions where you don't understand, it's better to be redundent but certain. Share ideas, raise concerns&lt;/p&gt;

&lt;h3 id="adapt"&gt;Be able to adapt&lt;/h3&gt;

&lt;p&gt;Technology is constantly changing and evolving rapidly. New solutions are coming up into the market every single time. You need to be able to adapt and be flexible. Don't be hard bent onto one way of doing things, one language or one framework because you never know if there will be a new solution to eliminate the way the current solution is working. You need to be willing to learn new things and build on what you know.&lt;/p&gt;

&lt;h3 id="best-practices"&gt;Follow best practices&lt;/h3&gt;

&lt;p&gt;There is nothing that makes a Developer stand out more than the way they write their code. Your code needs to be clean and dry. It's okay when you write code that works and you can read it but it is even batter to write it in a format that others can be able to read.Keep it &lt;strong&gt;concise&lt;/strong&gt;, use &lt;strong&gt;comments&lt;/strong&gt; and &lt;strong&gt;refactor&lt;/strong&gt; where you can and as you code. &lt;/p&gt;

&lt;h3 id="time-management"&gt;Manage your time&lt;/h3&gt;

&lt;p&gt;Time management is crucial as a developer. If you have a problem, you will need to know how you will break it up and how much time you will spend on each module. Without good time management, you will find yourself missing deadlines, not having enough time to finish Task B, you will be overwhelmed, always stressed and under a lot of pressure. This is a quality that spans across multiple industries. Good time management instills order into one's life.&lt;/p&gt;

&lt;h3 id="bring-to-the-table"&gt;Have more you can bring to the table&lt;/h3&gt;

&lt;p&gt;It's important to know your &lt;strong&gt;path&lt;/strong&gt; and mastering it. It's also exciting when you have more than your general skills to offer. For others it can be blogging, others podcasts and some, research. For many, these can be well recognise as hobbies. &lt;/p&gt;

&lt;h3 id="consistency"&gt;Be Consistent&lt;/h3&gt;

&lt;p&gt;Be consistent in all you do. Be able to &lt;em&gt;show up and put in work to the thngs that really matter to you&lt;/em&gt;: this might be in your work or your learning. Hard work will eventually get you somewhere. Build as many habits as you can, this will automate your problem solving skills for all the situations you encounter every single day. &lt;/p&gt;




&lt;p&gt;Being a developer is a stepping stone to bringing the creative world hidden within you. Everyone has this element of creativity, most just need the right tools to make it happen. &lt;/p&gt;

&lt;p&gt;All in all: to stand out, to be good,to be competent and to be a sort after developer you need to have both Core Skills and Transfereble skills. Also, &lt;em&gt;be willing at any point to go the extra  mile for what you love and believe in&lt;/em&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>6 Essential Things I Wish I Knew When I Started Programming</title>
      <author>Nick Bull</author>
      <pubDate>Thu, 26 Nov 2020 09:30:28 +0000</pubDate>
      <link>https://dev.to/nickbulljs/6-essential-things-i-wish-i-knew-when-i-started-programming-1pc7</link>
      <guid>https://dev.to/nickbulljs/6-essential-things-i-wish-i-knew-when-i-started-programming-1pc7</guid>
      <description>&lt;p&gt;I could probably achieve 300% more in 6 years as a programmer if I knew these things when I started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coding-is-not-about-the-coding" class="anchor"&gt;
  &lt;/a&gt;
  Coding Is Not About The Coding
&lt;/h2&gt;

&lt;p&gt;What do you think programming is about?&lt;/p&gt;

&lt;p&gt;Writing code?&lt;/p&gt;

&lt;p&gt;Writing good code?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It's just a part of the truth.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Programming is not about coding, programming is about solving problems with coding.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;End customers don’t care what technologies, languages, frameworks, or methodologies you use. They care only about one thing, whether your product solves their problem or not.&lt;/p&gt;

&lt;p&gt;That’s why no one cares what technologies Google search is using under the hood. Until people can find relative information with it, they will use it.&lt;/p&gt;

&lt;p&gt;It’s the number one thing I wish I knew when I started programming.&lt;/p&gt;

&lt;p&gt;I would spend less time writing “best code” and more time solving customer’s problems best.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don’t write code just to write code, solve customer’s problems with the code.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#communication-skills-more-important-than-coding-skills" class="anchor"&gt;
  &lt;/a&gt;
  Communication Skills More Important Than Coding Skills
&lt;/h2&gt;

&lt;p&gt;When I just started my career, lack of social skills was not my main problem. But when I moved higher, to the middle, senior, and leadership position, my weak soft skills became my Achilles heel.&lt;/p&gt;

&lt;p&gt;When you work on a product with a group of different people (engineers, designers, managers), communication is the only thing that makes you a “team” and helps you effectively develop the product.&lt;/p&gt;

&lt;p&gt;Lack of social skills does the opposite, it decreases the product development time and overall productivity.&lt;/p&gt;

&lt;p&gt;Here is the real situation you might face:&lt;/p&gt;

&lt;p&gt;The leadership team tells your product manager that they want to create a new product feature and put it in the next product release. It’s not urgent, they just want to release it as soon as possible (as always).&lt;/p&gt;

&lt;p&gt;The product Manager calls you on Zoom, tells you what you need to build, and asks, &lt;em&gt;“How much time do you need to build it?”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You are doing a rough calculation and tell, &lt;em&gt;“I need 20 hours.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Product Manager is not satisfied with your answer. He wants to release it as soon as possible and show the management that he can deliver results fast (this is a very common situation).&lt;/p&gt;

&lt;p&gt;So he asks you, &lt;em&gt;“Can you build it for 10 hours? We really need this feature in the next product release!”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And you know that you can if you cut the corners (no tests, messy code) but then you will need to refactor it, and it will take an additional 30 hours. Because other engineers will work with your messy code when you release it. And after refactoring, you will need to integrate their code with yours.&lt;/p&gt;

&lt;p&gt;So here’s what will happen next. If you have bad social skills, you will not convince the Product Manager that you actually need 20 hours to build this feature. &lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;Product Managers often have good social skills, from my experience. So if you can’t convince him that refactoring later is worse than spending 20 hours right now, he will easily argue with you and convince you that “refactoring later is okay.” And the whole team will lose additional 30 hours for this refactoring (I don't count the time to fix unpredictable bugs after).&lt;/p&gt;

&lt;p&gt;But if you have good communication skills you will be able to convince him of the opposite.&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;So improve your social skills as well as coding skills *&lt;/em&gt;(send memes in the group chats on Slack or something).&lt;/p&gt;

&lt;p&gt;And remember one simple truth:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;People work with people, not machines.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#regular-breaks-help-to-program-better" class="anchor"&gt;
  &lt;/a&gt;
  Regular Breaks Help To Program Better
&lt;/h2&gt;

&lt;p&gt;For 4 years I always feel exhausted after work. Somehow I could productively work only for a couple of hours. After that, I didn't have much energy. Until I learned about the Pomodoro technique.&lt;/p&gt;

&lt;p&gt;It’s quite simple. You work for 25 minutes and take a break for 5 minutes.&lt;/p&gt;

&lt;p&gt;Your working routine becomes:&lt;/p&gt;

&lt;p&gt;8:00-8:25 – Work&lt;/p&gt;

&lt;p&gt;8:25-8:30 – Break&lt;/p&gt;

&lt;p&gt;8:30-8:55 – Work&lt;/p&gt;

&lt;p&gt;8:55-9:00 – Break&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;I tried it for a week and was surprised at how focused, energetic, and productive I became  (&lt;a href="https://www.focusboosterapp.com/blog/the-science-behind-the-pomodoro-technique/"&gt;the science behind Pomodoro&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Then I went further and implemented the &lt;a href="https://twitter.com/nickbulljs/status/1303037682294173699"&gt;52+17 system&lt;/a&gt; and my productivity levels spiked by 200%.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So&lt;/strong&gt; &lt;strong&gt;take regular breaks if you want to operate at your maximum capabilities.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10x-engineers-dont-exist" class="anchor"&gt;
  &lt;/a&gt;
  10X Engineers Don’t Exist
&lt;/h2&gt;

&lt;p&gt;At the beginning of my career, I thought that a great programmer is a person who knows tons of programming languages, frameworks, and methodologies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I was wrong.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Such a mindset only gave birth to my impostor syndrome. I thought that I don't deserve my current position, my salary, that I am a “fraud.” So I started to follow every popular developer on Twitter, read every technical news, and thousands of developer blogs just to convince myself that I deserve what I have and to feel more close to the title “great developer.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This was not a healthy behavior.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But it helped me to discover that a lot of people I followed (I thought were 10X engineers) actually didn’t know a lot of things. They may know how to do some complex things that require a lot of different deep knowledge in a couple of fields and at the same time don’t know some primitive things. Like to know how to design highly scalable database architectures but don’t know how vertical-align an element with CSS.&lt;/p&gt;

&lt;p&gt;Big thanks to those developers, like Dan Abramov (creator of Redux) for &lt;a href="https://overreacted.io/things-i-dont-know-as-of-2018/"&gt;this article&lt;/a&gt;, they cured my imposter syndrome and showed me that it is okay not to know something.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#programming-is-not-hard-if-you-know-how-to-learn" class="anchor"&gt;
  &lt;/a&gt;
  Programming Is Not Hard If You Know How To Learn
&lt;/h2&gt;

&lt;p&gt;When I started to learn JavaScript, it was hard. &lt;strong&gt;Because I learned the wrong way.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Read a lot of theory without the practice, no routine, no end goal. Chaos.&lt;/p&gt;

&lt;p&gt;I thought it was normal to learn like this. Until I discovered &lt;strong&gt;deliberate practice.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s a purposeful and systematic type of practice (learning).&lt;/p&gt;

&lt;p&gt;The difference between normal practice and deliberate is that deliberate requires focused attention and is conducted with the specific goal of improving performance.&lt;/p&gt;

&lt;p&gt;After I applied a deliberate practice, I began to notice how fast I'm progressing with learning JavaScript. My knowledge started to stick for a long time, not just for 5 minutes after tutorials. I created the end goal, why I am learning JavaScript, and understand what I need to learn, and what I don't.&lt;/p&gt;

&lt;p&gt;📌 &lt;em&gt;Quick note: I’m creating a JavaScript course where I’m using deliberate practice to &lt;strong&gt;combine modern and practical JavaScript theory with a lot of real-world practice&lt;/strong&gt; to teach you how to become a skilled JavaScript developer with knowledge of modern language features. &lt;a href="https://javascriptcoursethatworks.com/"&gt;Join here.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So here is what you need to perform deliberate practice on your own:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Teacher:&lt;/strong&gt; provides practice activities designed to help you improve performance.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Perform at maximum effort:&lt;/strong&gt; constantly being taken out of your comfort zone.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Well defined and specific goals:&lt;/strong&gt; not just “overall improvement.”&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;To be in focus:&lt;/strong&gt; give your full attention, no distractions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Do conscious actions:&lt;/strong&gt; no autopilot.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Instant response to feedback and modifying your strategy.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When you start learning a new language, technology, framework, whatever, stick to these rules to get big results as quickly as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#there-is-no-best-programming-language" class="anchor"&gt;
  &lt;/a&gt;
  There is no “best programming language”
&lt;/h2&gt;

&lt;p&gt;There is no &lt;strong&gt;best "something"&lt;/strong&gt; in our world. Only &lt;strong&gt;best in something&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let’s take cars. How can we choose the best car in the world? By speed? By safety? By what criteria?&lt;/p&gt;

&lt;p&gt;It’s impossible.&lt;/p&gt;

&lt;p&gt;We can only choose the best car in a certain category. Like the safest car. Or the best offroad car.&lt;/p&gt;

&lt;p&gt;And if we look deeper, every category solves some problems.&lt;/p&gt;

&lt;p&gt;For example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt; We have children and we take them to school every day, we want our children to be safe on the way to school.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt; Buy the safest car.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt; We go camping every weekend, so we need some vehicle that can easily get us to places that are difficult to access.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt; Buy the best off-road car.&lt;/p&gt;

&lt;p&gt;The same is with programming languages. Some languages and tools are better at solving some problems than others.&lt;/p&gt;

&lt;p&gt;If we want to build an interactive website, we choose JavaScript.&lt;/p&gt;

&lt;p&gt;If we want to go with ML/AI, we choose Python.&lt;/p&gt;

&lt;p&gt;Remember, &lt;strong&gt;there is no best programming language, there is the best programming language to ...&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So start with a problem first, then pick a language to solve it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-the-end" class="anchor"&gt;
  &lt;/a&gt;
  In the end...
&lt;/h2&gt;

&lt;p&gt;If you like this article, share it with your friends and &lt;a href="https://twitter.com/nickbulljs"&gt;follow me on Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, every week I send out a "3–2–1" newsletter with 3 tech news, 2 articles, and 1 piece of advice for you.&lt;/p&gt;

&lt;p&gt;📌 &lt;a href="https://nickbulljs.com/"&gt;Subscribe to my 3–2–1 newsletter here&lt;/a&gt; 📌&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>python</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Understanding the Concept of Branches in Git</title>
      <author>Tobias Günther</author>
      <pubDate>Thu, 26 Nov 2020 07:47:13 +0000</pubDate>
      <link>https://dev.to/gittower/understanding-the-concept-of-branches-in-git-3a38</link>
      <guid>https://dev.to/gittower/understanding-the-concept-of-branches-in-git-3a38</guid>
      <description>&lt;p&gt;Using branches in your day-to-day work might very well prove to make you a better programmer or designer. Be that as it may, it's definitely one of the main reasons why Git is so highly respected. And although desktop GUIs like "&lt;a href="https://www.git-tower.com?utm_source=devto&amp;amp;utm_medium=guestpost&amp;amp;utm_campaign=understanding-the-concept-of-branches"&gt;Tower&lt;/a&gt;" make all of this a lot easier, it still makes sense to have a firm understanding of the underlying concepts!&lt;/p&gt;




&lt;p&gt;First of all, if you're coming from another version control system, I kindly ask you to forget the things you already know about branching &amp;amp; merging. It's true that Git hasn't invented this particular wheel: many other VCS also offer branching. However, Git's concepts in this area are absolutely unique when it comes to ease of use and performance.&lt;/p&gt;

&lt;p&gt;Now, let's look at why branches are so important.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-in-contexts" class="anchor"&gt;
  &lt;/a&gt;
  Working in Contexts
&lt;/h2&gt;

&lt;p&gt;In every project, there are always multiple different &lt;strong&gt;contexts&lt;/strong&gt; where work happens. Each feature, bugfix, experiment, or alternative of your product is actually a context of its own: it can be seen as its own "topic", clearly separated from other topics.&lt;/p&gt;

&lt;p&gt;This leaves you with an unlimited amount of different contexts. Most likely, you'll have at least one context for your "main" or "production" state, and another context for each feature, bugfix, experiment, etc.&lt;/p&gt;

&lt;p&gt;In real-world projects, work always happens in multiple of these contexts &lt;em&gt;in parallel&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;While you're preparing 2 new variations of your website's design (context 1 &amp;amp; 2)...&lt;/li&gt;
&lt;li&gt;you're also trying to fix an annoying bug (context 3).&lt;/li&gt;
&lt;li&gt;Besides, you also update some content on your FAQ pages (context 4), while...&lt;/li&gt;
&lt;li&gt;your teammate is working on a new feature for your shopping cart (context 5),...&lt;/li&gt;
&lt;li&gt;and another colleague is experimenting with a whole new login functionality (context 6).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#a-world-without-branches" class="anchor"&gt;
  &lt;/a&gt;
  A World Without Branches
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Not&lt;/strong&gt; working in clearly separated contexts can (and sooner or later &lt;strong&gt;will&lt;/strong&gt;) cause several problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What happens if your client likes variation 2 of the new design? In the meantime, a host of other changes have happened! How do you launch the new design while integrating all these other changes instead of losing them?&lt;/li&gt;
&lt;li&gt;What happens if the shopping cart feature became obsolete because the client changed his mind? How do you get all that unwanted code (and only that code!) out?&lt;/li&gt;
&lt;li&gt;What do you do if that new login functionality proves to be impossible to implement? It's already mingled with all of those other changes, being almost impossible to separate out!&lt;/li&gt;
&lt;li&gt;How can you avoid losing track? Most likely, you shouldn't be bothered with all the topics from all of your colleagues.
Things will start to get very confusing when you try to handle multiple topics in a single context:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ukf1VvoE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2zydtbq8wncs9d2i9wsq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ukf1VvoE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2zydtbq8wncs9d2i9wsq.png" alt="one-context"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;A tempting workaround might  be to simply copy your complete project folder for each new context. But this only leaves you with other problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You circumvent your VCS, since those new folders won't be under version control.&lt;/li&gt;
&lt;li&gt;Not being version controlled, you can't easily share &amp;amp; collaborate with others.&lt;/li&gt;
&lt;li&gt;Integrating changes from one context into another (maybe your main context) is difficult and error-prone.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make a long story short: if your goal is to work professionally, you'll have to find a way to deal with multiple contexts in a professional manner.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#branches-to-the-rescue" class="anchor"&gt;
  &lt;/a&gt;
  Branches to the Rescue
&lt;/h2&gt;

&lt;p&gt;You might have already guessed it: branches are what we need to solve these problems. Because a branch represents exactly such a context in a project and helps you keep it separate from all other contexts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6OVVoZRh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/18repx38nvbi4ncne3v7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6OVVoZRh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/18repx38nvbi4ncne3v7.png" alt="multiple-contexts"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This was an excerpt from my (&lt;strong&gt;completely free!!&lt;/strong&gt;) online book &lt;a href="https://www.git-tower.com/learn/git/ebook?utm_source=devto&amp;amp;utm_medium=guestpost&amp;amp;utm_campaign=understanding-the-concept-of-branches"&gt;"Learn Version Control with Git"&lt;/a&gt;. Feel free to read more if you want to understand &lt;em&gt;How branches can solve these problems&lt;/em&gt;, &lt;em&gt;How to create and manage them&lt;/em&gt;, &lt;em&gt;How to integrate changes between branches&lt;/em&gt; and &lt;em&gt;where remote branches come into play&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.git-tower.com/learn/git/ebook?utm_source=devto&amp;amp;utm_medium=guestpost&amp;amp;utm_campaign=understanding-the-concept-of-branches"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lhq4VJQq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hqcbk5vnzacvofekh007.png" alt="ebook-learn-version-control"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Companies That Use Node.js for Backend: How Do Big Players Benefit from It?</title>
      <author>TechMagic</author>
      <pubDate>Thu, 26 Nov 2020 06:59:21 +0000</pubDate>
      <link>https://dev.to/techmagic/companies-that-use-node-js-for-backend-how-do-big-players-benefit-from-it-19b0</link>
      <guid>https://dev.to/techmagic/companies-that-use-node-js-for-backend-how-do-big-players-benefit-from-it-19b0</guid>
      <description>&lt;p&gt;Node.js is a JavaScript server environment that runs code outside a browser. The technology is a perfect fit for many websites like streaming, games, time trackers, social media applications, etc. It provides a scalable and fast solution for real-time applications.&lt;/p&gt;

&lt;p&gt;Being written in JavaScript, the most popular programming language globally, it opens up the door to many businesses. It is no wonder that it has become a highly trending technology that many companies have embraced, including some of the most prominent players like Netflix and PayPal. What companies use Node.js technology, and how do they benefit from it? Find the answer in this blog post.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#is-nodejs-really-changing-the-market" class="anchor"&gt;
  &lt;/a&gt;
  Is Node.js Really Changing the Market?
&lt;/h1&gt;

&lt;p&gt;According to &lt;a href="https://selleo.com/blog/10-successful-companies-using-nodejs"&gt;Stack Overflow&lt;/a&gt;, Node.js is the absolute leader in the world of technology with 50.4%. So, what makes it so popular?&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://nodejs.org/en/user-survey-report/"&gt;the latest Node.js report&lt;/a&gt;, this technology has a significant impact on business: it provides a 68% increase in developer productivity, a 48% increase in application performance, and a 13% increase in customer satisfaction. Moreover, these numbers seem to grow over the years:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6vGMcLXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.techmagic.co/content/images/size/w1000/2020/10/serverless-security-trends-copy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6vGMcLXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.techmagic.co/content/images/size/w1000/2020/10/serverless-security-trends-copy.png" alt="Node.js report"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On top of that, the Node.js report mentions that four out of five backend and full-stack developers adopt Node.js frameworks. Why do developers choose to work with Node.js?&lt;/p&gt;

&lt;p&gt;First, this JavaScript environment is easy to work with, and it enables the execution of the code on the server-side. Secondly, it allows high scalability as well as quicker development cycles. Finally, it is the go-to technology with a thriving open-source community. Learn more about the general &lt;a href="https://blog.techmagic.co/top-10-benefits-of-node-js-for-web-application-development/"&gt;benefits of Node.js from the experts&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-top-10-well-known-companies-using-nodejs-for-the-backend" class="anchor"&gt;
  &lt;/a&gt;
  The Top 10 Well Known Companies Using Node.js for the Backend
&lt;/h1&gt;

&lt;p&gt;Based on the long list of Node.js usage advantages, it is easy to believe that among the biggest companies that used Node.js are NASA, Uber, and Twitter. Who uses Node.js, why did they decide to move to Node.js, and how has it worked out for them?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xzrjvndy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.techmagic.co/content/images/size/w1000/2020/10/netflix.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xzrjvndy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.techmagic.co/content/images/size/w1000/2020/10/netflix.png" alt="Netflix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#netflix" class="anchor"&gt;
  &lt;/a&gt;
  Netflix
&lt;/h2&gt;

&lt;p&gt;Netflix is the largest provider of streaming content and video-on-demand with 93 million users worldwide. Its path to current success started back in 2015 when Java – the backend technology Netflix used – could not handle such a rapidly growing user base. The backend development could not catch up with the frontend, which caused a higher load time. The customized UI design was unachievable, which led to poor customer experience. Finally, Java took too much time to build, and as a result, the development and deployment processes were inefficiently slow.&lt;/p&gt;

&lt;p&gt;The benefits Netflix got:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Since the adoption of Node.js technology, startup time has drastically decreased by 70%. Instead of taking up ten seconds to load the Netflix interface, it only takes one second now;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Node.js made it easier to integrate microservices and break a huge block of information into a detailed interface;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The transition from the backend to the frontend has significantly accelerated due to Node.js being a JavaScript-based environment.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ny3Rv4PN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.techmagic.co/content/images/size/w1000/2020/10/NASA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ny3Rv4PN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.techmagic.co/content/images/size/w1000/2020/10/NASA.png" alt="NASA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nasa" class="anchor"&gt;
  &lt;/a&gt;
  NASA
&lt;/h2&gt;

&lt;p&gt;NASA is one of the most well-known enterprises in the world. NASA has decided to make a transition to Node.js after an accident, which almost led to a fatal outcome. The accident was caused by a long access time due to the inefficient storage of data across many locations. NASA’s developers found it important to move data into a cloud database to shorten the access time. Additionally, most of NASA’s applications were built on JavaScript.&lt;/p&gt;

&lt;p&gt;The benefits for NASA:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The access time has increased by 300%, allowing users to reach the information in seconds, not hours;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NASA has successfully moved legacy databases to the cloud and provided access to them via APIs;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Node.js has shortened the process of working with databases from 28 steps to only seven, which made scientific research significantly easier.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P0JOu9be--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.techmagic.co/content/images/size/w1000/2020/10/trello.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P0JOu9be--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.techmagic.co/content/images/size/w1000/2020/10/trello.png" alt="Trello"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trello" class="anchor"&gt;
  &lt;/a&gt;
  Trello
&lt;/h2&gt;

&lt;p&gt;Trello is a tool for project management, which is used across industries and countries. A platform like this requires instant updates in real-time without latency, which is why Trello is one of the companies that use Node.js for its server-side. Trello needs to juggle several real-time connections on the server to ensure that updates come smoothly and on time.&lt;/p&gt;

&lt;p&gt;Trello’s main advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Node.js provided an extremely lightweight Single Page Application;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Thanks to Node.js, Trello can handle updates with zero latency;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Node.js architecture enabled to cut expenses of development and prototyping.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lsfaF1MZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.techmagic.co/content/images/size/w1000/2020/10/Paypal.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lsfaF1MZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.techmagic.co/content/images/size/w1000/2020/10/Paypal.png" alt="PayPal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#paypal-nodejs-transition" class="anchor"&gt;
  &lt;/a&gt;
  PayPal Node.js transition
&lt;/h2&gt;

&lt;p&gt;With over 200 million active accounts, PayPal is a worldwide leader in the industry of online payments and transfers. In 2013, they stumbled upon some difficulties caused by using Java, which didn’t mix well with frontend development. Java provided long development times as well as poor performance, so PayPal has become one of the companies using Node.js.&lt;/p&gt;

&lt;p&gt;The benefits PayPal acquired:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A smaller team of developers built a Node.js based application in a shorter amount of time;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Response time has reduced, leading to a 35% decrease in loading time;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The number of user requests per second has doubled since the adoption of Node.js technology.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vl6RWXeU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.techmagic.co/content/images/size/w1000/2020/10/linkedin.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vl6RWXeU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.techmagic.co/content/images/size/w1000/2020/10/linkedin.png" alt="LinkedIn"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linkedin" class="anchor"&gt;
  &lt;/a&gt;
  LinkedIn
&lt;/h2&gt;

&lt;p&gt;Another company on the list of the websites using Node.js is LinkedIn — the world’s biggest social media platform built for business and employment networking. Its popularity continues to grow, with 467 million users from more than 200 countries. After shifting from Ruby on Rails to Node.js, they’ve created an application that runs ten times faster than its old version. The decision has been made due to the synchronicity of the previous Ruby App, which led to the long loading times, especially whenever there was a traffic increase.&lt;/p&gt;

&lt;p&gt;The benefits LinkedIn obtained:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The entire LinkedIn architecture has been built on JavaScript, which made the handling of client-server interactions simpler;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The number of servers has been cut from thirty to three, which doubled the traffic capacity.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z8YVm1_h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.techmagic.co/content/images/size/w1000/2020/10/uber.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z8YVm1_h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.techmagic.co/content/images/size/w1000/2020/10/uber.png" alt="Uber"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uber-nodejs-experience" class="anchor"&gt;
  &lt;/a&gt;
  Uber Node.js experience
&lt;/h2&gt;

&lt;p&gt;Uber is another ever-growing platform that expands the number of users every six months operating in 68 countries worldwide. Due to the always-increasing number of connections, Uber had to create a real-time architecture. Additionally, the company ran advanced analytics on the data stored on the platform, requiring the services to perform smoothly. That is why Uber is now one of the companies that use Node.js in production.&lt;/p&gt;

&lt;p&gt;The benefits Uber received:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Node.js enabled Uber to process an immense amount of data and numerous user requests much quicker;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Thanks to Node.js technology, Uber is capable of processing 14 million rides every day;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Uber increased its connectivity and reduced management overheads by building over 600 stateless endpoints.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uxySuAly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.techmagic.co/content/images/size/w1000/2020/10/twiter.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxySuAly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.techmagic.co/content/images/size/w1000/2020/10/twiter.png" alt="Twitter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-shift-to-nodejs-twitter-case" class="anchor"&gt;
  &lt;/a&gt;
  The shift to Node.js — Twitter case
&lt;/h2&gt;

&lt;p&gt;More than 80% of the account holders on Twitter access it via a smartphone, which led to a decision to build Twitter Lite — an application with minimum functionality that can run even with a poor internet connection. On top of that, the website version of Twitter wasn’t optimized for a slow internet connection. This led Twitter to become one of the companies that use Node.js.&lt;/p&gt;

&lt;p&gt;Twitter’s benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Twitter Lite doesn’t take too much space — 1% to 3% — which saves mobile device users a lot of storage space;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The application runs even on 3G and 2G connections;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The maintenance costs of Twitter Lite are significantly lower than of Twitter Desktop.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bDRslkER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.techmagic.co/content/images/size/w1000/2020/10/lebay.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bDRslkER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.techmagic.co/content/images/size/w1000/2020/10/lebay.png" alt="eBay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ebay" class="anchor"&gt;
  &lt;/a&gt;
  eBay
&lt;/h2&gt;

&lt;p&gt;Another business among the examples of companies using Node.js is eBay. With 183 million users, eBay is the biggest marketplace that offers C2C and B2C online sales services. eBay’s app used to run on Java, which showed long startup times and poor performance. As a platform with huge traffic, eBay needed a technology that would speed up the development to catch up with frontend iterations.&lt;/p&gt;

&lt;p&gt;eBay’s benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;eBay created microservices using Node.js that run in real-time and don’t overload the infrastructure.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Node.js provided scalability, speed, and transparency.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eDvMsbdY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.techmagic.co/content/images/size/w1000/2020/10/groupon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eDvMsbdY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.techmagic.co/content/images/size/w1000/2020/10/groupon.png" alt="Groupon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#groupon" class="anchor"&gt;
  &lt;/a&gt;
  Groupon
&lt;/h2&gt;

&lt;p&gt;Groupon is the largest marketplace for coupons, deals, and discounts with 40 million customers. When Groupon achieved the mark of 200 million downloads in 2019, it faced scalability issues. That is when the company turned to Node.js and held the largest production deployments of Node.js in the world.&lt;/p&gt;

&lt;p&gt;Groupon’s benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;High scalability has been ensured by Node.js deployment to enable 3,400 backend services to run smoothly;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The loading speed has doubled;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Node.js has simplified and accelerated the migration to a different platform.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jyjcBcao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.techmagic.co/content/images/size/w1000/2020/10/medium.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jyjcBcao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.techmagic.co/content/images/size/w1000/2020/10/medium.png" alt="Medium"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#medium" class="anchor"&gt;
  &lt;/a&gt;
  Medium
&lt;/h2&gt;

&lt;p&gt;Medium is a world-renowned online publishing platform that uses Node.js with over 85 million users. Having reached 7.5 million posts in 2016, Medium felt the need for big data management without overloading the server. The company also had to keep up with the text editors’ ever-growing performance standards for post publishing.&lt;/p&gt;

&lt;p&gt;Benefits for Medium:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Even with large-sized images and content, the page loads in 2.7 seconds.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Node.js has improved user experience as well as accelerated the deployment time.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#our-experience" class="anchor"&gt;
  &lt;/a&gt;
  Our Experience
&lt;/h1&gt;

&lt;p&gt;TechMagic is a company that specializes in application development. With years of experience and a multitude of projects, TechMagic is an expert in backend development as well as AWS infrastructure. We built applications both from scratch and by adding our specialists to startup development teams, using several full-stack approaches, including Node.js.&lt;/p&gt;

&lt;p&gt;We love JavaScript, and that is why we have embraced Node.js to build all kinds of applications of any level of complexity. Additionally, we are experts in serverless architecture, which is the best ingredient for Node.js-based platforms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://techmagic-public.s3.eu-west-2.amazonaws.com/elements-cloud-serverless-case-study.pdf"&gt;Elements.cloud&lt;/a&gt; is a company that helps other businesses to visualize and organize business processes. The biggest challenge for Elements.cloud has been implementing customizable process mapping and visualization tools amid the automated scalability of the backend infrastructure. TechMagic helped Elements.cloud to build a highly scalable and cost-efficient application using Node.js and AWS infrastructure.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;If you are still not convinced that Node.js is a technology of the future, here are additional big players who use Node.js as a part of their operations: Google, Yahoo, Mozilla, Microsoft, and many more. Due to its unlimited advantages, many companies are embracing Node.js technology. One of these days, this trending technology will conquer the market and become the go-to framework for every company, from startups to the biggest players. If you have a product in mind, consider using Node.js for its backend. We’d be pleased to consult you on the technology’s peculiarities and offer our services to make your idea come true.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
    </item>
    <item>
      <title>Best Black Friday 2020 Deals for Designers and Developers</title>
      <author>Sunil Joshi</author>
      <pubDate>Thu, 26 Nov 2020 05:49:21 +0000</pubDate>
      <link>https://dev.to/suniljoshi19/best-black-friday-2020-deals-for-designers-and-developers-908</link>
      <guid>https://dev.to/suniljoshi19/best-black-friday-2020-deals-for-designers-and-developers-908</guid>
      <description>&lt;p&gt;It's that time of the year again! Welcome to the best deals you can get on any digital product, service, coding courses, UI kits, software discounts, and more! &lt;/p&gt;

&lt;p&gt;Black Friday will be this Friday 27th November and multiple companies and startups have already started giving huge discounts on their products already. Some run an entire week and some a few days, you decide what to purchase with a 40%, 80%, or (who knows) 90% off! &lt;/p&gt;

&lt;p&gt;Here are some of the quite unique and the best deals you can grab to enhance your workflow for even better 2021.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-95-off-on-wrappixel-templates" class="anchor"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.wrappixel.com"&gt;95% off on WrapPixel Templates&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Hp5_9y_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wrappixel.com/demos/images/black-friday-2020/black-friday-20-wrappixel.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Hp5_9y_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wrappixel.com/demos/images/black-friday-2020/black-friday-20-wrappixel.jpg" alt="WrapPixel's Black Friday Deals"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Heck yeah, we are starting with the biggest deal you can get both for designers and developers. WrapPixel has a wonderful collection of beautiful admin templates, mega bundles that consist of multiple templates, snippets, freebies, and more.&lt;/p&gt;

&lt;p&gt;It doesn't matter if you're in love with Vue or React, they have a huge collection of templates for all the major players including Bootstrap.&lt;/p&gt;

&lt;p&gt;This Black Friday, they're offering a whopping &lt;strong&gt;95% off&lt;/strong&gt; on the biggest bundles of admin dashboard templates and multipurpose website templates. You get 25 premium products with unmatched support.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-the-deal" class="anchor"&gt;
  &lt;/a&gt;
  What's the deal?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;12&lt;/strong&gt; Bootstrap templates.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;8&lt;/strong&gt; Angular templates.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;5&lt;/strong&gt; React templates.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;3&lt;/strong&gt; Vuejs templates.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;WrapKit&lt;/strong&gt; Bootstrap UI.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;29+&lt;/strong&gt; domains.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#pricing-from-896-69" class="anchor"&gt;
  &lt;/a&gt;
  Pricing: From &lt;del&gt;$896&lt;/del&gt; &lt;strong&gt;$69&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.wrappixel.com"&gt;Grab the Deal&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-up-to-60-off-on-bootstrap-dash-templates" class="anchor"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://www.bootstrapdash.com"&gt;Up to 60% off on Bootstrap Dash Templates&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OuxvntaF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wrappixel.com/demos/images/black-friday-2020/bootstrap-dash-bf-20.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OuxvntaF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wrappixel.com/demos/images/black-friday-2020/bootstrap-dash-bf-20.jpg" alt="Bootstrap Dash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like to have admin dashboards along with UI kits and pages. then Bootstrap Dash might be your choice.&lt;/p&gt;

&lt;p&gt;They too offer exciting bundles and freebies but on Black Friday week, this time they're offering up to &lt;strong&gt;60% off&lt;/strong&gt;. They have some of their best selling templates made with Bootstrap, Angular, Vue.js, React, and Laravel.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-the-deal" class="anchor"&gt;
  &lt;/a&gt;
  What's the deal?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Flat &lt;strong&gt;25% off&lt;/strong&gt; on All Bundles.&lt;/li&gt;
&lt;li&gt;Flat &lt;strong&gt;20% off&lt;/strong&gt; on All Templates.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;80% off&lt;/strong&gt; on Bundles.&lt;/li&gt;
&lt;li&gt;“All Templates” bundle for &lt;strong&gt;$99&lt;/strong&gt; (Regular license) or &lt;strong&gt;$199&lt;/strong&gt; (Developer license).&lt;/li&gt;
&lt;li&gt;Choose any UI kit and get the regular license for &lt;strong&gt;free&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;30% off&lt;/strong&gt; on any template!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#pricing-from-25" class="anchor"&gt;
  &lt;/a&gt;
  Pricing: From $25
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.bootstrapdash.com"&gt;Grab the Deal&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-50-off-on-codedthemes-templates" class="anchor"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://codedthemes.com"&gt;50% off on CodedThemes Templates&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hibubEdi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wrappixel.com/demos/images/black-friday-2020/coded-themes-bf-20.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hibubEdi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wrappixel.com/demos/images/black-friday-2020/coded-themes-bf-20.jpg" alt="Coded Themes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CodedThemes not only provides coded templates for a quickstart but they also have some cool UI kits offering Figma files also. With a well-documented and structured code on their products, you are in for some great stuff here.&lt;/p&gt;

&lt;p&gt;To avail the benefits of the ongoing deal, they are offering &lt;strong&gt;50% off on any product&lt;/strong&gt; you want. From Angular dashboards to UI kits, they got you covered.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pricing-from-29" class="anchor"&gt;
  &lt;/a&gt;
  Pricing: From $29
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://codedthemes.com"&gt;Grab the Deal&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-73-off-on-appseed-web-app-generator" class="anchor"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://appseed.us"&gt;73% off on AppSeed Web App Generator&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JzwwLord--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wrappixel.com/demos/images/black-friday-2020/appseed-bf-20.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JzwwLord--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wrappixel.com/demos/images/black-friday-2020/appseed-bf-20.jpg" alt="AppSeed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Who knew making a web app can be this much fun! With AppSeed you get a development-ready web app coded with features like authentication, database, and deployment scripts. They also use modern UI kits.&lt;/p&gt;

&lt;p&gt;Check out their Black Friday Bundle where they are currently offerings a 73% discount (limited to 100 sales).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-the-deal" class="anchor"&gt;
  &lt;/a&gt;
  What's the deal?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;5&lt;/strong&gt; premium dashboards .&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Free updates&lt;/strong&gt; for 12 months.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;24/7&lt;/strong&gt; live support.&lt;/li&gt;
&lt;li&gt;Freedom to choose between &lt;strong&gt;Flask or Django&lt;/strong&gt; framework for each of the 5 dashboards.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#pricing-from-365-99" class="anchor"&gt;
  &lt;/a&gt;
  Pricing: From &lt;del&gt;$365&lt;/del&gt; $99
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://appseed.us"&gt;Grab the Deal&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-90-off-on-themesberg-themes" class="anchor"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://themesberg.com/black-friday"&gt;90% off on Themesberg Themes&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vH19Anz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wrappixel.com/demos/images/black-friday-2020/themesburg-bf-20.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vH19Anz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wrappixel.com/demos/images/black-friday-2020/themesburg-bf-20.jpg" alt="Themesberg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are in for premium and free Bootstrap templates, themes, and UI kits that include all the dashboards, landing pages, product pages, and more then Themesberg is a great service.&lt;/p&gt;

&lt;p&gt;This Black Friday, they come up with 90% off on 7 premium themes powered by Bootstrap CSS. What tech stack you ask? It's validated &lt;em&gt;HTML 5&lt;/em&gt;, &lt;em&gt;Bootstrap&lt;/em&gt;, &lt;em&gt;SASS&lt;/em&gt;, and &lt;em&gt;Gulp&lt;/em&gt; commands for enhanced workflow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-the-deal" class="anchor"&gt;
  &lt;/a&gt;
  What's the deal?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;7&lt;/strong&gt; Bootstrap 4.5/5 themes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;15+&lt;/strong&gt; example pages.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;300+&lt;/strong&gt; coded elements.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;6&lt;/strong&gt; months premium support.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#pricing-from-473-79" class="anchor"&gt;
  &lt;/a&gt;
  Pricing: From &lt;del&gt;$473&lt;/del&gt; $79
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://themesberg.com/black-friday"&gt;Grab the Deal&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-90-off-on-creative-tim-ui-kits" class="anchor"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://www.creative-tim.com/campaign?partner=128843"&gt;90% off on Creative Tim UI Kits&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lRVyN8ZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wrappixel.com/demos/images/black-friday-2020/creative-tim-bf-20.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lRVyN8ZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wrappixel.com/demos/images/black-friday-2020/creative-tim-bf-20.jpg" alt="Creative Tim"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Black Friday at Creative Tim kicks off! All these special Black Friday Stacks come with three types of licenses available: Freelancer, Company, and Enterprise. There is no need for a coupon code. All you need to do is visit the Creative Tim website and choose the one that best suits your needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-the-deal" class="anchor"&gt;
  &lt;/a&gt;
  What's the deal?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;React Stack&lt;/strong&gt; - 17 premium UI Kits and Dashboards.&lt;/li&gt;
&lt;li&gt;*&lt;em&gt;Bootstrap Stack *&lt;/em&gt;- 19 premium UI Kits and Dashboards.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Angular Stack&lt;/strong&gt; - 10 premium UI Kits and Dashboards.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Vue.js Stack&lt;/strong&gt; - 15 premium UI Kits and Dashboards.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Laravel Stack&lt;/strong&gt; - 9 premium UI Kits and Dashboards.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The Ultimate Stack&lt;/strong&gt; - 63 premium UI Kits and Dashboards.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#pricing-from-1104-99" class="anchor"&gt;
  &lt;/a&gt;
  Pricing: From &lt;del&gt;$1,104&lt;/del&gt; $99
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.creative-tim.com/campaign?partner=128843"&gt;Grab the Deal&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-upto-70-off-on-mockplus-product-design-tool" class="anchor"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://www.mockplus.com/buy/black-friday?hmsr=mr"&gt;Upto 70% off on Mockplus Product Design tool&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--51Z3pCG3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wrappixel.com/demos/images/black-friday-2020/mockplus-bf-20.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--51Z3pCG3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wrappixel.com/demos/images/black-friday-2020/mockplus-bf-20.jpg" alt="Mockplus"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mockplus Black Friday Sale kicks off! Power up your product design and collaboration with Mockplus at the best price of the year.&lt;/p&gt;

&lt;p&gt;You can get &lt;strong&gt;50% off&lt;/strong&gt; on all Mockplus plans right now without any coupons. Plus, you can enjoy a Double Discount for Group Buying.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-the-deal" class="anchor"&gt;
  &lt;/a&gt;
  What's the deal?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;70% off&lt;/strong&gt; on Cloud Pro annual plan.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;70% off&lt;/strong&gt; on Cloud Ultimate annual plan.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;50% off&lt;/strong&gt; on all Mockplus plans.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#pricing-from-99-29" class="anchor"&gt;
  &lt;/a&gt;
  Pricing: From &lt;del&gt;$99&lt;/del&gt; $29
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.mockplus.com/buy/black-friday?hmsr=mr"&gt;Grab the Deal&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-50-off-on-vue-mastery-courses" class="anchor"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://www.vuemastery.com/black-friday-2020/"&gt;50% off on Vue Mastery Courses&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k_uI8hUg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wrappixel.com/demos/images/black-friday-2020/vue-mastery-bf-20.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k_uI8hUg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wrappixel.com/demos/images/black-friday-2020/vue-mastery-bf-20.jpg" alt="Vue Mastery"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ask any Vue dev, "Where can I watch high-quality up-to-date Vue course apart from Udemy?", they will likely answer to have a Vue Mastery subscription. Since its inception, they have 21 courses covered in 73 hours of teaching content from the latest Vue 3 to Nuxt.&lt;/p&gt;

&lt;p&gt;Get their annual plan for half of the original price this Black Friday season. The platform has a &lt;em&gt;huge community&lt;/em&gt;, &lt;em&gt;training videos&lt;/em&gt; of all Vue conferences to binge watch, and more!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pricing-from-228-114" class="anchor"&gt;
  &lt;/a&gt;
  Pricing: From &lt;del&gt;$228&lt;/del&gt; $114
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.vuemastery.com/black-friday-2020/"&gt;Grab the Deal&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-50-off-storewide-on-raywenderlichcom" class="anchor"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://www.raywenderlich.com/18725977-raywenderlich-com-black-friday-sale-50-off-store-wide"&gt;50% off store-wide on raywenderlich.com&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bP7oOA-u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wrappixel.com/demos/images/black-friday-2020/raywend-bf-20.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bP7oOA-u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wrappixel.com/demos/images/black-friday-2020/raywend-bf-20.jpg" alt="Ray Wender"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay, so if Vue Mastery has premium courses for Vuejs, then where would mobile app devs go? Yes, you're right, &lt;a href="https://www.raywenderlich.com/"&gt;raywenderlich.com&lt;/a&gt; is one of the favorite destinations for all things mobile. Be it &lt;em&gt;Swift&lt;/em&gt;, &lt;em&gt;Kotlin&lt;/em&gt;, or even &lt;em&gt;Flutter&lt;/em&gt;, they got you covered.&lt;/p&gt;

&lt;p&gt;You're in luck as this Black Friday week, they are offering &lt;strong&gt;50% off&lt;/strong&gt; on every item on their online store. So the Ultimate Subscriptions starting at $149/year. Also, the &lt;a href="https://www.raywenderlich.com/books"&gt;dev books&lt;/a&gt; are half the price from what they were before.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pricing-from-2999-1242" class="anchor"&gt;
  &lt;/a&gt;
  Pricing: From &lt;del&gt;$29.99&lt;/del&gt; $12.42
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.raywenderlich.com/18725977-raywenderlich-com-black-friday-sale-50-off-store-wide"&gt;Grab the Deal&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-up-to-50-off-on-pixsellz-ui-kits" class="anchor"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://www.pixsellz.io"&gt;Up to 50% off on Pixsellz UI Kits&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IJDqTuHJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wrappixel.com/demos/images/black-friday-2020/pixsellz-bf-20.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IJDqTuHJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wrappixel.com/demos/images/black-friday-2020/pixsellz-bf-20.jpg" alt="Pixesellz"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More into wireframes than UI kits, it's fine because on Pixsellz they sell everything from your favorite UI components and kits to free illustrations, icons library, and more.&lt;/p&gt;

&lt;p&gt;This Black Friday, you can get up to 50% off on their items. All you need to do is use the coupon code BLACK at the checkout and the discount will be applied.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pricing-from-294-68" class="anchor"&gt;
  &lt;/a&gt;
  Pricing: From &lt;del&gt;$294&lt;/del&gt; $68
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.pixsellz.io"&gt;Grab the Deal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, what are you planning to purchase this week? A premium subscription to a course or a mega bundle of UI kits? We hope these deals helped you in a way, happy purchasing!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Develop a Landing Page from Scratch within 30 minutes</title>
      <author>pxCode</author>
      <pubDate>Thu, 26 Nov 2020 04:51:51 +0000</pubDate>
      <link>https://dev.to/px2code/develop-a-landing-page-from-scratch-within-30-minutes-57he</link>
      <guid>https://dev.to/px2code/develop-a-landing-page-from-scratch-within-30-minutes-57he</guid>
      <description>&lt;p&gt;“Give me your Sketch, and we give you the Code!”&lt;/p&gt;

&lt;p&gt;We are running pxCode Challenges. By using pxCode, we show you how can we achieve to make a Sketch Design Blueprint to Responsive Webpage within 30 minutes. Let's follow us if you're interested.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/no5VLybdKE0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Our challenge is “MyCard Landing page”&lt;/p&gt;

&lt;p&gt;Generally, it is common to consume around a few hours (6+ hours), sometimes even take a few days to hand-coding the landing page.&lt;/p&gt;

&lt;p&gt;You can check the video for details on how we can complete it from scratch within limited minutes by pxCode. (We have two separate people to try this case, one record is 50 minutes and another is 30 minutes)&lt;/p&gt;

&lt;p&gt;_&lt;/p&gt;

&lt;p&gt;Preview the result here: &lt;a href="https://bit.ly/2Fgn7ES"&gt;https://bit.ly/2Fgn7ES&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Final source code at CodeSandBox: &lt;a href="https://bit.ly/3hb3jjD"&gt;https://bit.ly/3hb3jjD&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;_&lt;/p&gt;

&lt;p&gt;Hand-code web is always painful and slow. We provide pxCode a better solution for web development, in a much faster and joyful way without sacrificing code quality.&lt;/p&gt;

&lt;p&gt;You can preview the result and final source code at CodeSandbox.&lt;/p&gt;

&lt;p&gt;Preview the result here: &lt;a href="https://bit.ly/2Fgn7ES"&gt;https://bit.ly/2Fgn7ES&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Final source code at CodeSandBox: &lt;a href="https://bit.ly/3hb3jjD"&gt;https://bit.ly/3hb3jjD&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A8Dp42hh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2fd6yumn9zdtecpwrzpl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A8Dp42hh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2fd6yumn9zdtecpwrzpl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are welcome and excited to invite you to join the challenge. Try it on your own Sketch file and tell us how long did you take to complete a Responsive Webpage by using pxCode!&lt;/p&gt;

&lt;p&gt;Join us free on: &lt;a href="https://www.pxcode.io/"&gt;https://www.pxcode.io/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>react</category>
      <category>reactnative</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Create Signup/Login system (easiest method) by SilvenLEAF</title>
      <author>SilvenLEAF</author>
      <pubDate>Thu, 26 Nov 2020 04:18:07 +0000</pubDate>
      <link>https://dev.to/silvenleaf/create-signup-login-system-easiest-method-by-silvenleaf-21b5</link>
      <guid>https://dev.to/silvenleaf/create-signup-login-system-easiest-method-by-silvenleaf-21b5</guid>
      <description>&lt;p&gt;Creating a Signup Login system with JavaSript is way easier than you think! Let's made one from scratch!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simplest-way-to-create-login-signup" class="anchor"&gt;
  &lt;/a&gt;
  SIMPLEST WAY TO CREATE LOGIN SIGNUP
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create Strategy&lt;/li&gt;
&lt;li&gt;Config Passport&lt;/li&gt;
&lt;li&gt;Handle Route&lt;/li&gt;
&lt;li&gt;Use cookie&lt;/li&gt;
&lt;li&gt;Use frontEND&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's go one by one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#complete-tutorial" class="anchor"&gt;
  &lt;/a&gt;
  COMPLETE TUTORIAL
&lt;/h3&gt;

&lt;p&gt;For those who already know how to set up their basic server and database, skip to &lt;strong&gt;STEP 4&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-0-setting-up-our-project-folder" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 0. Setting up our Project folder&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Create a folder called "authDemo" and open it on your favorite text editor. Create a file named &lt;strong&gt;app.js&lt;/strong&gt;. Now type &lt;strong&gt;npm init -y&lt;/strong&gt; on your terminal. It'll just create a package.json file to track our packages etc. Anyway let's begin the real adventure! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-basic-server-setup" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 1. Basic Server Setup&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;First type this on your terminal to install these packages&lt;br&gt;
&lt;code&gt;npm i express mongoose passport passport-local cookie-session&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#short-package-descriptions" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Short package descriptions&lt;/strong&gt;
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;express&lt;/strong&gt;: to create our server&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;mongoose&lt;/strong&gt;: to connect to our database&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;passport&lt;/strong&gt;: our main package for login/signup including Google Github logins too&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;passport-local&lt;/strong&gt;: to create our login/signup with login and signup forms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now write these on your app.js file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// core modules&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//it is an in-built node module so no need to install it&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;passport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;passport&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//this is our main package that will help us create the login signup system&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cookieSession&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cookie-session&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//this is for using cookies so that our users stay logged in&lt;/span&gt;





&lt;span class="c1"&gt;// ------------------------------FIRING EXPRESS APP&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;//it allows us access the data sent from frontend using req.body&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt; 
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`client`&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt; &lt;span class="c1"&gt;//here we are saying that our static files I mean html css etc files will be server from this client file&lt;/span&gt;




&lt;span class="c1"&gt;// -------------------------COOKIE AND PASSPORT&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cookieSession&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;maxAge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//it is the total expiration time, here the cookie will be alive for 1 day&lt;/span&gt;
  &lt;span class="na"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`abcdefghijklmn`&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;//here type whatever your want instead of abcdefghijklm, I just typed abcdefghijklm &lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;








&lt;span class="cm"&gt;/* -------------------------------------------------
.                    config
------------------------------------------------- */&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./config/mongodbConfig&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Here it is firing the mongodbConfig file that has our database configuration, we'll create it soon&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./config/passportConfig&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Here it is firing the passportConfig file that has our login/signup configuration, we'll create it soon&lt;/span&gt;












&lt;span class="cm"&gt;/* -------------------------------------------------
.                    routes
------------------------------------------------- */&lt;/span&gt;
&lt;span class="c1"&gt;//                  auth routes&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./routes/authRoute&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;//here authRoute has our login signup routes, we'll create it soon&lt;/span&gt;



&lt;span class="c1"&gt;// CATCH ALL HANDLER, if there is any route that does not match the above routes, send the index.html file&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`client/index.html`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;






&lt;span class="c1"&gt;// ERRORS HANDLER&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Server error`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// --------------------end of routes------------------------&lt;/span&gt;


















&lt;span class="c1"&gt;// -----------------------------------------LISTEN&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server is running on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Will explain this code later. First let's set our database configuration and routes&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-basic-database-setup" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 2. Basic Database setup&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;create a config folder, here we will store all our configuration. You don't have to, but I prefer it because if your project gets larger it'll help you make your codebase cleaner and easier to maintain. Anyway, now create a file called &lt;strong&gt;mongodbConfig.js&lt;/strong&gt; on that folder.&lt;/p&gt;

&lt;p&gt;Write these on &lt;strong&gt;mongodbConfig.js&lt;/strong&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;







&lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;YOUR_DATABASE_STRING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;useNewUrlParser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;useUnifiedTopology&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;useCreateIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;useFindAndModify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;



  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;connected to MongoDB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Replace &lt;strong&gt;YOUR_DATABASE_STRING&lt;/strong&gt; with your database string, if you don't have that, go and use &lt;a href="https://www.mongodb.com/"&gt;&lt;strong&gt;MongoDB Atlas&lt;/strong&gt;&lt;/a&gt; and create a cluster and you'll get your database string.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-creating-an-user-model" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 3. Creating an USER model&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Create a folder called &lt;strong&gt;models&lt;/strong&gt; and create &lt;strong&gt;User.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Type these on &lt;strong&gt;User.js&lt;/strong&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;



&lt;span class="cm"&gt;/* ----------------------------------
.           SUB SCHEMAs
---------------------------------- */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LocalSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="p"&gt;})&lt;/span&gt;









&lt;span class="cm"&gt;/* ------------------------------------------
.                MAIN SCHEMA
------------------------------------------ */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;local&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LocalSchema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//I'm using this sub schema now because we will be creating Login with Google Twitter Linkedin Github etc, so it'll help us in the future too.&lt;/span&gt;

  &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;







&lt;span class="cm"&gt;/* ------------------------------------------
.                USER MODEL
------------------------------------------ */&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;User&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserSchema&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we will just store the email, password and username to keep everything simple.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-real-coding-begins" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 4. REAL CODING BEGINS&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Create a &lt;strong&gt;passportConfig.js&lt;/strong&gt; file inside &lt;strong&gt;config&lt;/strong&gt; folder. Also create a &lt;strong&gt;passportStrategies&lt;/strong&gt; sub-folder inside &lt;strong&gt;config&lt;/strong&gt; folder. Now create a &lt;strong&gt;SignupStrategy.js&lt;/strong&gt; and &lt;strong&gt;LoginStrategy.js&lt;/strong&gt; files inside &lt;strong&gt;passportStrategies&lt;/strong&gt; folder.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-create-login-and-signup-strategies" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;STEP 5. Create Login and Signup Strategies&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Write these on your &lt;strong&gt;SignupStrategy.js&lt;/strong&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;passport-local&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//this is to create our login signup strategies&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../models/User&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//our User model to save our user data also to retrieve our user data&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bcryptjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//we use it to hash our passwords, if you don't know how to use it, go see my prev blog. I already make one on it explaining in detail&lt;/span&gt;











&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SignupStrategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Strategy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// overriding the default username with email&lt;/span&gt;
    &lt;span class="na"&gt;usernameField&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;//passport by default uses username and password  to login and signup, just like My Anime List website. We are here changing it so that users signup with email and password system and not with username and password system&lt;/span&gt;
    &lt;span class="na"&gt;passwordField&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;passReqToCallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//this will allow use use req on the following callback function&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;




  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//retrieving username from the data that frontend sent to us. Look here we'll also retrieve other data if it sent us, like first name last name location etc. To keep it simple I'm just using username. One more thing You don't need to retrieve email of password this way because passport will already retrieving it for you&lt;/span&gt;


    &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;local.email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//checking if there is already an user with this email&lt;/span&gt;


      &lt;span class="c1"&gt;// if there is an error while checking&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//finish this process right here and send back error to our error handler&lt;/span&gt;




      &lt;span class="c1"&gt;// if there is already an account with this email, we'll finish the process right here and notify the user that this email is already taken&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`This email is already taken`&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;




      &lt;span class="c1"&gt;// if this email is not already taken, create a new account with this email&lt;/span&gt;
      &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;local.email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;local.password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hashSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;genSaltSync&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt; &lt;span class="c1"&gt;//here saving the hashed password, see my prev blog to know in detail&lt;/span&gt;


        &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

      &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Now when the account has been created, send this data onto the passport middleware on the auth route (we'll create it soon) and that middleware will send this data back to the cookie-fyer which will then cookie-fy our data and store it in a cookie&lt;/span&gt;

    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Read the comments to understand to code. I've explained line by line&lt;/p&gt;

&lt;p&gt;Now similarly we are gonna create the Login Strategy. It's even easier.&lt;/p&gt;

&lt;p&gt;Write these on &lt;strong&gt;LoginStrategy.js&lt;/strong&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;passport-local&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//to create login signup strategy&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../models/User&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//to save or retrieve user data&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bcryptjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//to hash or verify passwords, to know more see my prev blog&lt;/span&gt;





&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;LoginStrategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Strategy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// overriding default username with email&lt;/span&gt;
    &lt;span class="na"&gt;usernameField&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;//as explained passport uses username and password to login by default, we are overriding it so that it uses email and password for logging in&lt;/span&gt;
    &lt;span class="na"&gt;passwordField&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;passReqToCallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//it'll allow us use req on the following callback function&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;



  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;local.email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//finding the user with that email&lt;/span&gt;

      &lt;span class="c1"&gt;// if there is any error while finding, finish the process right here and send back the error to our error handler&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;



      &lt;span class="c1"&gt;// if there is no account with that email then let the user know that there is no account with this email&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`No user found`&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;



      &lt;span class="c1"&gt;// if password does not match, let the user know that he typed wrong passwords&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isPasswordValid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compareSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;local&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//it is comparing the plain password with the saved hashed password to see if they match, to know more about it see my previous blog, I've explained in detail&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isPasswordValid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Invalid Credentials`&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;




      &lt;span class="c1"&gt;// if everything is OK, send the user data to the password middleware on the auth route that will then send the user data onto the cookie-fyer that will then cookie-fy and store the data on a cookie&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Read the comments to understand each line of code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-passport-config" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 6. Passport Config&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Now open the &lt;strong&gt;passportConfig.js&lt;/strong&gt; file and write these&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;passport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;passport&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//our main package for creating login signup system&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../models/User&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//to save or retrieve &lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;




&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LoginStrategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./passportStrategies/LoginStrategy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SignupStrategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./passportStrategies/SignupStrategy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;






&lt;span class="cm"&gt;/* ------------------------------------
.     SERIALIZE AND DESERIALIZE
------------------------------------ */&lt;/span&gt;
&lt;span class="c1"&gt;//this is our cookie-fyer machine, it'll take the user data and cookie-fy it and store it on a cookie, here we will only cookie-fy the id of the user because we do not want to store his email and password on the cookie because if we do and if hackers find this cookie then it'll be a disaster. ha ha, I think you got my point&lt;/span&gt;
&lt;span class="nx"&gt;passport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serializeUser&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;


&lt;span class="c1"&gt;//this is the de-cookie-fyer machine. When a user with the cookie comes to our website, it asks them to show him the cookie so that it knows that the user is already logged in. Then it will de-code the cookie and get that id we stored out of the cookie and find the user who has this id, then it will retrieve it's data and store in in a user object and it will attach it on our req object. so now if he is logged in we can access his data with req.user amazing right?&lt;/span&gt;
&lt;span class="nx"&gt;passport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deserializeUser&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;





&lt;span class="cm"&gt;/* ------------------------------------
.               STRATEGIES
------------------------------------ */&lt;/span&gt;
&lt;span class="c1"&gt;//here we are using those strategies we created&lt;/span&gt;
&lt;span class="nx"&gt;passport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;local-signup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SignupStrategy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//we are also giving them name so that we can reference them by name later&lt;/span&gt;
&lt;span class="nx"&gt;passport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;local-login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;LoginStrategy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//same thing here too&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now the 1st part done. Now we just need to create the routes and then use it on our frontend. let's go!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-7-creating-routes" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 7. Creating routes&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;let's create a folder on our root level named &lt;strong&gt;routes&lt;/strong&gt; and create a file called &lt;strong&gt;authRoute.js&lt;/strong&gt; inside it.&lt;/p&gt;

&lt;p&gt;Now write these inside the &lt;strong&gt;authRoute.js&lt;/strong&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//this is the router that'll create the routes for us&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;passport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;passport&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//this is our main package for login signup system&lt;/span&gt;




&lt;span class="cm"&gt;/* --------------------------------------
.                 LOGOUT
-------------------------------------- */&lt;/span&gt;
&lt;span class="c1"&gt;//this is a route for logging out. It'll log out the users and then send back a message to let them know that they are successfully logged out&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/logout&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logOut&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Logged out`&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt; 
&lt;span class="p"&gt;});&lt;/span&gt;




&lt;span class="cm"&gt;/* --------------------------------------
.          GET LOGGED IN USER 
-------------------------------------- */&lt;/span&gt;
&lt;span class="c1"&gt;//this is a route to get logged in user data &lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//if user is logged in, user data will be stored on req.user&lt;/span&gt;
       &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//if user is not logged in, req.user will not exist&lt;/span&gt;
       &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Please log in to access this data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;




&lt;span class="cm"&gt;/* --------------------------------------
.                 SIGNUP
-------------------------------------- */&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/signup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;passport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;local-signup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//this is our passport authenticating middleware I was talking about&lt;/span&gt;
    &lt;span class="c1"&gt;// if there is any error (including the error I defined on the Strategy), send back the error with that error message to the user&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;//if there is no error in sign up, it'll create their account. so now log them in&lt;/span&gt;
    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// if there is any error while logging in, send the error message&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Oops, something went wrong`&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;



      &lt;span class="c1"&gt;// if everything is OK, return the user onto the Cookie-fyer&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;



  &lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;



























&lt;span class="cm"&gt;/* --------------------------------------
.                 LOGIN
-------------------------------------- */&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;passport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;local-login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//this is the passport middleware I was talking about&lt;/span&gt;
    &lt;span class="c1"&gt;// if there is any error (including the error I defined on the Strategy) send back the error message to the user&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


  &lt;span class="c1"&gt;//if there is no error, log them in&lt;/span&gt;
   &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//  if there is any error while logging in, send back the error message to the user&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Oops, something went wrong`&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;



    &lt;span class="c1"&gt;// if everything is OK, send the user data onto the Cookie-fyer&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;})&lt;/span&gt; 
  &lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;





&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we are almost done! Yippie. We just need a frontend to interact with our login signup system.&lt;/p&gt;

&lt;p&gt;I'm gonna use basic HTML, you can use whatever your want, be it react, angular, vue or whatever. Everything is same.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-8-create-the-frontend" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 8. Create the FrontEND&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Create a folder called &lt;strong&gt;client&lt;/strong&gt; on our root level. Then create &lt;strong&gt;index.html&lt;/strong&gt;. You can also create external js and other external css files here and reference it from the index.html. I'm gonna keep it simple and going with the default styles and not any extra styles.&lt;/p&gt;

&lt;p&gt;Let's create a login and a signup form inside index.html.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;


    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;LOGIN SIGNUP&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"signupForm"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"signupEmail"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"signupPassword"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"signupUsername"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Sign up&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"loginForm"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"loginEmail"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"loginPassword"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Log in&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;




    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;signupForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#signupForm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loginForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#loginForm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;signupEmail&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#signupEmail&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;signupPassword&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#signupPassword&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;signupUsername&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#signupUsername&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loginEmail&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#loginEmail&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loginPassword&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#loginPassword&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;



&lt;span class="c1"&gt;//signup form (if you don't know how fetch works see my prev blog, I explained in detail)&lt;/span&gt;
&lt;span class="nx"&gt;signupForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/signup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
         &lt;span class="p"&gt;},&lt;/span&gt;
         &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
              &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;signupEmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;signupPassword&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;signupUsername&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

   &lt;span class="p"&gt;});&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;


&lt;span class="c1"&gt;//login form&lt;/span&gt;
&lt;span class="nx"&gt;loginForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
         &lt;span class="p"&gt;},&lt;/span&gt;
         &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
              &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;loginEmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;loginPassword&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

   &lt;span class="p"&gt;});&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Congrats we just created a complete Login Signup System. Read the comments to understand each line of code. Now let me go over it one more time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-happening-on-the-code" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is happening on the code?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;We made a signup POST request to &lt;strong&gt;/signup&lt;/strong&gt; url from our frontend giving &lt;strong&gt;email, password&lt;/strong&gt; and &lt;strong&gt;username&lt;/strong&gt;. You can send more data too. I just kept it simple.&lt;/p&gt;

&lt;p&gt;Now our server is listening for requests on &lt;strong&gt;/signup&lt;/strong&gt; route. She found this request and told, "Hey Passport, this is about signup. You handle this for me please". So now Passport takes over it, it grabs email and password (if we did not override the default username with email it would have grabbed &lt;strong&gt;username&lt;/strong&gt; and &lt;strong&gt;password&lt;/strong&gt;) and sends it to our strategy. On the strategy, if in signup, we checked to see that the email is not already taken, if yes, it will send back an erro message saying "email already taken" or something. You can show it on your frontend. Now if it's not taken, after successfully creating the account it'll cookie-fy the user id and attach the cookie to our req object. so every time we make a new request we'll already be logged in.&lt;/p&gt;

&lt;p&gt;Now same for log in strategy. We'll check if there is the account and also check the passwords to match. if any error, it'll send back error message. If not it'll log them in and cookie-fy.&lt;/p&gt;

&lt;p&gt;When they log out, it'll destroy the cookie and you'll be logged out.&lt;/p&gt;

&lt;p&gt;Now let's test our app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-our-app" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;TESTING OUR APP&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Go signup and got to &lt;strong&gt;localhost:5000/user&lt;/strong&gt;, you'll see the user data. Now go to &lt;strong&gt;localhost:5000/logout&lt;/strong&gt; to log out. Now go again to &lt;strong&gt;localhost:5000/user&lt;/strong&gt;. You'll no longer see the user data because you already logged out. Now log in and then go to &lt;strong&gt;localhost:5000/user&lt;/strong&gt;, you'll see user data. Log out again by going to &lt;strong&gt;localhost:5000/logout&lt;/strong&gt; and you'll be logged out and you'll not see user data. Amazing right?&lt;/p&gt;

&lt;p&gt;Congrats, you just created your very first user login and signup system!!! Yippie!&lt;/p&gt;

&lt;p&gt;Now get ready for more!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-you-have-any-questions-or-if-you-are-stuck" class="anchor"&gt;
  &lt;/a&gt;
  If you &lt;strong&gt;have any questions&lt;/strong&gt; or &lt;strong&gt;If you are stuck&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Feel free to reach out to me. You can also contact me on LinkedIN &lt;a href="https://www.linkedin.com/in/silvenleaf/"&gt;&lt;/a&gt;&lt;a href="https://www.linkedin.com/in/silvenleaf/"&gt;https://www.linkedin.com/in/silvenleaf/&lt;/a&gt; or on Twitter (as &lt;a class="comment-mentioned-user" href="https://dev.to/silvenleaf"&gt;@silvenleaf&lt;/a&gt;
).&lt;/p&gt;

&lt;p&gt;If you wanna know more about me, this is my portfolio website &lt;a href="%20https://SilvenLEAF.github.io"&gt;SilvenLEAF.github.io&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#id-love-to-be-your-friend-feel-free-to-reach-out-to-me" class="anchor"&gt;
  &lt;/a&gt;
  I'd &lt;strong&gt;LOVE&lt;/strong&gt; to be your friend, feel &lt;strong&gt;FREE&lt;/strong&gt; to reach out to me!!
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#next-blog-is-coming-on-28th-nov-2020" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;NEXT BLOG&lt;/strong&gt; is coming on &lt;strong&gt;28th Nov, 2020&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;on Signup/Login with Google Github and Linkedin Series**&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#next-blogs-date" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Next Blogs DATE&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Nov 28th and Nov 5th 2020&lt;/strong&gt;, on Signup/Login with Google Github and Linkedin Series**&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Nov 28th 2020&lt;/strong&gt;, &lt;strong&gt;How to create Login with Google&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Nov 28th 2020&lt;/strong&gt;, &lt;strong&gt;How to create Login with Github&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Nov 28th 2020&lt;/strong&gt;, &lt;strong&gt;How to create Login with LinkedIn&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Nov 28th 2020&lt;/strong&gt;, &lt;strong&gt;How to create Login with Twitter&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Nov 30th 2020&lt;/strong&gt;, &lt;strong&gt;Password Reset Series (with Node.js and React)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#if-this-blog-was-helpful-to-you" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;If this blog was helpful to you&lt;/strong&gt;,
&lt;/h2&gt;

&lt;h1&gt;
  &lt;a href="#please-give-a-like-and-share" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;PLEASE&lt;/strong&gt; give a &lt;strong&gt;LIKE&lt;/strong&gt; and share,
&lt;/h1&gt;

&lt;p&gt;It'd mean a lot to me. Thanks&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prev-blog" class="anchor"&gt;
  &lt;/a&gt;
  Prev Blog
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://dev.to/silvenleaf/change-css-variables-with-1-javascript-line-by-silvenleaf-3gla"&gt;&lt;br&gt;
Change CSS variables with 1 JavaScript line&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#next-blog" class="anchor"&gt;
  &lt;/a&gt;
  Next Blog
&lt;/h3&gt;

&lt;p&gt;Coming on 28th Nov&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aL34IURt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gody1hasgatgw580zxwt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aL34IURt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gody1hasgatgw580zxwt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>react</category>
      <category>angular</category>
    </item>
    <item>
      <title>Complete guide to Fetch API</title>
      <author>Rahul</author>
      <pubDate>Thu, 26 Nov 2020 03:32:47 +0000</pubDate>
      <link>https://dev.to/rahxuls/complete-guide-to-fetch-api-3gla</link>
      <guid>https://dev.to/rahxuls/complete-guide-to-fetch-api-3gla</guid>
      <description>&lt;p&gt;This is not the same average blog post you have seen on many sites. This is something new and amazing. &lt;/p&gt;

&lt;p&gt;The fetch API is a &lt;strong&gt;promise-based&lt;/strong&gt; JavaScript API for making asynchronous HTTP requests in the browser. &lt;/p&gt;

&lt;p&gt;It is a simple and clean API that uses promises to provide a powerful and flexible feature set to fetch resources from the server. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-fetch-api-" class="anchor"&gt;
  &lt;/a&gt;
  How to use fetch API ?
&lt;/h3&gt;

&lt;p&gt;Using fetch API is really simple. Just pass the URL, the path to the resource you want to fetch, to **fetch() **method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;URL&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                 &lt;span class="c1"&gt;// handle response data&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                 &lt;span class="c1"&gt;// handle errors&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Read More =&amp;gt;  &lt;a href="https://blog.rahulism.co/filter-method-explained-js"&gt;filter() method explained&lt;br&gt;
&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#making-get-requests" class="anchor"&gt;
  &lt;/a&gt;
  Making get requests
&lt;/h3&gt;

&lt;p&gt;By default, the fetch API uset GET method for asynchronous requests. Lets see a very simple example. Here we will make a request to the "Dummy API", using &lt;strong&gt;fetch()&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://dummy.restapiexample.com/api/v1/employees&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="nx"&gt;fetchurl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error: ${err}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Dummy API is a fake API service for testing and prototyping&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#making-post-request" class="anchor"&gt;
  &lt;/a&gt;
  Making post request
&lt;/h3&gt;

&lt;p&gt;Fetch can also be used for any other HTTP method in the request: POST, PUT, DELETE, HEAD and OPTIONS. All you need to do is set the method and body parameters in the &lt;strong&gt;fetch()&lt;/strong&gt; options.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://dummy.restapiexample.com/api/v1/create&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rahul&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;16&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="na"&gt;salary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
   &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Read more =&amp;gt;  &lt;a href="https://blog.rahulism.co/map-method-explained-js"&gt;map() method explained&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#error-handling" class="anchor"&gt;
  &lt;/a&gt;
  Error handling
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;catch()&lt;/strong&gt; method can intercept any error that is thrown during the execution of the request. However, the promise returned by the fetch() doesn't reject HTTP errors like 404 or 500. For that, we can use the "ok" property of response object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://dummy.restapiexample.com/api/v1/employee/40&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//404 error&lt;/span&gt;
     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
           &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error with message: ${err}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fetch-and-asyncawait" class="anchor"&gt;
  &lt;/a&gt;
  Fetch and Async/Await
&lt;/h3&gt;

&lt;p&gt;Since fetch is a promis-based API, we can go one step further and use the ES2017 async/await syntax to make our code even simpler.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://dummy.restapiexample.com/api/v1/employees&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchUsers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="c1"&gt;// check for 404 error&lt;/span&gt;
       &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
           &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="c1"&gt;// catch block for network errors&lt;/span&gt;
       &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;fetchUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;⚡Happy Coding | Thanks For Reading😀. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>api</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Style a responsive navbar component with Tailwind CSS</title>
      <author>Michael Burrows</author>
      <pubDate>Thu, 26 Nov 2020 02:16:18 +0000</pubDate>
      <link>https://dev.to/michaelburrows/style-a-responsive-navbar-component-with-tailwind-css-640</link>
      <guid>https://dev.to/michaelburrows/style-a-responsive-navbar-component-with-tailwind-css-640</guid>
      <description>&lt;p&gt;In this tutorial we’ll be building a responsive navbar using the Tailwind CSS framework. Unlike other CSS frameworks Tailwind doesn’t include any pre-built components but rather allows you to design and build custom components using utility classes.&lt;/p&gt;

&lt;p&gt;The finished product will look like the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v52V4cIj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w1g3dkmi922q9syiylp9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v52V4cIj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w1g3dkmi922q9syiylp9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/michaelburrows/embed/wvzwLPo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;For the purposes of this tutorial we’ll install Tailwind using a CDN but in production environments it’s recommend to install Tailwind as a PostCSS plugin.&lt;/p&gt;

&lt;p&gt;Let’s get started by creating a HTML file with the following markup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Responsive Navbar - Tailwind CSS&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;      
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- navbar here --&amp;gt;&lt;/span&gt;      
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"script.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;First is the navbar wrapper element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex flex-wrap items-center justify-between p-5 bg-blue-200"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;      
&lt;span class="c"&gt;&amp;lt;!-- logo --&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- hamburger --&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- links --&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- cta --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;flex flex-wrap&lt;/code&gt; – display using flexbox and wrap items larger than the parent.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;items-center&lt;/code&gt; – align items along the center of the x-axis.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;justify-between&lt;/code&gt; – evenly distribute’s navbar elements across the horizontal axis.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;p-5&lt;/code&gt; – add’s even padding to all sides of the navbar, size of the padding can be adjusted by changing the number from anywhere between 0 and 10.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bg-blue-200&lt;/code&gt; – set’s the background color blue, tone of color can be adjusted by changing the number from 50 then at multiples of 100 up to 900.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first element in the navbar is a logo which doesn’t require any CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"http://acmelogos.com/images/logo-1.svg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"ACME"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"120"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next comes the hamburger button for toggling the menu visibility on small screen’s:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex md:hidden"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"hamburger"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toggle block"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://img.icons8.com/fluent-systems-regular/2x/menu-squared-2.png"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"40"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"40"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toggle hidden"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://img.icons8.com/fluent-systems-regular/2x/close-window.png"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"40"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"40"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Tailwind CSS follow’s the mobile-first approach, so we build from small to larger screen’s. In this instance the hamburger is visible on small screens (&lt;code&gt;flex&lt;/code&gt;) then hidden on medium (&lt;code&gt;md:hidden&lt;/code&gt;) and above sized screens.&lt;/p&gt;

&lt;p&gt;We’ve also used a &lt;code&gt;toggle&lt;/code&gt; class here that isn’t actually part of Tailwind. This class will be applied to everything that we wan’t to toggle the visibility of when the hamburger button is clicked.&lt;/p&gt;

&lt;p&gt;Text links have a wrapper &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; once again using toggle:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toggle hidden md:flex w-full md:w-auto text-right text-bold mt-5 md:mt-0 border-t-2 border-blue-900 md:border-none"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;        
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"block md:inline-block text-blue-900 hover:text-blue-500 px-3 py-3 border-b-2 border-blue-900 md:border-none"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"block md:inline-block text-blue-900 hover:text-blue-500 px-3 py-3 border-b-2 border-blue-900 md:border-none"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Products&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"block md:inline-block text-blue-900 hover:text-blue-500 px-3 py-3 border-b-2 border-blue-900 md:border-none"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Pricing&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"block md:inline-block text-blue-900 hover:text-blue-500 px-3 py-3 border-b-2 border-blue-900 md:border-none"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Contact&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Firstly let’s go over the classes used on the wrapper &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;hidden md:flex&lt;/code&gt; – links are hidden on smaller screens until the visibility is toggled via the hamburger button.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;w-full md:w-auto&lt;/code&gt; – display the menu as full width on small screens only.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;text-right text-bold&lt;/code&gt; – right align the text with a bold font weight.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mt-5 md:mt-0&lt;/code&gt; – applies a margin to the top of the menu.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;border-t-2 border-blue-900 md:border-none&lt;/code&gt; – single blue 2px dividing border on the top of the menu on smaller screens that’s removed on larger screens.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the individual text links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;block md:inline-block&lt;/code&gt; – display as block (full width) on small screen’s and inline on larger screen’s.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;text-blue-900 hover:text-blue-500&lt;/code&gt; – hover styles in Tailwind are applied by pre-pending the desired style with hover.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;px-3 py-3&lt;/code&gt; – even padding on both the x-axis (horizontal) and y-axis (vertical).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;border-b-2 border-blue-900 md:border-none&lt;/code&gt; – blue 2px border on the bottom of each of the links on small screen’s only.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally we’ll include a CTA button to the far right of the navbar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toggle hidden md:flex w-full md:w-auto px-4 py-2 text-right bg-blue-900 hover:bg-blue-500 text-white md:rounded"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Create Account&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The only class we haven’t used previously is &lt;code&gt;md:rounded&lt;/code&gt; which applies a border radius giving the button corner’s a slightly rounded appearance.&lt;/p&gt;

&lt;p&gt;That completes the CSS now we just need to add the JavaScript to toggle the menu visibility on small screen’s. Create a &lt;code&gt;script.js&lt;/code&gt; file with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hamburger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;toggleMenu&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;navToggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toggle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;navToggle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;navToggle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This code toggles the &lt;code&gt;hidden&lt;/code&gt; class on each &lt;code&gt;toggle&lt;/code&gt; element when the hamburger is clicked.&lt;/p&gt;

&lt;p&gt;You should now be able to style your own responsive navbar using Tailwind CSS. If you would like to learn more about Tailwind and all the available classes the &lt;a href="https://tailwindcss.com/docs"&gt;official documentation&lt;/a&gt; is very user friendly.&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>tailwind</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Using the Microsoft Face API, Spotify, and Azure Functions to get *emotional*</title>
      <author>Chloe Condon 🎀</author>
      <pubDate>Thu, 26 Nov 2020 01:22:37 +0000</pubDate>
      <link>https://dev.to/azure/using-the-microsoft-face-api-spotify-and-azure-functions-to-get-emotional-14o2</link>
      <guid>https://dev.to/azure/using-the-microsoft-face-api-spotify-and-azure-functions-to-get-emotional-14o2</guid>
      <description>&lt;p&gt;Hey pals! This blog post was written by &lt;a href="https://www.linkedin.com/in/natalie-huang-09bba6178/"&gt;Natalie Huang&lt;/a&gt;, a student in the 1st cohort of &lt;a href="https://www.bitproject.org/"&gt;Bit Project&lt;/a&gt;'s BitCamp. Below is the blog post tutorial she created showcasing the &lt;em&gt;amazing&lt;/em&gt; new Azure Functions skills she used during the program. Natalie now works as an instructor for incoming &lt;a href="https://www.bitproject.org/"&gt;Bit Project&lt;/a&gt; cohorts (while attending college- you can &lt;a href="https://youtu.be/2T1V_jTxVCg"&gt;check out one of our lectures together here&lt;/a&gt; 🤩), and I could not be more proud of the work they has done this year! Enjoy Natalie's tutorial below!&lt;/p&gt;

&lt;p&gt;You can get started with some free Microsoft Learn tutorials and follow along with Natalie at &lt;a href="http://aka.ms/bitcampfunctionsnatalie"&gt;http://aka.ms/bitcampfunctionsnatalie&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;💕 -Chloe&lt;/p&gt;

&lt;p&gt;Ever looked at your face and wondered how you were feeling? No? Neither have I, but lucky for the both of us, the Microsoft &lt;a href="https://docs.microsoft.com/en-us/learn/modules/identify-faces-with-computer-vision/?WT.mc_id=academic-11214-chcondon"&gt;Face API&lt;/a&gt; can do exactly this. In this series, I’ll be outlining the process of building an app that recommends songs based on a picture(tagline: Upload a selfie. We choose the songs). The user will login to Spotify, upload a picture of themselves, and receive a customized playlist that (hopefully) matches their current mood. Here's a basic flowchart of our final project:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r5YmgQAa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cbpvqaltlkjxz8o4ocgh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r5YmgQAa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cbpvqaltlkjxz8o4ocgh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Part 1, we’ll be focusing on the centerpiece: deciphering the user’s face.&lt;/p&gt;

&lt;p&gt;We'll be using &lt;a href="https://docs.microsoft.com/en-us/learn/modules/create-serverless-logic-with-azure-functions/?WT.mc_id=academic-11214-chcondon"&gt;Azure Functions&lt;/a&gt; in this project. If you're unfamiliar, Azure Functions allows you to write and deploy serverless code without having to manage infrastructure. It incorporates a variety of triggers that allows your function to run on-demand in response to a variety of events. Here are a couple common triggers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTP Trigger (today's star &amp;lt;3)&lt;/li&gt;
&lt;li&gt;Timers Trigger(runs on a timed bases: daily, weekly, etc)&lt;/li&gt;
&lt;li&gt;Blob Trigger(when a file is added to Azure Blob storage)&lt;/li&gt;
&lt;li&gt;Cosmos DB Trigger(when data is added to Azure Cosmos DB)&lt;/li&gt;
&lt;li&gt;Storage queue Trigger(when a message is submitted to the storage queue)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To familiarze yourself with the different types, I'd recommend trying out &lt;a href="https://docs.microsoft.com/en-us/learn/modules/execute-azure-function-with-triggers/?WT.mc_id=academic-11214-chcondon"&gt;this Microsoft module&lt;/a&gt;, which runs you through some basic examples.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-face-api-subscription" class="anchor"&gt;
  &lt;/a&gt;
  Creating a Face API Subscription
&lt;/h3&gt;

&lt;p&gt;We'll be using the Microsoft API to extract data on a person's emotions from a picture. The &lt;a href="https://docs.microsoft.com/en-us/learn/modules/identify-faces-with-computer-vision/?WT.mc_id=academic-11214-chcondon"&gt;Face API&lt;/a&gt; is a cognitive service that provides algorithms for identifying/detecting faces and analyzing attributes of faces in images. For more information, check out the API documentation and tutorials &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/face/?WT.mc_id=academic-11214-chcondon"&gt;here&lt;/a&gt;. First step is to get an actual Face API endpoint. This can be done easily in the &lt;a href="https://portal.azure.com/?WT.mc_id=academic-11214-chcondon"&gt;Azure Portal&lt;/a&gt;: Go to &lt;strong&gt;Create a Resource&lt;/strong&gt;, press the &lt;strong&gt;AI + Machine Learning&lt;/strong&gt; tab on the left, and select &lt;strong&gt;Face&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zIm0F-bE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oq4kieer4sdmico7t3xw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zIm0F-bE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oq4kieer4sdmico7t3xw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deploy your resource, and save your endpoint!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-an-azure-function" class="anchor"&gt;
  &lt;/a&gt;
  Creating an Azure Function
&lt;/h3&gt;

&lt;p&gt;It's time to create our &lt;a href="https://docs.microsoft.com/en-us/learn/modules/create-serverless-logic-with-azure-functions/?WT.mc_id=academic-11214-chcondon"&gt;Azure Function&lt;/a&gt;- I'm just using the &lt;a href="https://portal.azure.com/?WT.mc_id=academic-11214-chcondon"&gt;Azure Portal&lt;/a&gt;, but those who prefer Visual Studio Code can refer &lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-first-function-vs-code?pivots=programming-language-javascript/?WT.mc_id=academic-11214-chcondon"&gt;here.&lt;/a&gt; In the portal, select &lt;strong&gt;Create a Resource **and then press **Function App&lt;/strong&gt;. Select a Resource Group(mine uses the same one as the Face API resource) and give the app a unique name. For runtime stack, select Node.js and Version 12. For region, choose one near you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YvVhm145--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zc89fl0laclig8jqh84n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YvVhm145--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zc89fl0laclig8jqh84n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to &lt;strong&gt;Hosting&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Select or create a new storage account to be linked to this function app. Select your operating system and the consumption plan. &lt;/p&gt;

&lt;p&gt;Go to &lt;strong&gt;Monitoring&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Enable Application Insights. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Review + create&lt;/strong&gt; your app! Once it's deployed, return to the Portal homepage and click into your newly deployed Function App. In the app service, click the &lt;strong&gt;Functions&lt;/strong&gt; in the left tab(has the little fx symbol).&lt;/p&gt;

&lt;p&gt;Now that our Function App exists, we can create an actual function. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IwiLTHKs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iap3rlolotn2xkw687y2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IwiLTHKs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iap3rlolotn2xkw687y2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your functions page should look something like this, but empty. To create a function, click the &lt;strong&gt;+Add&lt;/strong&gt; button and select HTTP trigger. Set your authorization level to function if you want to force the caller to provide a key, and anonymous if not. (Mine is currently anonymous).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d-_Jgz5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/06lb0y7ateaa0g1qyg6y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d-_Jgz5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/06lb0y7ateaa0g1qyg6y.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wait for the function to deploy, then click into the &lt;strong&gt;Code + Test&lt;/strong&gt; tab and go to your index.js file.&lt;/p&gt;

&lt;p&gt;Replace the code with this: &lt;/p&gt;

&lt;p&gt;This code is triggered by an HTTP request and parses HTML multipart data(our image!) with the help of the extremely helpful &lt;a href="https://www.npmjs.com/package/parse-multipart"&gt;parse-multipart&lt;/a&gt; library. We're then calling the Face API in the function &lt;strong&gt;analyzeImage&lt;/strong&gt; using the subscription key and endpoint from earlier, passing in our parsed image. This uses the &lt;a href="https://www.npmjs.com/package/request-promise"&gt;request-promise&lt;/a&gt; library, which is basically request but with Promise support, which we require in our async &lt;strong&gt;analyzeImage&lt;/strong&gt; function. Using &lt;code&gt;JSON.parse()&lt;/code&gt;, we return the body in a JSON format.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;multipart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;parse-multipart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;request-promise&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;util&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;util&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JavaScript HTTP trigger function processed a request.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="c1"&gt;// encode body to base64 string&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bodyBuffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;boundary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;multipart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;content-type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="c1"&gt;// parse the body with parse-multipart&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;multipart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bodyBuffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;boundary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;//calls a function that calls the Face API&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;analyzeImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;//stick the data returned into our http response!&lt;/span&gt;
    &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;result&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;analyzeImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;byteArray&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subscriptionKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YOUR KEY&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uriBase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YOUR ENDPOINT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/face/v1.0/detect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;//Face API params&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;returnFaceId&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;returnFaceAttributes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;emotion&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;uriBase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;qs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;byteArray&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/octet-stream&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ocp-Apim-Subscription-Key&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;subscriptionKey&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;jsonResponse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;jsonResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;jsonResponse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here's an example of the JSON response returned for this image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"result"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"faceId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"89afb8d2-500f-4f02-8863-8278fe5f47a2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"faceRectangle"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"top"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;268&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"left"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;338&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"width"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;270&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"height"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;270&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"faceAttributes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"emotion"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"anger"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"contempt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"disgust"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"fear"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"happiness"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"neutral"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"sadness"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"surprise"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Apparently I'm 100% happy. yay.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-test-html-webpage" class="anchor"&gt;
  &lt;/a&gt;
  Creating a Test HTML Webpage
&lt;/h3&gt;

&lt;p&gt;Yay! We pretty much have everything we need to detect emotion in a face! We're going to test this out with a simple HTML webpage, though the actual frontend of our project will be a React App that we make later. &lt;/p&gt;

&lt;p&gt;Here's the sample HTML webage with a HTML form(ft absolutely nonexistent styling)...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"author"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Azure App Service - Sample Static HTML Site&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Test your Function!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;hr/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Wrap the rest of the page in another container to center all the content. --&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;loadFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;output&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObjectURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"myform"&lt;/span&gt; &lt;span class="na"&gt;onsubmit=&lt;/span&gt;&lt;span class="s"&gt;"event.preventDefault(); handle(event);"&lt;/span&gt; &lt;span class="na"&gt;enctype=&lt;/span&gt;&lt;span class="s"&gt;"multipart/form-data"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; Upload a Face Image File:&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
          &lt;span class="c"&gt;&amp;lt;!--&amp;lt;input type="file" name="file" id="file" class="form-control-file" /&amp;gt; --&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt;  &lt;span class="na"&gt;accept=&lt;/span&gt;&lt;span class="s"&gt;"image/*"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"image"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="na"&gt;onchange=&lt;/span&gt;&lt;span class="s"&gt;"loadFile(event)"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"output"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-secondary btn-sm"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt; 
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-secondary btn-sm"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"clear"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"event.preventDefault();clearForm()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Clear&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;hr/&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"emotion"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Bootstrap core JavaScript
    ================================================== --&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Placed at the end of the document so the pages load faster --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;jQuery&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;script src="../../assets/js/vendor/jquery.min.js"&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s1"&gt;/script&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- &amp;lt;script src="js/bootstrap.min.js"&amp;gt;&amp;lt;/script&amp;gt; --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"app.js"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;



&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;...and the corresponding js file(called app.js).&lt;br&gt;
Inside the app.js file, the &lt;code&gt;handle(event)&lt;/code&gt;function is called upon form submission, and makes an http post call to your Azure Function with the submitted image in the body. Make sure you replace the url with your own Function url, and the key with your Function key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stopPropagation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;---- handle ---&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myform&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;---- myform ---&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;myform&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myform&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;---- handle completed---&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YOUR FUNCTION URL HERE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;crossDomain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;contentType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;processData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

        &lt;span class="c1"&gt;//INCLUDE THIS HEADER IS YOUR FUNCTION IS NOT AUTH-LEVEL: ANONYMOUS, AND STICK YOUR FUNCTION KEY INSIDE&lt;/span&gt;
        &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x-functions-key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YOUR FUNCTION KEY&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;

        &lt;span class="na"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;emotion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;faceAttributes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emotion&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;resultString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`

            &amp;lt;h3&amp;gt;Emotions in the image:&amp;lt;/h3&amp;gt;&amp;lt;br /&amp;gt;
            &amp;lt;p&amp;gt;anger: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;emotion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;anger&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;contempt: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;emotion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contempt&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;disgust: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;emotion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disgust&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;fear: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;emotion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fear&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;happiness: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;emotion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;happiness&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;neutral: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;emotion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;neutral&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;sadness: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;emotion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sadness&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;surprise: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;emotion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;surprise&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/p&amp;gt;
            `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#emotion&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resultString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;

        &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;---ERROR: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;clearForm&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myform&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;emotion&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can deploy this html page however you like- I'm just doing it with the &lt;strong&gt;live server extension&lt;/strong&gt; in &lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-first-function-vs-code?pivots=programming-language-javascript/?WT.mc_id=academic-11214-chcondon"&gt;Visual Studio Code&lt;/a&gt; like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2ODQjTTi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6qk60c4h6m1wgrhxh2me.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ODQjTTi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6qk60c4h6m1wgrhxh2me.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The final step for this test to work is to allow this HTML page to interact with your function through CORS. CORS, aka Cross-origin resource sharing, allows whatever domains our web application will be hosted on to access resources from another domain (in this case, we need access to our Azure Function). Go to your App Service resource(not the individual function) and click the CORS tab on the left side. Add your http: url to the allowed origins (this works with local hosts and live servers).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KRsm-Cwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2my8urue4kuuxs0u393q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KRsm-Cwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2my8urue4kuuxs0u393q.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run your HTML page, upload a file, and have fun seeing the results!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kc34raod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i3erssscbzjz28q5wo73.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc34raod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i3erssscbzjz28q5wo73.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out the range in her face!! &lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Introducing Lume.io</title>
      <author>☮️✝️☪️🕉☸️✡️☯️ </author>
      <pubDate>Thu, 26 Nov 2020 00:41:23 +0000</pubDate>
      <link>https://dev.to/zoedreams/introducing-lume-io-52h6</link>
      <guid>https://dev.to/zoedreams/introducing-lume-io-52h6</guid>
      <description>&lt;p&gt;&lt;a href="https://lume.io/"&gt;Lume.io&lt;/a&gt; is a new GTK (graphic toolkit) that empowers web developers to create semantic 3d graphics using simple html, javascript, and assembly script. Based on the THREE.js 3d library, Lume gives you general-purpose HTML Elements for defining 2D or 3D scenes rendered with CSS3D, WebGL, or both mixed together.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Fr_Lrwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xcd1r0fkucz3r1ryyc39.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Fr_Lrwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xcd1r0fkucz3r1ryyc39.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lume’s “mixed mode” let’s us combine traditional HTML elements styled with CSS with new elements that render with WebGL, which means we can render both traditional HTML content and 3D models together in the same 3D space, with lighting and shadow effects on both.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WncivVA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d19zn17a4ea20shfclik.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WncivVA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d19zn17a4ea20shfclik.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lume is built on the Web Component standards, making it possible to write 3D scenes declaratively using custom HTML elements, regardless of which view layer you prefer. This makes it possible for you write 3D scenes using popular HTML frameworks like (but not limited to) React, Vue.js, Meteor, Angular, Ember.js, or even the great jQuery.&lt;/p&gt;

&lt;p&gt;One huge feature of Lume Elements is the ability to develop reactive fluid layouts that are interactive using standard javascript events. Without additional code or prior 3d programming knowledge. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EW-TztlO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0eybyfawtvehppc5fhh7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EW-TztlO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0eybyfawtvehppc5fhh7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our project is of course open source, and we invite anyone whom is interested in helping to create a more immersive web experience to check out our &lt;a href="https://github.com/lume/lume"&gt;project source&lt;/a&gt;. We are always looking for help. Porting THREE.js into assembly script is not an easy task. We feel this endeavor is a worth while one, not only for huge performance increases, but the ability to use strong typed language that is based off from TypeScript.&lt;/p&gt;

&lt;p&gt;Huge shoutout to the team putting AssemblyScript together. Absolutely some of the most amazing work happening in the open source community. And if your new to AS make sure to stop over at their website &lt;a href="https://www.assemblyscript.org/"&gt;AssemblyScript.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading, and be sure follow me if you would like continued updates on our on going effort to update the internets ability to share and create 3d web graphics. Have a good one, and happy coding.&lt;/p&gt;

&lt;p&gt;~k&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Marko: Designing a UI Language</title>
      <author>Ryan Carniato</author>
      <pubDate>Wed, 25 Nov 2020 22:10:50 +0000</pubDate>
      <link>https://dev.to/ryansolid/marko-designing-a-ui-language-2hni</link>
      <guid>https://dev.to/ryansolid/marko-designing-a-ui-language-2hni</guid>
      <description>&lt;p&gt;FLUURT is the codename for the new compiler/runtime being built for the Marko UI Framework. &lt;a href="https://dev.to/ryansolid/fluurt-re-inventing-marko-3o1o"&gt;The introductory article&lt;/a&gt; already gives a high level of what key features it delivers and why this could be of interest to you.&lt;/p&gt;

&lt;p&gt;In this article, we will explore in detail the decision process in the designing of the new tag primitive syntax, which powers FLUURT's highly flexible reactive compositions. Some of the syntax might seem unusual at first but as you will see is important. It has as much of a profound effect on the developer experience as the library's ability to optimize.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is still in the early development stage and may not be the final version. We're still open to suggestions and feedback.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#foundations" class="anchor"&gt;
  &lt;/a&gt;
  Foundations
&lt;/h2&gt;

&lt;p&gt;Marko has always seen itself as a superset of HTML. It was developed as a templating language originally and had more advanced features built on as it grew. This has meant a lot of really powerful ideas expressible right in the markup, but it also has meant inconsistencies and special rules.&lt;/p&gt;

&lt;p&gt;We realized pretty early on if we wanted end users to leverage the full power of the language for themselves we'd need to iron these things out. So the exploration started from foundational HTML semantics.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tags" class="anchor"&gt;
  &lt;/a&gt;
  Tags
&lt;/h3&gt;

&lt;p&gt;Most things in Marko are tags. We support native built-in tags like &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;. We also have some Marko specific tags like &lt;code&gt;&amp;lt;for&amp;gt;&lt;/code&gt; for iteration, &lt;code&gt;&amp;lt;if&amp;gt;&lt;/code&gt; for conditional rendering, or &lt;code&gt;&amp;lt;await&amp;gt;&lt;/code&gt; for async rendering. In addition, we support custom tags, like &lt;code&gt;&amp;lt;my-tag&amp;gt;&lt;/code&gt;, which load in custom components. These components are user-defined templates much like your top-level application template, but can be reused throughout your application and are managed through Marko's runtime. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#attributes" class="anchor"&gt;
  &lt;/a&gt;
  Attributes
&lt;/h3&gt;

&lt;p&gt;Attributes are modifiers on tags, that serve as a way to provide input configuration. In the same way, Marko extends HTML's concept of tags, it extends attributes. In addition to strings, Marko supports JavaScript expressions assigned to attributes. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#" class="anchor"&gt;
  &lt;/a&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C6saW6Fj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lee566pr68lvrok418w6.png" alt="Alt Text"&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#constructing-a-language" class="anchor"&gt;
  &lt;/a&gt;
  Constructing a language
&lt;/h2&gt;

&lt;p&gt;Now, this alone is a powerful way to template apps. We have the ability to reuse our code as components and pass dynamic data around. However, HTML is missing the capability of a few other things we need to build out our core language.&lt;/p&gt;

&lt;p&gt;What we really need to be able to do is bring function call semantics to HTML tags. This is a direction Marko has been going for a long time but we are only now really achieving it. We have attributes to serve as input, but we need to streamline the rest of the experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tag-variables-return-values" class="anchor"&gt;
  &lt;/a&gt;
  Tag Variables (return values)
&lt;/h3&gt;

&lt;p&gt;Tags in our templates create DOM nodes, but we are limited thus far to passing things in. How do we get values out of our tags?&lt;/p&gt;

&lt;p&gt;We can bind events. We can pass something down that the child can call or augment with their value. However between references to DOM nodes, or really any sort of data you'd want to pass we feel it is important to have this built in. Here's some potential example usage:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gw4vAlFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v5tmyufj86pxzmhruxcr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gw4vAlFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v5tmyufj86pxzmhruxcr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Why slash? Marko uses a lot of symbols already as part of its shorthand syntax. We knew we wanted a single end terminating symbol. Colon &lt;code&gt;:&lt;/code&gt; actually seemed like the obvious choice until you consider our upcoming TypeScript support.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fGDOEDdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nsbnadkzmde1se1tct9i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fGDOEDdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nsbnadkzmde1se1tct9i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we could have overloaded attributes to handle this like most libraries. However, we prefer the clear grammar here, as it is concise, and as you will see this will be used for a number of tags.&lt;/p&gt;

&lt;p&gt;The final piece is understanding how scope works. We've decided to use tag scope on variables. As in they are visible for siblings and all descendants. In cases where variables need to be hoisted to a higher level, you will need a separate declaration tag (more on that later).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tag-parameters-callbackrender-props" class="anchor"&gt;
  &lt;/a&gt;
  Tag Parameters (callback/render props)
&lt;/h3&gt;

&lt;p&gt;While it is possible to pass a function to a tag we need a way to handle rendering children. Marko and most template DSLs make a clear distinction between data and rendering. Instead of introducing a special control flow, Marko has introduced a mechanism for a component to call its child templates with data.&lt;/p&gt;

&lt;p&gt;You see it commonly in control flow components.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7jmI0I5n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7m1xep62u9i48blvzor5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7jmI0I5n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7m1xep62u9i48blvzor5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, &lt;code&gt;item&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; are provided by the parent component and only available to descendants. In this way, they differ from Tag Variables which are exposed to their siblings. This is important as the children can be rendered multiple times with different values.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#default-attribute" class="anchor"&gt;
  &lt;/a&gt;
  Default Attribute
&lt;/h3&gt;

&lt;p&gt;The last piece we realized might seem more like a bit of a syntax sugar than anything. But for conciseness sometimes it's better to just pass a single unnamed argument. Sometimes you don't need a bunch of named attributes. We have proposed using an assignment to a tag does exactly that:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VkEu-SfD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/adreyksgro4o5sd2fzd6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VkEu-SfD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/adreyksgro4o5sd2fzd6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, this small convenience opens up a world of possibilities.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are familiar with Marko you may have heard of Tag Arguments, which were represented by &lt;code&gt;( )&lt;/code&gt;. The problem was they created a weird riff with typical attributes and introduced a new syntax only usable in Marko's built-in flow tags. The default attribute is something any tag can leverage.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#building-our-primitives" class="anchor"&gt;
  &lt;/a&gt;
  Building our Primitives
&lt;/h2&gt;

&lt;p&gt;With these additions to our language we now have the basis to describe a number of concepts not possible with only simple HTML. The core of which is the ability to create primitives for our state management.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-ltletgt-endraw-tag" class="anchor"&gt;
  &lt;/a&gt;
  The &lt;code&gt;&amp;lt;let&amp;gt;&lt;/code&gt; tag
&lt;/h3&gt;

&lt;p&gt;We decided to model the core state atom in our library in a way that would be familiar to JavaScript developers. &lt;code&gt;let&lt;/code&gt; is a way of defining a changeable value in JavaScript and represents our core reactive atom.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--16rYQPSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yov2rmx7vb9cu9y071jw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--16rYQPSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yov2rmx7vb9cu9y071jw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The astute will notice that these are actually Tag Variables using the Default Attribute. You are passing the initial value to the &lt;code&gt;&amp;lt;let&amp;gt;&lt;/code&gt; tag and returning the named variable.&lt;/p&gt;

&lt;p&gt;These variables then can be used as expected in event handlers or as parts of definitions in other primitives.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-ltconstgt-endraw-tag" class="anchor"&gt;
  &lt;/a&gt;
  The &lt;code&gt;&amp;lt;const&amp;gt;&lt;/code&gt; tag
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;const&amp;gt;&lt;/code&gt; tag similarly, like in JavaScript, represents things that cannot be re-bound. In our case, that is static values and dynamic expressions. These serve as the fixed truths in our templating environment. We can statically analyze the difference between these cases based on usage to ensure the end-user doesn't have to worry about what updates.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4HYGCPzr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7w6925m5241gi1snzi1m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4HYGCPzr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7w6925m5241gi1snzi1m.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It might take a bit to get used to the fact &lt;code&gt;doubleCount&lt;/code&gt; in this example updates. However, it is consistent in that its relationship to &lt;code&gt;count&lt;/code&gt; never changes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-lteffectgt-endraw-tag" class="anchor"&gt;
  &lt;/a&gt;
  The &lt;code&gt;&amp;lt;effect&amp;gt;&lt;/code&gt; tag
&lt;/h3&gt;

&lt;p&gt;The last core tag primitive is the effect tag. This is the mechanism the library has for producing side effects. Again we make use of the default argument.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XUdhKFNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oqkmkjeu0klw673ujs5n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XUdhKFNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oqkmkjeu0klw673ujs5n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Marko's effect automatically tracks reactive dependencies to update only when the affected state is updated. For that reason we also are proposing a &lt;code&gt;&amp;lt;mount&amp;gt;&lt;/code&gt; tag that does not track dependencies and only runs when the portion of the template is mounted, and cleaned up when it is removed.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#putting-it-together" class="anchor"&gt;
  &lt;/a&gt;
  Putting it Together
&lt;/h2&gt;

&lt;p&gt;The big win of all this is how extensible the approach is. When you write your own behaviors it's the exact same API for your consumers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v4pign5_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9heqvpul312u8km76lvl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v4pign5_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9heqvpul312u8km76lvl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically, your imagination is the limit.&lt;/p&gt;

&lt;p&gt;Marko has other syntaxes that I haven't gone over. Most importantly its mechanism for dynamic components and rendering child templates. These are important for authoring your own custom tags, but beyond the scope of what I'm covering here.&lt;/p&gt;

&lt;p&gt;Instead, I want to focus on from a consumer standpoint what this means for development. What we end up with is the WYSIWYG of web authoring. In Marko, component imports are automatically detected. By co-locating our state at a template level, the composition is a hierarchical consideration.&lt;/p&gt;

&lt;p&gt;So how about a comparison. I will use FLUURT's new syntax and compare it to Svelte, React Hooks, and React Classes. Consider a component that wraps a 3rd party chart that loads from a CDN on the page (1):&lt;br&gt;
&lt;a href="https://i.postimg.cc/D08xSKdc/Step1.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i8fAb5iR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/91jbfa7z677pzk08o9ac.png" alt="Step 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now we are asked to add a new input to show and hide this chart. We can simply wrap it in an &lt;code&gt;&amp;lt;if&amp;gt;&lt;/code&gt; tag, and lifecycles including disposal are automatically handled properly (2):&lt;br&gt;
&lt;a href="https://i.postimg.cc/GtVqYSXn/Step2-annotated.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--926Yfd4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cu9n5jfaps5njqpgzdsn.png" alt="Step 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we later wanted to break it apart into separate components we could just cut and paste our code into a new file, pass our input to our tag, and it would immediately work (3):&lt;br&gt;
&lt;a href="https://i.postimg.cc/05BtLbPX/Step3-annotated.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VSqdRa1R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e3oe1jrfkk6dfpgx7lc1.png" alt="Step 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a trivial example, but that is all the code. I didn't need to even change anything when I moved it. Most importantly it scales the same way as your components get more complicated as this pattern of co-location extends throughout.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you can see a lot goes into designing a language. It might start with identifying the right syntax but extends to understanding the implication of grammar and semantics. Our aim is to provide consistency in our extensibility. Not to have to say use &lt;code&gt;$&lt;/code&gt; in one place and function call somewhere else.&lt;/p&gt;

&lt;p&gt;We believe this is essential to the powerful productive environment we wish to build. Writing less code isn't just about counting the lines of code in your git commit, but actually writing less code. Not only do these patterns lead to less initial code, but less refactoring overhead.&lt;/p&gt;

&lt;p&gt;I encourage you to try the 3 step example from the previous section in the library of choice. You will need to apply the conditional in step 2 in multiple places. You will need to restructure your code to move it to a different file. Not to mention additional block wrappers and import statements.&lt;/p&gt;

&lt;p&gt;These are the type of things you consider when designing a language. It goes beyond technical implementation or character count. It boils down to how effectively we can organize our thoughts and communicate our intent. And more so, with programming, recognize that it represents a living document, a continuing conversation, carried on by one or by many.&lt;/p&gt;




&lt;p&gt;Check out &lt;a href="https://github.com/marko-js/marko"&gt;Marko on Github&lt;/a&gt;, &lt;a href="https://twitter.com/MarkoDevTeam"&gt;Follow us on Twitter&lt;/a&gt;, or &lt;a href="https://discord.com/invite/RFGxYGs"&gt;Join us on Discord&lt;/a&gt; to keep apprised of the latest updates.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>marko</category>
      <category>compilers</category>
    </item>
  </channel>
</rss>
