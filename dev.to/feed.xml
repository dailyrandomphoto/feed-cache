<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Monitor your Nodejs application with OpenTelemetry and SigNoz</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Fri, 27 Aug 2021 13:12:58 +0000</pubDate>
      <link>https://dev.to/signoz/monitor-your-nodejs-application-with-opentelemetry-and-signoz-21k5</link>
      <guid>https://dev.to/signoz/monitor-your-nodejs-application-with-opentelemetry-and-signoz-21k5</guid>
      <description>&lt;p&gt;OpenTelemetry can auto-instrument many common modules for a Javascript application. The telemetry data captured can then be sent to SigNoz for analysis and visualization.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZldkcrEV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by1t5n6kds8c3fdp1iwa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZldkcrEV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by1t5n6kds8c3fdp1iwa.png" alt="Monitor your Nodejs applications with SigNoz"&gt;&lt;/a&gt;SigNoz UI&lt;/p&gt;

&lt;p&gt;OpenTelemetry is a set of tools, APIs, and SDKs used to instrument applications to create and manage telemetry data(Logs, metrics, and traces). For any distributed system based on microservice architecture, it's an operational challenge to solve performance issues quickly.&lt;/p&gt;

&lt;p&gt;Telemetry data helps engineering teams to troubleshoot issues across services and identify the root causes. In other words, telemetry data powers observability for your distributed applications.&lt;/p&gt;

&lt;p&gt;Steps to get started with OpenTelemetry for a Nodejs application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installing SigNoz&lt;/li&gt;
&lt;li&gt;Installing sample Nodejs app&lt;/li&gt;
&lt;li&gt;Set up OpenTelemetry and send data to SigNoz&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#installing-signoz"&gt;
  &lt;/a&gt;
  Installing SigNoz
&lt;/h2&gt;

&lt;p&gt;You can get started with SigNoz using just three commands at your terminal if you have Docker installed. You can read about other deployment options from &lt;a href="https://signoz.io/docs/deployment/docker/"&gt;SigNoz documentation&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/SigNoz/signoz.git
cd signoz/deploy/
./install.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will have an option to choose between ClickHouse or Kafka + Druid as a storage option. Trying out SigNoz with ClickHouse database takes less than 1.5GB of memory, and for this tutorial, we will use that option.&lt;/p&gt;

&lt;p&gt;When you are done installing SigNoz, you can access the UI at: &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The application list shown in the dashboard is from a sample app called HOT R.O.D that comes bundled with the SigNoz installation package.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VKJPr5Ws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yhqjwalv45oogwg7z9i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VKJPr5Ws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yhqjwalv45oogwg7z9i.png" alt="SigNoz dashboard"&gt;&lt;/a&gt;SigNoz dashboard&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-sample-nodejs-application"&gt;
  &lt;/a&gt;
  Install sample Nodejs application
&lt;/h2&gt;

&lt;p&gt;You need to ensure that you have &lt;strong&gt;Node.js version 12 or newer&lt;/strong&gt;. You can download the latest version of Node.js &lt;a href="https://nodejs.org/en/download/"&gt;here&lt;/a&gt;. For the sample application, let's create a basic 'hello world' express.js application.&lt;/p&gt;

&lt;p&gt;Steps to get the app set up and running:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make a directory and install express
Make a directory for your sample app on your machine. Then open up the terminal, navigate to the directory path and install express with the following command:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   npm i express
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Setup server.js
Create a file called 'server.js' in your directory and with any text editor setup your 'Hello World' file with the code below:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   const express = require('express');

   const app = express();

   app.get('/hello', (req, res) =&amp;gt; {
   res.status(200).send('Hello World');
   });

   app.listen(9090);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Boot up the server with the following command on the terminal:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   node server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can check if your app is working by visiting: &lt;a href="http://localhost:9090/hello"&gt;http://localhost:9090/hello&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you are finished checking, exit the localhost on your terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-opentelemetry-and-send-data-to-signoz"&gt;
  &lt;/a&gt;
  Set up OpenTelemetry and send data to SigNoz
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;In the same directory path at the terminal, install the OpenTelemetry launcher package with this command:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   npm install lightstep-opentelemetry-launcher-node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The OpenTelemetry launcher makes getting started with OpenTelemetry easier by reducing configuration boilerplate.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To use OpenTelemetry, you need to start the OpenTelemetry SDK before loading your application. By initializing OpenTelemetry first, we enable OpenTelemetry to apply available instrumentation and auto-detect packages before the application starts to run. To do that, go to your directory and create a new file named, "server_init.js". This will act as the new entry point for your app. Paste the following code in the file:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   const {
    lightstep,
    opentelemetry,
   } = require('lightstep-opentelemetry-launcher-node');

   const sdk = lightstep.configureOpenTelemetry();

   sdk.start().then(() =&amp;gt; {
    require('./server');
   });

   function shutdown() {
    sdk.shutdown().then(
      () =&amp;gt; console.log("SDK shut down successfully"),
      (err) =&amp;gt; console.log("Error shutting down SDK", err),
    ).finally(() =&amp;gt; process.exit(0))
   };

   process.on('exit', shutdown);
   process.on('SIGINT', shutdown);
   process.on('SIGTERM', shutdown);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Once the file is created, you only need to run one last command at your terminal, which passes the necessary environment variables. Here, you also set SigNoz as your backend analysis tool.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   OTEL_EXPORTER_OTLP_SPAN_ENDPOINT="http://&amp;lt;IP of SigNoz Backend&amp;gt;:55681/v1/trace" OTEL_METRICS_EXPORTER=none LS_SERVICE_NAME=&amp;lt;service name&amp;gt; node server_init.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replacing the placeholders in the above command for local host:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;IP of SigNoz Backend&lt;/code&gt;: localhost (since we are running SigNoz on our local host)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;service name&lt;/code&gt; : sample_app (you can give whatever name that suits you)&lt;/p&gt;

&lt;p&gt;So the final command is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   OTEL_EXPORTER_OTLP_SPAN_ENDPOINT="http://localhost:55681/v1/trace" OTEL_METRICS_EXPORTER=none LS_SERVICE_NAME=sample_app node server_init.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, congratulations! You have instrumented your sample Node.js app. You can now access the SigNoz dashboard at &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; to monitor your app for performance metrics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dzzZGSGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sl4xyme55jarzzq6za0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dzzZGSGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sl4xyme55jarzzq6za0.png" alt="Sample nodejs app in the applications monitored"&gt;&lt;/a&gt;Sample_app in the list of applications monitored&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#metrics-and-traces-of-the-nodejs-application"&gt;
  &lt;/a&gt;
  Metrics and Traces of the Nodejs application
&lt;/h2&gt;

&lt;p&gt;SigNoz makes it easy to visualize metrics and traces captured through OpenTelemetry instrumentation.&lt;/p&gt;

&lt;p&gt;SigNoz comes with out of box RED metrics charts and visualization. RED metrics stands for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rate of requests&lt;/li&gt;
&lt;li&gt;Error rate of requests&lt;/li&gt;
&lt;li&gt;Duration taken by requests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o2RrWRlk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77dv0497auduw1ivd4j9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o2RrWRlk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77dv0497auduw1ivd4j9.png" alt="Sample nodejs app in the applications monitored"&gt;&lt;/a&gt;Measure things like application latency, requests per sec, error percentage and see your top endpoints&lt;/p&gt;

&lt;p&gt;You can then choose a particular timestamp where latency is high to drill down to traces around that timestamp.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SW58n7lB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tyc9wucgwk8ntyz6xndy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SW58n7lB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tyc9wucgwk8ntyz6xndy.png" alt="See traces, and apply powerful filters on trace data"&gt;&lt;/a&gt;View of traces at a particular timestamp&lt;/p&gt;

&lt;p&gt;You can use flamegraphs to exactly identify the issue causing the latency.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--84sgdf_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcu3k3l75lka9kejoz3s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--84sgdf_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcu3k3l75lka9kejoz3s.png" alt="Flamegraphs for distributed tracing"&gt;&lt;/a&gt;Flamegraphs showing exact duration taken by each spans - a concept of distributed tracing&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;OpenTelemetry makes it very convenient to instrument your Nodejs application. You can then use an open-source APM tool like SigNoz to analyze the performance of your app. As SigNoz offers a full-stack observability tool, you don't have to use multiple tools for your monitoring needs.&lt;/p&gt;

&lt;p&gt;You can try out SigNoz by visiting its GitHub repo 👇&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/SigNoz/signoz"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you face any issues while trying out SigNoz, feel free to write to us at: &lt;a href="mailto:support@signoz.io"&gt;support@signoz.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to read more about SigNoz 👇&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://signoz.io/blog/monitoring-your-go-application-with-signoz/"&gt;Golang Application Performance Monitoring with SigNoz&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>monitoring</category>
      <category>devops</category>
    </item>
    <item>
      <title>5 tools to automate your development</title>
      <author>Petar Garžina</author>
      <pubDate>Fri, 27 Aug 2021 12:43:48 +0000</pubDate>
      <link>https://dev.to/pgarzina/5-tools-to-automate-your-development-3m</link>
      <guid>https://dev.to/pgarzina/5-tools-to-automate-your-development-3m</guid>
      <description>&lt;p&gt;Automating your development with Dependabot, Auto Assign, Merge Freeze, Husky and Scheduled reminders.&lt;/p&gt;

&lt;p&gt;The idea of this post is to introduce some of the tools and integrations that made our development life easier.&lt;/p&gt;

&lt;p&gt;Most of these are pretty straightforward to implement into your workflow but for the ones that have a couple of gotchas I might write an extended introductory version for that tool alone.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-dependabot"&gt;
  &lt;/a&gt;
  1. Dependabot
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#automated-dependency-updates"&gt;
  &lt;/a&gt;
  &lt;em&gt;Automated dependency updates&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Dependabot creates pull requests to keep your dependencies secure and up-to-date.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dependabot.com/"&gt;Dependabot&lt;/a&gt; is dead simple and their punchline clearly states what it does. We started using it a couple of years back, a bit before &lt;a href="https://dependabot.com/blog/hello-github/"&gt;Github acquired it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main reason was that, at the time our current team took over the Front End division, there were a lot of outdated dependencies which we wanted to update and wanted to keep up to date. We found Dependabot, added it to our projects, and let it do its magic ever since.&lt;/p&gt;

&lt;p&gt;Now it's natively a part of Github, so adding it is even easier than before.  You can &lt;a href="https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically"&gt;check out&lt;/a&gt; how to set up Dependabot, but in the end you'll end up with a &lt;code&gt;dependabot.yml&lt;/code&gt; in your &lt;code&gt;.github&lt;/code&gt; folder.&lt;br&gt;
Ours looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="na"&gt;updates&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;package-ecosystem&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;npm"&lt;/span&gt; &lt;span class="c1"&gt;# See documentation for possible values&lt;/span&gt;
    &lt;span class="na"&gt;directory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;/"&lt;/span&gt; &lt;span class="c1"&gt;# Location of package manifests&lt;/span&gt;
    &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;interval&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;daily"&lt;/span&gt;
    &lt;span class="na"&gt;open-pull-requests-limit&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
    &lt;span class="na"&gt;commit-message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
       &lt;span class="na"&gt;prefix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;BleedingEdge"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only thing that differs from the default settings is that we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;chose npm as our package-ecosystem&lt;/li&gt;
&lt;li&gt;limited the number of open PRs to 2&lt;/li&gt;
&lt;li&gt;added a prefix for the default Dependabots commit message (you'll see later why)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Four years back we had 3 frontend repos, now we have around 14 active ones. Manually keeping every dependency up to date would be extremely time consuming. Dependabot helps a lot, but it still takes time to review and merge all the PR's. We usually take a day, after our weekly release, to merge Dependabots pull requests.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Writing this got me wondering if we could set the bot to open PR's only on major, minor or patch versions and indeed the feature &lt;a href="https://github.com/dependabot/dependabot-core/issues/2219"&gt;was requested in 2018&lt;/a&gt; and got released a few months ago and now you can ignore SemVer updates of your choice. Check out &lt;a href="https://github.blog/changelog/2021-05-21-dependabot-version-updates-can-now-ignore-major-minor-patch-releases/"&gt;GitHub's blog post&lt;/a&gt; for more.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-auto-assign"&gt;
  &lt;/a&gt;
  2. Auto Assign
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#add-reviewersassignees-to-pull-requests-when-pull-requests-are-opened"&gt;
  &lt;/a&gt;
  &lt;em&gt;Add reviewers/assignees to pull requests when pull requests are opened.&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;So you opened a pull request, you need at least two approvals and you need to add reviewers to your pull request. Every single time.&lt;/p&gt;

&lt;p&gt;Things are pretty obvious, let the bot do it. &lt;/p&gt;

&lt;p&gt;Setting up is easy, go to &lt;a href="https://probot.github.io/apps/auto-assign/"&gt;probot.github.io/apps/auto-assign&lt;/a&gt; hit the Add to Github button and don't ever worry about manually adding reviewers!&lt;br&gt;
Similar to Dependabot, you will end up with a &lt;code&gt;auto_assing.yml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Set to true to add reviewers to pull requests&lt;/span&gt;
&lt;span class="na"&gt;addReviewers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

&lt;span class="c1"&gt;# Set to true to add assignees to pull requests&lt;/span&gt;
&lt;span class="na"&gt;addAssignees&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;

&lt;span class="c1"&gt;# A list of reviewers to be added to pull requests (GitHub user name)&lt;/span&gt;
&lt;span class="na"&gt;reviewers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;teammember1&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;teammember2&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;teammember3&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;...&lt;/span&gt;


&lt;span class="c1"&gt;# A number of reviewers added to the pull request&lt;/span&gt;
&lt;span class="c1"&gt;# Set 0 to add all the reviewers (default: 0)&lt;/span&gt;
&lt;span class="na"&gt;numberOfReviewers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="c1"&gt;# A list of keywords to be skipped the process that add reviewers if pull requests include it&lt;/span&gt;
&lt;span class="na"&gt;skipKeywords&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;BleedingEdge&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have nothing out of the ordinary here. We are utilizing the &lt;em&gt;skipKeywords&lt;/em&gt; option with the &lt;em&gt;BleedingEdge&lt;/em&gt; keyword that if you remember Dependabot prefixes to each of its pull requests. We handle the pull requests Dependabot opens a little bit differently and don't want to burden all the reviewers with them.&lt;/p&gt;

&lt;p&gt;Once the Pull request is opened the bot kicks in and you see it in the timeline requesting reviews:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A6ms0wVk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ke3agursj98fenqcs28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A6ms0wVk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ke3agursj98fenqcs28.png" alt="Auto assign bot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can also try and use the default settings Github provides for Code Review Assignments. Just go to your team page, in the top right hit Settings and you'll find the Code review assignments tab. We tried it but it didn't work out for us.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-merge-freeze"&gt;
  &lt;/a&gt;
  3. Merge Freeze
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#the-code-freeze-tool-to-block-merging-and-deployments"&gt;
  &lt;/a&gt;
  &lt;em&gt;The code freeze tool to block merging and deployments&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;The reason for adding merge freeze originated from a simple question:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Can you tell all the developers to stop merging since we are starting regression?&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We could announce it in our team's channel in hopes that everyone reads the message in time. Or we could integrate a tool that allows the QA team to issue a command on Slack that freezes/unfreezes merging to the repository. &lt;a href="https://www.mergefreeze.com/"&gt;Merge Freeze&lt;/a&gt; to the rescue.&lt;/p&gt;

&lt;p&gt;Again, setting up, nothing too complex. What we did find Merge Freeze is missing is the ability to bulk freeze. It worked well when we needed to freeze a couple of repos. But once the number of our repositories increased to over 10, manually entering the command more than 10 times... you get it.&lt;/p&gt;

&lt;p&gt;For this we used &lt;a href="https://slack.com/apps"&gt;Slack Apps&lt;/a&gt; and &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We created a custom Slack App for our workspace called Deployment, that has two Slash commands: &lt;code&gt;/freeze_all&lt;/code&gt; and &lt;code&gt;/unfreeze_all&lt;/code&gt;. Both commands have the Request URL set to our Lambda url, and pass the freeze value as a query parameter: &lt;code&gt;?freeze=true | false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Using it on Slack looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uw8rpAUC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79wp9ch4ok8h3fn00h6o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uw8rpAUC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79wp9ch4ok8h3fn00h6o.png" alt="Slack Freeze command"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Merge Freeze tool exposes an API endpoint for each repository you add to it, which you can use to freeze or unfreeze it. That makes the Lambda rather simple, it just makes a POST request to each of the endpoints provided by MergeFreeze.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;freezeValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getFreezeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;freezeValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;BOOM! You need to provide a freeze value as a query param, either true or false&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getUserName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;baseOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mergefreeze.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Length&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appOneOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`/api/branches/your-organization/your-repo/main/?access_token=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;frozen=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;freezeValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;user_name=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;baseOptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="cm"&gt;/** Removed the rest of declaration to keep the preview short */&lt;/span&gt;


  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="nx"&gt;doRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;appOneOptions&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;doRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;appElevenOptions&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'm done with all your promises!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Text that gets return to Slack that is only visible to the person entering the command&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;You have such power!!!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEncoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;responseBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;responseBody&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;

      &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getFreezeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;freezeQueryString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryStringParameters&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryStringParameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;freezeQueryString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryStringParameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;freezeQueryString&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;freezeQueryString&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;freeze&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;freezeQueryString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUserName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bodyQueryParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;bodyQueryParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user_name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Web API&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After entering the command, MergeFreeze lists all the repos that got frozen or unfrozen and you get a confirmation message from Slack, making your work day a bit better!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5lOVL_Cj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1jwu3j6pjccg1clsw15y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5lOVL_Cj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1jwu3j6pjccg1clsw15y.png" alt="Much Power"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the regression is done, everything is pushed to Production and is smoke tested, the lead QA issues the &lt;code&gt;unfreeze_all&lt;/code&gt; command and life goes on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-husky"&gt;
  &lt;/a&gt;
  4. Husky
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#modern-native-git-hooks-made-easy"&gt;
  &lt;/a&gt;
  &lt;em&gt;Modern native Git hooks made easy&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;We use Jira as our work management tool so we have to prepend the ticket ID to our branch names and commit messages in order to utilize both the Development panel when viewing an issue and VSCodes extension GitLens:&lt;/p&gt;

&lt;p&gt;Jira ticket Development panel:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B2yKQY8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wgvumpwofinjccdlsak.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B2yKQY8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wgvumpwofinjccdlsak.png" alt="Jira Development Panel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This means that each time you create a branch you have to remember to include the Jira issue ID, eg: task-&lt;strong&gt;ND-123&lt;/strong&gt;-add-authentication. That alone was not a big deal as it quickly became a habit. But what was a PIA was prepending it to every commit message. The 1st automation round was just setting up the git &lt;code&gt;prepare-commit-message&lt;/code&gt; hook on your local machine, but as the team grew larger we needed a better solution which Husky provided!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://typicode.github.io/husky"&gt;Husky&lt;/a&gt; in combination with &lt;a href="https://github.com/bk201-/jira-prepare-commit-msg"&gt;jira-prepare-commit-msg&lt;/a&gt; is what worked for us:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"private"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"husky"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"hooks"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"prepare-commit-msg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"jira-prepare-commit-msg"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"jira-prepare-commit-msg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"messagePattern"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"$J $M"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"jiraTicketPattern"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"(&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;w+-&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;w+-&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;d+)"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"husky"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.3.8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"jira-prepare-commit-msg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.5.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The JIRA ticket ID is taken from a git branch name. Now you could just write &lt;code&gt;commit -m "Fixing a typo"&lt;/code&gt; and you would get a commit message looking like &lt;em&gt;task-ND-123-Fixing a typo&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In case you did not name your branch correctly eg: missing Jira ticket ID you would get an error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;my-application git:&lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt; ✗ git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Add authentication methods"&lt;/span&gt;
husky &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; prepare-commit-msg &lt;span class="o"&gt;(&lt;/span&gt;node v14.15.0&lt;span class="o"&gt;)&lt;/span&gt;
JIRA prepare commit msg &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; start
JIRA prepare commit msg &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; Error: The JIRA ticket ID not found
JIRA prepare commit msg &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This came in nicely as everything was set up in &lt;code&gt;package.json&lt;/code&gt; and a new developer would do &lt;code&gt;npm i&lt;/code&gt; and she/he is pretty much set, no need to manually configure hooks.&lt;/p&gt;

&lt;p&gt;But the Jira Ticket ID in the commit message in combination with GitLens is what really made this super useful. &lt;/p&gt;

&lt;p&gt;GitLens with Git blame annotations:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0dUSa_V_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ig9br67fr317myzh0sed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0dUSa_V_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ig9br67fr317myzh0sed.png" alt="Visual Studio Code and GitLens"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There were a lot of times where we had to, for various reasons, open up and read the Jira issue associated with the code change. Having the ticket ID at each mouse click throughout the codebase saved us a lot of time. (opening it in the browser is easy as well, just take the Jira ID and add it after &lt;em&gt;.../browse/&lt;/em&gt; + &lt;em&gt;ND-123&lt;/em&gt; e.g., &lt;a href="https://your-organization.atlassian.net/browse/ND-123"&gt;https://your-organization.atlassian.net/browse/ND-123&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;GitLens is a cool tool which I personally use on a daily basis. It helps you to visualize code authorship at a glance via Git blame annotations and code lens. You can also very easily navigate back in history to see past commits which is useful as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-scheduled-reminders-for-pull-requests"&gt;
  &lt;/a&gt;
  5. Scheduled reminders for Pull Requests
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#scheduled-reminders-help-teams-focus-on-the-most-important-review-requests"&gt;
  &lt;/a&gt;
  &lt;em&gt;Scheduled reminders help teams focus on the most important review requests&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;This is something we added not too long ago, just a bit after we moved to Micro Frontend Architecture. One of the reasons for adding it was that the number of repositories increased from 4 to 14 so having a dedicated channel for open pull requests made sense. Prior to this we would post a link of the PR in our team's main channel, or would hope people would see it in their email. This way we moved the noise to a dedicated channel, and the devs know the team will get automatically notified.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GFKfRvK6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75ike2bcdg4sh4eossx1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GFKfRvK6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75ike2bcdg4sh4eossx1.png" alt="GitHub Scheduled Reminders"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We get notifications on every working day each full hour from 8-16. It ignores approved pull requests (in our case when 2+ ppl approved it) and we also have ignore terms for &lt;em&gt;BleedingEdge&lt;/em&gt; so it ignores pull requests opened by Dependabot.&lt;/p&gt;

&lt;p&gt;Setting up &lt;a href="https://docs.github.com/en/organizations/organizing-members-into-teams/managing-scheduled-reminders-for-your-team"&gt;scheduled reminders&lt;/a&gt; is straightforward and you can find the github docs &lt;a href="https://docs.github.com/en/github/setting-up-and-managing-your-github-user-account/managing-your-membership-in-organizations/managing-your-scheduled-reminders"&gt;here&lt;/a&gt;. This is how it looks like once its up, in our case it posts messages in a private &lt;em&gt;frontend-pull-requests&lt;/em&gt; channel:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mSns9fMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3i1gnp3rl00oev5yvf6r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mSns9fMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3i1gnp3rl00oev5yvf6r.png" alt="FrontEnd Pull Requests"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;There are a lot of improvements that we could include on top of what we have, like creating branches directly from Jira would ease up on having to remember the naming convention. Or maybe we could have chosen a merge freeze tool that has bulk freeze built in. But usually we had limited time for investigation, or it was good enough at that time, and later on we just tried to improve the process instead of replacing the tool. &lt;br&gt;
If you have any suggestions, please do post them in the discussion below! &lt;/p&gt;




&lt;p&gt;Feel free to connect 👋&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/pgarzina"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.instagram.com/pgarzina/"&gt;Instagram&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/petar-garzina/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>github</category>
      <category>devops</category>
    </item>
    <item>
      <title>State of Go / Golang in 2021</title>
      <author>Meat Boy</author>
      <pubDate>Fri, 27 Aug 2021 12:40:10 +0000</pubDate>
      <link>https://dev.to/meatboy/state-of-go-golang-in-2021-34ni</link>
      <guid>https://dev.to/meatboy/state-of-go-golang-in-2021-34ni</guid>
      <description>&lt;p&gt;What is the state of Go in 2021 in your opinion? Is it worth learning or write applications? &lt;/p&gt;

&lt;p&gt;The performance of apps written in Go is great but for many businesses, that's not enough. Crucial is also stability, the potential of maintenance in long therm and so on. What do you think about the ecosystem around Go language?&lt;/p&gt;

</description>
      <category>go</category>
      <category>discuss</category>
      <category>webdev</category>
      <category>backend</category>
    </item>
    <item>
      <title>Firebase Authentication .NET 5</title>
      <author>Ivan Pesenti</author>
      <pubDate>Fri, 27 Aug 2021 12:38:02 +0000</pubDate>
      <link>https://dev.to/ivan_pesenti/firebase-authentication-net-5-29oi</link>
      <guid>https://dev.to/ivan_pesenti/firebase-authentication-net-5-29oi</guid>
      <description>&lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt; has always been one of my major concerns when developing applications, especially in web development where our resources can be consumed from everywhere (and potentially from anyone). Be able to restrict the resources' access to only certain people is fundamental.&lt;br&gt;&lt;br&gt;
Nowadays data loss, identity theft and other cyber threats are constantly increasing. So, in order to reduce this probability that could lead (in the worst scenario) to a business failure, we must write &lt;em&gt;secure&lt;/em&gt; and &lt;em&gt;reliable&lt;/em&gt; code in our daily development life.&lt;br&gt;
If all of this is a also for you a concern I strongly encourage u to read carefully this blog post (that will be the first of a series of three).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-big-picture"&gt;
  &lt;/a&gt;
  The big picture 🌍
&lt;/h2&gt;

&lt;p&gt;Throughout this series we're going to build a web api project that supports two authentication providers: &lt;strong&gt;Google Firebase&lt;/strong&gt; and our &lt;strong&gt;web api itself&lt;/strong&gt;. The user, in order to access the web api resource, must be authenticated either against the former or against the latter authentication providers. If this is the case the user will receive a &lt;strong&gt;200&lt;/strong&gt; OK response together with the requested data. Otherwise, it will receive a &lt;strong&gt;401&lt;/strong&gt; Unauthorized response with no data. The authentication mechanism would be the &lt;em&gt;token authentication&lt;/em&gt; in JWT format.&lt;br&gt;&lt;br&gt;
🧐NOTE🧐: if u need to learn more about Google Firebase u can checkout this &lt;a href="https://firebase.google.com/"&gt;link&lt;/a&gt;.&lt;br&gt;&lt;br&gt;
To maintain the blog post leaner I decided to split this building process into three parts. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-first-piece"&gt;
  &lt;/a&gt;
  The first piece
&lt;/h2&gt;

&lt;p&gt;In this blog post we're gonna to create a web api project, create some requests to test it, configure stuff related to Firebase in our web api proj, use the Firebase console to manage our proj and implement the Firebase authentication mechanism in our web api. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#preamble"&gt;
  &lt;/a&gt;
  Preamble
&lt;/h2&gt;

&lt;p&gt;This will be a demo application to show off a way to implement authentication in .NET. U can take away these concepts and adapt them to your real-world requirements.&lt;br&gt;&lt;br&gt;
🔴IMPORTANT❗🔴: I'm not going to follow every best practices to save time but I'll do my best to spot things that are not "real-world ready" to use.&lt;br&gt;&lt;br&gt;
As always, if u get in trouble in following this tutorial u can check the final solution in GitHub at this &lt;a href="https://github.com/ivan-pesenti/auth-series"&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let's start 🚀
&lt;/h2&gt;

&lt;p&gt;After these necessary thoughts we can start the fun part, what everybody are waiting for... the &lt;strong&gt;&lt;em&gt;coding&lt;/em&gt;&lt;/strong&gt;!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;To follow this tutorial u must install on your machine some tools and programs:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;NET 5 Runtime. U can download from &lt;a href="https://dotnet.microsoft.com/download/dotnet/5.0"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Visual Studio Code (u can use another IDE if u wish). Download can be found &lt;a href="https://code.visualstudio.com/download"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Postman (u can use another program to consume REST-api if u wish). Download can be found &lt;a href="https://www.postman.com/downloads/"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Google Firebase project with a user registered.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;⚠️WARNING⚠️: u must be sure that Email/Password Sign-in method is enabled. When u create a Firebase project it's &lt;strong&gt;not enabled&lt;/strong&gt; by default. The correct config is the same as in the below image:  &lt;/p&gt;

&lt;p&gt;
    &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RqEZ2qjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ivan-pesenti/auth-series/blob/main/blog/part-one/img/fb-sign-in-methods.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RqEZ2qjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ivan-pesenti/auth-series/blob/main/blog/part-one/img/fb-sign-in-methods.png%3Fraw%3Dtrue" alt="firebase sign-in methods"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup-web-api-proj"&gt;
  &lt;/a&gt;
  Setup web api proj
&lt;/h3&gt;

&lt;p&gt;First, we must create a web api proj. I'll do these kind of stuff from dotnet CLI. So open up a terminal (or use the one integrated in VSCode) and issue:&lt;br&gt;&lt;br&gt;
&lt;code&gt;dotnet new webapi -n "AuthSeries"&lt;/code&gt;&lt;br&gt;&lt;br&gt;
When VSCode will prompt u to restore dependencies give a yes and go ahead.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#test-it"&gt;
  &lt;/a&gt;
  Test it
&lt;/h3&gt;

&lt;p&gt;Now to be sure that everything looks fine before start to edit we're going to give it a first try.&lt;br&gt;&lt;br&gt;
Change directory with &lt;code&gt;cd AuthSeries&lt;/code&gt; and run the web api with the command &lt;code&gt;dotnet run&lt;/code&gt;. By default the web api will be launched on port 5001 for &lt;strong&gt;HTTPS&lt;/strong&gt; protocol.&lt;br&gt;&lt;br&gt;
Open up Postman and create a request with the following params:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;HTTP method: GET&lt;/li&gt;
&lt;li&gt;URL: &lt;a href="https://localhost:5001/weatherforecast"&gt;https://localhost:5001/weatherforecast&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hit "Send" and u should receive dummy data generated by our web api.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#firebase-stuff"&gt;
  &lt;/a&gt;
  Firebase stuff
&lt;/h2&gt;

&lt;p&gt;Open your Firebase project within the Google Firebase Console.&lt;br&gt;&lt;br&gt;
🧐NOTE🧐: the project's URL should be something like '&lt;a href="https://console.firebase.google.com/u/0/xxxxxxx"&gt;https://console.firebase.google.com/u/0/xxxxxxx&lt;/a&gt;'.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-web-app"&gt;
  &lt;/a&gt;
  Create Web App
&lt;/h3&gt;

&lt;p&gt;Click on the little gear next to "Project overview" and select "Project settings". In "General" tab scroll toward the bottom and click the icon in the following image:&lt;/p&gt;

&lt;p&gt;
    &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sgOPRfcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ivan-pesenti/auth-series/blob/main/blog/part-one/img/fb-web-app.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sgOPRfcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ivan-pesenti/auth-series/blob/main/blog/part-one/img/fb-web-app.png%3Fraw%3Dtrue" alt="firebase web app registration"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Give a meaningful name, I choose "auth-series-app" to discriminate from the Firebase proj called "auth-series" and click "Register App". After that select "Continue to console".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-service-account-key"&gt;
  &lt;/a&gt;
  Create Service Account Key
&lt;/h3&gt;

&lt;p&gt;In order to manage programmatically the Firebase proj from the web api codebase through the &lt;strong&gt;Firebase Admin SDK&lt;/strong&gt; we must generate a &lt;strong&gt;secret private key&lt;/strong&gt; that we'll be used to identify our web api into Firebase scope.&lt;br&gt;&lt;br&gt;
Go to "Service accounts", "Firebase Admin Sdk" and click "Create service account".&lt;br&gt;&lt;br&gt;
The following window will appear:&lt;/p&gt;

&lt;p&gt;
    &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ChZKECag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ivan-pesenti/auth-series/blob/main/blog/part-one/img/fb-security-warning.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ChZKECag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ivan-pesenti/auth-series/blob/main/blog/part-one/img/fb-security-warning.png%3Fraw%3Dtrue" alt="firebase security warning"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Click "Generate key" and a JSON file will be downloaded on your machine. Keep on hand this file as we're going to use it immediately.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wire-up-firebase-and-web-api-%E2%9B%93"&gt;
  &lt;/a&gt;
  Wire up Firebase and Web Api ⛓
&lt;/h2&gt;

&lt;p&gt;Now, let's connect the dots! We've to create a bridge between Firebase and our web api proj.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#firebase-registration-inside-our-web-api"&gt;
  &lt;/a&gt;
  Firebase registration inside our Web Api
&lt;/h3&gt;

&lt;p&gt;Change directory (if you're not already there) with &lt;code&gt;cd AuthSeries&lt;/code&gt; and issue &lt;code&gt;mkdir Firebase&lt;/code&gt;. Copy the JSON file downloaded above into this folder. Issue the following command in CLI to add a NuGet package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet add package FirebaseAdmin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the file Startup.cs and add this &lt;code&gt;using FirebaseAdmin;&lt;/code&gt; below the other using statements.&lt;br&gt;
Finally add the following code to the ConfigureServices() method of Startup.cs class file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;FirebaseApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AppOptions&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Credential&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GoogleCredential&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FromFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@"C:\Projects\SampleProjects\auth-series\auth-series\AuthSeries\Firebase\auth-series-firebase-adminsdk-rk7k4-4dc58434f2.json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔵IMPORTANT🔵: u must replace my path with your. In production u &lt;strong&gt;should not hard-coded&lt;/strong&gt; info in this way. U could use environment variable, .NET User Secrets and so on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-firebase-authentication-in-ioc-container"&gt;
  &lt;/a&gt;
  Add firebase authentication in IOC container
&lt;/h3&gt;

&lt;p&gt;Up to now, we've only registered the Firebase proj inside our web api.&lt;br&gt;&lt;br&gt;
The next thing is to tell to our web api that we'd like to use Firebase as authentication provider.&lt;br&gt;&lt;br&gt;
To achieve it we must change some files.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#appsettingsjson"&gt;
  &lt;/a&gt;
  appsettings.json
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"Jwt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Firebase"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"ValidIssuer"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://securetoken.google.com/auth-series"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"ValidAudience"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"auth-series"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;⚠️WARNING⚠️: u must replace "auth-series" with the project id u choose for your Firebase project (u can find it in "Project settings &amp;gt; General" in Firebase Console).&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#startupcs"&gt;
  &lt;/a&gt;
  Startup.cs
&lt;/h4&gt;

&lt;p&gt;Before editing this file u have to install two NuGet packages. Issue in the terminal these two commands:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;dotnet add package Microsoft.AspNetCore.Authentication&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After that be sure to append these two using statements at the top of the file:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;using Microsoft.IdentityModel.Tokens;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;using Microsoft.AspNetCore.Authentication.JwtBearer;&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now u are ready to edit the two methods of the Startup.cs.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#configureservices-method"&gt;
  &lt;/a&gt;
  ConfigureServices method
&lt;/h5&gt;

&lt;p&gt;Under the Firebase app's registration (the code added above) place the following code to set parameters for &lt;strong&gt;JWT token&lt;/strong&gt; provided by Google Firebase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// firebase auth&lt;/span&gt;
&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddAuthentication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JwtBearerDefaults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AuthenticationScheme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddJwtBearer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Authority&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Jwt:Firebase:ValidIssuer"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TokenValidationParameters&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TokenValidationParameters&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ValidateIssuer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ValidateAudience&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ValidateLifetime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ValidateIssuerSigningKey&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ValidIssuer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Jwt:Firebase:ValidIssuer"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;ValidAudience&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Jwt:Firebase:ValidAudience"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔎&lt;strong&gt;HINT&lt;/strong&gt;🔎: in order to make the code type safer u should consider using the &lt;em&gt;options pattern&lt;/em&gt; and bind settings to POCO classes. Moreover u have to place these sensitive data in a more secure place.  &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#configure-method"&gt;
  &lt;/a&gt;
  Configure method
&lt;/h5&gt;

&lt;p&gt;With the following change you're about to add the authentication middleware in the middlewares' pipeline.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseRouting&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseAuthentication&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseAuthorization&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#weatherforecastcontrollercs"&gt;
  &lt;/a&gt;
  WeatherForecastController.cs
&lt;/h4&gt;

&lt;p&gt;The final thing to change is the endpoint that will be secured. Add &lt;code&gt;using Microsoft.AspNetCore.Authorization;&lt;/code&gt; at the top of the file.&lt;br&gt;&lt;br&gt;
Above the signature of Get method add &lt;code&gt;[Authorize]&lt;/code&gt; to restrict access to this action only to authenticated users.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#final-test"&gt;
  &lt;/a&gt;
  Final test
&lt;/h2&gt;

&lt;p&gt;Now, let's test our work. In order to prove that we're right we need of two requests: one to &lt;em&gt;sign-in&lt;/em&gt; a user in Firebase and one to &lt;em&gt;query&lt;/em&gt; our endpoint.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#firebase-request"&gt;
  &lt;/a&gt;
  Firebase request
&lt;/h3&gt;

&lt;p&gt;Before creating the request u must get the &lt;strong&gt;web API key&lt;/strong&gt; from Firebase project. As before, u have to navigate "Project settings &amp;gt; General" and copy the web API key as u can see below:&lt;/p&gt;

&lt;p&gt;
    &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yru2v1bW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ivan-pesenti/auth-series/blob/main/blog/part-one/img/fb-web-api-key.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yru2v1bW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ivan-pesenti/auth-series/blob/main/blog/part-one/img/fb-web-api-key.png%3Fraw%3Dtrue" alt="firebase web api key"&gt;&lt;/a&gt;
&lt;/p&gt;  

&lt;p&gt;In postman create a request with the following params:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;HTTP method: POST&lt;/li&gt;
&lt;li&gt;URL: &lt;a href="https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword"&gt;https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;headers:

&lt;ul&gt;
&lt;li&gt;key: &amp;lt;your secret web API key&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;body:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"test@test.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"returnSecureToken"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Execute the request and copy the &lt;em&gt;idToken&lt;/em&gt; that u get back in the output console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#weatherforecast-request"&gt;
  &lt;/a&gt;
  WeatherForecast request
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Reopen the request used above &lt;/li&gt;
&lt;li&gt;Go in "Authorization" tab&lt;/li&gt;
&lt;li&gt;Select "Bearer Token" as type&lt;/li&gt;
&lt;li&gt;Paste in the token copied before&lt;/li&gt;
&lt;li&gt;Hit send and u'll get the requested resource&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Congratulations 🏆! U successfully did the first part of this series. Now you're able to restrict 🔐 access to your resource to only authenticated users. Moreover, u are able to integrate Google Firebase as authentication provider in your web api with a couple of simple steps. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next-%E2%80%8D%F0%9F%8F%8D"&gt;
  &lt;/a&gt;
  What's next 🐱‍🏍
&lt;/h2&gt;

&lt;p&gt;In the next blog post we're going to generate our JWT token directly within our web api instead of using Firebase. We're going to create an endpoint to sign-in users by &lt;strong&gt;issuing&lt;/strong&gt; a JWT token.&lt;br&gt;&lt;br&gt;
If this sounds exciting for you, don't miss it.  &lt;/p&gt;

&lt;p&gt;I hope you enjoy this post and find it useful. If you have any questions or you want to spot me some errors I really appreciate it and I'll make my best to follow up. If you enjoy it and would like to sustain me consider giving a like and sharing on your favorite socials. If u want u can add me on your socials this makes me very very happy!&lt;/p&gt;

&lt;p&gt;Stay safe and see you soon! 😎&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>googlecloud</category>
      <category>vscode</category>
      <category>firebase</category>
    </item>
    <item>
      <title>How to use Python to Create Files?</title>
      <author>hrishikesh1990</author>
      <pubDate>Fri, 27 Aug 2021 12:03:02 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/how-to-use-python-to-create-files-41eb</link>
      <guid>https://dev.to/hrishikesh1990/how-to-use-python-to-create-files-41eb</guid>
      <description>&lt;p&gt;In this short tutorial, we learn how to use Python to create a file. We also look at the write, read, and append file handling methods.&lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#why-use-python-to-create-files"&gt;Why use Python to Create files?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#how-to-create-files-in-python"&gt;How to create files in Python&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#file-handling-methods"&gt;File handling methods&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#closing-thoughts"&gt;Closing thoughts&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-use-python-to-create-files"&gt;
  &lt;/a&gt;
  Why use Python to Create files?
&lt;/h2&gt;

&lt;p&gt;Like most programming languages, Python too supports file handling. However, since Python treats files as text or binary, handling files is much easier. The most used file handling methods are to create, read and write files. &lt;/p&gt;

&lt;p&gt;In this tutorial, we largely focus on how to use Python to create a file as this is the first step to file handling. However, we do introduce you to how you could read and write files. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-files-in-python"&gt;
  &lt;/a&gt;
  How to create files in Python:
&lt;/h2&gt;

&lt;p&gt;To create a file in Python we use the in-built &lt;code&gt;open()&lt;/code&gt; function. There are other methods that utilize the OS module in Python, however, a few methods would require root permission. Hence to standardize this tutorial I have only used the &lt;code&gt;open()&lt;/code&gt; method. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-of-open"&gt;
  &lt;/a&gt;
  Syntax of open():
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;access&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters:
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;open()&lt;/code&gt; methods require two parameters, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;File&lt;/code&gt; - Required, the name or path of the file. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Access mode&lt;/code&gt; - Access modes govern the type of operations you would be performing. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since we are trying to create a file, the access mode we would use is “x”. I’ve added a list of all the access modes below. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-amp-explanation"&gt;
  &lt;/a&gt;
  Code &amp;amp; Explanation:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"myfirstfile.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"x"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, we have used the &lt;code&gt;open()&lt;/code&gt; to create a file, since we have not specified a path, the file is created in the same directory as the script. &lt;/p&gt;

&lt;p&gt;In case the file already exists, Python returns a &lt;code&gt;FileExistsError&lt;/code&gt;. Try running the same code twice and you will receive this error. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#file-handling-methods"&gt;
  &lt;/a&gt;
  File handling methods:
&lt;/h2&gt;

&lt;p&gt;Apart from the create method, I’d like to give you an introduction about the read, write and append methods. I’ve added below a list of all the methods along with their access modes. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Read-only (‘r’)&lt;/strong&gt;: This method is used to read an existing file. In case the file does not exist, a &lt;code&gt;FileNotFoundError&lt;/code&gt; is returned. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Read and Write (‘r+’)&lt;/strong&gt;: This method is used to read and write a file, and similar to Read-only a &lt;code&gt;FileNotFoundError&lt;/code&gt; is returned if the file does not exist.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Write Only (‘w’)&lt;/strong&gt;: This method can be used to open and write to a file. In case a file does not exist, the file is created. And in case it does, the content of the file is overwritten.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Append (‘a’)&lt;/strong&gt;: This method is used to add content to a file. The handler is positioned at the bottom of the file and hence the content is written at the bottom of the file. The method also creates a file in case it does not exist.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts:
&lt;/h2&gt;

&lt;p&gt;As you may have noticed, the write and append methods can also be used to create files. However, I would recommend you familiarize yourself with the create methods first before you start to use other methods in Python to create files. &lt;/p&gt;

&lt;p&gt;This is because the write method overwrites the existing data. Although the append methods do not overwrite data both these methods are not very user-friendly while creating files. Hence do practice creating files first before you start using the other methods to do the same.&lt;/p&gt;

&lt;p&gt;Do let me know your thoughts in the comments section below. :)&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>480+ handpicked tools &amp; resources for web designers/developers 🧰</title>
      <author>Adam Greenough</author>
      <pubDate>Fri, 27 Aug 2021 11:58:12 +0000</pubDate>
      <link>https://dev.to/adamgreenough/480-handpicked-tools-resources-for-web-designers-developers-4con</link>
      <guid>https://dev.to/adamgreenough/480-handpicked-tools-resources-for-web-designers-developers-4con</guid>
      <description>&lt;p&gt;Hey everyone! Passed 10 years in the industry now and my bookmarks continue to boom. I've curated all my favourite tools &amp;amp; resources for web designers &amp;amp; developers to share with you too. Almost all are free, with the exception of a few which will have a from price on the card.&lt;/p&gt;

&lt;p&gt;I hope you find something new to take with you on your dev journey!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools-amp-resources-for-web-designers-amp-developers"&gt;
  &lt;/a&gt;
  Tools &amp;amp; Resources for Web Designers &amp;amp; Developers
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/accessibility/"&gt;🚹 Accessibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/animation/"&gt;✨ Animation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/api/"&gt;🔌 API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/audio/"&gt;🎵 Audio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/backgrounds/"&gt;🖼 Backgrounds &amp;amp; Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/blogs/"&gt;📖 Blogs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/books/"&gt;📚 Books&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/branding/"&gt;🦄 Branding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/business/"&gt;💼 Business&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/cms/"&gt;🗂 CMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/code/"&gt;⌨️ Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/colour/"&gt;🌈 Colour&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/community/"&gt;👨‍👩‍👧‍👦 Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/copywriting/"&gt;✒️ Copywriting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/developer-tools/"&gt;🛠 Developer Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/domains-hosting/"&gt;🌐 Domains &amp;amp; Hosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/email/"&gt;📨 Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/fun/"&gt;😀 Fun &amp;amp; Games&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/hardware-merch/"&gt;👕 Hardware &amp;amp; Merch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/icons/"&gt;🔣 Icon Packs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/illustrations/"&gt;✍️ Illustrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/inspiration/"&gt;💡 Inspiration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/job-boards/"&gt;💰 Job Boards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/learning/"&gt;🎓 Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/marketing/"&gt;📢 Marketing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/marketplaces/"&gt;💸 Marketplaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/mockups/"&gt;📱 Mockups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/newsletters/"&gt;🗞 Newsletters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/photography/"&gt;📸 Photography &amp;amp; Stock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/placeholders/"&gt;📦 Placeholders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/podcasts/"&gt;🎙 Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/productivity/"&gt;✅ Productivity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/public-health/"&gt;🦠 Public Health&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/security/"&gt;🛡 Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/self-care/"&gt;🧘‍♂️ Self Care&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/self-hosted/"&gt;🧰 Self Hosted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/seo/"&gt;🔍 SEO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/services/"&gt;⚡️ Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/software/"&gt;💿 Software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/templates/"&gt;📐 Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/testing/"&gt;🧪 Test &amp;amp; Optimise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/typography/"&gt;🔤 Typography&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/ui-kits/"&gt;💻 UI Kits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/ux-design/"&gt;🪄 UX Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/video/"&gt;🎥 Video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toolkit.addy.codes/tag/wordpress/"&gt;🖊 WordPress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#am-i-missing-any-of-your-favourites"&gt;
  &lt;/a&gt;
  Am I missing any of your favourites?
&lt;/h2&gt;

&lt;p&gt;Please let me know if I am missing any of your favourites in the comments! &lt;/p&gt;

</description>
      <category>showdev</category>
      <category>design</category>
      <category>discuss</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 things you should know when you start your career in software engineering.</title>
      <author>Ankur Tyagi</author>
      <pubDate>Fri, 27 Aug 2021 11:54:43 +0000</pubDate>
      <link>https://dev.to/tyaga001/5-things-you-should-know-when-you-start-your-career-in-software-engineering-4a4m</link>
      <guid>https://dev.to/tyaga001/5-things-you-should-know-when-you-start-your-career-in-software-engineering-4a4m</guid>
      <description>&lt;p&gt;5 things you should know when you start your career in software engineering. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-your-1st-job-is-not-going-to-define-your-life"&gt;
  &lt;/a&gt;
  1. Your 1st Job is not going to define your life.
&lt;/h2&gt;

&lt;p&gt;Is a dream job your only path to career fulfillment? Many people think so. &lt;/p&gt;

&lt;p&gt;They believe that finding their dream job is the only way to ensure happiness.&lt;/p&gt;

&lt;p&gt;"The truth is that many people fail to land their ultimate dream job."&lt;/p&gt;

&lt;p&gt;That doesn’t mean they don’t enjoy their work or the people they work with.&lt;/p&gt;

&lt;p&gt;How do you know if you’ve found your dream job?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You need to define exactly what makes your dream job.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It's important to assess what you expect from a job that would completely engage you.&lt;/p&gt;

&lt;p&gt;Success can be rarely measured by someone’s job or wealth. &lt;/p&gt;

&lt;p&gt;The true definition of success derives from the ability to do something that you truly love.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To be able to care for others&lt;/li&gt;
&lt;li&gt;To overcome your greatest fears&lt;/li&gt;
&lt;li&gt;To find blissful happiness.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#2-your-1st-company-is-not-going-to-define-your-life"&gt;
  &lt;/a&gt;
  2. Your 1st company is not going to define your life.
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Working for a renowned company does look good on your resume, But having a job in well-known company isn’t your only success.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because most jobs are a temporary state and can change at any moment.&lt;/p&gt;

&lt;p&gt;While life is known to be filled with uncertainty, most of us believe we have complete control over our circumstances.&lt;/p&gt;

&lt;p&gt;Essentially, nothing is permanent. &lt;br&gt;
Life is full of surprises.&lt;/p&gt;

&lt;p&gt;All you should care about is your happiness.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-your-1st-pay-package-is-not-going-to-define-your-life"&gt;
  &lt;/a&gt;
  3. Your 1st pay package is not going to define your life.
&lt;/h2&gt;

&lt;p&gt;It took me a long time to realize all that mattered was, that I could pay my bills, which was the only reason for doing this.&lt;/p&gt;

&lt;p&gt;I’ve learned that making a ‘living’ is not the same thing as making a ‘life.&lt;/p&gt;

&lt;p&gt;~Maya Angelou&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-your-1st-product-is-not-going-to-define-your-life"&gt;
  &lt;/a&gt;
  4. Your 1st product is not going to define your life.
&lt;/h2&gt;

&lt;p&gt;Because people won’t remember you by the product, but by how you make them feel.&lt;/p&gt;

&lt;p&gt;When people talk or think about you, the thought of your career might come up, but your personality &amp;amp; character will resonate with them more.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-your-1st-startup-is-not-going-to-define-your-life"&gt;
  &lt;/a&gt;
  5. Your 1st startup is not going to define your life.
&lt;/h2&gt;

&lt;p&gt;Working for a start-up is attractive.&lt;br&gt;
Starting a start-up is attractive.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It’s true that joining a start-up can be a fun, smart, and even life-changing move.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Starting an online business, in particular, is a great thing.&lt;/p&gt;

&lt;p&gt;However, it’s a terribly challenging thing too.&lt;/p&gt;

&lt;p&gt;It’s literally like having 3 children in 1 year.&lt;/p&gt;

&lt;p&gt;I’m not trying to discourage you.&lt;br&gt;
I just want to give you an honest heads up.&lt;/p&gt;

&lt;p&gt;It’s your responsibility to assess the risk in the end.&lt;/p&gt;




&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;If you’re a regular reader, thank you, you’re a big part of the reason I’ve been able to share my life/career experiences with you. &lt;/p&gt;

&lt;p&gt;"Don't miss out" Follow your mentor  on Twitter 👉 &lt;a href="https://twitter.com/TheAnkurTyagi"&gt;TheAnkurTyagi&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;I have written a book for developer growth &amp;amp; shared my 12+ years of experience.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are serious to grow as a developer. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Grab the book now for just $22 &lt;a href="https://gumroad.com/l/nextgendev/"&gt;The Prime Guide&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xw1EN5HR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630061060917/iWEpWZmbS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xw1EN5HR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630061060917/iWEpWZmbS.png" alt="book.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Join 100+ developers who already bought &amp;amp; growing better. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-write-more-about-code-life-and-fitness-in-my-211-newsletter"&gt;
  &lt;/a&gt;
  I write more about code life and fitness in my 2-1-1 newsletter.
&lt;/h3&gt;

&lt;p&gt;I encourage you to sign up for my weekly:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“2-1-1” Friday newsletter:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Check out previous editions: 👇&lt;/p&gt;

&lt;p&gt;It's free.  &lt;a href="https://codelifefitness.com/2-1-1/"&gt;CLF&lt;/a&gt; &lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Github/DevOps status</title>
      <author>Marcel.L</author>
      <pubDate>Fri, 27 Aug 2021 11:43:08 +0000</pubDate>
      <link>https://dev.to/pwd9000/github-devops-status-2eji</link>
      <guid>https://dev.to/pwd9000/github-devops-status-2eji</guid>
      <description>&lt;p&gt;You can check the status of github in real-time, incl. historical data on system performance, follow incidents or scheduled maintenance by going to: &lt;a href="https://www.githubstatus.com/"&gt;https://www.githubstatus.com/&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gXPYSd5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Github-Status-Check/assets/gh_status.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gXPYSd5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Github-Status-Check/assets/gh_status.png" alt="gh_status"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similarly to check the status of Azure DevOps you can use: &lt;a href="https://status.dev.azure.com/"&gt;https://status.dev.azure.com/&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xCJVuFfK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Github-Status-Check/assets/ado_status.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xCJVuFfK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Github-Status-Check/assets/ado_status.png" alt="ado_status"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both status pages also has an RSS feed. In my next article/tutorial I will show how to create an Azure Logic App that will notify you when any of the services become degraded.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#author"&gt;
  &lt;/a&gt;
  &lt;em&gt;Author&lt;/em&gt;
&lt;/h3&gt;


&lt;div class="ltag__user ltag__user__id__620034"&gt;
  
    .ltag__user__id__620034 .follow-action-button {
      background-color: #0cbb58 !important;
      color: #000000 !important;
      border-color: #0cbb58 !important;
    }
  
    &lt;a href="/pwd9000" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Amb4rEJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--L_SDLOmq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/620034/93be2c72-3a13-478e-8af1-a4bedc1b2331.jpeg" alt="pwd9000 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/pwd9000"&gt;Marcel.L&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/pwd9000"&gt;Cloud Solutions Architect and DevOps enthusiast.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>tutorial</category>
      <category>devops</category>
      <category>github</category>
      <category>productivity</category>
    </item>
    <item>
      <title>A Beginners Guide to Falling in Love with Algorithms - Part 1</title>
      <author>Martin Edvardsen</author>
      <pubDate>Fri, 27 Aug 2021 11:04:31 +0000</pubDate>
      <link>https://dev.to/itminds/a-beginners-guide-to-falling-in-love-with-algorithms-part-1-5aid</link>
      <guid>https://dev.to/itminds/a-beginners-guide-to-falling-in-love-with-algorithms-part-1-5aid</guid>
      <description>&lt;p&gt;The purpose of this series of blog posts is to demystify and conceptualize algorithms - more specifically the design and analysis hereof. These blog posts are targeted for software development students early in their studies, as well as students from similar lines of study. &lt;/p&gt;

&lt;p&gt;However, I will also continuously relate the concepts to examples in laymans terms, to include people with no related background, but merely with a desire to learn more about algorithms. A certain level of mathematical understanding is however a prerequisite. &lt;/p&gt;

&lt;p&gt;Some would argue that an understanding of algorithms is not needed to become a programmer. An understanding of algorithms will separate you from these programmers, by allowing you to quantify and compare different approaches to a problem. It will give you a broader vocabulary, or even language, with which you can rightfully reason for the superiority of a solution, or algorithm, for a given problem.&lt;/p&gt;

&lt;p&gt;Most importantly, in terms of everyday programming, it will give you a greater understanding of data structures, which are an essential part of writing efficient code. Are you performing lookups in an array of reference type objects? Convert it to a data structure, which supports constant lookups, such as hash tables, instead of a linear scan. Are you using an array-based list for FIFO operations? Array-based lists mean linear time pop operations. Convert it to a FIFO-based data structure, such as a queue, which has constant time append and pop.&lt;br&gt;
Examples like these show you why you need to familiarize yourself with data structures. Do so using what you learn from these blog posts, and you should see a dramatic improvement in the efficiency of your code. &lt;/p&gt;

&lt;p&gt;This specific blog post will also give you the needed prerequisites for the coming blog posts, in which we will get into the actual design of algorithms. Let's get to it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#algorithmic-complexity"&gt;
  &lt;/a&gt;
  Algorithmic complexity
&lt;/h2&gt;

&lt;p&gt;Complexity is the grounds upon which we discuss algorithms, namely in terms of space and time. Intuitively, we often determine the running time of an algorithm based on the input size. We will get back to this, as we familiarize ourselves with different running times. First off, we need to get acquainted with &lt;strong&gt;asymptotic notation&lt;/strong&gt;.  It gives us a way of expressing the growth rate of a function, or algorithm, in which we focus on the important terms of the function. &lt;/p&gt;

&lt;p&gt;Take a simple quadratic equation, (an&lt;sup&gt;2&lt;/sup&gt; + bn + c), i.e.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;15n&lt;sup&gt;2&lt;/sup&gt; + 10n + 5&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;in which &lt;em&gt;n&lt;/em&gt; defines the size of the input. The running time of this function is bounded by the fastest growing term of this function, which is n&lt;sup&gt;2&lt;/sup&gt;. As the input size &lt;em&gt;n&lt;/em&gt; grows, where a &amp;gt; 0, the term n&lt;sup&gt;2&lt;/sup&gt; will eventually always exceed the size of the other terms and constants, i.e. &lt;em&gt;bn + c&lt;/em&gt; in this case.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NVPxvs_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdf8h3vaiis6m8bur32h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NVPxvs_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdf8h3vaiis6m8bur32h.png" alt="Growth rates"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Using asymptotic notation, we express this by removing coefficients and inferior terms, which leaves us with an approximation of the growth rate of an algorithm. In asymptotic notation, we refer to O(⋅), '&lt;strong&gt;big O&lt;/strong&gt;'-notation, which expresses an upper bound on an algorithm, i.e. the worst case scenario, and Ω(⋅), '&lt;strong&gt;big theta&lt;/strong&gt;'-notation, which expresses a lower bound on an algorithm, i.e. the best case scenarios. In this series of blog posts, we will only focus on the upper bound.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#asymptotic-running-times"&gt;
  &lt;/a&gt;
  Asymptotic running times
&lt;/h2&gt;

&lt;p&gt;Again, let's talk about prerequisites. Complexity refers to both running time and space consumption, however, we will focus on running times, as it is more approachable and intuitive than space complexity.&lt;/p&gt;

&lt;p&gt;The examples of this post will be based on both a list of whole numbers, i.e. an integer array, with a thousand elements and a group of people, for different levels of complexity. Furthermore, for the sake of simplicity and understanding, we assume that one operation takes one second. For our group of people, a question to a member of the group could correspond to an operation. Finally, we will refer to the below graph from &lt;a href="http://www.bigocheatsheet.com"&gt;http://www.bigocheatsheet.com&lt;/a&gt; for a visual comparison of the running times.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xbACB43x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8k0l5gcmhqg2j5e61rh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xbACB43x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8k0l5gcmhqg2j5e61rh.png" alt="Complexity Chart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#o1-constant-time"&gt;
  &lt;/a&gt;
  &lt;strong&gt;O(1)&lt;/strong&gt;. Constant Time
&lt;/h3&gt;

&lt;p&gt;This is referred to as constant time, as it requires a constant amount of operations. The &lt;em&gt;bigocheatsheet&lt;/em&gt; graph refers to this as an 'excellent' running time. Furthermore, an important point here is that the algorithm is independent of the input size, which means the running time does not increase, as the input increases.&lt;/p&gt;

&lt;p&gt;An example of a constant time algorithm is finding the value of an element of our integer array. Given an integer array with a thousand elements, accessing a single element at a certain index is constant, as it requires a single lookup, which corresponds to a single second. &lt;/p&gt;

&lt;p&gt;This example corresponds to finding the age of a specific person from a group, regardless of the size, which only requires a single question to that very person. Simple, right? Moving on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EVp8UIUi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dg9i6oik6xyyyubhusxv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EVp8UIUi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dg9i6oik6xyyyubhusxv.png" alt="Constant time example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-linear-time"&gt;
  &lt;/a&gt;
  &lt;strong&gt;O(n)&lt;/strong&gt;. Linear Time
&lt;/h3&gt;

&lt;p&gt;This is referred to as linear time, as it is linearly dependent on the size of the input. The &lt;em&gt;bigocheatsheet&lt;/em&gt; graph refers to this as a 'fair' running time. As the size of your input increases, so does your number of operations, and therefore your running time. However, remember that due to our '&lt;strong&gt;big O&lt;/strong&gt;'-notation, the running time of a linear time algorithm increases at &lt;strong&gt;most&lt;/strong&gt; at the same rate, as the number of elements of the input - for simplicity our example will use every element of the input.&lt;/p&gt;

&lt;p&gt;An example of a linear time algorithm is finding the minimum value of an unsorted integer array. Given an integer array with a thousand elements, finding the minimum value requires iterating through the entire list, which requires &lt;em&gt;n&lt;/em&gt; operations, which in our case corresponds to a thousand seconds. A dramatic increase in running time, compared to constant time, O(1), with no increase in the input size.&lt;/p&gt;

&lt;p&gt;This example corresponds to finding the youngest person in a group of people, which requires asking every single person of said group, before you are able to conclude, which person is the youngest.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P-WrWneJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4c5lkwk7ix8f3ubmbax.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P-WrWneJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4c5lkwk7ix8f3ubmbax.png" alt="Linear time example"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on2-quadratic-time-and-on-logn-linearithmic-time"&gt;
  &lt;/a&gt;
  &lt;strong&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt;. Quadratic Time and &lt;strong&gt;O(n log(n))&lt;/strong&gt;. Linearithmic Time
&lt;/h3&gt;

&lt;p&gt;We now increase the theoretical complexity considerably. We assess two running times, which are often referred to in job interviews in combination - quadratic (polynomial) time and linearithmic time algorithms, respectively. Interviewers will often pose problems, which seem to have an obvious, intuitive solution in quadratic time, but are often solvable in at least linearithmic time - a dramatic improvement in running time.&lt;/p&gt;

&lt;p&gt;With O(n&lt;sup&gt;2&lt;/sup&gt;), we look at each element a constant amount of times, for each other element, at most, which is a considerable increase in operations, compared to linear time, where we only look at each element a constant amount of times. This is a dramatic increase in running time, which is also apparent in the &lt;em&gt;bigocheatsheet&lt;/em&gt; graph, where we've moved from the yellow (fair), into the red (horrible). In a job interview, such a running time should be your cue to look for a better solution.&lt;/p&gt;

&lt;p&gt;An example of a quadratic time algorithm is finding all pairs in our integer array. Given an integer array of a thousand elements, one would find all pairs by iterating over the entire collection of size &lt;em&gt;n&lt;/em&gt; once for each of the &lt;em&gt;n&lt;/em&gt; elements. This corresponds to &lt;em&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/em&gt; operations, which in the case of the integer array corresponds to a million seconds. A nested loop, in which both the inner and outer loop iterates the &lt;strong&gt;same&lt;/strong&gt; list, is a classic example of a quadratic time algorithm.&lt;/p&gt;

&lt;p&gt;This example translates directly to our group of people, in which we try to find all pairs of people. It should be noted that pairing up with oneself would not be a valid pair, but it is irrelevant for the matter of the example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cWeYQyit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dtq8jq3vav68lkg0poh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cWeYQyit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dtq8jq3vav68lkg0poh.png" alt="Quadratic time example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For O(n log n), first we note, that we typically refer to &lt;em&gt;log2(n)&lt;/em&gt;, as we discuss logarithms in algorithms. The graph places this between linear and quadratic time, at a 'bad' running time. If needed, please do refresh your memory on logarithms - the kryptonite of exponentials - before continuing with the next blogpost. The most common linearithmic time algorithms are definitely sorting algorithms. Replacing a quadratic time sorting algorithm with one of linearithmic time is an example of said improvement of running time.&lt;/p&gt;

&lt;p&gt;An example of a linearithmic time algorithm is mergesort. In short, given our integer array with a thousand elements, one would compare pairwise consecutive integers &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;((e1, e2), (e3, e4), (e5, e6) ...)&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and then merge exponentially larger sets of integers until finally combining the two halves of the array. Don't worry about the details of the algorithm - we'll get into the algorithm in the next blogpost.&lt;/p&gt;

&lt;p&gt;This algorithm and example would also be applicable for sorting a group of people by age, but quite hard to explain in layman's terms. For a more hands-on example, however, I strongly recommend this clip, &lt;a href="https://www.youtube.com/watch?v=XaqR3G_NVoo"&gt;https://www.youtube.com/watch?v=XaqR3G_NVoo&lt;/a&gt;, in which Sapientia University visualizes the mergesort algorithm by means of Transylvanian-saxon folk dance. If nothing, just do it for the laugh of it.&lt;/p&gt;

&lt;p&gt;The important thing to notice here is the dramatic improvement in running time. A quadratic time algorithm would sort an array in &lt;em&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/em&gt; operations, i.e. a million operations or seconds in our case; the linearithmic algorithm only requires &lt;em&gt;n log n&lt;/em&gt; operations, i.e. ten thousand operations or seconds. This is a reduction from eleven days to two hours!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ologn-logarithmic-time"&gt;
  &lt;/a&gt;
  &lt;strong&gt;O(log(n))&lt;/strong&gt; Logarithmic Time
&lt;/h3&gt;

&lt;p&gt;We refer to this as logarithmic time. Returning to the &lt;em&gt;bigocheatsheet&lt;/em&gt; graph, we finish back where we started, an 'excellent' running time, even though the running time is dependent on the input size, &lt;em&gt;n&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;An example of a logarithmic time algorithm is binary search for ordered collections. Given our integer array, you search for an integer &lt;em&gt;i&lt;/em&gt; of the array, by continuously looking at the element at the center of the array, and doing one of three things. If the value of the middle element &lt;em&gt;m&lt;/em&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Is the integer &lt;em&gt;i&lt;/em&gt;, we have found the integer.&lt;/li&gt;
&lt;li&gt;Is greater than the integer &lt;em&gt;i&lt;/em&gt;, we repeat the process for the lower half of the array.&lt;/li&gt;
&lt;li&gt;Is less than the integer &lt;em&gt;i&lt;/em&gt;, we repeat the process for the upper half of the array.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It should be noted, that other strategies exist for picking the pivot other than choosing the middle element. This is irrelevant for the purpose of this example. It is important to notice, that as a property of logarithms, we need to do this no more than &lt;em&gt;log2(n)&lt;/em&gt; times, as this would leave us with a single element. To figure out, why this is true, try to prove to yourself, that &lt;em&gt;x&lt;/em&gt; in &lt;em&gt;log2(n) = x&lt;/em&gt;, represents the number of times, we can half our input size, and that &lt;em&gt;n&lt;/em&gt; in &lt;em&gt;2&lt;sup&gt;x&lt;/sup&gt; = n&lt;/em&gt;, represents the size of an array you get by doubling &lt;em&gt;x&lt;/em&gt; times.&lt;/p&gt;

&lt;p&gt;This example corresponds to having a thousand people line up in order of their salary, and looking for the person closest to a ridiculously specific yearly salary, such as 359344,297 DKK. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hORr0gs9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ciweveljea97kyqhk1l5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hORr0gs9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ciweveljea97kyqhk1l5.png" alt="Logarithmic time example"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;By following the three steps above, you only need to ask a maximum of &lt;em&gt;log2(n) + 1&lt;/em&gt; people, in this case eleven, to come to a conclusion. Note, that the last question (i.e. the + 1) comes from asking the last person to compare him with his "neighbours".&lt;/p&gt;

&lt;p&gt;Again, the important thing to notice is how logarithms scale. If we increase the number of people to a million people, the amount of needed questions only increases to twenty. This explains, why it is depicted on top of constant time algorithms in the &lt;em&gt;bigocheatsheet&lt;/em&gt; graph, as it almost seems to be independent of the input size, &lt;em&gt;n&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-to-come"&gt;
  &lt;/a&gt;
  What's to come?
&lt;/h2&gt;

&lt;p&gt;With the basics down, we will get into the design and analysis of algorithms in the next two blog posts. We will do so by becoming acquainted with three families of algorithms - greedy algorithms, dynamic programming algorithms, and divide and conquer algorithms. This will lead us to the final blog post, which will discuss the subject of my own master thesis, which is based on randomized algorithms - more specifically differential privacy.&lt;/p&gt;

&lt;p&gt;You made it this far. By now, you should already feel more comfortable discussing algorithms and data structures in future projects. We've covered the basics, which means, you are more than qualified for reading the rest of the posts. I hope you do!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=XaqR3G_NVoo"&gt;https://www.youtube.com/watch?v=XaqR3G_NVoo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bigocheatsheet.com/"&gt;https://www.bigocheatsheet.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Algorithm Design, Kleinberg and Tardos&lt;/li&gt;
&lt;li&gt;Coding Blocks, episode 'What is Algorithmic Complexity?'&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>algorithms</category>
    </item>
    <item>
      <title>10 FREE Udemy courses for you to learn JavaScript</title>
      <author>Pasca Vlad</author>
      <pubDate>Fri, 27 Aug 2021 10:54:53 +0000</pubDate>
      <link>https://dev.to/pascavld/10-free-udemy-courses-for-you-to-learn-javascript-2hgd</link>
      <guid>https://dev.to/pascavld/10-free-udemy-courses-for-you-to-learn-javascript-2hgd</guid>
      <description>&lt;p&gt;&lt;em&gt;If you found value in this thread you will most likely enjoy my tweets too so make sure you follow me on &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt;  for more information about web development and how to improve as a developer. This article was first published on my &lt;a href="https://vladpasca.hashnode.dev/"&gt;Blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Code Your First Game: Arcade Classic in JavaScript on Canvas&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/code-your-first-game/"&gt;https://www.udemy.com/course/code-your-first-game/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Programming for Entrepreneurs - JavaScript&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/programming-for-entrepreneurs-javascript/"&gt;https://www.udemy.com/course/programming-for-entrepreneurs-javascript/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start with Javascript (2021)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/start-javascript/"&gt;https://www.udemy.com/course/start-javascript/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Javascript Programming For Beginners (2021)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/javascript-programming-for-beginners/"&gt;https://www.udemy.com/course/javascript-programming-for-beginners/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;JavaScript for beginners&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/javascript-darwish/"&gt;https://www.udemy.com/course/javascript-darwish/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fundamentals of JavaScript&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/fundamentals-of-javascript-mask/"&gt;https://www.udemy.com/course/fundamentals-of-javascript-mask/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Javascript Array Methods&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/javascript-array-methods/"&gt;https://www.udemy.com/course/javascript-array-methods/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Pure JavaScript Calculator Code ES6 Learn JavaScript&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/javascript-code-exercise/"&gt;https://www.udemy.com/course/javascript-code-exercise/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;JavaScript for QA Engineers and SDETs&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/javascript-for-qa-engineers-and-sdets/"&gt;https://www.udemy.com/course/javascript-for-qa-engineers-and-sdets/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Learn JavaScript, Get Hired | The Essentials&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/learn-javascript-get-hired-essentials/"&gt;https://www.udemy.com/course/learn-javascript-get-hired-essentials/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I hope found this useful and if you did please let me know. If you have any questions feel free to DM me on  &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to Create Multilingual Website in Laravel 8</title>
      <author>avani-trivedi</author>
      <pubDate>Fri, 27 Aug 2021 10:47:09 +0000</pubDate>
      <link>https://dev.to/avanitrivedi/how-to-create-multilingual-website-in-laravel-8-2ef8</link>
      <guid>https://dev.to/avanitrivedi/how-to-create-multilingual-website-in-laravel-8-2ef8</guid>
      <description>&lt;p&gt;Hi Dev,&lt;/p&gt;

&lt;p&gt;In this tutorial I will share with you how to create a multilingual website in laravel 8 application, I will show an example of laravel 8 multiple languages.&lt;/p&gt;

&lt;p&gt;Here, I will give you a full example of how to laravel 8 multilanguage with language dropdown or laravel 8 multiple language websites as below so follow my all steps.&lt;/p&gt;

</description>
      <category>laravel</category>
    </item>
    <item>
      <title>Software development for portable gadgets</title>
      <author>Victor Quan Lam</author>
      <pubDate>Fri, 27 Aug 2021 10:25:10 +0000</pubDate>
      <link>https://dev.to/victorquanlam/software-development-for-portable-gadgets-lib</link>
      <guid>https://dev.to/victorquanlam/software-development-for-portable-gadgets-lib</guid>
      <description>&lt;p&gt;A portable communication device is a pocket-sized gadget that a person carries with them. They usually have a touch-screen display or a small keyboard. The input and output of a personal digital assistant (PDA) are merged into a touchscreen device. Cellphones and PDAs are popular among folks who need the aid and conveniences of a traditional computer but cannot take one with them. &lt;br&gt;
We want to think that the humanity has always been forward-thinking. However, for the majority of the twentieth century, innovation was a slow and steady process. It was the result of individual brilliance or think tanks. For the most part, clever people innovate, and the general public gradually adopted the concept. With the development of the computer, the mainstream's love affair with innovation began. It gained traction with the invention of the Internet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smart Gadgets:&lt;/strong&gt;&lt;br&gt;
A smart gadget is an electronic device that communicates with other networks or devices via wireless protocols such as Wi-Fi, Bluetooth, NFC, 3G, and so on. They have the ability to work autonomously as well as collaboratively. Modern technology has transformed previous technology and has had a significant impact on everyone's lives. In our daily lives, we use smart devices in a variety of ways. Smart key chains, smart bands, smart watches, smartphones, tablets, and phablets are some common examples of smart electronics.&lt;br&gt;
It is also capable of artificial intelligence. Smart gadgets are known to function in a variety of ways in a given setting. They have many qualities and may be adapted to the computing environment, the human environment, and the physical world. A smartphone is one of the suggested gadgets that everyone should have in today's environment. Smartphone technology has radically altered the global landscape.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Impact of Technology on Human:&lt;/strong&gt;&lt;br&gt;
The way humans connect with one another has been transformed by technology. Various forms of human communication, helped by technology, have been interwoven into people's life. This has an impact on how individuals and groups interact and communicate with one another. Technology has both positive and harmful effects on people in society. &lt;br&gt;
How we can improve performance of Gadget with Software?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cleaning Gadget:&lt;/strong&gt;&lt;br&gt;
Dirt accumulates on technological devices over time. Dirt is not only ugly, but it may also render gadgets inefficient and dangerous. For example, dust in a computer chassis can cause it to overheat. This causes fans to work faster to disperse heat, requiring more electricity. Most gadget makers provide detailed instructions on how to clean their products. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deleting Unnecessary Files:&lt;/strong&gt;&lt;br&gt;
We wind up acquiring a large number of unneeded files on our storage devices over time. This has the disadvantage of making computing systems slower and files more jumbled. You can manually sort through files and delete those that are no longer needed. You can also use third-party software to sort files based on factors such as frequency of use or date of update. This will give you a good indication of which files you rarely use and can safely delete.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scanning for Malware:&lt;/strong&gt;&lt;br&gt;
Despite our best efforts to keep systems safe, dangerous software occasionally finds its way into our computing devices. This demands regular scans to detect and remove viruses and malware. Most anti-virus and/or anti-malware products allow users to schedule complete scans at regular intervals. Even if you are confident that your system is secure, enable this setting.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updating Software:&lt;/strong&gt;&lt;br&gt;
Because developers are always adding new features such as security and performance, the software we use in computers, cellphones, and other devices is incredibly dynamic. The quick evolution is advantageous in that it improves user experience and protects against malicious entities. This necessitates that you keep the software on your devices up to date.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accelerometers in Smartphones:&lt;/strong&gt;&lt;br&gt;
The twenty-first century ushers in a new era of technological advancement. Many engineers and scientists' technological creations have benefitted the globe in important ways, such as smartphones, cameras, laptop computers, and many more electrical gadgets that are incredibly valuable to humans and are used in large quantities around the world. The accelerometer is made up of several separate elements that work in a variety of ways.&lt;br&gt;
It is utilized not just in cellphones, but also in many other vital items including as planes, computers, iPhones, tablets, and televisions, all of which are basic human requirements in today's society. Accelerometers are also employed to guarantee that images are shown properly - portrait or landscape - depending on how the phone is held. Accelerometers are increasingly being employed as a form of user input, most notably in current games where tilting and rotating the handset can direct onscreen action. Not only do accelerometers have several applications in business and science that benefit society.&lt;/p&gt;

</description>
      <category>research</category>
      <category>portablegadgets</category>
    </item>
  </channel>
</rss>
