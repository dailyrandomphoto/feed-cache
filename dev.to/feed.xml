<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Parte 2 Mi nueva startup - Mensajería y paquetería express en Mérida, Yucatán</title>
      <author>g7b</author>
      <pubDate>Tue, 12 Oct 2021 02:12:11 +0000</pubDate>
      <link>https://dev.to/g7b/parte-2-mi-nueva-startup-mensajeria-y-paqueteria-express-en-merida-yucatan-33o5</link>
      <guid>https://dev.to/g7b/parte-2-mi-nueva-startup-mensajeria-y-paqueteria-express-en-merida-yucatan-33o5</guid>
      <description>&lt;p&gt;Seguimos continuando...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ya-esta-lista-la-primera-versi%C3%B3n-funcional-mvp-de-la-plataforma-pero-todav%C3%ADa-faltan-bastantes-cosas-m%C3%A1s"&gt;
  &lt;/a&gt;
  Ya esta lista la primera versión funcional (MVP) de la plataforma pero todavía faltan bastantes cosas más.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#el-nombre-y-dominio-ya-esta-uayenvios"&gt;
  &lt;/a&gt;
  El nombre y dominio ya esta: &lt;a href="https://www.uayenvios.com"&gt;Uayenvios&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Así se ve la app:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FyI6f_HR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lko9fxq5ztaxcgkp6d4r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FyI6f_HR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lko9fxq5ztaxcgkp6d4r.png" alt="App"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;y la landing:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vb7HPmjt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0gehsdwthp8wt9gu6911.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vb7HPmjt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0gehsdwthp8wt9gu6911.png" alt="www.uayenvios.com_top"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VRiyALZy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utgrdar6f3duzivi32ri.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VRiyALZy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utgrdar6f3duzivi32ri.png" alt="www.uayenvios.com_mid"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sbYGiGbv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2978iqadrzx08rki6tbf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sbYGiGbv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2978iqadrzx08rki6tbf.png" alt="www.uayenvios.com_bottom"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;La plataforma fue creada con NextJS principalmente. Para el backend utilizamos el CDK de AWS y los servicios utilizados fueron AppSync para el BAAS, DynamoDB como base de datos, Cognito para la gestión y autorización de usuarios.&lt;br&gt;
Para los mapas utilizamos Mapbox y para la búsqueda de direcciones lo que se uso fue la API de Google Maps de Autocomplete, para el cálculo de las rutas y distancia utilizamos el servicio de Amazon Location. &lt;/p&gt;

&lt;p&gt;Me tomo casi 8 días de desarrollo pero con esto ya se tiene la base para meter las funciones que se vayan requiriendo e integrar nuevas aplicaciones.&lt;/p&gt;

&lt;p&gt;Ya también se adquirieron 2 motocicletas propias para poder ir comprando las cajas de reparto y brandearlas. &lt;br&gt;
Se esta definiendo el uniforme que deberán portar los mensajeros, para hacer entregas siempre presentables.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#algunas-cosas-pendientes-para-comenzar"&gt;
  &lt;/a&gt;
  Algunas cosas pendientes para comenzar:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Agregar términos y condiciones, ya las esta trabajando un abogado para que esta parte este en orden.&lt;/li&gt;
&lt;li&gt;Una página de ayuda y preguntas frecuentes.&lt;/li&gt;
&lt;li&gt;Agregar una burbuja en la parte inferior con el WhatsApp para estar en contacto en tiempo real de forma fácil por cualquier duda o comentario.&lt;/li&gt;
&lt;li&gt;Crear las redes sociales.&lt;/li&gt;
&lt;li&gt;Mejorar y testear el SEO de la landing page.&lt;/li&gt;
&lt;li&gt;Definir las campañas y publicaciones en redes sociales.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#de-parte-de-la-aplicaci%C3%B3n"&gt;
  &lt;/a&gt;
  De parte de la aplicación:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Falta desarrollar la app para los mensajeros, en la cual se reciban las entregas asignadas.&lt;/li&gt;
&lt;li&gt;En esta app para mensajeros, ellos podrán llevar el control de sus entregas aceptadas, pendientes, rechazadas, etc. El control de pagos y datos personales. &lt;/li&gt;
&lt;li&gt;La app servirá para que los clientes puedan monitorear sus entregas en tiempo real. &lt;/li&gt;
&lt;li&gt;Panel de facturación de entregas y facturación automática cuando el cliente ingrese los datos desde la solicitud del servicio.&lt;/li&gt;
&lt;li&gt;Mejorar la interfaz para que ademas de monitorear en mapa en tiempo real la entrega, también se pueda ver diferentes status de la entrega de forma más visual.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por el momento es todo.&lt;/p&gt;

&lt;p&gt;Espero poder comenzar a promocionar el servicio para la siguiente semana.&lt;/p&gt;

</description>
      <category>startup</category>
      <category>webdev</category>
      <category>nextjs</category>
      <category>news</category>
    </item>
    <item>
      <title>How to add web push notifications to your Next.js project with One Signal</title>
      <author>Jerónimo Cosío</author>
      <pubDate>Tue, 12 Oct 2021 01:37:56 +0000</pubDate>
      <link>https://dev.to/jerocosio/how-to-add-web-push-notifications-to-your-next-js-project-with-one-signal-5g39</link>
      <guid>https://dev.to/jerocosio/how-to-add-web-push-notifications-to-your-next-js-project-with-one-signal-5g39</guid>
      <description>&lt;p&gt;I'm sure that by now you've seen the web push notifications that you get in certain websites, but maybe you aren't sure how to add them to your own. They're called web push notifications and they can help you to share relevant information to your users, or updates they're interested in even after they have left your site. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jKmL727A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yi5xxf9q9fv3xyzi9n93.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jKmL727A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yi5xxf9q9fv3xyzi9n93.png" alt="Example of web push notifications"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To understand better on the browser side, this push notifications are part of the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/notification"&gt;Notification Web APIs&lt;/a&gt;, I would suggest to dive deep into the API if you want to know more details about it. But today I want to show you how to use &lt;a href="https://onesignal.com/"&gt;One Signal&lt;/a&gt; in your &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; project to quickly start sending web push notifications with very few lines of code, in just a couple of minutes and for free! &lt;/p&gt;

&lt;p&gt;I won't get into the details of setting up, running and deploying a Next.js project, so I'll assume that you already have a working Next.js site. If you don't have your Next.js project running I would suggest to start there first, please check out this &lt;a href="https://nextjs.org/docs/getting-started"&gt;amazing tutorial on the official docs&lt;/a&gt;. (For the deployment I'll be using &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt;, but you can use any other service.)&lt;/p&gt;

&lt;p&gt;We'll be creating a website called &lt;a href="https://woof.vercel.app/"&gt;Woof&lt;/a&gt;, which is inspired by a 'startup' created in &lt;a href="https://www.youtube.com/watch?v=bjaZtXRfJ5o"&gt;The Office&lt;/a&gt;. This site will send a message to all of the users that subscribed and accepted to receive notifications through their browser, so every time any user sends a message through the UI, all the subscribers will get it. I know it's not the best use case, but I think it's easy enough for everyone to understand how to use push notifications and One Signal's SDK. You can also see the finished code for this post on my &lt;a href="https://github.com/jerocosio/woof"&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But enough chit chat lets dive right in, first we need to create a &lt;a href="https://onesignal.com/"&gt;new account in One Signal&lt;/a&gt; and validate our email. After that we need to specify the name and the platform that we'll be sending push notifications to, for this example we'll be using 'Web'.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UF9CGeut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7h5xmwdnmzvdc6pwknb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UF9CGeut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7h5xmwdnmzvdc6pwknb.png" alt="One Signal set up"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the setup we'll choose 'Typical Site' as we want to implement it fast and we're using Next.js which allows us to add our own JavaScript, on the second step it's really important to add the specific &lt;strong&gt;site url&lt;/strong&gt; where the push notifications are going to be sent to, if you're still not sure which one to use, or you don't have a URL you can add &lt;code&gt;localhost&lt;/code&gt; or similar, and son't worry, this can be edited later. &lt;/p&gt;

&lt;p&gt;If you want, add an icon to be used on the notifications. On the third step you can edit the prompt message that your users will see to be subscribed to your notifications. Optionally you can create a welcome message and set up some advanced setting on step 4 &amp;amp; 5, but I'll skip that for now.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I-23SSMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gxqmhgzddz4n1dqwkrfp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I-23SSMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gxqmhgzddz4n1dqwkrfp.png" alt="One Signal web configuration panel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gE4YYGby--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/455fhqvb3pph246z1ie2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gE4YYGby--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/455fhqvb3pph246z1ie2.png" alt="One Signal permission prompt editor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After configuring the first steps, we'll get to a screen where we can download the One Signal SDK files, it's important to download them, unzip them and copy/transfer the &lt;code&gt;OneSignalSDKUpdaterWorker.js&lt;/code&gt; and &lt;code&gt;OneSignalSDKWorker.js&lt;/code&gt; files into the &lt;code&gt;public&lt;/code&gt;directory of your Next.js project.&lt;/p&gt;

&lt;p&gt;On that screen we're going to find some JavaScript code to add to our site, &lt;strong&gt;BUT&lt;/strong&gt; as we're using Next.js/React we need to set it up a little different and the relevant information for us there is the &lt;strong&gt;App ID&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To add the One Signal JavaScript SDK to our site we need to edit the &lt;code&gt;&amp;lt;Head&amp;gt;&amp;lt;/Head&amp;gt;&lt;/code&gt; component on each page where we want to use it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//...project-name/pages/index.js&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Title&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;website&lt;/span&gt; &lt;span class="nx"&gt;here&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/title&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://cdn.onesignal.com/sdks/OneSignalSDK.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
&lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Head&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we want to initiate One Signal after the website has been loaded, to do that we'll use the &lt;a href="https://reactjs.org/docs/hooks-effect.html"&gt;useEffect&lt;/a&gt; hook from react like so :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//...project-name/pages/index.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;resultApi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setResultApi&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OneSignal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OneSignal&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="nx"&gt;OneSignal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;OneSignal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;appId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ONE-SIGNAL-APP-ID&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;notifyButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;enable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;

        &lt;span class="na"&gt;allowLocalhostAsSecureOrigin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OneSignal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that you need to edit the &lt;code&gt;appId: "ONE-SIGNAL-APP-ID",&lt;/code&gt;line with your own App ID.&lt;/p&gt;

&lt;p&gt;And with that we're basically done with the implementation. After adding this code to our page component, you should be able to visit the Site URL specified in the configuration, and the notification prompt should appear for you to give permission and receive push notifications. You can look at a red bell in the lower right part of the site to debug the notifications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zF0HO9Cx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7q0dxszhwpc3zuhh0t3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zF0HO9Cx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7q0dxszhwpc3zuhh0t3.png" alt="Subscription button for Woof"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once a user subscribes and accepts to receive notifications they'll start appearing on your One Signal dashboard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IodahpqA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0pwmldasr6ihmcym3p8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IodahpqA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0pwmldasr6ihmcym3p8.png" alt="One Signal message audience"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a final step let's send our first notification, we'll create it through the One Signal dashboard by clicking on Messages on the top nav bar, and then the '+ New Push' button on the dashboard.&lt;/p&gt;

&lt;p&gt;As you can see, you can add all the relevant information for the push notification like: audience, title, body, image, URL to launch when clicked, etc... and if needed, you can schedule the notification to be sent at a specific time. After you send it your subscribed, users should receive the notification directly in their browser/OS notifications.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kCuv4ic4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/65hpx3dssn4mkh85zlip.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kCuv4ic4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/65hpx3dssn4mkh85zlip.png" alt="Creating a notification from the manager on One Signal"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xBI6XSRT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwk8aw4zuxvyu2lmswik.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xBI6XSRT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwk8aw4zuxvyu2lmswik.png" alt="Example pushed notification received"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it! In just a couple of minutes and with minimum set-up and lines of code we can start sending notifications to all of our users to share relevant information for them.&lt;/p&gt;

&lt;p&gt;Thank you for reading, if this post gets enough traffic/attention, I'll create a second part to show how to use the One signal REST API to start sending notifications directly from our server instead of having to get into the One Signal interface to send each one of them, so if you enjoyed this post, please react to it, or comment if it's something that you may be interested in :).&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>notifications</category>
      <category>onesignal</category>
      <category>webpush</category>
    </item>
    <item>
      <title>Product Developers’ guide to customizing data for AI — Part 1: Combine dataframes</title>
      <author>Mage</author>
      <pubDate>Tue, 12 Oct 2021 01:14:54 +0000</pubDate>
      <link>https://dev.to/mage_ai/product-developers-guide-to-customizing-data-for-ai-part-1-combine-dataframes-59j6</link>
      <guid>https://dev.to/mage_ai/product-developers-guide-to-customizing-data-for-ai-part-1-combine-dataframes-59j6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;When working with AI, it’s common to have too much data; especially when training models. In this guide, we’ll cover how to look at relationships made when combining dataframes using &lt;strong&gt;concat&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Before we begin&lt;/li&gt;
&lt;li&gt;Relationships&lt;/li&gt;
&lt;li&gt;Fold&lt;/li&gt;
&lt;li&gt;Concat&lt;/li&gt;
&lt;li&gt;Clean up&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Welcome to the 1st part of the “Product developers’ guide to customizing data in AI”. In this series, we’ll go over intermediate concepts and run through examples using Pandas. We’ll start by looking at a common dataset about email information and progressively tailor information. By the end of the series, you’ll be ready to tackle designing machine learning datasets for training machine learning models.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-we-begin"&gt;
  &lt;/a&gt;
  Before we begin
&lt;/h2&gt;

&lt;p&gt;In this guide, we’ll be using the &lt;a href="https://app.box.com/s/tcloz4exgtckf4ed5yx1ykcv9tio3su0/file/850326590682"&gt;email content dataset&lt;/a&gt; along with Google Collab. We’ll import the dataset, and chop it down. If you need a refresher on anything mentioned above, please refer back to part 1 of the &lt;a href=""&gt;beginner’s guide&lt;/a&gt;.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---adVjqHW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k254xt7zgyg79rod48nt.png" alt="image"&gt;&lt;em&gt;email_content dataframe&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#relationships"&gt;
  &lt;/a&gt;
  Relationships
&lt;/h2&gt;

&lt;p&gt;To understand how to customize data in AI, we need to dive deeper into relations within set theory. To start off, we’ll look at the 2 most basic relationships, unions and intersections. Think of multiple datasets, and within each, there may or may not be duplicate values that are mutual to another dataframe.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#union"&gt;
  &lt;/a&gt;
  Union
&lt;/h3&gt;

&lt;p&gt;Unions are useful for a general outlook of all the values removing duplicates.&lt;/p&gt;

&lt;p&gt;For a union, this is a combination of all the values, and returns all values with the mutual values listed exactly once.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YzAC5fyK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3m1bwkgg5plcinic3gr0.png" alt="image"&gt;&lt;em&gt;The area of all the sets (Source: mychartguide)&lt;/em&gt;
&lt;/center&gt;
&lt;h3&gt;
  &lt;a href="#intersection"&gt;
  &lt;/a&gt;
  Intersection
&lt;/h3&gt;

&lt;p&gt;Intersections are useful for finding values that are found in all the dataset&lt;/p&gt;

&lt;p&gt;But for an intersection, it takes the combination of all the values, and only returns the mutual values.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7IhB-i6_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxqepn37eagyaldkw8m5.png" alt="image"&gt;&lt;em&gt;The overlapping area of two sets (Source: mychartguide)&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#fold"&gt;
  &lt;/a&gt;
  Fold
&lt;/h2&gt;

&lt;p&gt;To start off let’s follow a common practice among data scientists to “fold” the data. This is especially useful for training machine learning models as it breaks down the data for training, testing, and validation sets. Let’s start with a fold of 2 parts, or a half on our email_content dataset. Imagine the dataset as a piece of paper. After folding the piece of paper in half, it breaks it down into exactly 2 pieces.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I8T1Povo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdcf5pgxzc87afqd3wdd.png" alt="image"&gt;&lt;em&gt;Two ways to fold: Hotdog or Hamburger (Source: Elasticity)&lt;/em&gt;
&lt;/center&gt;
&lt;h3&gt;
  &lt;a href="#hotdog-style"&gt;
  &lt;/a&gt;
  Hotdog Style
&lt;/h3&gt;

&lt;p&gt;One way to fold paper is hotdog style, by folding horizontally through the center. In Pandas, this is accomplished by taking the maximum length of the rows and dividing it into segments. For our dataset, let’s take an arbitrary number to section it by. There are other alternatives, but iloc and loc are the simplest and covered in the beginner’s guide.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qn4vcSpr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jk8do6xyox773d16rbq.png" alt="image"&gt;&lt;em&gt;Fold it using into rows 0 to 60 and rows 50 to 100&lt;/em&gt;
&lt;/center&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HkbF1Lzs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d86oranx4oms8d8elew.png" alt="image"&gt;&lt;em&gt;1st dataframe is from row 1 to 60&lt;/em&gt;
&lt;/center&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zeVyBjT9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ex8znovai00wx3uwb656.png" alt="image"&gt;&lt;em&gt;2nd dataframe is from row 51 to 100&lt;/em&gt;
&lt;/center&gt;
&lt;h3&gt;
  &lt;a href="#hamburger-style"&gt;
  &lt;/a&gt;
  Hamburger Style
&lt;/h3&gt;

&lt;p&gt;Alternatively, we can fold it hamburger style, by folding vertically through the center. In Pandas, this is done by splitting the columns into multiple parts using loc to select specific columns. Here we have chosen to split the email columns based on its relevance into 2 parts. Email content is broken down into email information readable for humans, and email information readable by a machine.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fa53johs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3oed98owna53nz29g6w.png" alt="image"&gt;&lt;em&gt;Include all the rows, but only specific columns in each&lt;/em&gt;
&lt;/center&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AYjl74bm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aeoup5c925d4j9ce5dgm.png" alt="image"&gt;&lt;em&gt;1st dataframe contains data useful for a machine&lt;/em&gt;
&lt;/center&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vGgZVfFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oikainiylpeaylf0ihky.png" alt="image"&gt;&lt;em&gt;2nd dataframe contents are easily understandable by a human&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#concat"&gt;
  &lt;/a&gt;
  Concat
&lt;/h2&gt;

&lt;p&gt;Using the folded data, let’s put them together using concat. Concat is very versatile and has multiple functionality when performing a union or intersection operation on multiple datasets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hotdog"&gt;
  &lt;/a&gt;
  Hotdog
&lt;/h3&gt;

&lt;p&gt;Let’s start by applying concat on the folded hotdog style datasets. Using concat, we union the datasets and get back the original. By default, concat is a union operation.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FbRH-MOP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3grk10iukarxeiyme9f6.png" alt="image"&gt;&lt;em&gt;Use concat to get the union of two datasets resulting in 50 + 60 (110) rows&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Then we apply concat using the intersection, we get the overlapping indexes. To get the best result, we use axis=1 along the columns.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UN84Uxzm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iylo64vzvy4c9e1lpm1m.png" alt="image"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pd31Q9C9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fnnwn5k4iuj67r9drut1.png" alt="image"&gt;&lt;em&gt;Use concat to get the intersection of two datasets, rows 51–60&lt;/em&gt;
&lt;/center&gt;
&lt;h3&gt;
  &lt;a href="#hamburger"&gt;
  &lt;/a&gt;
  Hamburger
&lt;/h3&gt;

&lt;p&gt;For hamburger style, the columns don’t match and performing a union gives a less desirable result filled with null values. We also use axis=1 again since we want to see the columns.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--89Sr44L0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwhmumnrq62wnm5cq93l.png" alt="image"&gt;&lt;em&gt;Combine all the values in both columns&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Then for an intersection, we want to look at the intersection to grab the overlapping rows.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OVcfPXEQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmzrxrvmmoi9e77aoosn.png" alt="image"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bDTC-XwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yuquh7xt8y2skmnf4hvu.png" alt="image"&gt;&lt;em&gt;The “created at” column is shared between both dataframes&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#clean-up"&gt;
  &lt;/a&gt;
  Clean Up
&lt;/h2&gt;

&lt;p&gt;A lot of the data is duplicated, such as column names or row entries. This is because unlike sets, which cannot contain duplicates, a dataframe is allowed to have as many duplicate values. Luckily, Pandas has the drop_duplicates function to convert our results into its set theory result, while remaining as a dataframe.&lt;/p&gt;

&lt;p&gt;Applying drop_duplicates to the union, returns all values exactly once. Thus, returning the original email_content dataframe or set union.&lt;br&gt;
&lt;/p&gt;
&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pd8udZ6k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78g8ur8s2eb800g3lf4h.png" alt="image"&gt;&lt;em&gt;Set union, results in the original dataset&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Applying drop_duplicates to the intersection, returns the overlapping values exactly once. Thus, the result is the set intersection&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jfsz4_vn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9r28o4zhkefvnh6xqp7r.png" alt="image"&gt;&lt;em&gt;Set intersection, results in the created_at column&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We’ve established a point to begin diving into relationships between datasets, a crucial component for customizing data in machine learning. We covered folding, a technique used immensely in data science to split data, and concat, to combine data by finding matching values to create unions and intersections. In the rest of this series, we’ll be looking at how we can remove extras by using join and merge instead of drop_duplicates and establish relationships based on exclusion rather than inclusion.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>python</category>
      <category>deved</category>
    </item>
    <item>
      <title>Navigating Callback Functions in a Simple JavaScript Project</title>
      <author>Katie Hodgkinson</author>
      <pubDate>Tue, 12 Oct 2021 00:36:51 +0000</pubDate>
      <link>https://dev.to/katiekatiekatiee/navigating-callback-functions-in-a-simple-javascript-project-2cei</link>
      <guid>https://dev.to/katiekatiekatiee/navigating-callback-functions-in-a-simple-javascript-project-2cei</guid>
      <description>&lt;p&gt;My first JavaScript project is done. At least in its first final draft, that is. I chose a playlist curator concept wherein anyone viewing the application in the browser is able to view running lists of songs, organized by their genre into playlists. Anyone viewing the application may also add songs to any of the lists as well as delete them. This post is going to provide an overview of my favorite concept in Javascript so far: event listeners. &lt;/p&gt;

&lt;p&gt;In my playlist application, we have a single-page app that displays a full list of playlists that have been saved to the database (a Rails API I created on PostgreSQL for deployment reasons later on). A greeting and the list of playlists are all a viewer can see at first glance. However, each playlist is instantiated with an event listener waiting for a "click." This click triggers another function and that function carries out a process and so on. Let's take a look:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--icKLHEmV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njkegfgxvqr9p7k87umc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--icKLHEmV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njkegfgxvqr9p7k87umc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, right in the playlist constructor function, I am assigning an event listener, by way of a callback function. Callback functions have also proven very useful for the technical reasons of course, but particularly for me they assist with organization. So, moving down to the callback function, I am displaying the list of each playlist's respective songs using the .filter() method and also populating the form for a new song to be added.&lt;/p&gt;

&lt;p&gt;Since the song is being added within its respective playlist, it was important for me to determine how to build this association on instantiation of a new song. The callback function I mentioned previously is the gateway to the form for the new song. So, before going further, it is important to note that the form I have created for a new song lives inside of a static function with a few main purposes: the first purpose being to render the form which also begins to handle the submitting of the information, and two event listeners, one for the click on submit, and the other for a click the inverse functionality which is deleting a song entry. &lt;/p&gt;

&lt;p&gt;So now, with all of this we have the data being displayed, a form for a new entry being rendered, and the different kinds of clicks being handled. Here is what is happening behind the "submit" event handler:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tkNxaSun--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clg4ck1wqgpchp0pe6ed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tkNxaSun--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clg4ck1wqgpchp0pe6ed.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is where the playlist-song association is being made without any user intervention. With some DOM manipulation, I was able to locate the elements necessary for assigning the attributes to a newly entered song. With this information, a song can be added to a playlist successfully and is able to be viewed by other users, without having to refresh the page. On "submit," the song is attached to the DOM under its respective playlist as well as an associated "delete" button.&lt;/p&gt;

&lt;p&gt;What is also happening on the frontend is the configuration of this newly-entered object. The method I named createSong() takes on this challenge. I pass through the attributes collected from the form (which I saved as variables), and then a fetch request is required to communicate with the database, ensure the data entered is valid and meets parameter requisites, and save the appropriate data. The fetch request in createSong() (my create function) is rather simple in that the frontend signals the back, instantiates the new object with the provided information, and provided all goes according to plan, carries out any additional functionality appropriate for a fetch request, such as rendering the information and reseting the data in the form. &lt;/p&gt;

&lt;p&gt;This process is highly reusable. I have found that being able to navigate callback functions holds me much more accountable for organization in my own application. Understanding how these work and the asynchronous potential and behavior in JavaScript is something I am still broadening my understanding of, but methods like preventDefault() and stopPropagation() have also been helpful along the way. &lt;/p&gt;

&lt;p&gt;Find my repositories here:&lt;br&gt;
frontend:&lt;a href="https://github.com/katiekatiekatiee/playlist-frontend"&gt;https://github.com/katiekatiekatiee/playlist-frontend&lt;/a&gt;&lt;br&gt;
backend: &lt;a href="https://github.com/katiekatiekatiee/playlist-backend"&gt;https://github.com/katiekatiekatiee/playlist-backend&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Aura Theme v2.0.0 is out now! 🥳 🎉</title>
      <author>Dalton Menezes</author>
      <pubDate>Tue, 12 Oct 2021 00:32:54 +0000</pubDate>
      <link>https://dev.to/daltonmenezes/aura-theme-v2-0-0-is-out-now-565h</link>
      <guid>https://dev.to/daltonmenezes/aura-theme-v2-0-0-is-out-now-565h</guid>
      <description>&lt;p&gt;Hi folks, I'm glad to share with you Aura Theme v2.0.0 with a lot of cool new features.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The entire project was recreated from scratch using TypeScript&lt;/li&gt;
&lt;li&gt;Color schemes have been improved&lt;/li&gt;
&lt;li&gt;Added Aura CLI&lt;/li&gt;
&lt;li&gt;Added Aura API&lt;/li&gt;
&lt;li&gt;New ports have been added, the current full list of ports is:

&lt;ul&gt;
&lt;li&gt;Visual Studio Code&lt;/li&gt;
&lt;li&gt;Sublime Text&lt;/li&gt;
&lt;li&gt;CodeSandbox&lt;/li&gt;
&lt;li&gt;Hyper&lt;/li&gt;
&lt;li&gt;Windows Terminal&lt;/li&gt;
&lt;li&gt;Alacritty&lt;/li&gt;
&lt;li&gt;iTerm&lt;/li&gt;
&lt;li&gt;rxvt-unicode&lt;/li&gt;
&lt;li&gt;Terminal.app&lt;/li&gt;
&lt;li&gt;GNOME Terminal&lt;/li&gt;
&lt;li&gt;Kitty&lt;/li&gt;
&lt;li&gt;Chrome&lt;/li&gt;
&lt;li&gt;Firefox&lt;/li&gt;
&lt;li&gt;Vivaldi&lt;/li&gt;
&lt;li&gt;Insomnia&lt;/li&gt;
&lt;li&gt;Telegram Desktop&lt;/li&gt;
&lt;li&gt;Slack&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And more ports will come soon! 🚀&lt;/p&gt;

&lt;p&gt;You can find all themes at:&lt;br&gt;
&lt;a href="https://github.com/daltonmenezes/aura-theme"&gt;https://github.com/daltonmenezes/aura-theme&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's take a look at some of the available ports:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#visual-studio-code"&gt;
  &lt;/a&gt;
  Visual Studio Code
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9NZAOJx7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogqdsne7dx6d7rdhtgw3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9NZAOJx7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogqdsne7dx6d7rdhtgw3.png" alt="Visual Studio Code Preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#hyper-terminal"&gt;
  &lt;/a&gt;
  Hyper terminal
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r41vOi94--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0lyisbkhjramjbzovu90.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r41vOi94--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0lyisbkhjramjbzovu90.png" alt="Hyper Preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#insomnia"&gt;
  &lt;/a&gt;
  Insomnia
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c2saCTXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ule0dy4bz5iahnn9qpq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c2saCTXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ule0dy4bz5iahnn9qpq.png" alt="Insomnia Preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#firefox"&gt;
  &lt;/a&gt;
  Firefox
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CfFk8UGd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07z5mbxcg8r63j1nirw2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CfFk8UGd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07z5mbxcg8r63j1nirw2.png" alt="Firefox Preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you guys enjoy it as much as I do 💜&lt;/p&gt;

&lt;p&gt;The repo is participating in the Hacktoberfest, so If you would like to contribute by creating new ports, you can open an issue or get an existing one asking for it and reading &lt;a href="https://github.com/daltonmenezes/aura-theme#documentation"&gt;the docs&lt;/a&gt;, also you can reach me here or on GitHub if you need some help. 💜&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>vscode</category>
      <category>theme</category>
    </item>
    <item>
      <title>7 Ways to Escape CSS Hell</title>
      <author>Ryland King 🛠</author>
      <pubDate>Tue, 12 Oct 2021 00:23:51 +0000</pubDate>
      <link>https://dev.to/stackbit/7-ways-to-escape-css-hell-2ck6</link>
      <guid>https://dev.to/stackbit/7-ways-to-escape-css-hell-2ck6</guid>
      <description>&lt;p&gt;Ever have this happen? lol&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvjwilIH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0r2aymznlg20174dp1kn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvjwilIH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0r2aymznlg20174dp1kn.png" alt="Funny meme about centering with css"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yeah, me too.&lt;/p&gt;

&lt;p&gt;Here are the 7 ways to completely center whatever you want with CSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-1-textimage-center-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;1. text-image: center;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This works only on &lt;code&gt;display: inline&lt;/code&gt; &amp;amp; &lt;code&gt;display: inline-block&lt;/code&gt; elements. Note also that it must be applied to the parent element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e6sigOvk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3s2cf83jcl80t1bvkvj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e6sigOvk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3s2cf83jcl80t1bvkvj.png" alt="Centering images and text with text-align: center css"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-2-margin-0-auto-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;2. margin: 0 auto;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This works only on &lt;code&gt;display: block&lt;/code&gt; elements. And the element must have a width. &lt;/p&gt;

&lt;p&gt;You can also specify just &lt;code&gt;margin-left: auto&lt;/code&gt; and &lt;code&gt;margin-right: auto&lt;/code&gt; if you want margins on the top or bottom.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vmA1ytb9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qn1ukzmjdwlwlfx0z7q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vmA1ytb9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qn1ukzmjdwlwlfx0z7q.png" alt="Centering elements inside a div with margin: 0 auto css"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-3-verticalalign-middle-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;3. vertical-align: middle;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This works only on &lt;code&gt;display: inline&lt;/code&gt; &amp;amp; &lt;code&gt;display: inline-block&lt;/code&gt; elements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--323HZSwA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/izjek6gpt9z9w44l54ov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--323HZSwA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/izjek6gpt9z9w44l54ov.png" alt="Centering elements inside a list with vertical-align: middle css"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-4-float-center-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;4. float: center;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;lol (You cannot center floated elements.)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--82cSEOms--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/maojxdh727cnyhqse4aq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--82cSEOms--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/maojxdh727cnyhqse4aq.png" alt="It's impossible to both horizontally and vertically center an element with float: center css"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-5-centering-absolute-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;5. Centering absolute&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;When this comes up, use &lt;code&gt;transform&lt;/code&gt; and &lt;code&gt;50%&lt;/code&gt; coordinates to center an absolutely positioned element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ItmjRWK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ia7j5deozist5z6wr09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ItmjRWK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ia7j5deozist5z6wr09.png" alt="Centering child divs of a position: relative parent div with css"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-6-textimage-center-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;6. text-image: center;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Flexbox has a bunch of different alignment classes that are always applied to the parent. This here will be completely centered within the box.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TWVHzghm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2jejajip6lb2707df4s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TWVHzghm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2jejajip6lb2707df4s.png" alt="Centering elements inside a div with flexbox css"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Meu primeiro mês como desenvolvedor backend JR.</title>
      <author>Ítalo Santana</author>
      <pubDate>Tue, 12 Oct 2021 00:23:14 +0000</pubDate>
      <link>https://dev.to/x8ing_/meu-primeiro-mes-como-desenvolvedor-back-end-jr-43k4</link>
      <guid>https://dev.to/x8ing_/meu-primeiro-mes-como-desenvolvedor-back-end-jr-43k4</guid>
      <description>&lt;p&gt;Antes de começar à falar sobre minha breve experiência, recomendo que se atentem bastante aos pontos que falo com propriedade em que devo melhorar, pois recebi feedbacks solicitado por mim, e isso viabiliza melhoria na sua jornada ao longo tempo na empresa que você está atuando. Caso contrário, você não melhore esses pontos, poderá acarretar em permanecer errando e prejudicando sua equipe/empresa. Assim como, levará essa atitude errante para outra empresa. &lt;/p&gt;

&lt;p&gt;Pra facilitar a leitura e entender como foi o meu processo de adaptação ao onBoarding da empresa, vou descrever e dividir por tarefas, certo? Então, vamos lá.&lt;/p&gt;

&lt;p&gt;Na minha primeira semana estava muito nervoso porque era, ou melhor, ainda é, algo muito novo para meu dia-a-dia. Afinal, estou dando os meus primeiros passos agora na carreira que almejo.&lt;/p&gt;

&lt;p&gt;Foi feita a apresentação do time via chamada de áudio no primeiro dia, apresentação de como funcionaria o projeto, arquitetura do projeto e Stacks utilizadas no Back-end. No dia seguinte, recebi minha primeira Task pra trabalhar com Stripo e SendGrid na integração de e-mails. Um detalhe importante que nessa Task, eu nunca tinha mexido com as tecnologias e ao fazer pair-programming com meu chefe, me ensinou dar os primeiros passos e orientou sobre a tarefa aplicada no Jira. Assim fiz a atividade e entreguei com sucesso.&lt;/p&gt;

&lt;p&gt;Recebi minha segunda tarefa que foi documentar todas a API's utilizando apidoc_, ou seja, eu fiz toda a documentação dos endpoints para facilitar nosso lado na hora de procurá-los. Essa tarefa eu já senti um pouco de dificuldade, visto que ao mesmo tempo que documentava, eu estava testando todas as rotas por meio de um API Client, no caso foi o Insomnia.&lt;/p&gt;

&lt;p&gt;Foi nessa tarefa que eu tive o contato com o código-fonte, e aprendi demais sobre como funcionava toda estrutura porque eu estava metendo a cara no código pra entender como funcionava lógica por lógica. Essa aí é um boa dica! Documentem suas API's, assim você ganhará mais conhecimento no código-fonte e terá seus endpoints todos listados pra facilitar a vida do front-end.&lt;/p&gt;

&lt;p&gt;Além das coisas boas, tive alguns contratempo com &lt;a href="https://gist.github.com/italosantana/c69e0f5ac270d1bac36f3fe7a075b3cc"&gt;variável de ambiente no Windows&lt;/a&gt; e comandos Git. Onde tive alguns problemas alterando códigos que não deveria, utilizando package-manager que não era necessário, dando criando Branch de forma errada e foram série de coisas que eu fiz errado por não prestar atenção. Sempre foram atenciosos na hora de explicar, foi dito todos os comandos pra fazer, mas na hora da minha execução, por falta de atenção e nervosismo, assim como o medo de quebrar algo, acabava errando e perdendo tempo corrigindo tudo.&lt;/p&gt;

&lt;p&gt;Essa atividade aqui eu percebi que eu deveria melhorar meus comandos de Git, ter um pouco de paciência, que tudo não é imediato, e todos têm o seu tempo pra desenvolver. Muitas habilidades que o profissional na área de TI tem pra melhorar vai além dos códigos que serão utilizados utilizados.&lt;/p&gt;

&lt;p&gt;Minha terceira tarefa foi fazer o que amamos: CRUD.&lt;/p&gt;

&lt;p&gt;Nessa atividade eu adquiri conhecimento em banco não-relacional como o MongoDB e utilizando um ODM(Object Document Mapper) como o Mongoose em nosso CRUD. Usei também algumas bibliotecas que nunca havia utilizado e pra isso pedi ajuda pra entender como funcionava no pair-programming.&lt;/p&gt;

&lt;p&gt;Minha última atividade do mês foi realizar testes de integração com Jest. Nunca tinha feito nenhum teste na vida! Tentei apenas uma vez utilizar com Junit, mas sem sucesso. Apenas assisti uma aula e não consegui nem reproduzir o que foi feito. Essa semana, eu realizei os testes pela primeira vez e ver os logs que 6 de 6 passaram, aquele &lt;em&gt;log&lt;/em&gt; verde, encheu meus olhos de lágrima de felicidade por saber que estou conseguindo caminhar bem. &lt;/p&gt;

&lt;p&gt;As primeiras atividades e suas primeiras Pull Requests é motivo de comemoração. Eu fiquei pulando quando recebi meu primeiro merge no código. Portanto, cada passo que você der, comemore. Isso é muito benéfico pra seu desenvolvimento.&lt;/p&gt;

&lt;p&gt;Anotem tudo que for dito na reunião, pair-programing, code review e afins. Estejam munidos de informações que fará seu desempenho melhorar dentro do campo de atuação. Se não souber, procure. Se não achar, pergunte. Não fique bloqueado em uma atividade por não saber e orgulho de perguntar, isso é muito errado. Tudo que eu tenho dificuldade, procuro e senão encontrar a solução pra destravar, pergunto. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>github</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Como crear Pull request template y en español
</title>
      <author>Danniel Navas</author>
      <pubDate>Tue, 12 Oct 2021 00:13:28 +0000</pubDate>
      <link>https://dev.to/dannieldev/como-crear-pull-request-template-y-en-espanol-2pbb</link>
      <guid>https://dev.to/dannieldev/como-crear-pull-request-template-y-en-espanol-2pbb</guid>
      <description>&lt;p&gt;Esta vez será poco texto, la idea de este post es dejar un template para tus pull request, sea en proyectos propios con en el de la empresa en la que trabajas.&lt;/p&gt;

&lt;p&gt;Lo primero que realizaremos es crear un archivo con el nombre &lt;code&gt;PULL_REQUEST_TEMPLATE.md&lt;/code&gt; este archivo va dentro de la carpeta &lt;code&gt;.github&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;Descripción&lt;/span&gt;

&lt;span class="nx"&gt;Por&lt;/span&gt; &lt;span class="nx"&gt;favor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;incluya&lt;/span&gt; &lt;span class="nx"&gt;un&lt;/span&gt; &lt;span class="nx"&gt;resumen&lt;/span&gt; &lt;span class="nx"&gt;del&lt;/span&gt; &lt;span class="nx"&gt;cambio&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="nx"&gt;qué&lt;/span&gt; &lt;span class="nx"&gt;problema&lt;/span&gt; &lt;span class="nx"&gt;se&lt;/span&gt; &lt;span class="nx"&gt;soluciona&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Incluya&lt;/span&gt; &lt;span class="nx"&gt;también&lt;/span&gt; &lt;span class="nx"&gt;la&lt;/span&gt; &lt;span class="nx"&gt;motivación&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="nx"&gt;contexto&lt;/span&gt; &lt;span class="nx"&gt;pertinentes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Enumere&lt;/span&gt; &lt;span class="nx"&gt;las&lt;/span&gt; &lt;span class="nx"&gt;dependencias&lt;/span&gt; &lt;span class="nx"&gt;necesarias&lt;/span&gt; &lt;span class="nx"&gt;para&lt;/span&gt; &lt;span class="nx"&gt;este&lt;/span&gt; &lt;span class="nx"&gt;cambio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;Correcciones&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;problema&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;##&lt;/span&gt; &lt;span class="nx"&gt;Tipo&lt;/span&gt; &lt;span class="nx"&gt;de&lt;/span&gt; &lt;span class="nx"&gt;cambio&lt;/span&gt;

&lt;span class="nx"&gt;Por&lt;/span&gt; &lt;span class="nx"&gt;favor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elimine&lt;/span&gt; &lt;span class="nx"&gt;las&lt;/span&gt; &lt;span class="nx"&gt;opciones&lt;/span&gt; &lt;span class="nx"&gt;que&lt;/span&gt; &lt;span class="nx"&gt;no&lt;/span&gt; &lt;span class="nx"&gt;sean&lt;/span&gt; &lt;span class="nx"&gt;relevantes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nx"&gt;Corrección&lt;/span&gt; &lt;span class="nx"&gt;de&lt;/span&gt; &lt;span class="nx"&gt;errores&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cambio&lt;/span&gt; &lt;span class="nx"&gt;no&lt;/span&gt; &lt;span class="nx"&gt;radical&lt;/span&gt; &lt;span class="nx"&gt;que&lt;/span&gt; &lt;span class="nx"&gt;soluciona&lt;/span&gt; &lt;span class="nx"&gt;un&lt;/span&gt; &lt;span class="nx"&gt;problema&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nx"&gt;Nueva&lt;/span&gt; &lt;span class="nx"&gt;característica&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cambio&lt;/span&gt; &lt;span class="nx"&gt;no&lt;/span&gt; &lt;span class="nx"&gt;rompedor&lt;/span&gt; &lt;span class="nx"&gt;que&lt;/span&gt; &lt;span class="nx"&gt;añade&lt;/span&gt; &lt;span class="nx"&gt;funcionalidad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nx"&gt;Cambio&lt;/span&gt; &lt;span class="nx"&gt;de&lt;/span&gt; &lt;span class="nx"&gt;ruptura&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arreglo&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="nx"&gt;característica&lt;/span&gt; &lt;span class="nx"&gt;que&lt;/span&gt; &lt;span class="nx"&gt;causaría&lt;/span&gt; &lt;span class="nx"&gt;que&lt;/span&gt; &lt;span class="nx"&gt;la&lt;/span&gt; &lt;span class="nx"&gt;funcionalidad&lt;/span&gt; &lt;span class="nx"&gt;existente&lt;/span&gt; &lt;span class="nx"&gt;no&lt;/span&gt; &lt;span class="nx"&gt;funcionara&lt;/span&gt; &lt;span class="nx"&gt;como&lt;/span&gt; &lt;span class="nx"&gt;se&lt;/span&gt; &lt;span class="nx"&gt;esperaba&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nx"&gt;Este&lt;/span&gt; &lt;span class="nx"&gt;cambio&lt;/span&gt; &lt;span class="nx"&gt;requiere&lt;/span&gt; &lt;span class="nx"&gt;una&lt;/span&gt; &lt;span class="nx"&gt;actualización&lt;/span&gt; &lt;span class="nx"&gt;de&lt;/span&gt; &lt;span class="nx"&gt;la&lt;/span&gt; &lt;span class="nx"&gt;documentación&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;¿&lt;/span&gt;&lt;span class="nx"&gt;Cómo&lt;/span&gt; &lt;span class="nx"&gt;se&lt;/span&gt; &lt;span class="nx"&gt;ha&lt;/span&gt; &lt;span class="nx"&gt;probado&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;

&lt;span class="nx"&gt;Describa&lt;/span&gt; &lt;span class="nx"&gt;las&lt;/span&gt; &lt;span class="nx"&gt;pruebas&lt;/span&gt; &lt;span class="nx"&gt;que&lt;/span&gt; &lt;span class="nx"&gt;ha&lt;/span&gt; &lt;span class="nx"&gt;realizado&lt;/span&gt; &lt;span class="nx"&gt;para&lt;/span&gt; &lt;span class="nx"&gt;verificar&lt;/span&gt; &lt;span class="nx"&gt;sus&lt;/span&gt; &lt;span class="nx"&gt;cambios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Proporcione&lt;/span&gt; &lt;span class="nx"&gt;instrucciones&lt;/span&gt; &lt;span class="nx"&gt;para&lt;/span&gt; &lt;span class="nx"&gt;que&lt;/span&gt; &lt;span class="nx"&gt;podamos&lt;/span&gt; &lt;span class="nx"&gt;reproducirlos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Enumere&lt;/span&gt; &lt;span class="nx"&gt;también&lt;/span&gt; &lt;span class="nx"&gt;los&lt;/span&gt; &lt;span class="nx"&gt;detalles&lt;/span&gt; &lt;span class="nx"&gt;relevantes&lt;/span&gt; &lt;span class="nx"&gt;de&lt;/span&gt; &lt;span class="nx"&gt;la&lt;/span&gt; &lt;span class="nx"&gt;configuración&lt;/span&gt; &lt;span class="nx"&gt;de&lt;/span&gt; &lt;span class="nx"&gt;las&lt;/span&gt; &lt;span class="nx"&gt;pruebas&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nx"&gt;Prueba&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nx"&gt;Prueba&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;Lista&lt;/span&gt; &lt;span class="nx"&gt;de&lt;/span&gt; &lt;span class="nx"&gt;comprobación&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nx"&gt;Mi&lt;/span&gt; &lt;span class="nx"&gt;código&lt;/span&gt; &lt;span class="nx"&gt;sigue&lt;/span&gt; &lt;span class="nx"&gt;las&lt;/span&gt; &lt;span class="nx"&gt;directrices&lt;/span&gt; &lt;span class="nx"&gt;de&lt;/span&gt; &lt;span class="nx"&gt;estilo&lt;/span&gt; &lt;span class="nx"&gt;de&lt;/span&gt; &lt;span class="nx"&gt;este&lt;/span&gt; &lt;span class="nx"&gt;proyecto&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nx"&gt;He&lt;/span&gt; &lt;span class="nx"&gt;realizado&lt;/span&gt; &lt;span class="nx"&gt;una&lt;/span&gt; &lt;span class="nx"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;revisión&lt;/span&gt; &lt;span class="nx"&gt;de&lt;/span&gt; &lt;span class="nx"&gt;mi&lt;/span&gt; &lt;span class="nx"&gt;propio&lt;/span&gt; &lt;span class="nx"&gt;código&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nx"&gt;He&lt;/span&gt; &lt;span class="nx"&gt;comentado&lt;/span&gt; &lt;span class="nx"&gt;mi&lt;/span&gt; &lt;span class="nx"&gt;código&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;especialmente&lt;/span&gt; &lt;span class="nx"&gt;en&lt;/span&gt; &lt;span class="nx"&gt;las&lt;/span&gt; &lt;span class="nx"&gt;áreas&lt;/span&gt; &lt;span class="nx"&gt;difíciles&lt;/span&gt; &lt;span class="nx"&gt;de&lt;/span&gt; &lt;span class="nx"&gt;entender&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nx"&gt;He&lt;/span&gt; &lt;span class="nx"&gt;realizado&lt;/span&gt; &lt;span class="nx"&gt;los&lt;/span&gt; &lt;span class="nx"&gt;cambios&lt;/span&gt; &lt;span class="nx"&gt;correspondientes&lt;/span&gt; &lt;span class="nx"&gt;en&lt;/span&gt; &lt;span class="nx"&gt;la&lt;/span&gt; &lt;span class="nx"&gt;documentación&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nx"&gt;Mis&lt;/span&gt; &lt;span class="nx"&gt;cambios&lt;/span&gt; &lt;span class="nx"&gt;no&lt;/span&gt; &lt;span class="nx"&gt;generan&lt;/span&gt; &lt;span class="nx"&gt;nuevas&lt;/span&gt; &lt;span class="nx"&gt;advertencias&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nx"&gt;He&lt;/span&gt; &lt;span class="nx"&gt;añadido&lt;/span&gt; &lt;span class="nx"&gt;pruebas&lt;/span&gt; &lt;span class="nx"&gt;que&lt;/span&gt; &lt;span class="nx"&gt;demuestran&lt;/span&gt; &lt;span class="nx"&gt;que&lt;/span&gt; &lt;span class="nx"&gt;mi&lt;/span&gt; &lt;span class="nx"&gt;arreglo&lt;/span&gt; &lt;span class="nx"&gt;es&lt;/span&gt; &lt;span class="nx"&gt;efectivo&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="nx"&gt;que&lt;/span&gt; &lt;span class="nx"&gt;mi&lt;/span&gt; &lt;span class="nx"&gt;característica&lt;/span&gt; &lt;span class="nx"&gt;funciona&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nx"&gt;Las&lt;/span&gt; &lt;span class="nx"&gt;pruebas&lt;/span&gt; &lt;span class="nx"&gt;unitarias&lt;/span&gt; &lt;span class="nx"&gt;nuevas&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="nx"&gt;existentes&lt;/span&gt; &lt;span class="nx"&gt;pasan&lt;/span&gt; &lt;span class="nx"&gt;localmente&lt;/span&gt; &lt;span class="nx"&gt;con&lt;/span&gt; &lt;span class="nx"&gt;mis&lt;/span&gt; &lt;span class="nx"&gt;cambios&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nx"&gt;Cualquier&lt;/span&gt; &lt;span class="nx"&gt;cambio&lt;/span&gt; &lt;span class="nx"&gt;dependiente&lt;/span&gt; &lt;span class="nx"&gt;ha&lt;/span&gt; &lt;span class="nx"&gt;sido&lt;/span&gt; &lt;span class="nx"&gt;fusionado&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="nx"&gt;publicado&lt;/span&gt; &lt;span class="nx"&gt;en&lt;/span&gt; &lt;span class="nx"&gt;los&lt;/span&gt; &lt;span class="nx"&gt;módulos&lt;/span&gt; &lt;span class="nx"&gt;posteriores&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;y eso es todo.&lt;br&gt;
Espero te ayudara este post.&lt;/p&gt;

&lt;p&gt;Gracias por leer, nos vemos en la próxima.&lt;/p&gt;

</description>
      <category>github</category>
      <category>spanish</category>
    </item>
    <item>
      <title>Best Laptop for Coding in 2021</title>
      <author>Anna Mitchell ∞</author>
      <pubDate>Mon, 11 Oct 2021 23:42:09 +0000</pubDate>
      <link>https://dev.to/annamitchell/best-laptop-for-coding-in-2021-2om6</link>
      <guid>https://dev.to/annamitchell/best-laptop-for-coding-in-2021-2om6</guid>
      <description>&lt;p&gt;When it comes to the best laptop for programming, it's not just mobility you need. Storage, speed, and a comfortable keyboard are more vital than clock speeds, cores, and threads. Playing around with code and programming software is a necessity for many professions, and even for many hobbies. Of course, if it’s something that you’ve ever tried before, you will know that having a high quality computer is important for getting tasks done to the highest standards. If you’re still relatively new to programming or you haven’t bought a new laptop in a while, you may not know what sorts of specifications you should be looking out for.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Model&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;Buy&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1.&lt;/td&gt;
&lt;td&gt; &lt;strong&gt;Apple Macbook Air&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt; ★★★★★ &lt;/td&gt;
&lt;td&gt; &lt;a href="https://www.amazon.com/s?k=Apple+Macbook+Air&amp;amp;i=computers&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;linkCode=ur2&amp;amp;linkId=572db5344ef6df8ec832d8588074ba29&amp;amp;tag=begroup-20"&gt;View at Amazon&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.&lt;/td&gt;
&lt;td&gt; &lt;strong&gt;Google Pixelbook Go&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt; ★★★★★ &lt;/td&gt;
&lt;td&gt; &lt;a href="https://www.amazon.com/gp/search?ie=UTF8&amp;amp;tag=begroup-20&amp;amp;linkCode=ur2&amp;amp;linkId=05ee150282e105a4f1e7b55cfb2c53b0&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;index=pc-hardware&amp;amp;keywords=%20Google%20Pixelbook%20Go"&gt;View at Amazon&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.&lt;/td&gt;
&lt;td&gt; &lt;strong&gt;Lenovo ThinkPad X1 Extreme&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt; ★★★★★ &lt;/td&gt;
&lt;td&gt; &lt;a href="https://www.amazon.com/gp/search?ie=UTF8&amp;amp;tag=begroup-20&amp;amp;linkCode=ur2&amp;amp;linkId=4a752db0e059a5a715095c0c4a14e5c8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;index=pc-hardware&amp;amp;keywords=Lenovo%20ThinkPad%20X1%20Extreme"&gt;View at Amazon&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.&lt;/td&gt;
&lt;td&gt; &lt;strong&gt;Dell XPS 15 9510&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt; ★★★★★ &lt;/td&gt;
&lt;td&gt; &lt;a href="https://www.amazon.com/gp/search?ie=UTF8&amp;amp;tag=begroup-20&amp;amp;linkCode=ur2&amp;amp;linkId=3b81aa3f9dff910b29cf5f36135e6015&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;index=pc-hardware&amp;amp;keywords=Dell%20XPS%2015%209510%20Laptop"&gt;View at Amazon&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.&lt;/td&gt;
&lt;td&gt; &lt;strong&gt;HP Spectre x360&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt; ★★★★★ &lt;/td&gt;
&lt;td&gt; &lt;a href="https://www.amazon.com/gp/search?ie=UTF8&amp;amp;tag=begroup-20&amp;amp;linkCode=ur2&amp;amp;linkId=9130ac57e04c65d919343b877279b732&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;index=pc-hardware&amp;amp;keywords=HP%20Spectre%20x360"&gt;View at Amazon&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#how-to-select-a-programming-laptop"&gt;
  &lt;/a&gt;
  How to Select a Programming Laptop?
&lt;/h2&gt;

&lt;p&gt;Purchasing a suitable device for coding needs you to keep track of several things, which is why we have consolidated them here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Performance:&lt;/strong&gt; This one is a no-brainer, of course. A programmer will need to blaze through their development pursuits without delays. It necessitates an Intel Core i5 CPU or above or an equivalent on AMD or Mac. Look for a minimum of 16GB of RAM and 512GB of storage, preferably SSD.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Audio-visuals:&lt;/strong&gt; If you are a game developer, you should seek out a dedicated GPU. From a display point of view, your choice will depend upon your budget and requirements. For instance, some programmers need the glamour that comes with a P3 wide color gamut. Others will find that Intel Iris Xe Graphics does a neat job of making things meticulous.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Battery backup:&lt;/strong&gt; Battery capacity over eight hours is helpful for software developers who need to travel frequently. If you are going to be working at home or in an office setting, this will be less important to you.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Keyboard:&lt;/strong&gt; A comfortable, spacious keyboard and trackpad is an absolute must for speed and accuracy. You will be pressing keys day in and day out, and a poorly designed keyboard can cramp your style. MacBooks come with a scissor mechanism for the keyboard to up the overall fluidity. Some brands like ASUS use an elevated design for added comfort.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Build and design:&lt;/strong&gt; It helps if a programming computer is dependable inside out. The military-standard build makes laptops tough enough to let you code from anywhere. Portability can be crucial if your lifestyle involves travel; look for devices that weigh less than 5lbs and have sleek profiles.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Connections:&lt;/strong&gt; Programmers often need to connect to accessories, devices, etc., in the workplace or otherwise. You may also have to share data with your colleagues. Thunderbolt 3 or 4 ports, Wi-Fi 6, card readers, etc., are essential to facilitate collaboration.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Security:&lt;/strong&gt; Password-free, safe login is always a plus for programmers and other professionals who have to work in shared workspaces. Think fingerprint readers, facial login, and infrared cameras. These features provide reliable security to keep your work confidential and well-protected over time.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>devops</category>
      <category>laravel</category>
      <category>programming</category>
      <category>laptop</category>
    </item>
    <item>
      <title>Does AI make coding obsolete?</title>
      <author>Jason Leow ~ golifelog.com</author>
      <pubDate>Mon, 11 Oct 2021 23:41:54 +0000</pubDate>
      <link>https://dev.to/jasonleowsg/does-ai-make-coding-obsolete-4jf6</link>
      <guid>https://dev.to/jasonleowsg/does-ai-make-coding-obsolete-4jf6</guid>
      <description>&lt;p&gt;The internet had been ablaze with demos of what &lt;a href="https://www.wired.co.uk/article/gpt-3-openai-examples"&gt;GPT-3&lt;/a&gt; can do. GPT-3 by &lt;a href="https://openai.com/"&gt;OpenAI&lt;/a&gt; is a natural language machine learning system trained from 45TB of text data, which allows it to generate sorts of content, all based on just a few input words.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typing-words-to-build-a-website"&gt;
  &lt;/a&gt;
  Typing words to build a website
&lt;/h3&gt;

&lt;p&gt;In one particular demo, a GPT-3 integrated into Figma as a plugin can take a URL and a description as inputs, and mock up a website immediately. In the demo, the developer just typed in: “a website like stripe.com that is about a chat app”, and out came a website mockup on Figma looking like Stripe.com, but with a smartphone image showing a chat app, with relevant accompanying text. &lt;/p&gt;

&lt;p&gt;In another demo, I saw GPT-3 spitting out React code just based on vague descriptions of what the website that the developer wanted. The amazing thing is that it can interpret a relatively vague description and output something that more or less matches what you are asking.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Just words to website.&lt;/strong&gt; 🤯&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-need-to-learn-coding-no-more"&gt;
  &lt;/a&gt;
  No need to learn coding no more?
&lt;/h3&gt;

&lt;p&gt;The possibilities are mind-blowing! Imagine, just typing out a few words, and voila, your website is up. A few more sentences, and boom! Your SaaS product is live. Even nocode tools can’t match up to this level of speed to launch. Of course, because it’s trained using books, articles, and other texts that humans wrote, it contains all our human biases too. But while that gets sorted out, I can’t help but feel that the reasons to learn to code to make your own products is getting more distant by the day. &lt;/p&gt;

&lt;p&gt;Sure, you still need programmers to make tools like GPT-3, but I’m not interested in making these world-changing things. My ambitions are smaller and simpler, and if GPT-3 can make them, so be it. I’m not beholden to coding as a craftsman who enjoys his craft would. My objective is only to make stuff that I’m interested in.&lt;/p&gt;

&lt;p&gt;So... to learn to code, or not to code, that is the question.&lt;/p&gt;

&lt;p&gt;And maybe in the future where there's a GPT-10, that becomes a non-question for most people...&lt;/p&gt;




&lt;p&gt;Follow my daily writings on &lt;a href="https://golifelog.com/goals/30"&gt;Lifelog&lt;/a&gt;, where I write about learning to code, goals, productivity, indie hacking and tech for good.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>ai</category>
      <category>gpt3</category>
      <category>decodingcoding</category>
    </item>
    <item>
      <title>Fan-in / Fan-out with Go</title>
      <author>Aaron Schlesinger</author>
      <pubDate>Mon, 11 Oct 2021 22:59:27 +0000</pubDate>
      <link>https://dev.to/arschles/fan-in-fan-out-with-go-19ah</link>
      <guid>https://dev.to/arschles/fan-in-fan-out-with-go-19ah</guid>
      <description>&lt;p&gt;Hacking on the &lt;a href="https://github.com/kedacore/http-add-on"&gt;KEDA HTTP Addon&lt;/a&gt;, I found myself having to do something familiar:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Split some work into N pieces, do them all concurrently, wait for them all to be done, and then merge all the results together.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I've done this a bunch of times before, but this time I forgot how to do it. I took a few minutes away from the computer to gather my thoughts and came back to it. So I don't have to forget how to do it again, I want to write the algorithm down here!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-we-doing-here"&gt;
  &lt;/a&gt;
  What are we doing here?
&lt;/h2&gt;

&lt;p&gt;First thing's first - we need a problem we can break down into a bunch of pieces. Sometimes it's called an "embarassingly parallel" problem. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that concurrency and parallelism aren't equivalent, but I'm going to be using the word "parallel" hereafter because I'm hoping the machine you run this algorithm on will be able to execute the work on different cores simultaneously.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The primary goal here is to run each different piece of the work in a goroutine. That's pretty easy in Go - just put &lt;code&gt;go&lt;/code&gt; before the function call that does the work. The tougher part is to get the results of the work, check for errors, and wait for them all to be done -- not necessarrily in that order 🤣.&lt;/p&gt;

&lt;p&gt;Even though the concept is simple, there is a big-ish gotcha when the rubber hits the road. Below is some code that does "fake" work, annotated with comments to explain it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;workToDo&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"do"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"some"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"work"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;workToDo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// make sure you pass the index and work into the &lt;/span&gt;
    &lt;span class="c"&gt;// function that runs in the goroutine.&lt;/span&gt;
    &lt;span class="c"&gt;// this mechanism makes sure that the goroutine&lt;/span&gt;
    &lt;span class="c"&gt;// gets a (stack-allocated) _copy_ of the data.&lt;/span&gt;
    &lt;span class="c"&gt;// if you don't do this, idx and work will change out&lt;/span&gt;
    &lt;span class="c"&gt;// from under it as the loop progresses.&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The biggest gotcha is in that comment inside the &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#waiting-for-the-work-to-be-done"&gt;
  &lt;/a&gt;
  Waiting for the work to be done
&lt;/h2&gt;

&lt;p&gt;Now that we've got goroutines running with the right parameters, let's add a &lt;a href="https://pkg.go.dev/sync?utm_source=godoc#WaitGroup"&gt;&lt;code&gt;sync.WaitGroup&lt;/code&gt;&lt;/a&gt; to the mix. This mechanism will let us wait for all these goroutines to finish.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;wg&lt;/span&gt; &lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WaitGroup&lt;/span&gt;
&lt;span class="n"&gt;workToDo&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"do"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"some"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"work"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;workToDo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// add 1 to the waitgroup _before_ you start the goroutine.&lt;/span&gt;
    &lt;span class="c"&gt;// you want to do this in the same goroutine as where&lt;/span&gt;
    &lt;span class="c"&gt;// you call wg.Wait() so that you're sure that, even if&lt;/span&gt;
    &lt;span class="c"&gt;// none of the goroutines started yet, you have the&lt;/span&gt;
    &lt;span class="c"&gt;// right number of pending work.&lt;/span&gt;
    &lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;// make sure you pass the index and work into the &lt;/span&gt;
    &lt;span class="c"&gt;// function that runs in the goroutine.&lt;/span&gt;
    &lt;span class="c"&gt;// this mechanism makes sure that the goroutine&lt;/span&gt;
    &lt;span class="c"&gt;// gets a (stack-allocated) _copy_ of the data.&lt;/span&gt;
    &lt;span class="c"&gt;// if you don't do this, idx and work will change out&lt;/span&gt;
    &lt;span class="c"&gt;// from under it as the loop progresses.&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// wg.Done() tells the WaitGroup that we're done in&lt;/span&gt;
        &lt;span class="c"&gt;// this goroutine. In other words, it decrements&lt;/span&gt;
        &lt;span class="c"&gt;// the internal WaitGroup counter, whereas wg.Add(1)&lt;/span&gt;
        &lt;span class="c"&gt;// above increments it.&lt;/span&gt;
        &lt;span class="c"&gt;// Most commonly, we just do this in a defer statement.&lt;/span&gt;
        &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c"&gt;// this is the "work". in the next section, we'll be&lt;/span&gt;
        &lt;span class="c"&gt;// changing this to return a value, because we'll&lt;/span&gt;
        &lt;span class="c"&gt;// need to send that value somewhere&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;// wait for all the goroutines to finish. this call&lt;/span&gt;
&lt;span class="c"&gt;// blocks until the WaitGroup's internal count goes &lt;/span&gt;
&lt;span class="c"&gt;// to zero&lt;/span&gt;
&lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#getting-the-results"&gt;
  &lt;/a&gt;
  Getting the results
&lt;/h2&gt;

&lt;p&gt;So, now we know when all the work is done, we need to get the results. There are two kinds of results we need to get - the actual values of the work we're doing -- we'll call this the "success value" -- and the errors that it might have returned.&lt;/p&gt;

&lt;p&gt;Let's focus on the success values first. We're going to use one group of channels, one "final" channel, and a clever way of shuttling data between the former and the latter:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Read this code on the &lt;a href="https://play.golang.org/p/CM34_zkrmrg"&gt;Go Playground&lt;/a&gt;, if you prefer&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// this is the channel that will hold the results of the work&lt;/span&gt;
&lt;span class="n"&gt;resultCh&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;wg&lt;/span&gt; &lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WaitGroup&lt;/span&gt;
&lt;span class="n"&gt;workToDo&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"do"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"some"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"work"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;workToDo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// add 1 to the waitgroup _before_ you start the goroutine.&lt;/span&gt;
    &lt;span class="c"&gt;// you want to do this in the same goroutine as where&lt;/span&gt;
    &lt;span class="c"&gt;// you call wg.Wait() so that you're sure that, even if&lt;/span&gt;
    &lt;span class="c"&gt;// none of the goroutines started yet, you have the&lt;/span&gt;
    &lt;span class="c"&gt;// right number of pending work.&lt;/span&gt;
    &lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;// this is the loop-local channel that our first goroutine&lt;/span&gt;
    &lt;span class="c"&gt;// will send its results to. we'll start up a second&lt;/span&gt;
    &lt;span class="c"&gt;// goroutine to forward its results to the final channel.&lt;/span&gt;
    &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;// make sure you pass the index and work into the&lt;/span&gt;
    &lt;span class="c"&gt;// function that runs in the goroutine.&lt;/span&gt;
    &lt;span class="c"&gt;// this mechanism makes sure that the goroutine&lt;/span&gt;
    &lt;span class="c"&gt;// gets a (stack-allocated) _copy_ of the data.&lt;/span&gt;
    &lt;span class="c"&gt;// if you don't do this, idx and work will change out&lt;/span&gt;
    &lt;span class="c"&gt;// from under it as the loop progresses.&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// this is the "work". right now, it just returns an&lt;/span&gt;
        &lt;span class="c"&gt;// int. in the next section, it will return both an int&lt;/span&gt;
        &lt;span class="c"&gt;// and an error&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;doSomeWork&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;
    &lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;// start up another goroutine to forward the results from&lt;/span&gt;
    &lt;span class="c"&gt;// ch to resultCh&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// we want to indicate that we're done after we forward&lt;/span&gt;
        &lt;span class="c"&gt;// the result to the final channel, _not_ just when we're&lt;/span&gt;
        &lt;span class="c"&gt;// done with the actual computation. this arrangement&lt;/span&gt;
        &lt;span class="c"&gt;// will be useful below, in our final goroutine that&lt;/span&gt;
        &lt;span class="c"&gt;// runs after the for loop is done&lt;/span&gt;
        &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;
        &lt;span class="n"&gt;resultCh&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;// start up a final goroutine that is going to watch for&lt;/span&gt;
&lt;span class="c"&gt;// the moment when all of the loop goroutines are both&lt;/span&gt;
&lt;span class="c"&gt;//&lt;/span&gt;
&lt;span class="c"&gt;// 1. done with their work&lt;/span&gt;
&lt;span class="c"&gt;// 2. done sending their results to the final channel&lt;/span&gt;
&lt;span class="c"&gt;//&lt;/span&gt;
&lt;span class="c"&gt;// after that, we can close the resultCh. this closure is&lt;/span&gt;
&lt;span class="c"&gt;// important for the following for loop, since ranging over&lt;/span&gt;
&lt;span class="c"&gt;// a channel will only stop after that channel is closed&lt;/span&gt;
&lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resultCh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}()&lt;/span&gt;

&lt;span class="c"&gt;// now that we have that final goroutine running, we can&lt;/span&gt;
&lt;span class="c"&gt;// be sure that this for loop will end after:&lt;/span&gt;
&lt;span class="c"&gt;//&lt;/span&gt;
&lt;span class="c"&gt;// 1. all goroutines are done with their work&lt;/span&gt;
&lt;span class="c"&gt;// 2. all goroutines are done sending their work to resultCh&lt;/span&gt;
&lt;span class="c"&gt;// 3. we have processed each result&lt;/span&gt;
&lt;span class="c"&gt;//  (in this case, we just print it out)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;resultCh&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"result:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code is extensively commented, but notice a few more "meta" things about it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We're enlisting &lt;em&gt;another&lt;/em&gt; goroutine for each loop iteration, so now we're using &lt;code&gt;2N&lt;/code&gt; goroutines rather than &lt;code&gt;N&lt;/code&gt; (where &lt;code&gt;N&lt;/code&gt; is the number of work items to do).

&lt;ul&gt;
&lt;li&gt;If you're worried about the extra goroutines, remember that a Go program can run hundreds of thousands of them comfortably on a relatively modern laptop. Plan accordingly with that in mind.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;We use one extra final goroutine to determine when the final goroutine should be closed&lt;/li&gt;
&lt;li&gt;We no longer use &lt;code&gt;wg.Wait()&lt;/code&gt; in the main goroutine. Instead, we range over &lt;code&gt;resultCh&lt;/code&gt; to both get the results &lt;em&gt;and&lt;/em&gt; determine when all the work items are done.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#a-final-wrinkle-error-handling"&gt;
  &lt;/a&gt;
  A final wrinkle: error handling
&lt;/h2&gt;

&lt;p&gt;Now that you (hopefully) have a decent grasp over the code in the previous section, consider that, for most workloads, you'll also have to deal with error handling. It doesn't take a lot of &lt;em&gt;additional&lt;/em&gt; code to do it, but it does add a bit more complexity. Let's see how it works:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Read this code on the &lt;a href="https://play.golang.org/p/Bcv_XQwoAi6"&gt;Go Playground&lt;/a&gt;, if you prefer&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that you can reduce complexity by using the &lt;a href="https://pkg.go.dev/golang.org/x/sync/errgroup"&gt;&lt;code&gt;errgroup&lt;/code&gt;&lt;/a&gt; package. The code herein implements functionality similar to that of &lt;code&gt;errgroup&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// this is the channel that will hold the results of the work&lt;/span&gt;
&lt;span class="n"&gt;resultCh&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;// this channel receives all the errors that occur.&lt;/span&gt;
&lt;span class="c"&gt;// for each work item, either resultCh or errCh will receive&lt;/span&gt;
&lt;span class="c"&gt;// precisely once. both channels will be closed immediately&lt;/span&gt;
&lt;span class="c"&gt;// after all receives happen&lt;/span&gt;
&lt;span class="n"&gt;errCh&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;wg&lt;/span&gt; &lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WaitGroup&lt;/span&gt;
&lt;span class="n"&gt;workToDo&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"do"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"some"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"work"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;workToDo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// add 1 to the waitgroup _before_ you start the goroutine.&lt;/span&gt;
    &lt;span class="c"&gt;// you want to do this in the same goroutine as where&lt;/span&gt;
    &lt;span class="c"&gt;// you call wg.Wait() so that you're sure that, even if&lt;/span&gt;
    &lt;span class="c"&gt;// none of the goroutines started yet, you have the&lt;/span&gt;
    &lt;span class="c"&gt;// right number of pending work.&lt;/span&gt;
    &lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;// this is the loop-local channel that our first goroutine&lt;/span&gt;
    &lt;span class="c"&gt;// will send its results to. we'll start up a second&lt;/span&gt;
    &lt;span class="c"&gt;// goroutine to forward its results to the final channel.&lt;/span&gt;
    &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;// this is the loop-local channel that our first goroutine&lt;/span&gt;
    &lt;span class="c"&gt;// will send errors on. for each loop iteration, exactly&lt;/span&gt;
    &lt;span class="c"&gt;// one of ch or errCh will receive&lt;/span&gt;
    &lt;span class="n"&gt;eCh&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;// make sure you pass the index and work into the&lt;/span&gt;
    &lt;span class="c"&gt;// function that runs in the goroutine.&lt;/span&gt;
    &lt;span class="c"&gt;// this mechanism makes sure that the goroutine&lt;/span&gt;
    &lt;span class="c"&gt;// gets a (stack-allocated) _copy_ of the data.&lt;/span&gt;
    &lt;span class="c"&gt;// if you don't do this, idx and work will change out&lt;/span&gt;
    &lt;span class="c"&gt;// from under it as the loop progresses.&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// this is the "work". right now, it just returns an&lt;/span&gt;
        &lt;span class="c"&gt;// int. in the next section, it will return both an int&lt;/span&gt;
        &lt;span class="c"&gt;// and an error&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;doSomeWork&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;eCh&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;// start up another goroutine to forward the results from:&lt;/span&gt;
    &lt;span class="c"&gt;//&lt;/span&gt;
    &lt;span class="c"&gt;// - ch to resultCh&lt;/span&gt;
    &lt;span class="c"&gt;// - eCh to errCh&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// we want to indicate that we're done after we do the&lt;/span&gt;
        &lt;span class="c"&gt;// forward operation, similar to the code in the&lt;/span&gt;
        &lt;span class="c"&gt;// previous section&lt;/span&gt;
        &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c"&gt;// only one forward operation will happen per loop&lt;/span&gt;
        &lt;span class="c"&gt;// iteration, so we use a select to choose exactly&lt;/span&gt;
        &lt;span class="c"&gt;// one of the channels - either the success or error&lt;/span&gt;
        &lt;span class="c"&gt;// one.&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;resultCh&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;eCh&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;errCh&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;// start up a final goroutine that is going to watch for&lt;/span&gt;
&lt;span class="c"&gt;// the moment when all of the loop goroutines are both&lt;/span&gt;
&lt;span class="c"&gt;//&lt;/span&gt;
&lt;span class="c"&gt;// 1. done with their work&lt;/span&gt;
&lt;span class="c"&gt;// 2. done sending their results to the appropriate channel&lt;/span&gt;
&lt;span class="c"&gt;//&lt;/span&gt;
&lt;span class="c"&gt;// after that, we can close both resultCh and errCh.&lt;/span&gt;
&lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resultCh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errCh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}()&lt;/span&gt;

&lt;span class="c"&gt;// we're now at a point where we have two "final" channels:&lt;/span&gt;
&lt;span class="c"&gt;//&lt;/span&gt;
&lt;span class="c"&gt;// - one for the successful results&lt;/span&gt;
&lt;span class="c"&gt;// - one for the errors&lt;/span&gt;
&lt;span class="c"&gt;//&lt;/span&gt;
&lt;span class="c"&gt;// we have a few choices on how to handle them, and it's&lt;/span&gt;
&lt;span class="c"&gt;// largely up to your use case how you handle errors or success&lt;/span&gt;
&lt;span class="c"&gt;// results. In our case, we'll loop through both channels,&lt;/span&gt;
&lt;span class="c"&gt;// print out the result either way, and then exit when all&lt;/span&gt;
&lt;span class="c"&gt;// receives happen.&lt;/span&gt;

&lt;span class="c"&gt;// these two booleans are going to keep track of when &lt;/span&gt;
&lt;span class="c"&gt;// each channel is closed and done receiving&lt;/span&gt;
&lt;span class="n"&gt;resultsDone&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
&lt;span class="n"&gt;errsDone&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
&lt;span class="c"&gt;// we're going to use an infinite loop and break out of it&lt;/span&gt;
&lt;span class="c"&gt;// when both channels are done receiving&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;resultsDone&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;errsDone&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;valid&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;resultCh&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;valid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;resultsDone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"result:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;valid&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;errCh&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;valid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;errsDone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"error:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A few more things to note here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We've handled errors and success values with equal importance. In many cases, you might want to immediately exit if you see an error. In that case, make sure that you find a way to receive the rest of the errors and success values on &lt;code&gt;errCh&lt;/code&gt; and &lt;code&gt;resultCh&lt;/code&gt; (respectively), or tell the remaining goroutines to exit.

&lt;ul&gt;
&lt;li&gt;If you intend to do the latter, I highly recommend using &lt;a href="https://pkg.go.dev/context"&gt;&lt;code&gt;context&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;There is a lot of code here! And for that reason, it's worth repeating that you can reduce complexity by using the &lt;a href="https://pkg.go.dev/golang.org/x/sync/errgroup"&gt;&lt;code&gt;errgroup&lt;/code&gt;&lt;/a&gt; package.&lt;/li&gt;
&lt;li&gt;The primary source of complexity is the parallelism (that's the reason this blog post exists!) If you're thinking of using this pattern, I encourage you to measure the serial (non-parallel) version of the algorithm first to determine whether you really need to take on this complexity&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>programming</category>
      <category>hacktoberfest</category>
      <category>go</category>
    </item>
    <item>
      <title>Building a client database of people in React</title>
      <author>Caleb O.</author>
      <pubDate>Mon, 11 Oct 2021 22:47:34 +0000</pubDate>
      <link>https://dev.to/seven/building-a-client-database-of-people-in-react-55oe</link>
      <guid>https://dev.to/seven/building-a-client-database-of-people-in-react-55oe</guid>
      <description>&lt;p&gt;Ever wondered how to get access to a whole lot of information about people on the internet? Like, any information about anyone?&lt;/p&gt;

&lt;p&gt;In this article, we’ll be building a client-side application with ReactJS on the web that’ll integrate &lt;a href="https://www.kelvindata.com/"&gt;Kelvin Data API&lt;/a&gt; at the frontend. The Kelvin Data is an API platform that allows you to access the profile of people on the web.&lt;/p&gt;

&lt;p&gt;You can search for a specific person, either with their email address, LinkedIn profile (here, you’ll have to provide the person’s LinkedIn URL. i.e. &lt;a href="https://linkedin.com/in/example-person"&gt;https://linkedin.com/in/example-person&lt;/a&gt; ), or their phone numbers.&lt;/p&gt;

&lt;p&gt;Now, let’s see how we can create an app that we’ll consume this API with. But, before you read this article any further, you should have a basic knowledge of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React,&lt;/li&gt;
&lt;li&gt;Data fetching with Hooks in React,&lt;/li&gt;
&lt;li&gt;Conditional rendering in React,&lt;/li&gt;
&lt;li&gt;String/template Literals in JavaScript,&lt;/li&gt;
&lt;li&gt;React components and props &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-kelvindata-dashboard"&gt;
  &lt;/a&gt;
  The KelvinData dashboard.
&lt;/h2&gt;

&lt;p&gt;When you signup on to the platform, you’ll have access to a personalized dashboard that you can use to watch your subscriptions, manage your API keys, and do a lot more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cWlPJQrq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_02939414880CFC840FE2DC108AA323D4FBC7B5589C807448FBDF6362BD42B96D_1633695407517_file.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cWlPJQrq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_02939414880CFC840FE2DC108AA323D4FBC7B5589C807448FBDF6362BD42B96D_1633695407517_file.jpeg" alt="kelvinData dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A search playground is also on the dashboard where you can test the features of the API.&lt;/p&gt;

&lt;p&gt;You can decide to search for anyone, either with their names, email addresses, LinkedIn profiles, or phone numbers. This article is going to cover how you can search for people with their full name alone.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;For the scope of this article, we’ll be using NextJS to bootstrap our app. This does not mean that the &lt;a href="https://create-react-app.dev/"&gt;create-react-app&lt;/a&gt; library wouldn’t work. You can make use of anyone that you find convenient. We’re using nextjs because of its simplicity. You can read more about NextJS &lt;a href="https://nextjs.org/docs/getting-started"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let us start by installing the dependencies that we need in this project. We’d start by creating a nextjs app. The command below does that for us.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app &lt;span class="o"&gt;[&lt;/span&gt;name-of-your-app]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’ll make use of the &lt;code&gt;"styled-components"&lt;/code&gt;  library for styling our app, and the &lt;code&gt;"axios"&lt;/code&gt; library to fetch data from the API. We wouldn’t be covering much of the styling aspect in this article. You can find the full app styles here.&lt;/p&gt;

&lt;p&gt;Let’s get the dependencies above by typing the command below into our terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install axios styled-components react-icons
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us have a look at the file structure of the app below. We’ll focus on the important files that we need in this app, so it’ll be concise.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;|--pages
|   |-- api
|   |   |-- users.js  
|   |-- _app.js
|   |-- index.js
|--src
|   |-- components
|   |     |-- Card.js
|__ .env.local
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#overview-of-the-components-in-our-nextjs-app"&gt;
  &lt;/a&gt;
  Overview of the components in our Next.js app
&lt;/h2&gt;

&lt;p&gt;In this section, we are going to see the different files that make up the architecture of this project, and their respective functions below.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;pages&lt;/code&gt; directory is where all the routing of the app takes place. This is an out-of-the-box feature of Nextjs. It saves you the stress of hard hard-coding your independent routes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;pages/api&lt;/code&gt;: the api directory enables you to have a backend for your nextjs app, inside the same codebase, instead of the common way of creating separate repositories for your REST or GraphQL APIs and deploying them on backend hosting platforms like Heroku, and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the &lt;code&gt;api&lt;/code&gt; directory, every file is treated as an API endpoint. If you look at the &lt;code&gt;api&lt;/code&gt; folder, you'll notice that we have a file called &lt;code&gt;user.js&lt;/code&gt; in it. &lt;/p&gt;

&lt;p&gt;That file becomes an endpoint, which means an API call can be performed using the path to the file as the base URL.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;pages/_app.js&lt;/code&gt;:  is where all our components get attached to the DOM. If you take a look at the component structure, you’ll see that all the components are passed as &lt;code&gt;pageProps&lt;/code&gt; to the &lt;code&gt;Component&lt;/code&gt; props too. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is like the &lt;code&gt;index.js&lt;/code&gt; file when using Create-React-App. The only difference here is that you are not hooking your app to the DOM node called “root”&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root), &amp;lt;App /&amp;gt;)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;index.js&lt;/code&gt; is the default route in the pages folder. That is where we'll be doing most of the work on this project. When you run the command below, it starts up a development server and the contents of &lt;code&gt;index.js&lt;/code&gt; are rendered on the web page.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Card.js&lt;/code&gt;: is the component that holds displays the data we get from the API on the webpage&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.env.local&lt;/code&gt;: is where we’re storing the API key that’ll enable us to consume this API.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#writing-the-serverside-api-call"&gt;
  &lt;/a&gt;
  Writing the server-side API call.
&lt;/h2&gt;

&lt;p&gt;In the previous section, we saw the files that we'll be interacting with and their specific functions. In this section, we would have a look at how we can consume the API.&lt;/p&gt;

&lt;p&gt;The reason why we're writing the API call at the server-side is for securing our API key, and Nextjs already makes it an easy task for us. &lt;/p&gt;

&lt;p&gt;With the API routes in Nextjs, we can perform our API calls without the fear of our API keys being revealed on the client-side. &lt;/p&gt;

&lt;p&gt;You may have been wondering what the essence of the environment variable in the &lt;code&gt;.env&lt;/code&gt; file is, in this scenario. &lt;/p&gt;

&lt;p&gt;The environment variable (which is our API key) can only be available in &lt;code&gt;development&lt;/code&gt; mode. That is why we can do something like &lt;code&gt;process.env.api_key&lt;/code&gt;, and get access to the environment variable. &lt;/p&gt;

&lt;p&gt;But, the moment you deploy your app to platforms like netlify or vercel, the mode changes to &lt;code&gt;production&lt;/code&gt;, which makes the nodejs &lt;code&gt;process&lt;/code&gt; object unavailable on the client-side. &lt;/p&gt;

&lt;p&gt;Now that you have seen the reason why need to write a server-side API call. Let's get to it right away.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// users.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;baseUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://api.kelvindata.com/rest/v1/search-v2?    lastName=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;firstName=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;apiKey=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;baseUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the snippet above, we created an asynchronous function called, &lt;code&gt;users&lt;/code&gt;. It takes in two arguments, &lt;code&gt;req&lt;/code&gt; which stands for “request” in full, and &lt;code&gt;res&lt;/code&gt; which is “response” in full.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;req&lt;/code&gt; argument has some properties, (or “middlewares” as the Nextjs docs calls it) that can be accessed when we’re consuming our API, one of them is &lt;code&gt;req.query&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;You’ll notice that we destructured the &lt;code&gt;query&lt;/code&gt; property in the snippet above, so we would be able to pass those variables as values to the query properties of the API endpoint. Take a look at it below. &lt;/p&gt;

&lt;p&gt;You can read more about the in-built middlewares that comes with the &lt;code&gt;req&lt;/code&gt; argument &lt;a href="https://nextjs.org/docs/api-routes/api-middlewares"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The base URL takes the destructured query properties as values and the &lt;code&gt;apiKey&lt;/code&gt; is gotten from the &lt;code&gt;.env&lt;/code&gt; file via the nodejs &lt;code&gt;process&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;The destructured query properties are taken as requests that will be sent from the input values of the form component (which we’ll be creating in the next section) to the API, once it is received, we get a response that corresponds with the request we made.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;baseUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://api.kelvindata.com/rest/v1/searchv2?  lastName=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;firstName=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;apiKey=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next process the function has to complete is the response from the asynchronous API call. The snippet below assigns the API call which we are perfoming with the &lt;code&gt;axios&lt;/code&gt;  library to a variable, &lt;code&gt;response&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On the next line, the &lt;code&gt;res&lt;/code&gt; argument uses the &lt;code&gt;status&lt;/code&gt; method which is used to send a JSON response to us, then we can assign the response variable as a property of &lt;code&gt;data&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can read more about the various HTTP status codes &lt;a href="https://dillionmegida.com/p/http-status-codes/"&gt;here&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;baseUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-the-form-component"&gt;
  &lt;/a&gt;
  Building the form component
&lt;/h2&gt;

&lt;p&gt;In the previous section, we saw how we can write our API calls on the server-side. we’ll be using that API call in this section as we create the form component that will send the first and last name values from the input fields to API query parameters.&lt;/p&gt;

&lt;p&gt;We’ll be keeping the code snippets short so that this article doesn’t get too long. Let’s start by taking a look at the content of &lt;code&gt;index.js&lt;/code&gt; below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Card&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/Card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Wrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="s2"&gt;`
  padding: 0 100px 0 100px;
  height: 100%;
  width: 100%;

  // remaining style goes here
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserAPIComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUserData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFirstName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLastName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getuserData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// api call goes here&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="nx"&gt;getuserData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Wrapper&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Search&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;Anyone&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firstname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;First&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
          &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firstname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;First Name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setFirstName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lastname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Lastname&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
          &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lastname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lastname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setLastName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;btn-container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Search&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;results-container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;userData&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Card&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;userData&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;loading...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Wrapper&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;UserAPIComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since this is a React component that is receiving data from an API endpoint, it should have an internal state of its own. The snippet below shows how we defined the different state variables with React Hooks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUserData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFirstName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLastName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; variables receive the text values that are typed into the input field by anyone.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;userData&lt;/code&gt; state variable helps us store the response that we get from the API call in an array, so we can use the JavaScript &lt;code&gt;map()&lt;/code&gt; method to render the response on the webpage.&lt;/p&gt;

&lt;p&gt;Notice how we’re using &lt;code&gt;axios&lt;/code&gt; to get data from the API endpoint, and how the base URL is not a typical &lt;code&gt;https://&lt;/code&gt; URL, instead, it is the path to the file where we made the server-side API call before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getuserData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/api/usersfirstName=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;lastName=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="na"&gt;Accept&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setUserData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We repeat almost the same process in the &lt;code&gt;user.js&lt;/code&gt; file, but this time around with the necessary fetch headers and assignment of the state variables to the API query parameters.&lt;/p&gt;

&lt;p&gt;In the second &lt;code&gt;.then()&lt;/code&gt; method, we ensured that the response from the API call is treated as an array, hence the need for &lt;code&gt;response.data.data&lt;/code&gt;. If we had stopped at &lt;code&gt;setUserData(response.data)&lt;/code&gt;, JavaScript will throw a type-error whenever we try to do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;userData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="c1"&gt;// some JSX&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is because &lt;code&gt;response.data&lt;/code&gt; is having an object data-type, and the &lt;code&gt;map()&lt;/code&gt; operation does not work on JavaScript objects, only arrays. &lt;/p&gt;

&lt;p&gt;The  &lt;code&gt;handleSubmit&lt;/code&gt; handler ensures that the webpage isn’t reloaded at every API call, upon the click of the search button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;getuserData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-the-card-component"&gt;
  &lt;/a&gt;
  Building the card component
&lt;/h2&gt;

&lt;p&gt;The card component serves as the presentational component of the app. Data gets passed down to it through the usage of props in React. &lt;/p&gt;

&lt;p&gt;Once again, for the sake of brevity, we’ll not be taking a look at all the major content of the card component. Let’s take a look at the modified structure below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FiUser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-icons/fi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Wrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  height: 56%;
  width: 32%;
  margin: 0 15px 30px 0;
  background: #fff;
  box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.05);
  border-radius: 8px;
  padding: 0 15px 0 15px;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Card&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
           &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Wrapper&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"users-card"&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
             &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                 &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FiUser&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
               &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                 &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;full&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; 
                   &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;full&lt;/span&gt; 
                   &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;no name data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
             &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
             &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Title: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;employments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
             &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
               Organization:
                &lt;span class="si"&gt;{&lt;/span&gt;
              &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;employments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;organization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
              &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;employments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;organization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
              &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;no employment info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
             &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Wrapper&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;result&lt;/code&gt; prop is passed to the &lt;code&gt;Card&lt;/code&gt; component, which in turn, gets utilized in the App component (in &lt;code&gt;index.js&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;The ternary operator checks for the validity of &lt;code&gt;userData&lt;/code&gt;, if it is &lt;code&gt;true&lt;/code&gt;, the &lt;code&gt;Card&lt;/code&gt; component is rendered. If it isn’t, the &lt;code&gt;loading…&lt;/code&gt; string is displayed on the webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"results-container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;userData&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; 
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt; &lt;span class="na"&gt;result&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;userData&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; 
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;loading...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You’ll also notice how we’re performing conditional rendering with the ternary operator in the “Organization” paragraph below. &lt;/p&gt;

&lt;p&gt;If there isn’t any data that corresponds with a user’s organization details, the &lt;code&gt;"no employment info"&lt;/code&gt; string is displayed. If there is, the user’s organization is displayed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  Organization:
  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;employments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;organization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;employments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;organization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;no employment info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The video below shows the end result of what we have been building all along from the beginning of this article. You can always check your browser’s dev tools, move to the network tab, to see if the API key is showing or not.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O21FjgbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5hyrryqxgkud38fffeg7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O21FjgbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5hyrryqxgkud38fffeg7.gif" alt="kelvin data demo app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to have a look at the code base, here’s the &lt;a href="https://github.com/Caleb335/article-example-projects/blob/master/src/container/users/index.js"&gt;link&lt;/a&gt; to it. &lt;/p&gt;

&lt;p&gt;The link points to the specific file (of this article) in the repository. You can check out my other article demos &lt;a href="https://exdemo.netlify.app"&gt;here&lt;/a&gt; and also have a look at the repository as a whole.&lt;/p&gt;

&lt;p&gt;If you read this article up till this point, thank you for doing so, and please don’t forget to share it.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>nextjs</category>
      <category>react</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
