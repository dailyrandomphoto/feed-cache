<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Serverless Framework vs SAM vs AWS CDK</title>
      <author>Sebastian Bille</author>
      <pubDate>Fri, 07 May 2021 13:24:30 +0000</pubDate>
      <link>https://dev.to/tastefulelk/serverless-framework-vs-sam-vs-aws-cdk-1g9g</link>
      <guid>https://dev.to/tastefulelk/serverless-framework-vs-sam-vs-aws-cdk-1g9g</guid>
      <description>&lt;p&gt;When building serverless apps on AWS today there's a couple of different toolkits available that helps you develop, test and deploy your project. &lt;a href="https://github.com/serverless/serverless"&gt;Serverless Framework&lt;/a&gt; was the king for a long time but both &lt;a href="https://github.com/aws/serverless-application-model"&gt;AWS SAM&lt;/a&gt; and the &lt;a href="https://github.com/aws/aws-cdk"&gt;CDK&lt;/a&gt; have been increasing in popularity lately. But which one is the best to use in a new project and what's the difference between them anyway. After all, they're all just tools to produce Cloudformation templates anyway, right?&lt;/p&gt;

&lt;p&gt;To get an understanding of the strengths and disadvantages of each option, I decided to build an identical example application across all three and compare the approaches.&lt;/p&gt;

&lt;p&gt;By the end of this post, I hope you'll have a basic understanding of the Serverless Framework, AWS SAM, and the CDK and that you'll be able to make an educated choice on what'll suit your next project best based on your needs and preferences. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#our-example-application"&gt;
  &lt;/a&gt;
  Our Example Application
&lt;/h3&gt;

&lt;p&gt;To keep it interesting, the app we're using to showcase each framework certainly isn't your typical ToDo-app - it's a ToDont-app. A user can send a POST request to an API Gateway describing something they really shouldn't do, a Lambda function takes the ToDont-item and puts it on an SQS queue that acts as a buffer before finally another Lambda function consumes the buffer queue, pretends to do some heavy processing on the item and persists it in a DynamoDB table. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0WjcTDN1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pl2n55k14zj1brd2tshz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0WjcTDN1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pl2n55k14zj1brd2tshz.png" alt="Web App Reference Architecture (3)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The application architecture is simple enough to easily comprehend but "complex" enough to resemble an actual app. To keep the code compact and readable, best practices and common sense have sometimes had to be omitted. All configs are complete and fully functional however and if you want to play around with the examples and deploy the apps yourself, you can find the code and the full examples &lt;a href="https://github.com/TastefulElk/sls-vs-sam-vs-cdk"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our POST Lambda function looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/post.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SQS&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-sdk/client-sqs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SQS&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;QueueUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;QUEUE_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;MessageBody&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;200&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the Process Lambda looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/process.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;DynamoDB&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-sdk/client-dynamodb&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;marshall&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@aws-sdk/util-dynamodb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ddb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;DynamoDB&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Records&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ddb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;putItem&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;TableName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TABLE_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;marshall&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;If you want to follow along and deploy the apps, please note the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Each of the comparisons below assumes that you've installed the following packages as dependencies in your project&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@aws-sdk/client-dynamodb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@aws-sdk/util-dynamodb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@aws-sdk/client-sqs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;While Yarn is used as the package manager &amp;amp; script runner below you could of course use NPM instead with the corresponding commands.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All of the examples assume that you've got an &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html"&gt;AWS credentials default profile&lt;/a&gt; configured&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#serverless-framework"&gt;
  &lt;/a&gt;
  Serverless Framework
&lt;/h2&gt;

&lt;p&gt;Serverless Framework ("Serverless" below) has been around for a long time now and has long been the preferred framework for a large part of the community. It's a simple tool that abstracts away and simplifies many of the nastier parts of CloudFormation and comes packed with features to simplify testing and deployment of your app. &lt;/p&gt;

&lt;p&gt;The preferred way to run the Serverless CLI is to install it as a (dev)dependency in your project by running &lt;code&gt;yarn add serverless -D&lt;/code&gt; and then all that's missing is a &lt;code&gt;serverless.yml&lt;/code&gt; file which is used to define your application and its infrastructure. You can find the full configuration reference &lt;a href="https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml/"&gt;here&lt;/a&gt; but in short, the serverless.yml consists of two parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your Serverless Framework configuration is used to describe your application stack, AWS environment, and lambda functions&lt;/li&gt;
&lt;li&gt;Any additional infrastructure defined as CloudFormation resources, such as our DynamoDB table and SQS queue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's how the &lt;code&gt;serverless.yml&lt;/code&gt; for our application looks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;// serverless.yml&lt;/span&gt;
&lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sls-todont&lt;/span&gt;

&lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws&lt;/span&gt;
  &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;eu-north-1&lt;/span&gt;
  &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nodejs14.x&lt;/span&gt;
  &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Inject environment variables&lt;/span&gt;
    &lt;span class="na"&gt;TABLE_NAME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${self:custom.tableName}&lt;/span&gt;
    &lt;span class="na"&gt;QUEUE_URL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;todontsQueue&lt;/span&gt;
  &lt;span class="na"&gt;iamRoleStatements&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Configure IAM role statements&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
      &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sqs:sendMessage&lt;/span&gt;
      &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${self:custom.queueArn}&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
      &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dynamodb:putItem&lt;/span&gt;
      &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${self:custom.tableArn}&lt;/span&gt;

&lt;span class="na"&gt;custom&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Custom variables that we can reference elsewhere&lt;/span&gt;
  &lt;span class="na"&gt;tableName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${self:service}-table&lt;/span&gt;
  &lt;span class="na"&gt;queueName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${self:service}-queue&lt;/span&gt;
  &lt;span class="na"&gt;tableArn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Get ARN of table with CloudFormation helper&lt;/span&gt;
    &lt;span class="s"&gt;Fn::GetAtt: [todontsTable, Arn]&lt;/span&gt;
  &lt;span class="na"&gt;queueArn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Get ARN of queue with CloudFormation helper&lt;/span&gt;
    &lt;span class="s"&gt;Fn::GetAtt: [todontsQueue, Arn]&lt;/span&gt;

&lt;span class="na"&gt;functions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Define our two Lambda functions&lt;/span&gt;
  &lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/post.handler&lt;/span&gt;
    &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Invoke on post requests to /todonts&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;post&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;todonts&lt;/span&gt;
  &lt;span class="na"&gt;process&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/process.handler&lt;/span&gt;
    &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Consume SQS queue&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;sqs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;arn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${self:custom.queueArn}&lt;/span&gt;

&lt;span class="c1"&gt;# CloudFormation below to define our infrastructure resources&lt;/span&gt;
&lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
  &lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;todontsTable&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::DynamoDB::Table&lt;/span&gt;
      &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;TableName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${self:custom.tableName}&lt;/span&gt;
        &lt;span class="na"&gt;AttributeDefinitions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;AttributeName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;id&lt;/span&gt;
            &lt;span class="na"&gt;AttributeType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;S&lt;/span&gt;
        &lt;span class="na"&gt;KeySchema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;AttributeName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;id&lt;/span&gt;
            &lt;span class="na"&gt;KeyType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;HASH&lt;/span&gt;
        &lt;span class="na"&gt;BillingMode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;PAY_PER_REQUEST'&lt;/span&gt;
    &lt;span class="na"&gt;todontsQueue&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::SQS::Queue&lt;/span&gt;
      &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;QueueName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${self:custom.queueName}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to deploy our application, all we need to do is run &lt;code&gt;yarn serverless deploy&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The Serverless CLI includes some utility features that can be used to print or tail the logs of a deployed function by running &lt;code&gt;yarn serverless logs --function process [--tail]&lt;/code&gt; or even invoke the function with &lt;code&gt;yarn serverless invoke --function process&lt;/code&gt;. Most of the time during development, however, you're not going to be invoking the function. Instead, you'll let Serverless emulate and run the functions locally and you can do that by running &lt;code&gt;yarn serverless invoke local --function post&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;➕ &lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Large &amp;amp; helpful community&lt;/li&gt;
&lt;li&gt;The plugin ecosystem&lt;/li&gt;
&lt;li&gt;Simple configuration with neat variable support&lt;/li&gt;
&lt;li&gt;Great debugging and testing utilities&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;➖ &lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Most apps will need to resort to CloudFormation definitions for some parts of the infrastructure&lt;/li&gt;
&lt;li&gt;Hard to share configuration and components&lt;/li&gt;
&lt;li&gt;Only YAML configurations. It's technically supported to write the configuration in JS but the documentation for it is close to non-existent&lt;/li&gt;
&lt;li&gt;I've seen a lot of devs struggle with understanding where the line between Serverless configuration and CloudFormation configuration actually or why they have to change the syntax in the middle of the file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.serverless.com/framework/docs/getting-started/"&gt;Get started with Serverless Framework&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://serverless-stack.com/chapters/what-does-this-guide-cover.html"&gt;Serverless Stack tutorial for deplying a production Serverless app&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-sam"&gt;
  &lt;/a&gt;
  AWS SAM
&lt;/h2&gt;

&lt;p&gt;Much like Serverless Framework, &lt;a href="https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html"&gt;SAM&lt;/a&gt; (or the Serverless Application Model) is a combination of an abstraction layer to simplify CloudFormation and a CLI with utilities to test and deploy your app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install-mac.html"&gt;Here's&lt;/a&gt; the official install instructions for the SAM CLI which is installed globally on your system. SAM uses a &lt;code&gt;samconfig.toml&lt;/code&gt; file to describe information &lt;em&gt;about&lt;/em&gt; your app, such as the name and where and how it should be deployed, and a &lt;code&gt;template.yml&lt;/code&gt; file to describe the actual resources your app will use. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;template.yml&lt;/code&gt; format follows the CloudFormation &lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html"&gt;template anatomy&lt;/a&gt; templates but with &lt;a href="https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy.html"&gt;a few added fields&lt;/a&gt;. Let's have a look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;// template.yml&lt;/span&gt;
&lt;span class="c1"&gt;# Boilerplate to identify template as SAM template&lt;/span&gt;
&lt;span class="na"&gt;AWSTemplateFormatVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2010-09-09&lt;/span&gt;
&lt;span class="na"&gt;Transform&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Serverless-2016-10-31&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sam-todonts&lt;/span&gt;

&lt;span class="na"&gt;Globals&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Function&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Runtime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nodejs14.x&lt;/span&gt;
    &lt;span class="na"&gt;Environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Inject environment variables&lt;/span&gt;
      &lt;span class="na"&gt;Variables&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;QUEUE_URL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
          &lt;span class="na"&gt;Ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TodontsQueue&lt;/span&gt;
        &lt;span class="na"&gt;TABLE_NAME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;Ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TodontsTable&lt;/span&gt;

&lt;span class="na"&gt;Parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Parameters which can be filled by the CLI on deploy&lt;/span&gt;
  &lt;span class="na"&gt;TableName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Name of DynamoDB table&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
    &lt;span class="na"&gt;Default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sam-todonts-table&lt;/span&gt;
  &lt;span class="na"&gt;QueueName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Name of SQS queue&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
    &lt;span class="na"&gt;Default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sam-todonts-queue&lt;/span&gt;

&lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
  &lt;span class="na"&gt;PostFunction&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Serverless::Function&lt;/span&gt;
    &lt;span class="na"&gt;FunctionName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sam-todonts-post&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/post.handler&lt;/span&gt;
      &lt;span class="na"&gt;Events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Post&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#  Invoke on post requests to /todonts&lt;/span&gt;
          &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;HttpApi&lt;/span&gt;
          &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/todonts&lt;/span&gt;
            &lt;span class="na"&gt;Method&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;post&lt;/span&gt;
      &lt;span class="na"&gt;Policies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;SQSSendMessagePolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Use predefined IAM policy&lt;/span&gt;
            &lt;span class="na"&gt;QueueName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="s"&gt;Fn::GetAtt: [TodontsQueue, QueueName]&lt;/span&gt;

  &lt;span class="na"&gt;ProcessFunction&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Serverless::Function&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/process.handler&lt;/span&gt;
      &lt;span class="na"&gt;Events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# Consume SQS queue&lt;/span&gt;
        &lt;span class="na"&gt;SQSQueueEvent&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SQS&lt;/span&gt;
          &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Queue&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="s"&gt;Fn::GetAtt: [TodontsQueue, Arn]&lt;/span&gt;
      &lt;span class="na"&gt;Policies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Use predefined IAM policy&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;DynamoDBWritePolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;TableName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;Ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TodontsTable&lt;/span&gt;

  &lt;span class="na"&gt;TodontsTable&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::DynamoDB::Table&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;TableName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sam-todonts-table&lt;/span&gt;
      &lt;span class="na"&gt;AttributeDefinitions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;AttributeName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;id&lt;/span&gt;
          &lt;span class="na"&gt;AttributeType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;S&lt;/span&gt;
      &lt;span class="na"&gt;KeySchema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;AttributeName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;id&lt;/span&gt;
          &lt;span class="na"&gt;KeyType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;HASH&lt;/span&gt;
      &lt;span class="na"&gt;BillingMode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PAY_PER_REQUEST&lt;/span&gt;

  &lt;span class="na"&gt;TodontsQueue&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::SQS::Queue&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;QueueName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sam-todonts-queue&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The configuration is a bit verbose but luckily the CLI can help you with a place to start by running &lt;code&gt;sam init&lt;/code&gt; and answering a few questions about what your planning to build.&lt;/p&gt;

&lt;p&gt;We can generate the &lt;code&gt;samconfig.toml&lt;/code&gt;file and deploy at the same time by running   &lt;code&gt;sam deploy --guided&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Again, much like the Serverless Framework CLI, SAM comes loaded with utility features to test and debug your app. &lt;code&gt;sam local invoke [functionName]&lt;/code&gt;  can be used to run a Lambda function, or you can start a local HTTP server that hosts your function by running &lt;code&gt;sam local start-api&lt;/code&gt;.  You can also easily fetch the logs from a deployed function by running &lt;code&gt;sam logs --name [functionName]&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The great thing about separating the definition of the app and how the app is built in two different files is that the &lt;code&gt;template.yml&lt;/code&gt; file can be written very generically so that it can be shared and re-used, you'll just have a different &lt;code&gt;samconfig.toml&lt;/code&gt; in each project. SAM also integrates very well with &lt;a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/welcome.html"&gt;CodeBuild&lt;/a&gt; to enable blue-green deployments.&lt;/p&gt;

&lt;p&gt;➕ &lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enables sharing &amp;amp; re-use of templates&lt;/li&gt;
&lt;li&gt;Well integrated with AWS build pipelines&lt;/li&gt;
&lt;li&gt;Great debugging and testing utilities&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;➖ &lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Verbose configuration&lt;/li&gt;
&lt;li&gt;CLI is missing some features you'd expect, such as tearing down a deployed app. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-getting-started.html"&gt;Getting started with AWS SAM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://serverlessrepo.aws.amazon.com/applications"&gt;Serverless Application Repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://serverlessland.com/patterns"&gt;Serverless Patterns Collection&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-cdk"&gt;
  &lt;/a&gt;
  AWS CDK
&lt;/h2&gt;

&lt;p&gt;The AWS &lt;a href="https://aws.amazon.com/cdk/"&gt;Cloud Development Kit (CDK)&lt;/a&gt; isn't purely a tool for creating serverless apps, rather it's a full-blown infrastructure-as-code framework that allows you to use code, not config, to define your application. &lt;/p&gt;

&lt;p&gt;You can install the CDK CLI by running &lt;code&gt;yarn global add aws-cdk&lt;/code&gt; and then generate a starter project by running &lt;code&gt;cdk init app --language --language typescript&lt;/code&gt;. There's a bunch of project configuration files and boilerplate that's generated when you run the init command but let's have a look at how the &lt;code&gt;lib/cdk-stack.ts&lt;/code&gt; file looks like after we've described our ToDont-app in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// lib/cdk-stack.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-lambda-nodejs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-sqs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dynamodb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-dynamodb&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ApiEventSource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SqsEventSource&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-lambda-event-sources&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Runtime&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-lambda&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CdkStack&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stack&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Construct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StackProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// define our DynamoDB table&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dynamoTable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;dynamodb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cdk-todonts-table&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;tableName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cdk-todonts-table&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;partitionKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;dynamodb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AttributeType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STRING&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// define our SQS buffer queue&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sqsBuffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cdk-todonts-queue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;queueName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cdk-todonts-queue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// define our processing lambda&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;processLambda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NodejsFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cdk-todonts-process&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODEJS_14_X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;handler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/process.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SqsEventSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sqsBuffer&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
      &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;TABLE_NAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;dynamoTable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tableName&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// grant write access for the processing lambda to our dynamo table&lt;/span&gt;
    &lt;span class="nx"&gt;dynamoTable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;grantWriteData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;processLambda&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// define the lambda backing our API&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postLambda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NodejsFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cdk-todonts-post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODEJS_14_X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/post.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;handler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ApiEventSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/todonts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
      &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;QUEUE_URL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sqsBuffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queueUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// grant write access to the SQS buffer queue for our API lambda&lt;/span&gt;
    &lt;span class="nx"&gt;sqsBuffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;grantSendMessages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postLambda&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The basic building blocks of a CDK application are called &lt;a href="https://docs.aws.amazon.com/cdk/latest/guide/constructs.html"&gt;constructs&lt;/a&gt; which represent a "cloud component", whether that's a single service instance such as an SQS Queue or a set of services encapsulated in a component. Constructs can then be shared and reused between projects and there's a fantastic community that has built a massive collection of high-quality components for you to use. Having the app and its infrastructure described fully in code also means that we can &lt;a href="https://docs.aws.amazon.com/cdk/latest/guide/testing.html"&gt;write actual tests&lt;/a&gt; against our setup - pretty darn cool, huh?&lt;/p&gt;

&lt;p&gt;Before we can deploy the app for the first app, we need to &lt;a href="https://docs.aws.amazon.com/cdk/latest/guide/bootstrapping.html"&gt;bootstrap the AWS environment&lt;/a&gt; (account &amp;amp; region combination) to provision some resources that the CDK uses to deploy the app. After that, we can run &lt;code&gt;cdk deploy&lt;/code&gt; to deploy our application.&lt;/p&gt;

&lt;p&gt;The CDK CLI doesn't bring the same utility around testing and debugging as SAM and Serverless does but it is possible to &lt;a href="https://docs.aws.amazon.com/cdk/latest/guide/sam.html"&gt;use the SAM CLI together with the CDK&lt;/a&gt; to help bridge the gap. There's also a newcomer on the block, &lt;a href="https://docs.serverless-stack.com/"&gt;Serverless-Stack&lt;/a&gt;, an extension of the CDK, that brings a lot of testing utility and serverless specific constructs.&lt;/p&gt;

&lt;p&gt;➕ &lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enables sharing &amp;amp; re-use of components&lt;/li&gt;
&lt;li&gt;Large &amp;amp; helpful community&lt;/li&gt;
&lt;li&gt;Makes the infrastructure testable&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/aws/aws-cdk#aws-cloud-development-kit-aws-cdk"&gt;You can (likely) use the same programming language&lt;/a&gt; to define the infrastructure of your application as your actual application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;➖ &lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Need to use another tool, such as SAM or the AWS CLI, if you want to invoke or print the logs of a deployed function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/cdk/latest/guide/getting_started.html"&gt;Getting started with the AWS CDK&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cdkpatterns.com/"&gt;CDK Patterns&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.cdkday.com/"&gt;CDK Day&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;There's a lot that's happening in this space at the moment and while I think these are the three most prominent players right now,  alternatives popping up left and right. Each framework has its own strengths and benefits and there's rarely a wrong or right when choosing which one will work best in your project.&lt;/p&gt;

&lt;p&gt;Please let me know in the comments which one is your favorite and why! &lt;/p&gt;

&lt;p&gt;If you enjoyed this post and want to see more, follow me on Twitter at &lt;a href="https://twitter.com/tastefulelk"&gt;@TastefulElk&lt;/a&gt; where I frequently write about serverless tech, AWS, and developer productivity!&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>aws</category>
      <category>cdk</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Your first steps with Express.js</title>
      <author>Eric Chapman</author>
      <pubDate>Fri, 07 May 2021 13:19:33 +0000</pubDate>
      <link>https://dev.to/ericchapman/your-first-steps-with-express-js-34op</link>
      <guid>https://dev.to/ericchapman/your-first-steps-with-express-js-34op</guid>
      <description>&lt;h1&gt;What is Express?&lt;/h1&gt;

&lt;p&gt;Express is a Fast, unopinionated, minimalist web framework for Node.js. It is also by far the most popular Node.js web framework.&lt;/p&gt;

&lt;h1&gt;What we can do with Espress?&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Web Application: Express is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;APIs: With a myriad of HTTP utility methods and middleware at your disposal, creating a robust API is quick and easy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Espress is not a frontend framework like React or Vue. Express is a backend framework that will complement a frontend framework to build full stack applications&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Express prerequisites?&lt;/h1&gt;

&lt;p&gt;To use Express we need a working version of node.js already install on our machine. &lt;/p&gt;

&lt;p&gt;You also need to understand node.js basic concept. If you dont have this basic understanding, you can read this small series that cover all node.js setup and basic concept: &lt;a href="https://dev.to/ericchapman/node-js-101-part-1-what-is-node-js-1529"&gt;https://dev.to/ericchapman/node-js-101-part-1-what-is-node-js-1529&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Install and setup Express&lt;/h1&gt;

&lt;p&gt;First we will create a new folder and a start a new app, then we will install Espress. In your terminal execute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir discover_express
$ cd discover_express
$ touch app.js
$ npm init
$ npm install express
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Those command will create a new node app install with with Express packages.&lt;/p&gt;

&lt;h1&gt;Your first Node.js Server&lt;/h1&gt;

&lt;p&gt;We are now ready for our first line of code. Open app.js and type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code will initialize the app variable as a new express object.&lt;/p&gt;

&lt;p&gt;So now we can start the server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server running on localhost:5000...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;5000 is the port number. That value can be change.&lt;/p&gt;

&lt;h1&gt;Understand the basics of how your web browser communicates with the internet&lt;/h1&gt;

&lt;p&gt;To access a page on the internet, your browser must ask the server for the page it want (request), and then display that page to you (response). This protocol of requests and responses enables you view this page in your browser.&lt;/p&gt;

&lt;p&gt;For example, when you visit facebook.com/about, your browser request the about page from facebook server. &lt;/p&gt;

&lt;p&gt;Facebook server will then find and match your request path, will do the processing and send the response associate with this path. &lt;/p&gt;

&lt;p&gt;Here are more examples of different url path.&lt;/p&gt;

&lt;p&gt;root route: facebook.com&lt;br&gt;
profile: facebook.com/profile&lt;br&gt;
about: facebook.com/about&lt;br&gt;
login: facebook.com/login&lt;/p&gt;

&lt;h1&gt;GET and POST request&lt;/h1&gt;

&lt;p&gt;Your browser can ask for a page but your browser can also send data to the server (ex. login form). &lt;/p&gt;

&lt;p&gt;When the browser ask for information that's call a GET request. &lt;/p&gt;

&lt;p&gt;When a browser send data to the server that's call a POST request&lt;/p&gt;

&lt;p&gt;So asking for facebook/about page is a GET request. &lt;/p&gt;

&lt;h1&gt;But what if...&lt;/h1&gt;

&lt;p&gt;What append if the asked page is not present on the server. For example you ask for facebook.com/blabla&lt;/p&gt;

&lt;p&gt;The server will include a status code with every response he send back to the browser. &lt;/p&gt;

&lt;p&gt;If everything work as expected the status code is 200. If the page is not found the return status code will be 404. &lt;/p&gt;

&lt;p&gt;For reference here a list of some HTTP status codes:&lt;br&gt;
200 : OK (successful)&lt;br&gt;
401 : Unauthorized&lt;br&gt;
403 : Forbidden&lt;br&gt;
404 : Not found&lt;br&gt;
500 : Internal Server Error&lt;/p&gt;

&lt;h1&gt;I dont understand a word of what you just explain&lt;/h1&gt;

&lt;p&gt;It's totally possible and normal. It is very important you understand this base before going further. &lt;/p&gt;

&lt;p&gt;Here a link to a more complet tutorial: &lt;a href="https://academind.com/tutorials/how-the-web-works/"&gt;https://academind.com/tutorials/how-the-web-works/&lt;/a&gt;. &lt;/p&gt;

&lt;h1&gt;First client/server communication&lt;/h1&gt;

&lt;p&gt;In the first part of this post we create a node.js server with an express app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then made the server listen for incoming request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server running on localhost:5000...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that the server is listening. We can create a route to match a potential incoming request path.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This server is waiting for a request at the route '/' (root path). Note that the route is waiting for a GET request. (app.get)&lt;/p&gt;

&lt;p&gt;Once that request is receive, the server will send 'Hello World' as a response.&lt;/p&gt;

&lt;p&gt;Let's test all this. First Launch your server. From the terminal type: node app.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;span class="nx"&gt;Server&lt;/span&gt; &lt;span class="nx"&gt;running&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then open your favorite browser and go to localhost:5000. Hello World should be display.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hxqy7DB6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pmgwb31hkbjzjc1fap1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hxqy7DB6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pmgwb31hkbjzjc1fap1.png" alt="Hello World"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is possible to send a HTTP status codes with the response. That will indicate to the client that the request/response is a success or a failure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Status 200 is the number for a successful request!&lt;/p&gt;

&lt;h1&gt;HTML response&lt;/h1&gt;

&lt;p&gt;The server we create just send a response in plain test (Hello World). &lt;/p&gt;

&lt;p&gt;But it is possible to send back HTML or JSON.&lt;/p&gt;

&lt;p&gt;HTML Response&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now re-start the server. If your previous server is still running in the terminal. Press CTRL-C to cancel the server execution. You can now start the app to see the change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you refresh your browser at localhost:5000 you will now see Hello World but this time in big header h1 format!&lt;/p&gt;

&lt;h1&gt;JSON response&lt;/h1&gt;

&lt;p&gt;The server can also send back data to the browser. For example after a login the server can send back some user profile info.&lt;/p&gt;

&lt;p&gt;One of the standard way to send data back and forth is JSON.&lt;/p&gt;

&lt;p&gt;JSON (JavaScript Object Notation) is a standard text-based format for representing structured data based on JavaScript object syntax. &lt;/p&gt;

&lt;p&gt;It is commonly used for transmitting data in web applications (e.g., sending some data from the server to the client, so it can be displayed on a web page, or vice versa)&lt;/p&gt;

&lt;p&gt;JSON is often use with API. We will cover API in detail in the next lesson.&lt;/p&gt;

&lt;p&gt;To send a json response in express is very easy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike Taylor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The .json() convert and send a javascript object {} as JSON.&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;WOW congrats! You just create your first Web Server!&lt;/p&gt;

&lt;p&gt;That's it for today. Tomorrow the journey continue. We will start working on one of the most used case of express.js: building our first rest API... Stay tune!&lt;/p&gt;

&lt;p&gt;Follow me on Twitter: &lt;a href="https://twitter.com/justericchapman?ref_src=twsrc%5Etfw"&gt;Follow @justericchapman&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>SMART HOMES ARTIFICIAL INTELLIGENCE</title>
      <author>221910301044</author>
      <pubDate>Fri, 07 May 2021 13:13:27 +0000</pubDate>
      <link>https://dev.to/221910301044/smart-homes-artificial-intelligence-3fpn</link>
      <guid>https://dev.to/221910301044/smart-homes-artificial-intelligence-3fpn</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AIlSVsaI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fjxeul8xols96ul17x0s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AIlSVsaI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fjxeul8xols96ul17x0s.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Smart home technology has its applications in household appliances, home safety &amp;amp; security, lighting, and entertainment. Key industries have started integrating artificial intelligence with smart devices to enable connectivity among these devices.&lt;/p&gt;

&lt;p&gt;AI encompasses the ability to connect multiple IoT devices, coupled with superior processing and learning abilities, and use them to pre-empt human behavior. AI-powered smart home devices can interact with each other and acquire new data that assists in learning human habits. Data collected is used to predict the behavior of users and develop situational awareness, i.e., understand user preferences and change parameters accordingly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Digital Assistants&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;controlled through voice commands. Researchers are focused on bringing in innovation in the field of voice recognition technology that will further add value to voice control devices. Latest advancements in home automation systems can enable owners to gain access to hands-free channel surfing and control Bluetooth speakers. The emergence of the voice assistant feature also raises security concerns, as some researchers have managed to hack smart devices through inaudible.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TyIWXWVv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsj7qkfjtft2l764qtbe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TyIWXWVv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsj7qkfjtft2l764qtbe.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smoke Alarms to Think, Speak, and Alert the User with the Help of Artificial Intelligence&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sophisticated smoke alarms that can think and alert the user with the help of artificial intelligence are currently available in the market. Some of the smart features of smoke alarms include providing notification on phones regarding low battery and issuing alerts in case of smoke or carbon monoxide leaks, and pinpointing the location where there has been a fire or smoke outbreak. These alarms can also be put on silent mode. Smoke detectors use the voice alert feature to notify the first sign of smoke, which facilitates improved response during emergencies.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NBSgAlf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ceram1l6702bznyej0r.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NBSgAlf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ceram1l6702bznyej0r.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to use Multiple Bottom-sheets in Android Compose</title>
      <author>David</author>
      <pubDate>Fri, 07 May 2021 12:53:36 +0000</pubDate>
      <link>https://dev.to/davidibrahim/how-to-use-multiple-bottom-sheets-in-android-compose-382p</link>
      <guid>https://dev.to/davidibrahim/how-to-use-multiple-bottom-sheets-in-android-compose-382p</guid>
      <description>&lt;p&gt;After trying to refactor my project from the normal view system to Android Compose, I can really feel the difference between them.&lt;/p&gt;

&lt;p&gt;I feel Android Compose will for sure become the default way to build UI in native android, but it still have a lot of cons that Google engineers are trying to solve but till then, I am gonna write on how to solve one of them in this post and it is how to have multiple bottom-sheets in the same app.&lt;/p&gt;

&lt;p&gt;Before reading please be careful that this post applies to compose version &lt;code&gt;1.0.0-beta05&lt;/code&gt;.&lt;br&gt;
and is definitely related to these issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://issuetracker.google.com/issues/180247978"&gt;Integration Bottom sheets with navigation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://issuetracker.google.com/issues/179608120"&gt;composable dialog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If these two issues are not solved yet you can continue reading my post, if any of them are solved and it will change the way to support multiple bottom-sheets, I will write another post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;- Let's start by defining the bottom sheets that we are gonna use in our application&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BottomSheetScreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Screen1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;BottomSheetScreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Screen2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;BottomSheetScreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Screen3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="nc"&gt;BottomSheetScreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;-  We will have a mutable state of our current bottom sheet screen in the top composable function that will show the bottom sheet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Composable&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;MainLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;currentBottomSheet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;BottomSheetScreen&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;remember&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;mutableStateOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BottomSheetScreen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Screen1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;- We will use &lt;code&gt;BottomSheetScaffold&lt;/code&gt; to handle opening and closing the bottom sheet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;   &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;scaffoldState&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;rememberBottomSheetScaffoldState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="nc"&gt;BottomSheetScaffold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sheetPeekHeight&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scaffoldState&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scaffoldState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;sheetShape&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;BottomSheetShape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;sheetContent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;SheetLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentBottomSheet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;closeSheet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;paddingValues&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Modifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paddingValues&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
                &lt;span class="nc"&gt;MainContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openSheet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt;- Now, We will define two lambdas for opening and closing the bottom sheet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;closeSheet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Unit&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;scaffoldState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bottomSheetState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;openSheet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BottomSheetScreen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Unit&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;currentBottomSheet&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;
        &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;scaffoldState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bottomSheetState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Summing it up, our code should be similar to that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@OptIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ExperimentalMaterialApi&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@Composable&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;MainLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;scope&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;rememberCoroutineScope&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;scaffoldState&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;rememberBottomSheetScaffoldState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;currentBottomSheet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;BottomSheetScreen&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;remember&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;mutableStateOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BottomSheetScreen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Screen1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;



    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;closeSheet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Unit&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;scaffoldState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bottomSheetState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;openSheet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BottomSheetScreen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Unit&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;currentBottomSheet&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;
        &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;scaffoldState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bottomSheetState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;BottomSheetScaffold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sheetPeekHeight&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scaffoldState&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scaffoldState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;sheetShape&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;BottomSheetShape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;sheetContent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;SheetLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentBottomSheet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;closeSheet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;paddingValues&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Modifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paddingValues&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
                &lt;span class="nc"&gt;MainContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openSheet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;5&lt;/strong&gt;- Now we will define our &lt;code&gt;SheetLayout&lt;/code&gt;, as we can see from the above code that it takes two parameters &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The current bottom sheet&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;closeSheet&lt;/code&gt; lambda, because if we want to have a button to close the sheet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It should be similar to that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Composable&lt;/span&gt;
&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;SheetLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentScreen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;BottomSheetScreen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;onCloseBottomSheet&lt;/span&gt; &lt;span class="p"&gt;:()-&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;Unit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;BottomSheetWithCloseDialog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;onCloseBottomSheet&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentScreen&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nc"&gt;BottomSheetScreen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Screen1&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Screen1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nc"&gt;BottomSheetScreen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Screen2&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Screen2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nc"&gt;BottomSheetScreen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Screen3&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Screen3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currentScreen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;6- Finally last step we define &lt;code&gt;MainContent&lt;/code&gt; composable function that takes &lt;code&gt;openSheet&lt;/code&gt; as a parameter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Composable&lt;/span&gt;
&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;MainContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;openSheet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BottomSheetScreen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Unit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Modifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fillMaxSize&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="n"&gt;verticalArrangement&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Arrangement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SpaceEvenly&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;horizontalAlignment&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Alignment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CenterHorizontally&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"This is Main Content"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;onClick&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;openSheet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BottomSheetScreen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Screen1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Open bottom sheet 1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;onClick&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;openSheet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BottomSheetScreen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Screen2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Open bottom sheet 2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;onClick&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;openSheet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BottomSheetScreen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Screen3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"this is an argument"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Open bottom sheet 2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now we can easily build an app that contains multiple bottom sheets as below&lt;br&gt;
&lt;a href="https://i.giphy.com/media/mBQRMdEDMoKa9F7fvG/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/mBQRMdEDMoKa9F7fvG/giphy.gif" alt="ss"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; Here is the whole project used in the Demo on &lt;a href="https://github.com/DavidIbrahim/MultipleBottomSheetsCompose"&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading 🐱‍🏍&lt;/p&gt;

</description>
      <category>android</category>
      <category>kotlin</category>
      <category>jetpackcompose</category>
    </item>
    <item>
      <title>👥 Accelerate your learning and grow your network with Eddiehub 👥</title>
      <author>Kaiwalya Koparkar</author>
      <pubDate>Fri, 07 May 2021 12:23:58 +0000</pubDate>
      <link>https://dev.to/kaiwalyakoparkar/accelerate-your-learning-and-grow-your-network-with-eddiehub-1icn</link>
      <guid>https://dev.to/kaiwalyakoparkar/accelerate-your-learning-and-grow-your-network-with-eddiehub-1icn</guid>
      <description>&lt;p&gt;Hello Everyone, This blog is special. This blog is about &lt;strong&gt;Eddie Jaoude&lt;/strong&gt; and &lt;strong&gt;EddieHub&lt;/strong&gt;. I have been a part of &lt;strong&gt;EddieHub&lt;/strong&gt; for the past four months now and the journey is amazing so far. I have become a better version of myself in this short span of time. Do you want to become a better version of yourself in front of your local community / Profession / World then follow along with me in this blog?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-is-eddie-jaoude"&gt;
  &lt;/a&gt;
  Who is Eddie Jaoude?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MIQNrw6v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3m34sjhf1ukzwj4ncjvt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MIQNrw6v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3m34sjhf1ukzwj4ncjvt.jpg" alt="Eddie Jaoude"&gt;&lt;/a&gt;&lt;br&gt;
Eddie is GitHub Star and GitHub Star of the Year!&lt;br&gt;
He has worked in developer relations as a senior software engineer and senior developer advocate for over 15 years. He is passionate about open source, culture, and community, best practices, speaking at conferences around the world to promote these topics, and documenting all of this for the wider community. He is also passionate about diversity and inclusion in tech and supports a number of amazing communities. You can contact him on &lt;a href="https://twitter.com/eddiejaoude"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/eddiejaoude/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/eddiejaoude/"&gt;GitHub&lt;/a&gt; | &lt;a href="http://discord.eddiehub.org/"&gt;Discord&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-eddiehub"&gt;
  &lt;/a&gt;
  What is &lt;strong&gt;EddieHub&lt;/strong&gt;?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yXHuAmJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0venq4mybacmzd7c81q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yXHuAmJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0venq4mybacmzd7c81q.png" alt="EddieHub moscout"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;EddieHub&lt;/strong&gt; is an open-source organization focusing on reciprocal collaboration between members of the tech community; to encourage and promote communication, best practices, and technical expertise in an inclusive and welcome environment.&lt;a href="https://www.eddiehub.org/"&gt;Visit&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#our-vision"&gt;
  &lt;/a&gt;
  Our vision
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We believe Open Source is for everyone, yes you!
OPEN SOURCE is NOT about code, it is about people and collaboration&lt;/li&gt;
&lt;li&gt;We are invested in getting you those green squares on GitHub! Contributing to Open Source Software (OSS) is a great way for you to learn, work with different people and also network. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-involved-with-eddiehub"&gt;
  &lt;/a&gt;
  How to get involved with &lt;strong&gt;EddieHub&lt;/strong&gt;?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Sign In/ Login to your GitHub account&lt;/li&gt;
&lt;li&gt;Click &lt;a href="https://github.com/EddieHubCommunity/support/issues/new?assignees=&amp;amp;labels=invite+me+to+the+organisation&amp;amp;template=invitation.md&amp;amp;title=Please+invite+me+to+the+GitHub+Community+Organization"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Fill out the details on the issue template and submit&lt;/li&gt;
&lt;li&gt;You will receive an invitation immediately. Click on the link and accept the invitation (The invitation link may come to email as well so keep an eye on it as well)&lt;/li&gt;
&lt;li&gt;Make sure you go &lt;a href="https://github.com/orgs/EddieHubCommunity/people"&gt;here&lt;/a&gt;, search your name and make the visibility public so that it shows up on your profile
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1VPf-sWy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9slv88uycwcfgrv74hx.png" alt="Visibility on GitHub"&gt;
&lt;/li&gt;
&lt;li&gt;Then join up to Discord server &lt;a href="http://discord.eddiehub.org/"&gt;here&lt;/a&gt;. Trust me this is where the entire community is active 24/7.&lt;/li&gt;
&lt;li&gt;Want to showcase your membership with &lt;strong&gt;EddieHub&lt;/strong&gt; then use #EddieHub tag on Insta, LinkedIn, Twitter.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#why-eddiehub-community"&gt;
  &lt;/a&gt;
  Why &lt;strong&gt;EddieHub&lt;/strong&gt; Community?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#opportunities-for-all-beginners-students-professionals"&gt;
  &lt;/a&gt;
  Opportunities for All (Beginners/ Students/ Professionals):
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#networking-opportunities-"&gt;
  &lt;/a&gt;
  Networking Opportunities :
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O-1gnTyN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ehchdw6m5gmo7plyx9o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O-1gnTyN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ehchdw6m5gmo7plyx9o.jpg" alt="Networking image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You'll find awesome people here who will guide you and if you're a beginner in open source.&lt;/li&gt;
&lt;li&gt;If you get stuck somewhere feel free to ask for help in the community, you'll find someone who can help you for sure and others will learn along too!&lt;/li&gt;
&lt;li&gt;We have a whole bunch of discord channels, events especially for beginners who want to scale and grow more.&lt;/li&gt;
&lt;li&gt;Also there are many giveaways happening all the time. You can take part in them and win swags, conference tickets, discount coupons, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#personal-growth-opportunities-"&gt;
  &lt;/a&gt;
  Personal Growth Opportunities :
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xIiUWywm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htpbn6uge6ll5wa5hfqk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xIiUWywm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htpbn6uge6ll5wa5hfqk.jpg" alt="Personal Growth chart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#soft-skills-"&gt;
  &lt;/a&gt;
  Soft Skills :
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--29AMBNxS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v57cgvk6hgp1ap5wljkt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--29AMBNxS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v57cgvk6hgp1ap5wljkt.png" alt="Soft Skills"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You get to interact live with &lt;strong&gt;Eddie Jaoude&lt;/strong&gt; and many other awesome people and seek guidance from them.&lt;/li&gt;
&lt;li&gt;We do have fun activities hopping around the server from time to time.&lt;/li&gt;
&lt;li&gt;There are 2 weekly live streams Specifically on Monday and Friday. We review open-source projects on non-other than our members. We help them get good collaborators/ contributors.&lt;/li&gt;
&lt;li&gt;There is a monthly community call (Last Saturday of every month). Where everyone practices public speaking. Everyone shares their experience their thoughts etc.&lt;/li&gt;
&lt;li&gt;We also conduct Twitter spaces for healthy debates and some quick guidance talks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#technical-skills"&gt;
  &lt;/a&gt;
  Technical Skills
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--onR900Dj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86jfq5unyziikok10ep8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--onR900Dj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86jfq5unyziikok10ep8.jpg" alt="Technical-skills"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We help members grow their projects and their skills in all aspects. We help them improve.&lt;/li&gt;
&lt;li&gt;We appreciate the achievement of all Hubbers and motivate them to do more.&lt;/li&gt;
&lt;li&gt;We have Community partners who are doing amazing in their respective domains. They can help you tune with your expertise and grow.&lt;/li&gt;
&lt;li&gt;We encourage students to learn in public&lt;/li&gt;
&lt;li&gt;We take part in Hackathons and Guild events and all of us make awesome project and tools that would pop out of your Resume / CV&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#faq"&gt;
  &lt;/a&gt;
  FAQ
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NKIhNC3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdd1hstz83he49vk97do.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NKIhNC3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdd1hstz83he49vk97do.png" alt="FAQ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-as-a-beginner-should-you-be-a-part-of-eddiehub"&gt;
  &lt;/a&gt;
  1. As a beginner should you be a part of &lt;strong&gt;EddieHub&lt;/strong&gt;?
&lt;/h3&gt;

&lt;p&gt;Absolutely yes!!! There are many motivational and guidance videos by &lt;strong&gt;Eddie Jaoude&lt;/strong&gt; on his &lt;a href="https://www.youtube.com/user/eddiejaoude"&gt;Youtube Channel&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-i-am-new-to-open-source-what-should-i-do"&gt;
  &lt;/a&gt;
  2. I am new to open source what should I do?
&lt;/h3&gt;

&lt;p&gt;Follow the steps mentioned in "How to get involved with &lt;strong&gt;EddieHub&lt;/strong&gt;?" and you are good to go.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-is-eddiehub-only-for-codersprogrammers"&gt;
  &lt;/a&gt;
  3. Is &lt;strong&gt;EddieHub&lt;/strong&gt; only for Coders/Programmers?
&lt;/h3&gt;

&lt;p&gt;No! We believe that open source is for everyone even if you are not a coder. &lt;strong&gt;EddieHub&lt;/strong&gt; is flexible for anyone with any knowledge and background&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-are-there-any-fun-activities-in-eddiehub"&gt;
  &lt;/a&gt;
  4. Are there any fun activities in &lt;strong&gt;EddieHub&lt;/strong&gt;?
&lt;/h3&gt;

&lt;p&gt;Of course, We don't code the entire day. We take breaks, we share jokes, fun facts, we play games, we do live streams for fun.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-what-is-the-base-requirement-for-joining-eddiehub"&gt;
  &lt;/a&gt;
  5. What is the base requirement for joining &lt;strong&gt;EddieHub&lt;/strong&gt;?
&lt;/h3&gt;

&lt;p&gt;You should be enthusiastic about open source, community, collaboration, teamwork that's it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-what-will-i-achieve"&gt;
  &lt;/a&gt;
  6. What will I achieve?
&lt;/h3&gt;

&lt;p&gt;If you are active enough. You actually achieved many things. You achieved&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Good friends&lt;/li&gt;
&lt;li&gt;Best mentors&lt;/li&gt;
&lt;li&gt;Confidence &amp;amp; Motivation&lt;/li&gt;
&lt;li&gt;Knowledge &amp;amp; Awareness&lt;/li&gt;
&lt;li&gt;Everything you need to succeed in your career&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;I hope it helped. If it did then don't forget to like it. And if you have any suggestions or want anything to be added then please let me know in the comments below. I will add it as time permits&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  ❤️ Thank you for reading ❤️
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;🌏 Like | Follow | Share 🌏&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>eddiehub</category>
      <category>todayilearned</category>
      <category>discuss</category>
      <category>devrel</category>
    </item>
    <item>
      <title>Kubearmor – container-aware runtime security</title>
      <author>kalilinux</author>
      <pubDate>Fri, 07 May 2021 12:16:22 +0000</pubDate>
      <link>https://dev.to/kalilinux/kubearmor-container-aware-runtime-security-599</link>
      <guid>https://dev.to/kalilinux/kubearmor-container-aware-runtime-security-599</guid>
      <description>&lt;p&gt;KubeArmor is a container-aware runtime security enforcement system that restricts the behavior (such as process execution, file access, networking operation, and resource utilization) of containers at the system level.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kali-linuxtr.net/kubearmor-container-aware-runtime-security"&gt;kubearmor&lt;/a&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>security</category>
    </item>
    <item>
      <title>Call for India COVID-19 Warrior Story</title>
      <author>Bhuvaneswari Subramani</author>
      <pubDate>Fri, 07 May 2021 12:14:15 +0000</pubDate>
      <link>https://dev.to/aws-heroes/call-for-india-covid-19-warrior-story-31ab</link>
      <guid>https://dev.to/aws-heroes/call-for-india-covid-19-warrior-story-31ab</guid>
      <description>&lt;p&gt;&lt;strong&gt;Stay Safe, Stay Healthy but lend a helping hand Virtually to the needy!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wrV0o7kx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orvrbtq7od80vh221puc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wrV0o7kx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orvrbtq7od80vh221puc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The COVID-19 cry &amp;amp; call for help - that was heard outside, in the next country, state, city, street is now around the house, probably peeping in at some places.&lt;br&gt;
Together let's fight this pandemic by helping each other.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wondering-what-can-we-do-as-an-individual-amp-how%C2%A0"&gt;
  &lt;/a&gt;
  Wondering what can we do as an individual &amp;amp; how ?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#selfcare"&gt;
  &lt;/a&gt;
  Self-care
&lt;/h3&gt;

&lt;p&gt;Beware of the below COVID Symptoms, get tested, be on self-isolation, take virtual consultation &amp;amp; medication as prescribed. Most importantly Rest Well!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fever or cold or cough&lt;br&gt;
Shortness of breadth&lt;br&gt;
Dry throat&lt;br&gt;
Red Eyes&lt;br&gt;
Loss of taste and smell&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Do keep Pulse oximeter &amp;amp; Thermometer close to monitor oxygen levels and temperature. Seek help when *meter friends alarm you.&lt;/p&gt;

&lt;p&gt;And of-course take utmost care of your loved ones too!! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#society"&gt;
  &lt;/a&gt;
  Society
&lt;/h3&gt;

&lt;p&gt;If you have come this far, then you are fit and fine. So far, So good? &lt;/p&gt;

&lt;p&gt;As an #usergroups or #meetup member, the techies are always on top to Unlearn-Learn-Share. Now it's time to re-purpose your community spirit and channelize your energy to give a technical twist to support state or central government to fight against the pandemic. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Look out for COVID-19 support groups or task force in your local community / office / state or central government initiatives to fight against COVID-19. Go, Join. &lt;/li&gt;
&lt;li&gt;If the deep rooted leader in you, aspires to do much more, then form a COVID-19 Task force team in your office or residential community, gather the following information, keep it handy and help as needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Paid / Free TeleConsultation options&lt;/li&gt;
&lt;li&gt;Note down the state or city process to find the Hospital Beds (General , HDU, ICU, ICU-V)&lt;/li&gt;
&lt;li&gt;Find nearest testing centers&lt;/li&gt;
&lt;li&gt;Reliable source to rent / buy oxygen cylinders, oxygen concentrators&lt;/li&gt;
&lt;li&gt;Reliable source for plasma donors&lt;/li&gt;
&lt;li&gt;Reliable source to purchase COVID-19 related medicines&lt;/li&gt;
&lt;li&gt;Keep contact details of the food providing NGOs for the COVID infected people.&lt;/li&gt;
&lt;li&gt;COVID-19 vaccination process and centers&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Wait not see what COVID has in store,&lt;br&gt;
Wake-up to wade the virus out of your vicinity!&lt;br&gt;
Time to prove that techies are not just for whitecolor jobs&lt;br&gt;
When you could figure-out myriad of ways to cope with "New Normal"&lt;br&gt;
You could help re-image COVID free India!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Write to us the best success story of your role in helping India to fight against COVID-19 using your technical expertise and the most impactful &lt;em&gt;India COVID-19 Warrior Story&lt;/em&gt; will stand a chance to win $50 AWS Credit and will be featured in our blogs too. &lt;/p&gt;

&lt;p&gt;Well, not just one time. We would love to learn your heroic act and honour for 3 months - May, June &amp;amp; July 2021.&lt;/p&gt;

&lt;p&gt;Write your story to &lt;a href="mailto:infor@awsugblr.in"&gt;infor@awsugblr.in&lt;/a&gt; with &lt;br&gt;
&lt;strong&gt;Subject:&lt;/strong&gt; India COVID-19 Warrior Story&lt;br&gt;
&lt;strong&gt;Eligibility Criteria:&lt;/strong&gt; &lt;a href="https://awsreskill.com/community"&gt;India AWS User Group Member in one of the 17 cities&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Writing Tips:&lt;/strong&gt; Love to see data over adjectives, impact made over impressive words &lt;br&gt;
&lt;strong&gt;Winner:&lt;/strong&gt; 1 winner per month will be given $50 AWS Credits and your story will be featured in &lt;a href="https://www.awsugblr.in/"&gt;AWS User Group Bengaluru Blog&lt;/a&gt; and &lt;a href="https://awsreskill.com/"&gt;AWS reSkill&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;br&gt;
We will pause our &lt;a href="https://www.meetup.com/awsugblr/"&gt;AWS User Group Bengaluru&lt;/a&gt; Monthly meetups for 3 months to give all of us good time to serve our brethren.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Create Bash aliases to work faster</title>
      <author>Siddharth</author>
      <pubDate>Fri, 07 May 2021 12:11:36 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/create-bash-aliases-to-work-faster-l91</link>
      <guid>https://dev.to/siddharthshyniben/create-bash-aliases-to-work-faster-l91</guid>
      <description>&lt;p&gt;Tired of typing the same long commands over and over? Do you feel inefficient working on the command line? Bash aliases can make a world of difference. &lt;/p&gt;

&lt;p&gt;A bash alias is used to create or overwrite a command which you can use in the terminal.&lt;/p&gt;

&lt;p&gt;For example, you can define a command &lt;code&gt;init&lt;/code&gt; to run &lt;code&gt;npm init&lt;/code&gt;, or maybe a command &lt;code&gt;status&lt;/code&gt; to run &lt;code&gt;git status&lt;/code&gt;. So if you run &lt;code&gt;init&lt;/code&gt;, &lt;code&gt;npm init&lt;/code&gt; will be run. You can even configure arguments (my current favourite command is &lt;code&gt;mkcd &amp;lt;folder&amp;gt;&lt;/code&gt; which creates a folder and cds into it)&lt;/p&gt;

&lt;p&gt;Creating bash aliases are easy. There are mainly three methods to do so.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-do-it-directly-from-the-terminal"&gt;
  &lt;/a&gt;
  1. Do it directly from the terminal
&lt;/h3&gt;

&lt;p&gt;In a terminal, run &lt;code&gt;alias command_name="command to execute"&lt;/code&gt; (&lt;code&gt;alias status="git status"&lt;/code&gt;). That's it!&lt;/p&gt;

&lt;p&gt;The only downside to this is that the aliases can't take arguments. That brings us to....&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-add-it-to-your-raw-bashrc-endraw-"&gt;
  &lt;/a&gt;
  2. Add it to your &lt;code&gt;~/.bashrc&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Open the &lt;code&gt;~/.bashrc&lt;/code&gt; file in any editor and add an alias just like you did before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# alias command_name="command to execute"&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git status"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it! What's more, you can configure arguments to aliases by using functions! To get the first argument use &lt;code&gt;"$1"&lt;/code&gt;, and to get the second argument use &lt;code&gt;"$2"&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;You may need to read more about functions, but the below functions should give you an idea of how it works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# mkdir folder and cd folder&lt;/span&gt;
&lt;span class="c"&gt;# example: mkcd folder&lt;/span&gt;
mkcd&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# notify me after a long process is over&lt;/span&gt;
&lt;span class="c"&gt;# example: notify "npm run build"&lt;/span&gt;
notify&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; say &lt;span class="s2"&gt;"Done!"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you have saved this file, run &lt;code&gt;source ~/.bashrc&lt;/code&gt; to make sure the new aliases have been loaded.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#optional-create-a-new-file-to-hold-aliases"&gt;
  &lt;/a&gt;
  Optional: Create a new file to hold aliases
&lt;/h4&gt;

&lt;p&gt;You can create a new file like &lt;code&gt;~/.bash_aliases&lt;/code&gt; and save the aliases in there. Just remember to add the following to your &lt;code&gt;~/.bashrc&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.bash_aliases &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.bash_aliases
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the aliases can be added in the &lt;code&gt;~/.bash_aliases&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once again, run &lt;code&gt;source ~/.bashrc&lt;/code&gt; to make sure the new aliases have been loaded.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>React.js primary concepts</title>
      <author>Rahul Ghosh</author>
      <pubDate>Fri, 07 May 2021 11:53:07 +0000</pubDate>
      <link>https://dev.to/rahulghosh/react-js-primary-concepts-odo</link>
      <guid>https://dev.to/rahulghosh/react-js-primary-concepts-odo</guid>
      <description>&lt;p&gt;1 What is React...?&lt;/p&gt;

&lt;p&gt;React is a JavaScript library, not a framework. React is use for building user interface. React use more libraries for any solution.&lt;br&gt;
Frameworks use for great purpose,  especially for young developers. Framework already has smart design for you. When you need small piece of code, you have to include the whole thing anyway. UIs are everywhere, from the simple buttons on a microwave to the dashboard of a space shuttle. React is good for developed UI. React have virtual DOM, thats why react is best for modern developer.&lt;/p&gt;

&lt;p&gt;2 React JSX &lt;/p&gt;

&lt;p&gt;JSX means Javascript and XML. JSX allows us to write HTML in React. JSX makes it easier to write and add HTML in React. It is faster because it performs optimization while compiling code to JavaScript. It is also type-safe and most of the errors can be caught during compilation. JSX easier and faster to write templates, if you are familiar with HTML.&lt;/p&gt;

&lt;p&gt;3 React is all about components&lt;/p&gt;

&lt;p&gt;In react everythings are component base. React has two type of component one is class component another is functional component. Component are small piece of reusable, composable, and stateful codes. React components are exactly the same; their input is a set of props and their output is a description of a UI. We can reuse a single component in multiple UIs. Components can contain other components. React component can have a private state. Those state to hold data. This private state is an implicit part of the input that drives the component’s output.&lt;/p&gt;

&lt;p&gt;4 React DOM &lt;/p&gt;

&lt;p&gt;React DOM means Document Object Model. In react has a virtual DOM. A virtual DOM object is a representation of a DOM object, like a lightweight copy. Manipulating the DOM is slow. Manipulating the virtual DOM is much faster, because nothing gets drawn onscreen. Think of manipulating the virtual DOM as editing a blueprint, as opposed to moving rooms in an actual house.&lt;/p&gt;

&lt;p&gt;5 React defaultProps&lt;/p&gt;

&lt;p&gt;React components take inputs in the props argument. Then passed down from the Parent component. The child component will access them from the props object with the attribute name serving as the key. The problem here is what happens if the parent component doesn’t pass any attributes to the child component? Sure we will see undefined display in place of the props not sent by the parent component. To solve this issue, we can use the logical operator to set a fallback value, so when a prop is missing it displays the fallback value in place of the missing prop. &lt;/p&gt;

&lt;p&gt;6 React optimizing Performance&lt;/p&gt;

&lt;p&gt;Performance is important for any project. Clients wants their application have too much faster. Thats why's react is much concern of performacne. If you’re faceing performance problems in your React apps,  make sure you’re test.  React includes many helpful warnings. These warnings are very useful in development. You can read this warning and find the problem easily&lt;/p&gt;

&lt;p&gt;7 React State&lt;/p&gt;

&lt;p&gt;React has a built-in state object. Where store property and values that belongs to the component. When the state changes, the component will be re-renders. State contain as many properties. You can changes the state values by setState function. Always use the setState() method to change the state values, it will ensure that the component knows its been updated.After that it calls the render() method again,&lt;/p&gt;

&lt;p&gt;8 Conditional rendering&lt;/p&gt;

&lt;p&gt;In JSX when we thing conditional rendering, Ternary operator come out first in oor mind. In conditional rendering ternary operator vary helpful to us, its give two value depend on true false condition.&lt;/p&gt;

&lt;p&gt;9 How rendering works&lt;/p&gt;

&lt;p&gt;Every setState function call react state to change new State. Then react call render method to update the components in memory (DOM). Raect compares it with browser. If there are any changes, React does the smallest possible update to the DOM.&lt;/p&gt;

&lt;p&gt;10 Raect props&lt;/p&gt;

&lt;p&gt;Props means property. Props are used for passing data from one component to another. Parent component pass values to children using props.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Methods to add a new line in javascript</title>
      <author>hrishikesh1990</author>
      <pubDate>Fri, 07 May 2021 11:34:57 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/methods-to-add-a-new-line-in-javascript-1njk</link>
      <guid>https://dev.to/hrishikesh1990/methods-to-add-a-new-line-in-javascript-1njk</guid>
      <description>&lt;p&gt;In this short tutorial, we look at multiple methods you can use to line break while dealing with strings in javascript.&lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at Flexiple, to write short curated tutorials around often used or interesting concepts. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#newline"&gt;What is a new line in Javascript?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#escape"&gt;Breaking string using an Escape sequence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Template"&gt;New line using Template literals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#break"&gt;HTML Break Element&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-new-line-in-javascript"&gt;
  &lt;/a&gt;
  What is a new line in javascript?&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Manipulating strings in javascript can be a hassle. Although string manipulation is easy to learn, implementing them is tricky and one similar area is adding new lines. There are many ways in which new lines can be added in javascript however it is not as simple as the paragraph or break tag we use in HTML. Nonetheless, let's look at the most commonly used methods.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#breaking-strings-using-escape-sequence"&gt;
  &lt;/a&gt;
  Breaking strings using Escape sequence:&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Escape sequences are the most commonly used method to create a new line in javascript. The escape sequence used to create a new line in Windows and Linux is &lt;code&gt;\n&lt;/code&gt;, but in a few older macs &lt;code&gt;\r&lt;/code&gt;  is used. The implementation of escape sequences is quite straightforward. I have added a snippet below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;flexiple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hire the top 1% freelance talent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;new_flexiple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hire the &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;top 1% &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;freelance talent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flexiple&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//Output: "Hire the top 1% freelance talent"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;new_flexiple&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//Output: "Hire the &lt;/span&gt;
&lt;span class="c1"&gt;//top 1% &lt;/span&gt;
&lt;span class="c1"&gt;//freelance talent"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Remember not to add spaces after the new line escape sequence as javascript would consider that to be a space and add it to the output as well. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-line-using-template-literals"&gt;
  &lt;/a&gt;
  New Line using Template Literals: &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Template literals sound quite fancy, but underneath the jargon, they are just string literals that allow embedded expressions. This makes it easy to use multi-line strings. We do not enclose template literals with single or double quotes but rather with backtick (&lt;code&gt;\&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;flexiple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hire the &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;top 1% &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;freelance talent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;new_flexiple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`Hire the 
top 1% 
freelance talent`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flexiple&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//Output: "Hire the &lt;/span&gt;
&lt;span class="c1"&gt;//top 1% &lt;/span&gt;
&lt;span class="c1"&gt;//freelance talent"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;new_flexiple&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//Output: "Hire the &lt;/span&gt;
&lt;span class="c1"&gt;//top 1% &lt;/span&gt;
&lt;span class="c1"&gt;//freelance talent"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In both cases, the same output is returned. but as you can see Template Literals make it quite simple to write multi-line strings. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html-break-element"&gt;
  &lt;/a&gt;
  HTML Break element&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Adding HTML line break elements to your string is another method I have seen being used quite often. Though break elements must be used where the division of a line must be significant since this method is quite common we look at it as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"newline"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;flexiple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hire the&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;top 1% &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;freelance talent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;newline&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flexiple&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Remember to use the .innerHTML and not .innerText as you would with other text content.&lt;/p&gt;

&lt;p&gt;Do let me know your thoughts/ queries in the comment section below.  &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Plan your weekly meals 🥗 with this template</title>
      <author>Sarthak Sharma</author>
      <pubDate>Fri, 07 May 2021 11:20:24 +0000</pubDate>
      <link>https://dev.to/xenoxdev/plan-your-weekly-meals-with-this-template-120d</link>
      <guid>https://dev.to/xenoxdev/plan-your-weekly-meals-with-this-template-120d</guid>
      <description>&lt;p&gt;Hey folks 👋🏼&lt;/p&gt;

&lt;p&gt;We just launched another Product on the Product hunt. It's a notion template that helps you track your calories and make healthier choices ! and who doesn't want to have a fit physique when they come out of quarantine, eh ?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#meal-planner"&gt;
  &lt;/a&gt;
  Meal Planner
&lt;/h3&gt;

&lt;p&gt;Meal planning has never been easier and more organized! Prototion brings you this amazing Meal Planning Template for Notion, that helps you organize your meals for the day, keep track of the calories and macros present along the freedom to supplement your recipes with pictures - Just adds a special something to the meal planning process!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/KJs6V_TroB4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this template, you'll be able to track -&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#weekly-meals"&gt;
  &lt;/a&gt;
  Weekly Meals:
&lt;/h3&gt;

&lt;p&gt;In this template, you're provided with a weekly overview of your meals that you can change or upgrade at your convenience. Don't want fish on a Saturday ? Simply switch it up and replace it with an item of equal nutritive value! Yes, meals are easy to switch up!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b1sp0tFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/65t45gwzhsfrxnz9ison.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b1sp0tFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/65t45gwzhsfrxnz9ison.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#daily-meals"&gt;
  &lt;/a&gt;
  Daily Meals:
&lt;/h3&gt;

&lt;p&gt;With the filters to the right of the Weekly meal, you can change the board view and select the card for a particular day - This lets you look at all your meals for that day - Breakfast, lunch, dinner, snacks, etc.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PkAMWxFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9ko8et4jrj35ra6naf2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PkAMWxFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9ko8et4jrj35ra6naf2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#calories-calculator-"&gt;
  &lt;/a&gt;
  Calories calculator :
&lt;/h3&gt;

&lt;p&gt;A calories calculator that saves you from the hassle of counting your intake and making cuts accordingly. Yes, that donut doesn't sound too alluring now, does it ? &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Kr9uKQZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4eihltp2n8h5bdp2t19s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Kr9uKQZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4eihltp2n8h5bdp2t19s.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#food-calories"&gt;
  &lt;/a&gt;
  Food Calories
&lt;/h3&gt;

&lt;p&gt;You have the freedom to view foods that meet certain criteria like being low-fat, sugar-free, etc. A list will then open up in front of you and you'll be pleased to find all those foods that you can eat while not worrying about them being sugary or not!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zJRXnPAm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ozzft3bge93sjwr3z2z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zJRXnPAm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ozzft3bge93sjwr3z2z.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-depth-macros-count-"&gt;
  &lt;/a&gt;
  In depth Macros count :
&lt;/h3&gt;

&lt;p&gt;You have the freedom to enter and view calories and other macros like protein, carbs, etc. by clicking on the card of your choice in the weekly view.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wZ1nD4dW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75203uran7pqvhfwyxln.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wZ1nD4dW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75203uran7pqvhfwyxln.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#want-one"&gt;
  &lt;/a&gt;
  Want One?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3XBPrAvitLOBxD3bAn/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3XBPrAvitLOBxD3bAn/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Here is your link&lt;/em&gt;&lt;/strong&gt; 👉 &lt;a href="https://prototion.com/notion-for/meal-planner"&gt;&lt;strong&gt;&lt;em&gt;Meal Planner&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are on Producthunt today. Go show some love here🔥&lt;br&gt;
&lt;a href="https://www.producthunt.com/posts/notion-meal-planner"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Wqh1gaU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpbl45jr6gyjnoggz29b.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>showdev</category>
    </item>
    <item>
      <title>How to test Your API inside VSCODE</title>
      <author>Mukul Singhal</author>
      <pubDate>Fri, 07 May 2021 11:19:59 +0000</pubDate>
      <link>https://dev.to/mukul_singhal/how-to-test-your-api-inside-vscode-5635</link>
      <guid>https://dev.to/mukul_singhal/how-to-test-your-api-inside-vscode-5635</guid>
      <description>&lt;p&gt;Hey All 👋 . &lt;/p&gt;

&lt;p&gt;Recently I got to know about a VS Code extension called &lt;strong&gt;Thunder Client⚡⚡&lt;/strong&gt; which can be used to test our API inside VS Code.&lt;br&gt;
How Cool 😎 is that to test our API in the editor that we use all the time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thunder Client&lt;/strong&gt; is a GUI-based Rest Api HTTPS client and has a very clean UI and easy-to-use interface.&lt;/p&gt;

&lt;p&gt;One of the key highlights of this extension is &lt;strong&gt;Scriptless Testing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As we need to write a lot of boilerplate code in Postman and other clients to do basic testing using scripting like status code equal 200. In Thunder client, there is a GUI-based test where we can select a couple of dropdowns to do most standard tests very easily without any scripting knowledge.&lt;br&gt;
As you can see in the image below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0MCC2I8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1000/1%2AKe_upcoljKriEz1q6hmIHg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0MCC2I8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1000/1%2AKe_upcoljKriEz1q6hmIHg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%96%A5-how-to-install"&gt;
  &lt;/a&gt;
  🖥 How to install
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;First of all open your VS Code and Click on extensions on the sidebar and install thunder client.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jaBHiyYA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ts7sjh59q6czrlnyws2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jaBHiyYA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ts7sjh59q6czrlnyws2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;now you will see a icon on side bar
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZWeI99zF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ri47g140gygip7v840pg.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lets-test-thunder-client-a-little-bit"&gt;
  &lt;/a&gt;
  Lets test Thunder client a little bit
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;for testing you can create your own API or you can use&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://gorest.co.in/"&gt;https://gorest.co.in/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and get your authentication token and you are good to go.&lt;/p&gt;

&lt;p&gt;below you can see Thunder Client in action in Below GIF&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GET request
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oTpOHsMj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sfeerc57eueuxy8f40bo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oTpOHsMj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sfeerc57eueuxy8f40bo.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;POST request in which we create a GUI based Test&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gnGZuQ23--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/auiegalj5rkgf9m6q4cj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gnGZuQ23--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/auiegalj5rkgf9m6q4cj.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can play around thunder client a little more.&lt;/p&gt;

&lt;p&gt;Let me know your thoughts about it 😃and if you like it share it with others.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1EBI3Zrq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media2.giphy.com/media/26AHC0kdj8IeLkmBy/200.webp%3Fcid%3Decf05e47a1atqwznh4fq0oe3xqf3hy4ifhr25jovp2c21ld7%26rid%3D200.webp%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1EBI3Zrq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media2.giphy.com/media/26AHC0kdj8IeLkmBy/200.webp%3Fcid%3Decf05e47a1atqwznh4fq0oe3xqf3hy4ifhr25jovp2c21ld7%26rid%3D200.webp%26ct%3Dg" alt="end"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>vscode</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
