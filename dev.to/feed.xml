<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How Moti is the shortest way to create universal animation based on reanimated 2</title>
      <author>Abdelhalim Ahmed</author>
      <pubDate>Mon, 17 Jan 2022 22:51:28 +0000</pubDate>
      <link>https://dev.to/abdelhalimahmed/how-moti-is-the-shortest-way-to-create-universal-animation-based-on-reanimated-2-19m4</link>
      <guid>https://dev.to/abdelhalimahmed/how-moti-is-the-shortest-way-to-create-universal-animation-based-on-reanimated-2-19m4</guid>
      <description>&lt;p&gt;Today I would like to share my experience with Moti animation and create a Wave indicator using reanimated 2 and Moti.&lt;br&gt;
final code: &lt;a href="https://snack.expo.dev/@abdelhalimahmed/live-wave-animation"&gt;https://snack.expo.dev/@abdelhalimahmed/live-wave-animation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wux56-8_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4l09lx4ubtbdzdmtbyz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wux56-8_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4l09lx4ubtbdzdmtbyz.gif" alt="Image description" width="169" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let's start
&lt;/h2&gt;

&lt;p&gt;What's the¬†Moti?&lt;br&gt;
Briefly, it helps you create universal animations "works on all platforms" in a much simpler way, powered by Reanimated 2, for more details check references on the bottom.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#situation"&gt;
  &lt;/a&gt;
  Situation:
&lt;/h2&gt;

&lt;p&gt;In my current job, I got a task with a little animation like the above demo and I was thinking what's the easiest way to do it, actually, my first glance is creating it using &lt;a href="https://github.com/lottie-react-native/lottie-react-native"&gt;Lottie&lt;/a&gt;, but I said why? let's do it with Reanimated 2 which it's my favorite performant animation library in the meantime.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;hint: I used styled-components, but you can use any preferred UI library&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1- I created a static dot component with fixed height and width with half border-radius "Circle"&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const Dot = styled.View'&lt;br&gt;
  width: 20px;&lt;br&gt;
  height: 20px;&lt;br&gt;
  border-radius: 10px;&lt;br&gt;
  background-color: green;&lt;br&gt;
';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2- Add array with length 3 which contain Animated view waves with the same style of Dot and positioning 'absolute'&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const Wave = styled(Animated.View)'&lt;br&gt;
  width: 20px;&lt;br&gt;
  height: 20px;&lt;br&gt;
  border-radius: 10px;&lt;br&gt;
  background-color: green;&lt;br&gt;
';&lt;br&gt;
{Array.from({ length: 3 }, (_, i) =&amp;gt; (&lt;br&gt;
  &amp;lt;Wave &lt;br&gt;
    style={StyleSheet.absoluteFillObject}&lt;br&gt;
    key={i} /&amp;gt;&lt;br&gt;
))};&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3- Animation Part:¬†&lt;br&gt;
‚Ää-‚ÄäCreate animation value using "useSharedValue" that's contains the init value of "0" and will be "1" after triggering the animation.¬†&lt;br&gt;
‚Ää-‚ÄäAnimation style using "useAnimationStyle" that's contain the scaling value and opacity value with "interpolate" to map [0,1] to target value based on animation "scale | opacity" for example the scaling will be from "1x" -&amp;gt; "5x" so we will "interpolate" the animation value from [0,1] -&amp;gt; [1,5]¬†‚Ä¶etc&lt;br&gt;
‚Ää-‚Äätrigger the animation inside "useEffect".&lt;br&gt;
&lt;code&gt;&lt;br&gt;
const animationValue = useSharedValue(0); &lt;br&gt;
const animatedStyle = useAnimatedStyle(() =&amp;gt; { &lt;br&gt;
  return { &lt;br&gt;
    transform: [{ &lt;br&gt;
      scale: interpolate(animationValue.value, [0, 1], [1, 5]) &lt;br&gt;
    }], &lt;br&gt;
    opacity: interpolate(animationValue.value, [0, 1], [0.7, 0]), &lt;br&gt;
  }; &lt;br&gt;
}); &lt;br&gt;
useEffect(() =&amp;gt; { &lt;br&gt;
  animationValue.value = &lt;br&gt;
    withDelay(&lt;br&gt;
      index * 400, &lt;br&gt;
      withRepeat( &lt;br&gt;
        withTiming(&lt;br&gt;
          1, &lt;br&gt;
          { duration: 2000, easing: Easing.out(Easing.ease) }&lt;br&gt;
        ), &lt;br&gt;
        -1, &lt;br&gt;
        false &lt;br&gt;
      ) &lt;br&gt;
    ); &lt;br&gt;
}, [index, animationValue]);&lt;br&gt;
&amp;lt;Wave &lt;br&gt;
  style={[StyleSheet.absoluteFillObject, animatedStyle]} &lt;br&gt;
  key={index} /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That's IT¬†üî•ü•≥&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;But one Second!, where is the Moti Here?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Okay, After I finished the task and when streaming youtube I found Catalin Miron "who's building awesome animation using react native, I recommend checking his channel" released a new video very close to my animation challenge but he used the Motie!, so I mapped his code to fit my challenge and the result is awesome! with a few lines of my code!.&lt;br&gt;
so with easily, the wave view comes from Moti components with animations properties like "from" that's mean the start point of the animation view, "animate" that's the endpoint animation is done, "transition" the type and options for animation you want.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;import {View} from '@motify/components';&lt;br&gt;
const Wave = styled(View)'&lt;br&gt;
  width: 20px; &lt;br&gt;
  height: 20px; &lt;br&gt;
  border-radius: 10px; &lt;br&gt;
  background-color: green; &lt;br&gt;
';&lt;br&gt;
&amp;lt;Wave&lt;br&gt;
  key={index} &lt;br&gt;
  from={{opacity: 0.7, scale: 1}} &lt;br&gt;
  animate={{opacity: 0, scale: 5}} &lt;br&gt;
  transition={{ &lt;br&gt;
    type: 'timing',&lt;br&gt;
    duration: 2000, &lt;br&gt;
    easing: Easing.out(Easing.ease), &lt;br&gt;
    delay: index * 400, &lt;br&gt;
    loop: true, &lt;br&gt;
    repeatReverse: false &lt;br&gt;
  }} &lt;br&gt;
  style={[StyleSheet.absoluteFillObject]} /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References üìö
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=XkoFvsscsHo"&gt;https://www.youtube.com/watch?v=XkoFvsscsHo&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/channel/UCTcH04SRuyedaSuuQVeAcdg"&gt;https://www.youtube.com/channel/UCTcH04SRuyedaSuuQVeAcdg&lt;/a&gt;&lt;br&gt;
&lt;a href="https://moti.fyi/"&gt;https://moti.fyi/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.swmansion.com/react-native-reanimated/docs/"&gt;https://docs.swmansion.com/react-native-reanimated/docs/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#did-you-like-it-clap-and-follow%C2%A0"&gt;
  &lt;/a&gt;
  Did you like it? Clap, and Follow!¬†üëè
&lt;/h2&gt;

&lt;p&gt;if you see something wrong or have an improvement please leave a comment and surely if you need a help with your React Native app feel free to contact me¬†;), I will be happy to discuss it.&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>animation</category>
      <category>reanimated2</category>
      <category>moti</category>
    </item>
    <item>
      <title>First DEV post! Pumped!!</title>
      <author>Toke Malaolu</author>
      <pubDate>Mon, 17 Jan 2022 22:40:57 +0000</pubDate>
      <link>https://dev.to/thepineapple/first-dev-post-pumped-1lfn</link>
      <guid>https://dev.to/thepineapple/first-dev-post-pumped-1lfn</guid>
      <description>&lt;p&gt;I cannot believe I am typing this...&lt;/p&gt;

&lt;p&gt;Here goes...&lt;/p&gt;

&lt;p&gt;I was introduced to programming by a friend, November 2021. I had no prior knowledge about it so I was scared. Did i have the brain capacity to understand any of the languages? I didn't think so&lt;/p&gt;

&lt;p&gt;Fast forward to today, I am currently waiting on a Programming scholarship worth $2,000 (hopefully i get it) and I am taking an HTML and CSS course on Scrimba and it has been such an exciting journey.&lt;/p&gt;

&lt;p&gt;Here I am today, typing this and I am super excited to join this amazing community. I hope to learn from you one way or another.&lt;/p&gt;

&lt;p&gt;Signing out,&lt;br&gt;
the-pineapple &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>html</category>
      <category>css</category>
      <category>programming</category>
    </item>
    <item>
      <title>Thirty Days of Rust: Day Six</title>
      <author>Sammy Shear</author>
      <pubDate>Mon, 17 Jan 2022 20:55:34 +0000</pubDate>
      <link>https://dev.to/sammyshear/thirty-days-of-rust-day-six-548g</link>
      <guid>https://dev.to/sammyshear/thirty-days-of-rust-day-six-548g</guid>
      <description>&lt;p&gt;Today was a good day and a bad day. I successfully recreated my hangman CLI game in the browser with WebAssembly, but it was not without a lot of problems, on the way and in the final product. In spite of that, I do think this was overall more of a good day than a bad day. I learned a lot more than I expected to and I think I'm a better developer for it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rust-code"&gt;
  &lt;/a&gt;
  Rust Code
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="n"&gt;hangman&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SliceRandom&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;thread_rng&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;wasm_bindgen&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;prelude&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;#[wasm_bindgen]&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Hangman&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;possible_words&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;word_to_guess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;guessed_letters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;char&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;guesses_left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;current_guess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;#[wasm_bindgen]&lt;/span&gt;
    &lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Hangman&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Hangman&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;rng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;thread_rng&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;hg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Hangman&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Hangman&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;possible_words&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Rust"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Challenge"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"WebAssembly"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Day Six"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Programming"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Thirty Days"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hangman"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="n"&gt;word_to_guess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="n"&gt;guessed_letters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nd"&gt;vec!&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
                &lt;span class="n"&gt;guesses_left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;current_guess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;

            &lt;span class="n"&gt;hg&lt;/span&gt;&lt;span class="py"&gt;.word_to_guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hg&lt;/span&gt;&lt;span class="py"&gt;.possible_words&lt;/span&gt;&lt;span class="nf"&gt;.choose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;rng&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;hg&lt;/span&gt;&lt;span class="py"&gt;.word_to_guess&lt;/span&gt;&lt;span class="nf"&gt;.chars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;hg&lt;/span&gt;&lt;span class="py"&gt;.word_to_guess&lt;/span&gt;&lt;span class="nf"&gt;.chars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.nth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="sc"&gt;' '&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;hg&lt;/span&gt;&lt;span class="py"&gt;.current_guess&lt;/span&gt;&lt;span class="nf"&gt;.push_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;hg&lt;/span&gt;&lt;span class="py"&gt;.current_guess&lt;/span&gt;&lt;span class="nf"&gt;.push_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"_"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;hg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;get_current_guess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.current_guess&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;get_word_to_guess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.word_to_guess&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.guessed_letters&lt;/span&gt;&lt;span class="nf"&gt;.contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="nf"&gt;.chars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.nth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.guessed_letters&lt;/span&gt;&lt;span class="nf"&gt;.push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="nf"&gt;.chars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.nth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

                &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;new_guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.current_guess&lt;/span&gt;&lt;span class="nf"&gt;.chars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="py"&gt;.collect&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.word_to_guess&lt;/span&gt;&lt;span class="nf"&gt;.len&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.word_to_guess&lt;/span&gt;&lt;span class="nf"&gt;.chars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="py"&gt;.collect&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                        &lt;span class="nf"&gt;.eq_ignore_ascii_case&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="nf"&gt;.chars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.nth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;new_guess&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.word_to_guess&lt;/span&gt;&lt;span class="nf"&gt;.chars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="py"&gt;.collect&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;new_guess&lt;/span&gt;&lt;span class="nf"&gt;.iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="py"&gt;.collect&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.current_guess&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.guesses_left&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.current_guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_guess&lt;/span&gt;&lt;span class="nf"&gt;.iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="py"&gt;.collect&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;did_win&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.guesses_left&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This took me a while to get to. The first reason was because I was trying to use static global variables that for whatever reason I thought would update and be able to store state for the game via some of these functions. That did not work at all, for what should have been obvious reasons, but it didn't click with me immediately, so I spent time debugging, and decided to use a struct. I did this by looking up how to make a struct in Rust. Then I got an error with &lt;code&gt;wasm_bindgen&lt;/code&gt; because I had to pass the struct through the macro instead of each method, so I did that, tried to build the package, and got an error because I was using the &lt;code&gt;rand&lt;/code&gt; crate with a wasm project. The crate uses another crate that doesn't work with wasm out of the box, but I could fix it by adding that crate to my &lt;code&gt;Cargo.toml&lt;/code&gt; with an extra feature:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;getrandom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.2.4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="py"&gt;features&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;["js"]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That finally allowed me to build the library, and then I just had to go back to where I was more comfortable: JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#js-and-html"&gt;
  &lt;/a&gt;
  JS and HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;WebAssembly Hangman&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"root"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"currentGuess"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"guesserForm"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"guesser"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Guess"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;This page contains webassembly and javascript content, please enable javascript in your browser.&lt;span class="nt"&gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./bootstrap.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's the JS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;wasm&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../pkg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hangman&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wasm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Hangman&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentGuess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#currentGuess&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;guesserForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#guesserForm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;guesser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;guesserForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#guesser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;guesserForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;hangman&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;guesser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;guesser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hangman&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get_word_to_guess&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;hangman&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get_current_guess&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;currentGuess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hangman&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get_current_guess&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;checkWin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkWin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hangman&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;did_win&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You won!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You lost :(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The problems I had here were mostly minimal, but I did have some. By this point I was pretty worn out, and so something just didn't register in my brain that I wanted the guess() function to call every time a guess was made, and not all the time, so I used a while loop. After about 5 seconds, I realized that didn't make any sense and would break the webpage, and so I switched it to what I have now. I also still have a bug in the program, which is that I cannot get the "You lost :(" message to show up, but by now I've been working on this for like 3 hours and I don't really feel the urge to debug any more code today, even in a language I know. So I called it there, and just started writing this. If you have any ideas as to why this is happening, feel free to let me know, but I'll probably take another look at it tomorrow anyway. That's about it for me today, I didn't really want to spend this much time on today, but I guess it makes up for yesterday in a way because yesterday was very short.&lt;/p&gt;

</description>
      <category>30days</category>
      <category>rust</category>
      <category>challenge</category>
      <category>webassembly</category>
    </item>
    <item>
      <title>Adding a Next.js Administration Dashboard to your site in seconds</title>
      <author>IroncladDev</author>
      <pubDate>Mon, 17 Jan 2022 20:20:56 +0000</pubDate>
      <link>https://dev.to/ironcladdev/adding-a-nextjs-administration-dashboard-to-your-site-in-seconds-7jb</link>
      <guid>https://dev.to/ironcladdev/adding-a-nextjs-administration-dashboard-to-your-site-in-seconds-7jb</guid>
      <description>&lt;p&gt;Making an administration dashboard for all my freelance clients is always a challenge.  It's just annoying to create a new database, add it to your site, enable authentication, etc.&lt;/p&gt;

&lt;p&gt;It's understandable why a lot of people use Wordpress instead of raw code, mainly for the reason of the dashboard and how easy it is to edit things.&lt;/p&gt;

&lt;p&gt;Guess what?  I just changed that for all you React and Next.js developers out there.  You won't have to use Wordpress over your favorite stack anymore or spend hours sweating your brain out coding an admin dashboard.  All it takes to implement this is a git clone, editing some JSON and ENV values, and your dashboard is ready to go!&lt;/p&gt;

&lt;p&gt;Take a look at the demo and try it out!&lt;br&gt;
&lt;a href="https://next-admin.ironcladdev.repl.co/"&gt;https://next-admin.ironcladdev.repl.co/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#getting-the-code"&gt;
  &lt;/a&gt;
  Getting the Code
&lt;/h3&gt;

&lt;p&gt;Open your favorite code editor and run &lt;code&gt;git clone https://github.com/Conner1115/next-admin.git&lt;/code&gt;.  You won't even have to run &lt;code&gt;npx create-next-app&lt;/code&gt; since all the files are already there for you.  Simply run &lt;code&gt;npm run dev&lt;/code&gt; and then start building your site around that.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#customizing-authentication"&gt;
  &lt;/a&gt;
  Customizing Authentication
&lt;/h3&gt;

&lt;p&gt;Before you start on the admin dashboard go to the &lt;code&gt;.env&lt;/code&gt; file.  Set a strong password, which is the one you'll be using to log in and out of your dashboard, and a long random string for the session cookie.  This enables security and prevents brute-forcing.&lt;/p&gt;

&lt;p&gt;You'll need to set two fields in the &lt;code&gt;.env&lt;/code&gt; file.  &lt;code&gt;ADMIN_SESSION&lt;/code&gt; which is the long random string and &lt;code&gt;ADMIN_PASSWORD&lt;/code&gt; which is the password you'll use to log in.&lt;/p&gt;

&lt;p&gt;Don't worry, I've already applied Rate Limiting on the password 'n all (three failed login attempts per thirty minutes), so no worries on the bad guys getting in your site and messing up all the content.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#customizing-the-dashboard"&gt;
  &lt;/a&gt;
  Customizing the Dashboard
&lt;/h3&gt;

&lt;p&gt;Go to the &lt;code&gt;data&lt;/code&gt; folder and then open up &lt;code&gt;data.json&lt;/code&gt;.  This is where you will control the different types of data that can be edited.&lt;/p&gt;

&lt;p&gt;If you went to the admin page in the demo, which is probably corrupted to a massive extent, and played around with it, you can see that the fields consist of single string fields, multiple strings fields, and arrays.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#create-a-single-string-field"&gt;
  &lt;/a&gt;
  Create a single String Field
&lt;/h4&gt;

&lt;p&gt;Open up &lt;code&gt;data.json&lt;/code&gt;, clear out all the existing fields, and add an item &lt;code&gt;"homepage"&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"homepage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"This is the text that goes on the homepage"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;npm run dev&lt;/code&gt; in the terminal and go to &lt;a href="http://localhost:3000/admin"&gt;http://localhost:3000/admin&lt;/a&gt;.&lt;br&gt;
You should be seeing something already after you log in.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1wgrdIva--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4u94wu27t3b5ax5qanf4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1wgrdIva--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4u94wu27t3b5ax5qanf4.png" alt="Preview of the Homepage" width="880" height="426"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Single-text-fields can be useful for editing short headlines, descriptions, paragraphs, and more.  As for pages that have multiple paragraphs, features, or other things that require more content, you can use Multi-string fields.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#create-a-multistring-field"&gt;
  &lt;/a&gt;
  Create a Multi-string field
&lt;/h4&gt;

&lt;p&gt;Open up &lt;code&gt;data.json&lt;/code&gt; and add a field "paragraphs" as an array of strings.  This array can be of any length.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"homepage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"This is the text that goes on the homepage"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"paragraphs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"This is paragraph One"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"This is paragraph Two"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"I'm the third paragraph"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, the length of this array will be three and generate three editable text fields.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--77WqOFf4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2e3lfcr0zclijoam41a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--77WqOFf4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2e3lfcr0zclijoam41a.png" alt="String Field Paragraphs" width="880" height="903"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#array-field"&gt;
  &lt;/a&gt;
  Array Field
&lt;/h4&gt;

&lt;p&gt;Array Fields are particularly useful for simple blogs and other storage functions where authentication isn't required.&lt;/p&gt;

&lt;p&gt;Create a new field "posts" and set it to an empty array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"homepage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"This is the text that goes on the homepage"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"paragraphs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"This is paragraph One"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"This is paragraph Two"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"I'm the third paragraph"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"posts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go &lt;code&gt;schemas.json&lt;/code&gt; and add an object "posts".  From there you can set the input fields.   &lt;strong&gt;Make sure the field in schemas.json is the same name as data.json&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"posts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"textarea"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"luckynumber"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"number"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That, of course, is just an example.  &lt;code&gt;"date"&lt;/code&gt; and &lt;code&gt;"luckynumber"&lt;/code&gt; exist as examples to show what types of inputs there are.  The type of input (besides "textarea") will always be a type in an html &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tag.  If "textarea" is used, a &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; tag will be generated.&lt;/p&gt;

&lt;p&gt;Now go to your admin dashboard and try it out.  After creating a post, you should see a new element added to your schema array in &lt;code&gt;data.json&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"posts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Title"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Test Text"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-21"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"luckynumber"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"d8d2ef38-b02c-496b-9833-c53fa3b063c9"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All schema-type array fields automatically will be given a random &lt;code&gt;uuid&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You may add as many fields to the &lt;code&gt;data.json&lt;/code&gt; object as you want.  All top-level object keys will be added and editable in the dashboard.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessing-the-data"&gt;
  &lt;/a&gt;
  Accessing the data
&lt;/h3&gt;

&lt;p&gt;To get the data from &lt;code&gt;data.json&lt;/code&gt; and use it in your pages, simply import it in one of your pages and use it as a valid javascript object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../data/data.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headline&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can access the json file from the client side of your application as well as the server side.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-to-raw-datajson-endraw-"&gt;
  &lt;/a&gt;
  Writing to &lt;code&gt;data.json&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Writing to data.json from anywhere else besides the original admin api routes can be done from another api route.  You may use the &lt;code&gt;writeJSON&lt;/code&gt; function which is located under &lt;code&gt;scripts/util.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;writeJSON&lt;/code&gt; function takes a single parameter, which is a function that should return an object.&lt;/p&gt;

&lt;p&gt;The object returned will overwrite the entire json file completely.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"field"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"value"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;writeJSON&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;//updating a field&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;field&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;newvalue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;//adding a new field&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;field2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Have fun, try your best to not abuse the playground demo too much, and feel free to use this admin page in any of your projects.&lt;/p&gt;




&lt;p&gt;Liked this?  Be sure to follow me on dev, subscribe to me at my &lt;a href="https://connerow.dev"&gt;website&lt;/a&gt;, and support this post with a couple of reactions!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>nextjs</category>
      <category>react</category>
    </item>
    <item>
      <title>Web3: the unique technology and challenges behind the hype</title>
      <author>Lara Parvinsmith</author>
      <pubDate>Mon, 17 Jan 2022 20:17:11 +0000</pubDate>
      <link>https://dev.to/lparvinsmith/web3-the-unique-technology-and-challenges-behind-the-hype-kgn</link>
      <guid>https://dev.to/lparvinsmith/web3-the-unique-technology-and-challenges-behind-the-hype-kgn</guid>
      <description>&lt;p&gt;If you follow tech news, you've probably seen crypto evangelists say that Web3 will change the world. But what is Web3?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Web3 describes applications that can interact directly with the blockchain as its database.&lt;/strong&gt; At the time of writing, most apps, (also called 'dapps,' for 'decentralized apps') are built on the Ethereum blockchain. The reason a user would want to store their transactions on a public blockchain rather than a private, company-managed database is that it enables ownership and portability of their data and assets. The reason a developer would build an app on the blockchain is to tap into an advanced, transparent ecosystem with decentralized control.&lt;/p&gt;

&lt;p&gt;I write from the perspective of both a Web3 developer and a crypto user to highlight key technologies and remaining user experience challenges.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-stack-of-a-web3-app"&gt;
  &lt;/a&gt;
  The Stack of a Web3 app
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#the-smart-contract"&gt;
  &lt;/a&gt;
  The Smart Contract
&lt;/h3&gt;

&lt;p&gt;The database of a Web3 app is a blockchain like Ethereum. While an app could be written to simply send Ethereum from one account to another, most apps require a more complex API. &lt;strong&gt;The APIs for complex interaction with the blockchain come from smart contracts.&lt;/strong&gt; A smart contract is code that is stored and runs on the blockchain. It contains functions that allow a user to update the state of accounts on the blockchain. Examples of common functions include minting a non-fungible token (NFT), adding liquidity to a decentralized finance (defi) protocol, and voting in a decentralized autonomous organization (DAO).&lt;/p&gt;

&lt;p&gt;One advantage of smart contracts is that all code is transparent and available on a blockchain explorer like &lt;a href="https://etherscan.io"&gt;Etherscan&lt;/a&gt;. This allows a user to audit contract code, the contract owner, and all transactions in a convenient web UI.  However, not all users are technical or patient enough to be able to perform this type of due diligence, and scams and hacks are rampant in the community.&lt;/p&gt;

&lt;p&gt;Another key advantage is that anyone can build another a front end app or even another smart contract that interacts with the smart contract. In this way, a decentralized ecosystem of builders can thrive, and users can have more choice. An example of this is NFTs, which are stored on the blockchain and accessible from any NFT client. At the time of writing, &lt;a href="https://opensea.io"&gt;OpenSea&lt;/a&gt; is the largest NFT marketplace, but a user who buys an NFT on OpenSea is not locked into their app. Their transaction is stored on the blockchain, so they can access and sell the NFT from any other Web3 NFT app.&lt;/p&gt;

&lt;p&gt;But how does a Web3 frontend access the blockchain data and use a smart contract's API?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-wallet"&gt;
  &lt;/a&gt;
  The Wallet
&lt;/h3&gt;

&lt;p&gt;The crypto wallet is another key technology that makes Web3 unique. &lt;strong&gt;Every Web3 app must connect to a crypto wallet to allow the frontend to interact with the blockchain.&lt;/strong&gt; Some of the most popular wallets include &lt;a href="https://metamask.io"&gt;MetaMask&lt;/a&gt; and &lt;a href="https://www.coinbase.com/wallet"&gt;Coinbase Wallet&lt;/a&gt;, which a user can install as a browser extension and as a mobile app.&lt;/p&gt;

&lt;p&gt;A wallet allows users to create and manage accounts while isolating private keys from the Web3 app. The wallet exposes an API to interact with the blockchain and a user interface for confirming transactions. This allows a user to safely connect their account to a Web3 app and gives them control so that the Web3 app cannot write to the blockchain without the user's explicit permission.&lt;/p&gt;

&lt;p&gt;Relying on a third party wallet has the advantage of allowing the user to have consistent, controlled interaction across all Web3 apps, from allowing the app to read the user's public account details to confirming transactions before they're sent. From the developer perspective, this allows us to focus on building what's unique about our Web3 app, and not rebuild accounts and authentication every time. However, it does require some user setup the first time they want to interact with a Web3 app, as they have to install a wallet, set up an account, and add funds. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-client"&gt;
  &lt;/a&gt;
  The Client
&lt;/h3&gt;

&lt;p&gt;The client is the frontend app that a user interacts with in the web browser. You can build a Web3 app with any frontend framework, or even vanilla JS and HTML, but you will need an Ethereum Javascript library to interact with smart contracts. &lt;/p&gt;

&lt;p&gt;The two most commonly used libraries at the time of writing are &lt;a href="https://web3js.readthedocs.io/en/v1.5.2/index.html"&gt;web3.js&lt;/a&gt; and &lt;a href="https://docs.ethers.io/v5/"&gt;ethers.js&lt;/a&gt;. Both of these libraries provide utilities for interacting with the Ethereum blockchain, including accounts, contracts, and transactions.&lt;/p&gt;

&lt;p&gt;While the crypto wallet, such as MetaMask, provides an API to read and update the state of the Ethereum network, the JS library can find and abstract the smart contract so that its functions can be called asynchronously by the Web3 app. &lt;/p&gt;

&lt;p&gt;Other than that, the usual frontend libraries are often used to build more complex apps, with React as the most popular choice. There are even some libraries that combine React with Web3 functionality, such as &lt;a href="https://github.com/NoahZinsmeister/web3-react"&gt;web3-react&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-ux-challenges-of-web3-apps"&gt;
  &lt;/a&gt;
  Key UX Challenges of Web3 apps
&lt;/h2&gt;

&lt;p&gt;Some of the challenges I have mentioned above include requiring the user to install a wallet and fund an account before being able to interact with a Web3 app. Here are some other major user-facing challenges, that if not addressed in the ecosystem, could make Web3 unappealing to many users.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gas"&gt;
  &lt;/a&gt;
  Gas
&lt;/h3&gt;

&lt;p&gt;"Gas" refers to the transaction fee users pay miners with every transaction to keep the Ethereum blockchain running. It's a key part of the ecosystem, to incentivize miners to run nodes and to incentivize users not to overuse computing power. The amount the user pays is a function of the complexity of the transaction and the current demand. However, with the increased popularity of Ethereum, gas fees can rocket up to $200+ for some smart contract transactions at peak usage. &lt;strong&gt;What are the current solutions for high gas fees?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a user, you can check gas fees with apps like &lt;a href="https://ethgas.watch"&gt;ETH Gas.watch&lt;/a&gt; before you make a transaction, or sign up to be notified when gas prices drop. In general, gas prices tend to drop during U.S. sleeping hours (see &lt;a href="https://ethereumprice.org/gas/"&gt;Gas Price by Time of Day&lt;/a&gt;) so users could wait until low traffic times to make non-urgent transactions. But this is not an ideal solution for most users, and it disqualifies the use case of using it for everyday transactions such as buying a cup of coffee.&lt;/p&gt;

&lt;p&gt;As a developer, there are some ways to optimize your smart contract code to avoid exorbitant gas fees for your users. These strategies range from storing variables as preferred data types to using third party libraries. Since this is a complex topic on its own, I won't dive into it here, but will instead refer interested readers to &lt;a href="https://shiny.mirror.xyz/OUampBbIz9ebEicfGnQf5At_ReMHlZy0tB4glb9xQ0E"&gt;this article&lt;/a&gt; on cutting gas costs for minting NFTs. However, this optimization is still not enough for many prospective users. Going from a gas fee of $200 to a gas fee of $30 is a huge achievement, but $30 is still a big enough deterrent for new users trying to make their first transaction. Because it's not just the gas fees, but other uncertainty and complexity that could make a user even more risk adverse. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#complexity"&gt;
  &lt;/a&gt;
  Complexity
&lt;/h3&gt;

&lt;p&gt;Current blockchain transactions are still very complex for users, requiring multiple steps and new concepts. This causes a lot of uncertainty, and &lt;strong&gt;the user may often wonder: "am I doing this right?"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I covered some of the complexity of the crypto wallet and account setup above, but we must remember a new crypto user will have to create and fund a crypto wallet. This step alone could take days, depending on how fast their fiat can be converted to crypto and transferred to their wallet. When this is complete, they can interact with Web3 apps. However, the Web3 apps themselves are often just as complex. Decentralized apps involve new concepts, including over-collateralized lending and minting non-fungible tokens. They also often involve multiple steps, and rely on a user to already know what they are doing. &lt;/p&gt;

&lt;p&gt;There are many elements of a Web3 app that can make a user feel uncertainty. From the 42-character hexadecimal Ethereum address ("am I sending this to the right place?") to the transactions themselves ("why is gas so expensive?" "how do I know if it worked or not?") the user can be intimidated and fear losing their money from a small mistake. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#successes-errors-and-loading-states"&gt;
  &lt;/a&gt;
  Successes, errors, and loading states
&lt;/h3&gt;

&lt;p&gt;More transparency around what different transaction outcomes look like, and more UI to fill in the gaps, would be helpful to guide a user through complex Web3 flows. For example, if all goes well, how do you know if your transaction is successful? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A successful transaction is defined by being added to the blockchain, but it can take up to a few minutes for the app to be confident the transaction has been included in a block.&lt;/strong&gt; So the developer must decide how to communicate the difference between ‚Äòyour transaction was successfully sent to the pool of pending transactions,‚Äô and ‚Äòyour transaction was successfully added to the blockchain.‚Äô&lt;/p&gt;

&lt;p&gt;There are a few different tools to track the outcome of your transaction. One is on Etherscan: as a developer, you can have the "successfully initiated transaction" state provide a link to the transaction on Etherscan, so the user can check the status of their transaction there. You can also use client code to check whether a transaction has been mined, and indicate true "success" after 5 confirmations, or blocks created after the transaction. The latter may be a better user experience, since the user won't have to navigate away or reload the page. If the user expects their wallet balance to change as a result, or an NFT to arrive, that could be another signal of success, but on many platforms this requires waiting and refreshing.&lt;/p&gt;

&lt;p&gt;If a transaction fails, the user will often lose some of their gas fee, and maybe their confidence in Web3. To avoid this, we need proactive measures to make sure their transactions don't error. We can achieve this by making smart contract state more transparent to the client, and by validating requirements on the client before allowing transactions to be initiated. Web3 developers should also focus on clearly communicating any errors to the user. All of these strategies will lead to more user confidence in Web3 technology.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Web3 hype is grounded in revolutionary technologies that have a thriving ecosystem of builders, and users of all levels of expertise.&lt;/strong&gt; These technologies: the blockchain, smart contracts, and crypto wallets are key tools for building the Web3 ecosystem. Web3 already provides users and developers more freedom and transparency, but there are still some major drawbacks that could prevent mainstream adoption if unaddressed.&lt;/p&gt;

</description>
      <category>web3</category>
      <category>blockchain</category>
      <category>ux</category>
      <category>ethereum</category>
    </item>
    <item>
      <title>The Hascal Programming Language</title>
      <author>bistcuite</author>
      <pubDate>Mon, 17 Jan 2022 20:17:05 +0000</pubDate>
      <link>https://dev.to/bistcuite/the-hascal-programming-language-3370</link>
      <guid>https://dev.to/bistcuite/the-hascal-programming-language-3370</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hascal&lt;/strong&gt; is a general purpose and open source programming language designed to build optimal, maintainable, reliable and efficient software.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Simple and easy to learn&lt;/li&gt;
&lt;li&gt;Fast and powerful like C++&lt;/li&gt;
&lt;li&gt;Inspired by Swift and Pascal&lt;/li&gt;
&lt;li&gt;C++ on backend&lt;/li&gt;
&lt;li&gt;Compatible with C\C++&lt;/li&gt;
&lt;li&gt;Strongly typed&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;p&gt;Hello World :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Formatting Strings :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ReadStr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter your name :&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fmt_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi,{}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fmt_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;HTTP Response :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://example.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/hascal/hascal"&gt;Our GitHub repository for more information&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#if-you-interested-in-hascal-star-hascals-repo-on-github"&gt;
  &lt;/a&gt;
  &lt;a href="//https//github.com/hascal/hascal"&gt;If you interested in Hascal, star hascal's repo on GitHub&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Any contribution is welcome!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>python</category>
      <category>cpp</category>
      <category>c</category>
    </item>
    <item>
      <title>RESTful API √úzerinde Ba≈ütan Sona Performans Testi </title>
      <author>Mustafa</author>
      <pubDate>Mon, 17 Jan 2022 19:56:26 +0000</pubDate>
      <link>https://dev.to/byksy/restful-api-uzerinde-bastan-sona-performans-testi-3j24</link>
      <guid>https://dev.to/byksy/restful-api-uzerinde-bastan-sona-performans-testi-3j24</guid>
      <description>&lt;p&gt;Ba≈ülarken;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jmeter kurulumu&lt;/li&gt;
&lt;li&gt;Jmeter ile test ortamƒ±nƒ±n hazƒ±rlanmasƒ±&lt;/li&gt;
&lt;li&gt;ƒ∞lk sonu√ßlarƒ±n alƒ±nmasƒ±&lt;/li&gt;
&lt;li&gt;InfluxDB kurulumu&lt;/li&gt;
&lt;li&gt;Grafana kurulumu&lt;/li&gt;
&lt;li&gt;Grafana g√∂sterge paneli √ºzerinde test sonu√ßlarƒ±nƒ±n g√∂sterilmesi
√ºzerinden ba≈ütan sona bir perfomans testini ayrƒ±ntƒ±lƒ± konu≈üacaƒüƒ±z.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Performans testi: bir √ßok yazƒ±lƒ±m m√ºhendisinin √ßok defa kar≈üƒ±la≈ütƒ±ƒüƒ±, √ß√∂z√ºm √ºrettiƒüi ve bu testler sayesinde √ºzerinde √ßalƒ±≈ütƒ±ƒüƒ± sistemin artƒ± ve eksilerini g√∂rd√ºƒü√º bir testtir. Ama √ßoƒüu durumda test ekibi dƒ±≈üƒ±nda olan yazƒ±lƒ±m m√ºhendislerinin fazla dikkat etmediƒüi de bir konudur aslƒ±nda. Kendi testlerini genel olarak bir ka√ß defa y√ºk veya performans testi yaptƒ±ktan sonra ki bu da genelde REST Api √ºzerinden olur, yazdƒ±ƒüƒ± kod bloƒüunu commit/deploy etme yada bir diƒüer ifadeyle canlƒ±ya alma yoluna gider. Genel olarak ben de b√∂yle yapƒ±yordum. √á√ºnk√º performans testinin √ßok √ßetrefilli olduƒüunu, bir √ßok konfig√ºrasyon yapmam gerektiƒüini bununla zaman kaybedeceƒüime yeni geli≈ütirmeler yapabileceƒüimi d√º≈ü√ºn√ºyordum. &lt;br&gt;
Fakat g√∂rd√ºm ki yazdƒ±ƒüƒ±m kodlar, olu≈üturduƒüum sorgular her ne kadar optimize edilmi≈ü olsa da canlƒ± da yava≈ü √ßalƒ±≈üan sistemler, a√ßƒ±lmayan web sayfalarƒ± olarak kar≈üƒ±ma √ßƒ±kƒ±yordu. Bu durum beni performans veya y√ºk testini kendi i√ßimde nasƒ±l yapabilirimin sorusunun cevabƒ±nƒ± bulmaya gitti ve √∂ƒürenmeye ba≈üladƒ±m. √ñƒürendikten sonra, yakla≈üƒ±k 1-2 saat i√ßerisinde yazmƒ±≈ü olduƒüum herhangi bir HTTP Request i rahatlƒ±kla test edebilir hale getirdiƒüimi g√∂rd√ºm. Bu sebeple sizin de benim gibi performans takƒ±ntƒ±nƒ±z varsa ve bunu kolay ve anla≈üƒ±lƒ±r yoldan yapmak istiyorsanƒ±z, bu yazƒ± size g√∂re olabilir.&lt;br&gt;
√ñncelikle REST Api mizi test edebilecek bir araca ihtiyacƒ±mƒ±z olacak. Bunlardan yaygƒ±n ve √ºcretsiz olanlardan bir tanesi JMeter ile ba≈ülayacaƒüƒ±z. Jmeter nedir ne deƒüildir bu gibi √ßok ayrƒ±ntƒ±ya girmeyeceƒüiz, i≈üimizi g√∂recek kadar bilsek yeterli ≈üu an i√ßin. Kronometreleriniz a√ßƒ±k mƒ±? Bakalƒ±m siz ka√ß saat veya dakikada test sisteminizi olu≈üturacaksƒ±nƒ±z.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#jmeter-kurulumu-ve-i%CC%87lk-test"&gt;
  &lt;/a&gt;
  Jmeter Kurulumu ve ƒ∞lk Test
&lt;/h2&gt;

&lt;p&gt;Jmeter aracƒ±nƒ± indirmek i√ßin &lt;a href="https://jmeter.apache.org/download_jmeter.cgi"&gt;bu linkten&lt;/a&gt; faydalanabilirsiniz. ≈ûu an ben Apache JMeter 5.4.3 s√ºr√ºm√ºn√º kullanƒ±yorum, belki siz bu yazƒ±yƒ± okuduƒüunuzda s√ºr√ºm bilgileri deƒüi≈ümi≈ü olabilir. ƒ∞lgili sayfada belirttiƒüi √ºzere bilgisayarƒ±mda Java 8+ olup olmadƒ±ƒüƒ±nda dikkat ediyorum, deƒüilse Java nƒ±n 8 veya √ºst√º s√ºr√ºm√ºn√º indiriyorum. Burada iki kaynak (Source / Binaries) var ben Binaries olanƒ± se√ßiyorum ve a≈üaƒüƒ±daki resimde g√∂r√ºld√ºƒü√º √ºzere apache-jmeter-5.4.3.zip dosyasƒ±nƒ± indiriyorum.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mKvxRgx5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fwvygtonlu2fc3jkrmr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mKvxRgx5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fwvygtonlu2fc3jkrmr.png" alt="Image description" width="880" height="550"&gt;&lt;/a&gt;&lt;br&gt;
ƒ∞ndirdiƒüim dosyayƒ± unzip edip, &lt;strong&gt;apache-jmeter-5.4.3\bin\jmeter.bat&lt;/strong&gt; uzantƒ±sƒ±na tƒ±klayarak Jmeter ƒ±mƒ± a√ßƒ±yorum. Jmeter ana sayfam a√ßƒ±ldƒ±ktan sonra sizin da kar≈üƒ±nƒ±za a≈üaƒüƒ±daki gibi bir g√∂rsel √ßƒ±kmasƒ± gerekiyor. Eƒüer √ßƒ±ktƒ±ysa doƒüru yoldasƒ±nƒ±z demektir.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UOe-2NEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y333u7werzvhacjtohdf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UOe-2NEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y333u7werzvhacjtohdf.png" alt="Image description" width="880" height="372"&gt;&lt;/a&gt;&lt;br&gt;
√ñnemli bir hatƒ±rlatma: Yukarƒ±daki resimde g√∂rd√ºƒü√ºn√ºz √ºzere Jmeter 2 numaralƒ± cmd.exe den beslendiƒüi i√ßin kapatmanƒ±z durumunda Jmeter da kapanacaktƒ±r. Kapatmadan i≈ülemlerinize devam ediniz.&lt;br&gt;
≈ûimdi test planƒ±mƒ±zƒ± (1 numara) olu≈üturmamƒ±z lazƒ±m. Bir performans veya y√ºk testi yapabilmek i√ßin ihtiya√ß duyduƒüumuz yegane ≈üey sanal kullanƒ±cƒ±lardƒ±r. Yani sitemize 10 ki≈üi veya 100 ki≈üi girdiƒüinde sitemiz nasƒ±l tepki veriyor, bu y√ºk√º kaldƒ±rabiliyor mu, performanslƒ± √ßalƒ±≈üƒ±yor mu g√∂rmek isteriz. Bu 10,100 veya 1000 sanal kullanƒ±cƒ±yƒ± olu≈üturmak i√ßin Test Plan tabƒ±na saƒü tƒ±klayarak &lt;strong&gt;Add-&amp;gt;Threads(Users)-&amp;gt;Thread Group&lt;/strong&gt; sekmesine tƒ±klƒ±yoruz. Resimde g√∂r√ºld√ºƒü√º √ºzere Thread Group ile ne kadar user ile test etmemiz gerektiƒüine ve hangi saniye aralƒ±klarla bunu yapmamƒ±za ve d√∂ng√º yapƒ±p yapmayacaƒüƒ±mƒ±za karar verebiliyoruz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ddmwY4yA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/geobcqgebrkrkzwqcw31.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ddmwY4yA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/geobcqgebrkrkzwqcw31.png" alt="Image description" width="880" height="371"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ƒ∞lgili RestAPI mizi ka√ß thread veya kullanƒ±cƒ± ile test edeceƒüimize karar verdikten sonra, √∂rneƒüin ben 200 kullanƒ±cƒ± ile test edeceƒüim, REST API de √ßaƒüƒ±rma methodlarƒ±mƒ±z olarak da bilinen bir HTTP Request olu≈üturacaƒüƒ±z. HTTP Request ile belirlediƒüimiz bu 200 kullanƒ±cƒ± hangi HTTP Requesti ve Requestleri test etsin ona karar vereceƒüiz. Bunun i√ßin a≈üaƒüƒ±daki resimde de g√∂r√ºld√ºƒü√º √ºzere Thread Group tabƒ±na saƒü tƒ±klayƒ±p &lt;strong&gt;Add-&amp;gt;Sampler-&amp;gt;HTTP Request&lt;/strong&gt; sekmesine tƒ±klayƒ±p yeni bir HTTP Request olu≈üturuyorum. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--amvYYFI_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0fwxac3m6sivr9bc9kjh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--amvYYFI_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0fwxac3m6sivr9bc9kjh.png" alt="Image description" width="880" height="371"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ben kendi REST Api mi deƒüil de internette free REST Api test edebileceƒüim bir sayfa √ºzerinde test edeceƒüim. Bunun i√ßin &lt;a href="https://reqres.in/"&gt;reqres.in&lt;/a&gt; web sayfasƒ±nƒ± kullanƒ±p, oradan bir HTTP Request se√ßmek istiyorum. A≈üaƒüƒ±daki resimde g√∂r√ºld√ºƒü√º √ºzere *&lt;em&gt;&lt;a href="https://reqres.in/api/users?page=2"&gt;https://reqres.in/api/users?page=2&lt;/a&gt; *&lt;/em&gt; api sayfasƒ±nƒ± test edeceƒüim. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OE0MPVQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujs15jqu1vbymmm14u6d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OE0MPVQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujs15jqu1vbymmm14u6d.png" alt="Image description" width="880" height="484"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Eƒüer siz kendi olu≈üturduƒüunuz Rest API yƒ± test etmek isterseniz ve bir HTTP Header a ihtiyacƒ±nƒ±z varsa, yine Thread Group a saƒü tƒ±klayƒ±p Add-&amp;gt; Config Element-&amp;gt; HTTP Header Manager ƒ± se√ßmeniz yeterli olacaktƒ±r. Bir sonraki yazƒ±mda kendi REST API mizi olu≈üturup test etmeyi de anlatmayƒ± d√º≈ü√ºn√ºyorum.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Test edeceƒüimiz API url ini belirledikten sonra bunu Jmeter ile nasƒ±l tanƒ±mlƒ±yoruz ona bakalƒ±m. Jmeter da HTTP Request i sekmesini tƒ±kladƒ±ƒüƒ±mƒ±zda a≈üaƒüƒ±daki gibi bir g√∂rsel gelecektir. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--68ZW6yzE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dni8shelic2y6njjfove.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--68ZW6yzE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dni8shelic2y6njjfove.png" alt="Image description" width="880" height="371"&gt;&lt;/a&gt;&lt;br&gt;
 ƒ∞lgili url imin *&lt;em&gt;&lt;a href="https://reqres.in/api/users?page=2"&gt;https://reqres.in/api/users?page=2&lt;/a&gt; *&lt;/em&gt;  yukarƒ±daki resimde nasƒ±l daƒüƒ±tƒ±ldƒ±ƒüƒ±nƒ± g√∂rmektesiniz. 7 numaralƒ± kƒ±sƒ±ma server veya ip ismi, 8  numaralƒ± kƒ±sma path imiz, son olarak 9 nolu kƒ±sƒ±ma ise parametremizi yazƒ±yoruz, bu da url deki soru i≈üareti kƒ±smƒ±ndan sonra kƒ±sƒ±ma denk geliyor. ≈ûu an ufak bir API testi yaptƒ±ƒüƒ±mƒ±zdan ve genel bir anlatƒ±m olduƒüundan √ßok detaya giremiyorum. ƒ∞lerleyen zamanlarda bu kƒ±smƒ± da detaylandƒ±rabiliriz. Ayrƒ±ca ≈üunu da belirtmek isterim ki, biz ≈üu an her ne kadar bir HTTP Request le test etsek de normal de daha √ßok HTTP Requesti de test edebiliriz. Sadece yeni bir HTTP Request olu≈üturmanƒ±z ve farklƒ± bir api url i girmeniz gerekecektir.&lt;/p&gt;

&lt;p&gt;≈ûimdi geldik verilerimizi analiz etmeye. ƒ∞lk g√∂rseli g√∂rmek isterseniz, Thread Group a yine saƒü tƒ±klayarak Add-&amp;gt; Listener -&amp;gt; ... diyerek istediƒüiniz analiz verilerini g√∂rebilirsiniz. Ben √∂rnek olsun diye &lt;strong&gt;View Result Tree&lt;/strong&gt; ve &lt;strong&gt;View Result in Table&lt;/strong&gt; ƒ± ekleyeceƒüim. ƒ∞lgili listener larƒ± ekledikten sonra testi ba≈ülatmak i√ßin Jmeter ƒ± ilk √∂nce kaydedip, daha sonra Run(Play) butonuna basmak yeterli olacaktƒ±r. Test bittikten sonra ilgili listener lara tƒ±kladƒ±ƒüƒ±nƒ±zda sonu√ßlarƒ± g√∂rebileceksiniz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QoAVqsAf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/go46j9pel1w334f0zhcy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QoAVqsAf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/go46j9pel1w334f0zhcy.png" alt="Image description" width="880" height="371"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hadi gelin ≈üimdi bu test sonucunda d√∂nen datayƒ± g√∂rselle≈ütirip, daha iyi analiz edilebilir hale getirelim. Bunun i√ßin test sonu√ß verilerini aktaracaƒüƒ±mƒ±z Influx DB ye ve sonucu g√∂rselle≈ütireceƒüimiz Grafana ya ihtiyacƒ±mƒ±z olacak.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#influx-db-kurulumu"&gt;
  &lt;/a&gt;
  Influx DB Kurulumu
&lt;/h2&gt;

&lt;p&gt;Jmeter yapmƒ±≈ü olduƒüumuz testi daha iyi bir g√∂rsel ile analiz etmek istiyorsak bunun en kolay yollarƒ±ndan bir tanesi, InfluxDB ile Jmeter den gelen analiz verilerini kaydedip, Grafana aracƒ± ile bu veriyi g√∂stermek. Bunun i√ßin ihtiyacƒ±mƒ±z olan Influx DB yi indirmek i√ßin &lt;a href="https://portal.influxdata.com/downloads/"&gt;linke&lt;/a&gt; tƒ±klayabilirsiniz. Fakat burada √∂nemli bir detayƒ± vermekte fayda var. Eƒüer InfluxDB nin son s√ºr√ºm√ºn√º indirirseniz, Grafana daki analiz g√∂rsellerinizi (dashboard) FluxDB query ile olu≈üturmanƒ±z gerekiyor, normalde Granfana da Jmeter analiz g√∂rselleri i√ßin hazƒ±r yapƒ±lar var fakat bunlarƒ±n √ßoƒüu FluxDB yi desteklemiyor. O y√ºzden benim amacƒ±m FluxDB ile dashboard olu≈üturmak olmadƒ±ƒüƒ±ndan InfluxDB'nin 1.8... versiyonunu indirdim. A≈üaƒüƒ±daki resimden InfluxDB'nin eski versiyonunun nerede olduƒüunu g√∂rebilirsiniz. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IkW2xuIF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0tgp9ab5c22ptei3a6f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IkW2xuIF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0tgp9ab5c22ptei3a6f.png" alt="Image description" width="880" height="458"&gt;&lt;/a&gt;&lt;br&gt;
Direk bir setup linki olmadƒ±ƒüƒ±ndan veri tabanƒ±nƒ± Windows i√ßin verdiƒüi PowerShell komutuyla indirebilirsiniz. ƒ∞lgili satƒ±rƒ± kopyalayƒ±p PowerShell inize yapƒ±≈ütƒ±rdƒ±ƒüƒ±nƒ±zda s√ºr√ºm√ºn inmeye ba≈üladƒ±ƒüƒ±nƒ± g√∂receksiniz. ƒ∞≈üte bu kadar kolay. InfluxDB nizin indiƒüi yere gidip dosyayƒ± unzip ediyoruz. Genelde C:\Users[Bilgisayar ƒ∞sminiz] olduƒüu yerde oluyor, dikkat etmekte fayda var.&lt;/p&gt;

&lt;p&gt;Unzip ettikten sonra &lt;strong&gt;...\influxdb-1.8.10_windows_amd64\influxdb-1.8.10-1\influxd.exe&lt;/strong&gt; yi √ßalƒ±≈ütƒ±rarak InfluxDB'imizi ayaƒüa kaldƒ±rƒ±yoruz. Ayaƒüa kaldƒ±rdƒ±ktan sonra yapmamƒ±z gereken bir veri tabanƒ± ve bir kullanƒ±cƒ± adƒ± olu≈üturmak. Bunu olu≈üturmamƒ±zƒ±n sebebi, Jmeter veriyi hangi veritabanƒ±na yazsƒ±n onu s√∂ylemek, Grafana hangi veri tabanƒ±na hangi kullanƒ±cƒ± ile baƒülansƒ±n onu belirtmek i√ßin. Bunun i√ßin &lt;strong&gt;...\influxdb-1.8.10_windows_amd64\influxdb-1.8.10-1\influx.exe&lt;/strong&gt; dosyasƒ±nƒ± √ßalƒ±≈ütƒ±rƒ±yoruz ve kar≈üƒ±mƒ±za gelen .exe ekranƒ±na &lt;/p&gt;

&lt;p&gt;&lt;code&gt;CREATE DATABASE test_db&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;yazƒ±yor ve enter a basƒ±yoruz. Kullanƒ±cƒ± olu≈üturmak i√ßin de a≈üaƒüƒ±daki kod satƒ±rƒ±nƒ± yazƒ±p, enter a basmanƒ±z yeterli olacaktƒ±r.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CREATE USER root with password 'root'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tekrar hatƒ±rlatmak da fayda var, √ßalƒ±≈ütƒ±rdƒ±ƒüƒ±nƒ±z .exe file larƒ±nƒ± l√ºtfen t√ºm test s√ºreciniz bitene kadar kapatmayƒ±nƒ±z.&lt;br&gt;
** &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;≈ûimdi, InfluxDB yi bu ≈üekilde bƒ±rakalƒ±m ve Grafana nƒ±n kurulumuna ge√ßelim. Grafana nƒ±n kurulumunu yapƒ±p veri tabanƒ±mƒ±zƒ± baƒüladƒ±ktan sonra Jmeter √ºzerinde yapƒ±lan testin Grafana da nasƒ±l g√∂r√ºnd√ºƒü√ºne hep beraber bakalƒ±m.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#grafana-kurulumu"&gt;
  &lt;/a&gt;
  Grafana Kurulumu
&lt;/h2&gt;

&lt;p&gt;Ben yukarƒ±da ki diƒüer kurulumlar gibi Grafanada da aynƒ± y√∂ntemle ilerleyeceƒüim. ƒ∞lgili &lt;a href="https://grafana.com/grafana/download?platform=windows"&gt;linke &lt;/a&gt; tƒ±kladƒ±ƒüƒ±nƒ±zda a≈üaƒüƒ±daki g√∂rselde g√∂r√ºld√ºƒü√º √ºzere Windows Binaries i se√ßip, ilgili zip dosyasƒ±nƒ± indirip, unzip ediyoruz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5obSq3hh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysa0khy3ouqmhxv7m10b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5obSq3hh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysa0khy3ouqmhxv7m10b.png" alt="Image description" width="880" height="441"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unzip ettikten sonra indirdiƒüiniz yolun &lt;strong&gt;...\grafana-8.3.3\bin&lt;br&gt;
** klas√∂r√ºne gidip grafana-server.exe yi √ßalƒ±≈ütƒ±rƒ±yoruz. ƒ∞lgili .exe dosyasƒ±nƒ± hi√ß kapamadan **&lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;&lt;/strong&gt; adresine gidiyoruz. ƒ∞lk a√ßƒ±lƒ±≈üta sizi bir login sayfasƒ± kar≈üƒ±layacak, default user / password olan;&lt;br&gt;
&lt;code&gt;Username: admin&lt;br&gt;
Password: admin&lt;/code&gt;&lt;br&gt;
girip devam edebilirsiniz.&lt;/p&gt;

&lt;p&gt;≈ûimdi sƒ±ra geldi InfluxDB yi Grafana ya baƒülama i≈ülemine. Bunun i√ßin a≈üaƒüƒ±daki g√∂rseldeki gibi Configuration-&amp;gt; Data Source sekmesine tƒ±klƒ±yoruz. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YRQqidtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5cdjca0rch6dq278n899.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YRQqidtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5cdjca0rch6dq278n899.png" alt="Image description" width="880" height="606"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Gelen sayfadan &lt;strong&gt;Add Data Source&lt;/strong&gt; butonuna tƒ±klayƒ±p, InfluxDB yi se√ßiyoruz. Kar≈üƒ±nƒ±za bir baƒülamayƒ± planladƒ±ƒüƒ±nƒ±z InfluxDB nin baƒülantƒ± bilgilerini doldurmanƒ±z gereken bir form gelecek. ≈ûimdi sƒ±rayla bu bilgileri dolduralƒ±m.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HEd2NHB4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p1z23sdxxq2invuwidjx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HEd2NHB4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p1z23sdxxq2invuwidjx.png" alt="Image description" width="880" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;13 numaralƒ± alana ilgili baƒülantƒ±ya bir isim veriyosunuz, ben MyTest olarak isimlendirdim.&lt;/li&gt;
&lt;li&gt;14 numaralƒ± alana sorgu dilinizi se√ßiyorsunuz, biz 1.8 versiyonunu indirdiƒüimiz i√ßin InfluxQL i se√ßiyoruz.&lt;/li&gt;
&lt;li&gt;15 numaralƒ± alana veritabanƒ±nƒ±zƒ±n url sini giriyorsunuz. Burada default olarak bir url yazƒ±yordur, fakat doƒüru olsa bile oraya ilgili url nizi yazƒ±nƒ±z. Url bilginiz yukarƒ±da bahsettiƒüim influx.exe yi √ßalƒ±≈ütƒ±rdƒ±ƒüƒ±nƒ±zda kar≈üƒ±nƒ±za √ßƒ±kacaktƒ±r. Default url ekranda g√∂r√ºld√ºƒü√º gibidir.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nrW4Y_-9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgotpvsi5ujs8qbsxwdj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nrW4Y_-9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgotpvsi5ujs8qbsxwdj.png" alt="Image description" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;16 numaralƒ± alana yukarƒ±da olu≈üturduƒüumuz veri tabanƒ± ismi, kullanƒ±cƒ± adƒ± ve ≈üifre bilgilerini giriyoruz.&lt;/li&gt;
&lt;li&gt;17 numaralƒ± alanƒ± GET olarak se√ßiyoruz ve 18 numaralƒ± butona tƒ±klayƒ±p g√∂rseldeki gibi baƒülantƒ±nƒ±n ba≈üarƒ±lƒ± olduƒüunu g√∂r√ºyoruz.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yukarƒ±da yapƒ±lanlarƒ± kƒ±saca √∂zetlersek, ≈üimdiye kadar;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jmeter kurulumu ve konfig√ºrasyonu yaptƒ±k.&lt;/li&gt;
&lt;li&gt;Jmeter da ilk testimizi ger√ßekle≈ütirdik.&lt;/li&gt;
&lt;li&gt;InfluxDB kurulumunu yaptƒ±k. Veri tabanƒ±, kullanƒ±cƒ± ve ≈üifre bilgilerini olu≈üturduk.&lt;/li&gt;
&lt;li&gt;Grafana yƒ± kurduk, InfluxDB yi veri kaynaƒüƒ± (Data Source) olarak belirleyip, baƒülantƒ±mƒ±zƒ± ger√ßekle≈ütirdik.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bundan sonra ise;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Grafana da Jmeter i g√∂r√ºnt√ºleyebileceƒüimiz hazƒ±r bir dashboard olu≈üturacaƒüƒ±z.&lt;/li&gt;
&lt;li&gt;Jmeter daki verileri InfluxDB ye canlƒ± olarak aktarƒ±p, Grafana dashboard u √ºzerinde g√∂r√ºnt√ºlemeye √ßalƒ±≈üacaƒüƒ±z.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hadi ba≈ülayalƒ±m...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#grafana-da-jmeter-g%C3%B6sterge-paneli-dashboard-olu%C5%9Fturma"&gt;
  &lt;/a&gt;
  Grafana da Jmeter G√∂sterge Paneli (Dashboard) Olu≈üturma
&lt;/h2&gt;

&lt;p&gt;Buradaki amacƒ±mƒ±z Jmeter dan gelen verileri, log olarak satƒ±r satƒ±r okumak yerine g√∂rsel anlamda zengin bir dashboard kullanƒ±p, performans analizimizi yapmak olacaktƒ±r. Bunun i√ßin hazƒ±r dashboardlar kullanacaƒüƒ±z. &lt;br&gt;
Ben &lt;a href="https://grafana.com/grafana/dashboards/5496"&gt;linkteki &lt;/a&gt; dashbordu kullanacaƒüƒ±m. Siz isterseniz ilk ba≈üta benim se√ßtiƒüim dashboard ile ilerleyin, testinizi bitirdikten sonra ba≈üka dashboardlarƒ± &lt;a href="https://grafana.com/grafana/dashboards/"&gt;bu sayfadan&lt;/a&gt; se√ßebilirsiniz. Burada g√∂rd√ºƒü√ºn√ºz √ºzere her dashboardun bir ID si var ve siz bu ID √ºzerinden dashboardunuzu kolaylƒ±kla olu≈üturuyorsunuz. ƒ∞lgili ID yi kopyalayƒ±p, a≈üaƒüƒ±daki g√∂rseldeki gibi Import alanƒ±na tƒ±klƒ±yoruz,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RdOiuoNB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mrx2o59j86hmtmrpcxbh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RdOiuoNB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mrx2o59j86hmtmrpcxbh.png" alt="Image description" width="840" height="681"&gt;&lt;/a&gt;&lt;br&gt;
ve &lt;strong&gt;_Import via grafana.com _&lt;/strong&gt; kolonuna yapƒ±≈ütƒ±rƒ±yoruz. Load dedikten sonra, a≈üaƒüƒ±daki g√∂rseldeki gibi ekranƒ±n gelmesini bekliyoruz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVvRWiif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vw4u8g3oedwyt7116kiw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVvRWiif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vw4u8g3oedwyt7116kiw.png" alt="Image description" width="880" height="558"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oD8u7uSZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jaf0biobsjo4dgq72fjq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oD8u7uSZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jaf0biobsjo4dgq72fjq.png" alt="Image description" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Y√ºkleme tamamlandƒ±ktan sonra, 21 numarada g√∂r√ºlen yere Data Soruce muzu se√ßiyoruz ve &lt;strong&gt;Import&lt;/strong&gt; butonuna tƒ±klƒ±yoruz.&lt;/p&gt;

&lt;p&gt;Ve i≈üte ilk dashboardumuz hazƒ±r :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cUOf6ewZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ktjgr53nwj0evv743ctm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cUOf6ewZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ktjgr53nwj0evv743ctm.png" alt="Image description" width="880" height="302"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;≈ûimdi en son olarak Jmeter ƒ±mƒ±zƒ± InfluxDB ye aktarƒ±mƒ±nƒ± yapƒ±p canlƒ± olarak Grafana √ºzerinden g√∂r√ºnt√ºleyeceƒüiz.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Burada &lt;strong&gt;√∂nemli bir not d√º≈üeyim&lt;/strong&gt;, verilerinizin canlƒ± aktƒ±ƒüƒ±nƒ± g√∂rebilmeniz i√ßin Grafana daki dashbordunuzda Yineleme zamanƒ±nƒ± Off tan farklƒ± deƒüer vermeniz gerekecek. Bunu a≈üaƒüƒ±daki g√∂rsele bakarak deƒüi≈ütirebilirsiniz.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rasMqg-1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67kyh0jbyhxnuqoaiqts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rasMqg-1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67kyh0jbyhxnuqoaiqts.png" alt="Image description" width="880" height="299"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jmeter a tekrar geliyoruz ve yeni bir &lt;strong&gt;listener&lt;/strong&gt; daha ekleyeceƒüiz. Bunun i√ßin yukarƒ±da anlattƒ±ƒüƒ±m adƒ±mlara bakarak Thread Group a saƒü tƒ±klayƒ±p &lt;strong&gt;Add-&amp;gt; Listener -&amp;gt; Backend Listener&lt;/strong&gt; ƒ± ekliyoruz. Ekledikten sonra 22 numaradaki listeye tƒ±klayƒ±p, benim se√ßtiƒüim kaynaƒüƒ± se√ßiyoruz. 23 numaradaki InfluxDbUrl alanƒ±nƒ± yine benim gibi dolduruyoruz. Burada yaptƒ±ƒüƒ±m tek ≈üey default gelen url alanƒ±na localhost ve veri tabanƒ± ismini eklemek oldu. ƒ∞≈ülemimiz bittikten sonra kaydet butonuna tƒ±klƒ±yoruz ve test planƒ±mƒ±zƒ± en son haliyle kaydediyoruz.&lt;/p&gt;

&lt;p&gt;Hadi test edelim...&lt;/p&gt;

&lt;p&gt;Uzun bir yazƒ±dan sonra yapmƒ±≈ü olduƒüumuz emeƒüin kar≈üƒ±lƒ±ƒüƒ±nƒ± almaya hazƒ±rƒ±z. Jmeter Ba≈üla (Play) tu≈üuna basƒ±nƒ±z ve hemen ardƒ±ndan Grafana daki dashbordunuzu a√ßƒ±nƒ±z. Tebrikler, ilk testinizin sonucunu aldƒ±nƒ±z. Tabii ben az bir kullanƒ±cƒ± ile yaptƒ±ƒüƒ±mdan kaynak t√ºketimim az oldu ve bu sebeple hataya d√º≈üen hi√ß bir i≈ülemim (thread) olmadƒ± :) &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2pQJVgz6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3unggjyeujq1sjlwfwm7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2pQJVgz6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3unggjyeujq1sjlwfwm7.png" alt="Image description" width="880" height="309"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bu konu ile ilgili takƒ±ldƒ±ƒüƒ±nƒ±z veya yapamadƒ±ƒüƒ±nƒ±z bir durum olu≈üursa l√ºtfen yorumlara yazƒ±nƒ±z, birlikte sorunun √ºzerine gidip √ß√∂zebiliriz. Bir sonraki yazƒ±mƒ±zda g√∂r√º≈ümek √ºzere, saƒülƒ±cakla kalƒ±nƒ±z.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Best Visual Studio Code Extensions for Developers</title>
      <author>Samitha Wijesekara</author>
      <pubDate>Mon, 17 Jan 2022 19:52:06 +0000</pubDate>
      <link>https://dev.to/samithawijesekara/best-visual-studio-code-extensions-for-developers-1o42</link>
      <guid>https://dev.to/samithawijesekara/best-visual-studio-code-extensions-for-developers-1o42</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-gitlens-git-supercharged"&gt;
  &lt;/a&gt;
  1. GitLens ‚Äî Git supercharged
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IUbXMLIX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hnjce5ip3yn3xi7p6bc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IUbXMLIX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hnjce5ip3yn3xi7p6bc.PNG" alt="Best Visual Studio Code Extensions for Developers" width="789" height="627"&gt;&lt;/a&gt;Usage - GitLens simply helps you better understand code. Quickly glimpse into whom, why, and when a line or code block was changed. Jump back through history to gain further insights as to how and why the code evolved. Effortlessly explore the history and evolution of a codebase.(&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;Install Now&lt;/a&gt;) &lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-live-server"&gt;
  &lt;/a&gt;
  2. Live Server
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vf7WS6J1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnuy1gcul8y633m7swrj.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vf7WS6J1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnuy1gcul8y633m7swrj.PNG" alt="Best Visual Studio Code Extensions for Developers" width="793" height="637"&gt;&lt;/a&gt;Usage - Launch a local development server with live reload feature for static &amp;amp; dynamic pages.(&lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;Install Now&lt;/a&gt;) &lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-bracket-pair-colorizer"&gt;
  &lt;/a&gt;
  3. Bracket Pair Colorizer
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jpKb5gzi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vl52uqphdjg3c7h3jdx.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jpKb5gzi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vl52uqphdjg3c7h3jdx.PNG" alt="Best Visual Studio Code Extensions for Developers" width="789" height="630"&gt;&lt;/a&gt;Usage - This extension allows matching brackets to be identified with colors. The user can define which characters to match, and which colors to use.(&lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer"&gt;Install Now&lt;/a&gt;) &lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-mithril-emmet"&gt;
  &lt;/a&gt;
  4. Mithril Emmet
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PZKei0po--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/augax3r09emgpruhk5bx.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PZKei0po--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/augax3r09emgpruhk5bx.PNG" alt="Best Visual Studio Code Extensions for Developers" width="785" height="630"&gt;&lt;/a&gt;Usage - ‚ÄúEmmet is a plugin for many popular text editors which greatly improves HTML and CSS workflow‚Äù. Short and to the point. Emmet can increase your workflow when building sites Emmet also used to be called Zen Coding for those of you that see the syntax is familiar.(&lt;a href="https://marketplace.visualstudio.com/items?itemName=FallenMax.mithril-emmet"&gt;Install Now&lt;/a&gt;) &lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-material-theme"&gt;
  &lt;/a&gt;
  5. Material Theme
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GJoliHYh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/65aui5qd40xpc4lhzpfq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GJoliHYh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/65aui5qd40xpc4lhzpfq.PNG" alt="Best Visual Studio Code Extensions for Developers" width="787" height="637"&gt;&lt;/a&gt;Usage - Material Theme is a VS code IDE theme.(&lt;a href="https://marketplace.visualstudio.com/items?itemName=Equinusocio.vsc-material-theme"&gt;Install Now&lt;/a&gt;) &lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-material-icon-theme"&gt;
  &lt;/a&gt;
  6. Material Icon Theme
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CWkkar6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xe3i7dilt4k3zxmjrsk.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CWkkar6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xe3i7dilt4k3zxmjrsk.PNG" alt="Best Visual Studio Code Extensions for Developers" width="789" height="635"&gt;&lt;/a&gt;Usage - Material Theme Icon is set VS code files and folder icons matching to the file extension and folder name.(&lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme"&gt;Install Now&lt;/a&gt;) &lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-prettier-code-formatter"&gt;
  &lt;/a&gt;
  7. Prettier - Code formatter
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kIKpwDja--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xechm954ef4ov4zsdb23.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kIKpwDja--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xechm954ef4ov4zsdb23.PNG" alt="Best Visual Studio Code Extensions for Developers" width="787" height="644"&gt;&lt;/a&gt;Usage - Prettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.(&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Install Now&lt;/a&gt;) &lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-es7-reactreduxgraphqlreactnative-snippets"&gt;
  &lt;/a&gt;
  8. ES7 React/Redux/GraphQL/React-Native snippets
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JDlGRO4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vop4d2v35f88efvabmm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JDlGRO4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vop4d2v35f88efvabmm.PNG" alt="Best Visual Studio Code Extensions for Developers" width="790" height="627"&gt;&lt;/a&gt;Usage - By using this plugin you can easily add the codes from snippets.(&lt;a href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets"&gt;Install Now | See All Snippets&lt;/a&gt;) &lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-vscodestyledcomponents"&gt;
  &lt;/a&gt;
  9. Vscode-Styled-Components
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BzM9KbJe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjtgxqj3lds6d6z7ejot.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BzM9KbJe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjtgxqj3lds6d6z7ejot.PNG" alt="Best Visual Studio Code Extensions for Developers" width="783" height="629"&gt;&lt;/a&gt;Usage - The styled-components extension adds highlighting and IntelliSense for styled-component template strings in JavaScript and TypeScript.(&lt;a href="https://marketplace.visualstudio.com/items?itemName=styled-components.vscode-styled-components"&gt;Install Now&lt;/a&gt;) &lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-codesnap"&gt;
  &lt;/a&gt;
  10. CodeSnap
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nLUx0Nrb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0whatjeyjr2a2833gj4.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nLUx0Nrb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0whatjeyjr2a2833gj4.PNG" alt="Best Visual Studio Code Extensions for Developers" width="788" height="630"&gt;&lt;/a&gt;Usage - Take beautiful screenshots of your code in VS Code!(&lt;a href="https://marketplace.visualstudio.com/items?itemName=adpyke.codesnap"&gt;Install Now&lt;/a&gt;) &lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-better-comments"&gt;
  &lt;/a&gt;
  11. Better Comments
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VUePKVnL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/in5n0ssd2j7zslhei151.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VUePKVnL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/in5n0ssd2j7zslhei151.PNG" alt="Best Visual Studio Code Extensions for Developers" width="788" height="639"&gt;&lt;/a&gt;Usage - The Better Comments extension will help you create more human-friendly comments in your code.(&lt;a href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments"&gt;Install Now&lt;/a&gt;) &lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-auto-rename-tag"&gt;
  &lt;/a&gt;
  12. Auto Rename Tag
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EAaGtluA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h8zanq615wuou8jsyvvt.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EAaGtluA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h8zanq615wuou8jsyvvt.PNG" alt="Best Visual Studio Code Extensions for Developers" width="791" height="633"&gt;&lt;/a&gt;Usage - When you rename one HTML/XML tag, automatically rename the paired HTML/XML tag.(&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;Install Now&lt;/a&gt;) &lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#13-html-snippets"&gt;
  &lt;/a&gt;
  13. HTML Snippets
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8a5lg8Lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sivre162s7l9uum823d1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8a5lg8Lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sivre162s7l9uum823d1.PNG" alt="Best Visual Studio Code Extensions for Developers" width="788" height="637"&gt;&lt;/a&gt;Usage - This extension adds rich language support for the HTML Markup to VS Code.(&lt;a href="https://marketplace.visualstudio.com/items?itemName=abusaidm.html-snippets"&gt;Install Now&lt;/a&gt;) &lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#14-css-peek"&gt;
  &lt;/a&gt;
  14. CSS Peek
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mkqr4_zg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igl5pcxzf6tiuhgxb655.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mkqr4_zg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igl5pcxzf6tiuhgxb655.PNG" alt="Best Visual Studio Code Extensions for Developers" width="825" height="632"&gt;&lt;/a&gt;Usage - Allow peeking to css ID and class strings as definitions from html files to respective CSS. Allows peek and goto definition.(&lt;a href="https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek"&gt;Install Now&lt;/a&gt;) &lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#15-powershell"&gt;
  &lt;/a&gt;
  15. PowerShell
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4t5I1BhA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5co2qkth8m7o1hzs0hk.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4t5I1BhA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5co2qkth8m7o1hzs0hk.PNG" alt="Best Visual Studio Code Extensions for Developers" width="811" height="630"&gt;&lt;/a&gt;Usage - This extension provides rich PowerShell language support for Visual Studio Code (VS Code). Now you can write and debug PowerShell scripts using the excellent IDE-like interface that Visual Studio Code provides.(&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.PowerShell"&gt;Install Now&lt;/a&gt;) &lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>vscode</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Firing on all cylinders (Part 2): Understanding Hidden Classes to optimize your JavaScript code</title>
      <author>Austin Burger</author>
      <pubDate>Mon, 17 Jan 2022 19:40:56 +0000</pubDate>
      <link>https://dev.to/about14sheep/firing-on-all-cylinders-part-2-understanding-hidden-classes-to-optimize-your-javascript-code-5di3</link>
      <guid>https://dev.to/about14sheep/firing-on-all-cylinders-part-2-understanding-hidden-classes-to-optimize-your-javascript-code-5di3</guid>
      <description>&lt;p&gt;In the first part of this series we went over the differences between dynamic and non-dynamic languages. We also went over the difference between how the two approach object storage lookup. We discussed the meaning of offset, the displacement integer in memory between an object and its properties. We then looked into how JavaScript interpreters combine all of that through the use of hash tables.&lt;/p&gt;

&lt;p&gt;We left on a cliff hanger. Realizing that the use of hash tables is inefficient, we hinted at the way v8 mitigates this: Hidden Classes.&lt;/p&gt;

&lt;p&gt;In part 2 of this series we learn what hidden classes are, how they work, and how the v8 JavaScript interpreter handles object storage look up efficiently.&lt;/p&gt;

&lt;p&gt;Along the way I will stop at where, I think, the best understanding of the one-liners (mentioned in part 1) can come from.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-we-begin"&gt;
  &lt;/a&gt;
  Before we begin
&lt;/h2&gt;

&lt;p&gt;Although the concepts mentioned here may not be required to get value from this post. If you are confused with the term offset, how hash tables work, or how JavaScript interpreters handle object storage lookup; I encourage you to go back and read part 1 of this series.&lt;/p&gt;

&lt;p&gt;I have always felt that in order to understand a solution you must first understand the problem the solution solves.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-rise-of-hidden-classes"&gt;
  &lt;/a&gt;
  The Rise of Hidden Classes
&lt;/h2&gt;

&lt;p&gt;Hidden Classes are based on the same principles behind the fixed offset mapping in non-dynamic languages (see part 1). The difference is that they are created at runtime, but the outcome is the same. Hidden Classes allow the v8 interpreter to optimize property access time on objects. Hidden Classes are created for each and every object in your program.&lt;/p&gt;

&lt;p&gt;We will go back to our example from part one of the series, the employee constructor function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Define a simple constructor function for an employee&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;employee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;salary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;salary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;salary&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the v8 interpreter reads this code, it first creates a pointer to a location in memory where the call signature for the &lt;code&gt;employee&lt;/code&gt; function is (this 'shell' does not include the properties as we learned in part 1). So you end up with your first hidden class (we can call this HC0):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kBD5wYVn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wunqui77w4758je07vr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kBD5wYVn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wunqui77w4758je07vr.png" alt="Hidden Class 0" width="166" height="166"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, when the interpreter reads the next line (&lt;code&gt;this.salary&lt;/code&gt;) it creates a new hidden class for &lt;code&gt;employee&lt;/code&gt; that includes the offset value for the property &lt;code&gt;this.salary&lt;/code&gt;. It then updates the pointer to now point to this new hidden class. Also, it adds a transition from the first hidden class (HC0) to the new hidden class (HC1):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4jENzAEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zsgam7rdhx35ohonlml0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4jENzAEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zsgam7rdhx35ohonlml0.png" alt="Hidden Class 1" width="166" height="166"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nest, just like previously, when the interpreter reads the next line (&lt;code&gt;this.position&lt;/code&gt;) it creates a new hidden class (and updates the pointer) for &lt;code&gt;employee&lt;/code&gt; that includes the offset value for the property &lt;code&gt;this.position&lt;/code&gt; &lt;em&gt;along with&lt;/em&gt; the already added offset value for the property &lt;code&gt;this.salary&lt;/code&gt;. It then, also just like previously, adds a new transition from (HC1) to (HC2):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VxRj2eLv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a839o7pof8c822esqldb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VxRj2eLv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a839o7pof8c822esqldb.png" alt="Hidden Class 2" width="166" height="166"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All of these together in one big happy Harry Potter family tree looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qjMnLHol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hntn48tgr6byc9lx66a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qjMnLHol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hntn48tgr6byc9lx66a.png" alt="Hidden Class All" width="736" height="366"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this image you can see the final state of the hidden classes and transitions that make up the &lt;code&gt;employee&lt;/code&gt; constructor function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-it-all-means"&gt;
  &lt;/a&gt;
  What it all means
&lt;/h2&gt;

&lt;p&gt;The transitions between the hidden classes are important. They allow for hidden classes to be shared among similar objects. What this means is that if two objects share a hidden class and you add a new property to both of them, transitions ensure that both of the objects will have the same hidden class.&lt;/p&gt;

&lt;p&gt;This is important because being able to share hidden classes between object is what removes that need to have a hash map with each instance. Instead you have one hidden class, accessed by one quick lookup, shared among all objects of the &lt;code&gt;employee&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;Now here's the catch...&lt;/p&gt;

&lt;p&gt;The order in which you add dynamic properties to an object matters. Changing this order between two similar objects creates two different hidden classes, omitting the optimization we just discussed!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-on-the-catch"&gt;
  &lt;/a&gt;
  More on the catch
&lt;/h2&gt;

&lt;p&gt;Let's look at what we just discussed in code. We will create two &lt;code&gt;employee&lt;/code&gt; objects and dynamically add some properties to both of them, but we will do it out of order:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Instantiate the two employees&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;salesEmployee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sales&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ceoEmployee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ceo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// add two new properties to salesEmployee&lt;/span&gt;
&lt;span class="nx"&gt;salesEmployee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payDay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Saturday&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;salesEmployee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phoneNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8675309&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// add the same two properties to ceoEmployee but in a different order&lt;/span&gt;
&lt;span class="nx"&gt;ceoEmployee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phoneNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9087654&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;ceoEmployee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payDay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Monday&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This looks the same, after this is ran you have two employee's with the same structure, all conforming to the &lt;code&gt;employee&lt;/code&gt; constructor function shape. Since the shape of the objects seems identical it seems logical to assume they will share the same hidden class and all the optimization that comes with it... right?&lt;/p&gt;

&lt;p&gt;Nope, as it turns out the v8 interpreter will create two separate hidden classes. One for each, as the offset for the two dynamically added properties will be different. To better explain this i'll use a food analogy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#same-same-but-different"&gt;
  &lt;/a&gt;
  Same, Same; but Different
&lt;/h2&gt;

&lt;p&gt;Imagine you are cooking a roast. There are many possible ways to cook a roast, however we will limit this discussion to just two. You might use a crock-pot and let it simmer all day pulling it out at the end to flash sear the edges. You might first sear the edges before you leave it to simmer. In both of these scenarios the ingredients are the same, however the technique is different. Both of them result in a delicious dinner, but both of them has their own distinct &lt;em&gt;recipe&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is how optimizing hidden classes works in v8. The order in which you dynamically add properties to an object matters. Either way, it is valid JavaScript just like both are valid roasts. Also just like the roasts; although the outcome is the same, the &lt;em&gt;recipe&lt;/em&gt; is different. You have to memorize the two different techniques in cooking, so too does the v8 interpreter have to store (memorize) the two different objects and the offset of their property values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;When you use TypeScript, you are required to do this. The TypeScript compiler will throw an error if you try and add a property to an object dynamically. This is one of the many reasons &lt;strong&gt;we love TypeScript&lt;/strong&gt;. You could almost say that the TL;DR for this post is "use TypeScript".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;With a better understanding of hidden classes and the catch with how you apply properties dynamically, I think this one-liner might make more sense:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;always add dynamic properties to an instantiation of a class (object) in the same order&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I had originally thought to add inline caching to this part of the series, however this post is already a long one. No worries though, we can just do a part 3! &lt;/p&gt;

&lt;p&gt;Thank you for reading and if you have any questions don't hesitate to leave a comment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further reading
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://engineering.linecorp.com/en/blog/v8-hidden-class/"&gt;Blog: Hidden Classes in v8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://richardartoul.github.io/jekyll/update/2015/04/26/hidden-classes.html"&gt;Another Blog on Hidden Classes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://v8.dev/blog"&gt;The official v8 engine blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Offset_%28computer_science%29"&gt;Wikipedia article on Offset&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>performance</category>
      <category>programming</category>
    </item>
    <item>
      <title>Building GitHub Apps with Golang</title>
      <author>Martin Heinz</author>
      <pubDate>Mon, 17 Jan 2022 19:11:57 +0000</pubDate>
      <link>https://dev.to/martinheinz/building-github-apps-with-golang-3ljo</link>
      <guid>https://dev.to/martinheinz/building-github-apps-with-golang-3ljo</guid>
      <description>&lt;p&gt;If you're using GitHub as your version control system of choice then GitHub Apps can be incredibly useful for many tasks including building CI/CD, managing repositories, querying statistical data and much more. In this article we will walk through the process of building such an app in Go including setting up the GitHub integration, authenticating with GitHub, listening to webhooks, querying GitHub API and more.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;TL;DR: All the code used in this article is available at &lt;a href="https://github.com/MartinHeinz/go-github-app"&gt;https://github.com/MartinHeinz/go-github-app&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choosing-integration-type"&gt;
  &lt;/a&gt;
  Choosing Integration Type
&lt;/h2&gt;

&lt;p&gt;Before we jump into building the app, we first need to decide which type of integration we want to use. GitHub provides 3 options - &lt;em&gt;Personal Access Tokens&lt;/em&gt;, &lt;em&gt;GitHub Apps&lt;/em&gt; and &lt;em&gt;OAuth Apps&lt;/em&gt;. Each of these 3 have their pros and cons, so here are some basic things to consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Personal Access Token&lt;/em&gt; is the simplest form of authentication and is suitable if you only need to authenticate with GitHub as &lt;em&gt;yourself&lt;/em&gt;. If you need to act on behalf of other users, then this won't be good enough&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;GitHub Apps&lt;/em&gt; are the preferred way of developing GitHub integrations. They can be installed by individual users as well as whole organizations. They can listen to events from GitHub via webhooks as well as access the API when needed. They're quite powerful, but even if you request all the permissions available, you won't be able to use them to perform all the actions that a user can.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;OAuth Apps&lt;/em&gt; use OAuth2 to authenticate with GitHub on behalf of user. This means that they can perform any action that user can. This might seem like the best option, but the permissions don't provide the same granularity as GitHub Apps, and it's also more difficult to set up because of OAuth.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're not sure what to choose, then you can also take a look at &lt;a href="https://docs.github.com/en/developers/apps/getting-started-with-apps/about-apps#determining-which-integration-to-build"&gt;diagram in docs&lt;/a&gt; which might help you decide. In this article we will use GitHub App as it's very versatile integration and best option for most use cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up"&gt;
  &lt;/a&gt;
  Setting Up
&lt;/h2&gt;

&lt;p&gt;Before we start writing any code, we need to create and configure the GitHub App integration:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;As a prerequisite, we need a tunnel which we will use to deliver GitHub webhooks from internet to our locally running application. You will need to install &lt;em&gt;localtunnel&lt;/em&gt; tool with &lt;code&gt;npm install -g localtunnel&lt;/code&gt; and start forwarding to your localhost using &lt;code&gt;lt --port 8080&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next we need to go to &lt;a href="https://github.com/settings/apps/new"&gt;https://github.com/settings/apps/new&lt;/a&gt; to configure the integration. Fill the fields as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Homepage URL&lt;/em&gt;: Your &lt;em&gt;localtunnel&lt;/em&gt; URL&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Webhook URL&lt;/em&gt;: &lt;code&gt;https://&amp;lt;LOCALTUNNEL_URL&amp;gt;/api/v1/github/payload&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Webhook secret&lt;/em&gt;: any secret you want (and save it)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Repository Permissions&lt;/em&gt;: Contents, Metadata (Read-only)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Subscribe to events&lt;/em&gt;: Push, Release&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After creating the app, you will be presented with the settings page of the integration. Take note of &lt;em&gt;App ID&lt;/em&gt;, generate a private key and download it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next you will also need to install the app to use it with your GitHub account. Go to &lt;em&gt;Install App&lt;/em&gt; tab and install it into your account.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We also need &lt;em&gt;installation ID&lt;/em&gt;, which we can find by going to &lt;em&gt;Advanced&lt;/em&gt; tab and clicking on latest delivery in the list, take a note of installation ID from request payload, it should be located in &lt;code&gt;{ "installation": { "id": &amp;lt;...&amp;gt;} }&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you've got lost somewhere along the way, refer to the guide &lt;a href="https://docs.github.com/en/developers/apps/getting-started-with-apps/setting-up-your-development-environment-to-create-a-github-app"&gt;GitHub docs&lt;/a&gt; which shows where you can find each of the values.&lt;/p&gt;

&lt;p&gt;With that done, we have the integration configured and all the important values saved. Before we start receiving events and making API requests we need to get the Go server up and running, so let's start coding!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-app"&gt;
  &lt;/a&gt;
  Building the App
&lt;/h2&gt;

&lt;p&gt;To build the Go application, we will use the template I prepared in &lt;a href="https://github.com/MartinHeinz/go-github-app"&gt;https://github.com/MartinHeinz/go-github-app&lt;/a&gt;. This application is ready to be used as GitHub app and all that's missing in it, are a couple of variables which we saved during setup in previous section. The repository contains convenience script which you can use to populate all the values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone git@github.com:MartinHeinz/go-github-app.git &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;go-github-app
./configure_project.sh &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;APP_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"54321"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;INSTALLATION_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"987654321"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;WEBHOOK_SECRET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"verysecret"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;KEY_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"./github_key.pem"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;REGISTRY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ghcr.io/&amp;lt;GITHUB_USERNAME&amp;gt;/go-github-app"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following sections will walk you through the code but if you're inpatient, then the app is good to go. You can use &lt;code&gt;make build&lt;/code&gt; to build a binary of the application or &lt;code&gt;make container&lt;/code&gt; to create a containerized version of it.&lt;/p&gt;

&lt;p&gt;First part of the code we need to tackle is authentication. It's done using &lt;code&gt;ghinstallation&lt;/code&gt; package as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;InitGitHubClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;tr&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultTransport&lt;/span&gt;
    &lt;span class="n"&gt;itr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ghinstallation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewKeyFromFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;12345&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;123456789&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"/config/github-app.pem"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GitHubClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Transport&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itr&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function, which is invoked from &lt;code&gt;main.go&lt;/code&gt; during &lt;em&gt;Gin&lt;/em&gt; server start-up, takes App ID, Installation ID and private key to create a GitHub client which is then stored in global config in &lt;code&gt;config.Config.GitHubClient&lt;/code&gt;. We will use this client to talk to the GitHub API later.&lt;/p&gt;

&lt;p&gt;Along with the GitHub client, we also need to set up server routes so that we can receive payloads:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// ...&lt;/span&gt;
    &lt;span class="n"&gt;v1&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/api/v1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/github/payload"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;webhooks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConsumeEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/github/pullrequests/:owner/:repo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;apis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetPullRequests&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/github/pullrequests/:owner/:repo/:page"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;apis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetPullRequestsPaginated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InitGitHubClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":%v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServerPort&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First of these is the payload path at &lt;code&gt;http://.../api/v1/github/payload&lt;/code&gt; which we used during GitHub integration setup. This path is associated with &lt;code&gt;webhooks.ConsumeEvent&lt;/code&gt; function which will receive all the events from GitHub.&lt;/p&gt;

&lt;p&gt;For security reasons, the first thing the &lt;code&gt;webhooks.ConsumeEvent&lt;/code&gt; function does is verify request signature to make sure that GitHub is really the service that generated the event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;VerifySignature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;hmac&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sha256&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GitHubWebhookSecret&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="n"&gt;computedSignature&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"sha256="&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;hex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EncodeToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"computed signature: %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;computedSignature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;computedSignature&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;ConsumeEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;VerifySignature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"X-Hub-Signature-256"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbortWithStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusUnauthorized&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"signatures don't match"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It performs the verification by computing a HMAC digest of payload using webhook secret as a key, which is then compared with the value in &lt;code&gt;X-Hub-Signature-256&lt;/code&gt; header of a request. If the signatures match then we can proceed to consuming the individual events:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;ConsumeEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// ...&lt;/span&gt;
    &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"X-GitHub-Event"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;Events&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"consuming event: %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;EventPayload&lt;/span&gt;
            &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Consumers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)](&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"couldn't consume event %s, error: %+v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="c"&gt;// We're responding to GitHub API, we really just want to say "OK" or "not OK"&lt;/span&gt;
                &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbortWithStatusJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"reason"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"consumed event: %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbortWithStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusNoContent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unsupported event: %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbortWithStatusJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusNotImplemented&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"reason"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Unsupported event: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet we extract the event type from &lt;code&gt;X-GitHub-Event&lt;/code&gt; header and iterate through a list of events that our app supports. In this case those are:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;Install&lt;/span&gt;     &lt;span class="n"&gt;Event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"installation"&lt;/span&gt;
    &lt;span class="n"&gt;Ping&lt;/span&gt;        &lt;span class="n"&gt;Event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"ping"&lt;/span&gt;
    &lt;span class="n"&gt;Push&lt;/span&gt;        &lt;span class="n"&gt;Event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"push"&lt;/span&gt;
    &lt;span class="n"&gt;PullRequest&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"pull_request"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;Events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Ping&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Push&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;PullRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the event name matches one of the options we proceed with loading the JSON payload into a &lt;code&gt;EventPayload&lt;/code&gt; struct, which is defined in &lt;a href="https://github.com/MartinHeinz/go-github-app/blob/master/cmd/app/webhooks/models.go"&gt;&lt;code&gt;cmd/app/webhook/models.go&lt;/code&gt;&lt;/a&gt;. It's just a struct generated using &lt;a href="https://mholt.github.io/json-to-go/"&gt;https://mholt.github.io/json-to-go/&lt;/a&gt; with unnecessary fields stripped.&lt;/p&gt;

&lt;p&gt;That payload is then sent to function that handles the respective event type, which is one of the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;Consumers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EventPayload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;consumeInstallEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ping&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;consumePingEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Push&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;consumePushEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PullRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;consumePullRequestEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example for &lt;em&gt;push&lt;/em&gt; event one can do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;consumePushEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="n"&gt;EventPayload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Process event ...&lt;/span&gt;
    &lt;span class="c"&gt;// Insert data into database ...&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Received push from %s, by user %s, on branch %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Repository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pusher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ref&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Enumerating commits&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;commits&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Commits&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;commits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Pushed commits: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;commits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That being in this case - checking the receiving repository and branch and enumerating the commits contained in this single push. This is the place where you could for example insert the data into database or send some notification regarding the event. &lt;/p&gt;

&lt;p&gt;Now we have the code ready, but how do we test it? To do so, we will use the tunnel which you already should have running, assuming you followed the steps in previous sections.&lt;/p&gt;

&lt;p&gt;Additionally, we also need to spin up the server, you can do that by running &lt;code&gt;make container&lt;/code&gt; to build the containerized application, followed by &lt;code&gt;make run&lt;/code&gt; which will start the container that listens on port &lt;code&gt;8080&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you can simply push to one of your repositories and you should see a similar output in the server logs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;GIN] 2022/01/02 - 14:44:10 | 204 |     696.813¬µs |   123.82.234.90 | POST     &lt;span class="s2"&gt;"/api/v1/github/payload"&lt;/span&gt;
2022/01/02 14:44:10 Received push from MartinHeinz/some-repo, by user MartinHeinz, on branch refs/heads/master
2022/01/02 14:44:10 Pushed commits: &lt;span class="o"&gt;[&lt;/span&gt;9024da76ec611e60a8dc833eaa6bca7b005bb029]
2022/01/02 14:44:10 consumed event: push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To avoid having to push dummy changes to repositories all the time, you can redeliver payloads from &lt;em&gt;Advanced&lt;/em&gt; tab in your GitHub App configuration. On this tab you will find a list of previous requests, just choose one and hit the &lt;em&gt;Redeliver&lt;/em&gt; button.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-api-calls"&gt;
  &lt;/a&gt;
  Making API Calls
&lt;/h2&gt;

&lt;p&gt;GitHub apps are centered around webhooks to which you can subscribe and listen to, but you can also use any of the GitHub REST/GraphQL API endpoints assuming you requested the necessary permissions. Using API rather than push events is useful - for example - when creating files, analyzing bulk data or querying data which cannot be received from webhooks.&lt;/p&gt;

&lt;p&gt;For demonstration of how to do so, we will retrieve pull requests of specified repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;GetPullRequests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"owner"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"repo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pullRequests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GitHubClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PullRequests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PullRequestListOptions&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"open"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbortWithStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;pullRequestTitles&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pr&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;pullRequests&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;pullRequestTitles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pullRequestTitles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"pull_requests"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pullRequestTitles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function takes 2 arguments - &lt;code&gt;owner&lt;/code&gt; and &lt;code&gt;repo&lt;/code&gt; - which get passed to &lt;code&gt;PullRequests.List(...)&lt;/code&gt; function of GitHub client instance. Along with that, we also provide &lt;code&gt;PullRequestListOptions&lt;/code&gt; struct to specify that we're only interested in pull requests with state set to &lt;code&gt;open&lt;/code&gt;. We then iterate over returned PRs and accumulate all their titles which we return in response.&lt;/p&gt;

&lt;p&gt;The above function resides on &lt;code&gt;.../api/v1/github/pullrequests/:owner/:repo&lt;/code&gt; path as specified in &lt;code&gt;main.go&lt;/code&gt; so we can query it like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl http://localhost:8080/api/v1/github/pullrequests/octocat/hello-world | jq &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It might not be ideal to query API as shown above in situations where we expect a lot of data to be returned. In those cases we can utilize &lt;em&gt;paging&lt;/em&gt; to avoid hitting rate limits. A function called &lt;code&gt;GetPullRequestsPaginated&lt;/code&gt; that performs the same task as &lt;code&gt;GetPullRequests&lt;/code&gt; with addition of &lt;code&gt;page&lt;/code&gt; argument for specifying page size can be found in &lt;a href="https://github.com/MartinHeinz/go-github-app/blob/master/cmd/app/apis/github.go"&gt;&lt;code&gt;cmd/app/apis/github.go&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-tests"&gt;
  &lt;/a&gt;
  Writing Tests
&lt;/h2&gt;

&lt;p&gt;So far we've been testing the app with &lt;em&gt;localtunnel&lt;/em&gt;, which is nice for quick ad-hoc tests against live API, but it doesn't replace proper unit tests. To write unit tests for this app, we need to mock-out the API to avoid being dependent on the external service. To do so, we can use &lt;a href="https://github.com/migueleliasweb/go-github-mock"&gt;&lt;code&gt;go-github-mock&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestGithubGetPullRequests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;expectedTitles&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"PR number one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"PR number three"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;closedPullRequestTitle&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"PR number two"&lt;/span&gt;
    &lt;span class="n"&gt;mockedHTTPClient&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewMockedHTTPClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithRequestMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetReposPullsByOwnerByRepo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PullRequest&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"open"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;expectedTitles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"closed"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;closedPullRequestTitle&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"open"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;expectedTitles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mockedHTTPClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GitHubClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;

    &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestMode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;httptest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewRecorder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateTestContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"owner"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"octocat"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"repo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"hello-world"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;GetPullRequests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;expectedTitles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NotContains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;closedPullRequestTitle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;expectedTitles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This test starts by defining mock client which will be used in place of normal GitHub client. We give it list of pull request which will be returned when &lt;code&gt;PullRequests.List&lt;/code&gt; is called. We then create test context with arguments that we want to pass to the function under test, and we invoke the function. Finally, we read the response body and assert that only PRs with &lt;code&gt;open&lt;/code&gt; state were returned. &lt;/p&gt;

&lt;p&gt;For more tests, see the full &lt;a href="https://github.com/MartinHeinz/go-github-app/blob/master/cmd/app/apis/github_test.go"&gt;source code&lt;/a&gt; which includes examples of tests for pagination as well as handling of errors coming from GitHub API.&lt;/p&gt;

&lt;p&gt;When it comes to testing our webhook methods, we don't need to use a mock client, because we're dealing with basic API requests. Example of such tests including generic API testing setup can be found in &lt;a href="https://github.com/MartinHeinz/go-github-app/blob/master/cmd/app/webhooks/webhook_test.go"&gt;&lt;code&gt;cmd/app/webhooks/github_test.go&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article I tried to give you a quick tour of both GitHub apps, as well as the &lt;a href="https://github.com/MartinHeinz/go-github-app/"&gt;GitHub repository&lt;/a&gt; containing the sample Go GitHub project. In both cases, I didn't cover everything, the Go client package has much more to offer and to see all the actions you can perform with it, I recommend skimming through the &lt;a href="https://pkg.go.dev/github.com/google/go-github/v41/github#pkg-index"&gt;docs index&lt;/a&gt; as well as looking at the source code itself where GitHub API links are listed along each function. For example, like the earlier shown &lt;code&gt;PullRequests.List&lt;/code&gt; &lt;a href="https://github.com/google/go-github/blob/master/github/pulls.go#L147"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As for the repository, there are couple more things you might want to take a look at, including Makefile targets, &lt;a href="https://github.com/MartinHeinz/go-github-app/tree/master/.github/workflows"&gt;CI/CD&lt;/a&gt; or additional tests. If you have any feedback or suggestions, feel free to create an issue or just star it if it was helpful to you. üôÇ&lt;/p&gt;

</description>
      <category>go</category>
      <category>github</category>
      <category>api</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How coding is like crocheting</title>
      <author>La Rainne Pasion</author>
      <pubDate>Mon, 17 Jan 2022 19:07:22 +0000</pubDate>
      <link>https://dev.to/larainnepasion/how-crocheting-is-like-coding-1mkn</link>
      <guid>https://dev.to/larainnepasion/how-crocheting-is-like-coding-1mkn</guid>
      <description>&lt;p&gt;At first glance, coding and crocheting appear to have little in common outside of both being words that start with the letter ‚ÄúC.‚Äù One is a process that allows us to build cutting-edge computer software, websites, games, and apps. The other is an allegedly old-fashioned craft, more often associated with grandmas in rocking chairs than anything high-tech.&lt;/p&gt;

&lt;p&gt;But what if I told you that the two are more similar than you might think? Barbara Oakley, in her famed &lt;a href="https://www.coursera.org/learn/learning-how-to-learn"&gt;Learning How to Learn Coursera program&lt;/a&gt;, teaches us that the ‚Äúchunks‚Äù of information we know from one concept can sometimes have surprising links to another idea we‚Äôre learning. In my case, I realized after finishing the first week of a  &lt;a href="https://leonnoel.com/100devs/"&gt;software engineering course&lt;/a&gt;  that crocheting and coding aren‚Äôt all that different when it comes to things like the language, the community, and the journey to a finished product.&lt;/p&gt;

&lt;p&gt;Don‚Äôt believe me? Read on to see what I mean.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coding-and-crocheting-have-mystifying-lingo"&gt;
  &lt;/a&gt;
  Coding and crocheting have mystifying lingo
&lt;/h3&gt;

&lt;p&gt;When you look at code in a language you‚Äôre unfamiliar with, a lot of it seems like gibberish. You may not know right away what &lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt; or &lt;code&gt;rgb()&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt; means, but once you become more acquainted with the syntax and terminology, the letters and symbols laid out in front of you start to make sense. With some study and practice, you can recognize which part of the document results in what output on a page.&lt;/p&gt;

&lt;p&gt;Crocheting, like coding, has  &lt;a href="https://www.craftyarncouncil.com/standards/crochet-abbreviations"&gt;its own lexicon&lt;/a&gt;  as well. Read any pattern on how to make a hat and you‚Äôll see it‚Äôll go something like ‚ÄúCh 87. Ss in 1st ch to join. Ch 2. *[FPdc in next st, dc in next 2 sts]‚Äù ‚Äì not so easy to decipher when you don‚Äôt know crochet lingo, but the function of each term becomes much clearer after learning some of the language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#their-communities-are-generous-and-supportive"&gt;
  &lt;/a&gt;
  Their communities are generous and supportive
&lt;/h3&gt;

&lt;p&gt;Spend a bit of time on (the good side of)  &lt;a href="https://twitter.com/search?q=%23techtwitter&amp;amp;src=typed_query"&gt;#techtwitter&lt;/a&gt;  and you‚Äôll see that there are tons of people in tech offering support to those who are new to coding or are trying to break into the field as engineers and developers. Many of these seasoned professionals volunteer their precious time to troubleshoot code,  &lt;a href="https://twitter.com/i/lists/1459161119520612355"&gt;mentor juniors&lt;/a&gt;, and review portfolios. There are also endless free resources online for learning programming languages or building projects, shared openly by enthusiasts entirely out of generosity. I myself have enrolled in a  &lt;a href="https://leonnoel.com/100devs/"&gt;full-stack web development training program&lt;/a&gt;  for a total of $0.00 thanks to one very altruistic instructor,  &lt;a href="https://twitter.com/leonnoel"&gt;Leon Noel&lt;/a&gt;. This is all to say that plenty of folks who have a passion for coding also have a passion for giving, and often all they ask for in return is for you to pay it forward.&lt;/p&gt;

&lt;p&gt;The same generosity can be seen in crocheting circles and the abundance of knowledge that crafters make available for anyone to access. Google ‚Äúcrochet basics‚Äù and you‚Äôll find thousands of tutorials from experienced crocheters explaining everything there is to know about the art. There are also crafters who spend hours upon hours building, testing, and writing patterns that they then  &lt;a href="https://www.allfreecrochet.com/"&gt;release for free&lt;/a&gt;, much like developers do with some of their code. In a way, crocheters have their own open-source databases of projects that they can enhance and customize to their needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-use-similar-methods-for-fixing-mistakes"&gt;
  &lt;/a&gt;
  You use similar methods for fixing mistakes
&lt;/h3&gt;

&lt;p&gt;One of a crocheter‚Äôs worst nightmares is pausing to look at your work in progress only to realize that it‚Äôs a little wonky. Fixing a project that‚Äôs gone awry involves closely examining your stitches and pinpointing the row(s) in which you may have skipped a stitch, forgotten to change colors, or used the incorrect number of turning chains. Once you figure out where things went wrong, then you can get back on track to finishing your scarf, sweater, or what have you.&lt;/p&gt;

&lt;p&gt;You don‚Äôt always get it right the first time when coding, either (in fact, I‚Äôd be really impressed ‚Äì maybe even slightly suspicious ‚Äì if you did). Just like with crochet, debugging your code calls for carefully inspecting what you‚Äôve worked on and repairing existing errors. Gradually, you learn how to become patient and attentive to detail whether you‚Äôre working in VS Code or wielding a crochet hook.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-can-create-beautiful-and-functional-things-with-just-your-hands-and-minimal-tools"&gt;
  &lt;/a&gt;
  You can create beautiful and functional things with just your hands and minimal tools
&lt;/h3&gt;

&lt;p&gt;Give a crafter some yarn, a crochet hook, and time, and you‚Äôll be amazed at what they can make: blankets,  &lt;a href="https://www.twoofwands.com/blog/french-market-bag"&gt;reusable market bags&lt;/a&gt;,  &lt;a href="https://www.repeatcrafterme.com/2020/06/crochet-granny-stripe-shorts-for-men.html"&gt;board shorts&lt;/a&gt;, and even  &lt;a href="https://www.lovecrafts.com/en-us/c/article/a-guide-to-amigurumi"&gt;amigurumi&lt;/a&gt;. In the same vein, programmers can build a limitless array of products with only a computer, a text editor, and probably (highly likely) some caffeine. These two disciplines use minimal tools to construct something beautiful, useful, or often both. At the end of the day, coding and crocheting are different but analogous ways to be creative using your hands‚Äìjust remember to be careful, because you can get  &lt;a href="https://www.youtube.com/watch?v=DaI30kjVTlI&amp;amp;ab_channel=HealthySoftwareDeveloper"&gt;carpal tunnel syndrome&lt;/a&gt;  doing either activity!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-learn-something-new-every-day"&gt;
  &lt;/a&gt;
  You learn something new every day
&lt;/h3&gt;

&lt;p&gt;Whether you‚Äôre a beginner at crochet or a crafter with 10 years of fiber art under your belt, there‚Äôs always a new technique to practice or a fresh project to undertake. Being a good crafter means you never stop working to improve your skill or expand your knowledge. The same can be said for coding: to become a great coder is to sign up to be a lifelong student. Engineers, developers, and programmers are constantly picking up new languages, frameworks, and technologies to keep themselves current in their fields. While this may seem daunting, it's a big part of what keeps the work unique and exciting.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Have I convinced you that code and crochet are not as different as you may have thought? Did this make you think about unexpected links between your interests? I'd love to hear them!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>culture</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Learn TailwindCSS: Make A Profile Card</title>
      <author>Shreya Purohit</author>
      <pubDate>Mon, 17 Jan 2022 18:46:03 +0000</pubDate>
      <link>https://dev.to/shreya/learn-tailwindcss-make-a-profile-card-597d</link>
      <guid>https://dev.to/shreya/learn-tailwindcss-make-a-profile-card-597d</guid>
      <description>&lt;p&gt;Tailwind is a CSS framework that lets you build amazing responsive UI with less effort. &lt;br&gt;
If you're learning TailwindCSS, this blog can help you to build concepts stronger by creating a mini profile card with a button in less than 5 minutes. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Is1BG4-B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jir3csift2d3h44mginl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Is1BG4-B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jir3csift2d3h44mginl.jpg" alt="profile" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First you need to install Tailwind in your project. Now there are 3 ways as given below. Visit the one you prefer. As this is a simple card, I'll just use CDN:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Through CLI (fastest): &lt;a href="https://tailwindcss.com/docs/installation"&gt;read here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Through CDN: &lt;a href="https://tailwindcss.com/docs/installation/play-cdn"&gt;read here&lt;/a&gt; - &lt;code&gt;we will use this&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;As a PostCSS plugin: &lt;a href="https://tailwindcss.com/docs/installation/using-postcss"&gt;read here&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We're using CDN for this project. So add this &lt;code&gt;link&lt;/code&gt; inside the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt; &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;If you're using React, I have a step-by-step blog on it already. &lt;br&gt;
&lt;em&gt;Read it here&lt;/em&gt;: &lt;a href="https://dev.to/shreya/how-to-setup-tailwind-in-your-project-3075"&gt;How to setup TailwindCSS in your React App&lt;/a&gt;&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;Now we're ready to use Tailwind. Let's start by defining the basic structure first:

&lt;ul&gt;
&lt;li&gt;To use the image used in this project, copy &lt;a href="https://www.disneyplusinformer.com/wp-content/uploads/2021/09/The-Simpsons-Profile-Icons-8.png"&gt;this link&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;   &lt;span class="c"&gt;&amp;lt;!-- main - parent div --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!--card--&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="c"&gt;&amp;lt;!--profile-image--&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"image"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"profile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="c"&gt;&amp;lt;!--name--&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Simp&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="c"&gt;&amp;lt;!--username--&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;@simpyy&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="c"&gt;&amp;lt;!--work--&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"work"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Front-end developer üßë‚Äçüíª&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="c"&gt;&amp;lt;!-- follow button --&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Follow&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what you see right now. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dxdTjDZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xvzz63b400sq4rgz9msy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dxdTjDZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xvzz63b400sq4rgz9msy.png" alt="first" width="539" height="151"&gt;&lt;/a&gt;&lt;br&gt;
Pretty boring right?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Let's make it interesting by adding classes that Tailwind provides us:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;We'll start from top to bottom to avoid confusions. But first I'll pick up the div having a class &lt;code&gt;"card"&lt;/code&gt;:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#card-section"&gt;
  &lt;/a&gt;
  &lt;strong&gt;CARD SECTION&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card bg-white flex flex-col items-center justify-center p-4 shadow-lg rounded-2xl w-64"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;bg-white&lt;/code&gt;: sets the white background to the &lt;code&gt;div&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;flex items-center justify-center&lt;/code&gt;: works just as we centre a div using CSS flexbox model. 

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;flex:&lt;/code&gt; sets display to flex&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;items-center:&lt;/code&gt; &lt;code&gt;align-items: center;&lt;/code&gt; in CSS&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;justify-center:&lt;/code&gt; &lt;code&gt;justify-content: center;&lt;/code&gt; in CSS&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;p-4:&lt;/code&gt; sets a padding of 1rem

&lt;ul&gt;
&lt;li&gt;check all possible values &lt;a href="https://tailwindcss.com/docs/padding"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;shadow-lg:&lt;/code&gt; sets shadow to the div

&lt;ul&gt;
&lt;li&gt;possible values: &lt;code&gt;sm | md | lg | xl | 2xl | inner&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7xl6u2CN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guoxqtwh0xueoryt7hnh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7xl6u2CN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guoxqtwh0xueoryt7hnh.png" alt="maindiv" width="605" height="160"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;rounded-2xl:&lt;/code&gt; sets border radius to the element

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;md | lg | full | xl | 2xl&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;w-64:&lt;/code&gt; We want our card to be of a fixed width so setting it accordingly.&lt;/li&gt;
&lt;li&gt;Experiment with &lt;code&gt;w-{number}&lt;/code&gt; and &lt;a href="https://tailwindcss.com/docs/width#fixed-widths"&gt;explore more&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Tp6ypdP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kldobfbers1eefbg1ttm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Tp6ypdP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kldobfbers1eefbg1ttm.png" alt="card-div" width="880" height="438"&gt;&lt;/a&gt;&lt;br&gt;
Our card has started getting shape, so let's center it and start designing! &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#parent-topmost-div"&gt;
  &lt;/a&gt;
  &lt;strong&gt;PARENT (TOPMOST) DIV&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;To center the &lt;code&gt;card&lt;/code&gt; div, I'd take the parent div &lt;code&gt;main&lt;/code&gt; and set CSS grid to it:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- parent div --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"main bg-yellow-400 grid place-items-center h-screen"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;bg-yellow-400:&lt;/code&gt; set the yellow background color. 

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;bg&lt;/code&gt;: background&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;yellow&lt;/code&gt;: color | try more colors available &lt;a href="https://tailwindcss.com/docs/customizing-colors#default-color-palette"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;400&lt;/code&gt;: shades | ranges from 50-900&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;grid h-screen place-items-center:&lt;/code&gt; To centre the card div

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;grid:&lt;/code&gt; sets display to grid&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;place-items-center&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;works like &lt;code&gt;place-items: center;&lt;/code&gt; in css&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;h-screen:&lt;/code&gt; sets full viewport height (full width as screen)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l63oSQPx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqlr1yezlh8gsb59k4dg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l63oSQPx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqlr1yezlh8gsb59k4dg.png" alt="bg" width="791" height="354"&gt;&lt;/a&gt;&lt;br&gt;
Now the card looks much better and visible. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#profile-picture-div"&gt;
  &lt;/a&gt;
  &lt;strong&gt;PROFILE PICTURE DIV&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"profile mx-auto rounded-full py-2 w-16 "&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/simp.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"profile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;To use the image used in this project, copy &lt;a href="https://www.disneyplusinformer.com/wp-content/uploads/2021/09/The-Simpsons-Profile-Icons-8.png"&gt;this link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mx-auto:&lt;/code&gt; sets equal margins to both (left and right) sides, so centres the image&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rounded-full:&lt;/code&gt; gives the circular shape 

&lt;ul&gt;
&lt;li&gt;works just like &lt;code&gt;border-radius: 50%&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;py-2:&lt;/code&gt; sets &lt;code&gt;padding-top&lt;/code&gt; and &lt;code&gt;padding-bottom&lt;/code&gt; values to 0.5rem both&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;w-16:&lt;/code&gt; sets image width

&lt;ul&gt;
&lt;li&gt;sizes the image according to the card (experiment with the values)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T07-iZJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rl62pz7ibprams0h2wr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T07-iZJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rl62pz7ibprams0h2wr.png" alt="img" width="642" height="283"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#name-div"&gt;
  &lt;/a&gt;
  &lt;strong&gt;NAME DIV&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"name text-gray-800 text-2xl font-medium mt-4 "&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Simp&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;text-gray-800:&lt;/code&gt; sets the &lt;code&gt;font-color&lt;/code&gt; property to greyish black&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;text-2xl:&lt;/code&gt; increases the font size

&lt;ul&gt;
&lt;li&gt;possible values: &lt;code&gt;sm | base | lg | xl | 2xl ...&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;font-medium:&lt;/code&gt; sets the &lt;code&gt;font-weight&lt;/code&gt; property

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;light | normal | medium | semibold | bold&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mt-4:&lt;/code&gt; sets &lt;code&gt;margin-top&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#username-div"&gt;
  &lt;/a&gt;
  &lt;strong&gt;USERNAME DIV&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"username text-gray-500"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;@simpyy&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;text-gray-500:&lt;/code&gt; sets the font color to light gray.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#work-div"&gt;
  &lt;/a&gt;
  &lt;strong&gt;WORK DIV&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"work text-gray-700 mt-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Front-end developer üßë‚Äçüíª&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;text-gray-700:&lt;/code&gt; changes the font color to gray.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mt-4:&lt;/code&gt; sets &lt;code&gt;margin-top&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e5bepuyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15mgokbbxs4lztt4rhin.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e5bepuyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15mgokbbxs4lztt4rhin.png" alt="fonts" width="823" height="298"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now almost everything is done. Let's do the final work of designing the &lt;em&gt;Follow Button&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#follow-button"&gt;
  &lt;/a&gt;
  &lt;strong&gt;FOLLOW BUTTON&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"w-full mt-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-blue-500 py-2 px-4 hover:bg-blue-600 text-white w-full font-semibold rounded-lg shadow-lg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Follow
    &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;div&lt;/em&gt;:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;w-full&lt;/code&gt; sets the full width (according to the parent div) so covers the card properly.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mt-8:&lt;/code&gt; sets &lt;code&gt;margin-top&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;button&lt;/em&gt;:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;bg-blue-500:&lt;/code&gt; sets the blue color

&lt;ul&gt;
&lt;li&gt;explore all the possible colors &lt;a href="https://tailwindcss.com/docs/customizing-colors"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;py-2&lt;/code&gt; and &lt;code&gt;px-4&lt;/code&gt;: sets &lt;code&gt;padding-bottom&lt;/code&gt; and &lt;code&gt;padding-top&lt;/code&gt;, respectively&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;text-white:&lt;/code&gt; sets the &lt;code&gt;font-color&lt;/code&gt; to white&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;hover:bg-blue-600&lt;/code&gt;: sets the CSS hover properties, in this case we've simply increased the shade from &lt;code&gt;500 to 600&lt;/code&gt; to give it a realistic look.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--svRgDDEX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dps19n5nsdjtcags3mb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--svRgDDEX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dps19n5nsdjtcags3mb.gif" alt="btn" width="880" height="411"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Congratulations! üéâ Your follow card is completed now.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My motive for this post was to make you understand how to add Tailwind classes to a project. I hope I was able to complete this job.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;




&lt;p&gt;I share content related to web development and technical writing on &lt;a href="https://twitter.com/eyeshreya"&gt;Twitter&lt;/a&gt; daily. &lt;/p&gt;

&lt;p&gt;Would love to connect!&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>css</category>
      <category>frontend</category>
    </item>
  </channel>
</rss>
