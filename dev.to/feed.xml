<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Deploy to Azure Kubernetes (AKS) from Azure DevOps with Azure Pipelines</title>
      <author>Davide 'CoderDave' Benvegn√π</author>
      <pubDate>Mon, 02 Aug 2021 01:24:32 +0000</pubDate>
      <link>https://dev.to/n3wt0n/deploy-to-azure-kubernetes-aks-from-azure-devops-with-azure-pipelines-37b2</link>
      <guid>https://dev.to/n3wt0n/deploy-to-azure-kubernetes-aks-from-azure-devops-with-azure-pipelines-37b2</guid>
      <description>&lt;p&gt;Do you want to &lt;strong&gt;Deploy to Azure Kubernetes (AKS) from Azure DevOps&lt;/strong&gt;, but you don;t know where to start? This is for you! &lt;/p&gt;

&lt;p&gt;In this live streaming, part of the "&lt;em&gt;Build Live with Me&lt;/em&gt;" series, I'm going to deploy an application to Azure Kubernetes Service (AKS) via Azure DevOps using Azure Pipelines from scratch, live!&lt;/p&gt;

&lt;p&gt;You will learn how to set up the &lt;strong&gt;integration with AKS&lt;/strong&gt;, and how to &lt;strong&gt;deploy everything&lt;/strong&gt; to Kubernetes in Microsoft Azure using Azure Pipelines.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4Oa5HneTuKs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/4Oa5HneTuKs"&gt;Link to the video: https://youtu.be/4Oa5HneTuKs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See you there!&lt;/p&gt;

&lt;p&gt;TIME FOR THE LIVE:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tuesday, August 3rd, 9.30 pm HKT&lt;/li&gt;
&lt;li&gt;Tuesday, August 3rd, 7.00 pm IST&lt;/li&gt;
&lt;li&gt;Tuesday, August 3rd, 1.30 pm UTC&lt;/li&gt;
&lt;li&gt;Tuesday, August 3rd, 9.30 am ET&lt;/li&gt;
&lt;li&gt;Tuesday, August 3rd, 6.30 am PT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; üöÄ for more content:&lt;/p&gt;

&lt;p&gt;üìΩ &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
‚òï &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
üíñ &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
üåê &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
üëï &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
üë¶üèª &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
üê±‚Äçüíª &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
üë≤üèª &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
üë¥üèª &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
üîâ &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>azure</category>
      <category>azuredevops</category>
      <category>aks</category>
      <category>kubernetes</category>
    </item>
    <item>
      <title>An Example of a Closure in JavaScript</title>
      <author>Nevin Katz</author>
      <pubDate>Mon, 02 Aug 2021 00:51:07 +0000</pubDate>
      <link>https://dev.to/nevkatz/an-example-of-a-closure-in-javascript-36ak</link>
      <guid>https://dev.to/nevkatz/an-example-of-a-closure-in-javascript-36ak</guid>
      <description>&lt;p&gt;Hi everyone, &lt;/p&gt;

&lt;p&gt;The concept of the closure is one of the tougher concepts for me when I first started learning JavaScript in depth. If you are new to the concept, a closure is essentially a function bundled together with its surrounding state, which typically includes variables that the closure needs. A closure is typically a function within a larger function, which serves as a "bubble." All the variables within this larger function bubble are only accessible by methods in the closure.&lt;/p&gt;

&lt;p&gt;The JavaScript engine is smart enough to realize that the variables are needed, so the engine's garbage collector does not obliterate them.&lt;/p&gt;

&lt;p&gt;Below is a quick example of a closure with four methods: &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;increment&lt;/code&gt;, and &lt;code&gt;reset&lt;/code&gt;. They all act on a variable called &lt;code&gt;count&lt;/code&gt;, which sits within the immediately invoked function expression (IIFE) holding the closure.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/nevkatz/nm631eq5//embedded/html,js,result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the &lt;code&gt;get&lt;/code&gt; method will simply get the &lt;code&gt;count&lt;/code&gt; value.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the &lt;code&gt;set&lt;/code&gt; method sets the &lt;code&gt;count&lt;/code&gt; value to any value we want.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the &lt;code&gt;increment&lt;/code&gt; method will increment the existing value by the amount passed in as a parameter. If no value is passed in, it increments the value by 1.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the &lt;code&gt;reset&lt;/code&gt; method resets the value to zero.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These methods are the only way the user can access the &lt;code&gt;count&lt;/code&gt; value. In this way, the use of a closure causes the &lt;code&gt;count&lt;/code&gt; value to act in a similar way to that of a private variable in a Java object; it cannot be accessed outside the object, so methods are required to retrieve its value or update it.&lt;/p&gt;

&lt;p&gt;In the demo, you will see that an &lt;code&gt;init&lt;/code&gt; method grabs some references to the HTML elements we print to and then calls all the methods. Take a look at how they are called and see if you can understand what causes these particular values to be printed out.&lt;/p&gt;

&lt;p&gt;I hope this quick post gives you a solid idea of what closures are about. Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Everything you need to know to configure neovim using lua</title>
      <author>Heiker</author>
      <pubDate>Mon, 02 Aug 2021 00:28:53 +0000</pubDate>
      <link>https://dev.to/vonheikemen/everything-you-need-to-know-to-configure-neovim-using-lua-3h58</link>
      <guid>https://dev.to/vonheikemen/everything-you-need-to-know-to-configure-neovim-using-lua-3h58</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Pueden leer la versi√≥n en espa√±ol &lt;a href="https://dev.to/vonheikemen/todo-lo-que-necesitan-saber-para-configurar-neovim-usando-lua-2fon"&gt;aqu√≠&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After a long time in development neovim 0.5 was finally released as a stable version. Among the new exciting features we have better lua support and the promise of a stable api to create our configuration using this language. So today I'm going to share with you everything I learnt while I was migrating my own configuration from vimscript to lua.&lt;/p&gt;

&lt;p&gt;I'm going to talk about the things we can do with lua and its interaction with vimscript. I will be showing a lot of examples but I will not tell you what options you should set with what value. Also, this won't be a tutorial on "how to turn neovim into an IDE", I'll avoid anything that is language specific. What I want to do is teach you enough about lua and the neovim api so you can migrate your own configuration.&lt;/p&gt;

&lt;p&gt;I will assume your operating system is linux (or something close to it) and that your configuration is located at &lt;code&gt;~/.config/nvim/init.vim&lt;/code&gt;. Everything that I will show should work on every system in which neovim can be installed, just keep in mind that the path to the &lt;code&gt;init.vim&lt;/code&gt; file might be different in your case.&lt;/p&gt;

&lt;p&gt;Let us begin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-steps"&gt;
  &lt;/a&gt;
  First steps
&lt;/h2&gt;

&lt;p&gt;The first thing you need to know is that we can embed lua code directly in &lt;code&gt;init.vim&lt;/code&gt;. So we can migrate our config piece by piece and only change from &lt;code&gt;init.vim&lt;/code&gt; to &lt;code&gt;init.lua&lt;/code&gt; when we are ready.&lt;/p&gt;

&lt;p&gt;Let's do the "hello world" to test that everything works as expected. Try this in your &lt;code&gt;init.vim&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;lua&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;lt;&lt;/span&gt;EOF
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hello from lua'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After "sourcing" the file or restarting neovim the message &lt;code&gt;hello from lua&lt;/code&gt; should appear right below your statusline. In here we are using something called &lt;code&gt;lua-heredoc&lt;/code&gt;, so everything that's between &lt;code&gt;&amp;lt;&amp;lt;EOF ... EOF&lt;/code&gt; will be considered a lua script and will be executed by the &lt;code&gt;lua&lt;/code&gt; command. This is useful when we want to execute multiple lines of code but it's not necessary when we only need one. This is valid.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;lua&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'this also works'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But if we are going to call lua code from vimscript I say we use a real script. In lua we can do this by using the &lt;code&gt;require&lt;/code&gt; function. For this to work we need to create a &lt;code&gt;lua&lt;/code&gt; folder somewhere in the &lt;code&gt;runtimepath&lt;/code&gt; of neovim.&lt;/p&gt;

&lt;p&gt;You'll probably want to use the same folder where &lt;code&gt;init.vim&lt;/code&gt; is located, so we will create &lt;code&gt;~/.config/nvim/lua&lt;/code&gt;, and inside that we'll create a script called &lt;code&gt;basic.lua&lt;/code&gt;. For now we will only print a message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hello from ~/config/nvim/lua/basic.lua'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now from our &lt;code&gt;init.vim&lt;/code&gt; we can call it like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;lua&lt;/span&gt; require&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'basic'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we do this neovim will search in every directory in the &lt;code&gt;runtimepath&lt;/code&gt; for a folder called &lt;code&gt;lua&lt;/code&gt; and inside that it'll look for &lt;code&gt;basic.lua&lt;/code&gt;. Neovim will run the last script that meets those conditions.&lt;/p&gt;

&lt;p&gt;If you go around and check other people's code you'll notice that they use a &lt;code&gt;.&lt;/code&gt; as a path separator. For example, let's say they have the file &lt;code&gt;~/.config/nvim/lua/usermod/settings.lua&lt;/code&gt;. If they want to call &lt;code&gt;settings.lua&lt;/code&gt; they do this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'usermod.settings'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Is a very common convention. Just remember that the dot is a path separator.&lt;/p&gt;

&lt;p&gt;With all this knowledge we are ready to begin our configuration using lua.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#editor-settings"&gt;
  &lt;/a&gt;
  Editor settings
&lt;/h2&gt;

&lt;p&gt;Each option in neovim is available to us in the global variable called &lt;code&gt;vim&lt;/code&gt;... well more than just a variable try think of this as a global module. With &lt;code&gt;vim&lt;/code&gt; we have access to the editor's settings, we also have the neovim api and even a set of helper functions (a standard library if you will). For now, we only need to care about something they call "meta-accessors", is what we'll use to access all the options we need.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scopes"&gt;
  &lt;/a&gt;
  Scopes
&lt;/h3&gt;

&lt;p&gt;Just like in vimscript, in lua we have different scopes for each option. We have global settings, window settings, buffer settings and a few others. Each one has its own namespace inside the &lt;code&gt;vim&lt;/code&gt; module.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;vim.o&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gets or sets general settings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;background&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'light'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;vim.wo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gets or sets window-scoped options.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;colorcolumn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'80'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;vim.bo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gets or sets buffer-scoped options.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filetype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'lua'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;vim.g&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gets or sets global variables. This is usually the namespace where you'll find variables set by plugins. The only one I know isn't tied to a plugin is the leader key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- use space as a the leader key&lt;/span&gt;
&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapleader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should know that some variable names in vimscript are not valid in lua. We still have access to them but we can't use the dot notation. For example, &lt;a href="https://github.com/dhruvasagar/vim-zoom"&gt;vim-zoom&lt;/a&gt; has a variable called &lt;code&gt;zoom#statustext&lt;/code&gt; and in vimscript we use it like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:zoom&lt;/span&gt;#statustext &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Z'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In lua we would have to do this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'zoom#statustext'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Z'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you might have guessed this also gives us an oportunity to access properties which have the name of keywords. You may find yourselves in a situation where you need to access a property called &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt; or &lt;code&gt;end&lt;/code&gt; which a are reserved keywords, in those cases remember this bracket syntax.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;vim.env&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gets or sets environment variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FZF_DEFAULT_OPTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'--layout=reverse'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As far as I know if you make a change in an environment variables the change will only apply in the active neovim session.&lt;/p&gt;

&lt;p&gt;But now how do we know which "scope" we need to use when we're writting our config? Don't worry about that, think of &lt;code&gt;vim.o&lt;/code&gt; and company just as a way to read values. When it's time set values we can use another method.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vimopt"&gt;
  &lt;/a&gt;
  vim.opt
&lt;/h3&gt;

&lt;p&gt;With &lt;code&gt;vim.opt&lt;/code&gt; we can set global, window and buffer settings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- buffer-scoped&lt;/span&gt;
&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autoindent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;

&lt;span class="c1"&gt;-- window-scoped&lt;/span&gt;
&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursorline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;

&lt;span class="c1"&gt;-- global scope&lt;/span&gt;
&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autowrite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we use it like this &lt;code&gt;vim.opt&lt;/code&gt; acts like the &lt;code&gt;:set&lt;/code&gt; command in vimscript, it give us a consistent way to modify neovim's options.&lt;/p&gt;

&lt;p&gt;A funny thing you can do is assign &lt;code&gt;vim.opt&lt;/code&gt; to a variable called &lt;code&gt;set&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Say we have this piece of vimscript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" Set the behavior of tab&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;tabstop&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;shiftwidth&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;softtabstop&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;expandtab&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We could translate this easily in lua like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;

&lt;span class="c1"&gt;-- Set the behavior of tab&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tabstop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shiftwidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;softtabstop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expandtab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;When you declare a variable do not forget the &lt;code&gt;local&lt;/code&gt; keyword. In lua variables are global by default (that includes functions).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Anyway, what about global variables or the environment variables? For those you should keep using &lt;code&gt;vim.g&lt;/code&gt; and &lt;code&gt;vim.env&lt;/code&gt; respectively&lt;/p&gt;

&lt;p&gt;What's interesting about &lt;code&gt;vim.opt&lt;/code&gt; is that each property is a kind of special object, they are "meta-tables". It means that these objects implement their own behavior for certain common operations.&lt;/p&gt;

&lt;p&gt;In the first example we had something like this: &lt;code&gt;vim.opt.autoindent = true&lt;/code&gt;, and now you might think you can inspect the current value by doing this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autoindent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You won't get the value you expect, &lt;code&gt;print&lt;/code&gt; will tell you &lt;code&gt;vim.opt.autoindent&lt;/code&gt; is a table. If you want to know the value of an option you'll need to use the &lt;code&gt;:get()&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autoindent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you really, really want to know what's inside &lt;code&gt;vim.out.autoindent&lt;/code&gt; you need to use &lt;code&gt;vim.inspect&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autoindent&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that will show you the internal state of this property.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-of-data"&gt;
  &lt;/a&gt;
  Types of data
&lt;/h3&gt;

&lt;p&gt;Even when we assign a value inside &lt;code&gt;vim.opt&lt;/code&gt; there is a little bit of magic going on in the background. I think is important to know how &lt;code&gt;vim.opt&lt;/code&gt; can handle different types of data and compare it with vimscript.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Booleans&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These might not seem like a big deal but there is still a difference that is worth mention.&lt;/p&gt;

&lt;p&gt;In vimscript we can activate or deactivate an option like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;cursorline&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;nocursorline&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the equivalent in lua.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursorline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursorline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Lists&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For some options neovim expects a comma separated list. In this case we could provide it as a string ourselves.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wildignore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'*/cache/*,*/tmp/*'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or we could use a table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wildignore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'*/cache/*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'*/tmp/*'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you check the content of &lt;code&gt;vim.o.wildignore&lt;/code&gt; you'll notice is the thing we want &lt;code&gt;*/cache/*,*/tmp/*&lt;/code&gt;. If you really want to be sure you can check with this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;wildignore&lt;/span&gt;?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll get the same result.&lt;/p&gt;

&lt;p&gt;But the magic does not end there. Sometimes we don't need to override the list, sometimes we need to add an item or maybe delete it. To makes things easier &lt;code&gt;vim.opt&lt;/code&gt; offers support for the following operations:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add an item to the end of the list&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's take &lt;code&gt;errorformat&lt;/code&gt; as an example. If we want to add to this list using vimscript we do this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;errorformat&lt;/span&gt;&lt;span class="p"&gt;+=&lt;/span&gt;%&lt;span class="k"&gt;f&lt;/span&gt;\&lt;span class="p"&gt;|&lt;/span&gt;%&lt;span class="k"&gt;l&lt;/span&gt;\ &lt;span class="k"&gt;col&lt;/span&gt;\ %&lt;span class="k"&gt;c&lt;/span&gt;\&lt;span class="p"&gt;|&lt;/span&gt;%&lt;span class="k"&gt;m&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In lua we have a couple of ways to achieve the same goal:&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;+&lt;/code&gt; operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errorformat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errorformat&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'%f|%l col %c|%m'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or the &lt;code&gt;:append&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errorformat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'%f|%l col %c|%m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Add to the beginning&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In vimscript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;errorformat&lt;/span&gt;^&lt;span class="p"&gt;=&lt;/span&gt;%&lt;span class="k"&gt;f&lt;/span&gt;\&lt;span class="p"&gt;|&lt;/span&gt;%&lt;span class="k"&gt;l&lt;/span&gt;\ &lt;span class="k"&gt;col&lt;/span&gt;\ %&lt;span class="k"&gt;c&lt;/span&gt;\&lt;span class="p"&gt;|&lt;/span&gt;%&lt;span class="k"&gt;m&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lua:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errorformat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errorformat&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="s1"&gt;'%f|%l col %c|%m'&lt;/span&gt;

&lt;span class="c1"&gt;-- or try the equivalent&lt;/span&gt;

&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errorformat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'%f|%l col %c|%m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Delete an item&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Vimscript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;errorformat&lt;/span&gt;&lt;span class="p"&gt;-=&lt;/span&gt;%&lt;span class="k"&gt;f&lt;/span&gt;\&lt;span class="p"&gt;|&lt;/span&gt;%&lt;span class="k"&gt;l&lt;/span&gt;\ &lt;span class="k"&gt;col&lt;/span&gt;\ %&lt;span class="k"&gt;c&lt;/span&gt;\&lt;span class="p"&gt;|&lt;/span&gt;%&lt;span class="k"&gt;m&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lua:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errorformat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errorformat&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'%f|%l col %c|%m'&lt;/span&gt;

&lt;span class="c1"&gt;-- or the equivalent&lt;/span&gt;

&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errorformat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'%f|%l col %c|%m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Pairs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some options expect a list of key-value pairs. To ilustrate this we'll use &lt;code&gt;listchars&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;listchars&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;tab&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;‚ñ∏\ &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;eol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;‚Ü≤&lt;span class="p"&gt;,&lt;/span&gt;trail&lt;span class="p"&gt;:&lt;/span&gt;¬∑
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In lua we can use tables for this too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listchars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;eol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'‚Ü≤'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'‚ñ∏ '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'¬∑'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: to actually see this on your screen you need to enable the &lt;code&gt;list&lt;/code&gt; option. See &lt;a href="https://neovim.io/doc/user/options.html#'listchars'"&gt;:help listchars&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since we are still using tables this option also supports the same operations mentioned in the previous section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#calling-vim-functions"&gt;
  &lt;/a&gt;
  Calling vim functions
&lt;/h2&gt;

&lt;p&gt;Vimscript like any other programming language it has its own built-in functions (&lt;a href="https://neovim.io/doc/user/usr_41.html#function-list"&gt;many functions&lt;/a&gt;) and thanks to the &lt;code&gt;vim&lt;/code&gt; module we can call them throught &lt;code&gt;vim.fn&lt;/code&gt;. Just like &lt;code&gt;vim.opt&lt;/code&gt;, &lt;code&gt;vim.fn&lt;/code&gt; is a meta-table,  but this one is meant to provide a convenient syntax for us to call vim functions. We use it to call built-in functions, user defined functions and even functions of plugins that are not written in lua.&lt;/p&gt;

&lt;p&gt;We could for example check the neovim version like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'nvim-0.5'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'we got neovim 0.5'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wait, hold up, why are we comparing the result of &lt;code&gt;has&lt;/code&gt; with a &lt;code&gt;1&lt;/code&gt;? Ah, well, it turns out vimscript only included booleans in the &lt;code&gt;7.4.1154&lt;/code&gt; version. So functions like &lt;code&gt;has&lt;/code&gt; return &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;, and in lua both are truthy.&lt;/p&gt;

&lt;p&gt;I've already mentioned that vimscript can have variable names that are valid in lua, in that case you know you can use square brackets like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'fzf#vim#files'&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="s1"&gt;'~/projects'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what you need to know now is that we can also use &lt;code&gt;vim.call&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'fzf#vim#files'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'~/projects'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Those two do the exact same thing. In practice &lt;code&gt;vim.fn.somefunction()&lt;/code&gt; and &lt;code&gt;vim.call('somefunction')&lt;/code&gt; have the same effect. They are the same.&lt;/p&gt;

&lt;p&gt;Now let me show you something cool. In this particular case the lua-vimscript integration is so good we can use a plugin manager without any special adapters.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vimplug-in-lua"&gt;
  &lt;/a&gt;
  vim-plug in lua
&lt;/h3&gt;

&lt;p&gt;I know there is a lot of people out there who use &lt;a href="https://github.com/junegunn/vim-plug/"&gt;vim-plug&lt;/a&gt;, you might think you need to migrate to a plugin manager that is written in lua, but that's not the case. We can use &lt;code&gt;vim.fn&lt;/code&gt; and &lt;code&gt;vim.call&lt;/code&gt; to bring vim-plug to lua.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;Plug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'plug#'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'plug#begin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'~/.config/nvim/plugged'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- List of plugins goes here&lt;/span&gt;
&lt;span class="c1"&gt;-- ....&lt;/span&gt;

&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'plug#end'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Those 3 lines of code are the only thing you need. You can try it, this works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;Plug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'plug#'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'plug#begin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'~/.config/nvim/plugged'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Plug&lt;/span&gt; &lt;span class="s1"&gt;'wellle/targets.vim'&lt;/span&gt;
&lt;span class="n"&gt;Plug&lt;/span&gt; &lt;span class="s1"&gt;'tpope/vim-surround'&lt;/span&gt;
&lt;span class="n"&gt;Plug&lt;/span&gt; &lt;span class="s1"&gt;'tpope/vim-repeat'&lt;/span&gt;

&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'plug#end'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before you say anything, yes, all of that is valid lua. If a function only recieves a single argument, and that argument is a string or a table, you can omit the parenthesis.&lt;/p&gt;

&lt;p&gt;If you use the second argument of &lt;code&gt;Plug&lt;/code&gt; you'll need the parenthesis and the second argument must be a table. Let me show you. If you have this in vimscript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;Plug &lt;span class="s1"&gt;'scrooloose/nerdtree'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'on'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'NERDTreeToggle'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In lua you'll need to do this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;Plug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'scrooloose/nerdtree'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'NERDTreeToggle'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately &lt;code&gt;vim-plug&lt;/code&gt; has a couple of options that will cause an error if we use this syntax, those are &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;do&lt;/code&gt;. In this case we need to wrap the key in quotes and square brackets.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;Plug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'junegunn/goyo.vim'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="s1"&gt;'for'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'markdown'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might know that the &lt;code&gt;do&lt;/code&gt; option takes a string or a function which will be executed when the plugin is updated or installed. But what you might not know is that we are not forced to use a "vim function", we can use lua function and it'll work just fine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;Plug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'VonHeikemen/rubber-themes.vim'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'do'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;termguicolors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'colorscheme rubber'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There you have it. You don't need to use a plugin manager written in lua if you don't want to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vimscript-is-still-our-friend"&gt;
  &lt;/a&gt;
  Vimscript is still our friend
&lt;/h2&gt;

&lt;p&gt;You might have notice in that last example I used &lt;code&gt;vim.cmd&lt;/code&gt; to set the color scheme, this is because there are still things we can't do with lua. Right now we can't create or call ex-commands, same goes for autocommands.&lt;/p&gt;

&lt;p&gt;To overcome these limitations we usually use &lt;code&gt;vim.cmd&lt;/code&gt;. This function can execute multiple lines of vimscript. It means that we can do lots of things in a single call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="s"&gt;[[
  syntax enable
  colorscheme rubber

  command! Hello echom "hello!!"
]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So anything that you can't "translate" to lua you can put it in a string and pass that to &lt;code&gt;vim.cmd&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I told you we can execute any vim command, right? I feel compelled to tell you this includes the &lt;code&gt;source&lt;/code&gt; command. For those who don't know, &lt;code&gt;source&lt;/code&gt; allows us to call other files written in vimscript. For example, in my config I use this to make some tweaks to the colorscheme. I do this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="s1"&gt;'source ~/.config/nvim/theme.vim'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And &lt;code&gt;theme.vim&lt;/code&gt; creates an autocommand that will be triggered everytime there is a &lt;code&gt;ColorScheme&lt;/code&gt; event.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; MyHighlights&lt;span class="p"&gt;()&lt;/span&gt; abort
  &lt;span class="k"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; link Question String
  &lt;span class="k"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; link NonText LineNr

  &lt;span class="k"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; link TelescopeMatching Boolean
  &lt;span class="k"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; link TelescopeSelection CursorLine
&lt;span class="k"&gt;endfunction&lt;/span&gt;

augroup MyColors
  autocmd&lt;span class="p"&gt;!&lt;/span&gt;
  autocmd &lt;span class="nb"&gt;ColorScheme&lt;/span&gt; * &lt;span class="k"&gt;call&lt;/span&gt; MyHighlights&lt;span class="p"&gt;()&lt;/span&gt;
augroup END
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I like to keep this snippet in a separate file because is very likely I will keep adding lines to it. Also, there is no way to this in lua yet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keybindings"&gt;
  &lt;/a&gt;
  Keybindings
&lt;/h2&gt;

&lt;p&gt;Here we find ourselves in an interesting situation. We actually can define our keybindings in lua but we don't have a "convenient" api just yet. Why do I say that? First thing is that the current way doesn't feel familiar, it's very different from vimscript. The other thing is that we can't bind a lua function to a key. We can call a lua function from a keyboard shortcut, but we basically have to cheat (I'll tell you how).&lt;/p&gt;

&lt;p&gt;Anyway, these are the two functions we have available right now.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vim.api.nvim_set_keymap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vim.api.nvim_buf_set_keymap&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first one can be used to set global keybindings and the other sets keybindings only in a buffer.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nvim_set_keymap&lt;/code&gt; takes 4 arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mode. But not the name of the mode, we need the abbreviation. You can find a list of valid options &lt;a href="https://github.com/nanotee/nvim-lua-guide#defining-mappings"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Key we want to bind.&lt;/li&gt;
&lt;li&gt;Action we want to execute.&lt;/li&gt;
&lt;li&gt;Extra arguments. These are the same options we would use in vimscript (except for &lt;code&gt;buffer&lt;/code&gt;), you can find the list &lt;a href="https://neovim.io/doc/user/map.html#:map-arguments"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;nvim_buf_set_keymap&lt;/code&gt; is the same, the only difference is that the first argument should be the number of the buffer. If you use the number &lt;code&gt;0&lt;/code&gt; neovim will asume you want the keybinding to take effect in the current buffer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So if we wanted to translate this to lua.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;write&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We would have to do this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nvim_set_keymap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'n'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;Leader&amp;gt;w'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;':write&amp;lt;CR&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;noremap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not the greatest thing in the world but there something we can do to make it a bit more convenient.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make an alias&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you prefer a simple approach you could assign this function to a variable with a short name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nvim_set_keymap&lt;/span&gt;

&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'n'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;Leader&amp;gt;w'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;':write&amp;lt;CR&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;noremap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Make a helper function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're willing to put more lines of code you could create another function, one that has the default values you want. I mention this because it is considered a good practice to make our keybindings non-recursive by default.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;-- get the extra options&lt;/span&gt;
  &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;noremap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;pairs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;-- basic support for buffer-scoped keybindings&lt;/span&gt;
  &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;
  &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nvim_buf_set_keymap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nvim_set_keymap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basic usage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'n'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;Leader&amp;gt;w'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;':write&amp;lt;CR&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A cool thing about this function is that it takes advantage of the way we can create tables in lua. So this is valid.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;noremap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'n'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;Leader&amp;gt;e'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'%'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And so is this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'n'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;Leader&amp;gt;e'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'%'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;noremap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#calling-lua-functions"&gt;
  &lt;/a&gt;
  Calling lua functions
&lt;/h3&gt;

&lt;p&gt;If we apply the knowledge we gained already about calling lua from vimscript, then we can do this.&lt;/p&gt;

&lt;p&gt;Assuming we have a lua module called &lt;code&gt;usermod&lt;/code&gt; and this module has a function called &lt;code&gt;somefunction&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nvim_set_keymap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s1"&gt;'n'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;'&amp;lt;Leader&amp;gt;w'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"&amp;lt;cmd&amp;gt;lua require('usermod').somefunction()&amp;lt;CR&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;noremap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, things change a little bit if we need an expression. In that case we can't use &lt;code&gt;&amp;lt;cmd&amp;gt;lua&lt;/code&gt;. We would need the variable &lt;code&gt;v:lua&lt;/code&gt;, with this variable we can call lua functions that exists in the global scope.&lt;/p&gt;

&lt;p&gt;To show you how this would work I'll try to make a smart &lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt; key. When the autocomplete menu is visible I want to navigate throught the list of results, otherwise it'll act like a regular &lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nvim_replace_termcodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;_G&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smart_tab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pumvisible&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;C-n&amp;gt;'&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;Tab&amp;gt;'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nvim_set_keymap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s1"&gt;'i'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;'&amp;lt;Tab&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;'v:lua.smart_tab()'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;noremap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;In lua &lt;code&gt;_G&lt;/code&gt; is the global table that holds all the global variables. It's not strictly necessary but I'm using it to make it clear that I'm creating a global function on purpose.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you're asking why I return &lt;code&gt;t'&amp;lt;C-n&amp;gt;'&lt;/code&gt;, is because we don't need the string &lt;code&gt;&amp;lt;C-n&amp;gt;&lt;/code&gt; we need the code that represents &lt;code&gt;ctrl+n&lt;/code&gt;, same thing with &lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If this api is not good enough for you, consider not migrating your keybindings. Leave them in a script and call it from lua.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="s1"&gt;'source ~/.config/nvim/keymap.vim'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For those of you who are actually trying to run away from vimscript I could recommend some plugins:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tjdevries/astronauta.nvim"&gt;astronauta.nvim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/svermeulen/vimpeccable"&gt;Vimpeccable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bkoropoff/bex.nvim"&gt;bex.nvim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No need to download them all. Each one has a different way to create keybingings. Pick the one you like the most.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plugin-manager"&gt;
  &lt;/a&gt;
  Plugin manager
&lt;/h2&gt;

&lt;p&gt;Speaking of plugins. You might want a plugin manager that is written in lua, just because. It appears that right now these are your options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/savq/paq-nvim/"&gt;paq&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A plugin manager that is simple and fast. I'm serious, this thing has less than 300 lines of code. It was created to download, update and remove plugins. That's it. If you don't need anything else, look no further, this is the plugin manager you want.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wbthomason/packer.nvim"&gt;packer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want more features &lt;code&gt;packer&lt;/code&gt; is the alternative. It has the basic features you would expect, it offers lazy-loading capabilities, has support for &lt;code&gt;luarocks&lt;/code&gt; (which is like a package manager for lua), it can handle "local plugins". And does other things I don't understand, but the point is that is a feature complete plugin manager.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kristijanhusak/vim-packager"&gt;vim-packager&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This one is not written in lua but I want to add it because it does offer a lua api. It offers more features than &lt;code&gt;paq&lt;/code&gt; but not as much a &lt;code&gt;packer&lt;/code&gt;, so if you are looking for a middle ground between those two, this might be a good choice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Recap time. We learnt how to use lua from vimscript. We now know how to use vimscript from lua. We have the tools to activate, deactivate and modify all sorts of options and variables in neovim. We got to know the methods we have available to create our keymaps, and we know their limitations. We figure out how to use plugin managers that aren't written in lua, and saw a few alternatives that are written in lua. I say we are ready to use lua in neovim.&lt;/p&gt;

&lt;p&gt;For those who want to see a real world usage or whatever, I'll share a link to my current config in github: &lt;a href="https://github.com/VonHeikemen/dotfiles/tree/master/my-configs/neovim"&gt;neovim&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sources"&gt;
  &lt;/a&gt;
  Sources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learnxinyminutes.com/docs/lua/"&gt;learn x in y minutes: where X=lua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nanotee/nvim-lua-guide"&gt;nvim-lua-guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://neovim.io/doc/user/lua.html#:lua-heredoc"&gt;:help lua-heredoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://neovim.io/doc/user/lua.html#lua-vim-variables"&gt;:help lua-vim-variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://neovim.io/doc/user/lua.html#lua-stdlib"&gt;:help lua-stdlib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://neovim.io/doc/user/usr_41.html#function-list"&gt;:help function-list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://neovim.io/doc/user/api.html#nvim_set_keymap()"&gt;:help nvim_set_keymap()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/curist/dotvim/blob/98b161f0759d3316fcf6a776d03665d6ab4827ee/bundles.lua"&gt;curist's bundle.lua&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Thank you for your time. If you find this article useful and want to support my efforts, &lt;a href="https://www.buymeacoffee.com/vonheikemen"&gt;buy me a coffee ‚òï&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/vonheikemen"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IF_mutQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/vonheikemen/image/upload/v1618466522/buy-me-coffee_ah0uzh.png" alt="buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vim</category>
      <category>shell</category>
      <category>neovim</category>
    </item>
    <item>
      <title>Youtube Courses, Projects To Master Javascript</title>
      <author>Aya Bouchiha</author>
      <pubDate>Sun, 01 Aug 2021 23:33:45 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/youtube-courses-projects-to-master-javascript-3lhc</link>
      <guid>https://dev.to/ayabouchiha/youtube-courses-projects-to-master-javascript-3lhc</guid>
      <description>&lt;p&gt;Hello,&lt;br&gt;
I'm &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt;,&lt;br&gt;
on this beautiful &amp;amp; amazing day,&lt;br&gt;
I'm going to share with you Youtube courses &amp;amp; projects to study and master Javascript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-courses-youtube"&gt;
  &lt;/a&gt;
  Javascript Courses (Youtube)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=2Ji-clqUYnA"&gt;Javascript Fundamentals&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=jS4aFq5-91M"&gt;JavaScript Programming - Full Course (8h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Qqx_wzMmFeA"&gt;Javascript Tutorial for Beginners (8h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=EfAl9bwzVZk"&gt;Javascript course by Dave Gray (8h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg"&gt;Learn JavaScript - Full Course for Beginners (3h 30min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk"&gt;JavaScript Tutorial for Beginners (1h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=t9dEgHpCNJE"&gt;Javascript course (4h 30min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=dOnAC2Rr-6A"&gt;Javascript Full Course for Beginners to Advanced (4h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=hdI2bqOjy3c"&gt;Javascript Crash Course by Traversy Media (1h 30min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=2qDywOS7VAc"&gt;Javascript Course by Academind (5h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=o1IaduQICO0"&gt;Javascript course by Edureka (3h 30min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#javascript-projects-youtube"&gt;
  &lt;/a&gt;
  Javascript Projects (Youtube)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=hdI2bqOjy3c&amp;amp;list=PLillGF-RfqbbnEGy3ROiLWk7JMCuSyQtX"&gt;Vanilla Js projects (playlist: 53 videos)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=lhNdUVh3qCc"&gt;Learn Javascript by building 7 games (2h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=dtKciwk_si4"&gt;building 10 Javscript projects (10h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=j59qQ7YWLxw"&gt;building a calculator using Javascript (40min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4"&gt;building 15 projects using vanilla Javascript (8h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=90PgFUPIybY"&gt;Javascript Projects - Shopping Cart (4h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Ttf3CEsEwMQ"&gt;To do list by dev ed (1h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=QTHRWGn_sJw"&gt;Music player (45min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=wPElVpR1rwA"&gt;Weather App (40min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Mz9COyHPVwA"&gt;Age Calculator (25min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=x8EY0BlhPGk"&gt;Food Recipe (1h)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=CVClHLwv-4I"&gt;Face detection (12min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Y-GkMjUZsmM"&gt;Tic Tac Toe by web dev simplified (40 min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=VjjZ2MaX0Ts"&gt;Tic tac to game by clever programmer (4h 30min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=weZFfrjF-k4"&gt;Javascript clock (6min)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To Contact Me:&lt;/p&gt;

&lt;p&gt;email: &lt;a href="mailto:developer.aya.b@gmail.com"&gt;developer.aya.b@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;telegram: &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy codding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Build your own feature flags manager in Flask/Python</title>
      <author>Tracy Chou üë©üèª‚Äçüíª</author>
      <pubDate>Sun, 01 Aug 2021 22:40:49 +0000</pubDate>
      <link>https://dev.to/triketora/build-your-own-feature-flags-manager-in-flask-python-1jo0</link>
      <guid>https://dev.to/triketora/build-your-own-feature-flags-manager-in-flask-python-1jo0</guid>
      <description>&lt;p&gt;It may be an odd thing to be so enthused about a software development pattern but one of my absolute favorites is using &lt;strong&gt;feature flags&lt;/strong&gt; to gate new features. I can't imagine building any reasonable size application with any kind of usage without them. &lt;/p&gt;

&lt;p&gt;Feature flags are essentially "just" a nice way to do &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; checks, to choose what code paths are enabled for a user, but even a tiny bit of tooling to manage them can completely turbocharge your development velocity. Which is great! Hopefully that means your users get more useful product that much more quickly. &lt;/p&gt;

&lt;p&gt;The first great thing about feature flags is that you can do incremental development of new features without having to wrangle separate feature branches. You can commit to main as often as you please, as long as you hide your partially complete work behind a feature flag. This is especially useful if you are collaborating with someone.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if feature_flag('NEW_FEATURE', 'ENABLED'):
    # show new feature
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you are ready to release a new feature, design, or variant, you can also do that selectively, adding people into the variant group for the feature flag to start seeing it. With feature flags, rollout of a new feature can be decoupled from deployment of the code for it, which is a lot safer, and it's much more easily reversible if something does go wrong.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if feature_flag('MY_EXPERIMENT', 'VARIANT_A'):
    # show variant a
elif feature_flag('MY_EXPERIMENT', 'VARIANT_B'):
    # show variant b
else:
    # show control
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#buy-vs-build"&gt;
  &lt;/a&gt;
  Buy vs. build
&lt;/h2&gt;

&lt;p&gt;People much smarter and more experienced than I have written extensively about the buy vs. build decision, e.g. see this excellent &lt;a href="https://skamille.medium.com/why-is-it-so-hard-to-decide-to-buy-d86fee98e88e"&gt;analysis&lt;/a&gt; from Camille Fournier, author of &lt;em&gt;The Manager's Path&lt;/em&gt;. I won't rehash the whole topic here but suffice to say, more often than engineers are typically inclined to choose it, the right decision is to buy. This is true at least in the context of engineering teams working on production systems of any scale. &lt;/p&gt;

&lt;p&gt;As of the time of this writing, mid-2021, LaunchDarkly is the leading SaaS solution for feature flags. Based on the size of their business, lots of developers seem to find value in a nice system to manage their feature flags. At $10/user it's certainly a lot cheaper to use an off-the-shelf solution than to spend your engineering hours (billed at a much higher rate!) on building your own. &lt;/p&gt;

&lt;p&gt;That being said, a basic version of feature flags is relatively easy to implement, and if you're working on a new project, you may not want the hassle of integrating with an external service or to be paying a monthly rate per developer to be able to check some booleans. If this is you, or if you're just curious to see an implementation of a feature flags manager, read on.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-your-own-feature-flags-manager"&gt;
  &lt;/a&gt;
  Build your own feature flags manager
&lt;/h2&gt;

&lt;p&gt;I've always known the abstraction for a feature flags manager as "gatekeeper", having worked at Facebook and with numerous ex-Facebookers, as this is the internal service name for their feature flag and experimentation &lt;a href="https://launchdarkly.com/blog/secret-to-facebooks-hacker-engineering-culture/"&gt;framework&lt;/a&gt;. It's a catchy name and has the benefit of being conveniently abbreviated as &lt;code&gt;gk&lt;/code&gt; in code. I'll use it here as well. &lt;/p&gt;

&lt;p&gt;In addition to gatekeeper itself, you also need the gatekeeper configs that specify what the feature flags are and the logic for putting users or sessions into different variants. Though the most professionalized feature flag solutions will use config files separate from code, for our home-grown, first version of gatekeeper, putting our configs in code is easiest and it works well enough. &lt;/p&gt;

&lt;p&gt;The last bit is initializing and registering gatekeeper and making it for developers to use - super critical for a developer tool! To that end of making things as easy to use as possible, one more addition to the core abstraction that I've found unusually helpful is supporting browser overrides, which can be set with an admin dashboard. &lt;/p&gt;

&lt;p&gt;So, to summarize, you'll need:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The feature flags manager (gatekeeper)&lt;/li&gt;
&lt;li&gt;The feature flag configs (gatekeeper configs)&lt;/li&gt;
&lt;li&gt;To wire things up neatly to make it all easy to use&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The below code is written in Python, for a web app using the Flask framework. Hopefully it is straightforward enough to read here, and to extend to other languages and frameworks!&lt;/p&gt;

&lt;p&gt;(Note that I've included the code to support browser overrides, though not the admin dashboard code for setting and reading those overrides, which is separate.)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gatekeeperpy"&gt;
  &lt;/a&gt;
  gatekeeper.py
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;gatekeeper_config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FF_CONFIG_MAP&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Gatekeeper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;config_map&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config_map&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;config_map&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;FF_CONFIG_MAP&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;'''Shorthand wrapper for `feature_flag`.'''&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feature_flag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;feature_flag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_feature_flag_variant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ff_variant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;'''Shorthand wrapper for `get_feature_flag_variant`.'''&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_feature_flag_variant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_feature_flag_variant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user_id_override&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config_map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

        &lt;span class="n"&gt;variant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_variant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user_id_override&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_config_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config_map&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_browser_override_variants&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'gatekeeper'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'{}'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_browser_override_variant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config_map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_browser_override_variant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize_gatekeeper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config_map&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_login&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_anonymous&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;

    &lt;span class="n"&gt;gk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Gatekeeper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;config_map&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config_map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;gk&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-gatekeeperconfigpy-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;gatekeeper_config.py&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;abc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ABC&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;abc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;abstractmethod&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;enum&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Enum&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FeatureFlagConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ABC&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;FLAG_NAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;VARIANTS_ENUM_STR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;overrides&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;variants_enum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Enum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;Variants'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VARIANTS_ENUM_STR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;overrides&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;overrides&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_variants&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;variants_enum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__members__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;abstractmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_variant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_variant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;override_variant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_override_variant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;override_variant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;override_variant&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_variant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_override_variant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;browser_override_variant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_browser_override_variant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;browser_override_variant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;browser_override_variant&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;overrides&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user_ids&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;overrides&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;user_ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;variants_enum&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_browser_override_variant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;browser_override_variants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_browser_override_variants&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;browser_override_variants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FLAG_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;browser_override_variants&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FLAG_NAME&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;variant&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_cookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;'gatekeeper'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;browser_override_variants&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_browser_override_variants&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'gatekeeper'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'{}'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_browser_override_variant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;browser_override_variants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_browser_override_variants&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;browser_override_variant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;browser_override_variants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FLAG_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;browser_override_variant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;variants_enum&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;browser_override_variant&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyNewFeatureFFConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FeatureFlagConfig&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;FLAG_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'MY_NEW_FEATURE'&lt;/span&gt;
    &lt;span class="n"&gt;VARIANTS_ENUM_STR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'VISIBLE NOT_VISIBLE'&lt;/span&gt;
    &lt;span class="n"&gt;DESCRIPTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Gate visibility of my new feature during development'&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_variant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'IS_DEV'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;variants_enum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VISIBLE&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;  &lt;span class="c1"&gt;# Team user ids
&lt;/span&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;variants_enum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VISIBLE&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;variants_enum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NOT_VISIBLE&lt;/span&gt;


&lt;span class="n"&gt;FF_CONFIG_MAP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FFConfigMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'MY_NEW_FEATURE'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MyNewFeatureFFConfig&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#in-raw-apppy-endraw-"&gt;
  &lt;/a&gt;
  In &lt;code&gt;app.py&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# All the usual app setup stuff here... 
&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;before_request&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register_gatekeeper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# Put imports here to avoid circular import issues.
&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;

    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gatekeeper&lt;/span&gt;

    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gatekeeper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialize_gatekeeper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-gatekeeper"&gt;
  &lt;/a&gt;
  Using gatekeeper
&lt;/h3&gt;

&lt;p&gt;With all of this setup, now it's super straightforward to query gatekeeper for a feature flag and variant.&lt;/p&gt;

&lt;p&gt;For example, in Python web handler code, it might look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'MY_NEW_FEATURE'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'VISIBLE'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="c1"&gt;# Show new feature
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or in Jinja template code, it might look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'MY_NEW_FEATURE'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'VISIBLE'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;# Show new feature #}
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;endif&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h3&gt;

&lt;p&gt;If you take out the code to support overrides, and in particular browser overrides, you'll see there's actually quite little necessary to make a functional feature flags manager. I've included the override support because I find it so critical, more so than you might expect, for developer ease of use. &lt;/p&gt;

&lt;p&gt;If you aren't already using feature flags, I hope this post convinces you to adopt them in your development and release workflow -- and if you aren't quite keen to set up another SaaS solution yet, perhaps the code shared here can help get you started with your own implementation of a feature flags manager. Happy coding! &lt;/p&gt;

</description>
      <category>python</category>
      <category>flask</category>
      <category>devtools</category>
      <category>featureflags</category>
    </item>
    <item>
      <title>Developing Maintainable Django Projects for the Long Run</title>
      <author>Farhan Masud Aneek</author>
      <pubDate>Sun, 01 Aug 2021 22:21:43 +0000</pubDate>
      <link>https://dev.to/farhanmasud/developing-maintainable-django-projects-for-the-long-run-knb</link>
      <guid>https://dev.to/farhanmasud/developing-maintainable-django-projects-for-the-long-run-knb</guid>
      <description>&lt;p&gt;Django being the web framework for the perfectionists definitely comes with many handy features out of the box. Even after being a very opinionated framework [there is always the "Django way" for doing things], in many cases there are more than a few ways to do the same thing. This might lead to some poor structure and coding choices for many beginners as described in &lt;a href="https://www.toptal.com/django/django-top-10-mistakes"&gt;this blog post&lt;/a&gt;. These mistakes [along with many others] often lead to unmanageable code in the long run when the size of the project keeps growing.&lt;/p&gt;

&lt;p&gt;If there is a bug and causes downtime in production then fixing the error might feel like finding a needle in the haystack with a poorly structured codebase. The above mentioned link can work as a style guide [like many other, scroll to the end of this blog post for more Django style guides] for structuring Django projects which can help manage our code better. On top of this, let's dive into 11 ways that will definitely make life easier developing and maintaining a Django project for the long run.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-code-formatting-and-linting"&gt;
  &lt;/a&gt;
  1. Code Formatting and Linting
&lt;/h2&gt;

&lt;p&gt;The codebase should be clean, concise and readable as suggested by the &lt;a href="https://django-best-practices.readthedocs.io/en/latest/code.html"&gt;Django Best Practices&lt;/a&gt; guide. To maintain such a codebase, the best approach is to follow a specific code style and format. The hard part is remembering all the formatting rules and getting every developer working on the project onboard with these specific rules. That can eat up a lot of unnecessary time in development.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href="https://github.com/psf/black"&gt;black&lt;/a&gt; - The Uncompromising Code Formatter. It supports all major IDEs and upon saving a file, it does it's black magic to convert all the messy code to beautifully structured code. You can also run black against your whole codebase for formatting all of the files as well. Here is a &lt;a href="https://dev.to/adamlombard/how-to-use-the-black-python-code-formatter-in-vscode-3lo0"&gt;handy guide on dev.to&lt;/a&gt; for setting up black in VSCode.&lt;/p&gt;

&lt;p&gt;To help you with syntax errors, &lt;a href="https://github.com/PyCQA/pylint"&gt;pylint&lt;/a&gt; is an amazing tool. There is also a dedicated Django extension for pylint called &lt;a href="https://github.com/PyCQA/pylint-django"&gt;pylint-django&lt;/a&gt;. Pylint is the default linter in VSCode and you can setup pylint-django just by installing it via pip and updating the settings as shown on &lt;a href="https://code.visualstudio.com/docs/python/linting#:~:text=Pylint%20plugins%2C%20such,load-plugins%22%2C%20%22pylint_django%22%5D"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, to help you code even faster, you can use &lt;a href="https://www.kite.com/"&gt;Kite&lt;/a&gt; for AI powered auto-completion.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-environment-variables-and-django-settings-file"&gt;
  &lt;/a&gt;
  2. Environment Variables and Django Settings File
&lt;/h2&gt;

&lt;p&gt;Your environment variables like &lt;code&gt;SECRET_KEY&lt;/code&gt; or anything related to database setup should never be placed directly in the Django settings file and in the version control. These are sensitive data and you should safely keep them out of anyone's reach who's not supposed to see it.&lt;/p&gt;

&lt;p&gt;You can use &lt;a href="https://github.com/joke2k/django-environ"&gt;django-environ&lt;/a&gt; for serving the purpose. The process is very straightforward as well. You just need to create an &lt;code&gt;.env&lt;/code&gt; file and keep all your variables there and import them into your settings file using the API of django-environ package. And keep this &lt;code&gt;.env&lt;/code&gt; file out of version by placing it in the &lt;code&gt;.gitignore&lt;/code&gt; file. But you should keep an &lt;code&gt;.env.example&lt;/code&gt; file in the version control that contains a template of the original &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Your development coding environment will obviously differ in one way or another and to match with that, your project's settings file will differ as well. If you are keeping your development settings in the old fashioned &lt;code&gt;local_settings.py&lt;/code&gt; file and keeping out of version control, you are probably doing it wrong and there are many &lt;a href="https://daniel.feldroy.com/posts/using-executable-code-outside-version-control"&gt;valid reasons for that&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A better approach is to split up your settings file into base, development, test, stage and production files along with a &lt;code&gt;__init__.py&lt;/code&gt; file that will go to a settings directory replacing the &lt;code&gt;settings.py&lt;/code&gt; file. The &lt;code&gt;base.py&lt;/code&gt; settings file will hold all the settings that don't need to change and the development, test, stage and production settings files containing all the environment specific settings with start with importing all the settings from the &lt;code&gt;base.py&lt;/code&gt; file as &lt;code&gt;from .base import *&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One issue that will come up with this approach is that the &lt;code&gt;manage.py&lt;/code&gt; will be pointing to the older settings file and it'll no longer work. In this case you won't be able to run your development server along with any commands with &lt;code&gt;manage.py&lt;/code&gt;. To solve this, you can create a new environment variable called &lt;code&gt;WORK_ENV&lt;/code&gt; in your &lt;code&gt;.env&lt;/code&gt; file and a new &lt;code&gt;engage.py&lt;/code&gt; file in the settings directory which will contain -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from .base import *

working_environment = env.str("WORK_ENV", default="development")


if working_environment == "production":
    from .production import *
elif working_environment == "stage":
    from .stage import *
elif working_environment == "test":
    from .test import *
else:
    from .development import *
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, update your manage.py file to replace the line&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project.settings')&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;with&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;os.environ.setdefault("DJANGO_SETTINGS_MODULE", "your_project.settings.engage")&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;So, previously all the settings with all sensitive information would have been stored in a single &lt;code&gt;settings.py&lt;/code&gt; file. And now, with the split up settings file and the &lt;code&gt;.env&lt;/code&gt; file, it should look like -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;|--settings
   |-- __init__.py
   |-- base.py
   |-- engage.py
   |-- development.py
   |-- production.py
   |-- stage.py
   |-- test.py
   |-- .env
   |-- .env.example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-postgresql-everywhere"&gt;
  &lt;/a&gt;
  3. PostgreSQL Everywhere
&lt;/h2&gt;

&lt;p&gt;Django comes with a simple and lightweight SQLite3 database out of the box which takes you out of the hassle of setting up the database and you can go straight to developing your application. But there are many cases where it might go wrong and even restrict you from writing efficient code for filtering your data from the database. Among others, one example can be how to filter distinct values as explained &lt;a href="https://stackoverflow.com/questions/4723220/retrieving-distinct-records-based-on-a-column-on-django#comment23664405_4725945"&gt;here&lt;/a&gt;, you can't really use the SQLite3 database for this.&lt;/p&gt;

&lt;p&gt;PostgreSQL database works fantastic with Django. It is &lt;a href="https://djangodeployment.com/2016/12/23/which-database-should-i-use-on-production/"&gt;recommended&lt;/a&gt; by many to use PostgreSQL in production. A better approach would be using it in all of your environments [development, test, stage and production] so that your application works consistently everywhere. If you can just go through the setting up the PostgreSQL database on your environments [just a few commands anyway and if you use Docker you can streamline the process even further], you don't have to spend time thinking about which Django ORM features that you can use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-api-documentation"&gt;
  &lt;/a&gt;
  4. API Documentation
&lt;/h2&gt;

&lt;p&gt;If you are working with Django REST framework, it's a good idea to keep your API documented even if you are not exposing it to the public. One great tool is &lt;a href="https://swagger.io/"&gt;Swagger&lt;/a&gt; and you can generate the Swagger schema automatically for your DRF project by using &lt;a href="https://github.com/axnsan12/drf-yasg"&gt;drf-yasg&lt;/a&gt;. Very easy to setup and the schema will be generated from your &lt;code&gt;urls.py&lt;/code&gt; files. You can also choose between two different looks.&lt;/p&gt;

&lt;p&gt;Keep in mind that drf-yasg generates Swagger/OpenAPI 2.0 specification of your REST API. If you are looking for Swagger/OpenAPI 3.0, you can check out &lt;a href="https://github.com/tfranzel/drf-spectacular"&gt;drf-spectacular&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-django-debug-toolbar"&gt;
  &lt;/a&gt;
  5. Django Debug Toolbar
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://github.com/jazzband/django-debug-toolbar"&gt;django-debug-toolbar&lt;/a&gt; package makes debugging a breeze. Django's default debug mode is definitely a very useful tool but django-debug-toolbar is a step above. You can see how much CPU time it takes to process the response, how many [and what] SQL queries are being executed, which static files the request is fetching, details about your template, list of all of your context variables and many more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-django-shell-and-management-commands"&gt;
  &lt;/a&gt;
  6. Django Shell and Management Commands
&lt;/h2&gt;

&lt;p&gt;Django shell is like a Python shell but with everything that Django is setup with on your project settings. You can call all of your apps, models and anything that's defined in your project really. Just type in &lt;code&gt;python manage.py shell&lt;/code&gt; in your virtual environment and you're inside the Django shell. This can come in handy for testing different ORM queries with your defined app models as well as trying out APIs of third party packages.&lt;/p&gt;

&lt;p&gt;You can use custom management commands with &lt;code&gt;manage.py&lt;/code&gt; for doing tasks. For example, you might need to insert data into your database from a csv file or a daily cron job for doing something that is related to the database. You can't access the database with the Django ORM from outside the application [for example, a cron job]. But if you define your task in a management command, you can call it from anywhere with the Python from that project virtual environment using &lt;code&gt;python manage.py your_command&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are many useful management commands can already be found in different third party packages. One such package is &lt;a href="https://github.com/django-extensions/django-extensions"&gt;django-extensions&lt;/a&gt;. It comes with many helpful commands that can help you in many different scenario in development. You can drop the whole database, get a list of all of your urls and many more. One feature I particularly like is that I can generate a visual representation of my models using &lt;a href="https://github.com/django-extensions/django-extensions#:~:text=%24%20python%20manage.py%20graph_models%20-a%20-o%20myapp_models.png"&gt;this&lt;/a&gt; command. When the codebase grows big and I need to get an overview of how all of my models are connected, it comes in very handy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-logging-with-sentry"&gt;
  &lt;/a&gt;
  7. Logging with Sentry
&lt;/h2&gt;

&lt;p&gt;Well, &lt;a href="https://media.giphy.com/media/uh2RP33ezYpnW/giphy.gif"&gt;the night is dark and full of (t)errors&lt;/a&gt;. And you can't just play &lt;a href="https://media.giphy.com/media/13f5iwTRuiEjjW/giphy.gif"&gt;Jon Snow&lt;/a&gt; when the users start complaining about getting server errors.&lt;/p&gt;

&lt;p&gt;In development, when your debug mode is on, you can just go through the very helpful debug messages that Django helps you with. But it's not the same in production. You should definitely &lt;a href="https://mattsegal.dev/django-gunicorn-nginx-logging.html"&gt;setup logs&lt;/a&gt; in your Django projects but additionally, a third party tool like &lt;a href="https://sentry.io/welcome/"&gt;Sentry&lt;/a&gt; can save you a ton of time and hassle. The setup process can't be simpler, you just sign up and &lt;a href="https://docs.sentry.io/platforms/python/guides/django/"&gt;add a few lines&lt;/a&gt; to the Django settings file and that's it!&lt;/p&gt;

&lt;p&gt;To get you started, the free tier gives you to save 5K errors, 10K transactions and 1GB attachments for 1 user with 30 day data retention. And you don't need to wait for your users to start complaining that your site isn't working, Sentry will send you emails when it catches new errors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-environment-management-piptools-and-docker"&gt;
  &lt;/a&gt;
  8. Environment Management - pip-tools and Docker
&lt;/h2&gt;

&lt;p&gt;You should always pin the exact version of Django and other pip packages that you are using in your Django project in a requirements.txt file. You can easily do it with &lt;code&gt;virtualenv&lt;/code&gt; and a &lt;code&gt;pip-freeze&lt;/code&gt; command. But the issue that comes up with this is that it exports all the package names that are in your virtual environment. There can be many dependencies of a specific package and if you want to upgrade one, you'll need to update all of it's dependencies manually as well along with it. Also, there are packages that you need only in development like &lt;code&gt;black&lt;/code&gt;, &lt;code&gt;pylint&lt;/code&gt; or &lt;code&gt;django-debug-toolbar&lt;/code&gt; that you definitely don't need in production. To deal with all these, there is an awesome package called &lt;a href="https://github.com/jazzband/pip-tools"&gt;pip-tools&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With the help of this package, you only need to pin your packages in a &lt;code&gt;requirements.in&lt;/code&gt; file and when you compile this file, it'll generate a nicely formatted &lt;code&gt;requirements.txt&lt;/code&gt; file that will have all the dependencies with notes for which one of them is coming from which specific package. You can also pin your development packages in &lt;code&gt;dev-requirements.in&lt;/code&gt; file and keep your development tools separate.&lt;/p&gt;

&lt;p&gt;Now you have taken care of the version of the pip packages, how about your Python version? Or exact PostgreSQL version that you are using in your development? Or even further, the version of your operating system that's all of these are running on?&lt;/p&gt;

&lt;p&gt;When you run your application, it's behavior depends on everything that it's using [and not using, that are running alongside it on the same operating system]. All of these can influence how it's running and performing. To isolate the application and to make sure it works the same no matter where it's running, you should use &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Getting started with Docker can easily feel overwhelming for a newcomer. &lt;a href="https://testdriven.io/blog/dockerizing-django-with-postgres-gunicorn-and-nginx/"&gt;Here&lt;/a&gt; is an awesome article how you can user Docker with your Django project. This is a three part series and it walks you through how you can use Docker in your development as well as deploying it live.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-using-useradmin-in-the-django-admin-for-custom-user-model"&gt;
  &lt;/a&gt;
  9. Using UserAdmin in the Django Admin for Custom User Model
&lt;/h2&gt;

&lt;p&gt;One of the most handy "batteries" included with Django has to be the Django Admin. It can be very useful for inspecting the data in the database with a model-centric interface as well as for inputting / inspecting / managing test data while in development. When we add a model to the Django Admin, the usual approach is to use &lt;code&gt;ModelAdmin&lt;/code&gt; from &lt;code&gt;django.contrib.admin&lt;/code&gt; but if you use it with a custom user model, there is an issue. And if you are not already aware, defining the custom user model should be something that you should do as one of the first things when you start a new Django project as &lt;a href="https://docs.djangoproject.com/en/3.2/topics/auth/customizing/#:~:text=Using%20a%20custom,sufficient%20for%20you."&gt;suggested&lt;/a&gt; by the Django documentation itself.&lt;/p&gt;

&lt;p&gt;Just like most other web frameworks, Django doesn't store the passwords as plain texts. It uses a hash function to encrypt it and then stores it in the database. So even if the data is compromised, it won't be possible to decipher what actually the password is for a specific user.&lt;/p&gt;

&lt;p&gt;Going back to the issue about using &lt;code&gt;ModelAdmin&lt;/code&gt; with a custom user model is that your user create form and user edit form will present you with password input fields where you'll need to enter the password in the hashed format itself. If you enter &lt;em&gt;yourawesomepassword123&lt;/em&gt; as your password and save the user, that user won't be able to log in with &lt;em&gt;yourawesomepassword123&lt;/em&gt; because that's not the actual stored password. The actual password would be the value that's is &lt;em&gt;yourawesomepassword123&lt;/em&gt; after hashing.&lt;/p&gt;

&lt;p&gt;The solution is to write user creating and updating forms based on &lt;code&gt;UserCreationForm&lt;/code&gt; and &lt;code&gt;UserChangeForm&lt;/code&gt; from &lt;code&gt;django.contrib.auth.forms&lt;/code&gt; and use them in the admin that will be based on &lt;code&gt;UserAdmin&lt;/code&gt; from &lt;code&gt;django.contrib.auth.admin&lt;/code&gt;. You can find all about how to do it on &lt;a href="https://learndjango.com/tutorials/django-custom-user-model"&gt;this awesome tutorial&lt;/a&gt;. This way you will have the freedom of creating new users from the Django admin with ease.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-tdd-test-driven-development"&gt;
  &lt;/a&gt;
  10. TDD - Test Driven Development
&lt;/h2&gt;

&lt;p&gt;Test driven development is where you write your tests even before you code a feature. The idea is that you will think of the test case, write a test and write the function that will make the test pass. It is certainly not easy to always follow this and getting started with it can feel overwhelming. But for the long run, it'll help you save so much hours of pain and misery for fixing unwanted bugs that happen in production.&lt;/p&gt;

&lt;p&gt;I would suggest checking out &lt;a href="https://testdriven.io/"&gt;testdriven.io&lt;/a&gt; for getting up and running with TDD [and Docker]. I can vouch that their paid courses are worth every penny without having any affiliation with them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-starter-templates-and-style-guides"&gt;
  &lt;/a&gt;
  11. Starter Templates and Style Guides
&lt;/h2&gt;

&lt;p&gt;There are a number of things that always need to be done when starting a new project which are always the same. There are a some fantastic starter templates that can help jumpstart your Django projects. I'm listing a few of them below - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pydanny/cookiecutter-django"&gt;cookiecutter-django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wsvincent/djangox/"&gt;djangox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wsvincent/drfx/"&gt;drfx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jpadilla/django-project-template"&gt;django-project-template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/erroneousboat/docker-django/"&gt;docker-django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When the project keeps getting larger and multiple developers working on the same project [even while working alone], it is possible to end up with different style codes in the same codebase. It's better to follow a specific style guide throughout all of the codebase so it's easier to read, modify and maintain in the long run. It's also easier to get new developers onboard with the project with a specific style guide. A few of the popular styles guides - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://django-best-practices.readthedocs.io/en/latest/"&gt;Django Best Practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/HackSoftware/Django-Styleguide"&gt;Django Styleguide by HackSoftware&lt;/a&gt; which also comes with &lt;a href="https://github.com/HackSoftware/Styleguide-Example"&gt;an example project&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/phalt/django-api-domains"&gt;django-api-domains&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.feldroy.com/products/two-scoops-of-django-3-x"&gt;Two Scoops of Django 3.x: Best Practices for the Django Framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>django</category>
      <category>webdev</category>
      <category>python</category>
    </item>
    <item>
      <title>Cross-site Request Forgery Attacks (CSRF): What a frontend developer should know</title>
      <author>Mariam Reba Alexander</author>
      <pubDate>Sun, 01 Aug 2021 21:46:51 +0000</pubDate>
      <link>https://dev.to/ms_74/cross-site-request-forgery-attacks-csrf-what-a-frontend-developer-should-know-l5b</link>
      <guid>https://dev.to/ms_74/cross-site-request-forgery-attacks-csrf-what-a-frontend-developer-should-know-l5b</guid>
      <description>&lt;p&gt;After discussing about Cross Site Scripting Attacks (XSS) in the previous posts, I am going to explain now about another type of attack &lt;strong&gt;Cross-site Request Forgery Attack&lt;/strong&gt; (CSRF or XSRF), sometimes pronounced as &lt;em&gt;"sea-surf"&lt;/em&gt;. It has number of other names such as Session Riding, Cross-Site Reference Forgery, Hostile Linking and One-click attack.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#csrf-attack-how-it-happens"&gt;
  &lt;/a&gt;
  CSRF attack, how it happens
&lt;/h2&gt;

&lt;p&gt;CSRF is a more common vulnerability in websites, and the attack sometimes goes unnoticed by the victim. The after effects can be damaging as it happens within an authenticated session, and can perform user actions without the user's knowledge. For example, change password of user, one-click purchase on Amazon, post obscene content in the users social platform, transfer funds and so on.&lt;/p&gt;

&lt;p&gt;The attacker may send a link via email or chat and trick the users of a web application into executing actions of the attacker‚Äôs choosing. These attacks can get serious, if the user's account is an administrative account, as the entire web application and its accounts are compromised. &lt;/p&gt;

&lt;p&gt;There are many ways in which this attack can occur&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1tampering-with-get-request"&gt;
  &lt;/a&gt;
  1.Tampering with GET request
&lt;/h3&gt;

&lt;p&gt;Suppose a website uses &lt;code&gt;GET&lt;/code&gt; request to change the state of web server, transfer parameters or execute logical actions. The attacker can exploit this vulnerability, for example by tricking the victim to click a hyperlink into the vulnerable site that performs unexpected actions. &lt;code&gt;GET&lt;/code&gt; is particularly susceptible to CSRF attacks as it exposes the all the request contents in the URL.&lt;/p&gt;

&lt;p&gt;Most forms of hyperlink on the web correspond with &lt;code&gt;HTTP GET&lt;/code&gt; requests. A basic example is &lt;code&gt;&amp;lt;a href="https://example-site.com"&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt; embedded in an HTML snippet. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qcTXmDTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrnfazbxoueq3vhrr066.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qcTXmDTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrnfazbxoueq3vhrr066.png" alt="CSRF techniques"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Suppose a bank website uses a &lt;code&gt;GET&lt;/code&gt; request to transfer funds like below&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GET http://bank.com/transfer.do?acct=ANNA&amp;amp;amount=100 HTTP/1.1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;an attacker , let's call the person &lt;code&gt;Jack&lt;/code&gt; can tamper with the query strings and make a link or an image or a script, send it to the user via an unsolicited email with HTML content or by planting it on pages that are likely to be visited by the victim while they are doing online banking.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a href="http://bank.com/transfer.do?acct= JACK&amp;amp;amount=10000"&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img src="http://bank.com/transfer.do?acct=JACK&amp;amp;amount=100000" width="0" height="0" border="0"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- Videos typically load into the DOM immediately, depending on the browser's
configuration. Some mobile browsers will not load until the element is interacted
with. --&amp;gt;
&amp;lt;video width="1280" height="720" controls&amp;gt;
  &amp;lt;source src="https://www.bank.com/transfer.do?
  acct=JACK&amp;amp;amount=100000" type="video/mp4"&amp;gt;
&amp;lt;/video&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case of image tag, the user does not see anything or does not require any action from user to make the request, it will simply trigger as the page or email with HTML content is visited.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F9G5yC31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szq02of5y9v1llodjqe8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F9G5yC31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szq02of5y9v1llodjqe8.jpg" alt="CSRF attack process"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A real case example of CSRF attack was when an older iteration of Twitter, had allowed to create tweets via a &lt;code&gt;GET&lt;/code&gt; requests. The hacker used this loophole to create a viral work on Twitter, wherein a malicious link when clicked, would post a tweet containing an obscene message with the same link in it. When readers clicked the link that the first victim tweeted, they too were tricked into tweeting the same tweet. Tens of thousands of Twitter users were tricked and luckily the development team closed the security hole before the situation got worse. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-using-post-request"&gt;
  &lt;/a&gt;
  2. Using POST request
&lt;/h3&gt;

&lt;p&gt;Well, if you thought that using &lt;code&gt;POST&lt;/code&gt; requests are safer, it's not the case. Its just that delivering an attack through &lt;code&gt;POST&lt;/code&gt; require some more work than using a link or image tag for &lt;code&gt;GET&lt;/code&gt; request.  &lt;/p&gt;

&lt;p&gt;The attack happens typically via a &lt;code&gt;&amp;lt;form&amp;gt;&amp;lt;/form&amp;gt;&lt;/code&gt; object in HTML, as it is possible to trigger a POST request on submit action without a script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form action="https://www.xxx-bank.com/transfer" method="POST"&amp;gt;
  &amp;lt;input type="hidden" name="to_user" value="hacker"&amp;gt;
  &amp;lt;input type="hidden" name="amount" value="10000"&amp;gt;
  &amp;lt;input type="text" name="username" value="username"&amp;gt;
  &amp;lt;input type="password" name="password" value="password"&amp;gt;
  &amp;lt;input type="submit" value="Submit"&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above HTML form object you can see some hidden input fields, these are used to seed data into the form without the user seeing them. &lt;/p&gt;

&lt;p&gt;In this case, the user will see a login form to a legitimate website, and after entering the username and password, the user submits the form. Upon submitting, a POST request will be made along with the hidden data to the bank, and the funds gets transferred to the attacker. There was no actual logging  in, but a request was made using the user's existing session with the bank from another web page.&lt;/p&gt;

&lt;p&gt;The below script will make the form submit on page load without requiring any user action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;body onload="document.forms[0].submit()"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see how the attacker took advantage of the user's current application state with the bank even if they were on a different website. This technique can also be used to make requests on behalf of a user who has access to an internal network. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-using-other-http-methods-put-delete"&gt;
  &lt;/a&gt;
  3. Using other HTTP methods - PUT, DELETE
&lt;/h3&gt;

&lt;p&gt;Suppose a bank uses PUT that takes a JSON block as an argument:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PUT http://xxx-bank.com/transfer.do HTTP/1.1
{ "acct":"BOB", "amount":100 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These requests are executed by a script in the malicious website.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
function put() {
    var x = new XMLHttpRequest();
    x.open("PUT","http://bank.com/transfer.do",true);
    x.setRequestHeader("Content-Type", "application/json");
    x.send(JSON.stringify({"acct":"BOB", "amount":100})); 
}
&amp;lt;/script&amp;gt;

&amp;lt;body onload="put()"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Most of the mitigation against CSRF happens on the server side, even then it is important for a frontend developer to know about them, so that when you identify a vulnerability, you can notify and take necessary actions with your backend team. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defense-1-follow-rest-principles"&gt;
  &lt;/a&gt;
  Defense #1 - Follow REST principles
&lt;/h2&gt;

&lt;p&gt;REST states that you should map website operations to the appropriate HTTP method according to their intention. You should fetch data or pages with GET requests, create new objects on the server (such as comments, uploads, or messages) with PUT requests, modify objects on the server with POST requests, and delete objects with DELETE requests. So &lt;strong&gt;Do not use &lt;code&gt;GET&lt;/code&gt;requests to change the state of the server&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;If you use it for any reason, they will require a CSRF token header (this a bad practice). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defense-2-anticsrf-tokens"&gt;
  &lt;/a&gt;
  Defense #2 - Anti-CSRF tokens
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Anti-CSRF&lt;/em&gt; tokens prevent CSRF attacks by requiring the existence of a secret, unique, and unpredictable token that is generated by the server-side application and transmitted to the client in such a way that it is included in a subsequent HTTP request made by the client. &lt;br&gt;
When the later request is made, the server-side application validates that the request includes the expected token and rejects the request if the token is missing or invalid.&lt;br&gt;
These tokens can be set for an entire user session, rotated on a regular basis, or be created uniquely for each request.&lt;/p&gt;

&lt;p&gt;The CSRF tokens can be implemented multiple ways, the common examples are &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-hidden-input-field"&gt;
  &lt;/a&gt;
  #1 Hidden input field
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="hidden" name="csrftoken" value="1df93e1eafa42012f9a8aff062eeb1db0380b"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the above approach, the token is transmitted from the server to the client within a hidden field of an HTML form. The token will then be included as a request parameter when the form is submitted using POST method.&lt;/p&gt;

&lt;p&gt;To prevent the attacker manipulate the HTML document to capture its contents, the field containing the CSRF token should be inserted before any visible input fields or any locations where user-controllable data is embedded within the HTML. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-custom-request-header"&gt;
  &lt;/a&gt;
  #2 Custom Request Header
&lt;/h3&gt;

&lt;p&gt;On an initial visit, the web application sets a cookie which is scoped appropriately so that it should not be provided during cross-origin requests. The cookie typically contains a random token which may remain the same for up to the life of the web session.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Server-side: set an anti-CSRF cookie that JavaScript must send as an X header, which can't be done cross-origin
Set-Cookie: CSRFTOKEN=1df93e1eafa42012f9a8aff062eeb1db0380b; Path=/; Secure; SameSite=Strict
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JavaScript operating on the client side reads its value and copies it into a custom HTTP header sent with each transactional request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Client-side, have JavaScript add it as an X header to the XMLHttpRequest
var token = readCookie(CSRFTOKEN);                   // read the cookie
httpRequest.setRequestHeader('X-CSRF-Token', token); // add it as an X-CSRF-Token header
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On request, with this header, the server then validates presence and integrity of the token. &lt;/p&gt;

&lt;p&gt;The use of a custom request header is particularly used for AJAX or API endpoints. This defence relies on the same-origin policy (SOP) restriction that only JavaScript can be used to add a custom header, and only within its origin. By default, browsers do not allow JavaScript to make cross origin requests with custom headers, thereby protecting from an attacker performing CSRF attack from another origin. &lt;/p&gt;

&lt;p&gt;Note: The protection provided by this technique can be thwarted if the target website disables its same-origin policy. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#storing-csrf-token"&gt;
  &lt;/a&gt;
  Storing CSRF token
&lt;/h3&gt;

&lt;p&gt;Make sure that the CSRF token is not exposed any ways, not in server logs, in URL or in GET requests. It can be in hidden input fields, in javascript variable or anywhere in DOM.  &lt;/p&gt;

&lt;p&gt;A CSRF token can be also included in the &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag as shown below. All subsequent calls in the page can extract the CSRF token from this  tag.&lt;br&gt;
However, &lt;strong&gt;it is not recommended to store it in cookies or browser local storage&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The following code snippet can be used to include a CSRF token as a &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;meta name="csrf-token" content="{{ csrf_token() }}"&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The exact syntax of populating the content attribute would depend on your web application's backend programming language.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#defence-3-using-samesite-cookie-attribute"&gt;
  &lt;/a&gt;
  Defence #3 - Using SameSite Cookie Attribute
&lt;/h2&gt;

&lt;p&gt;By default, a browser automatically adds the last known cookies to requests regardless of where they originate. If an attacker steals the security token from your HTML forms, and installs it in their own malicious forms, they can launch a CSRF attack, with any security cookies the server previously set.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Set-Cookie: JSESSIONID=xxxxx; SameSite=Strict
Set-Cookie: JSESSIONID=xxxxx; SameSite=Lax
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The SameSite attribute can be used to control whether and how cookies are submitted in cross-site requests. Specifying a SameSite attribute &lt;code&gt;strict&lt;/code&gt;, when you set a cookie tells the browser to strip cookies on a request to your site when the request is coming from an external domain.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Strict&lt;/code&gt; value will prevent the cookie from being sent by the browser to the target site in all cross-site browsing context, even when following a regular link. Just imagine if you have login each time in Facebook when you return from seeing a video someone shared. The default &lt;code&gt;Lax&lt;/code&gt; value provides a reasonable balance between security and usability for websites that want to maintain user's logged-in session after the user arrives from an external link as it allows only GET requests from other sites to send cookies.&lt;/p&gt;

&lt;p&gt;As of now Chrome and other modern browsers has Same-site attribute set by default (Cookies without SameSite are treated as Lax by default, SameSite=None cookies without Secure are rejected.) &lt;a href="https://web.dev/samesite-cookies-explained/"&gt;Read more here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-defences"&gt;
  &lt;/a&gt;
  Other Defences
&lt;/h2&gt;

&lt;p&gt;There are various other defence techniques and one of them is by User interaction&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Re-Authentication - Authorization mechanism (password or stronger)&lt;/li&gt;
&lt;li&gt;One-time Token&lt;/li&gt;
&lt;li&gt;CAPTCHA (prefer newer CAPTCHA versions without user interaction or visual pattern matching)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To know more in depth about other defence techniques refer the &lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#introduction"&gt;Cross-Site Request Forgery Prevention Cheat Sheet&lt;/a&gt; where I have taken a lot of reference from for this blog post. &lt;/p&gt;

&lt;p&gt;Hope you have a better understanding about CSRF attacks now. Please share your comments if you have any feedback or suggestions. In the next post I intend to discuss about vulnerabilities in Authentication process. Stay tuned!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>security</category>
    </item>
    <item>
      <title>Instrumenting AMIs for GPU monitoring on CloudWatch</title>
      <author>Daniel Kneipp</author>
      <pubDate>Sun, 01 Aug 2021 21:12:30 +0000</pubDate>
      <link>https://dev.to/aws-builders/instrumenting-amis-for-gpu-monitoring-on-cloudwatch-105m</link>
      <guid>https://dev.to/aws-builders/instrumenting-amis-for-gpu-monitoring-on-cloudwatch-105m</guid>
      <description>&lt;p&gt;If you have used provisioned instances on AWS before, you know that the default metrics monitored are kind of limited. You only have access to CPU utilization, network transfer rates and disk reads/writes. By default, you don't have the monitoring of some basic information, like RAM and filesystem usage (which ca be a very valuable information to prevent an instance malfunction due to lack of resources).&lt;/p&gt;

&lt;p&gt;In case of GPU-accelerated applications (like Machine Learning apps), this problem goes even further, since you also don't have any access to GPU metrics, which is critical to guarantee the reliability of the system (e.g. the total GPU memory consumption can lead to the crash of any application running on the GPU).&lt;/p&gt;

&lt;p&gt;I've created a project (available &lt;a href="https://github.com/DanielKneipp/aws-ami-gpu-monitoring"&gt;here&lt;/a&gt;) showing how we can create an AMI with CloudWatch agent for RAM and filesystem monitoring, and a custom service called &lt;code&gt;gpumon&lt;/code&gt; to gather GPU metrics and send them to AWS CloudWatch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project structure
&lt;/h2&gt;

&lt;p&gt;In the project we have two main directories like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
‚îú‚îÄ‚îÄ packer  ==&amp;gt; AMI creation
‚îî‚îÄ‚îÄ tf      ==&amp;gt; AMI usage example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first one contains all the necessary files to create the the AMI based on Amazon Linux 2 using a tool called &lt;code&gt;packer&lt;/code&gt;. The second one has infrastructure as code in &lt;code&gt;terraform&lt;/code&gt; to provision an instance using the new created AMI for testing purposes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ami-creation"&gt;
  &lt;/a&gt;
  AMI creation
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;packer&lt;/code&gt; is a great tool to achieve Infrastructure as Code principles on AMI creation step. It has capabilities to provision an instance with the base AMI specified, run scripts through ssh, start the process of AMI creation, and clean everything up (e.g. instance, ebs volume, ssh key pair) afterwards.&lt;/p&gt;

&lt;p&gt;The file &lt;code&gt;packer/gpu.pkr.hcl&lt;/code&gt; contains the specification of the AMI. There we can find the base AMI, the instance used to create the AMI, the storage configuration, and the scripts used to configure the instance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#base-ami"&gt;
  &lt;/a&gt;
  Base AMI
&lt;/h3&gt;

&lt;p&gt;In order to make my life a bit easier, I tried to to look for AMIs that already have NVIDIA drivers installed, so that I don't have to install it my self. Looking through the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/install-nvidia-driver.html#preinstalled-nvidia-driver"&gt;AWS documentation about installing NVIDIA drivers&lt;/a&gt;, we can see that there are options already in the marketplace of AMIs with pre-shipped NVIDIA drivers. Among the options, we're going to use the &lt;a href="https://aws.amazon.com/marketplace/pp/prodview-64e4rx3h733ru?qid=1627738530182&amp;amp;sr=0-3&amp;amp;ref_=srh_res_product_title"&gt;Amazon Linux 2&lt;/a&gt;, because it already comes with the AWS Systems Manager agent, which se will use latter on.&lt;/p&gt;

&lt;p&gt;A couple of notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You don't need to subscribe to the marketplace product in order to have access to the AMI currently selected. However, you will need to subscribe to have access to the AMI id of new releases.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You will &lt;strong&gt;need a GPU-based instance&lt;/strong&gt; to build the AMI (as it's required by the marketplace product specifications). I've tested this project in a new AWS account and it seems that the default limits doesn't allow the provisioning og GPU-based instances (G family). &lt;code&gt;packer&lt;/code&gt; will show an error if that's your case as well. If it is, you can request a limit increase &lt;a href="http://aws.amazon.com/contact-us/ec2-request"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cloudwatch-agent"&gt;
  &lt;/a&gt;
  CloudWatch Agent
&lt;/h3&gt;

&lt;p&gt;The first addon that we're going to make to the base AMI is to install and configure the AWS CloudWatch Agent.&lt;/p&gt;

&lt;p&gt;The process of installation of the agent is well documented by AWS and you can see more details and methods of installation in other Linux distributions &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/install-CloudWatch-Agent-commandline-fleet.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The agent configuration is made by &lt;code&gt;.json&lt;/code&gt; file that the agent reads in order to know what metrics to monitor and how to publish them on ClodWatch. You can also see more about it on the &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Agent-Configuration-File-Details.html"&gt;documentation page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The process is automated by the script &lt;code&gt;packer/scripts/install-cloudwatch-agent.sh&lt;/code&gt;. It installs the agent and configure it with some relevant metrics like filesystem, RAM and swap usage.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that the agent is configured to publish metrics with a period of 60 seconds. This can incur &amp;gt; costs since it's considered and Detailed metric (go to &amp;gt; &lt;a href="https://aws.amazon.com/cloudwatch/pricing/"&gt;CloudWatch pricing page&lt;/a&gt; to know more).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#gathering-the-gpu-metrics"&gt;
  &lt;/a&gt;
  Gathering the GPU metrics
&lt;/h3&gt;

&lt;p&gt;AWS already have &lt;a href="https://docs.aws.amazon.com/dlami/latest/devguide/tutorial-gpu-monitoring.html"&gt;documentation&lt;/a&gt; talking about ways to monitor GPU usage. There is a &lt;a href="https://docs.aws.amazon.com/dlami/latest/devguide/tutorial-gpu-monitoring-gpumon.html"&gt;brief description&lt;/a&gt; about a tool called &lt;code&gt;gpumon&lt;/code&gt; and also a more extended &lt;a href="https://aws.amazon.com/blogs/machine-learning/monitoring-gpu-utilization-with-amazon-cloudwatch/"&gt;blog post&lt;/a&gt; about it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gpumon&lt;/code&gt; is a (kind of old) &lt;a href="https://s3.amazonaws.com/aws-bigdata-blog/artifacts/GPUMonitoring/gpumon.py"&gt;python script&lt;/a&gt; developed by AWS that makes use of a NVIDIA library called NVLM (NVIDIA Management Library) to gather metrics from the GPUs of the instance and publish them on CloudWatch. In this project the script was turned into a &lt;code&gt;systemd&lt;/code&gt; unit. The script itself was also modified to make the error handling more readable and to capture memory usage correctly.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;gpumon&lt;/code&gt; service resides in &lt;code&gt;packer/addons/gpumon&lt;/code&gt; and the &lt;code&gt;install-cloudwatch-gpumon.sh&lt;/code&gt; automates the installation process. The service is configured to start the python script at boot and restart it stops working for some reason. Since &lt;code&gt;systemd&lt;/code&gt; manages the service, its logs can be seen with &lt;code&gt;journalctl --unit gpumon&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: he python script has only be tested on python2, which &lt;a href="https://www.python.org/doc/sunset-python-2/"&gt;is deprecated&lt;/a&gt;. &amp;gt; &lt;code&gt;pip&lt;/code&gt; warns about that on the installation process while you create the AMI. You should &amp;gt; keep that in mind if you intend to use this script for any production workload.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#about-the-gpu-memory-usage-metric-gathering"&gt;
  &lt;/a&gt;
  About the GPU memory usage metric gathering
&lt;/h4&gt;

&lt;p&gt;The &lt;a href="https://s3.amazonaws.com/aws-bigdata-blog/artifacts/GPUMonitoring/gpumon.py"&gt;original script&lt;/a&gt; get the GPU memory usage from the &lt;code&gt;nvmlDeviceGetUtilizationRates()&lt;/code&gt; function. I noticed through some tests that this metric was 0 even though I had data loaded into the GPU.&lt;/p&gt;

&lt;p&gt;From the &lt;a href="https://docs.nvidia.com/deploy/nvml-api/group__nvmlDeviceQueries.html#group__nvmlDeviceQueries_1g540824faa6cef45500e0d1dc2f50b321"&gt;NVIDIA documentation&lt;/a&gt; this function actually &lt;a href="https://docs.nvidia.com/deploy/nvml-api/structnvmlUtilization__t.html#structnvmlUtilization__t"&gt;returns&lt;/a&gt; the amount of memory that is being read/written, which isn't what I wanted. In order to get the amount of GPU memory allocated, &lt;a href="https://docs.nvidia.com/deploy/nvml-api/group__nvmlDeviceQueries.html#group__nvmlDeviceQueries_1g2dfeb1db82aa1de91aa6edf941c85ca8"&gt;&lt;code&gt;nvmlDeviceGetMemoryInfo()&lt;/code&gt;&lt;/a&gt; should be used instead.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ami-usage-example"&gt;
  &lt;/a&gt;
  AMI Usage example
&lt;/h2&gt;

&lt;p&gt;As an example on how to use this AMI, there is also a terraform project that contains the necessary resources to provision an instance and monitor it using the CloudWatch interface.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;tf/main.tf&lt;/code&gt; is the root file containing the reference to the module &lt;code&gt;tf/module/monitored-gpu&lt;/code&gt;, which encapsulates the resources such as the instance and IAM permissions.&lt;/p&gt;

&lt;p&gt;This example doesn't required SSH capabilities from the instance. We will use AWS Systems Manager - Session Manager to access of the instance (the base AMI already comes with the SSM agent preinstalled). This method is better because the access is registered into AWS, allowing security auditions on the instance access. Also, there is no credentials nor keys stored in any machine to be leaked.&lt;/p&gt;

&lt;p&gt;The required AWS managed permissions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;CloudWatchAgentServerPolicy&lt;/code&gt;: allow the instance to publish CloudWatch metrics;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;AmazonSSMManagedInstanceCore&lt;/code&gt; instance access through Session Manager.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-run-it"&gt;
  &lt;/a&gt;
  How to run it
&lt;/h2&gt;

&lt;p&gt;All right, let's go to the fun part! To play with this project we first need to install some dependencies (&lt;code&gt;packer&lt;/code&gt; and &lt;code&gt;terraform&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;A really handy tool that you can use to install and manage multiple versions of tools is &lt;code&gt;asdf&lt;/code&gt;. It helps you keep track use different versions of a variety of tools. With it there is no need for you to uninstall the versions of the tools you may already have. With some simple commands it install the versions needed and make them context aware (the tolling version change automatically after entering in a directory that has a &lt;code&gt;.tool-versions&lt;/code&gt; specified).&lt;/p&gt;

&lt;p&gt;You can go to &lt;a href="https://asdf-vm.com/guide/getting-started.html"&gt;this link&lt;/a&gt; to install &lt;code&gt;asdf&lt;/code&gt;. After that you can simply run the following to have the correct versions of &lt;code&gt;packer&lt;/code&gt; and &lt;code&gt;terraform&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;asdf plugin-add terraform https://github.com/asdf-community/asdf-hashicorp.git
asdf plugin-add packer https://github.com/asdf-community/asdf-hashicorp.git

asdf install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, it's time to build the AMI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd packer
packer init
packer build .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will start the process of building the AMI in the &lt;code&gt;us-east-1&lt;/code&gt; region. You can follow the terminal to see what is happening and the logs of the scripts. You can also see the snapshot being taken accessing the AWS console:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjfsqafD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ubm33n7lcpfyo85zpfi8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjfsqafD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ubm33n7lcpfyo85zpfi8.png" alt="AMI page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And get a progress bar in the "Snapshots" page like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T1rcN9O---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqemiuthrh7qz3qx9qon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T1rcN9O---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqemiuthrh7qz3qx9qon.png" alt="EBS Snapshot page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The snapshot name tag will appear after the AMI has been created.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The AMI creation will be completed when you see something like this on your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
==&amp;gt; amazon-ebs.gpu: Terminating the source AWS instance...
==&amp;gt; amazon-ebs.gpu: Cleaning up any extra volumes...
==&amp;gt; amazon-ebs.gpu: No volumes to clean up, skipping
==&amp;gt; amazon-ebs.gpu: Deleting temporary security group...
==&amp;gt; amazon-ebs.gpu: Deleting temporary keypair...
Build 'amazon-ebs.gpu' finished after 9 minutes 38 seconds.

==&amp;gt; Wait completed after 9 minutes 38 seconds

==&amp;gt; Builds finished. The artifacts of successful builds are:
--&amp;gt; amazon-ebs.gpu: AMIs were created:
us-east-1: ami-09a9fd45137e9129e
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚úÖ At this point, you should have an AMI ready to be used!!&lt;/p&gt;

&lt;p&gt;Now it's time to test it! Grab the AMI id (&lt;code&gt;ami-09a9fd45137e9129e&lt;/code&gt; in this case) and paste it, replacing the text &lt;code&gt;"&amp;lt;your-ami-id&amp;gt;"&lt;/code&gt; in the &lt;code&gt;tf/main.tf&lt;/code&gt; file. After the modification, the section of the file that specifies the module should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="s2"&gt;"gpu_vm"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"./modules/monitored-gpu"&lt;/span&gt;

  &lt;span class="nx"&gt;ami&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"ami-09a9fd45137e9129e"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, just run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd tf
terraform init
terraform apply
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;terraform&lt;/code&gt; will ask you if you want to perform the actions specified. If, right before the prompt, it shows that it will create 6 resources, like it's being shown right below, you can type &lt;code&gt;yes&lt;/code&gt; to start the resource provisioning.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
Plan: 6 to add, 0 to change, 0 to destroy.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After a couple of minutes (roughly 5 minutes), go to the &lt;em&gt;All metrics&lt;/em&gt; page on CloudWatch. You should be able to see two new custom namespaces already: &lt;code&gt;CWAgent&lt;/code&gt; and &lt;code&gt;GPU&lt;/code&gt;. This is the newly created instance publishing its metrics in idle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pl2MGBWF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zftyatlcwrfqnj9h6kj5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pl2MGBWF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zftyatlcwrfqnj9h6kj5.png" alt="CW main interface"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see more details about RAM and swap, for example, using the &lt;code&gt;CWAgent&lt;/code&gt; namespace, like the next figure shows. With that you can monitor the boot behavior of the AMI, assess its performance and verify if it's behaving as expected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qIY3xpI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5azcrr02cca54px3vuku.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qIY3xpI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5azcrr02cca54px3vuku.png" alt="CW metrics"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The swap usage is 0 because there is no swap configured in this AMI (you can follow &lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/ec2-memory-swap-file/"&gt;this documentation&lt;/a&gt; in order to add it). The spike of RAM usage you see is a test that I was making üòÖ.&lt;/p&gt;

&lt;p&gt;Now, let's use this hardware a bit to see the metrics moving. Go to the &lt;em&gt;Instances&lt;/em&gt; tab on the EC2 page, like shown in the next figure. Right-click in the running instance and hit connect.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bGZ7ZUGK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vassimnj4wxsmcc472ua.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bGZ7ZUGK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vassimnj4wxsmcc472ua.png" alt="SSM connect 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, go to the &lt;em&gt;Session Manager&lt;/em&gt; tab and hit &lt;em&gt;Connect&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BX2VELkU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjkhgb83dtq0xv0sf775.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BX2VELkU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjkhgb83dtq0xv0sf775.png" alt="SSM connect 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should now have a shell access through your browser. Running the commands below will clone and build an utility to stress-test the GPU for 5 minutes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo -s
yum install -y git

cd ~
git clone https://github.com/wilicc/gpu-burn.git
make CUDAPATH=/opt/nvidia/cuda

./gpu_burn 600
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can look at CLodWatch to see the impact of the resource usage while &lt;code&gt;gpu-burn&lt;/code&gt; does its thing, as shown in the figure below.&lt;/p&gt;

&lt;p&gt;With these metrics, now it's easy to create alarms to alert you when an anomaly is detected on the resource usage, or create autoscaling capabilities for a cluster using custom metrics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M46E1bod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkspyq8uaepwzk07q0bo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M46E1bod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkspyq8uaepwzk07q0bo.png" alt="GPU stress test"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clean-up"&gt;
  &lt;/a&gt;
  Clean up
&lt;/h2&gt;

&lt;p&gt;To finish the party and turn off the lights, just:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;run &lt;code&gt;terraform destroy&lt;/code&gt; while at the &lt;code&gt;tf/&lt;/code&gt; directory;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;deregister ami;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zv8IUinn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q9bghbgaxjwfucv23fm4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zv8IUinn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q9bghbgaxjwfucv23fm4.png" alt="Deregister AMI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;and delete the EBS snapshot.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r2BVfqId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzrd8oudreiofyysl6mp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r2BVfqId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzrd8oudreiofyysl6mp.png" alt="Delete snapshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you, guys! comments and feedback are much appreciated. &lt;/p&gt;

&lt;p&gt;Feel free to reach out to me on &lt;a href="https://www.linkedin.com/in/daniel-kneipp/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://github.com/DanielKneipp"&gt;Github&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>aws</category>
      <category>machinelearning</category>
      <category>cloud</category>
    </item>
    <item>
      <title>JavaScript: Concept of  Promise</title>
      <author>Swarnali Roy</author>
      <pubDate>Sun, 01 Aug 2021 20:42:44 +0000</pubDate>
      <link>https://dev.to/swarnaliroy94/javascript-concept-of-promise-3ijb</link>
      <guid>https://dev.to/swarnaliroy94/javascript-concept-of-promise-3ijb</guid>
      <description>&lt;p&gt;Dear readers, this post is about a very useful and important concept of &lt;em&gt;JavaScript&lt;/em&gt;. I think every beginner should have this basic knowledge while developing any project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-promise"&gt;
  &lt;/a&gt;
  What is a Promise
&lt;/h3&gt;

&lt;p&gt;In JavaScript, &lt;code&gt;Promise&lt;/code&gt; is a very important concept.The &lt;em&gt;Promise&lt;/em&gt; object represents the eventual &lt;code&gt;completion&lt;/code&gt; or &lt;code&gt;failure&lt;/code&gt; of an &lt;em&gt;asynchronous operation&lt;/em&gt; and its &lt;em&gt;resulting value&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;üëâüèª A &lt;em&gt;Promise&lt;/em&gt; is a proxy with an &lt;em&gt;unknown value&lt;/em&gt; whenever a Promise is generated. &lt;br&gt;
üëâüèª This allows the controller to connect with the final &lt;em&gt;success value&lt;/em&gt; or reason for &lt;em&gt;failure&lt;/em&gt; of the asynchronous operation.&lt;br&gt;
üëâüèª This allows &lt;em&gt;asynchronous methods&lt;/em&gt; to return the same values ‚Äã‚Äãas &lt;em&gt;synchronous methods&lt;/em&gt;. &lt;br&gt;
üëâüèªInstead of returning the final value &lt;em&gt;immediately&lt;/em&gt;, the asynchronous method returns a promise to provide the value at a particular point in the &lt;em&gt;future&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#basic-syntax"&gt;
  &lt;/a&gt;
  Basic Syntax
&lt;/h3&gt;

&lt;p&gt;Promise is a &lt;em&gt;constructor function&lt;/em&gt;, so we need a &lt;code&gt;new&lt;/code&gt; to create a Promise. It takes a &lt;em&gt;function&lt;/em&gt;, as it's &lt;em&gt;argument&lt;/em&gt;, with &lt;em&gt;two parameters&lt;/em&gt;: &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt;. &lt;br&gt;
The &lt;em&gt;syntax&lt;/em&gt; generally looks like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const myPromise = new Promise((resolve, reject) =&amp;gt; { } ) ;&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#states-of-a-promise"&gt;
  &lt;/a&gt;
  States of a Promise
&lt;/h3&gt;

&lt;p&gt;A promise has &lt;em&gt;three&lt;/em&gt; states:&lt;/p&gt;

&lt;p&gt;i) &lt;code&gt;pending&lt;/code&gt;: It's the initial state, neither &lt;em&gt;successful&lt;/em&gt; nor &lt;em&gt;unsuccessful&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;ii) &lt;code&gt;fulfilled&lt;/code&gt;: It means that the operation was &lt;em&gt;completed successfully&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;iii) &lt;code&gt;rejected&lt;/code&gt;: It indicates that the operation has &lt;em&gt;failed&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#resolve-parameter"&gt;
  &lt;/a&gt;
  Resolve Parameter
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;resolve&lt;/code&gt; parameter is used when we want the promise to succeed. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#reject-parameter"&gt;
  &lt;/a&gt;
  Reject Parameter
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;reject&lt;/code&gt; is used when we want to catch the failure.&lt;/p&gt;

&lt;p&gt;The following is an &lt;em&gt;example&lt;/em&gt; of a &lt;em&gt;Promise&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const makeServerRequest = new Promise((resolve, reject1) =&amp;gt; {
  let responseFromServer;

  if (responseFromServer) {
    resolve("We got the Data");
  } else {
    reject("Data not Found");
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code snippet, &lt;em&gt;responseFromServer&lt;/em&gt; represents a response from the server.&lt;/p&gt;

&lt;p&gt;If &lt;em&gt;responseFromServer&lt;/em&gt; is &lt;em&gt;true&lt;/em&gt;, the &lt;code&gt;resolve&lt;/code&gt; method will be called to &lt;em&gt;successfully complete&lt;/em&gt; the promise and return the string as it's argument. &lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#generally-it-returns-data"&gt;
  &lt;/a&gt;
  (Generally, it returns data)
&lt;/h6&gt;

&lt;p&gt;Again, if &lt;em&gt;responseFromServer&lt;/em&gt; is &lt;em&gt;false&lt;/em&gt;, the promise will fail and call the &lt;code&gt;reject&lt;/code&gt; method.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#generally-it-catches-the-errors"&gt;
  &lt;/a&gt;
  (Generally it catches the errors).
&lt;/h6&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Website design ‚Äì how to start?</title>
      <author>shubham rathod</author>
      <pubDate>Sun, 01 Aug 2021 20:19:36 +0000</pubDate>
      <link>https://dev.to/shubhamrathod1/website-design-how-to-start-9fp</link>
      <guid>https://dev.to/shubhamrathod1/website-design-how-to-start-9fp</guid>
      <description>&lt;p&gt;Designing a website starts with defining the role the website is meant to serve, or its purpose.&lt;/p&gt;

&lt;p&gt;You‚Äôre guessing right ‚Äì there are different types of websites that are used for different purposes. The three most popular ones are: landing pages, one-pages and classic websites. Obviously, there are also large sites (portals and the like), but that‚Äôs a completely different topic.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-purpose-of-your-website-this-is-where-web-design-begins"&gt;
  &lt;/a&gt;
  What is the purpose of your website ‚Äì this is where web design begins.
&lt;/h3&gt;

&lt;p&gt;You need to know what purpose your website is meant to have. That way the website you‚Äôre designing will be understandable to the users.&lt;/p&gt;

&lt;p&gt;If you run a business of some sort, the user needs to know right from the start what you have to offer.&lt;/p&gt;

&lt;p&gt;For example ‚Äì you own a car repair garage. The user needs to know they have entered a repair garage‚Äôs website and that they can use specific services.&lt;/p&gt;

&lt;p&gt;The purpose of such website is to inform about those services, and thus ‚Äì to gain new clients&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-design-define-your-audience"&gt;
  &lt;/a&gt;
  Web design ‚Äì define your audience.
&lt;/h3&gt;

&lt;p&gt;It‚Äôs not like your website is going to be viewed by search engine robots only ;). That‚Äôs why you need to think about who will be (and already is) the audience of your website.&lt;/p&gt;

&lt;p&gt;After all, they‚Äôre the ones you want to reach, aren‚Äôt they?&lt;/p&gt;

&lt;p&gt;Defining the audience of a website is directly related to the purpose of your website. They‚Äôre the ones to fulfill that purpose, after all.&lt;/p&gt;

&lt;p&gt;Web design defines such profiling as ‚Äúpersona creation‚Äù.&lt;/p&gt;

&lt;p&gt;Which means you need to think about what exactly the users are going to want from your website and who exactly they are going to be.&lt;/p&gt;

&lt;p&gt;You certainly have some profile of your website‚Äôs user in your head. You need to think about what exactly they need, what their preferences are, why they ended up on your website and what they should find on it for you to reach your goal.&lt;/p&gt;

&lt;p&gt;For example, a perfect user of a car repair garage‚Äôs website will be someone who needs to have their car repaired.&lt;/p&gt;

&lt;p&gt;They want to know what kind of services the garage offers, where it is located, what its operating hours are and how to contact it. That‚Äôs the kind of information they are going to be looking for on the website.&lt;/p&gt;

&lt;p&gt;Your job is to put it in a visible place.&lt;/p&gt;

&lt;p&gt;In other words: creating personae will let you better tailor your website to the needs of your users.&lt;/p&gt;

&lt;p&gt;Remember ‚Äì (good) web design is closely related to addressing the needs of specific personae. Which means your perfect users. Once you define your audience, it will be easier for you to define what the user wants to find on your website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#paper-and-pencil-make-web-design-easier"&gt;
  &lt;/a&gt;
  Paper and pencil ‚Äì make web design easier.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bGmy3BhO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p39ws4rzlxx25eir5v8w.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bGmy3BhO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p39ws4rzlxx25eir5v8w.jpg" alt="website sketch image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It‚Äôs always nice to draw something. Especially if you have no idea on how to get to designing a website in terms of visuals, just remember: it‚Äôs always worth it to get inspired, which makes it a good idea to go through a few websites that you think are nice and draw some conclusions. That‚Äôs why it‚Äôs better to start designing a website with a piece of paper.&lt;/p&gt;

&lt;p&gt;Once you have the elements that should be featured on it, you can expand it onto subsequent subpages. Make one sheet of paper for each individual subpage.&lt;/p&gt;

&lt;p&gt;Place subsequent elements on each ‚Äúsubpage‚Äù (make sure to maintain the order of priority). You don‚Äôt have to be afraid to cross things out.&lt;/p&gt;

</description>
      <category>webdesign</category>
      <category>typesofwebdesign</category>
    </item>
    <item>
      <title>GraphQL and FastAPI Combination</title>
      <author>Bek Brace</author>
      <pubDate>Sun, 01 Aug 2021 20:08:07 +0000</pubDate>
      <link>https://dev.to/bekbrace/graphql-and-fastapi-combination-1c37</link>
      <guid>https://dev.to/bekbrace/graphql-and-fastapi-combination-1c37</guid>
      <description>&lt;p&gt;GraphQL is an abbreviation for Graph Query Language.&lt;br&gt;
So it's a Query Language for reading data from API. &lt;br&gt;
Unlike most query languages (such as SQL), you don‚Äôt use GraphQL to query a particular type of data store (such as a PostgreSQL database for example). &lt;br&gt;
Instead, you use GraphQL to query data from any number of different sources.&lt;/p&gt;

&lt;p&gt;So, to make things clearer , in traditional REST API, you consume apis using REST and we have done that so many times with Flask, Django and FastAPI by sending different HTTP request methods like GET, POST, PUT , and DELETE to the API using path or URLS &lt;/p&gt;

&lt;p&gt;Now the problem with HTTP requests is that when the request is received from the front-end user, &lt;br&gt;
the API responds with everything it has, a full payload that contains data that might not be useful to you as a developer&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2_puWfTK8bQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The other problem is the opposite, which means that you might want to fetch multiple data or get multiple resources simultaneously, and this is not possible, because there is no enough data per HTTP request.  &lt;/p&gt;

&lt;p&gt;And there comes the power of GraphQL&lt;br&gt;
GRAPHQL solved this problem by improving upon the idea of receiving a bulk of unnecessary data or fetching less than expected,  so instead of these request URLS or many endpoints for HTTP methods; graphql has a single entry point; ( slid 2 of code) so you can query data now very easily by specifying what type of data exactly you're looking for, and the response you'll get will exactly match your query, in JSON format of course.&lt;/p&gt;

&lt;p&gt;The way this works is by start defining  a schema with objects using type keyword, and a type can have multiple fields like an id, and if you want to make it non-nullable then add the exclamation mark after [ Analogist to NOT NULL in SQL ], you can also add integers, strings and boolean values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Author {
    id:ID!
    age: 56
    genre: "horror"
    american: True
    books: [Books]
    symbol: ‚úçÔ∏è
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can also create relationship with another type, so an author can have many books , which we can represent by wrapping the type in bracket , and on the other side, the books belong to an author&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Books{
    language: String!
    number: int
    author: Author
        symbol: üìö
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#graphql-and-fastapi"&gt;
  &lt;/a&gt;
  GraphQL and FastAPI
&lt;/h1&gt;

&lt;p&gt;Now, we are going to use GraphQL to fetch data from FASTAPI, and we could use something like Strawbery or Ariadne, but Starlette, and when I say Starlette, I implicitly mean FastAPI, so Starlette includes optional support for GraphQL, using the graphene library.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install fastAPI  : pip install fastapi&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Install Graphene : pip install "graphene&amp;gt;=2.0"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://graphene-python.org"&gt;https://graphene-python.org&lt;/a&gt;&lt;br&gt;
Graphene is a library for building GraphQL APIs in Python easily, so it's a Server library, and its main goal is to provide a simple but extendable API for making developers' lives easier.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import graphene
from fastapi import FastAPI
from starlette.graphql import GraphQLApp

class Query(graphene.ObjectType):
    hello = graphene.String(name=graphene.String(default_value=", world üåé !"))

    def resolve_hello(self, info, name):
        return "Hello " + name

app = FastAPI()
app.add_route("/", GraphQLApp(schema=graphene.Schema(query=Query)))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Here we are using .add_route, that is the way to add a route in Starlette (inherited by FastAPI) without declaring the specific operation (as would be with .get(), .post(), etc).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Run the file : uvicorn main:app --reload&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Now we will load up the page in the browser, we will be served the GraphiQL tool, which you can use to interact with  GraphQL API&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/BekBrace"&gt;
        BekBrace
      &lt;/a&gt; / &lt;a href="https://github.com/BekBrace/GraphQL-FastAPI-Code"&gt;
        GraphQL-FastAPI-Code
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This is an introduction to GraphQL, and how to combine FastAPI code with GraphQL to run queries and receive data in GraphiQL Tool
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>graphql</category>
      <category>python</category>
      <category>programming</category>
      <category>database</category>
    </item>
    <item>
      <title>Kotlin monthly wrap-up: July 2021</title>
      <author>Jean-Michel Fayard üá´üá∑üá©üá™üá¨üáßüá™üá∏üá®üá¥</author>
      <pubDate>Sun, 01 Aug 2021 19:12:43 +0000</pubDate>
      <link>https://dev.to/jmfayard/kotlin-monthly-wrap-up-july-2021-53l9</link>
      <guid>https://dev.to/jmfayard/kotlin-monthly-wrap-up-july-2021-53l9</guid>
      <description>&lt;p&gt;Hi, I'm Jean-Michel, a Kotlin fan like you! At the end of each month, I'll be showcasing some great posts, projects and insights from the Kotlin community, right here on DEV.to.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__234"&gt;
  
    .ltag__tag__id__234 .follow-action-button{
      background-color: #1b1865 !important;
      color: #fdc791 !important;
      border-color: #1b1865 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/kotlin" class="ltag__tag__link"&gt;kotlin&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Among the popular articles of the months, here are those I've read and can recommend:&lt;/p&gt;




&lt;p&gt;How to get started with Android App Development? Rohit Kumar provides beginners with a roadmap of what to learn. Spoiler alert: there is a lot!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/rohitk570" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--46bzOWvf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ZJpAQ_UY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/644632/af4c3bd6-8ece-4383-a417-7f1fc3eaa7c1.jpg" alt="rohitk570"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rohitk570/what-to-learn-to-get-started-with-android-app-development-19il" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What to Learn to get started with Android App Development?&lt;/h2&gt;
      &lt;h3&gt;ROHIT KUMAR „Éª Jul 12 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#android&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#kotlin&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Next, there is my article who encourages you to write command-line tools to automate your workflow, but to make sure you use your favorite programming language, not Bash! Be sure to check my starter project for CLI tools in Kotlin multiplatform.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jmfayard" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NjlhV-kq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--oLH1L0EP--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/17066/64e291f5-65fd-452a-88d9-a2f0c071f807.jpg" alt="jmfayard"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jmfayard/how-to-write-a-command-line-tool-with-kotlin-multiplatform-45g2" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Write a Command-Line Tool with Kotlin Multiplatform&lt;/h2&gt;
      &lt;h3&gt;Jean-Michel Fayard üá´üá∑üá©üá™üá¨üáßüá™üá∏üá®üá¥ „Éª Jul 13 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#kotlin&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Lists are the bread and butter of programming with Kotlin. Do you think you master them? &lt;a href="https://dev.to/sebastianaigner"&gt;Sebastian Aigner&lt;/a&gt; comes back with an article and YouTube episode to explore what you may not know yet.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kotlin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rcPUWxAI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--UV4Pzb-m--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2485/80d41bc3-7f05-444c-a32e-ceb190e486b1.png" alt="Kotlin"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kSTlWat0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--6FQVzg70--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/26006/58280da5-1e32-4986-be77-79297aaf1175.jpg" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kotlin/exploring-kotlin-lists-in-2021-2gi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Exploring Kotlin Lists in 2021&lt;/h2&gt;
      &lt;h3&gt;Sebastian Aigner for Kotlin „Éª Jul 8 „Éª 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#kotlin&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#android&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Finally, Christy Jacob presents what's new in Appwrite, an ambitious open-source alternative to Firebase in active development. That includes a Kotlin SDK both for Android and for server-side.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/appwrite" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W4bSIRV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7eMrR0VE--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2225/eb541cf9-84f4-4101-987c-c219cd4b34fc.png" alt="Appwrite"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TRLcIz2t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XAe6V72F--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/119691/5be2bcad-e1ee-4ef8-928b-d71f4e355af6.png" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/appwrite/announcing-appwrite-0-9-the-open-source-firebase-alternative-53ho" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Announcing Appwrite 0.9: The open source Firebase alternative &lt;/h2&gt;
      &lt;h3&gt;Christy Jacob for Appwrite „Éª Jul 7 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#flutter&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#android&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#kotlin&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;That's all for this month!&lt;/p&gt;

&lt;p&gt;Remember to follow the Kotlin tag&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__234"&gt;
  
    .ltag__tag__id__234 .follow-action-button{
      background-color: #1b1865 !important;
      color: #fdc791 !important;
      border-color: #1b1865 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/kotlin" class="ltag__tag__link"&gt;kotlin&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;If you want to contact me, there is a standing invitation at &lt;a href="https://jmfayard.dev/contact/"&gt;https://jmfayard.dev/contact/&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>android</category>
      <category>bestofdev</category>
      <category>icymi</category>
    </item>
  </channel>
</rss>
