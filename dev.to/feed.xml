<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Planning your next Software Project</title>
      <author>Menard Maranan</author>
      <pubDate>Mon, 14 Jun 2021 10:16:39 +0000</pubDate>
      <link>https://dev.to/menard_codes/planning-your-next-software-project-37d3</link>
      <guid>https://dev.to/menard_codes/planning-your-next-software-project-37d3</guid>
      <description>&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;em&gt;I'm currently studying software development and Agile, and this blog is a journal of what I just learned about Planning a software product. If you found something is not quite right, please let me know, I love learning from people!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Maybe you once got an idea about a software that you're excited about, but during development phase, you noticed how entangled your project became, and it's hard to keep track of things or even see your progress.&lt;/p&gt;

&lt;p&gt;Or maybe you're like me who always wants to jump right into code once an idea pops up into our head.&lt;/p&gt;

&lt;p&gt;Here is when a good planning; and maybe some research; comes in.&lt;/p&gt;

&lt;p&gt;So how do we start planning?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-simple"&gt;
  &lt;/a&gt;
  Start simple
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0suc-Oio--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3hxv2db3e2b1frcqokj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0suc-Oio--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3hxv2db3e2b1frcqokj.jpg" alt="Start simple"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're familiar about &lt;a href="https://dev.to/menard_codes/a-quick-guide-about-scrum-5485"&gt;"Scrum"&lt;/a&gt;, we know that we don't plan our software too specific at start, but instead, we list down the high-level requirements of features of our project (under the product backlog).&lt;/p&gt;

&lt;p&gt;This might be login and sign up, dashboard, account settings, etc.&lt;/p&gt;

&lt;p&gt;From there, we plan our sprint with a duration of 1-4 weeks where we take a requirement from the product backlog, breaks it down further into smaller chunks of todos, and aims to achieve the goal to finish the todos under sprint backlog after the current sprint.&lt;/p&gt;

&lt;p&gt;After each and every sprint, we get an increment, or a &lt;em&gt;'potentially shippable'&lt;/em&gt; product.&lt;/p&gt;

&lt;p&gt;Through this, we can plan out and develop the software quickly without wasting too much time (or even release it to the market prematurely, depending on the product and requirements, or the product owner).&lt;/p&gt;

&lt;p&gt;With an agile mindset, we don't need to plan out everything from start, but instead, we start simple, plan simple, and build incrementally the product.&lt;/p&gt;

&lt;p&gt;And that's the philosophy of Agile.&lt;/p&gt;

&lt;p&gt;We can dive deeper on an issue further down the road or even find an edge case or opportunity that we haven't thought of during planning.&lt;/p&gt;

&lt;p&gt;So start small, have a list of rough ideas or features of your project, take one, break it further down, and dedicate a timeline for your next sprint to develop that feature, then continuously repeat the process. From that, we can build incrementally our software from idea to real world product (perhaps even sell or make money from it!).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-mvp"&gt;
  &lt;/a&gt;
  The MVP
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9kKyMN1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydbb2bl5uawqokexnzut.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9kKyMN1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydbb2bl5uawqokexnzut.jpg" alt="Minimum Viable Product"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MVP or Minimum Viable Product is a very common word in the startup world.&lt;/p&gt;

&lt;p&gt;The idea is you build the core features of your product that can at least represent your idea or solution that is useful to your target market.&lt;/p&gt;

&lt;p&gt;Just for an example, let's say you're planning to build a car. Since it's expensive, complicated, and hard to build, you can start simple and build a skateboard instead. This very minimal product can represent in some way your vision of a vehicle. Not to mention that it's easier and cheaper to build than a car. The best part is that people can even start using it and you can even start selling it to them. From then on, you can incrementally improve and add features to your product, maybe turn it into a scooter, then to a bike, into a motorcycle, and once you had more experience (and hopefully some cash from previous sales) the car.&lt;/p&gt;

&lt;p&gt;So start small, it's better to start somewhere and simpler, than too complex and never shipped to market at all.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#product-or-project-roadmap"&gt;
  &lt;/a&gt;
  Product (or project) Roadmap
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jw9kadd3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4x5v1omieseuhp29lg5s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jw9kadd3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4x5v1omieseuhp29lg5s.jpg" alt="Product Roadmap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is very common to development teams, more often planned by a product manager.&lt;/p&gt;

&lt;p&gt;The product roadmap is a nice visual representation or guide of how you plan to develop the software overtime.&lt;/p&gt;

&lt;p&gt;You specify some todos and align them over a period of time or sprints.&lt;/p&gt;

&lt;p&gt;Since we're doing things the agile way, our deadlines may also be a rough estimate and change depending on the situation or requirements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#product-or-project-requirements"&gt;
  &lt;/a&gt;
  Product (or project) requirements
&lt;/h2&gt;

&lt;p&gt;The product requirements further analyzes the product or feature/s, how it aligns with the vision of the business or the product, and some other metrics such as customer's problems, KPI, etc.&lt;/p&gt;

&lt;p&gt;From this, we understand more about what we are building, gain insight from it (such as whether it's still ideal to produce or not), or maybe we find possible pitfalls, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backlog"&gt;
  &lt;/a&gt;
  Backlog
&lt;/h2&gt;

&lt;p&gt;And here comes the list of the things the team needs to do.&lt;/p&gt;

&lt;p&gt;On Scrum, we start from a Product backlog, which lists down the higher level requirements of our software.&lt;/p&gt;

&lt;p&gt;The other one is Sprint backlog, which are more specific requirements and serves as source for the todo column of the Scrum or Kanban board for the next sprint.&lt;/p&gt;

&lt;p&gt;This serves as our guide on what to build, and helps us boost our performance as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;Building our next software project can be easier if we plan things out before we start, because a good planning will save us tons of frustrations about the complexity of our project, and also gives us a clear picture of our progress.&lt;/p&gt;

&lt;p&gt;Also, we don't need to start complex. It is ideal that we begin simple and small, then gradually build it from the ground up.&lt;/p&gt;

&lt;p&gt;It will be even better if we can sell our software project or make it as a side business (another stream of income can be very rewarding, isn't it?).&lt;/p&gt;

&lt;p&gt;Hopefully this helps, and goodluck for your next project!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-link"&gt;
  &lt;/a&gt;
  My link
&lt;/h2&gt;

&lt;p&gt;Follow me on &lt;a href="//twitter.com/menard_codes"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>devjournal</category>
      <category>productivity</category>
      <category>softwareplanning</category>
      <category>softwaredevelopment</category>
    </item>
    <item>
      <title>Easy Accessible Click Handlers</title>
      <author>Andreas Riedm√ºller</author>
      <pubDate>Mon, 14 Jun 2021 10:01:29 +0000</pubDate>
      <link>https://dev.to/receter/easy-accessible-click-handlers-4jkb</link>
      <guid>https://dev.to/receter/easy-accessible-click-handlers-4jkb</guid>
      <description>&lt;p&gt;If you add a click event to a non-interactive html element such as a &lt;code&gt;div&lt;/code&gt; you should also add keyboard support. For interactive elements like a &lt;code&gt;button&lt;/code&gt; this is already taken care of by the browser.&lt;/p&gt;

&lt;p&gt;If you use &lt;code&gt;eslint-plugin-jsx-a11y&lt;/code&gt; you will see this warning when you add an &lt;code&gt;onClick&lt;/code&gt; event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;71:13  warning  Visible, non-interactive elements with click handlers must have at least one keyboard listener jsx-a11y/click-events-have-key-events
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get rid of this warning, my default approach is to add an additional handler for &lt;code&gt;onKeyDown&lt;/code&gt;, filter for the enter key and trigger the same event as I have for &lt;code&gt;onClick&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Additionally I add the &lt;code&gt;role&lt;/code&gt; and &lt;code&gt;tabIndex&lt;/code&gt; attributes as recommended.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setWhatever&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleKeyDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyCode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
  &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;tabIndex&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleKeyDown&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In comparison to a button this adds quite lot of code and markup and makes simple components often look more complex than they really are:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setWhatever&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To avoid this, you can add a simple helper function that returns all required attributes, I called mine &lt;code&gt;accessibleOnClick&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;filterKeyEnter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyCode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;accessibleOnClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;tabIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;tabIndex&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;filterKeyEnter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In your JSX you can now use the spread opperator to add all attributes returned by &lt;code&gt;accessibleOnClick&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setWhatever&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;accessibleOnClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is one of my favorite helper functions and I use it on a regular basis.&lt;/p&gt;

&lt;p&gt;Do you have a similar/different approach for this type of click handlers? Let me know!&lt;/p&gt;

</description>
      <category>react</category>
      <category>jsx</category>
      <category>javascript</category>
      <category>a11y</category>
    </item>
    <item>
      <title>15+ Fantastic React UI Libraries to Consider for your Project</title>
      <author>Kingsley Ubah</author>
      <pubDate>Mon, 14 Jun 2021 09:46:13 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/15-fantastic-react-ui-libraries-to-consider-for-your-project-3iio</link>
      <guid>https://dev.to/ubahthebuilder/15-fantastic-react-ui-libraries-to-consider-for-your-project-3iio</guid>
      <description>&lt;p&gt;React is a very popular JavaScript library for building User Interfaces. Using React makes the process of building UIs very simple but you know what makes the process even easier? Using an already-made library.&lt;/p&gt;

&lt;p&gt;Here are over &lt;strong&gt;15&lt;/strong&gt; popular React libraries you might want to consider using for your project:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#blueprint"&gt;
  &lt;/a&gt;
  Blueprint
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xjPsSv3f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656423092/1xbNw3d_i.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xjPsSv3f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656423092/1xbNw3d_i.jpeg" alt="Screenshot_20210614-072835.jpg"&gt;&lt;/a&gt;&lt;br&gt;
Blueprint is a React UI toolkit used to create and manage data-intensive user Interfaces for desktop applications &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/palantir/blueprint"&gt;https://github.com/palantir/blueprint&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chakra-ui"&gt;
  &lt;/a&gt;
  Chakra UI
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oGGj8xVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656457900/EOeRgFKm0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oGGj8xVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656457900/EOeRgFKm0.jpeg" alt="Screenshot_20210614-080601.jpg"&gt;&lt;/a&gt;&lt;br&gt;
Chakra UI is a React library which offers you simple, modular and accessible components which you can use as building blocks you need to build your React applications. All components are also dark mode compatible.&lt;/p&gt;

&lt;p&gt;Instead of spending hours to code and reinvent the wheel, you can easily use Chakra's components to build your app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/chakra-ui/chakra-ui"&gt;https://github.com/chakra-ui/chakra-ui&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#search-ui"&gt;
  &lt;/a&gt;
  Search UI
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f269LAI---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656499122/cfl1ZJkxF.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f269LAI---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656499122/cfl1ZJkxF.jpeg" alt="Screenshot_20210614-080749.jpg"&gt;&lt;/a&gt;&lt;br&gt;
Every content-based websites need some sort of search functionality for retrieving certain parts of content.&lt;/p&gt;

&lt;p&gt;Search UI is a React-based search framework for implementing world-class search functionality without having to code from scratch or reinvent the wheel.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/elastic/search-ui"&gt;https://github.com/elastic/search-ui&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ant-design"&gt;
  &lt;/a&gt;
  Ant Design
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A2DZ68s2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656527250/cz0WvaN4f.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A2DZ68s2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656527250/cz0WvaN4f.jpeg" alt="Screenshot_20210614-081156.jpg"&gt;&lt;/a&gt;&lt;br&gt;
Ant Design is an enterprise-grade React UI framework containing a set of tools for creating beautiful and Intuitive User Interfaces for your web application.&lt;/p&gt;

&lt;p&gt;Ant Design is a great choice for building websites targeted for high-end clienteles.&lt;br&gt;
&lt;a href="https://github.com/ant-design/ant-design"&gt;https://github.com/ant-design/ant-design&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#material-ui"&gt;
  &lt;/a&gt;
  Material UI
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9B58xj1w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656557175/OdTnCL2Xq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9B58xj1w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656557175/OdTnCL2Xq.jpeg" alt="Screenshot_20210614-081301.jpg"&gt;&lt;/a&gt;&lt;br&gt;
The Material Design is an modern design language created by Google, which aid web designers create novel touch experiences in their websites via cue-rich features and natural motions that mimic real-world objects/materials in an immersive form.&lt;/p&gt;

&lt;p&gt;Material UI includes a set of React components for faster and easier process of web design. You can either build your own custom design system or start with the Material Design.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mui-org/material-ui"&gt;https://github.com/mui-org/material-ui&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reactstrap"&gt;
  &lt;/a&gt;
  Reactstrap
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GdStGLTU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656587494/X7Y51Cgqd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GdStGLTU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656587494/X7Y51Cgqd.jpeg" alt="Screenshot_20210614-081420.jpg"&gt;&lt;/a&gt;&lt;br&gt;
Reactstrap is a React-Bootstrap component library. It provides inbuilt Bootstrap components that make it very  easy to create User Interfaces with its self-contained components that provides flexibility and inbuilt validations. Reactstrap is similar to Bootstrap, but with self-contained components. Hence, it's easy to use and support Bootstrap 4.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/reactstrap/reactstrap"&gt;https://github.com/reactstrap/reactstrap&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#smooth-ui"&gt;
  &lt;/a&gt;
  Smooth UI
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5wozbPuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656615239/enHWXcdRMy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5wozbPuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656615239/enHWXcdRMy.jpeg" alt="Screenshot_20210614-081533.jpg"&gt;&lt;/a&gt;&lt;br&gt;
As it's name implies, this library is focused on user experience and accessibility. Smooth UI makes it is easy to design beautiful websites and applications with clean and smooth features to make for a satisfactory experience for the end user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://smooth-ui.smooth-code.com/"&gt;https://smooth-ui.smooth-code.com/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-datepicker"&gt;
  &lt;/a&gt;
  React DatePicker
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5v3J-68a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656656191/aVxrlQ0R_l.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5v3J-68a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656656191/aVxrlQ0R_l.jpeg" alt="Screenshot_20210614-081635.jpg"&gt;&lt;/a&gt;&lt;br&gt;
Something for event-based websites. &lt;br&gt;
React DatePicker is a simple, reusable and highly customizable React Component that allows you include date selection functionality to your websites.&lt;/p&gt;

&lt;p&gt;It's very easy to use as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://reactdatepicker.com/"&gt;https://reactdatepicker.com/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-select"&gt;
  &lt;/a&gt;
  React Select
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NLUb6XlC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656707136/Lgffgx5mr.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NLUb6XlC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656707136/Lgffgx5mr.jpeg" alt="Screenshot_20210614-081737.jpg"&gt;&lt;/a&gt;&lt;br&gt;
Many websites have some sort of checkbox or select control for collecting simple information from the user. React Select houses a beautiful set of select input control with multiselect, autocomplete and other nice features&lt;/p&gt;

&lt;p&gt;&lt;a href="https://react-select.com/home"&gt;https://react-select.com/home&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sortablehoc"&gt;
  &lt;/a&gt;
  Sortable-hoc
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4_cBgI8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623657208038/UYgjIfHun.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4_cBgI8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623657208038/UYgjIfHun.jpeg" alt="Screenshot_20210614-081818.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Being able to sort a collection of items based on a criteria is a very important functionality for many websites to have.&lt;/p&gt;

&lt;p&gt;For example, sorting a list of users by how recently they were added, how active they are, etc.&lt;/p&gt;

&lt;p&gt;This library helps you do that, and more. It contains a set of React components to make any list into an animated, sortable list.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/clauderic/react-sortable-hoc"&gt;https://github.com/clauderic/react-sortable-hoc&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rccalendar"&gt;
  &lt;/a&gt;
  Rc-calendar
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5py-WjF9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656946333/JHMHEaT70.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5py-WjF9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656946333/JHMHEaT70.jpeg" alt="Screenshot_20210614-081908.jpg"&gt;&lt;/a&gt;&lt;br&gt;
Another very handy library for event-based websites.&lt;br&gt;
Rc-calender is a modular toolkit to build calendar-related functionalities in your React app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/react-component/calendar"&gt;https://github.com/react-component/calendar&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reacttoggle"&gt;
  &lt;/a&gt;
  React-toggle
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JXj6JG7H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656974858/tPVsYwXzl.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JXj6JG7H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656974858/tPVsYwXzl.jpeg" alt="Screenshot_20210614-081950.jpg"&gt;&lt;/a&gt;&lt;br&gt;
Toggles are an essential part of user Interfaces. A lot of websites use toggles to switch some feature on or off. React toggle is an elegant, accessible toggle component for React which also acts as a glorified checkbox.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://aaronshaf.github.io/react-toggle/"&gt;http://aaronshaf.github.io/react-toggle/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wysiwyg"&gt;
  &lt;/a&gt;
  Wysiwyg
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W0m0C7ob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623657005523/RbCV-iZ8v.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W0m0C7ob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623657005523/RbCV-iZ8v.jpeg" alt="Screenshot_20210614-082104.jpg"&gt;&lt;/a&gt;&lt;br&gt;
All modern content management platforms must have a modern text editor interface for users to type into. This is where wysiwyg comes in.&lt;/p&gt;

&lt;p&gt;This library is a  multifeature text editor build on top of ReactJS and DraftJS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jpuri/react-draft-wysiwyg"&gt;https://github.com/jpuri/react-draft-wysiwyg&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#victory"&gt;
  &lt;/a&gt;
  Victory
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aZ9EAdun--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623657039407/A_sD7UbCh.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aZ9EAdun--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623657039407/A_sD7UbCh.jpeg" alt="Screenshot_20210614-082219.jpg"&gt;&lt;/a&gt;&lt;br&gt;
We live in an age where data is represented in various forms and with many kinds of visuals. &lt;/p&gt;

&lt;p&gt;Victory is a collection of composable React components for building interactive data visualizations in your web application&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#halogen"&gt;
  &lt;/a&gt;
  Halogen
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qAc5t8ab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623657117927/xBpIUMTVB.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qAc5t8ab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623657117927/xBpIUMTVB.jpeg" alt="Screenshot_20210614-082618.jpg"&gt;&lt;/a&gt;&lt;br&gt;
One of the most popular ways of keeping users in a website happily waiting while a page or resources is getting fetched from the backend is with the use of spinners.&lt;/p&gt;

&lt;p&gt;Halogen houses a huge collection of loading spinners made with React.js.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/yuanyan/halogen"&gt;https://github.com/yuanyan/halogen&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dragula"&gt;
  &lt;/a&gt;
  Dragula
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--38owGIdU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623657153454/q_XtZeKuA.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--38owGIdU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623657153454/q_XtZeKuA.jpeg" alt="Screenshot_20210614-082405.jpg"&gt;&lt;/a&gt;&lt;br&gt;
Drag and drop is a very useful feature for many websites to have, especially content management platforms and website builders.&lt;/p&gt;

&lt;p&gt;Drag and Drop React Component that's very simple to use and &lt;/p&gt;

&lt;p&gt;&lt;a href="http://bevacqua.github.io/react-dragula/"&gt;http://bevacqua.github.io/react-dragula/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With these libraries, you don't have to code and design your React Components from scratch.&lt;/p&gt;

&lt;p&gt;All you simply have to do is clone your preferred repository into your local machine and use it's component in your project.&lt;/p&gt;

&lt;p&gt;No hassles.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to learn Web Dev as a beginner, you can check out this apt  &lt;a href="https://gumroad.com/a/834147443"&gt;HTML To React by Sleepless Yogi.&lt;/a&gt;  It has lots of tutorials which cover HTML, CSS, JavaScript and other fundamentals.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I hope you find something interesting among this collection.&lt;/p&gt;

&lt;p&gt;If you benefitted from this and want to support my work, you can buy me my favorite fruit:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/ubahthebuilder"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc5Aqnyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520pineapple%26emoji%3D%25F0%259F%258D%258D%26slug%3Dubahthebuilder%26button_colour%3De0b51a%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you and see you soon&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Ultimate On-Page SEO Techniques In 2021</title>
      <author>Raymond Halliwell</author>
      <pubDate>Mon, 14 Jun 2021 09:36:00 +0000</pubDate>
      <link>https://dev.to/raymondhalliwell/ultimate-on-page-seo-techniques-in-2021-50hl</link>
      <guid>https://dev.to/raymondhalliwell/ultimate-on-page-seo-techniques-in-2021-50hl</guid>
      <description>&lt;p&gt;While so many put in much effort on building the authority of a domain through off-page optimization, on-page SEO is as well important for successful SEO.  It entails all measures taken directly on web pages to boost  your website  ranking on search engines and drive organic traffic. This means it‚Äôs success is totally up to you. You get to decide the quality of the webpages and the audience you are focusing on. Whether it will drive visitors or not depends on you. &lt;/p&gt;

&lt;p&gt;However, when it comes to on-page SEO, it is something you want to get right for search engines to understand your website and its relevance to searchers queries. They are smart yet simple techniques that produce the desired results. Here, we ask &lt;a href="https://www.crunchbase.com/person/raymond-halliwell"&gt;Raymond Halliwell&lt;/a&gt;, a digital marketing expert on-page SEO techniques that matters in 2021. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content"&gt;
  &lt;/a&gt;
  Content
&lt;/h2&gt;

&lt;p&gt;Content is and always will be king. It is what makes a website credible to search engines and that is why it is very important. Your content has to be engaging and of high quality. This is what gets visitors glued to your site. Plus, focus on longer contents. Studies have proven that long content tends to rank higher and dominate the first page of search engines. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#title-tag"&gt;
  &lt;/a&gt;
  Title tag
&lt;/h2&gt;

&lt;p&gt;The title tag is the title of the web page and the ones displayed on the search engine results pages (SERPs). The title tag should accurately describe the web page content when opened and that is why it is also another important factor you don‚Äôt want to take for granted. Keep it as simple as 65 characters or less and let your keyword be closer to the title tag as possible. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#headline"&gt;
  &lt;/a&gt;
  Headline
&lt;/h2&gt;

&lt;p&gt;Even if the title is basic, headlines will make a huge difference in a content that is clickable. It is what highlights the nub of the sub matter, it is what arouses curiosity, it is what determines whether or  not your target reader is going to read an article or not. So go ahead and give that compelling headline that your content deserves. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#multimedia"&gt;
  &lt;/a&gt;
  Multimedia
&lt;/h2&gt;

&lt;p&gt;The saying images speak louder than words holds true in on-page SEO. They are attention grabbers, they rub easily on emotions and they can increase time spent on websites. ‚ÄúHave a variety of multimedia on your webpage- images, vidoes, infographics, podcasts or slide shows. Not only are you creating a visually stunning webpage, you are encouraging visitors to spend more time and even return, says Raymond Halliwell.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keyword"&gt;
  &lt;/a&gt;
  Keyword
&lt;/h2&gt;

&lt;p&gt;Keywords are what peolle look for in search engine, you want your pages to pop up to target audience when they search for relevant information. Hence, research for your audience and the keywords they are using. Raymond Halliwell advises you to optimize your content with those keywords and don‚Äôt forget to include it in the first 100 words. While at it, focus on long-tail keywords that appeal to today‚Äôs internet users. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#internal-links"&gt;
  &lt;/a&gt;
  Internal links
&lt;/h2&gt;

&lt;p&gt;Another powerful way to improve user engagement on your site is through internal linking. Add 2-3 links of relevant pages on your site. This will tell keep visitors navigate your site, keep them engaged longer, and informs Google that your pages are relevant and useful. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outbound-links"&gt;
  &lt;/a&gt;
  Outbound links
&lt;/h2&gt;

&lt;p&gt;‚ÄúOne way to build your website traffic while still facilitating relationships with other businesses is through outbound links. It informs people and search engines about relevant useful content, &lt;a href="https://twitter.com/raymondhalliwel"&gt;Raymond Halliwell&lt;/a&gt; explains. One thing is pages with outbound links tend to outrank those without on SERP.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mobilefriendliness"&gt;
  &lt;/a&gt;
  Mobile-friendliness
&lt;/h2&gt;

&lt;p&gt;With billions of people using mobile phones to surf the internet in this age, this is one important aspect you don‚Äôt want to miss. You need to boost your site speed on smartphones as well. Use a fast web hosting service and make your pages mobile-friendly. Google and internet users love sites that are optimised for faster mobile loading speed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://getjoys.net/technology/on-page-seo/"&gt;getjoys.net&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>seo</category>
      <category>raymondhalliwell</category>
      <category>raymondgeorgehalliwell</category>
      <category>digitalmarketing</category>
    </item>
    <item>
      <title>Kumpulan Link Pinjaman Uang Online &amp; Aplikasi Penghasil Uang Terlegit Hanya Di NinjaKura</title>
      <author>NinjaKura</author>
      <pubDate>Mon, 14 Jun 2021 09:20:30 +0000</pubDate>
      <link>https://dev.to/ninjakura/kumpulan-link-pinjaman-uang-online-aplikasi-penghasil-uang-terlegit-hanya-di-ninjakura-2l75</link>
      <guid>https://dev.to/ninjakura/kumpulan-link-pinjaman-uang-online-aplikasi-penghasil-uang-terlegit-hanya-di-ninjakura-2l75</guid>
      <description>&lt;p&gt;Topik Keuangan - Inilah Kumpulan Link Pinjaman Uang Online &amp;amp; Aplikasi Penghasil Uang Terlegit Hanya Di NinjaKura. Simak dan perhatikan terus ulasannya.&lt;/p&gt;

&lt;p&gt;Tahukah kamu bahwa perkembangan zaman saat ini sudah canggih. Dimana kalian bisa mendapat uang hanya bermain smartphone milik kalian saja. Gimana caranya? Tentu memainkan semua aplikasi penghasil uang.&lt;/p&gt;

&lt;p&gt;Aplikasi Penghasil Uang Untuk Memperoleh Uang Sampingan&lt;/p&gt;

&lt;p&gt;Siapa bilang smartphone yang kita gunakan sehari-hari tidak bisa menghasilkan uang? Mereka ketinggalan zaman akan pernyataan itu. Saatnya kalian pikirkan lagi bahwa apk penghasil cuan sudah bertebaran dimana-mana.&lt;/p&gt;

&lt;p&gt;Seperti contoh, kita akan bahas salah satu website yang bernama Ninjakura.com, blog ini selalu memberi info link aplikasi penghasil uang serta link aplikasi pinjaman online atau lebih tepatnya pinjol.&lt;/p&gt;

&lt;p&gt;Jika di analisa, web tersebut selalu update dengan topik yang paling terbaru. Semua bisa kalian dapatkan disana. Tunggu apa lagi, langsung gasken saja dan hasilkan uang sebanyak mungkin hanya main HP saja.&lt;/p&gt;

&lt;p&gt;Kunjungi: &lt;a href="https://www.ninjakura.com"&gt;https://www.ninjakura.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>keuangan</category>
      <category>aplikasi</category>
      <category>uang</category>
      <category>financial</category>
    </item>
    <item>
      <title>Data Structure</title>
      <author>Amritanshu Dev Rawat</author>
      <pubDate>Mon, 14 Jun 2021 08:58:21 +0000</pubDate>
      <link>https://dev.to/amritanshu/data-structure-3m5l</link>
      <guid>https://dev.to/amritanshu/data-structure-3m5l</guid>
      <description>&lt;ul&gt;
&lt;li&gt;I am writing content for a DSA book, should I continue writing?&lt;/li&gt;
&lt;li&gt;Here are some pages:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--25rjY6Z4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bktmds6u7i181vosh9jv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--25rjY6Z4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bktmds6u7i181vosh9jv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--45Dip8ss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojy1kuaj40ul6furrcui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--45Dip8ss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojy1kuaj40ul6furrcui.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zf2sAXDC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qmv0wql9bwlcmkolzq6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zf2sAXDC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qmv0wql9bwlcmkolzq6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5CNEhESQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2vfsa4pv9dgt3rnni73j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5CNEhESQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2vfsa4pv9dgt3rnni73j.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--arxdqrJt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/42hgi6e9rzucwzu9hukr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--arxdqrJt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/42hgi6e9rzucwzu9hukr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Twitter&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/NewGenDeveloper"&gt;https://twitter.com/NewGenDeveloper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>java</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>Converting dev environments to Apple Silicon</title>
      <author>Duleepa Wijayawardhana</author>
      <pubDate>Mon, 14 Jun 2021 08:38:22 +0000</pubDate>
      <link>https://dev.to/supermetrics/converting-dev-environments-to-apple-silicon-468i</link>
      <guid>https://dev.to/supermetrics/converting-dev-environments-to-apple-silicon-468i</guid>
      <description>&lt;h3&gt;
  &lt;a href="#or-how-i-learned-to-stop-worrying-and-love-the-apple-silicon-bomb"&gt;
  &lt;/a&gt;
  Or "How I learned to stop worrying and love the Apple Silicon bomb"
&lt;/h3&gt;

&lt;p&gt;By now, if you are a developer working on Macs, you're probably in the process of figuring out whether everything you have will be able to run on an Apple Silicon computer. Yep, the hype is real, and it's everywhere. Of course, if you believe the hype, the ARM chips powering the new Mac can do everything from make you coffee without a second thought or even write your code for you ;) To be fair, and this is not a review of the Apple Silicon Macs, I do have to say the machine is quite nice.&lt;/p&gt;

&lt;p&gt;The reality is that Apple will switch to ARM chips, and as devs, we need to be prepared. So this past weekend, faced with a shortage of Intel Macbook Pros for our new devs, we sat down to make it all work for our &lt;a href="https://supermetrics.com"&gt;Supermetrics&lt;/a&gt; developers.&lt;/p&gt;

&lt;p&gt;I‚Äôll walk you through the differences we found and what we had to do to convert, hoping that others will find it helpful.&lt;/p&gt;

&lt;p&gt;The following is a summary of what we had to do in the barest of bones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;prepare for slightly different paths on the M1 and some slightly different libraries&lt;/li&gt;
&lt;li&gt;get the latest version of Docker&lt;/li&gt;
&lt;li&gt;use buildx to compile the containers on the various environments (Mac Intel, Arm64)
&lt;p&gt;¬†&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-1-preparing-for-the-new-local-environment"&gt;
  &lt;/a&gt;
  Step 1: Preparing for the new local environment
&lt;/h3&gt;

&lt;p&gt;Supermetrics develops locally on as close to a duplicate of our production systems as possible. Each of our devs has a standard setup and a command-line tool that enables any dev to start, stop and debug their local setup. The tool also allows the clearing of caches, manipulating logs, and so on. While not perfect, it does the trick.&lt;/p&gt;

&lt;p&gt;While our internal tools sort of worked ‚Äúout of the box‚Äù, we first had to get the M1 machine simply running all the libraries we use. Luckily, &lt;a href="https://brew.sh/"&gt;homebrew&lt;/a&gt; is already functional for Apple Silicon. If you have any scripts that assume where &lt;code&gt;brew&lt;/code&gt; is installed, be warned that the default is different from a Mac Intel: &lt;code&gt;/usr/local&lt;/code&gt; for Mac Intel, &lt;code&gt;/opt/homebrew&lt;/code&gt; on the Apple Silicon.&lt;/p&gt;

&lt;p&gt;For all our bash scripts, we needed to detect both the system and the chip now. Some of our devs are on Linux boxes as well :).&lt;/p&gt;

&lt;p&gt;For reference, here's the bash that we used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env bash

function check_system() {

 unameOut="$(uname -s)"
 local op_sys=""
 case "${unameOut}" in
     Linux*)     op_sys=Linux;;
     Darwin*)    op_sys=Mac;;
     *)          op_sys="UNKNOWN:${unameOut}"
 esac

 echo $op_sys
}

function check_chip() {
 unameMOut="$(uname -m)"
 local op_chip=""
 case "${unameMOut}" in
     arm64*)     op_chip=Arm;;
     x86_64*)    op_chip=Intel;;
     *)          op_chip="UNKNOWN:${unameMOut}"
 esac

 echo $op_chip
}

check_system
check_chip
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There were some minor changes to our installation scripts ‚Äî making sure that all the libraries can be installed at the same version ‚Äî but by and large, the community has come through with fixes to almost everything we use.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-checking-out-docker"&gt;
  &lt;/a&gt;
  Step 2: Checking out Docker
&lt;/h3&gt;

&lt;p&gt;As of June 2021, Docker Desktop runs great on Apple Silicon. So go get it.&lt;/p&gt;

&lt;p&gt;Next step, fire up all our containers and hope that everything works... and boom. Nope. Well... ok, sort of.&lt;/p&gt;

&lt;p&gt;Here's the important thing, yes your Intel AMD64 images will run on Apple Arm64, and they‚Äôll do that in emulation. But hey, wasn't the whole point of doing this to try and avoid emulation.&lt;/p&gt;

&lt;p&gt;Our servers are custom compiled versions of PHP, Python, and a host of other libraries. So, of course, it's time to compile. But here's a description of our local systems.&lt;/p&gt;

&lt;p&gt;In short,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Redis and &lt;a href="https://hub.docker.com/r/redislabs/redisinsight"&gt;RedisInsight&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;MySQL (5.6, 5.7, 8.0)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hub.docker.com/r/jwilder/nginx-proxy/"&gt;Jwilder/Nginx-proxy&lt;/a&gt; (every dev shop should use it ‚Äî a future blog post maybe!)&lt;/li&gt;
&lt;li&gt;Various custom compiled debug versions of our production systems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can run all containers by specifying the platform to emulate ‚Äî but our goal was to allow our tools to seamlessly call &lt;code&gt;docker-compose&lt;/code&gt; without having to worry if they were running on a Linux, Mac Intel, or a Mac Apple Silicon System.&lt;/p&gt;

&lt;p&gt;In addition, MySQL 5.6 and MySQL 5.7 official images are not provided as Arm64 images :(&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-compiling-all-the-containers"&gt;
  &lt;/a&gt;
  Step 3: Compiling all the containers
&lt;/h3&gt;

&lt;p&gt;To make the whole thing seamless, the best way is to recompile the images you can to Arm64 versions or make sure that the source has Arm64 versions.&lt;/p&gt;

&lt;p&gt;To get everything working, here‚Äôs what we did (exact commands follow):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Where previously we would reference the official image directly in our docker-compose files (like &lt;code&gt;mysql:5.6&lt;/code&gt;), we now recompile even official images into our container registry (Google Container Registry ‚Äì GCR). For example, &lt;code&gt;local_mysql&lt;/code&gt; was an image that we created and tagged into three different versions: &lt;code&gt;5.6&lt;/code&gt;, &lt;code&gt;5.7&lt;/code&gt; and &lt;code&gt;8.0&lt;/code&gt; but also stored as emulated Arm64.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   FROM --platform=linux/amd64 mysql:5.6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We then needed to compile the AMD64 version on an AMD64 machine (Linux or Mac Intel) and the Arm64 version on an Apple Silicon Mac and upload it to our registry from each one with the correct platform. This is an important note since the compilation process cannot be emulated, it needs to be executed on the appropriate underlying platform.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Where we could, we re-compiled or referenced the correct upstream image. A note: if you are recompiling something like PHP, you do need to compile on the correct platform. So you should compile it on Apple Silicon for the Arm64 (an Arm64 Linux box on Google Cloud should also work). It is &lt;em&gt;possible&lt;/em&gt; that you could compile it under emulation on an AMD64, but because I had two machines ‚Äî I used both and didn‚Äôt bother to try emulation or a cloud Arm64 server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Because it's completely annoying to have to do this again and again (we do build our local images a lot), we wrote an internal tool to do the builds for us on Apple Silicon and Intel Macs for the future.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#using-buildx"&gt;
  &lt;/a&gt;
  Using Buildx
&lt;/h4&gt;

&lt;p&gt;While I hope this article stays relevant, please refer to the correct &lt;a href="https://docs.docker.com/buildx/working-with-buildx/"&gt;Buildx documentation&lt;/a&gt;. To use the new &lt;code&gt;docker buildx&lt;/code&gt; commands, you will need to have set up a builder. I've referenced the &lt;a href="https://cloud.google.com/container-registry"&gt;Google Container Registry&lt;/a&gt; (gcr.io) as that's where we host our containers, but, of course, ECR and other container registries will work.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-your-builder"&gt;
  &lt;/a&gt;
  Create your builder
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker buildx create --name my_local_builder --platform linux/amd64,linux/arm64
docker buildx use my_local_builder
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now be able to see the builder running.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker buildx inspect --bootstrap
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#building-images"&gt;
  &lt;/a&gt;
  Building images
&lt;/h4&gt;

&lt;p&gt;Building is straightforward ‚Äî if you want to build multiple images on one machine (some images you will be able to) simply, add all the platforms (comma separated) rather than the single used here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# no_cache_string = --no-cache if you want to ignore the docker build cache
# build_this_platform = linux/arm64 or linux/amd64 assuming your builder is set for those
# repo_image = your repository image
# build_docker_tag = your image tag
# use_docker_file = use -f if you want to use something other than the default `Dockerfile`


docker buildx build ${no_cache_string} --platform ${build_this_platform} -t ${repo_image}:${build_docker_tag} --push -f ${use_docker_file} .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our specific case ‚Äî to keep the images separate as we built them on different platforms and pushed up to the repository ‚Äî  we appended &lt;code&gt;-arm64&lt;/code&gt; and &lt;code&gt;-amd64&lt;/code&gt; to the version tag.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#building-a-manifest"&gt;
  &lt;/a&gt;
  Building a manifest
&lt;/h4&gt;

&lt;p&gt;Once you have pushed &lt;code&gt;my_local_debug_image:1.1-amd64&lt;/code&gt; as &lt;code&gt;linux/amd64&lt;/code&gt; and &lt;code&gt;my_local_debug_image:1.1-arm64&lt;/code&gt; as &lt;code&gt;linux/arm64&lt;/code&gt;, you need to create a manifest that points to both platforms.&lt;/p&gt;

&lt;p&gt;When a developer calls for &lt;code&gt;my_local_debug_image:1.1&lt;/code&gt;, the registry will serve the correct platform image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker buildx imagetools create -t eu.gcr.io/myproject/my_local_debug_image:1.1 eu.gcr.io/myproject/my_local_debug_image:1.1-arm64 eu.gcr.io/myproject/my_local_debug_image:1.1-amd64
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words
&lt;/h3&gt;

&lt;p&gt;Please note, much of this can likely be done in emulation, but your mileage may vary. My buildx would crash on certain compilations, and it was easier and better to simply use an Arm64 machine like the Apple Silicon machine.&lt;/p&gt;

&lt;p&gt;I was heartily disappointed that specific libraries we use, like Snowflake ODBC or Oracle ODBC drivers, did not actually have native Arm64 libraries. I'm sure by the end of the year this will be fixed, but still disappointing.&lt;/p&gt;

&lt;p&gt;Personally, I do like the Apple Silicon machines, and I'm heartily hoping for an Arm64 future :)&lt;/p&gt;

</description>
      <category>devops</category>
      <category>docker</category>
      <category>architecture</category>
      <category>arm64</category>
    </item>
    <item>
      <title>Creating Any Boolean Function with Elementary Logic Gates</title>
      <author>Ritobrata Ghosh</author>
      <pubDate>Mon, 14 Jun 2021 08:11:14 +0000</pubDate>
      <link>https://dev.to/ghoshr/creating-any-boolean-function-with-elementary-logic-gates-4jj6</link>
      <guid>https://dev.to/ghoshr/creating-any-boolean-function-with-elementary-logic-gates-4jj6</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Digital electronics is probably the most impactful and widespread technology now. It forms the basis of all of the chips- from ARM microcontrollers to processors in cellphones, all the way to uberpowerful AMD Threadrippers. In all these cases, digital electronics reign supreme.&lt;/p&gt;

&lt;p&gt;It is very useful to learn not only about basic principles but also how these principles and the components of Digital Electronics exactly form the basis of the modern world, i.e., how do we go from basic logic gates to fully functional computers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#elements-of-computing-systems"&gt;
  &lt;/a&gt;
  Elements of Computing Systems
&lt;/h3&gt;

&lt;p&gt;Digital Electronics is not only important because it is the base of the modern technology that literally governs our lives, but it makes us better as programmers, and computer scientists.&lt;/p&gt;

&lt;p&gt;Whether we are self-taught programmers or a person with a 4-year CS degree, we were never taught how we go from basic logic gates to CPUs.&lt;/p&gt;

&lt;p&gt;A book that I have come across- &lt;a href="https://mitpress.mit.edu/books/elements-computing-systems-second-edition"&gt;&lt;em&gt;The Elements of Computing Systems&lt;/em&gt;&lt;/a&gt; by By Noam Nisan and Shimon Schocken does just that. It teaches you how the basic building blocks of modern computers actually create the computers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kr60EykV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mitpress.mit.edu/sites/default/files/styles/large_book_cover/http/mitp-content-server.mit.edu%253A18180/books/covers/cover/%253Fcollid%253Dbooks_covers_0%2526isbn%253D9780262539807%2526type%253D.jpg%3Fitok%3DKlT7RdFp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kr60EykV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mitpress.mit.edu/sites/default/files/styles/large_book_cover/http/mitp-content-server.mit.edu%253A18180/books/covers/cover/%253Fcollid%253Dbooks_covers_0%2526isbn%253D9780262539807%2526type%253D.jpg%3Fitok%3DKlT7RdFp" alt="nand2tetris-book-cover-2ed"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;[Although it shows the new 2nd edition, I am reading the first one]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It promises to teach you, actively, how we can start from nothing but a NAND gate and go all the way to a full-fledged computer with an operating system, and a general-purpose programming language that runs on it, which can be used to create anything. The book is also known as &lt;strong&gt;&lt;em&gt;nand2tetris&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I have started reading this book and working through it every Sunday, and I have almost finished a chapter.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#building-gates-from-elementary-gates"&gt;
  &lt;/a&gt;
  Building Gates from Elementary Gates
&lt;/h3&gt;

&lt;p&gt;People who have taken a Digital Architecture class or a Digital Electronics class will know that NAND (NOT AND) gates are called "universal gates" because some combination of them are able to create any other gates. So, when you have a NAND gate with you, you can create a general-purpose computer with it. And the book makes you do that. It makes you create many logic gates starting from AND, NOT, and OR  with nothing but a pre-implemented NAND gate.&lt;/p&gt;

&lt;p&gt;So, a NAND gate is already implemented and supplied. You first have to create AND, OR, and NOT gates. Then you go on to further create XOR gates, Multiplexors (MUX), Demultiplexors (D-MUX), and multi-bit versions of these gates and basic gates with what you have built previously, viz. AND, OR, NOT, and NAND gates.&lt;/p&gt;

&lt;p&gt;This is a fascinating task in itself, and very intellectually stimulating.&lt;/p&gt;

&lt;p&gt;This is where the core of the post comes in.&lt;/p&gt;

&lt;p&gt;I will show you how to implement any Boolean function with nothing but three logic gates. This is a trick worth knowing.&lt;/p&gt;

&lt;p&gt;Let's start.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#implementing-a-boolean-function"&gt;
  &lt;/a&gt;
  Implementing a Boolean Function
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#design-a-boolean-function"&gt;
  &lt;/a&gt;
  Design a Boolean Function
&lt;/h4&gt;

&lt;p&gt;Let's say we need a Boolean function that behaves in such a way-&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;A&lt;/th&gt;
&lt;th&gt;B&lt;/th&gt;
&lt;th&gt;C&lt;/th&gt;
&lt;th&gt;Y&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;This &lt;em&gt;truth table&lt;/em&gt; tells you that we need such a Boolean function that outputs 1 iff-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;A&lt;/em&gt;, &lt;em&gt;B&lt;/em&gt;, and &lt;em&gt;C&lt;/em&gt;, three Boolean variables, are all 0&lt;/li&gt;
&lt;li&gt;only &lt;em&gt;A&lt;/em&gt; is 1, &lt;em&gt;B&lt;/em&gt; and &lt;em&gt;C&lt;/em&gt; are 0&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;A&lt;/em&gt; and &lt;em&gt;C&lt;/em&gt; are 1, &lt;em&gt;B&lt;/em&gt; is 0&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;A&lt;/em&gt; and &lt;em&gt;B&lt;/em&gt; are 1, &lt;em&gt;C&lt;/em&gt; is 0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, in some situations, you might need to define a Boolean function that behaves as you expect. Do not worry about what this function is doing. Let's focus on the implementation part.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#boolean-expression"&gt;
  &lt;/a&gt;
  Boolean Expression
&lt;/h4&gt;

&lt;p&gt;I am assuming that you already know about the basic gates, and how they function.&lt;/p&gt;

&lt;p&gt;So, in the first step to build a Boolean function, you must create the Boolean expression. Just like a Boolean variable can have two values (0, 1), and a Boolean function can only output two values (0, 1, duh!), a Boolean expression always evaluates to either 0 or 1.&lt;/p&gt;

&lt;p&gt;How to actually do it?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You should just note in which cases the function outputs a 1. Focus just on those.&lt;/li&gt;
&lt;li&gt;Note which variables are on (1) and which are off (0).&lt;/li&gt;
&lt;li&gt;Keep the variables unchanged which are 1 in this case, and take a negation of those which are off (in electronics, you would put them through NOT).&lt;/li&gt;
&lt;li&gt;Multiply them together.&lt;/li&gt;
&lt;li&gt;For these products for each 1 in the output, just add them together.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's it. You have got your Boolean expression.&lt;/p&gt;

&lt;p&gt;Let me go through it step by step.&lt;/p&gt;

&lt;p&gt;In the first occurrence of 1 in the output, we see that all the input variables are off. So, we get a*, b*, and c*, where a, b, and c are the variables representing inputs &lt;em&gt;A&lt;/em&gt;, &lt;em&gt;B&lt;/em&gt;, and &lt;em&gt;C&lt;/em&gt;, respectively, and x* is the negation of x. We multiply them together, and we get a*b*c*.&lt;/p&gt;

&lt;p&gt;In the second occurrence of 1, in a similar manner, we get- ab*c*.&lt;/p&gt;

&lt;p&gt;For the third and fourth occurrences of 1, we get ab*c, and abc*, respectively.&lt;/p&gt;

&lt;p&gt;We have to add them. And doing so, we get-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VmpBrDY---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sif7ny028w0l4dv7gse1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VmpBrDY---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sif7ny028w0l4dv7gse1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[You are required to write cases in the proper order. The first of three variable has these values row-wise- 0-0-0-0-1-1-1-1, the second one varies- 0-0-1-1-0-0-1-1, and the third one- 0-1-0-1-0-1-0-1.]&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h4&gt;

&lt;p&gt;You might be already aware that negation is passing through a NOT gate, multiplying is just passing through an AND gate, and adding is just an OR gate.&lt;/p&gt;

&lt;p&gt;The first &lt;em&gt;component&lt;/em&gt; a*b*c* can be obtained in this way-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N-1Hzj2N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623507789933/QBItJ0Vmd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N-1Hzj2N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623507789933/QBItJ0Vmd.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here are the second, third, and fourth components-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fiaZ_BQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623507861780/SGdZszA-c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fiaZ_BQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623507861780/SGdZszA-c.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aSK1K8q5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623508014150/-0UIiS7o5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aSK1K8q5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623508014150/-0UIiS7o5.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f50_tZqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623508144340/0hlCdyidE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f50_tZqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623508144340/0hlCdyidE.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we have to add them all together, i.e. put these components through an OR gate. The output of the OR gate will be our final output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---s5DeSXF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623566604394/Cm-9WW_ftX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---s5DeSXF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623566604394/Cm-9WW_ftX.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our final output.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#hdl-implement-and-test"&gt;
  &lt;/a&gt;
  HDL: Implement and Test
&lt;/h4&gt;

&lt;p&gt;Now, if you have ICs lying around, you can quickly test this with a power supply or a 5V cell, and some wires. You will also need a multimeter or LED bulbs to check your output.&lt;/p&gt;

&lt;p&gt;But, remember, we are building a computer from scratch when following this book. Using thousands of ICs to build a computer is not slightly practical unless you happen to have a contract with TSMC!&lt;/p&gt;

&lt;p&gt;Something called HDL (Hardware Description Language) is used. It is an intuitive, high-level, special-purpose programming language that you use to design and test chips, and use previously created chips.&lt;/p&gt;

&lt;p&gt;It is implemented in Java, but you do not have to worry about its implementation, you just need to use it. A GUI program is also supplied to do load and test chips.&lt;/p&gt;

&lt;p&gt;For example, given a NAND gate, you will design an AND gate this way.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F6ftgP5d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623567491868/2i-eaHy4V.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F6ftgP5d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623567491868/2i-eaHy4V.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, it is very intuitive, and you can pick it up in 20 minutes.&lt;/p&gt;

&lt;p&gt;And, this is how you'd test this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ai2g4JEd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623567613326/EIaikZlbD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ai2g4JEd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623567613326/EIaikZlbD.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To write our custom function in HDL, we would do-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Custom.hdl
// this is a part of Hashnode blog Convoluted demo

CHIP Custom {
    IN a, b, c;
    OUT out;

    PARTS:
    Not(in=a, out=nota);
    Not(in=b, out=notb);
    Not(in=c, out=notc);
    And(a=nota, b=notb, out=notanotb);
    And(a=notanotb, b=notc, out=w1);
    And(a=a, b=notb, out=anotb);
    And(a=anotb, b=notc, out=w2);
    And(a=anotb, b=c, out=w3);
    And(a=a, b=b, out=ab);
    And(a=ab, b=notc, out=w4);
    Or8Way(in[0]=w1, in[1]=w2, in[2]=w3, in[3]=w4, out=out);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And as this is a custom chip, the &lt;code&gt;.tst&lt;/code&gt; test file, and &lt;code&gt;.cmp&lt;/code&gt; compare file are not supplied. So, for testing this chip, I wrote my own.&lt;/p&gt;

&lt;p&gt;Here is the test (&lt;code&gt;.tst&lt;/code&gt;) file-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Custom.tst
// test file for testing custom chip
// could be found at- https://gist.github.com/ghosh-r/c4e6f5ceb1e7ea2e3ba3601c9de121be

// test file for a custom chip in Convoluted, a Hashnode blog

load Custom.hdl,
output-file Custom.out,
compare-to Custom.cmp,
output-list a%B3.1.3 b%B3.1.3 c%B3.1.3 out%B3.1.3;

set a 0,
set b 0,
set c 0,
eval,
output;

set a 0,
set b 0,
set c 1,
eval,
output;

set a 0,
set b 1,
set c 0,
eval,
output;

set a 0,
set b 1,
set c 1,
eval,
output; 

set a 1,
set b 0,
set c 0,
eval,
output;

set a 1,
set b 0,
set c 1,
eval,
output;

set a 1,
set b 1,
set c 0,
eval,
output;

set a 1,
set b 1,
set c 1,
eval,
output;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is the compare (&lt;code&gt;.cmp&lt;/code&gt;) file. It contains the truth table that we expect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Custom.cmp
// compare file for chip Custom.hdl
// found at- https://gist.github.com/ghosh-r/c4e6f5ceb1e7ea2e3ba3601c9de121be
// test file at- https://gist.github.com/ghosh-r/cef52b9f6ac017e00d64460b025a53fe

|   a   |   b   |   c   |  out  |
|   0   |   0   |   0   |   1   |
|   0   |   0   |   1   |   0   |
|   0   |   1   |   0   |   0   |
|   0   |   1   |   1   |   0   |
|   1   |   0   |   0   |   1   |
|   1   |   0   |   1   |   1   |
|   1   |   1   |   0   |   1   |
|   1   |   1   |   1   |   0   |
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the text in Compare files is not robust to whitespaces.&lt;/p&gt;

&lt;p&gt;It will be compared with the output file generated by the simulator.&lt;/p&gt;

&lt;p&gt;Here's how the successful run looks like-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--57L76zT4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623576505734/bj93xn62K.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--57L76zT4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623576505734/bj93xn62K.gif" alt="final_60c5cd572911290063ac8055_216317.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#another-example-xor-gate"&gt;
  &lt;/a&gt;
  Another Example: XOR Gate
&lt;/h4&gt;

&lt;p&gt;Suppose you want to implement a XOR gate from basic gates. And the truth-table would be-&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;A&lt;/th&gt;
&lt;th&gt;B&lt;/th&gt;
&lt;th&gt;Y&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;This will be your Boolean expression-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L-vMUrns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2latrxqmh5agpl8hn4s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L-vMUrns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2latrxqmh5agpl8hn4s.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And this will be your HDL implementation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Xor.hdl

CHIP Xor {
    IN a, b;
    OUT out;

    PARTS:
    Not(in=a, out=nota);
    Not(in=b, out=notb);
    And(a=a, b=notb, out=w1);
    And(a=nota, b=b, out=w2);
    Or(a=w1, b=w2, out=out);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;I showed you how to implement any Boolean function with nothing but three elementary logic gates. However, you should keep in mind that this approach is impractical when there are more variables, and the chip you want is more complicated.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://ghosh-r.github.io"&gt;Ritobrata Ghosh&lt;/a&gt; is a Physics undergrad, and a Deep Learning Consultant focused on Computer Vision. I am interested in ML in embedded devices, Private AI (federated learning), Deep RL, and GANs. I am also interested in Maths, problem-solving, and programming in general.&lt;/p&gt;

&lt;p&gt;Follow me to get more similar posts.&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/AllesistKode"&gt;Twitter&lt;/a&gt; or connect with me on &lt;a href="https://www.linkedin.com/in/ritobrata-ghosh/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>electronics</category>
      <category>nand2tetris</category>
      <category>programming</category>
    </item>
    <item>
      <title>Quick Tips: How to Fix ‚ÄúRequests from referrer https://www.googleapis.com/ are blocked‚Äù error in Page Speed Insights</title>
      <author>InHuOfficial</author>
      <pubDate>Mon, 14 Jun 2021 08:07:58 +0000</pubDate>
      <link>https://dev.to/inhuofficial/quick-tips-how-to-fix-requests-from-referrer-https-www-googleapis-com-are-blocked-error-in-page-speed-insights-13ka</link>
      <guid>https://dev.to/inhuofficial/quick-tips-how-to-fix-requests-from-referrer-https-www-googleapis-com-are-blocked-error-in-page-speed-insights-13ka</guid>
      <description>&lt;p&gt;Are you trying to see how well your site (or someone else's!) performs using Page Speed Insights, but it keeps hanging at 50% complete and then throwing an error saying: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúRequests from referrer &lt;a href="https://www.googleapis.com/"&gt;https://www.googleapis.com/&lt;/a&gt; are blocked‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-easy-fix"&gt;
  &lt;/a&gt;
  The easy fix
&lt;/h2&gt;

&lt;p&gt;This is nearly always because either your anti-virus or firewall is blocking the request.&lt;/p&gt;

&lt;p&gt;This is especially likely in Brave browser when using "Shields Up".&lt;/p&gt;

&lt;p&gt;If you are using Brave browser, add an exception or temporarily switch "Shields" off. &lt;/p&gt;

&lt;p&gt;To check if it is a firewall / Brave browser interfering with your connection do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fire up Chrome or Firefox&lt;/li&gt;
&lt;li&gt;Go Incognito / disable extensions&lt;/li&gt;
&lt;li&gt;Disconnect from your Wi-Fi / wired connection&lt;/li&gt;
&lt;li&gt;Switch on the mobile hotspot on your phone (and ensure it is on data only)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Try running the test again.&lt;/p&gt;

&lt;p&gt;If the problem disappears then reverse the process one step at a time and keep trying until you encounter the same problem. This then lets you pinpoint what is actually blocking the request.&lt;/p&gt;

&lt;p&gt;If the problem does not disappear after doing that, then open the network tab, look for the request to "googleapis.com" and look to see if you have accidentally blocked the domain (and unblock it by right clicking on the entry and clicking "unblock googleapis.com"!).&lt;/p&gt;

&lt;p&gt;That is it, for 99% of people that will fix the problem (and most of the time it is simply Brave browser shields that is interfering).&lt;/p&gt;

&lt;p&gt;And if all else fails, you can just use "Lighthouse" in developer tools, the recommendations and score should be pretty similar as Page Speed Insights uses Lighthouse to power it anyway (you just won't get your origin and page summaries as part of the report). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-me-for-more-quick-tips-and-other-random-stuff"&gt;
  &lt;/a&gt;
  Follow me for more quick tips and other random stuff!
&lt;/h2&gt;

&lt;p&gt;I write about all sorts of random stuff, mainly focused around accessibility, website performance and abusing the internet.&lt;/p&gt;

&lt;p&gt;Give me a follow if any of that interests you. &lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__551686"&gt;
  
    .ltag__user__id__551686 .follow-action-button {
      background-color: #c62aa4 !important;
      color: #131111 !important;
      border-color: #c62aa4 !important;
    }
  
    &lt;a href="/inhuofficial" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/inhuofficial"&gt;InHuOfficial&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/inhuofficial"&gt;Specialising in accessibility and website load speed / performance. If you have a question about [accessibility] or [page-speed-insights] ask away and I will help any way I can!&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#for-the-algo"&gt;
  &lt;/a&gt;
  For the Algo!
&lt;/h2&gt;

&lt;p&gt;My new sign off experiment! &lt;/p&gt;

&lt;p&gt;If you enjoyed this article, give it a ‚ù§, if you thought it was special give it a ü¶Ñ and above all, don't forget:&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Leave a comment for the algorithm! Especially if you have tried the above techniques and it still doesn't work, I will try and help if I can üòÅ!  &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>performance</category>
    </item>
    <item>
      <title>Anyone interested in reinforcement learning? [Startup looking for feedback]</title>
      <author>Joy</author>
      <pubDate>Mon, 14 Jun 2021 08:07:43 +0000</pubDate>
      <link>https://dev.to/joooyz/anyone-interested-in-reinforcement-learning-startup-looking-for-feedback-4de8</link>
      <guid>https://dev.to/joooyz/anyone-interested-in-reinforcement-learning-startup-looking-for-feedback-4de8</guid>
      <description>&lt;p&gt;Hey there,&lt;/p&gt;

&lt;p&gt;I'm working on a startup project called &lt;a href="https://www.gocoder.one"&gt;Coder One&lt;/a&gt; and we're building a next-generation OpenAI Gym with active competitions. Our goal is to give engineers a place to experiment, benchmark, and compete with the latest AI/ML algorithms.&lt;/p&gt;

&lt;p&gt;Here is a preview of our platform:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gyx8Puab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xbpzzk2m15ur5eh7hevo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gyx8Puab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xbpzzk2m15ur5eh7hevo.gif" alt="Coder One"&gt;&lt;/a&gt;&lt;br&gt;
It features competitive multiplayer games, where you can apply novel AI/ML algorithms to build your own game-playing agent.&lt;/p&gt;

&lt;p&gt;We're currently in private Beta, and &lt;strong&gt;would love to speak with anyone interested or experienced in AI/ML (particularly reinforcement learning and deep learning) for feedback.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Please let me know if you'd be open to a couple questions over DM!&lt;/p&gt;

&lt;p&gt;Thank you üôè&lt;br&gt;
Joy&lt;/p&gt;

</description>
      <category>help</category>
      <category>machinelearning</category>
      <category>startup</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Solution: Maximum Units on a Truck</title>
      <author>seanpgallivan</author>
      <pubDate>Mon, 14 Jun 2021 07:50:57 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-maximum-units-on-a-truck-ak2</link>
      <guid>https://dev.to/seanpgallivan/solution-maximum-units-on-a-truck-ak2</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/maximum-units-on-a-truck/discuss/1271374"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-1710-easy-maximum-units-on-a-truck"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/maximum-units-on-a-truck/"&gt;Leetcode Problem #1710 (&lt;em&gt;Easy&lt;/em&gt;): Maximum Units on a Truck&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You are assigned to put some amount of boxes onto &lt;strong&gt;one truck&lt;/strong&gt;. You are given a 2D array &lt;code&gt;boxTypes&lt;/code&gt;, where &lt;code&gt;boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;code&gt;numberOfBoxes i&lt;/code&gt; is the number of boxes of type &lt;code&gt;i&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt; &lt;code&gt;numberOfUnitsPerBox i&lt;/code&gt; is the number of units in each box of the type &lt;code&gt;i&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You are also given an integer &lt;code&gt;truckSize&lt;/code&gt;, which is the &lt;strong&gt;maximum&lt;/strong&gt; number of &lt;strong&gt;boxes&lt;/strong&gt; that can be put on the truck. You can choose any boxes to put on the truck as long as the number of boxes does not exceed &lt;code&gt;truckSize&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Return &lt;em&gt;the &lt;strong&gt;maximum&lt;/strong&gt; total number of &lt;strong&gt;units&lt;/strong&gt; that can be put on the truck&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;There are:&lt;br&gt;&lt;br&gt;- 1 box of the first type that contains 3 units.&lt;br&gt;- 2 boxes of the second type that contain 2 units each.&lt;br&gt;- 3 boxes of the third type that contain 1 unit each.&lt;br&gt;&lt;br&gt;You can take all the boxes of the first and second types, and one box of the third type.&lt;br&gt;&lt;br&gt;The total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;91&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= boxTypes.length &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= numberOfBoxesi, numberOfUnitsPerBoxi &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= truckSize &amp;lt;= 10^6&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;For this problem, we simply need to prioritize the more valuable boxes first. To do this, we should &lt;strong&gt;sort&lt;/strong&gt; the boxtypes array (&lt;strong&gt;B&lt;/strong&gt;) in descending order by the number of units per box (&lt;strong&gt;B[i][1]&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Then we can iterate through &lt;strong&gt;B&lt;/strong&gt; and at each step, we should add as many of the &lt;strong&gt;boxes&lt;/strong&gt; as we can, until we reach the truck size (&lt;strong&gt;T&lt;/strong&gt;). We should add the number of &lt;strong&gt;boxes&lt;/strong&gt; added multiplied by the units per box to our answer (&lt;strong&gt;ans&lt;/strong&gt;), and decrease &lt;strong&gt;T&lt;/strong&gt; by the same number of &lt;strong&gt;boxes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once the truck is full (&lt;strong&gt;T == 0&lt;/strong&gt;), or once the iteration is done, we should &lt;strong&gt;return ans&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(N log N)&lt;/strong&gt; where &lt;strong&gt;N&lt;/strong&gt; is the length of &lt;strong&gt;B&lt;/strong&gt;, for the sort&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(1)&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;maximumUnits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;maximumUnits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;boxes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;boxes&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
            &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;boxes&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;maximumUnits&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[][]&lt;/span&gt; &lt;span class="no"&gt;B&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;B&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;B&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
            &lt;span class="no"&gt;T&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maximumUnits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[](&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];});&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>typedef VS using in type aliases declaration in C++</title>
      <author>Aastha Gupta</author>
      <pubDate>Mon, 14 Jun 2021 07:47:24 +0000</pubDate>
      <link>https://dev.to/guptaaastha/typedef-vs-using-in-type-aliases-declaration-in-c-fm2</link>
      <guid>https://dev.to/guptaaastha/typedef-vs-using-in-type-aliases-declaration-in-c-fm2</guid>
      <description>&lt;p&gt;In my previous posts, &lt;code&gt;typedef&lt;/code&gt; and &lt;code&gt;using&lt;/code&gt; were introduced. If you haven't read them, I'd recommend to check them out first before proceeding with this one ( &lt;a href="https://dev.to/guptaaastha/quick-introduction-to-typedef-in-c-5362"&gt;&lt;code&gt;typedef&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://dev.to/guptaaastha/quick-introduction-to-using-in-c-4n73"&gt;&lt;code&gt;using&lt;/code&gt;&lt;/a&gt; ).&lt;/p&gt;

&lt;p&gt;Let's look at the following code snippets:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ios_base&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fmtflags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ios_base&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fmtflags&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both these code snippets are equivalent! Infact, In C++11, the &lt;code&gt;using&lt;/code&gt; keyword when used for type alias is identical to &lt;code&gt;typedef&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;using&lt;/code&gt; is used specifically to type-alias &lt;code&gt;template&lt;/code&gt; instead of &lt;code&gt;typedef&lt;/code&gt; and &lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1489.pdf"&gt;this paper&lt;/a&gt; explains it very well so.&lt;/p&gt;

&lt;p&gt;An excerpt from the paper:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It has been suggested to (re)use the keyword &lt;code&gt;typedef&lt;/code&gt; ‚Äî as done in the paper [4] ‚Äî to introduce template aliases:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 
   &lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MyAllocator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Vec&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;That notation has the advantage of using a keyword already known to introduce a type alias. However, it also displays several disadvantages among which the confusion of using a keyword known to introduce an alias for a type-name in a context where the alias does not designate a type, but a template; &lt;code&gt;Vec&lt;/code&gt; is not an alias for a type, and should not be taken for a &lt;code&gt;typedef-name&lt;/code&gt;. &lt;em&gt;The name &lt;code&gt;Vec&lt;/code&gt; is a name for the family&lt;/em&gt; &lt;code&gt;std::vector&amp;lt; [bullet] , MyAllocator&amp;lt; [bullet] &amp;gt; &amp;gt;&lt;/code&gt; ‚Äì where the bullet is a placeholder for a type-name. Consequently we do not propose the &lt;code&gt;typedef&lt;/code&gt; syntax. On the other hand the sentence&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;
    &lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Vec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MyAllocator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;can be read/interpreted as: from now on, &lt;em&gt;I‚Äôll be using &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; as a synonym for &lt;code&gt;std::vector&amp;lt;T, MyAllocator&amp;lt;T&amp;gt; &amp;gt;&lt;/code&gt;&lt;/em&gt;. With that reading, the new syntax for aliasing seems reasonably logical.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You might wonder why a new keyword was not introduced and why &lt;code&gt;using&lt;/code&gt; was reused; there is infact a pretty good reason behind the rationale of not introducing a new keyword or new syntax every so often. The standard wants to avoid breaking old code as much as possible. This is why in proposal documents you might encounter sections like &lt;strong&gt;&lt;em&gt;Impact on the Standard&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;Design decisions&lt;/em&gt;&lt;/strong&gt;, and how they might affect older code. There are situations when a proposal seems like a really good idea but might not have traction because it would be too difficult to implement or too confusing, or would contradict old code which is something that should be avoided.&lt;/p&gt;

&lt;p&gt;Thanks for giving this article a read and I'll see you in the next one üòÑ&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
