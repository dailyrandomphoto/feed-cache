<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>My AWS Story</title>
      <author>Lee Wynne</author>
      <pubDate>Mon, 05 Jul 2021 08:14:08 +0000</pubDate>
      <link>https://dev.to/leewynne/my-aws-story-6a9</link>
      <guid>https://dev.to/leewynne/my-aws-story-6a9</guid>
      <description>&lt;p&gt;Bit of background. I had a healthy obession with my ZX spectrum throughout my younger years but didn't really get back into tech professionally until my mid twenties.&lt;/p&gt;

&lt;p&gt;I grew up fairly poor, on a notorious council estate in Salford as part of a single parent family. My mum worked her ass off day and night just to keep us clothed and fed.&lt;/p&gt;

&lt;p&gt;I didn't go to Uni to study computer science and I don't have a degree (I did go back and complete a HNC in business and information services later in life).&lt;/p&gt;

&lt;p&gt;I had no idea what I wanted to do when I left school. The tech industry didn't really exist, so I faffed around alot until it did.&lt;/p&gt;

&lt;p&gt;I got my first break in tech sales, building and selling gaming PC's. I was so passionate about it that my competition on the sales floor didn't even register on the monthly sales charts and things just took off from there. &lt;/p&gt;

&lt;p&gt;If there are a few things that I could link my breakthrough to, they would be enthusiam, personality and persistence. I went from selling and helping build gaming PC's to a technical development analyst at HJ Heinz within a very short space of time. I bypassed the help desk, 1st line and 2nd line support. I didn't know what I was doing but I learned, &lt;strong&gt;very quickly&lt;/strong&gt; and obsessively latched myself on to some of the coolest tech I could get my hands on and demonstrated it regularly to anyone that would listen. I then moved into a role as their European Application Delivery manager and enjoyed some amazing travel and experiences (this was before Cloud existed).&lt;/p&gt;

&lt;p&gt;Here is my &lt;a href="https://www.linkedin.com/in/leewynne"&gt;LinkedIn profile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have found that my curiosity is one of the most important factors in my day to day happiness. I have to be curious and excited about the technology platforms that I am working with, how they benefit people and their projects. I find that I need to be close to these things on a daily basis.&lt;/p&gt;

&lt;p&gt;I have experienced changes in my career from time to time, probably around 2 - 3 times where I have acknowledged to myself that I need to do something different. Those changes have never about money, power or ego, they have always been about following my curiosity and excitment, and I feel that's a great foundation for professional &amp;amp; personal happiness.&lt;/p&gt;

&lt;p&gt;I remember waking up in London about 4-5 years ago and thinking, today I make a decision. I was too comfortable in a role that I wasn't overly curious about, working with a technology stack that I wasn't overly passionate about so I approached my line management and asked to take on a developing area of the business and help drive it forwards, I was already fairly comfortable with Cloud from a web development perspective but I really wanted to learn more, be curious and really add value through an ever-changing platform that would satisfy my curiosity until I retire (hopefully).&lt;/p&gt;

&lt;p&gt;Looking back, I still remember the day I stumbled across AWS, it was shortly after the first iPhone had been released - I remember talking to a PHP developer who was storing images in something called an 's3' object store.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o6Yg4GUVgIUg3bf7W/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o6Yg4GUVgIUg3bf7W/giphy.gif" alt="I had no idea what he was talking about"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was like, 'oh yeah - the s3's... of course'. Then, I scuttled home to Google it as fast as I could. Hmmm that's interesting I thought, I had a bit of a play, then I closed my laptop and didn't get the chance to play with it again.&lt;/p&gt;

&lt;p&gt;Fast forward 4 years, I was sat in the office at News International in London (the business was on a drive to transition from a paper company to a digital media powerhouse) and our new CTO was introducing AWS and what services we would be migrating over to it, compute was available through EC2, S3, CloudFront, a simple version of RDS amongst others. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/5550zJj6nF6pO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/5550zJj6nF6pO/giphy.gif" alt="I had to learn this"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I had to get involved. To me, it looked like the end of the gatekeepers of technology, all you needed was a credit card or some free tier credit and you can get an MVP or literally anything off the ground in no time, an absolute geeks playground. So my AWS journey started further back than I originally thought. &lt;/p&gt;

&lt;p&gt;I didn't get fully immersed until around 2016-2017 which was when I made that decision one morning in London and my employer thankfully backed me up and gave me the opportunity I wanted. I now get to immerse myself in the Cloud platform that originally sparked that curiosity again.&lt;/p&gt;

&lt;p&gt;I had the luxury of having an existing heritage in tech and being in the right place at the right time within the organisation that I work for to start building a professional career around AWS and public cloud in general. &lt;/p&gt;

&lt;p&gt;Others are not so lucky which is why I love the &lt;a href="https://aws.amazon.com/training/restart/"&gt;AWS re/Start program&lt;/a&gt; so much. If anyone has the opportunity to re-train and enter the world of AWS, then go for it, let your curiosity take you on an amazing journey, you won't regret it, the job market is exploding with AWS opportunities and the amount of online learning content is just mind-boggling. &lt;/p&gt;

&lt;p&gt;Last but not least, the AWS community is very special, I can't quite put my finger on it but it reminds me of the Ruby and the Ruby on Rails communities that I have experienced, great people, always willing to help and they all share that same curiosity, everyone seems to have that edge about them.&lt;/p&gt;

&lt;p&gt;AWS also reminds of that time when Linux leveled the playing field for developers, all of a sudden there was an OS that was inclusive, you didn't need money to buy a server OS license or client access licences to build or access it. &lt;/p&gt;

&lt;p&gt;When AWS came along with s3 and ec2, you could get started with your dreams without needing to raise capital to buy or rent space, racks, networks, security, compute and storage - all you needed was a credit card to pay for what you used and look what has happened since, an explosion of innovation from ordinary people who many never have made it due to the gatekeepers of capital, liberation, inclusivity and the best ideas winning.&lt;/p&gt;

&lt;p&gt;So what's your AWS story? Fancy sharing it to inspire others? &lt;a href="https://www.theelastic.guru/lee/share-your-aws-story-to-inspire-others-you-could-get-100-of-free-aws-credits-in-return-2cgj"&gt;We are gifting $100 of free AWS credits for the best 5 stories.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to learn more about the history of Cloud and AWS, this is great podcast from the DevDiscuss team.&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devdiscuss/s5-e7-the-history-of-the-cloud"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S5:E7 - The History of the Cloud&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devdiscuss"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevDiscuss Â 

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s5-e7-the-history-of-the-cloud" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s5-e7-the-history-of-the-cloud" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s5-e7-the-history-of-the-cloud" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s5-e7-the-history-of-the-cloud" alt="DevDiscuss" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtvK04RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j-SdIkjZ--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s5-e7-the-history-of-the-cloud"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devdiscuss/s5-e7-the-history-of-the-cloud"&gt;
      &lt;img id="episode-profile-image" alt="S5:E7 - The History of the Cloud" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTELFWpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--otY2jCJh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;Ã&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;What's your AWS story?&lt;/p&gt;

</description>
      <category>aws</category>
    </item>
    <item>
      <title>The easiest way to get started with AWS regardless of your background</title>
      <author>Lee Wynne</author>
      <pubDate>Mon, 05 Jul 2021 08:05:34 +0000</pubDate>
      <link>https://dev.to/leewynne/the-easiest-way-to-get-started-with-aws-regardless-of-your-background-1nl2</link>
      <guid>https://dev.to/leewynne/the-easiest-way-to-get-started-with-aws-regardless-of-your-background-1nl2</guid>
      <description>&lt;p&gt;AWS was a life changer for me. I still remember the day I stumbled across it, it was shortly after the first iPhone had been released - I remember talking to a PHP developer who was storing images in something called 's3' object storage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o6Yg4GUVgIUg3bf7W/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o6Yg4GUVgIUg3bf7W/giphy.gif" alt="I had no idea what he was talking about"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But I was like, 'oh yeah - the s3's of course'. Then, I scuttled home to Google it as fast as I could. Hmmm that's interesting I thought, then I closed my laptop and didn't bother with it again, VDI was the future ð¤¦ð»ââï¸.&lt;/p&gt;

&lt;p&gt;Fast forward 4 years, I was sat in the office at News International in London (the business was on a drive to transition from a paper company to a digital media powerhouse) and our new CTO was introducing AWS and what services we would be migrating over to it, compute was available through EC2, S3, CloudFront, a simple version of RDS amongst others. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/5550zJj6nF6pO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/5550zJj6nF6pO/giphy.gif" alt="I had to learn this"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I had to get involved.&lt;/p&gt;

&lt;p&gt;Now, for anyone out there looking to get into tech, enterprise IT, web development, start-up tech etc whatever your background, AWS is a great place to start and the simplest way to experience it today is through AWS LightSail. You can have your own Linux, Windows instance up and running in minutes. Here is how:&lt;/p&gt;

&lt;p&gt;First, you need an AWS account.&lt;/p&gt;

&lt;p&gt;AWS have a nice how-to article &lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have been through that process then you are ready to get started with AWS LightSail which is a simple flow to get you from zero to online with a Linux or Windows EC2 instance without the steep learning curve of VPC configurations, availability zones, IAM policies, security groups and internet gateways.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/l4FATJpd4LWgeruTK/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l4FATJpd4LWgeruTK/giphy.gif" alt="phew that sounds complicated"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's do it:&lt;/p&gt;

&lt;p&gt;Sign in to the AWS console.&lt;/p&gt;

&lt;p&gt;Select 'LightSail' from the menu&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5p9bnshm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/i/p6n13hr3ryjcjq0cdgye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5p9bnshm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/i/p6n13hr3ryjcjq0cdgye.png" alt="Screenshot 2020-12-03 at 15.10.01"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hit create instance&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0JgS3BmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/i/rea98wv2x4rmbuyfcq9j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0JgS3BmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/i/rea98wv2x4rmbuyfcq9j.png" alt="Screenshot 2020-12-03 at 15.10.23"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select Windows and then Windows Server 2019&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vzAx0xSX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/i/qo5wzzpj4s01zr9ti1ev.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vzAx0xSX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/i/qo5wzzpj4s01zr9ti1ev.png" alt="Screenshot 2020-12-03 at 15.11.34"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose your plan&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DYaML-ef--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/i/k8s1xv6jmnyx57fmgt1z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DYaML-ef--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/i/k8s1xv6jmnyx57fmgt1z.png" alt="Screenshot 2020-12-03 at 15.11.41"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Name your instance&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mfSp6PZ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/i/psviz8zu2j84pmocbtgd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mfSp6PZ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/i/psviz8zu2j84pmocbtgd.png" alt="Screenshot 2020-12-03 at 15.12.18"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hit create instance.&lt;/p&gt;

&lt;p&gt;Once created, you'll be presented with a screen that allows you to connect directly to you instance through a browser or via an RDP session.&lt;/p&gt;

&lt;p&gt;Job done ð¤ You are now rocking an AWS instance that would have taken days of configuration for experts only back in 2008.&lt;/p&gt;

</description>
      <category>aws</category>
    </item>
    <item>
      <title>Clean Code Part 2: Functions</title>
      <author>Tanisha Sabherwal</author>
      <pubDate>Mon, 05 Jul 2021 07:43:47 +0000</pubDate>
      <link>https://dev.to/tanisha03/clean-code-part-2-functions-43mj</link>
      <guid>https://dev.to/tanisha03/clean-code-part-2-functions-43mj</guid>
      <description>&lt;p&gt;This is part 2 of the series of Clean Code By Robert C. Martin. If you haven't gone through the part 1, &lt;a href="https://dev.to/tanisha03/clean-code-part-1-meaningful-names-4khp"&gt;read here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#smaller-functions"&gt;
  &lt;/a&gt;
  Smaller Functions
&lt;/h2&gt;

&lt;p&gt;The first rule for functions is that they should be smaller and easily readable by anyone. It should have the least number of lines, each being transparently obvious. Also, avoid complex nested structures and many indent levels.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Functions should do one thing. They should do it well. They should do it only.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To ensure that the functions are doing one thing only, it is essential that all the lines inside the function belong to one level of abstraction.&lt;/p&gt;

&lt;p&gt;Abstraction is a fundamental concept in OOPS. In brief and laymanâs term and it talks about hiding the âhowâ part and only expose âwhatâ to the outer world. Level of abstraction is being able to mentally grouping inside the function. In general, different âblocksâ of code inside a method is a classic indicator of different level of abstractions. This means, the reader of the code now has to create a âbranchâ in their mental grouping to read that condition or loop block and merge back to the same level where the block ended.&lt;/p&gt;

&lt;p&gt;Let me explain with an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkForValidOrder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; 
    &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PLACED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payment&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SUCCESSFUL&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tax&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;walletBalance&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the above function, there are two levels of abstraction since mathematical computation is being carried put in the last statement. This can be avoided using a small tweak.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkForValidOrder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; 
    &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PLACED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payment&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SUCCESSFUL&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class="nx"&gt;generateTotalAmount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;walletBalance&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hence, using abstraction, we are essentially hiding the âhowâ part and preserving the part indicating what the function does. This was a simple example with only one level of abstraction, when function tends to become bigger with many levels of abstraction, the &lt;a href="http://principles-wiki.net/principles:single_level_of_abstraction"&gt;Single Level of Abstraction (SLA)&lt;/a&gt; principle should be followed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-the-stepdown-rule"&gt;
  &lt;/a&gt;
  Follow the Stepdown Rule
&lt;/h2&gt;

&lt;p&gt;The rule suggests that the code should be readable in a top-down narrative, descending one level of abstraction per function. It implies that the function ordering is no longer random. A caller function should always reside above the callee function.&lt;/p&gt;

&lt;p&gt;Taking the previous example, the ordering of the functions is best as given below and not the other way around.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkForValidOrder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; 
    &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PLACED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payment&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SUCCESSFUL&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class="nx"&gt;generateTotalAmount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;walletBalance&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;generateTotalAmount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tax&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#functional-arguments"&gt;
  &lt;/a&gt;
  Functional Arguments
&lt;/h2&gt;

&lt;p&gt;Functions can be broadly classified into the following types based on the number of arguments: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Niladic(zero)&lt;/li&gt;
&lt;li&gt;Monadic(one)&lt;/li&gt;
&lt;li&gt;Dyadic(two)&lt;/li&gt;
&lt;li&gt;Triadic(three)&lt;/li&gt;
&lt;li&gt;Polyadic(more than three)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As the number of arguments for a function increases, complexity increases and it even becomes tougher from a testing point of view.&lt;/p&gt;

&lt;p&gt;When functions need three or more arguments, most of the times, it is easier to wrap some of these arguments into a class/object of its own. This will ensure better readability.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;describeFruit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numSeeds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fruitName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fruitColor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;. It's &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fruitSize&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;. 
  It costs &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;. It has &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;numSeeds&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;. The type if 
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above function is too confusing to read with so many arguments. A better alternative and cleaner versionis given below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;describeFruit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;. It's 
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;. It costs &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;. It has 
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numSeeds&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;. The type if &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#no-side-effects"&gt;
  &lt;/a&gt;
  No Side Effects
&lt;/h2&gt;

&lt;p&gt;Side effects are code in a function that makes changes to things that are outside the function. This can lead to unexpected changes to code outside and cause damaging mistruths.&lt;/p&gt;

&lt;p&gt;For example, the code snippet given below should be avoid.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numberOfBoxes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addBoxes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;numberOfBoxes&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;removeBoxes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;numberOfBoxes&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead, do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addBoxes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numberOfBoxes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;numberOfBoxes&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;removeBoxes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numberOfBoxes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;numberOfBoxes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ending-notes"&gt;
  &lt;/a&gt;
  Ending Notes
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Don't repeat yourself. They are functions for a reason.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Functions are the verbs of the code and do task to avoid any duplication. When structured correctly, functions will be shorter, well named and much readable. Hence, cleaner code.&lt;/p&gt;

&lt;p&gt;Stay tuned in, for Part 3 of the series.&lt;/p&gt;

</description>
      <category>codequality</category>
      <category>codereview</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>Design resources Marketplace in 15 months - 12k+ resources</title>
      <author>UI HUT</author>
      <pubDate>Mon, 05 Jul 2021 06:56:40 +0000</pubDate>
      <link>https://dev.to/uihut/design-resources-marketplace-in-15-months-12k-resources-16lo</link>
      <guid>https://dev.to/uihut/design-resources-marketplace-in-15-months-12k-resources-16lo</guid>
      <description>&lt;p&gt;Hello Everyone!we are really excited to share the &lt;a href="http://www.uihut.com"&gt;www.uihut.com&lt;/a&gt; Platform with 12000+ Design Resources in this community. UI HUT is a design platform for UX/UI designers, developers, and project managers. Instead of spending your time on a variety of tasks during the design process, UI HUT allows you to focus on what you love most. From last year our team working so hard to achieve our goal. Thatâs really excited for us that we getting users so rapidly and our user's feedbacks inspiring us to expand our services and features.&lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;p&gt;1000+ web Templates UI&lt;/p&gt;

&lt;p&gt;2500+ Illustration&lt;/p&gt;

&lt;p&gt;7000+ Icons&lt;/p&gt;

&lt;p&gt;500+ Mobile Screen UI&lt;/p&gt;

&lt;p&gt;100+ Web App UI&lt;/p&gt;

&lt;p&gt;We are uploading Those more design templates Everyday Our Website &lt;a href="http://www.uihut.com"&gt;www.uihut.com&lt;/a&gt; Thanks a lot, everyone for your time&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Version 2 Features!</title>
      <author>Maxim King</author>
      <pubDate>Mon, 05 Jul 2021 06:56:18 +0000</pubDate>
      <link>https://dev.to/mkcomputing/version-2-features-3ije</link>
      <guid>https://dev.to/mkcomputing/version-2-features-3ije</guid>
      <description>&lt;p&gt;This blog will discuss the new Version 2 of our API and MKComputing Site. &lt;/p&gt;

&lt;p&gt;In this update weâre going to have to massive changes coming to the way things operate on our API, all endpoints have been updated and rewritten for faster operations also we introduce a couple of new endpoints to create Games Servers via the new a Credit / Funds System.&lt;/p&gt;

&lt;p&gt;Our site is also undergoing some changes, weâve added a load of more options to the site which can help you navigate, the site is also may be getting rewritten in fastly once we have completed our compatibility tests. The main feature coming to the site is our new Account Panel which will have all your services in one panel!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>HTML tags | mark</title>
      <author>Carlos Espada</author>
      <pubDate>Mon, 05 Jul 2021 06:31:52 +0000</pubDate>
      <link>https://dev.to/carlosespada/html-tags-mark-38ke</link>
      <guid>https://dev.to/carlosespada/html-tags-mark-38ke</guid>
      <description>&lt;p&gt;Se utiliza para &lt;strong&gt;marcar o resaltar elementos&lt;/strong&gt; que tienen especial relevancia para el usuario en un texto. Un ejemplo clÃ¡sico suele ser destacar el tÃ©rmino buscado en unos resultados de bÃºsqueda, aunque tambiÃ©n puede ser texto en una cita, por ejemplo. No confundir con el &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;, que se utiliza para dar Ã©nfasis y no posee valor semÃ¡ntico.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tipo: &lt;em&gt;inline&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Autocerrado: &lt;em&gt;No&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Valor semÃ¡ntico: &lt;em&gt;SÃ­&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DefiniciÃ³n: &lt;a href="https://www.w3schools.com/tags/tag_mark.asp"&gt;https://www.w3schools.com/tags/tag_mark.asp&lt;/a&gt;&lt;br&gt;
Ejemplo: &lt;a href="https://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_mark"&gt;https://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_mark&lt;/a&gt;&lt;br&gt;
Soporte: &lt;a href="https://caniuse.com/mdn-html_elements_mark"&gt;https://caniuse.com/mdn-html_elements_mark&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>etiquetas</category>
      <category>mark</category>
    </item>
    <item>
      <title>XSS - are you sure you are protected?</title>
      <author>Rafal Hofman</author>
      <pubDate>Mon, 05 Jul 2021 06:15:23 +0000</pubDate>
      <link>https://dev.to/rafhofman/xss-are-you-sure-you-are-protected-5ego</link>
      <guid>https://dev.to/rafhofman/xss-are-you-sure-you-are-protected-5ego</guid>
      <description>&lt;p&gt;As a developer, you probably have heard what &lt;a href="https://owasp.org/www-community/attacks/xss/"&gt;XSS&lt;/a&gt; is and how to defend against it by escaping user input. You also probably might have heard that modern frontend frameworks like React or Angular are XSS safe (due to escaping). Still, though there are some XSS caveats worth remembering: &lt;/p&gt;

&lt;p&gt;Imagine you have a form where the user adds an address to his page/Facebook/Instagram etc. You might have HTML code like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;a href="https://brightinventions.pl/"&amp;gt;User page&amp;lt;/a&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When taking input from the user which later will be displayed in a href tag (or any other "new link" click tag-like frame) it is important to validate the protocol of the URL. User can simply add their page with javascript protocol and execute XSS.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;a href="javascript:alert('XSS!')"&amp;gt;User page&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To conclude: to defend against XSS, besides escaping user input do validate the protocol of URL. Let me know if you have any other interesting thoughts when it comes to XSS!&lt;/p&gt;

</description>
      <category>security</category>
      <category>xss</category>
      <category>javascript</category>
      <category>owasp</category>
    </item>
    <item>
      <title>How I made my Twitter header dynamic</title>
      <author>Chris Bongers</author>
      <pubDate>Mon, 05 Jul 2021 06:06:31 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/how-i-made-my-twitter-header-dynamic-68d</link>
      <guid>https://dev.to/dailydevtips1/how-i-made-my-twitter-header-dynamic-68d</guid>
      <description>&lt;p&gt;I saw the concept of having a dynamic header a while ago and ever since wanted to try this out myself!&lt;/p&gt;

&lt;p&gt;The concept is not new as some people did this before me like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/tdinh_me/status/1397580868747620353"&gt;Tony Dinh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/erikaheidi/how-to-dynamically-update-twitter-cover-image-to-show-latest-followers-using-php-gd-and-twitteroauth-62n"&gt;Erika Heidi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.deveshb.me/create-a-real-time-twitter-banner"&gt;Devesh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My first thoughts were to build this in PHP and use the ImageMagick library. However, I then thought a node script might be more fun to play with.&lt;/p&gt;

&lt;p&gt;You can see the end-result on my own Twitter page: &lt;a href="https://twitter.com/DailyDevTips1"&gt;@DailyDevTips1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RuS0ZNy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624947472196/usJIaly3u.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RuS0ZNy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624947472196/usJIaly3u.jpeg" alt="Dynamic Twitter header"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#planning-a-dynamic-twitter-header"&gt;
  &lt;/a&gt;
  Planning a dynamic Twitter header
&lt;/h2&gt;

&lt;p&gt;But what exactly should happen?&lt;br&gt;
Let's write down some steps.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;script runs&lt;/li&gt;
&lt;li&gt;get the latest 3 Twitter followers&lt;/li&gt;
&lt;li&gt;download profile pictures for these three people&lt;/li&gt;
&lt;li&gt;get the latest blog article title&lt;/li&gt;
&lt;li&gt;place profile pictures and title on a placeholder image&lt;/li&gt;
&lt;li&gt;upload placeholder image to Twitter&lt;/li&gt;
&lt;li&gt;ð run every 60 seconds&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this plan in place, we can act on each step.&lt;/p&gt;

&lt;p&gt;Let's dive straight into it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-our-twitter-dynamic-header-project"&gt;
  &lt;/a&gt;
  Creating our Twitter dynamic header project
&lt;/h2&gt;

&lt;p&gt;As mentioned, we'll build the tool in node, so let's start by creating a new application.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are looking to get started, check out this &lt;a href="https://daily-dev-tips.com/posts/basic-nodejs-express-application/"&gt;basic node express tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For now, let's create a folder for our project and navigate to it. (Run this in your terminal)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;twitter_header
&lt;span class="nb"&gt;cd &lt;/span&gt;twitter_header
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it's time to convert this into a node project. I've added the &lt;code&gt;-y&lt;/code&gt;, so it won't ask all the basic setup questions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next part will be to install the packages we'll be using.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;axios dotenv fs jimp sharp twitter-api-client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running this command will download all the packages we need. Here is a list of what we'll be using them for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;axios&lt;/code&gt;: To make our request and download the images&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dotenv&lt;/code&gt;: For using &lt;code&gt;.env&lt;/code&gt; files, so our API credentials are safe&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;fs&lt;/code&gt;: The node filesystem package, we need this to write our downloaded images to the folder&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;jimp&lt;/code&gt;: A super cool package to do image manipulations&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;twitter-api-client&lt;/code&gt;: Simon's wrapper for the Twitter API in Node.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Firstly open up your &lt;code&gt;package.json&lt;/code&gt; file and change the script to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node index.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll also convert this to a module so that we can use imports.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"module"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we included &lt;code&gt;dotenv&lt;/code&gt;, we should go ahead and make an actual &lt;code&gt;.env&lt;/code&gt; file and place our secrets in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;API_KEY={TWITTER_API_KEY}
API_SECRET={TWITTER_API_SECRET}
CONSUMER_KEY={TWITTER_CONSUMER_KEY}
CONSUMER_SECRET={TWITTER_CONSUMER_SECRET}
TWITTER_HANDLE={TWITTER_HANDLE}
SITEMAP={SITEMAP}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will need to replace the &lt;code&gt;{STRING}&lt;/code&gt; with your actual strings. I'll show you where you can find them in the next section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-our-twitter-app"&gt;
  &lt;/a&gt;
  Making our Twitter App
&lt;/h2&gt;

&lt;p&gt;Let's head over to the &lt;a href="https://developer.twitter.com/en/portal/dashboard"&gt;Twitter Developer portal&lt;/a&gt; to create a new app and get our API keys.&lt;/p&gt;

&lt;p&gt;Sign up for an account if you haven't done this yet. It might take some time to get accepted as a developer.&lt;/p&gt;

&lt;p&gt;Once you are verified, let's create our first app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--imQSWx0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624945841930/sgXyqPH94.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--imQSWx0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624945841930/sgXyqPH94.png" alt="Twitter new app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Give your app a cool name. Mine will be &lt;code&gt;twitter_header&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On the next screen, you'll get two API keys you'll need. Note these down in your &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Once you've done that, you'll get to a detailed screen.&lt;br&gt;
It's important to set the App Permissions to full access.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Tn8C3GO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624946014815/lLgeFxY6X.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Tn8C3GO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624946014815/lLgeFxY6X.jpeg" alt="Twitter app permissions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have done the permissions, head over to the "Keys and tokens" section and create a new Access Token.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LeTbJO46--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624946105906/UJi7J8_rj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LeTbJO46--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624946105906/UJi7J8_rj.png" alt="Twitter access token"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Place this access token and secret in your &lt;code&gt;.env&lt;/code&gt; file as well!&lt;br&gt;
They will allow us to upload the new image for your handle.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#programming-the-node-dynamic-twitter-header-script"&gt;
  &lt;/a&gt;
  Programming the Node dynamic Twitter header script
&lt;/h2&gt;

&lt;p&gt;Now that we have all these side admin things settled let's go ahead and create our actual script.&lt;/p&gt;

&lt;p&gt;Make a new file called &lt;code&gt;index.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We'll start by importing all the packages we need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;TwitterClient&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;twitter-api-client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Jimp&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jimp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;parseString&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xml2js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;sharp&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sharp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to authenticate the TwitterClient.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;twitterClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TwitterClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;apiSecret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;API_SECRET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CONSUMER_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;accessTokenSecret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CONSUMER_SECRET&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to create a function that will retrieve the latest three followers for the Twitter handle provided.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getLatestFollowers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;twitterClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accountsAndUsers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;followersList&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;screen_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TWITTER_HANDLE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;downloads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;downloadImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;profile_image_url_https&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.png`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;downloads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;drawBanner&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we are querying the Twitter API for the follower list for a specific handle.&lt;br&gt;
Then we create a new promise since we only want to continue the script once all three images are downloaded.&lt;/p&gt;

&lt;p&gt;For each follower we download their &lt;code&gt;profile_image_url_https&lt;/code&gt;.&lt;br&gt;
And once these downloads are done, we resolve the promise and invoke a function called &lt;code&gt;drawBanner&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#download-the-followers-profile-pictures"&gt;
  &lt;/a&gt;
  Download the follower's profile pictures
&lt;/h2&gt;

&lt;p&gt;Before we look into that, let's see what the &lt;code&gt;downloadImage&lt;/code&gt; function does.&lt;br&gt;
As you can see, it accepts the URL and a &lt;code&gt;${index}.png&lt;/code&gt; as parameters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;downloadImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;image_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;responseType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;arraybuffer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;sharp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;96&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;96&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we use Axios to download the image as an array buffer.&lt;br&gt;
We then resolve with sharp saving the image double the size we receive it in.&lt;/p&gt;

&lt;p&gt;I wanted to showcase the images a bit bigger, so that's why I'm doing the 2x conversion.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#drawing-the-new-twitter-header"&gt;
  &lt;/a&gt;
  Drawing the new Twitter header
&lt;/h2&gt;

&lt;p&gt;The next function we invoked is the &lt;code&gt;drawBanner&lt;/code&gt; function. The name states it already; it will draw our banner!&lt;/p&gt;

&lt;p&gt;You will see below it accepts the three profile pictures we just downloaded called &lt;code&gt;0.png&lt;/code&gt;, &lt;code&gt;1.png&lt;/code&gt;, and &lt;code&gt;2.png&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, it also uses an image called &lt;code&gt;1500x500.jpg&lt;/code&gt;.&lt;br&gt;
This image is the placeholder. You can create something in Photoshop, Sketch, or &lt;a href="https://www.canva.com/twitter/templates/headers/"&gt;Canva&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;drawBanner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;images&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1500x500.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promiseArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;promiseArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Jimp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
  &lt;span class="nx"&gt;promiseArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getLatestArticleHeadline&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="nx"&gt;promiseArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Jimp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadFont&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Jimp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FONT_SANS_32_BLACK&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promiseArray&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;banner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;imageOne&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;imageTwo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;imageThree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;headline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Current headline: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;headline&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;banner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;composite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;imageOne&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1050&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;banner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;composite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;imageTwo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1158&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;banner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;composite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;imageThree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1264&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;banner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;410&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;410&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;headline&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;banner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1500x500.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;uploadBanner&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function takes an array for the four images we want to merge and create an empty promise array.&lt;/p&gt;

&lt;p&gt;We push each image as a &lt;code&gt;Jimp.read&lt;/code&gt;. This is needed because Jimp needs to load all the images before it can use them.&lt;/p&gt;

&lt;p&gt;We then also push a promise that's called &lt;code&gt;getLatestArticleHeaderline&lt;/code&gt;. This function will retrieve the latest article based on our sitemap.xml file.&lt;/p&gt;

&lt;p&gt;Then we also load a font as a promise so we can use that to write this headline on our banner.&lt;/p&gt;

&lt;p&gt;Then, once all promises are done (so all loaded), we return them as a named array. I find this easier so we can see which variable cohorts with which promise.&lt;/p&gt;

&lt;p&gt;We then use the Jimp composite and print function to place our thumbnails and article headline on our root image.&lt;/p&gt;

&lt;p&gt;The last step is to write it to a file called &lt;code&gt;1500x500.png&lt;/code&gt; and invoke the &lt;code&gt;uploadBanner&lt;/code&gt; function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#retrieving-the-latest-article-headline"&gt;
  &lt;/a&gt;
  Retrieving the latest article headline
&lt;/h2&gt;

&lt;p&gt;Let's take a quick look at how we retrieve the last article headline.&lt;/p&gt;

&lt;p&gt;As you could see in our &lt;code&gt;.env&lt;/code&gt; file, we state where our sitemap.xml file could be found.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getLatestArticleHeadline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SITEMAP&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;parseString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then use Axios to get this sitemap and use the &lt;code&gt;parseString&lt;/code&gt; function to convert it to a readable object.&lt;/p&gt;

&lt;p&gt;From this object, I return the title of the first item as a string.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uploading-the-new-banner-to-twitter"&gt;
  &lt;/a&gt;
  Uploading the new banner to Twitter
&lt;/h2&gt;

&lt;p&gt;The last function we need is the &lt;code&gt;uploadBanner&lt;/code&gt; function.&lt;br&gt;
This should take our new banner and upload it back to Twitter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;uploadBanner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;base64&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1500x500.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;base64&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;twitterClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accountsAndUsers&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accountUpdateProfileBanner&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;banner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;base64&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Upload to Twitter done&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we need to upload our image as a &lt;code&gt;base64&lt;/code&gt; string.&lt;br&gt;
We use the node filesystem to do that.&lt;/p&gt;

&lt;p&gt;Then we call the Twitter API again and pass the base64 string to the &lt;code&gt;accountUpdateProfileBanner&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;I added a log once it's done for my script, but you don't need that part.&lt;/p&gt;

&lt;p&gt;And with that, we have the full flow done. We just need to make sure the script refreshes every 60 seconds.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;getLatestFollowers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;getLatestFollowers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;60000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to see the project or use it, please check out my &lt;a href="https://github.com/rebelchris/twitter-header"&gt;Twitter dynamic header on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>twitter</category>
      <category>webdev</category>
      <category>node</category>
    </item>
    <item>
      <title>Simple alert notification for your react app</title>
      <author>Ali Zulfaqar</author>
      <pubDate>Mon, 05 Jul 2021 05:53:24 +0000</pubDate>
      <link>https://dev.to/alizulfaqar/simple-alert-notification-for-your-react-app-3plm</link>
      <guid>https://dev.to/alizulfaqar/simple-alert-notification-for-your-react-app-3plm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#reacttoastify"&gt;
  &lt;/a&gt;
  react-toastify
&lt;/h2&gt;

&lt;p&gt;react-toastify is a npm package to replace your default alert notification on the browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;Use the node package manager (npm) to install react-toastify.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/react-toastify"&gt;react-toastify&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; react-toastify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage-with-class-component"&gt;
  &lt;/a&gt;
  Usage with class component
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ToastContainer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toast&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-toastify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-toastify/dist/ReactToastify.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Warning&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Default&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Notify!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ToastContainer&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage-with-functional-component"&gt;
  &lt;/a&gt;
  Usage with functional component
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ToastContainer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toast&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-toastify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-toastify/dist/ReactToastify.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Warning&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Default&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;notify&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Notify!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ToastContainer&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, ToastContainer have the attributes as below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ToastContainer&lt;/span&gt;
  &lt;span class="na"&gt;position=&lt;/span&gt;&lt;span class="s"&gt;"top-right"&lt;/span&gt;
  &lt;span class="na"&gt;autoClose=&lt;/span&gt;&lt;span class="s"&gt;{5000}&lt;/span&gt;
  &lt;span class="na"&gt;hideProgressBar=&lt;/span&gt;&lt;span class="s"&gt;{false}&lt;/span&gt;
  &lt;span class="na"&gt;newestOnTop=&lt;/span&gt;&lt;span class="s"&gt;{false}&lt;/span&gt;
  &lt;span class="na"&gt;closeOnClick&lt;/span&gt;
  &lt;span class="na"&gt;rtl=&lt;/span&gt;&lt;span class="s"&gt;{false}&lt;/span&gt;
  &lt;span class="na"&gt;pauseOnFocusLoss&lt;/span&gt;
  &lt;span class="na"&gt;draggable&lt;/span&gt;
  &lt;span class="na"&gt;pauseOnHover&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
{/* Same as */}
&lt;span class="nt"&gt;&amp;lt;ToastContainer&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;With a few steps to install the package and usage with code, you now have a colourful alert to use to make it more attractive for user, thank you for your time. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>npm</category>
    </item>
    <item>
      <title>Anvil Platform : Build Full-Stack Apps with only Python</title>
      <author>Bek Brace</author>
      <pubDate>Mon, 05 Jul 2021 05:32:30 +0000</pubDate>
      <link>https://dev.to/bekbrace/anvil-platform-build-full-stack-apps-with-only-python-hle</link>
      <guid>https://dev.to/bekbrace/anvil-platform-build-full-stack-apps-with-only-python-hle</guid>
      <description>&lt;p&gt;Anvil is a platform or a framework for building full-stack web applications with only Python.&lt;/p&gt;

&lt;p&gt;So, the server-side code is in Python, the client-side code is also in Python.&lt;br&gt;
ANVIL URL : &lt;a href="https://anvil.works"&gt;https://anvil.works&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also store your data for your app using a database system  built on top of PostgreSQL.&lt;/p&gt;

&lt;p&gt;Check out my latest Video on Anvil Platform and how you can create a web application in under 10 minutes using Anvil GUI Tools&lt;/p&gt;

&lt;p&gt;Check out my 15 m video presentation on how you can create a Feedback form very quickly.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/liZThmkIwys"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Just to be clear, Anvil is a web GUI tool where you can drag and drop elements to build your web application in a matter of minutes, plus you can deploy it  immediately.&lt;/p&gt;

&lt;p&gt;Anvil was founded by Meredydd who is a software developer living in Cambridge. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GcXIEw9L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7ut7vtp88vmqyguc9xz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GcXIEw9L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7ut7vtp88vmqyguc9xz.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The idea behind Anvil according to its founder, is that the way we create web applications is not efficient enough, and as I am myself a Pythonista, I was intrigued by this idea of creating full stack web applications using only Python code. backend and frontend&lt;/p&gt;

&lt;p&gt;So the journey starts from your database where you have you data stored in rows and columns in MySQL database for example, then you turn these data into objects on the server, they have properties and methods that can be accessed, and you don't leave them as objects but you have to turn them into JSON format and you can send them to Django rest framework or any other Rest framework using http methods like get post put and delete.&lt;br&gt;
On the other side of the HTTP connection there is JavaScript that is going to turn JSON in JavaScript object with other methods and properties, then we have to transform that into HTML DOM for the browser to render it and CSS to turn it into pixels .. &lt;/p&gt;

&lt;p&gt;There are a lot of transformations here which are somehow repetitive and annoying, you have to learn frameworks, markup languages, JavaScript, plus if you want to use something like Docker containers with MySQL in a mac , windows or any Linux disrto ; it's a big headache,&lt;/p&gt;

&lt;p&gt;Alright, so how could anvil do a better job ? &lt;br&gt;
So instead of html, css and its many frameworks, this will be substituted by Visual UI builder in Python, as I told you it's a GUI drag-and-drop system, and you don't have to worry about anything else.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bekbrace.com"&gt;https://bekbrace.com&lt;/a&gt; &lt;br&gt;
Thank you for reading and watching &lt;br&gt;
Signin' out / Peace&lt;/p&gt;

&lt;p&gt;Facebook: &lt;a href="https://www.facebook.com/bekbrace%E2%80%8B%E2%80%8B"&gt;https://www.facebook.com/bekbraceââ&lt;/a&gt; &lt;br&gt;
DEV profile: &lt;a href="https://dev.to/bekbrace%E2%80%8B%E2%80%8B"&gt;https://dev.to/bekbraceââ&lt;/a&gt;&lt;br&gt;
GitHub page: &lt;a href="https://github.com/BekBrace%E2%80%8B"&gt;https://github.com/BekBraceâ&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>javascript</category>
      <category>html</category>
      <category>sql</category>
    </item>
    <item>
      <title>01-Installing Visual Studio Code for JavaScript Development</title>
      <author>Wriju's Blog</author>
      <pubDate>Mon, 05 Jul 2021 04:43:11 +0000</pubDate>
      <link>https://dev.to/wrijugh/01-installing-visual-studio-code-for-javascript-development-3dff</link>
      <guid>https://dev.to/wrijugh/01-installing-visual-studio-code-for-javascript-development-3dff</guid>
      <description>&lt;p&gt;Visual Studio Code is the ultimate editor for JavaScript development. I would like to demonstrate how to set it up and make it ready for the development. In later part of another video, I will demonstrate about various different productivity tips for Visual Studio code and explore some essential Extensions. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/X_qtwQLq6Uw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>react</category>
      <category>vscode</category>
    </item>
    <item>
      <title>Some Experiments with GitHub Copilot</title>
      <author>Rahul Banerjee</author>
      <pubDate>Mon, 05 Jul 2021 04:42:29 +0000</pubDate>
      <link>https://dev.to/rahulbanerjee99/some-experiments-with-github-copilot-4jao</link>
      <guid>https://dev.to/rahulbanerjee99/some-experiments-with-github-copilot-4jao</guid>
      <description>&lt;p&gt;I recently got my hands the GitHub Copilot extension for VS Code and it's amazing (borderline scary)&lt;/p&gt;

&lt;p&gt;The examples below are in Python&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#function-to-get-pokemon-data"&gt;
  &lt;/a&gt;
  Function to get Pokemon Data
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SzlPnBit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1roh0ttkd0v38wm8dun0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SzlPnBit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1roh0ttkd0v38wm8dun0.gif" alt="pokemonGithub"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Was able to auto-complete my comment as well. Initially I never intended to save it to a json file.&lt;/li&gt;
&lt;li&gt;Added some in-line code comments&lt;/li&gt;
&lt;li&gt;Used an external library (requests) to make a request. Used Json to save the data.&lt;/li&gt;
&lt;li&gt;Chose a decent file name on it's own&lt;/li&gt;
&lt;li&gt;Was able to find a data source, surprisingly someone's github repo &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#function-to-zip-and-unzip-file"&gt;
  &lt;/a&gt;
  Function to zip and unzip file
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rWdJfRzh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5v3ee8tz2myq68b62w7s.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rWdJfRzh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5v3ee8tz2myq68b62w7s.gif" alt="zipUnzip"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Was able to import all the necessary libraries. Although it did import shutil and never used.&lt;/li&gt;
&lt;li&gt;Used zipfile library to unzip/zip&lt;/li&gt;
&lt;li&gt;For the second function, it didn't import the zipfile liibrary.&lt;/li&gt;
&lt;li&gt;Was able to use the right parameters&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#building-a-tictactoe-game"&gt;
  &lt;/a&gt;
  Building a tictactoe game
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D6jLlh_1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvlqv7nudk4dbohsa1v3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D6jLlh_1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvlqv7nudk4dbohsa1v3.gif" alt="tictactoe"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generated 64 lines of code&lt;/li&gt;
&lt;li&gt;Was able to write functions for various purposes&lt;/li&gt;
&lt;li&gt;Knew the winning combinations of a tictactoe board&lt;/li&gt;
&lt;li&gt;Added Error Handling&lt;/li&gt;
&lt;li&gt;Added print statements and ability to take input from user&lt;/li&gt;
&lt;li&gt;Logic to check the result of the game&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although it wrote all the sub-functions, it never invoked them to actually build a playable game &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#crypto-price"&gt;
  &lt;/a&gt;
  Crypto Price
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ncQhke2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvgt16k7fbwbwircp7y9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ncQhke2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvgt16k7fbwbwircp7y9.gif" alt="crypto"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Added a parameter &lt;/li&gt;
&lt;li&gt;Used a crypto api to get the data&lt;/li&gt;
&lt;li&gt;Was able to return the correct column for the price&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#build-a-streamlit-app-to-display-github-repos"&gt;
  &lt;/a&gt;
  Build a streamlit app to display Github Repos
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FRNFO1F6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gdxgqqyuf60bw3exlbdc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FRNFO1F6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gdxgqqyuf60bw3exlbdc.gif" alt="githubStreamlit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this, I had to write multiple comments and it actually felt like I was pair-programming with the Copilot. However, most of the code was generated by Copilot.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Was able to get data from github api&lt;/li&gt;
&lt;li&gt;Since I mentioned popular, it sorted the repos based on 'stars'. It is mind-boggling how it was able to relate 'stars' to popularity.&lt;/li&gt;
&lt;li&gt;It was able to use an external library streamlit (streamlit is used to build web apps)&lt;/li&gt;
&lt;li&gt;It also added a title and text to be displayed in the web app&lt;/li&gt;
&lt;li&gt;It re-used the previously created function&lt;/li&gt;
&lt;li&gt;For most parts, it was auto-completing my comments as well&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#general-observations"&gt;
  &lt;/a&gt;
  General Observations
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The variable and function names are pretty explanatory&lt;/li&gt;
&lt;li&gt;Added relevant in-line code comments&lt;/li&gt;
&lt;li&gt;Was able to use external libraries&lt;/li&gt;
&lt;li&gt;Was able to get data from various data sources&lt;/li&gt;
&lt;li&gt;The format of the code was clean with proper indentation and line breaks&lt;/li&gt;
&lt;li&gt;It took me quite a few tries (trying out different comments) for it to actually use streamlit and build a simple app. In the end, I ended up importing the library and it started generating code using the library. However, sometimes it was able to generate code on its own as well&lt;/li&gt;
&lt;li&gt;When trying to get the pokemon/crypto data, it often made suggestions that used beautiful soup to scrape the data. Web Scraping is not always the best option and in some cases, you might even end up breaking some laws.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#some-weirdness"&gt;
  &lt;/a&gt;
  Some weirdness
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Sometimes it acted weird. For instance, at times the generated code contained local files paths for some other users,eg "Users/Projects/......."&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I tried getting suggestions for a variable named api_key and it actually suggested a string with random keys. Ofc, it might actually be random but yeah that was weird. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At times it generated receptive code. Eg: When I was trying to generate code for streamlit, it generated the same two lines over and over again&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It suggests a bunch of unnecessary imports at times&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For some reason, it kept on generating code that used Dash although I specifically mentioned streamlit&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#my-views-and-a-few-questions"&gt;
  &lt;/a&gt;
  My Views and a few questions
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;My Views are my own&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is sure going to improve a software developer's productivity. However, I don't see it replacing a software developer. Copilot often generated non-sensical and repetitive code. It didn't import the necessary libraries at times as well. It is basically like Kite or TabNine on steroids.Â &lt;/p&gt;

&lt;p&gt;A good analogy I can think of is Google Translate. It's been there for years but it has not replaced the need for an actual translator. You could translate an article from English to Japanese in a few seconds. However, you would still need somebody fluent in both languages to ensure that the translation is grammatically correct and it delivers the same message as the original article.&lt;/p&gt;

&lt;p&gt;Another issue I can think ofâ-âWho would be liable for the code? If I used GitHub to generate some code and later get sued by someone for some reason. Can I put the blame on GitHub? GitHub will most likely make users agree to some terms and conditions which prevent them from being sued. So we would actually need somebody experienced in software to ensure that the generated code is safe to use.&lt;/p&gt;

&lt;p&gt;Although GitHub Copilot is good for new projects, I am not sure if it would be as useful when working with an existing codebase. In an existing codebase, it would have to follow the existing coding style and be able to re-use already written code. I have not tried working with Copilot in an already existing project so I can't comment much&lt;/p&gt;

&lt;p&gt;Assuming it is constantly learning as more users use it, how would it distinguish 'good' code from 'bad' or 'spaghetti code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;One thing GitHub copilot can guarantee is that it is going to make coding and software, in general, more accessible ð¯&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What are your thoughts on the Copilot? Did you try out anything cool with it? How do you think it is going to affect the Software/Data Science Industry? Let me know in the commentsPublishSave draftRevert new changes&lt;/p&gt;




</description>
      <category>github</category>
      <category>python</category>
      <category>programming</category>
      <category>discuss</category>
    </item>
  </channel>
</rss>
