<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to run automated telephone conversations through a telephony vendor</title>
      <author>Arthur Grishkevich</author>
      <pubDate>Thu, 26 Aug 2021 11:47:01 +0000</pubDate>
      <link>https://dev.to/arrrgr/how-to-run-automated-telephone-conversations-through-a-telephony-vendor-go7</link>
      <guid>https://dev.to/arrrgr/how-to-run-automated-telephone-conversations-through-a-telephony-vendor-go7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-use-your-own-telephony-for-your-dasha-apps"&gt;
  &lt;/a&gt;
  Why use your own telephony for your Dasha apps
&lt;/h2&gt;

&lt;p&gt;The goal of any development is to deliver some type of business value. In the case of Dasha conversational AI apps, the business value that our customers pursue varies. Yet in over 95% of cases today, it is delivered through the telephone channel. In that sense, most of our customers in production use Dasha to automate some part of their telephone communications with customers. &lt;/p&gt;

&lt;p&gt;Most of these companies have a telephony vendor. Connecting the Dasha application to their existing telephony means that Dasha can seamlessly transfer calls to a live agent, if such a need arises. It also means that Dasha can make phone calls from phone numbers reserved for this company, and answer inbound phone calls which are directed to the company phone number. &lt;/p&gt;

&lt;p&gt;In this tutorial we will go over connecting Dasha for both inbound and outbound telephone communication using &lt;a href="https://voximplant.com"&gt;Voximplant&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-dasha-with-a-third-party-telephony-vendor"&gt;
  &lt;/a&gt;
  How to use Dasha with a third party telephony vendor?
&lt;/h2&gt;

&lt;p&gt;First, you need to know if your vendor supports SIP Trunk connections. Here is a simple decision tree flowchart to help you navigate: &lt;/p&gt;

&lt;p&gt;&lt;a href="//images.contentful.com/pzhspng2mvip/42LZsmJaoIqCNtN7P0emln/4ef3e05786fdb56042d71cf68657e948/Yes__2_.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.contentful.com/pzhspng2mvip/42LZsmJaoIqCNtN7P0emln/4ef3e05786fdb56042d71cf68657e948/Yes__2_.png" alt="Decision making flowchart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To give you an idea of how the integration happens, read below for instructions to integrate Dasha with the telephony vendor Voximplant via a SIP Trunk connection. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preparatory-actions-on-the-dasha-side"&gt;
  &lt;/a&gt;
  Preparatory actions on the Dasha side
&lt;/h3&gt;

&lt;p&gt;Make sure you have node.js version 13+ and npm installed. You will also want the latest version of Visual Studio Code running to edit and test the Dasha app.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Join &lt;a href="https://community.dasha.ai"&gt;Dasha Community&lt;/a&gt; - you will get your API key here automatically&lt;/li&gt;
&lt;li&gt;Open VSCode and install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=dasha-ai.dashastudio&amp;amp;ssr=false"&gt;Dasha Studio Extension&lt;/a&gt; from the extension store.  You’ll get all the DSL syntax highlighting and a GUI interface for debugging your conversation flow.&lt;/li&gt;
&lt;li&gt;Run &lt;strong&gt;&lt;code&gt;npm i -g "@dasha.ai/cli@latest"&lt;/code&gt;&lt;/strong&gt; to install the latest Dasha CLI.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You’ll want to load up a Dasha conversational AI app. For the purposes of this tutorial, you may want to load up either the &lt;a href="https://github.com/dasha-samples/inbound-voximplant-telephony-test"&gt;inbound tester app&lt;/a&gt; for inbound calls.  Or the &lt;a href="https://github.com/arrrgr/outbound-voximplant-telephony-test"&gt;outbound tester app&lt;/a&gt; for outbound calls. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-things-up-on-the-side-of-voximplant-telephony-vendor"&gt;
  &lt;/a&gt;
  Setting things up on the side of Voximplant (telephony vendor)
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://manage.voximplant.com/auth"&gt;Login to your Voximplant account&lt;/a&gt; or &lt;a href="https://manage.voximplant.com/auth/sign_up"&gt;create an account&lt;/a&gt; if you don’t have one.&lt;/li&gt;
&lt;li&gt;Create a Voximplant &lt;a href="https://manage.voximplant.com/applications"&gt;application&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Purchase a Voximplant phone number in the &lt;a href="https://manage.voximplant.com/numbers/my_numbers"&gt;Numbers&lt;/a&gt; section of the control panel and attach it to the app. This number will be used as callerid. &lt;/li&gt;
&lt;li&gt;Go to your &lt;a href="https://manage.voximplant.com/applications"&gt;applications&lt;/a&gt;, click on the app you had created. Click on Numbers &amp;gt; Available and "attach". This number will be used as &lt;strong&gt;callerid&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="//images.contentful.com/pzhspng2mvip/5VsgkVKdqS3K32OFvzT3Nb/057bf2a7de7b97ce80ec27d11e13e03f/Screenshot_at_Jul_27_21-26-49.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.contentful.com/pzhspng2mvip/5VsgkVKdqS3K32OFvzT3Nb/057bf2a7de7b97ce80ec27d11e13e03f/Screenshot_at_Jul_27_21-26-49.png" alt="Voximplant dashboard "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-outbound-calls"&gt;
  &lt;/a&gt;
  For Outbound calls:
&lt;/h3&gt;

&lt;p&gt;Go to Scenarios &amp;gt; Create Scenario, name the Scenario and hit the “plus” sign. You will need to paste the code below in the scenario.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callerid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number_you_bought&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="nx"&gt;VoxEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AppEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CallAlerting&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a call from &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;callerid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// an inbound SIP call from Dasha (the first call leg)&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// an outbound call to PSTN (the second call leg)&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;VoxEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;callPSTN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callerid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CallEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Connected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// answering the call&lt;/span&gt;
            &lt;span class="nx"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="c1"&gt;// adding default event listeners to pass signaling information between two calls&lt;/span&gt;
        &lt;span class="nx"&gt;VoxEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;easyProcess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This scenario be run from the Dasha integration. On an incoming SIP call from Dasha, the phone number which we want to call is passed to the callPSTN method. This is how we connect two calls. Once the call is answered, Dasha will start the conversation. If you want to handle inbound calls to SIP, use your SIP URI as &lt;strong&gt;&lt;code&gt;callerid&lt;/code&gt;&lt;/strong&gt; and replace the &lt;a href="https://voximplant.com/docs/references/voxengine/voxengine/callpstn"&gt;callPSTN&lt;/a&gt; method with &lt;a href="https://voximplant.com/docs/references/voxengine/voxengine/callsip"&gt;callSIP&lt;/a&gt;. If you are using SIP Registrations on your PBX, you need to create a SIP Registration and use it instead of the SIP URI.&lt;/p&gt;

&lt;p&gt;Next,go to the &lt;strong&gt;Users&lt;/strong&gt; section and create a new user. Remember the username and password, they will be used for Dasha's config in the next step.&lt;/p&gt;

&lt;p&gt;Now, click on &lt;strong&gt;Routing&lt;/strong&gt; in the left hand menu. Create a new rule (leave the pattern as default), and attach your scenario to this rule.&lt;/p&gt;

&lt;p&gt;&lt;a href="//images.contentful.com/pzhspng2mvip/3J0JTIMb8Zx0V0qtVtg6UX/3a2e3ba2b2193a1a06b282e30858b849/Screenshot_at_Jul_27_21-45-38.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.contentful.com/pzhspng2mvip/3J0JTIMb8Zx0V0qtVtg6UX/3a2e3ba2b2193a1a06b282e30858b849/Screenshot_at_Jul_27_21-45-38.png" alt="Create new rule in Voximplant dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, Connect your sip trunk with Dasha's using this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dasha sip create-outbound &lt;span class="nt"&gt;--server&lt;/span&gt; &amp;lt;ip_or_dns_of_server:port&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;--domain&lt;/span&gt; &amp;lt;domain_name&amp;gt;] &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;--ask-password&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="nt"&gt;--account&lt;/span&gt; &amp;lt;accountName&amp;gt; &lt;span class="nt"&gt;--transport&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;tcp|udp] &amp;lt;config_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;accountName&lt;/code&gt; is the username you created in the Voximplant panel;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ip_or_dns_of_server:port&lt;/code&gt; is the name of our Voximplant app;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;config_name&lt;/code&gt; is the name of the config we’ll use in the next step.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dasha sip create-outbound &lt;span class="nt"&gt;--server&lt;/span&gt; exampleApp.exampleAcc.n4.voximplant.com &lt;span class="nt"&gt;--account&lt;/span&gt; exampleUsername &lt;span class="nt"&gt;--ask-password&lt;/span&gt; vox_outbound
password: enter_your_password_here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#for-inbound-calls"&gt;
  &lt;/a&gt;
  For Inbound calls:
&lt;/h3&gt;

&lt;p&gt;Connect your sip trunk with Dasha's using this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dasha sip create-inbound &lt;span class="nt"&gt;--application-name&lt;/span&gt; &amp;lt;your_app_name&amp;gt; &amp;lt;config_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;your_app_name&lt;/code&gt; is your Voximplant application name;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;config_name&lt;/code&gt; is the name of the config we’ll use later.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dasha sip create-inbound &lt;span class="nt"&gt;--application-name&lt;/span&gt; exampleApp vox_inbound
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will give us a Dasha’s SIP URI to call. For example: sip:&lt;a href="mailto:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx@sip.us.dasha.ai"&gt;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx@sip.us.dasha.ai&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To see the URI, write: &lt;code&gt;dasha sip list-inbound&lt;/code&gt;.&lt;br&gt;
Let’s put it in our Voximplant scenario instead of "your_SIP_URI".&lt;/p&gt;

&lt;p&gt;Create a scenario inside the app by pressing a plus icon and paste this code in there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;// SIP URI that we get in the next step&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sipURI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;your_SIP_URI&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;VoxEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AppEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CallAlerting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;call&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CallEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Connected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callToDasha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;VoxEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;callSIP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sipURI&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;VoxEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;easyProcess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callToDasha&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the scenario that will be run when we set everything up. We use the &lt;a href="https://voximplant.com/docs/references/voxengine/voxengine/callsip"&gt;callSIP&lt;/a&gt; method to make a call to our SIP URI. On an incoming SIP call from Voximplant, the SIP URI that we want to call is passed to the callSIP method. This is how we connect two call legs. Once the call is answered, Dasha will start a conversation.&lt;/p&gt;

&lt;p&gt;If you are using SIP Registrations on your PBX, you need to create a &lt;a href="https://voximplant.com/docs/howtos/integration/sip/registration"&gt;SIP Registration&lt;/a&gt; and use it instead of the SIP URI.&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Routing&lt;/strong&gt; in the left hand menu. Create a new rule (leave the pattern as default), and attach your scenario to this rule.&lt;/p&gt;

&lt;p&gt;&lt;a href="//images.ctfassets.net/pzhspng2mvip/3J0JTIMb8Zx0V0qtVtg6UX/3a2e3ba2b2193a1a06b282e30858b849/Screenshot_at_Jul_27_21-45-38.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/pzhspng2mvip/3J0JTIMb8Zx0V0qtVtg6UX/3a2e3ba2b2193a1a06b282e30858b849/Screenshot_at_Jul_27_21-45-38.png" alt="Create new rule in Voximplant dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-your-backend-in-order-and-start-calling"&gt;
  &lt;/a&gt;
  Get your backend in order and start calling
&lt;/h2&gt;

&lt;p&gt;The setup is ready, now we need a local app or backend to run our Voximplant scenario using Dasha.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#placing-outbound-calls"&gt;
  &lt;/a&gt;
  Placing outbound calls:
&lt;/h3&gt;

&lt;p&gt;Open your VS Code Dasha conversational AI app project. Open up &lt;strong&gt;index.js&lt;/strong&gt; file and replace &lt;strong&gt;configName&lt;/strong&gt; in &lt;strong&gt;&lt;code&gt;dasha.sip.Endpoint&lt;/code&gt;&lt;/strong&gt; with your config name. Do the same with the &lt;strong&gt;&lt;code&gt;name&lt;/code&gt;&lt;/strong&gt; field in package.json. To see all the available configs for sip outbound, run the &lt;strong&gt;&lt;code&gt;dasha sip list-outbound&lt;/code&gt;&lt;/strong&gt; command.&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;*.dashaapp&lt;/strong&gt; file, change the &lt;strong&gt;&lt;code&gt;name&lt;/code&gt;&lt;/strong&gt; field so it matches our config name.&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;outbound calls&lt;/strong&gt;, run: &lt;strong&gt;&lt;code&gt;node index.js &amp;lt;the number to call in international format e.g. 12223334455&amp;gt;&lt;/code&gt;&lt;/strong&gt;. Now you can watch the application deployment and registration process in the console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#taking-inbound-calls"&gt;
  &lt;/a&gt;
  Taking inbound calls:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open up your VS Code with the Dasha project open.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;package.json&lt;/strong&gt; file, replace the &lt;strong&gt;&lt;code&gt;name&lt;/code&gt;&lt;/strong&gt; field with your config name. To see all the available configs for sip inbound, run the &lt;strong&gt;&lt;code&gt;dasha sip list-inbound&lt;/code&gt;&lt;/strong&gt; command.
In the inbound.dashaapp file, change the &lt;strong&gt;&lt;code&gt;name&lt;/code&gt;&lt;/strong&gt; field so that it matches your config name.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To test the integration, run npm i from your folder.&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;inbound calls&lt;/strong&gt;, run: &lt;strong&gt;&lt;code&gt;node main.js&lt;/code&gt;&lt;/strong&gt;. Now you can call to the phone number which you purchased in Voximplant’s dashboard. &lt;/p&gt;

&lt;p&gt;You’ll be able to track application deployment in the console. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In conclusion
&lt;/h2&gt;

&lt;p&gt;Congrats, you’ve successfully connected your Dasha conversational AI app to your custom telephony. This is exciting. You can now call anyone in the world. &lt;br&gt;
If you haven’t yet, you can join &lt;a href="https://community.dasha.ai"&gt;Dasha community&lt;/a&gt; and let us know how useful this was to you. If you want a super quick answer - ask your questions on &lt;a href="https://stackoverflow.com"&gt;StackOverflow&lt;/a&gt;, using the #dasha hashtag.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Using Python to Loop through lists</title>
      <author>hrishikesh1990</author>
      <pubDate>Thu, 26 Aug 2021 11:39:46 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/using-python-to-loop-through-lists-3nlm</link>
      <guid>https://dev.to/hrishikesh1990/using-python-to-loop-through-lists-3nlm</guid>
      <description>&lt;p&gt;In this short tutorial, we look at how to use Python to loop through a list. We break down the code so that you understand the concept thoroughly.&lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents-python-loop-through-list"&gt;
  &lt;/a&gt;
  Table of Contents - Python loop through list
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#python-loop-through-list"&gt;Python loop through list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-and-explanation"&gt;Code and explanation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#closing-thoughts"&gt;Closing thoughts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#python-loop-through-list"&gt;
  &lt;/a&gt;
  Python Loop Through List:
&lt;/h2&gt;

&lt;p&gt;Quite often you might find yourself wanting to run through all the items in your list. This could be to either display the items or to perform a task on the items. &lt;/p&gt;

&lt;p&gt;An example of this would be to change the case of a list of strings or to perform arithmetic operations on a list of numbers. &lt;/p&gt;

&lt;p&gt;In both cases, you are required to perform a single task over all the items in a list. Python provides a method to achieve this. Using a ‘for’ loop, we can make Python loop through the list and perform the task. &lt;/p&gt;

&lt;p&gt;This is the most efficient way to loop through a list with ease irrespective of whether the list contains 10 or 1000 items.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-and-explanation"&gt;
  &lt;/a&gt;
  Code and Explanation:
&lt;/h2&gt;

&lt;p&gt;Let's say we have a list containing the various colors of the rainbow.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"orange"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"yellow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"green"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"indigo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"violet"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let us assume we have to print each color in a different line. To achieve this manually, we would have to keep changing the index in our code for each color. However, by using the for loop we leave it to Python to loop through our list. &lt;/p&gt;

&lt;p&gt;Let’s write the code to do that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"orange"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"yellow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"green"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"indigo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"violet"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code iterates over the list and prints the colors in the list. Let’s take a closer look at what has happened here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This line tells Python to take the first value from the list &lt;code&gt;colors&lt;/code&gt; and assign it with the variable &lt;code&gt;color&lt;/code&gt;. And once that is done we move on to the next line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since &lt;code&gt;color&lt;/code&gt; now contains the first value which in our case is &lt;code&gt;red&lt;/code&gt;, it gets printed. Python then looks to see if there are more elements in the list and since it does, it repeats the process again until it has done it for all the items. &lt;/p&gt;

&lt;p&gt;To summarize what we have done here, we have assigned a list called &lt;code&gt;colors&lt;/code&gt; and we create a for loop which tells Python that &lt;em&gt;"for every color in the list of colors, print the color”&lt;/em&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts:
&lt;/h2&gt;

&lt;p&gt;As you may have noticed, we named our list &lt;code&gt;colors&lt;/code&gt; (plural) and the variable in our for loop as &lt;code&gt;color&lt;/code&gt; (Singular). This is a very good practice when it comes to naming as it would help make your code more readable. &lt;/p&gt;

&lt;p&gt;However, this is only a best practice and any other variables would also work. Other tutorials may contain more concise but complex methods in Python to loop through a list, but I would recommend following this method as it is more readable. Once you have understood this feel free to try out more complex methods.&lt;/p&gt;

&lt;p&gt;Do let me know your thoughts in the comments section below. :)&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Kali-Linux</title>
      <author>Kouluru Nanda Kishore Reddy</author>
      <pubDate>Thu, 26 Aug 2021 11:25:29 +0000</pubDate>
      <link>https://dev.to/koulurunandakishorereddy/kali-linux-1ni0</link>
      <guid>https://dev.to/koulurunandakishorereddy/kali-linux-1ni0</guid>
      <description>&lt;p&gt;When you start looking into a career in cybersecurity, one of the biggest things you will quickly learn is how important Kali Linux is to cybersecurity professionals and especially professional penetration testers. In case you’re not familiar with this very interesting version of Linux, in this article, we’ll dive into what exactly Kali Linux is and discuss the best way to learn this penetration testing swiss army knife operating system.&lt;/p&gt;

&lt;h1&gt;What is Kali Linux?&lt;/h1&gt;

&lt;p&gt;Kali Linux (formerly known as BackTrack Linux) is an open-source, Debian-based Linux distribution aimed at advanced Penetration Testing and Security Auditing. Kali Linux contains several hundred tools targeted towards various information security tasks, such as Penetration Testing, Security Research, Computer Forensics and Reverse Engineering. Kali Linux is a multi-platform solution, accessible and freely available to information security professionals and hobbyists.&lt;/p&gt;

&lt;p&gt;Kali Linux was released on the 13th March 2013 as a complete, top-to-bottom rebuild of BackTrack Linux, adhering completely to Debian development standards.&lt;/p&gt;

&lt;h1&gt;A brief history of Kali Linux&lt;/h1&gt;

&lt;p&gt;Kali Linux was released in 2013 by the organization Offensive Security, which also offers cybersecurity training and certifications.  Offensive Security took the pre-existing security-focused Backtrack Linux and redeveloped it into Kali based on the Debian variant of Linux.  Kali Linux is free and it is made very clear that it will always be free. &lt;/p&gt;

&lt;h1&gt;Is Kali Linux illegal?&lt;/h1&gt;

&lt;p&gt;Kali Linux is not illegal by itself. After all, it is just an OS. It is however a tool for hacking too and when someone uses it especially for hacking, it is illegal. It is legal If you install it for useful purposes like learning, or teaching, or using it in the way to fortify your software or your network as It is not illegal to install any Operating System which is licensed and available for download.&lt;/p&gt;

&lt;h1&gt;How to install Kali Linux?&lt;/h1&gt;

&lt;p&gt;Kali Linux installation is a fairly simple process and you have multiple installation options. Most preferred ones include:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Installing Kali Linux by making a Kali (Linux) bootable USB drive&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kali Linux hard disk install&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using virtualization software, such as VMware or VirtualBox&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dual booting Kali Linux with the operating system&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;System Requirements for Kali Linux- (How much RAM does Kali Linux need?)&lt;/h2&gt;

&lt;p&gt;All you have to make sure is that you have compatible hardware. Kali is supported on i386, amd64, and ARM (both ARMEL and ARMHF) platforms. The hardware requirements are minimal as listed below, although better hardware will naturally provide better performance.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A minimum of 20 GB disk space for the Kali Linux install.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RAM for i386 and amd64 architectures, minimum: 1GB, recommended: 2GB or more.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CD-DVD Drive / USB boot support/ VirtualBox&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Why do hackers use Kali Linux?&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mBUgp_Nz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625751737966/dI1ZAD9Ky.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mBUgp_Nz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625751737966/dI1ZAD9Ky.jpeg" alt="1_3kQeDluVlgMzRTEtoL208w.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Previously known as Backtrack, Kali Linux advertises itself as a more polished successor with more testing-centric tools, unlike Backtrack which had multiple tools that would serve the same purpose, in turn, making it jampacked with unnecessary utilities. This makes ethical hacking using Kali Linux a simplified task.&lt;/p&gt;

&lt;h1&gt;Why do cybersecurity professionals prefer Kali Linux?&lt;/h1&gt;

&lt;p&gt;One of the biggest reasons cyber professionals use and often prefer Kali Linux is the fact that all of the source code is open-source, meaning that the system can be tweaked to the liking of the cybersecurity professional that is using it.  This is not necessarily done often, it does provide the option to personalize Kali for specific cybersecurity tasks. Kali Linux also comes with multi-language support.&lt;/p&gt;

&lt;p&gt;Interestingly, up until 2019 Kali Linux had been designed to be used for single root user access, meaning that the user is given full rights and access to everything.  This was recently changed to accommodate users that were using Kali Linux more often than just for cybersecurity purposes.&lt;/p&gt;

&lt;h1&gt;The cyber advantage of using Kali Linux&lt;/h1&gt;

&lt;p&gt;Those were just a few examples of the popular applications that come pre-installed on Kali Linux. While it is true that all of the applications on Kali Linux are free and can be downloaded on other operating systems, Kali Linux makes it a lot easier for the user by doing all of the work for you and compiling them in one operating system distribution.&lt;/p&gt;

&lt;h1&gt;Kali Linux Features&lt;/h1&gt;

&lt;ul&gt;
      &lt;li&gt;
&lt;b&gt;More than 600 penetration testing tools included: &lt;/b&gt;After reviewing every tool that was included in BackTrack, we eliminated a great number of tools that either simply did not work or which duplicated other tools that provided the same or similar functionality. Details on what’s included are on the Kali Tools site.&lt;/li&gt;
      &lt;li&gt;
&lt;b&gt;Free (as in beer) and always will be:&lt;/b&gt; Kali Linux, like BackTrack, is completely free of charge and always will be. You will never, ever have to pay for Kali Linux.&lt;/li&gt;
      &lt;li&gt;
&lt;b&gt;Open source Git tree: &lt;/b&gt;We are committed to the open-source development model and our development tree is available for all to see. All of the source code which goes into Kali Linux is available for anyone who wants to tweak or rebuild packages to suit their specific needs.&lt;/li&gt;
      &lt;li&gt;
&lt;b&gt;Wide-ranging wireless device support:&lt;/b&gt; A regular sticking point with Linux distributions has been supported for wireless interfaces. We have built Kali Linux to support as many wireless devices as we possibly can, allowing it to run properly on a wide variety of hardware and making it compatible with numerous USB and other wireless devices.&lt;/li&gt;
      &lt;li&gt;
&lt;b&gt;Developed in a secure environment:&lt;/b&gt; The Kali Linux team is made up of a small group of individuals who are the only ones trusted to commit packages and interact with the repositories, all of which is done using multiple secure protocols.&lt;/li&gt;
      &lt;li&gt;
&lt;b&gt;GPG signed packages and repositories: &lt;/b&gt;Every package in Kali Linux is signed by each developer who built and committed it, and the repositories subsequently sign the packages as well.&lt;/li&gt;
      &lt;li&gt;
&lt;b&gt;Multi-language support:&lt;/b&gt; Although penetration tools tend to be written in English, we have ensured that Kali includes true multilingual support, allowing more users to operate in their native language and locate the tools they need for the job.&lt;/li&gt;
      &lt;li&gt;
&lt;b&gt;Completely customizable: &lt;/b&gt;We thoroughly understand that not everyone will agree with our design decisions, so we have made it as easy as possible for our more adventurous users to customize Kali Linux to their liking, all the way down to the kernel.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Conclusion and Key Points&lt;/h2&gt;

&lt;ul&gt;
      &lt;li&gt;Keep in mind that Kali Linux, while not overly complicated, isn’t exactly for beginners, so take your time as you work through the tools.  Try to learn at least one new thing each day.&lt;/li&gt;
      &lt;li&gt;If you’re new to the world of Linux, consider starting with another Linux system like Ubuntu to get a taste of what you would be getting into.&lt;/li&gt;
      &lt;li&gt;Never attempt to use the tools in Kali Linux against any system which are not authorized to access.  There are plenty of legally free systems out there to practice your skills.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;b&gt;If you want to know how to download Kail Linux on the android device comment below&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading 😊&lt;/p&gt;

</description>
      <category>linux</category>
      <category>cybersecurity</category>
      <category>programming</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Build a human-like conversational AI app in an hour</title>
      <author>Arthur Grishkevich</author>
      <pubDate>Thu, 26 Aug 2021 11:20:32 +0000</pubDate>
      <link>https://dev.to/arrrgr/build-a-human-like-conversational-ai-app-in-an-hour-3031</link>
      <guid>https://dev.to/arrrgr/build-a-human-like-conversational-ai-app-in-an-hour-3031</guid>
      <description>&lt;p&gt;Folks who work in insurance will tell you that it’s about as far from a sexy industry as one can get. Call me narrow-minded but I think any industry can be made sexier with a bit of AI. In today’s tutorial we will do just that: build a conversational AI app that will take a customer’s call, check their policy number and answer a few questions. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prestart"&gt;
  &lt;/a&gt;
  Pre-start
&lt;/h2&gt;

&lt;p&gt;If this is your first time building a conversational AI app with Dasha, you want to join our &lt;a href="https://community.dasha.ai"&gt;developer community&lt;/a&gt;. This is where you will find all the answers to all of your questions (42). Also, as we are in a closed developer beta right now, this is where we will give you your API key to use Dasha. &lt;/p&gt;

&lt;p&gt;This is the app you will build today: &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/46nyWBTSHgs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;To begin building with Dasha you will need to have Visual Studio Code, NPM and Node.js installed, ideally in their latest versions. Now do the following: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=dasha-ai.dashastudio&amp;amp;ssr=false"&gt;Dasha Studio&lt;/a&gt; VSCode extension&lt;/li&gt;
&lt;li&gt;Open the terminal in VSCode and install Dasha command line interface &lt;code&gt;npm i -g "@dasha.ai/cli"&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Now, run the command &lt;code&gt;dasha account login&lt;/code&gt; and follow the browser prompt when it pops up. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You should probably join our &lt;a href="https://community.dasha.ai"&gt;developer community&lt;/a&gt; we obsess over answering all our community members ASAP.&lt;/p&gt;

&lt;p&gt;If you prefer video tutorials, here you go: &lt;/p&gt;

&lt;p&gt;%[&lt;a href="https://www.youtube.com/watch?v=H22H-WBdZko"&gt;https://www.youtube.com/watch?v=H22H-WBdZko&lt;/a&gt;]&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conversation-structure"&gt;
  &lt;/a&gt;
  Conversation structure
&lt;/h2&gt;

&lt;p&gt;In order for you to better understand the conversation flow of what we are building, here is the basic structure of the conversational AI app. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#perfect-world-conversation"&gt;
  &lt;/a&gt;
  Perfect world conversation
&lt;/h3&gt;

&lt;p&gt;The user/customer calls in and asks to confirm some information about the insurance policy. &lt;/p&gt;

&lt;p&gt;The AI asks for their policy number. The AI then reads the policy number back out to the user to confirm it. If the number is confirmed, Dasha looks up account details. If such an account exists, it tells the user as much and asks what they are after. If no such account exists, it tells the user as much. &lt;/p&gt;

&lt;p&gt;The user may then proceed to ask one of a number of questions, such as, “does my policy cover accidents” or “what is the status of my claim”.&lt;/p&gt;

&lt;p&gt;That’s pretty much it. Sounds simple enough. Before we get to the app, let’s go over the Dasha AI Platform architecture. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dasha-ai-platform-architecture"&gt;
  &lt;/a&gt;
  Dasha AI Platform architecture
&lt;/h2&gt;

&lt;p&gt;There are three main parts to the product which makes building, training, developing and maintaining your human-like conversational apps possible. They are - Dasha Studio, Dasha SDK and Dasha Platform. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KeLeGAqK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/izs76ymbgie7807bel0t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KeLeGAqK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/izs76ymbgie7807bel0t.png" alt="Dasha architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dasha-studio"&gt;
  &lt;/a&gt;
  Dasha Studio
&lt;/h3&gt;

&lt;p&gt;Is an extension to VSCode. You use the Studio to create your conversational workflow, provide data to train the neural networks to recognize intents, define ways in which the AI is to respond to the user, as it is talking to the user. The Studio lets you create these apps using DashaScript, an event-driven, domain-specific language derived from TypeScript. In essence, DashaScript is a collection of commands which tell the AI services in the Dasha Cloud Platform how to behave in various situations. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dasha-sdk"&gt;
  &lt;/a&gt;
  Dasha SDK
&lt;/h3&gt;

&lt;p&gt;Is a library used to integrate your applications or services to the Dasha Cloud. It uses GRPC for two way communication between your application and Dasha Cloud Platform &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dasha-cloud-platform"&gt;
  &lt;/a&gt;
  Dasha Cloud Platform
&lt;/h3&gt;

&lt;p&gt;The Dasha Cloud is where the magic happens. It provides the AI-as-a-Service components which enable you to create apps that are wildly human-like in the way they interact with users. Best in class speech to text, text to speech, natural language processing, understanding and generation, all come as a service of the Dasha Platform. And we are constantly improving existing services and building new ones. With any application you build using our technology, you will have access to all the newest updates. For more details on the Cloud Platform’s services, peek &lt;a href="https://dasha.ai/en-us/blog/dasha-conversational-ai-as-a-service"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-insurance-customer-service-conversational-ai-app"&gt;
  &lt;/a&gt;
  The insurance customer service conversational AI app
&lt;/h2&gt;

&lt;p&gt;Go ahead and open the &lt;a href="https://github.com/arrrgr/insurance-customer-service-demo"&gt;source code&lt;/a&gt; to the application in your VSCode. You can either clone and open the app in your terminal or download, unzip and open the folder in VSCode using File &amp;gt; Open. &lt;/p&gt;

&lt;p&gt;You will now want to open four files. These are essentially what make your conversational AI app built with Dasha possible. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#indexjs"&gt;
  &lt;/a&gt;
  index.js
&lt;/h3&gt;

&lt;p&gt;This is the Node.js file from which your conversational AI application is launched. You use index.js to load the Dasha SDK. By the same token, you can incorporate this file, or the code which launches your application into any other Node.js project, from whence you wish to make use of the Dasha Cloud to run conversational apps. In this case, you will obviously need to include the Dasha application code in a separate folder. &lt;/p&gt;

&lt;p&gt;Below is the JavaScript code you would use to launch a basic Dasha SDK connection and Dasha app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dasha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@dasha.ai/sdk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;dasha&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connectionProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;conv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;conv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phone&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;chat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;dasha&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;dasha&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createConsoleChat&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;dasha&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sip&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;dasha&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sip&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Endpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ttsDispatcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dasha&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;conv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createConversation&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;conv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phone&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;chat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;conv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;transcription&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./log.txt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;w&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;logFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;conv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;transcription&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;logFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speaker&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\n`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;conv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;debugLog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;msgId&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;RecognizedSpeechMessage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logEntry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]?.&lt;/span&gt;&lt;span class="nx"&gt;facts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;logFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;logEntry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;conv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispose&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;logFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#maindsl"&gt;
  &lt;/a&gt;
  main.dsl
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Main.dsl&lt;/strong&gt; is located in the &lt;strong&gt;/app/&lt;/strong&gt; directory. This is the DashaScript file which gets compiled and executed in the Dasha Cloud Platform. This file contains all the instructions that you provide to the Dasha AI Cloud on how to run your application. In essence, this is the conversational structure. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#datajson"&gt;
  &lt;/a&gt;
  data.json
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Data.json&lt;/strong&gt; is the super-power file. It gives you the super power of training neural networks with simple JSON datasets. It is used for two things mainly - to define &lt;a href="https://dasha.ai/en-us/blog/intent-classification"&gt;&lt;strong&gt;intents&lt;/strong&gt;&lt;/a&gt; - ways of helping the AI to understand what real meaning the user places into their replies and &lt;a href="https://dasha.ai/en-us/blog/named-entity-recognition"&gt;named entities&lt;/a&gt; - data points located within the user’s replies. You can read more about both functions at the links above. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#phrasemapjson"&gt;
  &lt;/a&gt;
  phrasemap.json
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Phrasemap.json&lt;/strong&gt; is another superpower file. Here you instruct what phrases your AI app should use in responding to the user. You can also instruct it to vary the phrases, to say different things if the same node gets called up a second or third time, etc. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-the-conversational-ai-app"&gt;
  &lt;/a&gt;
  Understanding the conversational AI app
&lt;/h2&gt;

&lt;p&gt;Now that we’ve got a high-level overview of the technology and the files you are working with, let’s look at &lt;strong&gt;main.dsl&lt;/strong&gt; more closely. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#run-a-test"&gt;
  &lt;/a&gt;
  Run a test
&lt;/h3&gt;

&lt;p&gt;To start off, let’s launch a test conversation. To do so, you will need to have the &lt;a href="https://github.com/arrrgr/insurance-customer-service-demo"&gt;code&lt;/a&gt; open in your VSCode. Run &lt;strong&gt;&lt;code&gt;npm i&lt;/code&gt;&lt;/strong&gt;. Now, run &lt;strong&gt;&lt;code&gt;npm start chat&lt;/code&gt;&lt;/strong&gt;. A chat session will launch in your terminal. You can also run &lt;strong&gt;&lt;code&gt;npm start 12223334455&lt;/code&gt;&lt;/strong&gt; where &lt;em&gt;12223334455&lt;/em&gt; is your phone number in international format. You will get a call from the AI and can talk to it. &lt;/p&gt;

&lt;p&gt;Now, let’s look at the code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#imports-and-declarations"&gt;
  &lt;/a&gt;
  Imports and declarations
&lt;/h3&gt;

&lt;p&gt;We start off by importing the library of commonly used digressions, intents, etc. By the way, digressions are nodes that can be called up at any point in the conversation. They do not have a node leading into them. Digressions are great for two things. One is preparing your AI appfor a variety of tangents which a human user might bring up in the course of a conversation. Two is letting you teach your AI app to say something along the lines of “how can I help you today” and then listen in for a response. You can read more about digressions &lt;a href="https://dasha.ai/en-us/blog/using-digressions"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Then we declare context variables - &lt;strong&gt;input&lt;/strong&gt; (ones that are pushed to the app on conversation start) and &lt;strong&gt;storage&lt;/strong&gt; ones. Following this, we declare external functions. &lt;/p&gt;

&lt;p&gt;External functions are a way to pass and receive arguments to and from the &lt;strong&gt;index.js&lt;/strong&gt; file, in which the Dasha app runs as a function. You can in turn write instructions on what to do with these arguments, for example, calculations or, more importantly, you can push data to or pull data from an external service from the Node.js file. Or both. In the app you are looking at now we make use of external functions and will go over it. &lt;/p&gt;

&lt;p&gt;I will paste examples of code. Unfortunately, due to the nature of Dasha apps, these code snippets do not pass the copy-paste test, as they need multiple files to run. As you have opened the &lt;a href="https://github.com/arrrgr/insurance-customer-service-demo"&gt;repo&lt;/a&gt;, you can run the entire code base.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import "commonReactions/all.dsl";

context 
{
    // declare input variables here
    input phone: string;

    // declare storage variables here 
    name: string = ""; 
    policy_number: string = ""; 
    policy_read: string = "";
    policy_status: string = "";
    rating: string = "";
    feedback: string = "";
    claim: string = "";
}

// declare external functions here 
external function check_policy(policy_number: string): string;
external function convert_policy(policy_number: string): string;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conversation-flow"&gt;
  &lt;/a&gt;
  Conversation flow
&lt;/h3&gt;

&lt;p&gt;The conversation starts in earnest with line 22. &lt;/p&gt;

&lt;p&gt;We kick it off with a starting node named &lt;strong&gt;root&lt;/strong&gt;. Once the connection is established, the AI says the &lt;code&gt;__”greeting”__&lt;/code&gt; phrase, as indicated in the &lt;strong&gt;phrasemap.json&lt;/strong&gt;. In the greeting phrase it asks for a name. Upon finding the data &lt;strong&gt;&lt;code&gt;name&lt;/code&gt;&lt;/strong&gt;, as defined in &lt;strong&gt;data.json&lt;/strong&gt;, the conversation moves to the next node. In &lt;code&gt;node node_2&lt;/code&gt;, we store the collected name data in the previously defined storage variable &lt;code&gt;name&lt;/code&gt; and then use it to greet the user by their name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;start node root
{
   do //actions executed in this node
   {
       #connectSafe($phone); // connecting to the phone number which is specified in index.js that it can also be in-terminal text chat
       #waitForSpeech(1000); // give the person a second to start speaking
       #say("greeting"); // and greet them. Refer to phrasemap.json &amp;gt; "greeting"
       wait *; // wait for a response
   }
   transitions // specifies to which nodes the conversation goes from here
   {
       node_2: goto node_2 on #messageHasData("name"); // when Dasha identifies that the user's phrase contains "name" data, as specified in the named entities section of data.json, a transfer to node node_2 happens
   }
}

node node_2
{
   do
   {
       set $name =  #messageGetData("name")[0]?.value??""; //assign variable $name with the value extracted from the user's previous statement
       #log($name);
       #say("pleased_meet", {name: $name} );
       wait*;
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, please refer to &lt;strong&gt;phrasemap.json&lt;/strong&gt; to see how the phrases are defined. You can see that we provide an alternate phrase under the label &lt;code&gt;”repeat”&lt;/code&gt;. This lets Dasha know that if it comes back to the same node a second time, a different phrase must be used. Note the use of dynamic variables in &lt;code&gt;node node_2&lt;/code&gt; and &lt;code&gt;”pleased_meet”&lt;/code&gt; phrase. Note that you can also define phrases directly and use dynamic variables in the body of main.dsl using the &lt;a href="https://docs.dasha.ai/en-us/default/dasha-script-language/built-in-functions?searchResult=p61-highlight-0#saytext-blocking-call"&gt;&lt;code&gt;#sayText()&lt;/code&gt; function&lt;/a&gt; and &lt;a href="https://stackoverflow.com/questions/68737877/how-added-dynamic-data-to-phrasemap/68742493#68742493"&gt;string concatenation&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nl"&gt;"greeting"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; 
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"first"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Hello! Thank you for calling ACME Insurance claims help line. My name is Dasha. I will be your artificially intelligent agent today. Can you please introduce yourself?"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"repeat"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"I was just saying, can you please introduce yourself? "&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

      &lt;/span&gt;&lt;span class="nl"&gt;"pleased_meet"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; 
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"first"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Pleased to meet you "&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dynamic"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;". How can I help you today? "&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"repeat"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"I was just saying. How can I help you today "&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dynamic"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"?"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let’s take a look at &lt;strong&gt;data.json&lt;/strong&gt; to get a grasp of the neural network training data. We are looking at the &lt;strong&gt;named entities&lt;/strong&gt; section of the file. Under &lt;code&gt;”values”&lt;/code&gt; we define the types of names that a person might have. Note that the &lt;code&gt;”open_set”&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt;. This means that the AI is free to substitute various other names for the ones we provide to it as an example. To help it recognize where the names can be located in the body of the user’s response, we provide &lt;code&gt;”includes”&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"entities"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="nl"&gt;"open_set"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="nl"&gt;"values"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Jim Smith"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"synonyms"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Jim Smith"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Tony Montana"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"synonyms"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Tony Montana"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Jill Jones"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
         &lt;/span&gt;&lt;span class="nl"&gt;"synonyms"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Jill Jones"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="nl"&gt;"includes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="s2"&gt;"My name is (Tony Montana)[name]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="s2"&gt;"My name is (Jill Jones)[name]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="s2"&gt;"This is (Jim Smith)[name]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="s2"&gt;"(Jim Smith)[name] calling"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="s2"&gt;"(Jill Jones)[name]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="s2"&gt;"I'm (Tony Montana)[name]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="s2"&gt;"(Tony Montana)[name]"&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Moving further down in &lt;strong&gt;main.dsl&lt;/strong&gt; we come upon &lt;code&gt;digression policy_1&lt;/code&gt;. This digression gets called up when the AI identifies intent which corresponds to &lt;code&gt;”policy_check”&lt;/code&gt;, as stated in &lt;strong&gt;data.json&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Here is where it gets interesting. Take a look at the following three nodes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;digression policy_1
{
    conditions {on #messageHasIntent("policy_check");}
    do 
    {
        #say("what_policy");  //ask for policy number
        wait*;
    }
    transitions
    {
        policy_2: goto policy_2 on #messageHasData("policy");
    }
}

node policy_2
{
    do 
    {
        set $policy_number = #messageGetData("policy")[0]?.value??""; //set $policy_number wit the value acquired from the user 
        set $policy_read = external convert_policy($policy_number); //call up external function to add spaces between numbers to help the AI read out the numbers more legibly
        #log($policy_read);
        #say("confirm_policy" , {policy_read: $policy_read} ); //read policy number back out to user to confirm it was heard correctly
        wait*;
    }
    transitions
    {
        yes: goto policy_3 on #messageHasIntent("yes");
        no: goto policy_1_a on #messageHasIntent("no");
    }
}

node policy_3
{
    do
    {
        set $policy_status = external check_policy($policy_number); //call up an external function to check the policy 
        #say("verification_result", {policy_status: $policy_status} );
        wait*;
    }
    transitions
    {
        yes: goto can_help on #messageHasIntent("yes");
        no: goto bye_rate on #messageHasIntent("no");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can tell from the code and the comments, we ask the user to state their policy number in &lt;code&gt;digression policy_1&lt;/code&gt;, the number is identified as per instructions to the neural networks in &lt;strong&gt;data.json&lt;/strong&gt; under &lt;code&gt;”entities”&lt;/code&gt; &amp;gt; &lt;code&gt;”policy”&lt;/code&gt;. In &lt;code&gt;node policy_2&lt;/code&gt;, we store the policy number, call up an external function to send the number value to &lt;strong&gt;index.js&lt;/strong&gt;, where we put spaces between the numbers. The reason for this is - a string of numbers that have no spaces between them will be read by Dasha out as the integer value, for example, one thousand fifty, versus one zero five zero. We put the spaces between the numbers, pass the value back to our app and store it as $policy_read. This number is then read out to the user, to confirm that it was heard correctly. If the number is read incorrectly, the AI asks the user to repeat it. If it is confirmed by the user, we go to &lt;code&gt;node policy_3&lt;/code&gt;.  Here we call up an external function to check the policy number and verify that there is an active policy with this number. In the case of this demo, we simply pick one or two outcomes with random chance. In the case of a real application running in production, you will want to integrate with your database and get the data from there.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="c1"&gt;// external function convert policy number.&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setExternal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;convert_policy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;conv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;policyRead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;policy_number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;. &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;policyRead&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;policyRead&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

 &lt;span class="c1"&gt;// external function check policy number. Here we are providing a random evaluation, you will want to refer to your membership database&lt;/span&gt;
 &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setExternal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;check_policy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;conv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;policyNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;policyNumber&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is a valid policy number. And there is currently one active claim associated with this policy number.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;There is no active policy with this number. I'm sorry.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Going back to &lt;code&gt;node policy_3&lt;/code&gt; - if the user has no additional questions, the conversation progresses to &lt;code&gt;node bye_rate&lt;/code&gt;. Before letting the user go, Dasha asks to rate the interaction on the scale of 0 to 10. If the rating is six or below, Dasha will ask the user to clarify what they did not like about the experience. &lt;/p&gt;

&lt;p&gt;You can find this code in &lt;strong&gt;main.dsl&lt;/strong&gt; lines 104-177. Below I will only show the code for &lt;code&gt;node rating_evaluation&lt;/code&gt;, as it is the only node dealing with functions that we have not used previously in this tutorial. As you can tell here, we save data collected from the user (rating 0-10) to a variable &lt;code&gt;$rating&lt;/code&gt;, which we then convert to an integer. We have to do this because all user replies are saved as strings by Dasha. We then see whether the rating is greater than or equal to 7 or otherwise. Based on the outcome, the conversation develops.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node rating_evaluation
{
   do
   {
       set $rating =  #messageGetData("rating")[0]?.value??""; //assign variable $rating with the value extracted from the user's previous statement
       #log($rating);
       var rating_num = #parseInt($rating); // #messageGetData collects data as an array of strings; we convert the string to an integer in order to evaluate whether the rating is positive or negative
       if ( rating_num &amp;gt;=7 )
       {
           goto rate_positive; // note that this function refers to the transition's name, not the node name
       }
       else
       {
           goto rate_negative;
       }
   }
   transitions
   {
       rate_positive: goto rate_positive; // you need to declare transition name and the node it refers to here
       rate_negative: goto rate_negative;
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Starting at line 193 and to the end of &lt;strong&gt;main.dsl&lt;/strong&gt;, the remaining digressions begin. These are concerned with the additional questions that a user might ask, once their policy number has been confirmed. These digressions deal with questions such as “what is the status of my insurance claim” and “I’d like to redeem my completed claim.” &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In conclusion
&lt;/h2&gt;

&lt;p&gt;Now that you have gone through the conversational AI app, make some changes to it and run some tests, using the commands stated earlier. For your reference: &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Run &lt;strong&gt;&lt;code&gt;npm i&lt;/code&gt;&lt;/strong&gt;. Now, run &lt;strong&gt;&lt;code&gt;npm start chat&lt;/code&gt;&lt;/strong&gt;. A chat session will launch in your terminal. You can also run &lt;strong&gt;&lt;code&gt;npm start 12223334455&lt;/code&gt;&lt;/strong&gt; where 12223334455 is your phone number in international format. You will get a call from the AI and can talk to it.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Let us know in the comments or in &lt;a href="https://community.dasha.ai"&gt;Dasha Developer Community&lt;/a&gt; what you build. &lt;/p&gt;

</description>
      <category>ai</category>
      <category>javascript</category>
    </item>
    <item>
      <title>5 steps for performing well in a new job</title>
      <author>Andrew Baisden</author>
      <pubDate>Thu, 26 Aug 2021 10:40:24 +0000</pubDate>
      <link>https://dev.to/andrewbaisden/5-steps-for-performing-well-in-a-new-job-1h5c</link>
      <guid>https://dev.to/andrewbaisden/5-steps-for-performing-well-in-a-new-job-1h5c</guid>
      <description>&lt;p&gt;When you start a new job it is important that you are well prepared and ready to absorb everything that you can. Those first few months are either going to make you or break you it all comes down to your mindset and how motivated you are to be a success is this new role.&lt;/p&gt;

&lt;p&gt;I have worked in the industry for a few years and during that time I have learned a lot of things. I also recently started a new full-time role as well. Here are 4 steps for performing well in a new job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-ask-lots-of-questions"&gt;
  &lt;/a&gt;
  1. Ask lots of questions
&lt;/h2&gt;

&lt;p&gt;A new job means that there are going to be a lot of unknowns. You need to ask as many questions as possible no matter how arbitrary they might sound. It is better to find out the answers to your questions instead of waiting until the last minute and looking clueless because you decided to hold in all your thoughts.&lt;/p&gt;

&lt;p&gt;Your first few months should be all about information gathering. Figuring out how everything works, the people you report to etc... Leave no stone unturned and keep a note of everything that is said. That way you can get up to speed fast on projects which hopefully leads to less hand holding and micro management in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-learn-the-setup"&gt;
  &lt;/a&gt;
  2. Learn the setup
&lt;/h2&gt;

&lt;p&gt;Every company has a different structure and set of rules to follow. Your coding style might have to be adapted so that you align with your new companies work style. So for example the JavaScript framework setup might not be the same way that you are used to doing it. Some people prefer double quotes and others prefer single quotes. The same applies to writing comments too. The closer your goals align with the company the easier it will be for you to integrate into your new team.&lt;/p&gt;

&lt;p&gt;It is also true for GIT workflows, documentation, and testing. Follow the guidelines and specifications outlined by your team and then you will find that you all get along well when working on projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-show-your-worth-to-the-company"&gt;
  &lt;/a&gt;
  3. Show your worth to the company
&lt;/h2&gt;

&lt;p&gt;Those first few months tend to be quite hard as you feel the need to prove your value and validate why you deserve the role. Put in a good high work rate and get up to speed as quickly as possible. The more you contribute to the company the less you will have to worry about in the future. Build the groundwork now so that you are good to go for smooth sailing further down the line.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-have-good-connections"&gt;
  &lt;/a&gt;
  4. Have good connections
&lt;/h2&gt;

&lt;p&gt;Another area that requires lots of effort would be finding common ground, and bonding well with your team mates. This would come under the area of having a good culture fit. Jobs are not all about working you need to remember that you have to behave as a human too and not just a robot that writes code all day.&lt;/p&gt;

&lt;p&gt;Relationships also make the job more engrossing and leads to the team having a good bond. If you work in an office then it is not too hard to accomplish some of these things it is quite different with remote working though. So have friendly idle talks over IM with your team or having video calls or meetings is quite a good way to keep in touch when it is not possible to be there in person.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-put-in-the-time"&gt;
  &lt;/a&gt;
  5. Put in the time
&lt;/h2&gt;

&lt;p&gt;You have to put in the hours if you want to be a successful developer in your new role. Learn as much as you can about the company and its ethos and find ways to incorporate your learnings so that you can help your team to grow further. This can include learning about new tools, technologies and trends which could benefit the business. And also doing your own self learning so that you can be the best at your job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;I really hope that you enjoyed reading this article and learned something from it. As a content creator and technical writer I am passionate about sharing my knowledge and helping other people reach their goals. Let's connect across social media you can find all of my social media profiles and blogs on &lt;a href="https://linktr.ee/andrewbaisden"&gt;linktree&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Peace ✌️&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>Interview with a UX expert - How to design impactful developer tools</title>
      <author>Kevin Gilpin</author>
      <pubDate>Thu, 26 Aug 2021 10:37:01 +0000</pubDate>
      <link>https://dev.to/appland/interview-with-a-ux-expert-how-to-design-impactful-developer-tools-548m</link>
      <guid>https://dev.to/appland/interview-with-a-ux-expert-how-to-design-impactful-developer-tools-548m</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;a href="https://www.linkedin.com/in/johnmorkes/"&gt;John Morkes&lt;/a&gt; is a UX expert. But he started out as a journalist.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In the early ‘90s, John wrote for publications like Wired and R&amp;amp;D Magazine. Even back then, though, he recognized that a career in print journalism wasn’t going to be super stable. John was excited about all of the new technology being invented and realized he didn’t want to just witness that digital disruption; he wanted to be a part of making it happen.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Still, it wasn’t clear at that time what the technological future would look like. Would we all flock to the web or would CD-ROMs be the preferred technology? John knew he needed to learn more about what early technology users really wanted. He wasn’t aware of the term ‘usability’ yet, but he knew what he wanted to do with the rest of his career: make new technologies easy to use for anyone.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;John went to Stanford and got his PhD in communication theory and research. Soon after, he conducted early research alongside the legendary &lt;a href="https://en.wikipedia.org/wiki/Jakob_Nielsen_(usability_consultant)"&gt;Dr. Jakob Nielsen&lt;/a&gt; on &lt;a href="https://www.researchgate.net/publication/251520670_Concise_SCANNABLE_and_Objective_How_to_Write_for_the_Web"&gt;how to write for the web&lt;/a&gt;. Since then, John’s led UX research for some of the biggest B2C and B2B companies on the planet, and he’s personally trained thousands of UX designers and researchers on key techniques, strategies and best practices.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I met John in the 90s, when we were colleagues in Austin, TX. Now John is an advisor to &lt;a href="https://appland.com/"&gt;our company, AppLand&lt;/a&gt;, and has been immensely helpful in helping us define and scale our UX goals and metrics. In case it’s helpful to other dev tool companies, we’d like to share some of John’s perspective here, including the top UX best practices he recommends. Read on to learn more from a recent conversation I had with him:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Has your background in journalism influenced your UX work?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Absolutely. As a journalist, I spent a lot of time thinking about the reader. Was my article meeting their wants and needs? It was a very natural next step for me to start thinking about what users want and need from the technology I was helping to build. &lt;/p&gt;

&lt;p&gt;I’ve also always used my writing and editing skills in my UX work, because a big part of UX is communicating effectively to users what they could/should do next. As a UX person, you need to be able to write clear instructions for users, and provide help and documentation in a concise, timely way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why is UX so important when building dev tools?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Developer tools can be really powerful, but only if users can figure out how to use them efficiently. So it’s really important to support specific use cases that matter to your users. For AppMap, those are things like &lt;a href="https://appland.com/use-cases/onboard-to-code"&gt;onboarding to unfamiliar code&lt;/a&gt; or &lt;a href="https://appland.com/use-cases/debug-with-visual-maps"&gt;debugging with visual code maps&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Generally, developers want to be able to do things on their own. They don’t want to have to read lots of documentation, because they don’t have lots of spare time. Developers need to be able to pick up a tool, get started, make a lot of progress and have access to help if/when they need it. And that help needs to be available in many different forms. For example, you can get help with AppMaps one-on-one in Discord, you can read detailed documentation and &lt;a href="https://appland.com/videos/"&gt;watch walk-through videos&lt;/a&gt;, or you can access support directly from the AppMap agent itself. Dev tools can be really complicated, so if you don’t provide ample support it can be tricky for users to derive value -- even super smart users like developers!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are the most essential UX best practices every dev tool company should implement?&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Make UX a company-wide focus.&lt;/strong&gt; Users’ wants and needs shouldn’t be the focus of just one team, they need to be the focus of the entire company. That means developers, product managers, support managers and anyone who’s writing documentation needs to be focused on UX and aware of key product goals and metrics.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Know your audience.&lt;/strong&gt; What use cases are most important to your prospective users, what pain points are most common, what programming languages and IDEs are most used? You really don’t want to make the mistake of designing a tool for yourself. Even if you’re a developer building a tool for developers, you need to work hard to understand the needs and wants of a much larger community, because no one person can represent all users. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hire for the right skills.&lt;/strong&gt; Hiring for UX isn’t just about finding people who can make screens look pretty. Hire UX people who can define design structures, and build a flow step-by-step and screen-to-screen. Seek out great researchers, writers and people who are skilled at asking questions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Have an agile mindset.&lt;/strong&gt; Design, build and get what you’re building out there as quickly and as often as possible so you can continually gather real user feedback and keep iterating! &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use established standards.&lt;/strong&gt; Things like design style guides, interaction design patterns or a component library that developers can pull from and reuse when they're building can be really helpful.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Does UX need to be approached any differently for open source companies?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With open source companies, you have access to this massive pool of users that you can continually get input and feedback from. And that access isn’t hidden inside a small team or separate company; it’s free and open, and anyone can provide input and receive it! It’s a really special opportunity worth seizing. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What's your impression of an open source community like AppLand’s and how do you see it evolving as the company scales?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For a UX researcher like me, AppLand’s community is super exciting, because it’s filled with such smart and talented people working on such a wide range of software projects. And they don’t hold back their opinions! It’s an amazing place to get input and feedback on what AppLand’s done and what we should be doing next. As companies like AppLand grow and its user base grows, the community will too and that will make products even better.&lt;/p&gt;

</description>
      <category>ux</category>
      <category>webdev</category>
      <category>startup</category>
    </item>
    <item>
      <title>simple and beautiful, powerful react player</title>
      <author>lgf196</author>
      <pubDate>Thu, 26 Aug 2021 10:26:20 +0000</pubDate>
      <link>https://dev.to/lgf196/simple-and-beautiful-powerful-react-player-26i2</link>
      <guid>https://dev.to/lgf196/simple-and-beautiful-powerful-react-player-26i2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#-raw-jolplayer-endraw-project-addressexperience-address"&gt;
  &lt;/a&gt;
  &lt;code&gt;jol-player&lt;/code&gt;&lt;a href="https://github.com/lgf196/JoL-player"&gt;project address&lt;/a&gt;，&lt;a href="https://g5ukb.csb.app/"&gt;Experience address&lt;/a&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#characteristics"&gt;
  &lt;/a&gt;
  ✨ Characteristics
&lt;/h2&gt;

&lt;p&gt;📦 High-quality React components out of the box.&lt;br&gt;
🛡 Use TypeScript to develop, provide a complete type definition file.&lt;br&gt;
🌍 Internationalized language support.&lt;br&gt;
🎨 Themes, components, customization capabilities.&lt;br&gt;
👊 Powerful API and callback function&lt;br&gt;
⚡ Small size, 80kb&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  📦 Install
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install jol-player --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  🔨 Example
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import JoLPlayer from "jol-player";

const App = () =&amp;gt; (
  &amp;lt;&amp;gt;
    &amp;lt;JoLPlayer
        option={{
          videoSrc:"https://x.com/a.mp4",
          width: 750,
          height: 420,
        }}
      /&amp;gt;
  &amp;lt;/&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👉&lt;a href="https://codesandbox.io/s/inspiring-hawking-g5ukb?file=/src/App.tsx"&gt;demo case&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bluebook-documentation"&gt;
  &lt;/a&gt;
  📘  Documentation
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#propertiesconfiguration-items"&gt;
  &lt;/a&gt;
  Properties/Configuration Items
&lt;/h3&gt;

&lt;p&gt;The following attributes come from the &lt;code&gt;option&lt;/code&gt; property configuration item&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;Default value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;width&lt;/td&gt;
&lt;td&gt;The width of the video container (required)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;required&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;height&lt;/td&gt;
&lt;td&gt;The height of the video container (required)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;required&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;videoSrc&lt;/td&gt;
&lt;td&gt;Video address (required)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;required&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;theme&lt;/td&gt;
&lt;td&gt;theme&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;#ffb821&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;poster&lt;/td&gt;
&lt;td&gt;Video cover image&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setEndPlayContent&lt;/td&gt;
&lt;td&gt;Customize what is displayed at the end of the video&lt;/td&gt;
&lt;td&gt;&lt;code&gt;React.ReactNode&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setBufferContent&lt;/td&gt;
&lt;td&gt;Custom video buffer loading component&lt;/td&gt;
&lt;td&gt;&lt;code&gt;React.ReactNode&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pausePlacement&lt;/td&gt;
&lt;td&gt;The position of the pause button&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bottomRight&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;center&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hideMouseTime&lt;/td&gt;
&lt;td&gt;How many milliseconds, without any operation, hide the mouse and controller/ms&lt;/td&gt;
&lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;isShowMultiple&lt;/td&gt;
&lt;td&gt;Whether to display the multiplier function&lt;/td&gt;
&lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;isShowSet&lt;/td&gt;
&lt;td&gt;Whether to display the setting function&lt;/td&gt;
&lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;isShowScreenshot&lt;/td&gt;
&lt;td&gt;Whether to display the screenshot function&lt;/td&gt;
&lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;isShowPicture&lt;/td&gt;
&lt;td&gt;Whether to show picture-in-picture&lt;/td&gt;
&lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;isShowWebFullScreen&lt;/td&gt;
&lt;td&gt;Whether to display the full screen of the webpage&lt;/td&gt;
&lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;language&lt;/td&gt;
&lt;td&gt;Language&lt;/td&gt;
&lt;td&gt;&lt;code&gt;zh&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;en&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#method"&gt;
  &lt;/a&gt;
  Method
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;load&lt;/td&gt;
&lt;td&gt;Reload&lt;/td&gt;
&lt;td&gt;() =&amp;gt; void&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pause&lt;/td&gt;
&lt;td&gt;Pause&lt;/td&gt;
&lt;td&gt;() =&amp;gt; void&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;play&lt;/td&gt;
&lt;td&gt;Start playing&lt;/td&gt;
&lt;td&gt;() =&amp;gt; void&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setVolume&lt;/td&gt;
&lt;td&gt;Set the volume, [0-100]&lt;/td&gt;
&lt;td&gt;(par:&lt;code&gt;number&lt;/code&gt; ) =&amp;gt; void&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;seek&lt;/td&gt;
&lt;td&gt;Set the playback position of the specified video/s&lt;/td&gt;
&lt;td&gt;(par:&lt;code&gt;number&lt;/code&gt; ) =&amp;gt; void&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setVideoSrc&lt;/td&gt;
&lt;td&gt;Set the address to play the video src&lt;/td&gt;
&lt;td&gt;(par:&lt;code&gt;string&lt;/code&gt; ) =&amp;gt; void&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;Hint：&lt;/code&gt;The above method requires the help of&lt;code&gt;ref&lt;/code&gt;Can call，as：xxx.current.load()&lt;/p&gt;

&lt;p&gt;👉&lt;a href="https://codesandbox.io/s/inspiring-hawking-g5ukb?file=/src/App.tsx"&gt;For details, please refer to the demo case&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#callback-function"&gt;
  &lt;/a&gt;
  Callback function
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export interface videoAttributes&amp;lt;T = number, K = boolean&amp;gt; {
  /**
   * @description Whether to play
   */
  isPlay: K;
  /**
   * @description Current time/s
   */
  currentTime: T;
  /**
   * @description Total time
   */
  duration: T;
  /**
   * @description Cache duration/s
   */
  bufferedTime: T;
  /**
   * @description Whether to open picture-in-picture
   */
  isPictureinpicture: K;
  /**
   * @description Volume
   */
  volume: T;
  /**
   * @description Video playback multiple
   */
  multiple: T;
  /**
   * @description Whether to end
   */
  isEndEd: K;
  /**
   * @description Wrong
   */
  error: null | T;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;onProgressMouseDown&lt;/td&gt;
&lt;td&gt;Press and hold the slide bar, drag the callback&lt;/td&gt;
&lt;td&gt;(e: videoAttributes) =&amp;gt; void&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;onProgressMouseUp&lt;/td&gt;
&lt;td&gt;Slide bar press and release callback&lt;/td&gt;
&lt;td&gt;(e: videoAttributes) =&amp;gt; void&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;onPlay&lt;/td&gt;
&lt;td&gt;Video start playing callback&lt;/td&gt;
&lt;td&gt;(e: videoAttributes) =&amp;gt; void&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;onPause&lt;/td&gt;
&lt;td&gt;Callback when the video is paused&lt;/td&gt;
&lt;td&gt;(e: videoAttributes) =&amp;gt; void&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;onTimeChange&lt;/td&gt;
&lt;td&gt;Video is playing, time change callback&lt;/td&gt;
&lt;td&gt;(e: videoAttributes) =&amp;gt; void&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;onEndEd&lt;/td&gt;
&lt;td&gt;Callback when the video ends&lt;/td&gt;
&lt;td&gt;(e: videoAttributes) =&amp;gt; void&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;onvolumechange&lt;/td&gt;
&lt;td&gt;Callback when the volume changes&lt;/td&gt;
&lt;td&gt;(e: videoAttributes) =&amp;gt; void&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;onError&lt;/td&gt;
&lt;td&gt;Video playback failed callback&lt;/td&gt;
&lt;td&gt;() =&amp;gt; void&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#the-parameter-interface-received-by-raw-jolplaye-endraw-r-is-as-follows-pointdown"&gt;
  &lt;/a&gt;
  The parameter interface received by &lt;code&gt;JoLPlaye&lt;/code&gt;r is as follows: 👇
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export interface videoparameter extends Partial&amp;lt;videoCallback&amp;gt; {
  style?: React.CSSProperties;
  /**
   * @description Component configuration items
   */
  option: videoOption;
  className?: string;
  ref?: JoLPlayerRef
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rosepraise"&gt;
  &lt;/a&gt;
  🌹Praise
&lt;/h3&gt;

&lt;p&gt;If you think this project is helpful to you, you can give the author a like, the author is very grateful: blush:😊🌹&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>7 VS Code Extensions for Frontend Developers</title>
      <author>Alex Omeyer</author>
      <pubDate>Thu, 26 Aug 2021 10:24:23 +0000</pubDate>
      <link>https://dev.to/alexomeyer/7-vs-code-extensions-for-frontend-developers-7f8</link>
      <guid>https://dev.to/alexomeyer/7-vs-code-extensions-for-frontend-developers-7f8</guid>
      <description>&lt;p&gt;As a developer, you’re always looking for cutting-edge tools, tricks, and extensions to improve your productivity and efficiency. &lt;/p&gt;

&lt;p&gt;Being able to manage your time better is a valuable skill for software engineers. Therefore, here’s a list of Visual Studio Code extensions that help frontend developers (and not only!) to increase their productivity by at least 10 to 20%.&lt;/p&gt;

&lt;p&gt;Let’s start with Sourcery!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-sourcery-for-python"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://marketplace.visualstudio.com/items?itemName=sourcery.sourcery"&gt;Sourcery for Python&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Sourcery is a valuable tool for Python developers who want to improve their coding style. Sourcery is like a personal assistant that gives coding tips on the fly. It will show you how to write better, cleaner Python code by offering refactoring suggestions.&lt;/p&gt;

&lt;p&gt;The extension runs in the background and will highlight snippets of code that can be improved by underlying them in blue.&lt;/p&gt;

&lt;p&gt;Here’s an example created by Sourcery that shows how you can refactor a complex if-else statement.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zH88Tbwt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/af61idwxns7fflpre7it.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zH88Tbwt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/af61idwxns7fflpre7it.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again, this extension also comes with a Pro version that offers more functionality like checking for duplicate code sections. It’s an excellent extension for developers looking to improve their coding style with real-time code suggestions. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-stepsize-for-todos-amp-tech-debt"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://bitly.stepsize.com/3mALdxy"&gt;Stepsize for TODOs &amp;amp; Tech Debt&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Stepsize is an issue tracker inside your editor for managing technical debt and maintenance issues.&lt;/p&gt;

&lt;p&gt;When you come across technical debt that should be fixed but you don’t have time to fix it right away, you can &lt;strong&gt;bookmark a piece of code or create an issue&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Stepsize allows you to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create &amp;amp; view code issues directly from your editor&lt;/li&gt;
&lt;li&gt;Track &amp;amp; prioritise code improvements like technical debt&lt;/li&gt;
&lt;li&gt;Add key issues to your sprints with our Jira integration&lt;/li&gt;
&lt;li&gt;Collaborate with your team to address technical problems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s how you can bookmark the code and create an issue:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EMtOZCVB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y05ccgvo4jtdv9p9zvtg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EMtOZCVB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y05ccgvo4jtdv9p9zvtg.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's a great tool for teams who want to make technical debt visible and start reducing it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-quokkajs-for-javascript"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://marketplace.visualstudio.com/items?itemName=WallabyJs.quokka-vscode"&gt;Quokka.js for JavaScript&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Many developers have probably already heard about Quokka.js, which serves as a quick playground for prototyping code. &lt;/p&gt;

&lt;p&gt;As a developer, I often ended up in a situation where I wanted to test a complex code snippet by prototyping it in a separate file to get more visibility into the inputs and outputs of what I had developed. That meant I had to create a new file, write the code, and execute it each time I made changes. Moreover, I added countless &lt;code&gt;console.log&lt;/code&gt; statements to inspect the data format when moving through the function. &lt;/p&gt;

&lt;p&gt;At some point in my development career, a colleague recommended I start using Quokka.js. It takes away the file creation process and removes the process of logging data at each step. Quokka.js prints the output of each step within your editor and highlights incorrect code via inline reporting. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iZbxRzaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4sdmf7jvieaj1avczet.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iZbxRzaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4sdmf7jvieaj1avczet.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my opinion, it’s a handy tool for prototyping code, and you can access it from the VSCode’s command palette. However, it’s worth knowing that Quokka.js also comes with a &lt;a href="https://quokkajs.com/pro/"&gt;Pro version&lt;/a&gt; that offers you more features such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Import files from within your project&lt;/strong&gt;: This feature is useful when you prototype some code that requires a helper function or any other function from within your project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Quick package install&lt;/strong&gt;: When you want to experiment with an NPM package, you can import it to your Quokka.js file. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Live comments&lt;/strong&gt;: You can use asSpecial comment format to evaluate any expressions. You may also write any JavaScript code right in the comment to shape the output.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In short, Quokka.js is a must-have extension for developers to prototype code rapidly. We don’t want to promote paid subscriptions, yet, Quokka’s Pro version can save you even more time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-ponicode-for-javascript-unit-testing"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://marketplace.visualstudio.com/items?itemName=ponicode.ponicode"&gt;Ponicode for JavaScript Unit Testing&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;“Ponicode is an AI-powered extension pack that generates unit tests for you. It helps you create, visualize, and run unit tests for your functions quickly and easily, thanks to ML-generated test scenarios and an intuitive graphical interface.”&lt;/p&gt;

&lt;p&gt;As you can read from Ponicode’s description, the extension supports you in creating unit tests. Not only does it generate unit tests via machine learning algorithms, but it will also show you the most critical paths in your code. This information is crucial when optimizing your testing efforts by focusing on the most essential code paths. In other words, Ponicode optimizes your efforts to increase your code’s robustness and helps to detect critical bugs early. Moreover, Ponicode suggests relevant inputs for your test scenarios to make them even more effective.&lt;/p&gt;

&lt;p&gt;Lastly, a GUI allows you to craft unit tests visually and automatically creates test files. It’s definitely a timesaver!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OrGPYGXR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0m3qw5xdultwn26d87w.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OrGPYGXR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0m3qw5xdultwn26d87w.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In short, it’s a fantastic extension to save time writing tests for different inputs but also to find the most important code paths in your project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-stackfinder-for-stack-overflow"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://marketplace.visualstudio.com/items?itemName=mark-fobert.stackfinder"&gt;StackFinder for Stack Overflow&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Almost every developer uses Stack Overflow on a daily basis to find answers to their coding questions. It’s one of the most well-known websites for developers. Like myself, I often end up opening Stack Overflow to validate an idea or to find a better solution than the one I’ve created. &lt;/p&gt;

&lt;p&gt;To save time, StackFinder allows you to look for answers on Stack Overflow from your VSCode editor. Besides that, you can copy solutions to your editor to try them out. &lt;/p&gt;

&lt;p&gt;It’s a fast alternative for opening a browser filled with Stack Overflow tabs. Personally, I enjoyed using this solution as I don’t have to leave my editor and can work more distraction-free! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/v1JAI08Dw88"&gt;Check out this video&lt;/a&gt; to see how it works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-wallabyjs"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://marketplace.visualstudio.com/items?itemName=WallabyJs.wallaby-vscode"&gt;Wallaby.js&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Wallaby.js is from the same creators as Quokka.js. Wallaby.js is a developer productivity tool that runs your JavaScript and TypeScript tests immediately as you type, highlighting results in your IDE right next to your code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jxD1BbRS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kafw3qqigibp4u56twd8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jxD1BbRS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kafw3qqigibp4u56twd8.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s a valuable extension that shows you live results when coding your unit tests. I find it very helpful to see the output and debug tests in real-time. As you can see, Wallaby.js is similar to Quokka.js using the same inline reporting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-gitlive-for-better-team-coordination"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://marketplace.visualstudio.com/items?itemName=TeamHub.teamhub"&gt;GitLive for Better Team Coordination&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Remote work has become the standard in many software organizations. Therefore, communication between developers has become more critical than ever before. The GitLive extension takes away some of the communication burden remote teams experience.&lt;/p&gt;

&lt;p&gt;With GitLive, you can connect to your team members to see which repositories, branches, or files they are working on. Moreover, you can connect your issue tracking software to GitLive to share which ticket you’re focusing on. &lt;/p&gt;

&lt;p&gt;It’s a great tool for remote development teams to see who’s working on what and avoid merge conflicts. For instance, if you are working on the same file for different branches or features, you can detect this with GitLive. In summary, the extension prevents merge conflicts before they occur.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JpL8AvdI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7q3tq0cvk65xj0vh79r.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JpL8AvdI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7q3tq0cvk65xj0vh79r.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The main concern for developers to improve their productivity is removing distractions from their day-to-day activities. &lt;br&gt;
StackFinder is a fun and valuable extension to stay focused. Opening a web browser can trigger multiple pop-up notifications that distract you. Even StackOverflow can be a source of distraction.&lt;/p&gt;

&lt;p&gt;On the other hand, a team’s efficiency depends on how well they communicate. Thus, an extension like Stepsize and GitLive are useful to improve communication.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>codequality</category>
      <category>codereview</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Shared Hosting Vs. Reseller Hosting - Which Is Right for You?</title>
      <author>cloudminister</author>
      <pubDate>Thu, 26 Aug 2021 10:13:36 +0000</pubDate>
      <link>https://dev.to/cloudminister/shared-hosting-vs-reseller-hosting-which-is-right-for-you-43lb</link>
      <guid>https://dev.to/cloudminister/shared-hosting-vs-reseller-hosting-which-is-right-for-you-43lb</guid>
      <description>&lt;p&gt;There are a ton of websites on the Internet with more being added every day and are just set up in a matter of hours. With the digital age, most of the work is done over the net and on websites. So how to select the best web hosting plan for your website? Well look no further, we are going to provide insight on both Shared Hosting and Reseller Hosting, their comparison, their pros and cons, to help you decide which web hosting would suit your needs better.&lt;/p&gt;

&lt;h2&gt;&lt;b&gt;What is Shared Hosting:&lt;/b&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://cloudminister.com/linux-shared-hosting/"&gt;Shared hosting plans&lt;/a&gt; are for single users. In shared hosting, many websites are hosted over the same server and all you have to do is set up a shared hosting account, complete the formalities, and get your website online. The user only has to take care of the design of the website, email management, domains, etc. The hosting is split between different users, set up with shared accounts and managed mostly by the web hosting company. However, there is no reselling of the services here like in Reselling Hosting, which you will read about further. A single control panel is provided in the case of shared hosting, most commonly the cPanel which provides you various tools and features.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Shared Hosting Pros:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Although you share resources with other websites, you are provided with a cPanel control panel the tools for managing media, site statistics, mail accounts, and adding SSL security to your website. The provider takes care of the website management so you can focus your time on the website or business.&lt;/p&gt;

&lt;p&gt;The main advantage of Shared Hosting is that it is minimal. Many shared hosting servers provide unmetered connections because most user websites never breach the cap.&lt;/p&gt;

&lt;p&gt;You can also use the “Add-on Domain” feature in shared hosting to add other domains to host them on the same server. You are also provided with disk space and bandwidth which is adequate for your website.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Shared Hosting Cons:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Your website may crash despite the measures taken by the host if there are a lot of websites being hosted on a singular server.&lt;br&gt;
Since many websites are sharing the same server, an SQL injection attack on one might affect all the other websites and files on the server which raises a big security concern as the storage and server are common.&lt;/p&gt;

&lt;p&gt;If there is a sudden increase in traffic of one or more of the websites on the server, it might impact the performance of your website even if it has moderate traffic.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;h2&gt;What is Reseller Hosting:&lt;/h2&gt;&lt;/b&gt; &lt;/p&gt;

&lt;p&gt;Reseller Hosting involves reselling from the hosting plan. It allows you to sell the resources provided by the hosting company as your own. You can create multiple shared accounts under one master account to control everything. This means, making more money on the side via reseller hosting, and more control over the resources. Reseller hosting also has multiple control panels for client accounts as well as a WHM that allows you to create seller accounts, set addresses, admin controls, custom features for specific clients, and additional tools.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Reseller Hosting Pros:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Reseller Hosting offers better flexibility and moderate investment. You can also sell Dedicated IPs, SSL Certificates, Domains, VPS Hosting, etc. All of which generate additional income without the responsibility of server management.&lt;/p&gt;

&lt;p&gt;Server maintenance is included in the host service package itself. So the host provides damage cover and covers maintenance.&lt;/p&gt;

&lt;p&gt;You have better control and personalization options such as themes and UI of the Control Panel.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Reseller Hosting Cons:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;You can resell the server but it is owned by the web hosting service so you have limited access in some regards.&lt;/p&gt;

&lt;p&gt;In the case of hosting provider migration, problems arise while shifting the complete data of the clients because there is multiple.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;h3&gt;Shared Hosting vs Reseller Hosting&lt;/h3&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The comparisons below provide an even better perspective for you to choose the right hosting service for you.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;•Users:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Shared Hosting is better for business owners or individuals who are just looking to put a website up with the minimum hassle. The hosting service takes care of almost everything and the user just has to focus on the design of the website, domains, email system and the business.&lt;/p&gt;

&lt;p&gt;Reseller Hosting on the other hand is more suited to entrepreneurs with multiple businesses, developers with multiple clients and so on. You get control of server settings and domains as you purchase a certain bandwidth from the host and resell it according to your purposes. You also get a selection of billing tools along with host security measures and accountability.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;•Security:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Server hosting uses sharing of resources such as bandwidth, RAM, memory, etc. If one of the shared websites on the server faces a security threat, all the websites on the server might, due to the shared resources.&lt;/p&gt;

&lt;p&gt;The resources by the hosting company are generally more than enough for handling the user website’s needs. If you are looking to manage multiple websites with individual security and risk management, reseller hosting is the better option.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;•Hosted Websites:&lt;/b&gt; &lt;/p&gt;

&lt;p&gt;Shared Hosting allows you to have only one website per user. Some hosts do allow additional websites for a single user, which might be a paid service. The user can allocate resources according to the need but should be cautious to not raise any problems for the host.&lt;/p&gt;

&lt;p&gt;Resellers can host multiple websites for a single user and also get the added benefit of name servers. The name servers simplify the management and also make navigating the domain easy.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;•Management:&lt;/b&gt;&lt;br&gt;
The amount of control a user has over the system depends upon the management provided. Shared Hosting gives the users a cPanel to manage SSL, domains, FTP, databases, backups, and also additional software such as WordPress.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://cloudminister.com/linux-reseller-hosting/"&gt;Reseller Hosting&lt;/a&gt; provides the user with a WHM (Web Host Manager) that provides all the features of the cPanel along with additional ones such as managing server, accounts, server alerts, granting and revoking authorizations, generating and installing SSL certificates, and limiting user bandwidth.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;•Pricing-&lt;/b&gt; &lt;/p&gt;

&lt;p&gt;The pricing for shared hosting is generally cheap even if you are using up a lot of resources of the host. The reseller hosting option is a bit costlier than the shared one because of the reseller option and added management. But this cost might be non-existent if you resell the resources for extra profits.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Verdict:&lt;/b&gt; Which one is better for you, Shared Hosting or Reseller Hosting?&lt;/p&gt;

&lt;p&gt;After taking a look at all the factors, the advantages and disadvantages or both, and a detailed comparison. The choice of selecting the right one comes right on to the amount of control and management you require and the usage requirements of your website.&lt;/p&gt;

&lt;p&gt;If you are an individual, a business owner, you will benefit from the Shared Hosting as it takes care of resources, security, management, etc. You have more time to focus on running the website and your business.&lt;/p&gt;

&lt;p&gt;If you are a user who manages multiple websites or a developer with multiple clients, Reseller Hosting is better suited to your needs as it provides you with a better management panel, potential for extra income, control over bandwidth and resource distribution among different websites, personalized names for servers, limit usage, and so on.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Conclusion:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Both Shared and Reseller hosting services have their own pros and cons. It all comes down to the client's needs and how much control they want over their services. TLDR: Go for Shared Hosting if you are an individual or have a single site to manage. Otherwise, opt for Reseller Hosting for better management of multiple sites and clients for business.&lt;/p&gt;

</description>
      <category>linux</category>
    </item>
    <item>
      <title>Mobile web debugging tool developed based on react</title>
      <author>html5@mobile</author>
      <pubDate>Thu, 26 Aug 2021 10:12:35 +0000</pubDate>
      <link>https://dev.to/ihtml5/mobile-web-debugging-tool-developed-based-on-react-116f</link>
      <guid>https://dev.to/ihtml5/mobile-web-debugging-tool-developed-based-on-react-116f</guid>
      <description>&lt;h1&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fOz04pJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6822604/130725631-dde49c00-24fe-44c6-a3fd-a5c709ce6e57.png"&gt;
&lt;/h1&gt;

&lt;p&gt;Mobile web debugging tool developed based on react&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;h4&gt;&lt;h4&gt;Easy to use&lt;/h4&gt;&lt;/h4&gt;&lt;/th&gt;
    &lt;th&gt;
&lt;h4&gt;&lt;/h4&gt;
&lt;h4&gt;Full-featured&lt;/h4&gt;
&lt;/th&gt;
    &lt;th&gt;
&lt;h4&gt;&lt;/h4&gt;
&lt;h4&gt;Easy to expand&lt;/h4&gt;
&lt;/th&gt;
    &lt;th&gt;
&lt;h4&gt;&lt;/h4&gt;
&lt;h4&gt;high performance&lt;/h4&gt;
&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Use the cdn method, one-click access&lt;/td&gt;
    &lt;td&gt;Similar to Chrome devtools, supports log, network, storage, performance, etc., has better network capture capabilities and rich log display&lt;/td&gt;
    &lt;td&gt;Expose rich internal events, which can be seamlessly integrated with react components&lt;/td&gt;
    &lt;td&gt;Support large amount of data display, no lag&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;
&lt;a href="https://npmjs.org/package/mdebug"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N32PKFJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/mdebug.svg" alt="NPM Version"&gt;&lt;/a&gt;
&lt;a href="https://github.com/tnfe/mdebug/pulls"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u8IHluNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/PRs-welcome-brightgreen.svg" alt="PRs"&gt;&lt;/a&gt;
&lt;a href="https://nodejs.org"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J5paFmSS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/node-%253E%253D%25208.0.0-brightgreen.svg" alt="Node Version"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github"&gt;
  &lt;/a&gt;
  github
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/tnfe/mdebug"&gt;https://github.com/tnfe/mdebug&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demos"&gt;
  &lt;/a&gt;
  Demos
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://tnfe.github.io/mdebug"&gt;https://tnfe.github.io/mdebug&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#install-using-npm"&gt;
  &lt;/a&gt;
  Install using npm
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install mdebug --save

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#useage"&gt;
  &lt;/a&gt;
  Useage
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-es6"&gt;
  &lt;/a&gt;
  1. ES6
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;mdebug&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mdebug&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;mdebug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2cdn"&gt;
  &lt;/a&gt;
  2.CDN
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;scp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;script&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Load the latest mdebug version&lt;/span&gt;
    &lt;span class="nx"&gt;scp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://unpkg.com/mdebug@latest/dist/index.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;scp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;scp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// Successfully loaded and initialized&lt;/span&gt;
    &lt;span class="nx"&gt;scp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;mdebug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="c1"&gt;// Load state switch callback&lt;/span&gt;
    &lt;span class="nx"&gt;scp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onreadystate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="c1"&gt;// Load failed callback &lt;/span&gt;
    &lt;span class="nx"&gt;scp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#api"&gt;
  &lt;/a&gt;
  API
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-init"&gt;
  &lt;/a&gt;
  1. init
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;mdebug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;containerId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="c1"&gt;// mdebug mounts the container id, if it is empty, a unique id will be automatically generated internally,&lt;/span&gt;
    &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="c1"&gt;// Incoming mdebug plugin&lt;/span&gt;
    &lt;span class="na"&gt;hideToolbar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="c1"&gt;// Pass in the tab id that needs to be hidden&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-addplugin"&gt;
  &lt;/a&gt;
  2. addPlugin
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;mdebug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// tab id&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Chinese title corresponding to tab,&lt;/span&gt;
    &lt;span class="na"&gt;enName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// English title corresponding to tab&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="c1"&gt;// React component corresponding to tab&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-removeplugin"&gt;
  &lt;/a&gt;
  3. removePlugin
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Support the id of the panel to be removed&lt;/span&gt;
&lt;span class="cm"&gt;/*
System =&amp;gt; system;
Elements =&amp;gt; elements;
Console =&amp;gt; console
Application =&amp;gt; application
NetWork =&amp;gt; network
Performance =&amp;gt; performance
Settings =&amp;gt; settings
*/&lt;/span&gt;
&lt;span class="nx"&gt;mdebug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removePlugin&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-exportlog"&gt;
  &lt;/a&gt;
  4. exportLog
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*
@returned {
  type: '' // Log type
  source: [], // Original log
}
@params type
// type is equal to log, return all console logs
// type is equal to net, return all net logs
*/&lt;/span&gt;
&lt;span class="nx"&gt;mdebug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exportLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-on"&gt;
  &lt;/a&gt;
  5. on
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;mdebug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-emit"&gt;
  &lt;/a&gt;
  6. emit
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;mdebug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#event-list"&gt;
  &lt;/a&gt;
  Event list
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Event name&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;params&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Trigger timing&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ready&lt;/td&gt;
&lt;td&gt;object&lt;/td&gt;
&lt;td&gt;mdebug loaded&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;addTab&lt;/td&gt;
&lt;td&gt;object&lt;/td&gt;
&lt;td&gt;Add panel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;removeTab&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;td&gt;Remove panel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;changeTab&lt;/td&gt;
&lt;td&gt;object&lt;/td&gt;
&lt;td&gt;Panel switch&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#development"&gt;
  &lt;/a&gt;
  development
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;npm i&lt;/li&gt;
&lt;li&gt;npm start&lt;/li&gt;
&lt;li&gt;npm run build &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  License
&lt;/h2&gt;

&lt;p&gt;The MIT License (MIT). Please see &lt;a href="//./LICENSE"&gt;License File&lt;/a&gt; for more information.&lt;/p&gt;

</description>
      <category>react</category>
      <category>html</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>Biggest underrated resources for programmers</title>
      <author>Asmit Malakannawar</author>
      <pubDate>Thu, 26 Aug 2021 10:00:37 +0000</pubDate>
      <link>https://dev.to/asmit2952/biggest-underrated-resources-for-programmers-15bk</link>
      <guid>https://dev.to/asmit2952/biggest-underrated-resources-for-programmers-15bk</guid>
      <description>&lt;p&gt;When learning CS, there are some useful sites you must know to get always informed to do your technologies even better and learn new things. Here are some tools you should have under your belt (or at least know about), even if you might’ve never heard of them! They could save you later on...&lt;/p&gt;

&lt;p&gt;Just check them out...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gtgtsitepointcom"&gt;
  &lt;/a&gt;
  &amp;gt;&amp;gt;&lt;a href="https://www.sitepoint.com/community/"&gt;sitepoint.com&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A community for web designers and developers to discuss everything web development from HTML, CSS, JavaScript, PHP, Photoshop, SEO, and more&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jjejfh4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ss9ra7sl7sfkauf1zkvq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jjejfh4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ss9ra7sl7sfkauf1zkvq.png" alt="www.sitepoint.com_community_ (1)"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gtgtcodenewbieorg"&gt;
  &lt;/a&gt;
  &amp;gt;&amp;gt;&lt;a href="https://www.codenewbie.org/"&gt;codenewbie.org&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Code Newbie is the most supportive community of programmers and people learning to code. You can also listen to podcast stories from the people on their coding journey.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---5z6WsJF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/991gevcj11gi1xq34e1n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---5z6WsJF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/991gevcj11gi1xq34e1n.png" alt="www.codenewbie.org_"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gtgtscotchio"&gt;
  &lt;/a&gt;
  &amp;gt;&amp;gt;&lt;a href="https://scotch.io/"&gt;scotch.io&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Eat, sleep, code, repeat. Fun and practical web development. It is a web development blog discussing all things programming, development, web and life. It provides high quality and easy to understand content for web developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K4weXPL3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4f52hogn1byx7jsu4eb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K4weXPL3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4f52hogn1byx7jsu4eb.png" alt="Screenshot (114)"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gtgtfoundationmozillaorg"&gt;
  &lt;/a&gt;
  &amp;gt;&amp;gt;&lt;a href="https://foundation.mozilla.org/en/initiatives/web-literacy/"&gt;foundation.mozilla.org&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A framework for entry-level web literacy &amp;amp; 21st Century skills, which also provides access to teaching activities sorted by category.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wCvLgZGV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7jadt4v51q0u0aiuatc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wCvLgZGV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7jadt4v51q0u0aiuatc.png" alt="foundation.mozilla.org_en_initiatives_web-literacy_"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gtgtedabitcom"&gt;
  &lt;/a&gt;
  &amp;gt;&amp;gt;&lt;a href="https://edabit.com/"&gt;edabit.com&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Edabit is great for beginners looking to practice their coding skills daily by solving bite-sized challenges. They provide software engineers with small challenges that help them advance their skills quickly. With levels ranging from very easy to expert, Edabit has more than 10,000 coding challenges to choose from.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TWHqvlVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hwpujx4qagtxgn2elqx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TWHqvlVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hwpujx4qagtxgn2elqx.png" alt="edabit.com_"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gtgtdevtube"&gt;
  &lt;/a&gt;
  &amp;gt;&amp;gt;&lt;a href="https://dev.tube/"&gt;dev.tube&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Enjoy the best technical videos and share it with friends, colleagues, and the world. This is the place where you will find YouTube videos from conferences collected by developers for developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wq4HxVC2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2re7wxe6dpj2gw8fjvz8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wq4HxVC2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2re7wxe6dpj2gw8fjvz8.png" alt="dev.tube_"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gtgtcodebeautifyorg"&gt;
  &lt;/a&gt;
  &amp;gt;&amp;gt;&lt;a href="https://codebeautify.org/"&gt;codebeautify.org&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;CodeBeautify is an online script editor, beautifier, minifier, converter of JSON, XML, HTML, CSS, RSS etc, Data Convertor, String/Number Functionalities. There are so many tools, just check them out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AZP0DI5U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d85it6qogqyn9m6ezivh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AZP0DI5U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d85it6qogqyn9m6ezivh.png" alt="codebeautify.org_"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gtgtoverapicom"&gt;
  &lt;/a&gt;
  &amp;gt;&amp;gt;&lt;a href="https://overapi.com/"&gt;overapi.com&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A site collecting all the cheatsheets, all!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UlyFK_AV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dofaix7ea3x2fxh22u4v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UlyFK_AV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dofaix7ea3x2fxh22u4v.png" alt="overapi.com_"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gtgtminifierorg"&gt;
  &lt;/a&gt;
  &amp;gt;&amp;gt;&lt;a href="https://minifier.org/"&gt;minifier.org&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Enables the user to minify short piece of JavaScript and CSS codes with just one click. It removes whitespace, strips comments, combines files, and optimizes/shortens a few common programming patterns. And it comes with a huge test suite.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LRVlBFgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dj82c6fy4xfs1n8c4zn0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LRVlBFgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dj82c6fy4xfs1n8c4zn0.png" alt="minifier.org_"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gtgtbalsamiqcom"&gt;
  &lt;/a&gt;
  &amp;gt;&amp;gt;&lt;a href="https://balsamiq.com/"&gt;balsamiq.com&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It is a web-based user interface design tool for creating wireframes (sometimes called mockups or low-fidelity prototypes). You can use it to generate digital sketches of your idea or concept for an application or website, to facilitate discussion and understanding before any code is written.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lq4XnIgS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9wo38u1qbfyn361uk8d7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lq4XnIgS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9wo38u1qbfyn361uk8d7.png" alt="balsamiq.com_"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gtgtresponsinatorcom"&gt;
  &lt;/a&gt;
  &amp;gt;&amp;gt;&lt;a href="http://www.responsinator.com/"&gt;responsinator.com&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A free to use tool where you can check the responsiveness of your website for the latest devices.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vd8HyWLf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kpm36p9k69w5zqx9tki.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vd8HyWLf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kpm36p9k69w5zqx9tki.png" alt="Screenshot (115)"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gtgtdesignmodocom"&gt;
  &lt;/a&gt;
  &amp;gt;&amp;gt;&lt;a href="https://designmodo.com/responsive-test/"&gt;designmodo.com&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Apart from other features like email template maker, Designmodo offers responsive web design testing. Designmodo also provides articles, tutorials and industry news about trends and techniques.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---o2OyJQV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7bt554uuzyrmatcti3u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---o2OyJQV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7bt554uuzyrmatcti3u.png" alt="designmodo.com_responsive-test_"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Do you know more free resources like these, then please comment down below 👇🏻&lt;/p&gt;

&lt;p&gt;Peace!!😉✌&lt;/p&gt;

</description>
      <category>coding</category>
      <category>resources</category>
      <category>programming</category>
      <category>developer</category>
    </item>
    <item>
      <title>Let's optimize JavaScript - password generator (2.15x faster)</title>
      <author>Keff</author>
      <pubDate>Thu, 26 Aug 2021 09:46:27 +0000</pubDate>
      <link>https://dev.to/nombrekeff/i-created-one-of-the-fastests-node-js-password-generators-without-knowing-16ll</link>
      <guid>https://dev.to/nombrekeff/i-created-one-of-the-fastests-node-js-password-generators-without-knowing-16ll</guid>
      <description>&lt;p&gt;I was searching through Github explore, when I found a password generator (&lt;a href="https://github.com/omgovich/omgopass"&gt;omgopass&lt;/a&gt;), that supposedly was quite a lot faster that other alternatives. 600 times faster than &lt;a href="https://www.npmjs.com/package/password-generator"&gt;&lt;code&gt;password-generator&lt;/code&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#this-is-the-benchmark-raw-omgopass-endraw-shows"&gt;
  &lt;/a&gt;
  This is the benchmark &lt;code&gt;omgopass&lt;/code&gt; shows:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J1J-A8TT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/alwpeyf073o5i4rnirlo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J1J-A8TT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/alwpeyf073o5i4rnirlo.png" alt="Original omgopass Benchmark"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After seeing this I remembered I did a password generator a couple weeks back, and did not perform any benchmarks, so I decided to test my approach with this other libraries. &lt;/p&gt;

&lt;p&gt;To my surprise it did fairly well, scoring second place in the same benchmark as shown above. Quite good for not even trying. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#%C2%A0benchmark-with-my-pass-generator-raw-passgenny-endraw-"&gt;
  &lt;/a&gt;
   Benchmark with my pass generator (&lt;a href="https://github.com/nombrekeff/pass-genny"&gt;&lt;code&gt;passGenny&lt;/code&gt;&lt;/a&gt;):
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0VYQ1EOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sjhq73acnomolt1lrgm6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0VYQ1EOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sjhq73acnomolt1lrgm6.png" alt="Benchmark with passGenny"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#considerations"&gt;
  &lt;/a&gt;
  Considerations
&lt;/h3&gt;

&lt;p&gt;This benchmark is not a reflection of the quality of the library or the skills of the developers, to really be sure a load more tests and benchmarks should be done. &lt;/p&gt;

&lt;p&gt;Also, features vary from one library to the other, ones are readable, ones are not. Some use crypto for random, some not.&lt;/p&gt;

&lt;p&gt;With that being said,&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%C2%A0lets-make-passgenny-faster"&gt;
  &lt;/a&gt;
   Let's make &lt;strong&gt;passGenny&lt;/strong&gt; faster
&lt;/h3&gt;

&lt;p&gt;I decided to give it a go, and try optimizing it, let's see the original code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PasswordGenerator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;upperCaseChars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;lowerCaseChars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abcdefghijklmnopqrstuvwxyz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;symbolsChars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;&amp;gt;[]{}=?()&amp;amp;%$#@!¡?¿*_-.:;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;numbersString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0123456789&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;lowercase&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;readable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;updateOptions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;newOptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;_getCharactersForOptions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;combinedCaracters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lowercase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;combinedCaracters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;PasswordGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lowerCaseChars&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;combinedCaracters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;PasswordGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;upperCaseChars&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;combinedCaracters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;PasswordGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;symbolsChars&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;combinedCaracters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;PasswordGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numbersString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;combinedCaracters&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;combinedCaracters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_getCharactersForOptions&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;combinedCaracters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;combinedCaracters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this class does is, from a set of options, it will generate passwords. It does this by combining all characters allowed (by the options) into a single array, then we iterate over the length of the password (defined by options), and get a random character from that array.&lt;/p&gt;

&lt;p&gt;Simple enough right? Now, I think we could optimize this quite a bit, shall we?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optimization-1"&gt;
  &lt;/a&gt;
  Optimization 1
&lt;/h3&gt;

&lt;p&gt;Okay, the first thing I noticed is, in &lt;code&gt;_getCharactersForOptions&lt;/code&gt;, I'm using arrays to hold the valid characters. Using the spread operator to append them into the &lt;code&gt;combinedCaracters&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;This is kinda redundant as we could be using string all the way through. And concatenating a string is way cheaper that combining arrays. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lets-see-what-we-could-change"&gt;
  &lt;/a&gt;
  Let's see what we could change.
&lt;/h4&gt;

&lt;p&gt;First we need to change how we store the characters, we don't need to split them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PasswordGenerator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;upperCaseChars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;lowerCaseChars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abcdefghijklmnopqrstuvwxyz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;symbolsChars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;&amp;gt;[]{}=?()&amp;amp;%$#@!¡?¿*_-.:;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;numbersString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0123456789&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// ... more code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great, now let's modify the &lt;code&gt;_getCharactersForOptions&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PasswordGenerator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;_getCharactersForOptions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;combinedCaracters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lowercase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;combinedCaracters&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;PasswordGeneratorFast1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lowerCaseChars&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;combinedCaracters&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;PasswordGeneratorFast1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;upperCaseChars&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;combinedCaracters&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;PasswordGeneratorFast1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;symbolsChars&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;combinedCaracters&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;PasswordGeneratorFast1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numbersString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;combinedCaracters&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how we now return a string, instead of an array.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lets-see-how-this-does-in-the-benchmark"&gt;
  &lt;/a&gt;
  Let's see how this does in the benchmark
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q28JkC8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2feork2avqgekuk9t9gm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q28JkC8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2feork2avqgekuk9t9gm.png" alt="Benchmark with passGenny with one level of optimization"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Damn, I did not expect that big of a change, it almost doubled.&lt;/p&gt;

&lt;p&gt;As you can see, in this particular case, strings perform a lot better than arrays.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#but-wait"&gt;
  &lt;/a&gt;
  BUT WAIT
&lt;/h4&gt;

&lt;p&gt;I think I can optimize this even more, you might have noticed, that the result of &lt;code&gt;_getCharactersForOptions&lt;/code&gt; will always be the same with the same options. Meaning we don't need to concatenate the string on each password, we only need to generate them if the options change.&lt;/p&gt;

&lt;p&gt;We could approach this in a couple of ways, using memoization (possibly better), creating a proxy around the object or the simple approach I will show you next. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optimization-2"&gt;
  &lt;/a&gt;
  Optimization 2
&lt;/h3&gt;

&lt;p&gt;What I will do is, make options private and force people to change options using &lt;code&gt;updateOptions&lt;/code&gt; method. This will allow me to mark if options have changed.&lt;/p&gt;

&lt;p&gt;Let's see the complete example, and I will break it down afterwards:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PasswordGeneratorFast2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;upperCaseChars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;lowerCaseChars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abcdefghijklmnopqrstuvwxyz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;symbolsChars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;&amp;gt;[]{}=?()&amp;amp;%$#@!¡?¿*_-.:;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;numbersString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0123456789&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="nx"&gt;randomFn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;lowercase&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;readable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;randomFn&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;mathRandom&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_combinedCharacters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_optionsChanged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_getCharactersForOptions&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;updateOptions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;newOptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_optionsChanged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;combinedCaracters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_getCharactersForOptions&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;combinedCaracters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;combinedCaracters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;_getCharactersForOptions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// If options have not changed, we can return the previoulsy combined characters&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_optionsChanged&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_combinedCharacters&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;combinedCaracters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lowercase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;combinedCaracters&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;PasswordGeneratorFast1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lowerCaseChars&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;combinedCaracters&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;PasswordGeneratorFast1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;upperCaseChars&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;combinedCaracters&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;PasswordGeneratorFast1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;symbolsChars&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;combinedCaracters&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;PasswordGeneratorFast1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numbersString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// Update and mark options as not changed&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_combinedCharacters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;combinedCaracters&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_optionsChanged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_combinedCharacters&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;We add &lt;code&gt;_optionsChanged&lt;/code&gt;, indicates whether the options have changed since the last time &lt;code&gt;_getCharactersForOptions&lt;/code&gt; was called.&lt;/li&gt;
&lt;li&gt;We store the last combined character in &lt;code&gt;_combinedCharacters&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;We modify &lt;code&gt;_getCharactersForOptions&lt;/code&gt;, so that if options have not changed, we return the last generated &lt;code&gt;_combinedCharacters&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;We change &lt;code&gt;password +=&lt;/code&gt; with &lt;code&gt;password.concat()&lt;/code&gt; (&lt;em&gt;in my tests, it concat performed better that +=&lt;/em&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's it, let's see how that did:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9nV9HI31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q9qhk7dagak8fs9724qt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9nV9HI31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q9qhk7dagak8fs9724qt.png" alt="Benchmark with passGenny with two levels of optimization"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Impressive if you ask me, we made &lt;strong&gt;passGenny&lt;/strong&gt; more that twice as fast, scoring first by quite a bit of margin. If we phrase it as &lt;strong&gt;omgovich&lt;/strong&gt; did, &lt;code&gt;passGenny&lt;/code&gt; is 2,444 times faster than &lt;a href="https://www.npmjs.com/package/password-generator"&gt;password-generator&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-to-take-from-this"&gt;
  &lt;/a&gt;
  What to take from this?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Keeping it simple can equate to performant&lt;/li&gt;
&lt;li&gt;Don't use arrays if you don't need to&lt;/li&gt;
&lt;li&gt;Check if operations are needed to be performed every time&lt;/li&gt;
&lt;li&gt;If you need performance, sometimes the smaller things make the biggest difference&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;PD: I'm no performance expert, so I might be missing some important thing, please let me know If I missed something or I misinterpreted the results.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Have a great day!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>performance</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
