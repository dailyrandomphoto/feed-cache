<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What are metadata and meta tags</title>
      <author>Magda Ros≈Çaniec</author>
      <pubDate>Sun, 18 Apr 2021 19:53:52 +0000</pubDate>
      <link>https://dev.to/makneta/what-are-metadata-and-meta-tags-3c3</link>
      <guid>https://dev.to/makneta/what-are-metadata-and-meta-tags-3c3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-metadata"&gt;
  &lt;/a&gt;
  What is metadata?
&lt;/h2&gt;

&lt;p&gt;Metadata is data about data. It means that it's usually a short description or summary that describes the content. &lt;/p&gt;

&lt;p&gt;When we are learning HTML we usually omit that part as not so important because it is something we can't see on our websites. But it can be read by search engines so metadata is important for SEO purposes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-we-add-metadata-to-our-websites"&gt;
  &lt;/a&gt;
  How do we add metadata to our websites?
&lt;/h2&gt;

&lt;p&gt;The place for metadata is in the head of our HTML document. There, we're supposed to add Meta Tags. &lt;/p&gt;

&lt;p&gt;When we use code editors with Emmet, we usually can produce the skeleton of our HTML file typing only !, so we often don't think about meta tags. We already have things like the character set used in the page (charset tag), the version of Internet Explorer (http-equiv="X-UA-Compatible", content="IE=edge") and set the viewport to the device-with that helps with making our website responsive.&lt;/p&gt;

&lt;p&gt;Let's look at the file produced with Emmet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also have the title tag there. Always remember to add your title. For SEO purpose it is good to start the title from a keyword but it shouldn‚Äôt be overloaded with keywords. The length of the title should be less than 60 characters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-other-meta-tags-can-we-use"&gt;
  &lt;/a&gt;
  What other meta tags can we use?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;description&lt;/strong&gt; - it‚Äôs a summary of your page, you can write to your users to encourage them to click, you can use keywords here as well as add an offer or a discount. &lt;br&gt;
&lt;strong&gt;author&lt;/strong&gt; - here you can add the author of the website&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;meta name="description" content="This is the description of a site that would be seen in the google search"&amp;gt;
 &amp;lt;meta name="author" content="Your name"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Meta tags are not only important for SEO purposes but also to prepare nice shareable social media objects. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-prepare-nice-social-media-cards-using-meta-tags"&gt;
  &lt;/a&gt;
  How to prepare nice Social Media cards using Meta Tags?
&lt;/h2&gt;

&lt;p&gt;A few years ago Facebook introduced Open Graph meta tags. Thanks to them we can control how URLs of our website are displayed on Social Media. &lt;/p&gt;

&lt;p&gt;Open Graph tags has got &lt;strong&gt;og:&lt;/strong&gt; before tag‚Äôs property&lt;/p&gt;

&lt;p&gt;Mostly used tags are:&lt;br&gt;
&lt;strong&gt;og:title&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta property=‚Äùog:title‚Äù content=‚ÄùTitle of the content‚Äù /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;og:url&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta property=‚Äùog:url‚Äù content=‚Äùhttps://yourwebsite.com‚Äù /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;*&lt;em&gt;og:image *&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta property=‚Äùog:image‚Äù content=‚Äùhttps://yourwebsite.com/photo-link.png‚Äù /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;*&lt;em&gt;og:type *&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta property=‚Äùog:type‚Äù content=‚Äùarticle or website‚Äù /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;og:description&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta property=‚Äùog:description‚Äù content=‚Äùdescription you want to have on the social media card‚Äù /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After adding those Open Graph tags you can check how your social media card will look like on this page: &lt;br&gt;
&lt;a href="https://www.opengraph.xyz/"&gt;https://www.opengraph.xyz/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
    </item>
    <item>
      <title>Introduction to MySQL replication</title>
      <author>Klim Markelov</author>
      <pubDate>Sun, 18 Apr 2021 19:12:19 +0000</pubDate>
      <link>https://dev.to/tutelaris/introduction-to-mysql-replication-97c</link>
      <guid>https://dev.to/tutelaris/introduction-to-mysql-replication-97c</guid>
      <description>&lt;p&gt;Hello, ultra devs! üëãüèª‚ö°Ô∏è&lt;br&gt;
Today I would like to talk about Replication and how it works in MySQL.&lt;/p&gt;

&lt;p&gt;Let's start from the beginning. If you know what replication is, feel free to skip the next chapter.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-replication"&gt;
  &lt;/a&gt;
  What is replication?
&lt;/h3&gt;

&lt;p&gt;Basically, a replication mechanism means storing some copy of data on multiple machines. &lt;em&gt;"How is it different from backups?"&lt;/em&gt; you may wonder. Replication is a bit more than that. When a backup is just a snapshot of the data in a certain time, replication helps you to not only keep the copy of the data in real-time ensuring availability but also facilitate the overload on the database providing both reading and writing to the client and therefore increase throughput. Also, replication helps you to distribute your data storage across the globe decreasing the response time for clients from different parts of the world.&lt;/p&gt;

&lt;p&gt;In this article, we will be talking about &lt;strong&gt;leader-based&lt;/strong&gt; replication, and to continue our journey into this world, it's required to introduce several terms:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;em&gt;Leader (master)&lt;/em&gt; ‚Äì part of the replication system eligible to write and read from the database.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Follower (replica)&lt;/em&gt;  ‚Äì part of the replication system eligible &lt;em&gt;only to read&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Basically, &lt;em&gt;leader&lt;/em&gt; is responsible for all inserts, updates, deletes, and once these changes go through the &lt;em&gt;leader&lt;/em&gt;, it transfers these changes to all its &lt;em&gt;followers&lt;/em&gt; that are responsible for reads and never writes.&lt;/p&gt;

&lt;p&gt;Here is a simple example of single-leader replication with two followers:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_mLINe07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pcwa3h4dw2fdqssu7jo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_mLINe07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pcwa3h4dw2fdqssu7jo.png" alt="Pic.1"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-it-works-in-mysql"&gt;
  &lt;/a&gt;
  How it works in MySQL?
&lt;/h3&gt;

&lt;p&gt;Ok, now we know what replication is, but how it actually works in MySQL? How data got transferred from leader to followers and how MySQL keeps the consistency between them?&lt;/p&gt;

&lt;p&gt;Imagine the situation that dev.to is powered by MySQL. You just wrote the article and clicked on the &lt;strong&gt;Publish&lt;/strong&gt; button. Here is what happens:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Data comes to the leader and get saved in the database;&lt;/li&gt;
&lt;li&gt;The leader saves data changes in the special file called &lt;strong&gt;binary log&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Follower copies changes in &lt;strong&gt;binary log (binlog)&lt;/strong&gt; to its own file called &lt;strong&gt;relay log&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Follower replays these changes from &lt;strong&gt;relay log&lt;/strong&gt; to its own data.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p41VEOyM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0rjg8cotgwpe2cpesq0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p41VEOyM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0rjg8cotgwpe2cpesq0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, to synchronize &lt;strong&gt;relay log&lt;/strong&gt; with leader's &lt;strong&gt;binary log&lt;/strong&gt;, MySQL starts a worker thread that is called &lt;em&gt;I/O follower thread&lt;/em&gt;. It's basically an ordinary client connection to the leader that starts reading its &lt;strong&gt;binary log&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Digging a bit into details, we can ask a quite reasonable question: in which format do &lt;strong&gt;binary log&lt;/strong&gt; and &lt;strong&gt;relay log&lt;/strong&gt; store the data?&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#replication-types"&gt;
  &lt;/a&gt;
  Replication types
&lt;/h3&gt;

&lt;p&gt;Currently, MySQL supports two types of replication: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Statement-based replication;&lt;/li&gt;
&lt;li&gt;Row-based replication.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
  &lt;a href="#statementbased-replication"&gt;
  &lt;/a&gt;
  Statement-based replication
&lt;/h4&gt;

&lt;p&gt;So, as it's clear from the name, &lt;strong&gt;statement-based replication&lt;/strong&gt; records the whole query that changed the state of the data in &lt;strong&gt;binlog&lt;/strong&gt;. So, when a follower decides to synchronize its data with the leader, it copies the query and replays it by executing this query and applying changes to its own data.&lt;/p&gt;

&lt;p&gt;This kind of replication is very easy to implement and has multiple advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It still works when the schema is different on the leader and the follower;&lt;/li&gt;
&lt;li&gt;It's easy to audit and debug;&lt;/li&gt;
&lt;li&gt;It requires not that much disk space.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, with &lt;em&gt;great advantages comes great disadvantages&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Non-deterministic functions&lt;/em&gt;. With non-deterministic functions, it can come up with different data on &lt;strong&gt;leader&lt;/strong&gt; and &lt;strong&gt;follower&lt;/strong&gt;. By non-deterministic functions I mean function like the following: &lt;code&gt;CURRENT_USER()&lt;/code&gt;, &lt;code&gt;RAND()&lt;/code&gt;, &lt;code&gt;IS_FREE_LOCK()&lt;/code&gt; and so on. Executing them first on &lt;strong&gt;leader&lt;/strong&gt; and then on &lt;strong&gt;follower&lt;/strong&gt; can lead to inconsistent data;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Performance penalty&lt;/em&gt;. Imagine if you execute the following query:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;post_statistics&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;statistics_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;posts_amount&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;without having an index on the &lt;code&gt;status&lt;/code&gt; field, and after pressing 'Enter' you just went for a tea (a hypothetical situation, I know, you probably drink coffee). The query got executed on &lt;strong&gt;leader&lt;/strong&gt;, consuming all available CPU, and then &lt;strong&gt;follower&lt;/strong&gt; picked up the baton, copied the query to its &lt;strong&gt;relay log&lt;/strong&gt;, and cheerfully ate all CPU as well;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Triggers and stored routies&lt;/em&gt;. Triggers and stored routines, as well as &lt;em&gt;Non-deterministic functions&lt;/em&gt;, can cause a lot of problems with different side-effects on &lt;strong&gt;leader&lt;/strong&gt; and &lt;strong&gt;follower&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, &lt;strong&gt;Statement-based replication&lt;/strong&gt; has its own advantages, but big disadvantages. Therefore not every database supports this type of replication, but in the case of MySQL, up until &lt;strong&gt;MySQL 5.0&lt;/strong&gt;, this type of replication was the only one supported.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#rowbased-replication"&gt;
  &lt;/a&gt;
  Row-based replication
&lt;/h4&gt;

&lt;p&gt;Compare to &lt;strong&gt;Statement-based replication&lt;/strong&gt;, &lt;strong&gt;Row-based replication&lt;/strong&gt; stores the actual data changes in &lt;strong&gt;binary log&lt;/strong&gt;, but not the query. So, when a &lt;em&gt;follower&lt;/em&gt; replicates the data, it doesn't execute the query, but applies the changes to each record it was applied to on &lt;em&gt;leader&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let's consider the advantages of this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Less CPU intensive&lt;/em&gt;. If we execute the query, described in &lt;strong&gt;Statement-based replication&lt;/strong&gt; chapter, &lt;strong&gt;follower&lt;/strong&gt; does not replay this query, but copy the value and apply the change to its own data record. So, the query gets executed once and doesn't consume all available CPU;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Helps to find data inconsistency&lt;/em&gt;. Since &lt;strong&gt;Row-based replication&lt;/strong&gt; stores the changes only, when &lt;strong&gt;follower&lt;/strong&gt; replays these changes and tries to apply to the data that exists on &lt;strong&gt;leader&lt;/strong&gt; but doesn't exist on &lt;strong&gt;follower&lt;/strong&gt;, it throws the error. Meanwhile &lt;strong&gt;statement-based replication&lt;/strong&gt; proceeds with what it has and keeps the inconsistency hidden, complicating the ability to find the point of failure and fix it;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;No non-deterministic behavior&lt;/em&gt;. Compare to &lt;strong&gt;statement-based replication&lt;/strong&gt;, if you execute the query that has &lt;em&gt;Non-deterministic functions&lt;/em&gt;, it ends up with the same result for both &lt;strong&gt;leader&lt;/strong&gt; and &lt;strong&gt;follower&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Looks nice, that's what we were expecting from replication, right? But along with the advantages come disadvantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;High disk space consumption&lt;/em&gt;. Yeah, we just talked about &lt;em&gt;Less CPU consuming&lt;/em&gt; for this replication, but this doesn't work for all queries. Imagine if you have the following statement:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'draft'&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'published'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Considering the fact, that the &lt;code&gt;posts&lt;/code&gt; table has about &lt;em&gt;1.000.000&lt;/em&gt; of &lt;em&gt;Published&lt;/em&gt; posts, this query becomes quite expensive, since it requires storing &lt;em&gt;1.000.000&lt;/em&gt; of changes in &lt;strong&gt;binary/replication log&lt;/strong&gt; files;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Does not allow different schemas&lt;/em&gt;. Sometimes it might be useful when you have different schemas on &lt;strong&gt;leader&lt;/strong&gt; and &lt;strong&gt;follower&lt;/strong&gt; (I don't know about these cases, but they definitely exist). As it was described above, &lt;strong&gt;row-based replication&lt;/strong&gt; throws an error in case of data inconsistency, caused by different schemas;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Statement is not included in the &lt;strong&gt;binary log&lt;/strong&gt;&lt;/em&gt;. It can be not a problem at all until you try to debug or audit what's going on and what query caused damage to your database. &lt;strong&gt;Row-based replication&lt;/strong&gt; makes it hard to analyze.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we are fluent in replication process language. Everything is clear. Hold on, on the picture of replication example, we can see one &lt;strong&gt;leader&lt;/strong&gt; and two &lt;strong&gt;followers&lt;/strong&gt;. Can we do things differently?üïµÔ∏è‚Äç‚ôÄÔ∏è &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#mysql-supported-topologies"&gt;
  &lt;/a&gt;
  MySQL supported topologies
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#singleleader-replication"&gt;
  &lt;/a&gt;
  Single-leader replication
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---KfreKPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/481z07e9as3fxomjn2gu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---KfreKPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/481z07e9as3fxomjn2gu.png" alt="Single-leader topology"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This type of replication is the most common one. It is useful when you have a lot of reads but not that many writes. You can distribute users reads among &lt;strong&gt;followers&lt;/strong&gt; load-balancing them and therefore providing better response time. With this replication topology, you can easily add one more &lt;strong&gt;follower&lt;/strong&gt; to it. Also, this topology prevents a lot of problems that multiple leaders topology have (will be described in &lt;em&gt;Leader-leader replication&lt;/em&gt;), since it has only one &lt;strong&gt;leader&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#leaderleader-replication"&gt;
  &lt;/a&gt;
  Leader-leader replication
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0SfY08K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uge6q3vos5g12bkaomel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0SfY08K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uge6q3vos5g12bkaomel.png" alt="Leader-leader replication"&gt;&lt;/a&gt;&lt;br&gt;
As it is visible from the picture, this topology involves two &lt;strong&gt;leaders&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This topology is useful when you have different data centers in different locations and you need to provide fast writes to both regions.&lt;/p&gt;

&lt;p&gt;But with this advantage comes a great cost. Suppose, we have a table &lt;code&gt;post_statistics&lt;/code&gt; and you just realized that the number of posts with &lt;strong&gt;Published&lt;/strong&gt; &lt;code&gt;status&lt;/code&gt; is triple more than it's actually written in table and you decide to fix the situation. So, you connect to MySQL and execute the following query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;posts_statistics&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;posts_amount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;posts_amount&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'published'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Meanwhile, somebody from a different part of the world just published his/her first post (just like me) and triggered the following query to be executed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;posts_statistics&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;posts_amount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;posts_amount&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Suppose, the original number of posts was 10k. Due to replication lag, databases ended up with two different numbers: 30.001 and 30.003. And no errors were thrown. &lt;/p&gt;

&lt;p&gt;This is a big disadvantage of this topology, and in practice, it brings more problems than advantages. But if you ended up with this topology, it's better to add few more replicas to it üòÅ&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_HOZp8gm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/523qvnf7soz5qxkhxwcu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_HOZp8gm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/523qvnf7soz5qxkhxwcu.png" alt="Leader-leader with replicas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#activepassive-leaderleader-replication"&gt;
  &lt;/a&gt;
  Active-passive leader-leader replication
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gJxfUaxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hos5gxyt01k0zihf5ahf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gJxfUaxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hos5gxyt01k0zihf5ahf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Active-passive leader-leader replication&lt;/em&gt; topology one server takes the role of the &lt;strong&gt;leader&lt;/strong&gt; and another one takes the role of the &lt;strong&gt;follower&lt;/strong&gt;. But in comparison to the ordinary &lt;em&gt;leader-follower topology&lt;/em&gt;, it allows you to swap easily the &lt;strong&gt;leader&lt;/strong&gt; responsibility from one server to another. &lt;/p&gt;

&lt;p&gt;It's useful in many cases. For example, if you execute &lt;code&gt;ALTER TABLE&lt;/code&gt; that locks the whole table for reads and writes, you can stop the replication process, easily swap &lt;strong&gt;leader&lt;/strong&gt; responsibility, execute &lt;code&gt;ALTER TABLE&lt;/code&gt; on the passive server, then swap the responsibility back, restore replication process, and execute &lt;code&gt;ALTER TABLE&lt;/code&gt; on the remaining server. It can help you to keep your service alive while executing that expensive query.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#other-topologies"&gt;
  &lt;/a&gt;
  Other topologies
&lt;/h4&gt;

&lt;p&gt;There are many other topologies that are supported by MySQL:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Replication Ring topology 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IN-8DWtn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8x5ik6ozxn5i0d07h7o.png" alt="Replication Ring topology"&gt;
&lt;/li&gt;
&lt;li&gt;Tree of pyramid topology
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HsDaUqxc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwwivdpuap96gfjxrbnp.png" alt="Tree of pyramid topology"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And many others. You can choose the best topology that fits your purposes or create your own. This is the list üëÜüèª of the most common topologies used in MySQL.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Replication&lt;/strong&gt; is a mechanism of having a consistent copy of the data storage. It provides:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Data distribution;&lt;/li&gt;
&lt;li&gt;Load balancing;&lt;/li&gt;
&lt;li&gt;Backups;&lt;/li&gt;
&lt;li&gt;High availability and failover.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Leader-based replication&lt;/em&gt; consists of &lt;strong&gt;leader&lt;/strong&gt; and &lt;strong&gt;follower&lt;/strong&gt;. Both of them have their own journal of changes: &lt;strong&gt;binary log&lt;/strong&gt; and &lt;strong&gt;relay log&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are two types of replication:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Statement-based replication&lt;/strong&gt;. It's represented in queries itself.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Row-based replication&lt;/strong&gt;. It's represented in direct data changes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are multiple topologies for replication:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Leader-follower topology;&lt;/li&gt;
&lt;li&gt;Leader-leader topology;&lt;/li&gt;
&lt;li&gt;Leader-leader active-passive topology;&lt;/li&gt;
&lt;li&gt;Ring topology;&lt;/li&gt;
&lt;li&gt;Tree of Pyramids topology.
And many specialized topologies together with custom ones.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's it! Thank you for your attention! I hope you liked this post üòå&lt;/p&gt;

</description>
      <category>mysql</category>
      <category>replication</category>
      <category>distributedsystems</category>
    </item>
    <item>
      <title>Is Redux DEAD? Try Zustand!</title>
      <author>Marius Espejo</author>
      <pubDate>Sun, 18 Apr 2021 19:10:33 +0000</pubDate>
      <link>https://dev.to/marius/is-redux-dead-try-zustand-9g8</link>
      <guid>https://dev.to/marius/is-redux-dead-try-zustand-9g8</guid>
      <description>&lt;p&gt;With the advent of hooks a lot of ReactJS developers have moved away from Redux as the default state management of choice. &lt;/p&gt;

&lt;p&gt;However is simply using useState, useReducer, and the context API good enough? I highly recommend checking out Zustand! Dead simple and unopinionated state management!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Zustand is a small, fast and scaleable bearbones state-management solution. Has a comfy api based on hooks, isn't boilerplatey or opinionated, but still just enough to be explicit and flux-like.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://youtu.be/UcHkC5sJPWw"&gt;In this video&lt;/a&gt; we're going to walk through the basics of using Zustand. We'll also discuss the pros and cons of this approach compared to reducer-based and context-based solutions like the useReducer hook and Redux.&lt;/p&gt;

&lt;p&gt;Let me know what you think of Zustand!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UcHkC5sJPWw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>showdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Web Sohbet</title>
      <author>sohbetweb</author>
      <pubDate>Sun, 18 Apr 2021 18:26:20 +0000</pubDate>
      <link>https://dev.to/sohbetweb/web-sohbet-5h49</link>
      <guid>https://dev.to/sohbetweb/web-sohbet-5h49</guid>
      <description>&lt;p&gt;Web yazƒ±lƒ±m ve uygulamal geli≈ütirmeyi √ºcretsiz kullanƒ±cƒ±larƒ±n hizmetine sunan netlify, vercel, firebase, github ve gitlab acƒ±k kaynaklƒ± web geli≈ütirme platformlarƒ± sayesinde kendi web yazƒ±lƒ±m ya da uygulamanƒ±zƒ± olu≈üturmak ve web uygulamanƒ±zƒ± √ºcretsiz olu≈üturduƒüunuz platform √ºzerinden yayƒ±nlamak m√ºmk√ºn.&lt;br&gt;
&lt;a href="https://websohbet.sourceforge.io"&gt;https://websohbet.sourceforge.io&lt;/a&gt; sourceforge github ve gitlab destekli proje olu≈üturma ve web √ºzerinden kolayca yayƒ±nlayabileceƒüiniz bir platform&lt;br&gt;
&lt;a href="https://sohbetodalari.web.app"&gt;https://sohbetodalari.web.app&lt;/a&gt; Cloud googlenin √ºcretsiz deploy (ios, adnroid ve web) imkanƒ± sunduƒüu firebase.google.com git ve node.js uygulamalarƒ±n yanƒ± sƒ±ra wordpress web app yayƒ±nlama imkanƒ±da verir.&lt;br&gt;
&lt;a href="https://sohbet.readthedocs.io"&gt;https://sohbet.readthedocs.io&lt;/a&gt; readthedocs web sitesinin kullanƒ±cƒ±larƒ±na saƒüladƒ±ƒüƒ± u√ßretsiz docs web projesi olu≈üturma ve yayƒ±nlama sitesidir. Sphinx uygulamasƒ± ile olu≈üturƒüunuz web sitenizi github ya da gitlab projeniz i√ßerisinde barƒ±ndƒ±rarak readthedocs.io aynasƒ±nda yayƒ±nlayabilirsiniz.&lt;br&gt;
&lt;a href="https://sohbet.vercel.app"&gt;https://sohbet.vercel.app&lt;/a&gt; Vercel cok geni≈ü yelpazeli web uygulama barƒ±ndƒ±rma ve yayƒ±nlama platformudur. Gitlab ya da github √ºzerinde olu≈üturdugunuz web projenizi vercel.app alt alan adlarƒ± ile yayƒ±nlayabilirsiniz.&lt;br&gt;
Yukarƒ±da bahsettiƒüim siteleri yardƒ±mƒ± ile web proje olu≈üturmak ve yayƒ±nlamak son derece basittir. Yazƒ±lƒ±m yada kodlama bilmeden web uygulamasƒ± olu≈üturma ve yayƒ±nlama fƒ±rsatƒ± verir.&lt;/p&gt;

</description>
      <category>node</category>
      <category>git</category>
      <category>vercel</category>
      <category>firebase</category>
    </item>
    <item>
      <title>3-2-1 Newsletter: 2 must-have tools for content creation</title>
      <author>kapeel kokane</author>
      <pubDate>Sun, 18 Apr 2021 18:11:56 +0000</pubDate>
      <link>https://dev.to/comscience/3-2-1-newsletter-2-must-have-tools-for-content-creation-c7n</link>
      <guid>https://dev.to/comscience/3-2-1-newsletter-2-must-have-tools-for-content-creation-c7n</guid>
      <description>&lt;h3&gt;
  &lt;a href="#hi-there"&gt;
  &lt;/a&gt;
  Hi There!üëãüèæ
&lt;/h3&gt;

&lt;p&gt;üôèüèæ Welcome to my blog newsletter where every week, I share a 3-2-1 &lt;strong&gt;curated list&lt;/strong&gt; consisting of my content and also what resonated with me over the last week.&lt;/p&gt;

&lt;p&gt;üëâüèæ In this week's post, we have &lt;strong&gt;3 tweets&lt;/strong&gt;, &lt;strong&gt;2 awesome tools&lt;/strong&gt; for content creation, and &lt;strong&gt;1 video editor&lt;/strong&gt; that will help you better understand asynchronous JavaScript!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tweets"&gt;
  &lt;/a&gt;
  3Ô∏è‚É£ tweets
&lt;/h3&gt;

&lt;p&gt;1] A single page &lt;strong&gt;#sketchnote&lt;/strong&gt; created to help understand the concept of &lt;strong&gt;IIFE&lt;/strong&gt; in JavaScript.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1l_mbDFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EzRi2nfVkAUUkmV.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tCoQBxER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1372919009939652612/E9s309tH_normal.jpg" alt="Kapeel üíô Typescript profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Kapeel üíô Typescript
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @kokaneka
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Do you know what an IIFE in JavaScript is?&lt;br&gt;&lt;br&gt;Day 31:  Here's a &lt;a href="https://twitter.com/hashtag/sketchnotes"&gt;#sketchnotes&lt;/a&gt; document that I created on the topic. &lt;br&gt;&lt;br&gt;All of my sketchnotes on &lt;a href="https://twitter.com/gumroad"&gt;@gumroad&lt;/a&gt; :&lt;br&gt;&lt;a href="https://t.co/MXg7OJTfjl"&gt;gumroad.com/kapeelkokane&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/javaScript"&gt;#javaScript&lt;/a&gt; basics series&lt;br&gt;&lt;a href="https://twitter.com/hashtag/100DaysOfCode"&gt;#100DaysOfCode&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/CodeNewbies"&gt;#CodeNewbies&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/webdev"&gt;#webdev&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:48 PM - 18 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1383839829281021955" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1383839829281021955" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1383839829281021955" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;2] A single-line code solution to find the &lt;strong&gt;smallest element&lt;/strong&gt; in a JavaScript array.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Mz5OaEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EzHNZGSVEAI11YB.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tCoQBxER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1372919009939652612/E9s309tH_normal.jpg" alt="Kapeel üíô Typescript profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Kapeel üíô Typescript
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @kokaneka
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Need to find the smallest element in an array? ü§î&lt;br&gt;&lt;br&gt;Day 30:  Here's a 1 line code that uses Math.min() and the spread operator&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/javaScript"&gt;#javaScript&lt;/a&gt; basics series&lt;br&gt;&lt;a href="https://twitter.com/hashtag/100DaysOfCode"&gt;#100DaysOfCode&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/CodeNewbies"&gt;#CodeNewbies&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/webdev"&gt;#webdev&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:38 PM - 16 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1383112466989686787" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1383112466989686787" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1383112466989686787" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;3] The array &lt;strong&gt;utility method&lt;/strong&gt; to &lt;code&gt;fill&lt;/code&gt; an entire array with a value. Helps in pre-filling with default value.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MzG2mUG---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/Ey8THx-VcAIMoN8.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tCoQBxER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1372919009939652612/E9s309tH_normal.jpg" alt="Kapeel üíô Typescript profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Kapeel üíô Typescript
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @kokaneka
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Want to replace all the items of an array with a value?ü§î&lt;br&gt;&lt;br&gt;Day 28:  use Array.prototype.fill()&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/javaScript"&gt;#javaScript&lt;/a&gt; basics series&lt;br&gt;&lt;a href="https://twitter.com/hashtag/100DaysOfCode"&gt;#100DaysOfCode&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/CodeNewbies"&gt;#CodeNewbies&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/webdev"&gt;#webdev&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:48 PM - 14 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1382345063645155333" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1382345063645155333" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1382345063645155333" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#tools-for-content-creation"&gt;
  &lt;/a&gt;
  2Ô∏è‚É£ tools for content creation
&lt;/h3&gt;

&lt;p&gt;These are the 2 tools that I find myself using regularly.&lt;/p&gt;

&lt;p&gt;1] The first one is &lt;a href="https://carbon.now.sh/"&gt;carbon&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mE3hWpP8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qba4evqdt79t860gpe64.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mE3hWpP8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qba4evqdt79t860gpe64.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
This tool helps you generate &lt;strong&gt;beautiful code snippets&lt;/strong&gt; and download a rendered image. It also allows for various levels of customization like &lt;em&gt;borders, shadows, fonts&lt;/em&gt;, etc. &lt;/p&gt;

&lt;p&gt;2] The second one is &lt;a href="https://excalidraw.com/"&gt;excalidraw&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BoTCpDt1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2s7h955a6e02ptm3scwq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BoTCpDt1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2s7h955a6e02ptm3scwq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
This tool lets us create &lt;strong&gt;flow charts&lt;/strong&gt; or rather any sort of drawings with a &lt;strong&gt;hand-drawn&lt;/strong&gt; feel to them. If you are into creating complex charts and want to make them different, give this tool a try.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  1Ô∏è‚É£ video
&lt;/h3&gt;

&lt;p&gt;If you want to truly understand &lt;strong&gt;asynchronous JavaScript&lt;/strong&gt;, I highly recommend this video that I came across recently. It's from the &lt;strong&gt;Google Chrome Developers&lt;/strong&gt; YouTube channel where two Google devs discuss the different caveats associated with async JavaScript:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8eHInw9_U8k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you liked that curated list, make sure you &lt;strong&gt;follow me&lt;/strong&gt; on &lt;a href="https://twitter.com/Kokaneka"&gt;Twitter&lt;/a&gt; so that you get the resources in your feed the day I post it, instead of later down the week as a part of this newsletter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/Kokaneka"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--158Tju2z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3p4a72xpzv710bg6hfax.png" alt="My twitter profile"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope that helped! As always, keep rocking.&lt;br&gt;
Cheers üëêüèΩ :)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to deploy/update new Ghost version 4 to Heroku</title>
      <author>Lovekesh Kumar</author>
      <pubDate>Sun, 18 Apr 2021 18:02:52 +0000</pubDate>
      <link>https://dev.to/thelovekesh/how-to-deploy-update-new-ghost-version-4-to-heroku-dhg</link>
      <guid>https://dev.to/thelovekesh/how-to-deploy-update-new-ghost-version-4-to-heroku-dhg</guid>
      <description>&lt;p&gt;Ghost has currently rolled out its newer V4 publicly. The newer version of Ghost comes with fancy and new powerful features. After the launch of v4, many users who are using v3 on Heroku are in great trouble and don't know that how to trouble this problem and update to the latest version 4.&lt;/p&gt;

&lt;p&gt;Well, the problem has been solved with the brand new &lt;code&gt;ghost-v4-on-heroku&lt;/code&gt; repo. Anyone can deploy the latest ghost v4 on Heroku by simply clicking on a button.&lt;/p&gt;

&lt;p&gt;You can visit any of the links to deploy Ghost version 4 on Heroku or you can update your pre-deployed Ghost version 3 to version 4.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/thelovekesh/ghost-v4-on-heroku"&gt;GitHub Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://heroku.com/deploy?template=https://github.com/thelovekesh/ghost-v4-on-heroku"&gt;Deploy on Heroku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#problems-or-need-help"&gt;
  &lt;/a&gt;
  Problems or need help?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ask.codebulbs.com/"&gt;Ask Question&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/thelovekesh/ghost-v4-on-heroku/issues/new/"&gt;Open an Issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/thelovekesh/ghost-v4-on-heroku/discussions"&gt;Use GitHub Discussions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#you-can-perform-some-more-actions-"&gt;
  &lt;/a&gt;
  You can perform some more actions ;)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/thelovekesh/ghost-v4-on-heroku/"&gt;Star the repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/thelovekesh/ghost-v4-on-heroku/fork"&gt;Fork the repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>heroku</category>
      <category>ghost</category>
      <category>ghostblog</category>
      <category>ghostv4</category>
    </item>
    <item>
      <title>What‚Äôs an Example of Good E-Commerce Database Design?</title>
      <author>Shanika Wickramasinghe</author>
      <pubDate>Sun, 18 Apr 2021 18:02:06 +0000</pubDate>
      <link>https://dev.to/fabric_commerce/what-s-an-example-of-good-e-commerce-database-design-3e9l</link>
      <guid>https://dev.to/fabric_commerce/what-s-an-example-of-good-e-commerce-database-design-3e9l</guid>
      <description>&lt;h1&gt;
  &lt;a href="#whats-an-example-of-good-ecommerce-database-design"&gt;
  &lt;/a&gt;
  What's an Example of Good E-Commerce Database Design?
&lt;/h1&gt;

&lt;p&gt;Databases are vital tools for storing, managing and retrieving information, and they are critical for building an e-commerce system. A well-structured database is the heart of a good e-commerce system that manages all the interactions of the system.&lt;/p&gt;

&lt;p&gt;A good e-commerce database design should include the following characteristics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Simple and Functional Database Structure&lt;/strong&gt;&lt;br&gt;
The database table structure should be relatively simple but needs to cover all the required functionality without compromising the user experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;High Performance&lt;/strong&gt;&lt;br&gt;
The database queries should execute fastly and efficiently to facilitate live customer interactions and provide a satisfactory shopping experience. Therefore, the selected database should consist of good indexing and performance optimization options.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;High Availability and Scalability&lt;/strong&gt;&lt;br&gt;
A good database design should be highly available with automatic snapshots and enable automatic scaling to support future platform growth as well as sudden traffic spikes.&lt;/p&gt;

&lt;p&gt;Based on the above characteristics, an e-commerce database design boils down into three major aspects as the following.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; The Scope of the Database.&lt;/li&gt;
&lt;li&gt; Type of the Database.&lt;/li&gt;
&lt;li&gt; Database Infrastructure.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The scope refers to the planned functionality of the database. The underlying table structure of the database, its relationships, and indexes all depend on the functionality of the e-commerce platform. The database type can vary from a relational database to a NoSQL database or a hybrid approach depending on the requirements and the underlying data structure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-scope-of-the-database"&gt;
  &lt;/a&gt;
  The Scope of the Database.
&lt;/h2&gt;

&lt;p&gt;The main consideration when designing the database is identifying the functionalities offered by the e-commerce platform. These functionalities can be further divided as core-functions and extra-functions (additional-functions).&lt;/p&gt;

&lt;p&gt;Core-functions are the functions that are necessary for facilitating the day-to-day operations of the e-commerce platform.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  User Management&lt;/li&gt;
&lt;li&gt;  Product/Inventory Management&lt;/li&gt;
&lt;li&gt;  Shopping Cart Function &lt;/li&gt;
&lt;li&gt;  Payment Management
&lt;/li&gt;
&lt;li&gt;  Shipping/Logistics Management&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extra/Additional functions are the nice-to-have functions for the e-commerce platform that will enhance the user experience for both end-users (customers) and administrators (business). Following are some functions that come under this category.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Marketing Functions&lt;/li&gt;
&lt;li&gt;  Help Desk/Support&lt;/li&gt;
&lt;li&gt;  Advanced Analytics
&lt;/li&gt;
&lt;li&gt;  Third-Party Integrations&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#database-structure-for-corefunctions"&gt;
  &lt;/a&gt;
  Database Structure for Core-Functions
&lt;/h2&gt;

&lt;p&gt;In this section, let's see how to structure the database to facilitate the core functions. The below table structure is an example of a database design that covers the core functionality of an e-commerce platform.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z-_2SDwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/ecommerce-platform-data-1.png%3Fwidth%3D1331%26name%3Decommerce-platform-data-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z-_2SDwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/ecommerce-platform-data-1.png%3Fwidth%3D1331%26name%3Decommerce-platform-data-1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This example covers all the basics of an e-commerce platform. There, the table fields and indexes depend on the design of the overall platform, and it contains three separate sections for user management, product management, and shopping process. Let's have a closer look at each section.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#user-management"&gt;
  &lt;/a&gt;
  User Management
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ojs2L5GJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/user-table-ecommerce-2.png%3Fwidth%3D561%26name%3Duser-table-ecommerce-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ojs2L5GJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/user-table-ecommerce-2.png%3Fwidth%3D561%26name%3Duser-table-ecommerce-2.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have created a user table that contains all the user details along with user_payment and user_address tables to store multiple addresses and payment details of users. This structure offers more granular control over data while eliminating duplicate records.&lt;/p&gt;

&lt;p&gt;Another way to manage users is by creating two separate user tables for end-users and administrators and assigning relationships according to their requirements, as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Kbo3QtL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/user-administrator-ecommerce-table-3.png%3Fwidth%3D1157%26name%3Duser-administrator-ecommerce-table-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Kbo3QtL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/user-administrator-ecommerce-table-3.png%3Fwidth%3D1157%26name%3Duser-administrator-ecommerce-table-3.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#product-management"&gt;
  &lt;/a&gt;
  Product Management
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_dI5c3Xv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/product-management-ecommerce-table-4.png%3Fwidth%3D618%26name%3Dproduct-management-ecommerce-table-4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_dI5c3Xv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/product-management-ecommerce-table-4.png%3Fwidth%3D618%26name%3Dproduct-management-ecommerce-table-4.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Managing products is not simply about maintaining a list of products. You also have to manage the inventory, discounts, categories, and other attributes of the products. So, always focus on simplifying the data structure while reducing duplicates. In the above table structure, the main product table contains information about the products.&lt;/p&gt;

&lt;p&gt;There are two other separate tables called discount, product_inventory, and product_category that are connected to it through database relationships. This approach provides the greatest level of flexibility to the database. For instance, we can simply query the product_inventory table to check for inventory without going through all the data associated with other related tables. This is also a good place to utilize indexes to increase the performance of the database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shopping-process"&gt;
  &lt;/a&gt;
  Shopping Process
&lt;/h3&gt;

&lt;p&gt;This is the most critical and complex part when it comes to designing the database. The shopping process will guide a user to search the products, add the desired products to the shopping cart, and finally complete the transaction using a payment provider.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jnuh7_F6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/shopping-process-ecomerce-data-table-5.png%3Fwidth%3D1100%26name%3Dshopping-process-ecomerce-data-table-5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jnuh7_F6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/shopping-process-ecomerce-data-table-5.png%3Fwidth%3D1100%26name%3Dshopping-process-ecomerce-data-table-5.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The heart of the e-commerce process connects users with products. A good chunk of design effort should be exhausted to streamline the shopping process. In the above example, there are shopping_session and cart_item as temporary data stores that only store the shopping session information of the current user until the order is confirmed and the data is moved to permanent storage tables with the payment details. (order_details, order_items, and payment details.). You can check out this article for a detailed explanation of how to design a shopping cart database.&lt;/p&gt;

&lt;p&gt;As shown in this section, the scope of the database structure is determined by the overall functionality of the platform. Therefore, it is paramount that you properly define the required functionality before diving into designing the database. This way, you can create a clearly defined data structure with enough flexibility to support future expansions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#type-of-the-database"&gt;
  &lt;/a&gt;
  Type of the Database
&lt;/h2&gt;

&lt;p&gt;The next consideration is to determine the type of database. To have the best e-commerce database design, you must first consider two main database types: RDBMS or NoSQL databases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Relational database:&lt;/strong&gt; This is similar to spreadsheets and uses tables, columns, and rows to organize and retrieve data. It is built using the standard query language (SQL), and all the data is related to each other.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; MySQL, PostgreSQL, MariaDB, Microsoft SQL, Amazon RDS, Azure SQL Database&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Non-relational or NoSQL database:&lt;/strong&gt; This is a nontabular database with a flexible schema that works well for storing unstructured data. Contrary to its name, a non-relational database can store related data. It does so by nesting related data within a single data structure instead of splitting them between tables. There are various NoSQL databases, and the most popular ones are document stores and key stores.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; MongoDB, Apache Cassandra, Amazon DynamoDB, Azure CosmosDB, Couchbase.&lt;/p&gt;

&lt;p&gt;Both these database types are solid options for any e-commerce platform, and the choice is up to the designer and depends on the requirements of the platform. A relational database will provide a simple and robust platform to create the database, while NoSQL offers better data flexibility, scalability, and slightly better performance. In the coming section, we'll explore an example of e-commerce database design for each type.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ecommerce-database-design-examples"&gt;
  &lt;/a&gt;
  E-Commerce Database Design Examples
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#relational-database-design"&gt;
  &lt;/a&gt;
  Relational Database Design
&lt;/h4&gt;

&lt;p&gt;Many e-commerce sellers use a relational database design centered around the following tables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Products table&lt;/li&gt;
&lt;li&gt;  Customers/Users table&lt;/li&gt;
&lt;li&gt;  Orders table&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additional tables can be added as required to support shipping, categories, product reviews, etc. We have covered the database structure in the previous section, where the scope of the database was defined.&lt;/p&gt;

&lt;p&gt;Below, you can see a diagram of a simple e-commerce database design built using MySQL.&lt;/p&gt;

&lt;p&gt;MySQL e-commerce database design&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2YwRuFJz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/MySQL%2520e-commerce%2520database%2520design%25206%2520.png%3Fwidth%3D753%26name%3DMySQL%2520e-commerce%2520database%2520design%25206%2520.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2YwRuFJz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/MySQL%2520e-commerce%2520database%2520design%25206%2520.png%3Fwidth%3D753%26name%3DMySQL%2520e-commerce%2520database%2520design%25206%2520.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While a standard relational database design will work for many e-commerce stores, there are situations where it is advantageous for retailers to follow another approach.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#nosql-database-design"&gt;
  &lt;/a&gt;
  NoSQL database design
&lt;/h4&gt;

&lt;p&gt;Most of the world's largest online retailers, including Walmart and eBay, use NoSQL databases to power their e-commerce systems. The reason is NoSQL databases providing the required performance and scalability to effectively manage large catalogs and unstructured data like user data and images.&lt;/p&gt;

&lt;p&gt;A good example of an e-commerce database built using NoSQL technology is CouchBase, which uses a document store as its database type. With a document database, data is simpler and easier to access as an entire product can be stored in a single document instead of storing across multiple tables.&lt;/p&gt;

&lt;p&gt;Below, you can see an example of data modeling for different products with CouchBase's NoSQL database.&lt;/p&gt;

&lt;p&gt;CouchBase NoSQL data structure&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pyEcJDFm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/CouchBase%2520NoSQL%2520data%2520structure%25207.png%3Fwidth%3D784%26name%3DCouchBase%2520NoSQL%2520data%2520structure%25207.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pyEcJDFm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/CouchBase%2520NoSQL%2520data%2520structure%25207.png%3Fwidth%3D784%26name%3DCouchBase%2520NoSQL%2520data%2520structure%25207.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://info.couchbase.com/rs/302-GJY-034/images/Database_design_retail_inventory_product_catalogs.pdf"&gt;source&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hybrid-database"&gt;
  &lt;/a&gt;
  Hybrid Database
&lt;/h3&gt;

&lt;p&gt;Another exciting option is to use a combined solution utilizing an RDBMS for structured data such as user details, order details, payment details, and a NoSQL database for unstructured data such as product details or marketing information.&lt;/p&gt;

&lt;p&gt;Hybrid database structure&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i5ALJqhZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/Hybrid%2520ecommerce%2520database%2520structure%25208%2520.png%3Fwidth%3D394%26name%3DHybrid%2520ecommerce%2520database%2520structure%25208%2520.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i5ALJqhZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resources.fabric.inc/hs-fs/hubfs/Hybrid%2520ecommerce%2520database%2520structure%25208%2520.png%3Fwidth%3D394%26name%3DHybrid%2520ecommerce%2520database%2520structure%25208%2520.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Creating a Hybrid database structure is relatively more complex than using traditional database types (RDBMS or NoSQL) as a hybrid approach will utilize the application to combine data from both sources. This allows the developer to combine the strengths of both database types. However, this kind of approach is only suitable for truly complex application architectures that offer users a myriad of functions. For instance, if your purpose is to speed up an RDBMS, it's easier to configure a caching server such as Memcached rather than going for a hybrid approach.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#database-infrastructure"&gt;
  &lt;/a&gt;
  Database Infrastructure
&lt;/h1&gt;

&lt;p&gt;It is possible to select a database type and design the data structure, but we also need infrastructure to run the database. It depends on the deployment of the e-commerce platform. One option is to provision a server, install the database software and then manage all the aspects from security to maintenance. The other option is to use a managed database service like Amazon RDS, Azure SQL for RDBMS, Amazon DynamoDB, or Azure CosmosDB for NoSQL. Among these two options, the managed approach saves time and does not require any maintenance as these are SaaS offerings.&lt;/p&gt;

&lt;p&gt;Suppose you need complete control over your data, database configurations, and server security policies or deploy the database on a private network. In that case, the only option is to configure and maintain the database manually. However, with more and more businesses utilizing cloud providers nowadays, the best option would be to use a managed database. It is more applicable for an e-commerce platform where scalability and availability play a vital role in the success of the platform. So, it's almost always advisable to use a SaaS database.&lt;/p&gt;

&lt;p&gt;A managed database will offer peace of mind for any developer as it is backed by a reputed cloud provider with a service level agreement to provide maximum uptime. It will also enable the developer/administrators to focus more on creating and optimizing the database without dealing with server or database maintenance. A slight downside of a managed platform would be the higher cost associated with it when compared to managing own servers. However, when considering the total cost of ownership (TCO) and operational expenditure (OpEx), a SaaS solution is the ideal option for a growing e-commerce database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pim-software-for-multichannel-sellers"&gt;
  &lt;/a&gt;
  PIM Software for Multichannel Sellers
&lt;/h2&gt;

&lt;p&gt;Product Information Management (PIM) is a critical component of the core functionality of any good e-commerce platform. It provides a flexible solution for managing all your product data inside a single database in the cloud. Moreover, PIM is an excellent option for retailers looking to sell on multiple channels. Having a centralized database in the cloud, PIM allows easy management and delivery of product information to other marketplaces.&lt;/p&gt;

&lt;p&gt;Another main advantage of PIM is the ability to collect and organize data in a variety of formats. Different platforms have their own catalog structure, and PIM automatically sends data to these channels in the proper format.&lt;/p&gt;

&lt;p&gt;Fabric's PIM is one of the best examples of e-commerce database design using PIM software. It serves as a single source for centralizing all your data in the cloud, allowing businesses to benefit from increased productivity while ensuring all information is accurate and up to date across various channels.&lt;/p&gt;

</description>
      <category>ecommerce</category>
      <category>database</category>
      <category>sql</category>
      <category>nosql</category>
    </item>
    <item>
      <title>Measure execution times in browsers &amp; Node.js</title>
      <author>Benny Neugebauer</author>
      <pubDate>Sun, 18 Apr 2021 17:55:36 +0000</pubDate>
      <link>https://dev.to/bennycode/measure-execution-times-in-browsers-node-js-js-ts-1kik</link>
      <guid>https://dev.to/bennycode/measure-execution-times-in-browsers-node-js-js-ts-1kik</guid>
      <description>&lt;p&gt;Measuring your apps performance is very important when your code is being used in production. You should therefore know the execution time of your most frequently used functions. Modern browsers and the Node.js platform provide great APIs to measure performance. In this article, I am presenting a few selected ones using JavaScript and TypeScript code examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#business-logic"&gt;
  &lt;/a&gt;
  Business Logic
&lt;/h2&gt;

&lt;p&gt;First of all, we need a function that mimics our business logic. To make it simple, I am using a function which will return a value after 2 seconds (2000ms):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;businessLogic&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#console-timers-raw-consoletime-endraw-"&gt;
  &lt;/a&gt;
  Console Timers (&lt;code&gt;console.time&lt;/code&gt;)
&lt;/h2&gt;

&lt;p&gt;The easiest way to print the execution time of a function to the console, is to use a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Console/time"&gt;console timer&lt;/a&gt;. Everything that has to be done, is calling &lt;code&gt;console.time&lt;/code&gt; and &lt;code&gt;console.timeEnd&lt;/code&gt; with the same identifier:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;businessLogic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;businessLogic&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;businessLogic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a result, we get the execution time printed to our console in a human-readable format (can be milliseconds, seconds, or other resolutions):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;businessLogic: 2.012s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#high-resolution-timers-raw-performancenow-endraw-"&gt;
  &lt;/a&gt;
  High Resolution Timers (&lt;code&gt;performance.now&lt;/code&gt;)
&lt;/h2&gt;

&lt;p&gt;If you want to customize the output of your &lt;a href="https://en.wikipedia.org/wiki/Profiling_(computer_programming)"&gt;profiling&lt;/a&gt;, then you can use a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/now"&gt;high resolution timer&lt;/a&gt; like &lt;code&gt;performance.now&lt;/code&gt;. It will return the measured execution time in 1 millisecond increments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;businessLogic&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inSeconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rounded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inSeconds&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`businessLogic: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;rounded&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;s`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;businessLogic: 2.012s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#performance-hooks-raw-perfhooks-endraw-"&gt;
  &lt;/a&gt;
  Performance Hooks (&lt;code&gt;perf_hooks&lt;/code&gt;)
&lt;/h2&gt;

&lt;p&gt;Node.js provides &lt;a href="https://nodejs.org/api/perf_hooks.html"&gt;performance measurement APIs&lt;/a&gt; to profile JavaScript and TypeScript functions. With the &lt;code&gt;perf_hooks&lt;/code&gt; module it becomes very convenient to profile multiple functions at once.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typescript-typings"&gt;
  &lt;/a&gt;
  TypeScript Typings
&lt;/h3&gt;

&lt;p&gt;To use the &lt;code&gt;perf_hooks&lt;/code&gt; module with TypeScript, we have to install type definitions that match our Node.js version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; @types/node@14
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#performance-observer"&gt;
  &lt;/a&gt;
  Performance Observer
&lt;/h3&gt;

&lt;p&gt;We have seen that &lt;code&gt;console.time&lt;/code&gt; doesn't let us customize the output and &lt;code&gt;performance.now&lt;/code&gt; is very difficault to control if you want to monitor several functions. That's why Node.js provides a &lt;a href="https://nodejs.org/api/perf_hooks.html#perf_hooks_class_perf_hooks_performanceobserver"&gt;performance observer&lt;/a&gt;. The performance observer can listen to different kinds of measurements and receives &lt;a href="https://nodejs.org/api/perf_hooks.html#perf_hooks_class_performanceentry"&gt;entries&lt;/a&gt; that return the measured time in milliseconds.&lt;/p&gt;

&lt;p&gt;To make the performance collection asynchronous, the &lt;code&gt;buffered&lt;/code&gt; flag can be used, so that multiple entries will be buffered internally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;PerformanceObserver&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;perf_hooks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PerformanceObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEntries&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;buffered&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;entryTypes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;measure&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#performance-marks-raw-performancemark-endraw-"&gt;
  &lt;/a&gt;
  Performance Marks (&lt;code&gt;performance.mark&lt;/code&gt;)
&lt;/h3&gt;

&lt;p&gt;After setting up the performance observer, we can start a measurement. The simplest way is to set markings. It works similar to the &lt;code&gt;console.time&lt;/code&gt; approach with the difference that we need to use different labels for the start and the stop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PerformanceObserver&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;perf_hooks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;businessLogic&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PerformanceObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEntries&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
  &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;buffered&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;entryTypes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;measure&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]});&lt;/span&gt;

  &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;businessLogic&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stop&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;measure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Business Logic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stop&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üí° Please note that our observer listens to entries of type &lt;code&gt;'measure'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;PerformanceEntry &lt;span class="o"&gt;{&lt;/span&gt;
  name: &lt;span class="s1"&gt;'Business Logic'&lt;/span&gt;,
  entryType: &lt;span class="s1"&gt;'measure'&lt;/span&gt;,
  startTime: 3020.9561,
  duration: 2007.4025
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#performance-instrumentation-raw-performancetimerify-endraw-"&gt;
  &lt;/a&gt;
  Performance Instrumentation (&lt;code&gt;performance.timerify&lt;/code&gt;)
&lt;/h3&gt;

&lt;p&gt;For more convenience, there is the &lt;code&gt;performance.timerify&lt;/code&gt; function. It wraps new functions automatically into performance marks, so that we don't need to declare start and stop. In that case our observer must listen to the entry type &lt;code&gt;'function'&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PerformanceObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEntries&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
  &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;buffered&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;entryTypes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wrapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timerify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;businessLogic&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;PerformanceEntry &lt;span class="o"&gt;{&lt;/span&gt;
  name: &lt;span class="s1"&gt;'businessLogic'&lt;/span&gt;,
  entryType: &lt;span class="s1"&gt;'function'&lt;/span&gt;,
  startTime: 2221.5801,
  duration: 0.6079
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üí° As you can see, the tracked &lt;code&gt;duration&lt;/code&gt; is different from our measurements with &lt;code&gt;performance.mark&lt;/code&gt;. That's because &lt;code&gt;performance.timerify&lt;/code&gt; doesn't work out of the box with asynchronous functions. We have to use the &lt;code&gt;async_hooks&lt;/code&gt; module to register callbacks tracking the lifetime of asynchronous resources. &lt;/p&gt;

&lt;p&gt;The Node.js documentation provides an example on &lt;a href="https://nodejs.org/api/perf_hooks.html#perf_hooks_measuring_the_duration_of_async_operations"&gt;measuring the duration of async operations&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#completion-of-measurement"&gt;
  &lt;/a&gt;
  Completion of measurement
&lt;/h3&gt;

&lt;p&gt;It's recommended to disconnect the performance observer from all incoming notifications, when you are done with your measurements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#inclusion-in-unit-tests"&gt;
  &lt;/a&gt;
  Inclusion in Unit Tests
&lt;/h2&gt;

&lt;p&gt;If you want to ensure the execution speed of your functions in the long run, you can make them part of your unit tests. Many testing frameworks (like &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt;, &lt;a href="https://jasmine.github.io/"&gt;Jasmine&lt;/a&gt;, and others) allow you to set a timeout for the execution of your test. The timeout feature can be used to mark a test as failed if the tested function takes too long to execute. &lt;/p&gt;

&lt;p&gt;Here is a timeout example with the Jasmine testing framework:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;businessLogic.ts&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;businessLogic&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;businessLogic.test.ts&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;businessLogic&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./businessLogic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;businessLogic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;does not take longer than 3 seconds (3000ms)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;businessLogic&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#want-more"&gt;
  &lt;/a&gt;
  Want more?
&lt;/h2&gt;

&lt;p&gt;If you liked this post, then I invite you to take a look at the YouTube channel of &lt;a href="https://www.youtube.com/c/typescripttv"&gt;TypeScript TV&lt;/a&gt;. Together with friends, I am publishing videos on best practices with TypeScript whenever we find something exciting.&lt;/p&gt;

</description>
      <category>node</category>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Why being a Codeslinger makes you worse than you think</title>
      <author>HDenizD</author>
      <pubDate>Sun, 18 Apr 2021 17:50:04 +0000</pubDate>
      <link>https://dev.to/hdenizd/why-being-a-codeslinger-makes-you-worse-than-you-think-3kg8</link>
      <guid>https://dev.to/hdenizd/why-being-a-codeslinger-makes-you-worse-than-you-think-3kg8</guid>
      <description>&lt;p&gt;We all know that getting good at one thing is difficult. Today I want to share something with you, something that has improved my thinking and made me a better programmer.&lt;/p&gt;

&lt;p&gt;First to first, the title said something about a Codeslinger? What that is? Simple... the definition of a Codeslinger is someone who is literally like shooting(coding) from the hip.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R8w4vJot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ptu704ywoy6vahigzmc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R8w4vJot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ptu704ywoy6vahigzmc.gif" alt="clint_hipfire"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Because they are two kind of people out there in our business.&lt;br&gt;
The one who really wants to know why, with something like:&lt;br&gt;
&lt;em&gt;"WTF? why is this working?"&lt;/em&gt;,&lt;br&gt;
and the one who is like:&lt;br&gt;
&lt;em&gt;"Oh.. ok it works, fine."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We all came to points where we're over asked, where we are ready to complain and give up to understand something because otherwise it would break us out of our comfort zone.&lt;/p&gt;

&lt;p&gt;You know, it's quite easy to shoot a Revolver from the hip and fire out all 6 shoots and maybe you hit the target. Maybe you completed the task like that and pat yourself on the shoulder. &lt;strong&gt;But&lt;/strong&gt; doing this for the most of your time makes you a &lt;strong&gt;Codeslinger&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A Codeslinger will always just &lt;strong&gt;try&lt;/strong&gt; to accomplish a challenge, most of the time he will only have luck and succeed or fail hard.&lt;/p&gt;

&lt;p&gt;I'm telling you it's okay to &lt;strong&gt;try&lt;/strong&gt;, but it's not okay to do it over and over again. You have to decide for yourself if I am the one who is afraid of learning new things and cheating my way through my career or if I am the one who takes the challenge of getting better and better until you get the salary, that you deserve, or the job position that fits to your skill level.&lt;/p&gt;

&lt;p&gt;What i mean is, when you Code something, no matter what it is, if it is a simple Todo-App or a big scale Company software, it's highly important that you should keep in mind, you don't know everything from the hip.&lt;/p&gt;

&lt;p&gt;If your not sure about how to use this Tool you are using. Not confident about a line of Code you just copy pasted from Stack Overflow or somewhere else, then i can tell you one simple trick that will maybe change the way how you approach the stuff day by day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Force yourself to understand, till you understand...&lt;br&gt;
Become a Sniper, one bullet one target, one hit.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nqlFolmV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e75ppvr66i64tg6rh85l.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nqlFolmV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e75ppvr66i64tg6rh85l.gif" alt="sniper"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will make you better, will make you less in a "&lt;em&gt;i can try it&lt;/em&gt;" and more in a "&lt;em&gt;i can do it&lt;/em&gt;"&lt;/p&gt;

&lt;p&gt;There is one simple rule you should never forget:&lt;br&gt;
&lt;em&gt;"if you could write it yourself, you are allowed to use it"&lt;/em&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>codequality</category>
      <category>experience</category>
      <category>learnings</category>
    </item>
    <item>
      <title>Talk to your computer in Javascript: the repl console</title>
      <author>Alexey</author>
      <pubDate>Sun, 18 Apr 2021 17:25:27 +0000</pubDate>
      <link>https://dev.to/alexeydc/talk-to-your-computer-in-javascript-the-repl-console-4l4i</link>
      <guid>https://dev.to/alexeydc/talk-to-your-computer-in-javascript-the-repl-console-4l4i</guid>
      <description>&lt;h1&gt;
  &lt;a href="#premise"&gt;
  &lt;/a&gt;
  Premise
&lt;/h1&gt;

&lt;p&gt;I often want to run ad hoc Javascript commands that rely on npm packages and custom classes I've written that work with a database/filesystem or wrap common logic. &lt;/p&gt;

&lt;p&gt;Node comes with repl (Read-Eval-Print Loop), and you can launch a simple repl console by just running &lt;code&gt;node&lt;/code&gt; with no arguments - the commands for it are documented in e.g. &lt;a href="https://nodejs.org/api/repl.html#repl_design_and_features"&gt;https://nodejs.org/api/repl.html#repl_design_and_features&lt;/a&gt;. That's quite handy - but falls short of a full-featured interactive shell that has access to all necessary packages.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h1&gt;

&lt;p&gt;Luckily, repl is available in node as a package ( &lt;a href="https://nodejs.org/api/repl.html#repl_repl"&gt;https://nodejs.org/api/repl.html#repl_repl&lt;/a&gt; ) - so all that's necessary is to write a small script that starts a repl instance and pulls in everything you need.&lt;/p&gt;

&lt;p&gt;You'll need to inject all the packages you want to use interactively into the repl console via a launcher script. It's also handy to configure repl in the script, and I show some examples below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/*
  I often use this console with projects that rely on env vars,
  and I use dotenv to pull them in.

  I think this is quite common, so I'm including this
  as an opinionated example on how
  to make the repl console environment aware.
*/
require("dotenv").config()
/*
  I also often use the repl console with projects that run
  across multiple environments: development/production/staging.
  It's helpful to be reminded where the console is running
  to avoid unfortunate mistakes.
*/
console.log(`Starting console - ${process.env.NODE_ENV}`)

const repl = require("repl")
const util = require("util")

const startConsole = async () =&amp;gt; {
  /*
    The lines below configure output formatting for repl.

    W/o specifying any output options, you'd get
    formatting like
    &amp;gt; a = {a: {b: {c: {d: {e: {f: {g: {h: 1}}}}}}}}
    { a: { b: { c: [Object] } } }

    With these options, you'd get
    &amp;gt; a = {a: {b: {c: {d: {e: {f: {g: {h: 1}}}}}}}}
    { a: { b: { c: { d: { e: { f: { g: { h: 1 } } } } } } } }

    Note these options are the same as the options passed to inspect
    https://nodejs.org/api/util.html#util_util_inspect_object_options
  */
  util.inspect.defaultOptions.depth = 20
  util.inspect.defaultOptions.colors = true
  util.inspect.defaultOptions.getters = true
  util.inspect.defaultOptions.compact = true

  /*
    repl is supposed to use util.inspect to format by default.
    However, w/o explicitly specifying {writer: util.inspect},
    I was not able to get the options above to be successfully applied
    for eval results formatting. They _do_ get applied to
    console.log formatting, though, in either case.

    You may want to specify other options - see
    https://nodejs.org/api/repl.html#repl_repl_start_options
    for a comprehensive list - e.g. {prompt: "xyz&amp;gt;"} is a handy one.
  */
  const replServer = repl.start({writer: util.inspect})
  /*
    Pull in any number of modules here - these are the
    modules that will be available to you in the repl instance.
  */
  const modules = ["util", "fs"]
  modules.forEach((moduleName) =&amp;gt; {
    replServer.context[moduleName] = require(moduleName)
  })
  /*
    This is not necessary in newer versions of node,
    but in older versions I wasn't able to pull in
    ad-hoc modules to a running repl instance w/o it.
  */
  replServer.context.require = require
}

startConsole()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The way I personally set it up is by having all the things my application cares about available as a single module defined in my application - including both npm packages and my own library/reusable code.&lt;/p&gt;

&lt;p&gt;I use this single module in application code, scripts, background jobs, and also in the repl console - that way accessing functionality looks the same in all contexts, and I can easily memorize commands and have them at my fingertips.&lt;/p&gt;

&lt;p&gt;My script ends up looking more like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;require("dotenv").config()
console.log(`Starting console - ${process.env.NODE_ENV}`)

const repl = require("repl")
const util = require("util")
/*
  This contains all the modules I want to pull in
*/
const lib = require("../lib.js")

const startConsole = async () =&amp;gt; {
  /*
    E.g. establish connections to various databases...
  */
  await lib.init()

  util.inspect.defaultOptions.depth = 20
  util.inspect.defaultOptions.colors = true
  util.inspect.defaultOptions.getters = true
  util.inspect.defaultOptions.compact = true
  const replServer = repl.start({writer: util.inspect})

  for(key of Object.keys(lib)) {
    replServer.context[key] = lib[key]
  }
}

startConsole()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#starting-the-console"&gt;
  &lt;/a&gt;
  Starting the console
&lt;/h1&gt;

&lt;p&gt;I usually start the script through npm/yarn, via package.json:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
  "scripts": {
    ...
    "console": "node --experimental-repl-await ./scripts/console.js"
    ...
  },
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I love &lt;code&gt;--experimental-repl-await&lt;/code&gt; (&lt;a href="https://nodejs.org/api/cli.html#cli_experimental_repl_await"&gt;https://nodejs.org/api/cli.html#cli_experimental_repl_await&lt;/a&gt; - added in Node.js 10.0.0), and I hope it makes its way out of experimental soon. It allows &lt;code&gt;await&lt;/code&gt;ing on async commands in the repl console. Without it, working with promises is quite annoying.&lt;/p&gt;

&lt;p&gt;After that's in, it's just &lt;code&gt;yarn run console&lt;/code&gt; or &lt;code&gt;npm run console&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#working-with-the-console"&gt;
  &lt;/a&gt;
  Working with the console
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn run console
&amp;gt; console.log("Hello world")
Hello world
undefined
&amp;gt; moment = require('moment')
&amp;gt; moment.now()
1618688628781
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note how &lt;code&gt;console.log("...")&lt;/code&gt; produces 2 lines as output. It performs its side effect of printing and returns a value - and repl will print the result of each expression it evaluates. For example, variable declarations return undefined, but variable assignments return the assigned value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; let a = 1
undefined
&amp;gt; a = 2
2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's handy to know if you want to skip printing the output of some expression.&lt;/p&gt;

&lt;p&gt;In most cases, I tend to avoid using variable declarations in repl, since you can assign a variable without declaring it. The reason is that I often copy-paste sections of code from a text editor, and variable declarations are not re-runnable. In application code I'll usually use &lt;code&gt;const&lt;/code&gt;, but in repl that locks you out from fixing mistakes, especially with e.g. function declarations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; let a = 1
undefined
&amp;gt; let a = 1
Uncaught SyntaxError: Identifier 'a' has already been declared
&amp;gt; b = 1
1
&amp;gt; b = 1
1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#persistent-history"&gt;
  &lt;/a&gt;
  Persistent history
&lt;/h1&gt;

&lt;p&gt;Repl supports bi-directional reverse-i-search similar to zsh. I.e. you can search back through your history by pressing &lt;code&gt;ctrl+r&lt;/code&gt; (or &lt;code&gt;ctrl+s&lt;/code&gt; to search forward) - which makes preserving history between runs potentially very worth it.&lt;/p&gt;

&lt;p&gt;History is preserved in a file, so you'll need to choose where to store it. I store it in a &lt;code&gt;.gitignore&lt;/code&gt;d folder in my project. E.g. the default node.js repl console stores history by default, in your home folder in &lt;code&gt;.node_repl_history&lt;/code&gt; ( &lt;a href="https://nodejs.org/api/repl.html#repl_persistent_history"&gt;https://nodejs.org/api/repl.html#repl_persistent_history&lt;/a&gt; ).&lt;/p&gt;

&lt;p&gt;Here's the code for enabling persistent command history - the path is relative to the root of the project ( &lt;a href="https://nodejs.org/api/repl.html#repl_replserver_setuphistory_historypath_callback"&gt;https://nodejs.org/api/repl.html#repl_replserver_setuphistory_historypath_callback&lt;/a&gt; ):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;replServer.setupHistory("./no_commit/repl_history", () =&amp;gt; {
  console.log("Loaded history!")
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I add this at the end of the &lt;code&gt;startConsole()&lt;/code&gt; function above, adding the environment as the filename suffix:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;require("dotenv").config()
console.log(`Starting console - ${process.env.NODE_ENV}`)

const repl = require("repl")
const lib = require("../index.js")
const util = require("util")

const startConsole = async () =&amp;gt; {
  await lib.init()

  util.inspect.defaultOptions.depth = 20
  util.inspect.defaultOptions.colors = true
  util.inspect.defaultOptions.getters = true
  util.inspect.defaultOptions.compact = true
  const replServer = repl.start({
    writer: util.inspect,
    prompt: "&amp;gt; "
  })

  for(key of Object.keys(lib)) {
    replServer.context[key] = lib[key]
  } 

  const historyPath = `./no_commit/repl_history_${process.env.NODE_ENV}`
  replServer.setupHistory(historyPath, () =&amp;gt; {})
}

startConsole()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;It's quite easy to set up an interactive Javascript shell based on Node's REPL module. It can be configured flexibly, have access to application logic, and any installed npm modules.&lt;/p&gt;

&lt;p&gt;Unlike a Chrome console, it can be used to run arbitrary commands on your computer (or a remote computer), and not just for working with a particular application - hence the title of this article.&lt;/p&gt;

</description>
      <category>node</category>
      <category>tooling</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>TIL: IntersectionObserver Class in JavaScript</title>
      <author>Jim Reevior</author>
      <pubDate>Sun, 18 Apr 2021 17:24:42 +0000</pubDate>
      <link>https://dev.to/hirozed/til-intersectionobserver-class-in-javascript-53e2</link>
      <guid>https://dev.to/hirozed/til-intersectionobserver-class-in-javascript-53e2</guid>
      <description>&lt;p&gt;Okay, this was a few days ago, but ü§∑üèª‚Äç‚ôÇÔ∏è.&lt;/p&gt;

&lt;p&gt;Over the last week, I've been devouring &lt;a href="https://www.udemy.com/course/the-complete-javascript-course/"&gt;The Complete JavaScript Course&lt;/a&gt; as a way to 1. Get over my fear of JavaScript (that's a post for a later time) and 2. Ensure my current carrer as a WordPress developer doesn't stay stuck in the pre-Gutenberg world (that's also another tale for another time).  The course itself was fantastic, and has put me in a better place mentally and emotionally to take on JS/Gutenberg projects.&lt;/p&gt;

&lt;p&gt;There was one section that I wanted to write about today.  It's a feature that I‚Äôd never heard of before and would solve some past issues I've seen at work regarding components of a websites sliding into view and triggering an action.&lt;/p&gt;

&lt;p&gt;It‚Äôs the ‚ú® IntersectionObserver ‚ú® class.&lt;/p&gt;

&lt;p&gt;The JavaScript &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver"&gt;IntersectionObserver&lt;/a&gt; class (which is part of the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;Intersection Observer API&lt;/a&gt;) can be used to indicate when a portion of a website scrolls a specified distance down the page or within reach of an element:&lt;/p&gt;

&lt;p&gt;From there, you can do wonderful things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set the navigation bar to stick to the top of the page when scrolling past a certain point.&lt;/li&gt;
&lt;li&gt;Lazy load images when or before the come into view.&lt;/li&gt;
&lt;li&gt;Ease sections into view on scroll.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://assets.hirozed.xyz/viewport.png"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7UA7P4tX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.hirozed.xyz/viewport.png" class="article-body-image-wrapper"&gt;&lt;img alt="Screen capture of browser to illustrate the nav reaching a portion of the page." src="https://res.cloudinary.com/practicaldev/image/fetch/s--7UA7P4tX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.hirozed.xyz/viewport.png" width="80%"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below is an example of a sticky navigation from the class‚Äôs Github repository:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jonasschmedtmann/complete-javascript-course/blob/master/13-Advanced-DOM-Bankist/final/script.js#L137-L156"&gt;The Complete JavaScript Course - section 13: Advanced DOM and Events&lt;/a&gt; credit &lt;a href="https://codingheroes.io/"&gt;Jonas Schmedtmann&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Sticky navigation: Intersection Observer API&lt;/span&gt;

&lt;span class="c1"&gt;// Get the first section of content based on the .header class&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.header&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Get the height of the navigation bar&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;navHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Add or remove the sticky class to the nav bar,&lt;/span&gt;
&lt;span class="c1"&gt;// based on the entries retrieved from the IntersectionObserver class.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stickyNav&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// There is only one header, so we don't need to loop,&lt;/span&gt;
  &lt;span class="c1"&gt;// and can deconstruct the array.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// This is where the magic happens.&lt;/span&gt;
  &lt;span class="c1"&gt;// When the header is past the viewport, add the sticky class.&lt;/span&gt;
  &lt;span class="c1"&gt;// Else, when it comes back into view, remove the class.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sticky&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sticky&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Calling the IntersectionObserver class.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;headerObserver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stickyNav&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Declaring null uses the entire viewport.&lt;/span&gt;
  &lt;span class="na"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//  The percentage of the header to come into view.&lt;/span&gt;
  &lt;span class="na"&gt;rootMargin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;navHeight&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// The offset based on the nav bar's height.&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Get some popcorn, the fun is about to start.&lt;/span&gt;
&lt;span class="nx"&gt;headerObserver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I also want to point out &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect"&gt;&lt;code&gt;getBoundingClientRect&lt;/code&gt;&lt;/a&gt;. This function provides the size of an element and where it's located in relation to the viewport.  In the example above, Jonas only uses the height value, but you can grab the size and the distance from the viewport as well.&lt;/p&gt;

&lt;p&gt;Learning about the Intersection Observer API was an unexpected and exciting piece of the huge amount of information I downloaded into my brain. I can see using the API as a much more reliable method for detecting when sections of the site come into and out of view, and replacing a placeholder with a higher quality image.  Causing text to zoom in when the container div scrolls into view.  The possibilities are endless!&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Week 2 of my 100daysofcode Challenge</title>
      <author>Jean Pierre Chreim</author>
      <pubDate>Sun, 18 Apr 2021 17:14:07 +0000</pubDate>
      <link>https://dev.to/jpchreim/week-2-of-my-100daysofcode-challenge-3jab</link>
      <guid>https://dev.to/jpchreim/week-2-of-my-100daysofcode-challenge-3jab</guid>
      <description>&lt;p&gt;It has been 2 weeks since I started the 100 days of code challenge in which I decided to study and code for at least an hour per day. Allow me to enroll  my achievements for the last week.&lt;/p&gt;

&lt;p&gt;I've completed the basic course in Responsive WEB Design and, surprisingly, I've found that I can acquire a certificate from FreeCodeCamp if I managed to submit 4 projects. From my point of view, this certificate is a great opportunity because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FreeCodeCamp is a well known site, and a certificate from it will bring a  value to my profile.&lt;/li&gt;
&lt;li&gt;We should constantly practice what we learned, as learning without practicing isn't enough.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first project was a tribute page, I didn't encounter any difficulties in doing it, and that's because I've planned everything  before coding.&lt;/p&gt;

&lt;p&gt;In the second project, I had to create a form which  users should submit their information. Unluckily, I couldn't manage to finish it as I had to return my laptop to the dealer because of a camera issue and didn't take any backup of the projects that I'm working on. Thanks to that, I found out the importance of creating GitHub repositories for each project, and to keep it updated.&lt;/p&gt;

&lt;p&gt;This issue didn't stop me from continuing my 100daysofcode journey, so I took a break from these projects, until my laptop returns, and I started with JavaScript which I hardly know how to practice it.&lt;/p&gt;

&lt;p&gt;I've learned the fundamentals, and then jumped to Object manipulating. It wasn't something new as my first programming language was Java, an OOP, but I was surprised with how easy JS is with objects.&lt;/p&gt;

&lt;p&gt;I'm currently on challenge number 92 out of 111 on FreeCodeCamp, after that I'll start with ES6, something I heard quite a little about but never had the opportunity to know what is it and why/when we use it.&lt;br&gt;
How about you? Are you doing the 100daysofcode challenge? If so, where did you reach?&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>webdev</category>
      <category>devjournal</category>
    </item>
  </channel>
</rss>
