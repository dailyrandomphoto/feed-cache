<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Sigstore: A Solution to Software Supply Chain Security</title>
      <author>Martin Heinz</author>
      <pubDate>Mon, 16 Aug 2021 18:17:57 +0000</pubDate>
      <link>https://dev.to/martinheinz/sigstore-a-solution-to-software-supply-chain-security-163o</link>
      <guid>https://dev.to/martinheinz/sigstore-a-solution-to-software-supply-chain-security-163o</guid>
      <description>&lt;p&gt;In the recent months there's been a lot of noise in the area of supply chain security, because of increase in attacks, with notable ones like &lt;em&gt;Microsoft Exchange Server&lt;/em&gt;, &lt;em&gt;Colonial pipeline&lt;/em&gt; or &lt;em&gt;SolarWinds&lt;/em&gt; breach. These attacks could have been prevented with proper tools in place, yet finding the right tool for the job might be difficult as this area is hard to navigate and most of us - developers - aren't security experts. Recently however, a new project was announced that might solve a lot of problems for all of us. It's name is &lt;em&gt;sigstore&lt;/em&gt; and in this article we will look at what it does, why we need it and how it fits into landscape of existing tools in this area. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sigwhat"&gt;
  &lt;/a&gt;
  sig-what?
&lt;/h2&gt;

&lt;p&gt;sigstore is a new kid on the block. It's a project under CNCF umbrella that was &lt;em&gt;"donated"&lt;/em&gt; to the foundation in March. It's purpose is to provide software signing public-good service. Which means that it should become a software-signing equivalent to &lt;em&gt;Let's Encrypt&lt;/em&gt;. sigstore however, isn't just one tool or piece of software, it's a collection of projects that aim to simplify software signing and transparency. It's main components as of right now are &lt;code&gt;fulcio&lt;/code&gt;, &lt;code&gt;rekor&lt;/code&gt; and &lt;code&gt;cosign&lt;/code&gt; (more details on those a bit later).&lt;/p&gt;

&lt;p&gt;Now you might be asking &lt;em&gt;"Why do we actually need this?"&lt;/em&gt; - software-signing is not a new problem, so there must be some solution already, right? Yes, but signing software and maintaining keys is very difficult especially for non-security folks and UX of existing tools such as PGP leave much to be desired. That's why we need something like sigstore - an easy to use software/toolset for signing software artifacts.&lt;/p&gt;

&lt;p&gt;Additionally, there are couple of reasons why sigstore's solution is superior to tools like PGP that try to solve the same problem. Unlike with other tools, with sigstore you don't need to manage private keys. You also don't have to understand ins-and-outs of security standards thanks to better UX. sigstore also makes it simpler to manage revocations and with all this it still provides all the required features of software signing, that being &lt;em&gt;integrity&lt;/em&gt;, &lt;em&gt;non-repudiation&lt;/em&gt; and &lt;em&gt;authentication&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Bottom line is that sigstore aims to make artifact signing so simple that it can be done by default and transparently, and is ubiquitous across all registries and artifact storages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternatives"&gt;
  &lt;/a&gt;
  Alternatives
&lt;/h2&gt;

&lt;p&gt;From the above it might seem like sigstore is the tool that can solve it all, but if you start googling around, you will find plenty of great tools in supply chain security space. Most of these tools however, don't serve exactly the same purpose and they really are complementary to what sigstore is doing. So, let's also review rest of the landscape to see what else is out there:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;One of the many tools you'll come across is &lt;em&gt;&lt;a href="https://theupdateframework.io/overview/"&gt;The Update Framework (TUF)&lt;/a&gt;&lt;/em&gt;. It's also part of CNCF and its purpose is specifically to protect the process of finding and downloading patches/updates for some particular system (e.g. YUM, PyPI). This system is suitable for artifacts that are meant to be distributed using an update system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;While talking about TUF, it also makes sense to mention &lt;em&gt;Notary&lt;/em&gt; which is an implementation of TUF specification. It is most notably used in &lt;em&gt;Docker Notary&lt;/em&gt; which provides the ability to use digital signatures for data sent to and received from remote Docker registries. You can read more about &lt;em&gt;Docker Content Trust&lt;/em&gt; &lt;a href="https://docs.docker.com/engine/security/trust/"&gt;here&lt;/a&gt; or can also try playing with &lt;code&gt;docker trust&lt;/code&gt; command. In case you might want to implement something like that, then you can checkout this article for full &lt;a href="https://www.cncf.io/blog/2021/07/28/enforcing-image-trust-on-docker-containers-using-notary/"&gt;demo&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another great tool is &lt;em&gt;&lt;a href="https://github.com/in-toto/in-toto"&gt;in-toto&lt;/a&gt;&lt;/em&gt;. This tool isn't just for signing artifacts, it rather produces &lt;em&gt;attestations&lt;/em&gt; about how the software was produced. Essentially, verifying that each task in a pipeline was carried out as planned and therefore providing assurance that final product was not tampered with. You can use &lt;em&gt;in-toto&lt;/em&gt; as part of &lt;em&gt;Tekton Chains&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, I also want to mention &lt;a href="https://transparency.dev/#trillian"&gt;Trillian&lt;/a&gt; which is a tamper-evident log that stores an accurate, immutable and verifiable history of activity. This kind of log can be used for example to add tamper-checking to a system, simplify regulatory compliance or track modifications of documents. sigstore also includes tamper-evident log called &lt;code&gt;rekor&lt;/code&gt; which is will talk about later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There's much more we could talk about, but that would take a while. If you want to dig deeper, then checkout &lt;a href="https://landscape.cncf.io/"&gt;CNCF Landscape page&lt;/a&gt; and more specifically &lt;em&gt;Security and Compliance&lt;/em&gt; (e.g. OPA) and &lt;em&gt;Key Management&lt;/em&gt; (e.g. SPIFFE and SPIRE) sections.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these tools have their pros and cons and could be combined and extended to provide stronger security. For more details about this you can checkout &lt;a href="https://github.com/sigstore/community/blob/main/docs/zero-trust-supply-chains.pdf"&gt;document&lt;/a&gt; in sigstore's community repository (see &lt;em&gt;Further Work&lt;/em&gt; section).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h2&gt;

&lt;p&gt;Before we dig deeper into components of sigstore, we first need to understand the basics of the signing process. The basic steps are as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Short-lived code-signing credentials (a keypair) are generated.&lt;/li&gt;
&lt;li&gt;User authenticates with &lt;em&gt;OpenID Connect (OIDC)&lt;/em&gt; provider such as Google or GitHub to verify ownership of email address and possession of previously generated keys.&lt;/li&gt;
&lt;li&gt;If authentication is successful, user receives code-signing certificate.&lt;/li&gt;
&lt;li&gt;Code-signing certificate is published to transparency log, so that it can be verified by others.&lt;/li&gt;
&lt;li&gt;User signs an artifact (e.g. container image) using code-signing certificate and their keypair.&lt;/li&gt;
&lt;li&gt;Signature from the artifact is published to transparency log.&lt;/li&gt;
&lt;li&gt;Short-lived code-signing credentials used to create signature are destroyed.&lt;/li&gt;
&lt;li&gt;Signed artifact can be published (e.g. on container registry).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Different explanation of the process can be also found on sigstore website in &lt;a href="https://sigstore.dev/what_is_sigstore/"&gt;What is sigstore? section&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that we have a better idea about how it all works, let's look at all the components. There are couple of things that apply to all of them, namely, they can (and should) run in cloud by default (runs on Kubernetes). Even though sigstore hosts a public-good service you can take any of these components and host them yourself (for example behind firewall) and you also don't need to use all of the service, but maybe just one of them, for example just the transparency log server.&lt;/p&gt;

&lt;p&gt;As for the individual components, there are currently 3 main pieces:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/sigstore/cosign"&gt;cosign&lt;/a&gt; is a container signing tool. Its responsibility is to sign containers and publish that information to OCI registries. In the above process that matches the steps 1, 5, 6 and 7.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sigstore/fulcio"&gt;fulcio&lt;/a&gt; is a root CA for code signing certs. Its job is to issue code-signing certificates and to embed OIDC identity into code-signing certificate. From this description we can see that it performs these tasks in steps 2, 3, 4 and 8.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sigstore/rekor"&gt;rekor&lt;/a&gt; is the transparency log. It's append-only, immutable ledger that serves as transparent source of truth of what was signed by whom. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, in practice the above tools and services would be used in the following way to perform the signing process:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cosign&lt;/code&gt; generates an ephemeral keypair and requests code-signing certificate from &lt;code&gt;fulcio&lt;/code&gt; which then asks you to login with OIDC provider of your choice. It uses the authentication to verify that you're owner of the ephemeral private key. &lt;code&gt;cosign&lt;/code&gt; will then retrieve container image manifest of the image you want to sign and will generate a signature using the key it previously generated. Next, &lt;code&gt;cosign&lt;/code&gt; uploads the signature, certificate and public key to registry. Finally, it sends the information to &lt;code&gt;rekor&lt;/code&gt;, which verifies the signature and adds entry into transparency log. Here, this entry includes the artifact digest, signature and public key. At this point ephemeral keypair can be deleted.&lt;/p&gt;

&lt;p&gt;In addition to these pieces of software, there also needs to be a monitoring service that checks the transparency log (&lt;code&gt;rekor&lt;/code&gt;) for any anomalies. Example of such anomaly could be if someone stole your password and used your OpenID identity to sign and publish an artifact, which would be clear from the transparency log.&lt;/p&gt;

&lt;p&gt;Finally, there needs to a way to - for example - say who are the maintainers who are actually trusted to sign artifacts/releases of some project. This could be done e.g. using Open Policy Agent (OPA) and by maintaining list emails (OpenID identities) in the project repository and allowing to sign artifacts only the people in this list.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;This kind of security practices are not exactly common right now and in some cases really neglected. So, the more people start using this, the more likely it's to become the default process and good practice. With that said, at the time of writing, sigstore is a very young project and is not yet production-ready but it should be by the end of summer, so very soon you might be able to put this knowledge to some good use and help the software supply chain be a bit more secure.&lt;/p&gt;

&lt;p&gt;With all that said, this article should serve as a primer on supply chain security and to give you a general idea about sigstore and in follow-up article we will tackle the actual signing process in detail with hands-on examples.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>cloud</category>
      <category>security</category>
    </item>
    <item>
      <title>The cheat sheet about how display: flex and display: grid works</title>
      <author>Stas Melnikov</author>
      <pubDate>Mon, 16 Aug 2021 18:01:49 +0000</pubDate>
      <link>https://dev.to/melnik909/the-cheat-sheet-about-how-display-flex-and-display-grid-works-5188</link>
      <guid>https://dev.to/melnik909/the-cheat-sheet-about-how-display-flex-and-display-grid-works-5188</guid>
      <description>&lt;p&gt;Friends, I made the cheat sheet that will help you learn how the CSS display property works. You can learn what happens when you use display: block, display: inline, display: flex and display: grid. &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/melnik909/embed/LYyXreW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;br&gt;
😊 If you like this post, please, &lt;a href="https://twitter.com/intent/tweet?text=Stas%20Melnikov%20told%20about%20all%20nuances%20of%20the%20display%20property%20www.codepen.io/melnik909/full/LYyXreW"&gt;share on Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🖐 I make free written accessibility review so that you don't make common mistakes. If you're interested in that chat me on &lt;a href="mailto:melnik909@ya.ru"&gt;melnik909@ya.ru&lt;/a&gt; or dev.to direct. Please, specify the subject of the email "Stas, need help" &lt;/p&gt;

&lt;p&gt;👀 Friends, I tell stories from my career on Substack. Join &lt;a href="https://stasmelnikov.substack.com"&gt;my free newsletter&lt;/a&gt;, if you're interested in my background or you want to get my updates first&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.S.&lt;/strong&gt; Thank you so much, my sponsors: Ben Rinehart, Sergio Kagiema, Jesse Willard, Tanya Ten.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>MongoDB $weeklyUpdate (August 16, 2021): Latest MongoDB Tutorials, Events, Podcasts, &amp; Streams!</title>
      <author>Adrienne Tacke</author>
      <pubDate>Mon, 16 Aug 2021 17:01:06 +0000</pubDate>
      <link>https://dev.to/mongodb/mongodb-weeklyupdate-august-16-2021-latest-mongodb-tutorials-events-podcasts-streams-2011</link>
      <guid>https://dev.to/mongodb/mongodb-weeklyupdate-august-16-2021-latest-mongodb-tutorials-events-podcasts-streams-2011</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hi-everyone"&gt;
  &lt;/a&gt;
  👋 Hi everyone!
&lt;/h2&gt;

&lt;p&gt;Welcome to MongoDB $weeklyUpdate! &lt;/p&gt;

&lt;p&gt;Here, you'll find the latest developer tutorials, upcoming official MongoDB events, and get a heads up on our latest Twitch streams and podcast, curated by &lt;a href="https://twitter.com/AdrienneTacke"&gt;Adrienne Tacke&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#freshest-tutorials-on-devhub"&gt;
  &lt;/a&gt;
  🎓 Freshest Tutorials on &lt;a href="https://developer.mongodb.com/"&gt;DevHub&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Want to find the latest MongoDB tutorials and articles created for developers, by developers? Look no further than our &lt;a href="https://developer.mongodb.com/"&gt;DevHub&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-build-cicd-pipelines-for-mongodb-realm-apps-using-github-actions"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/how-to/build-ci-cd-pipelines-realm-apps-github-actions/"&gt;How to Build CI/CD Pipelines for MongoDB Realm Apps Using GitHub Actions&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://twitter.com/lauren_schaefer"&gt;Lauren Schaefer&lt;/a&gt; &lt;br&gt;
In this article, I'll walk you through how I crafted a CI/CD pipeline for a mobile app built with MongoDB Realm.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#new-realm-cocoa-data-types"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/article/realm-cocoa-data-types/"&gt;New Realm Cocoa Data Types&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/developer/author/lee-maguire/"&gt;Lee Maguire&lt;/a&gt; &lt;br&gt;
In this blog post we will discover the new data types that Realm has to offer.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#at-the-intersection-of-aiml-and-hci-with-douglas-eck-of-google-mongodb-podcast"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/article/mongodb-podcast-doug-eck-google-brain/"&gt;At the Intersection of AI/ML and HCI with Douglas Eck of Google (MongoDB Podcast)&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://twitter.com/mlynn"&gt;Michael Lynn&lt;/a&gt; &amp;amp; &lt;a href="https://www.mongodb.com/developer/author/anaiya-raisinghani/"&gt;Anaiya Raisinghani&lt;/a&gt; &lt;br&gt;
We are going to be diving headfirst into HCI (Human Computer Interaction), Google’s new GPT-3 language model.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#official-mongodb-events"&gt;
  &lt;/a&gt;
  📅 Official MongoDB &lt;a href="https://live.mongodb.com/events/#/calendar"&gt;Events&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Attend an official MongoDB event near you (virtual for now)! Chat with MongoDB experts, learn something new, meet other developers, and win some swag!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Aug 19 (6:00pm GMT | Location) - &lt;a href="https://live.mongodb.com/events/details/mongodb-mongodb-global-virtual-community-presents-help-me-unsqlize-my-app/"&gt;Help me UnSQLize my app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aug 25 (4:00pm GMT | Global) - &lt;a href="https://live.mongodb.com/events/details/mongodb-realm-global-community-presents-deep-dive-into-coroutines-kotlin-flow-and-livedata/"&gt;Deep dive into Coroutines, Kotlin Flow and LiveData&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#mongodb-on-twitch"&gt;
  &lt;/a&gt;
  📺 MongoDB on &lt;a href="https://www.twitch.tv/mongodb"&gt;Twitch&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;We stream tech tutorials, live coding, and talk to members of our community every Friday. Sometimes, we even stream twice a week! Be sure to &lt;a href="https://www.twitch.tv/mongodb"&gt;follow us on Twitch&lt;/a&gt; to be notified of every stream!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Latest Stream - &lt;a href="https://youtu.be/FtY66SQdhos"&gt;Get Hyped: Using Docker + Go with MongoDB&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FtY66SQdhos"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;🍿 &lt;a href="https://www.twitch.tv/mongodb"&gt;Follow us&lt;/a&gt; on Twitch so you never miss a stream!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#%F0%9F%8E%99-last-word-on-the-mongodb-podcast"&gt;
  &lt;/a&gt;
  🎙 Last Word on the &lt;a href="https://mongodb.libsyn.com/"&gt;MongoDB Podcast&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Latest Episode&lt;/em&gt;&lt;br&gt;
&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/4nQFFTDACplvuNNN9RuIXf"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Catch up on past episodes&lt;/em&gt;:&lt;br&gt;
Ep. 68 - &lt;a href="https://open.spotify.com/episode/5BpusNFzpYQUsX0tyd6Ccy?si=So36Cd-nSaC8QPJ4tfVJug&amp;amp;dl_branch=1"&gt;Learning MongoDB Charts with Xixi Zhang&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ep. 69 - &lt;a href="https://open.spotify.com/episode/16u7s0GjBBCVYTwp9Qrvht?si=T9I0hVxjTxClNZsGeUTsDw&amp;amp;dl_branch=1"&gt;At the Intersection of AI/ML/HCI with Doug Eck of Google&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ep. 70 - &lt;a href="https://open.spotify.com/episode/2AqpryYRv3dVUiAJpfWPdp?si=bvDBcjCsQtOM7R8FYwHqHg&amp;amp;dl_branch=1"&gt;Scaling the Real Estate Industry with Jim McClarty of Keller Williams&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Not listening on Spotify? We got you! We're most likely on your favorite podcast network, including &lt;a href="https://podcasts.apple.com/us/podcast/the-mongodb-podcast/id1500452446"&gt;Apple Podcasts&lt;/a&gt;, &lt;a href="https://player.fm/series/the-mongodb-podcast"&gt;PlayerFM&lt;/a&gt;, &lt;a href="https://podtail.com/en/podcast/the-mongodb-podcast/"&gt;Podtail&lt;/a&gt;, and &lt;a href="https://www.listennotes.com/podcasts/the-mongodb-podcast-mongodb-0g6fUKMDN_y/"&gt;Listen Notes&lt;/a&gt; 😊)&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#mongodb-devrel-around-the-interwebz"&gt;
  &lt;/a&gt;
  🌍 MongoDB DevRel around the Interwebz
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Watch our team do their thang at various conferences, meetups, and podcasts around the world (virtually, for now). Also, find external articles and guest posts from our DevRel team here!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;📅 Upcoming&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Join Adrienne at &lt;a href="https://www.javascriptandfriends.com/"&gt;JavaScript &amp;amp; Friends&lt;/a&gt; on Aug 20th! She'll give her talk &lt;em&gt;Documentation: The Missing Pieces&lt;/em&gt;:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zoPCw0B2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E8Yb7PpX0AEC2rM.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--DcoWe1uT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1101665721153699845/1KspSSg3_normal.png" alt="JSandFriendsConf profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        JSandFriendsConf
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jsfriendsconf
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Register Now🎟️- &lt;a href="https://t.co/pp19o5G1kQ"&gt;eventbrite.com/e/163395816285…&lt;/a&gt;&lt;br&gt;Join us on Aug-20 to hear &lt;a href="https://twitter.com/AdrienneTacke"&gt;@AdrienneTacke&lt;/a&gt; speak about Documentation- The Missing Pieces at JavaScript and Friends Conference 2021.&lt;br&gt;&lt;a href="https://twitter.com/hashtag/JSFriendsConf2021"&gt;#JSFriendsConf2021&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/TechConference"&gt;#TechConference&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/Ohio"&gt;#Ohio&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/DevCommunity"&gt;#DevCommunity&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:18 PM - 09 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1424857645815640066" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1424857645815640066" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1424857645815640066" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;p&gt;💡 These $weeklyUpdates are always posted to the &lt;a href="https://www.mongodb.com/community/forums/"&gt;MongoDB Community Forums&lt;/a&gt; &lt;em&gt;first&lt;/em&gt;! &lt;a href="https://account.mongodb.com/account/register"&gt;Sign up&lt;/a&gt; today to always get first dibs on these $weeklyUpdates and other MongoDB announcements, interact with the MongoDB community, and help others solve MongoDB related issues!&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>database</category>
      <category>mobile</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Using Daily’s video chat API with Anvil</title>
      <author>Ryan Britnell</author>
      <pubDate>Mon, 16 Aug 2021 16:58:35 +0000</pubDate>
      <link>https://dev.to/britnellryan/using-daily-s-video-chat-api-with-anvil-42el</link>
      <guid>https://dev.to/britnellryan/using-daily-s-video-chat-api-with-anvil-42el</guid>
      <description>&lt;h1&gt;
  &lt;a href="#adding-video-calls-to-your-app-with-a-few-lines-of-code"&gt;
  &lt;/a&gt;
  Adding video calls to your app with a few lines of code
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.daily.co/"&gt;Daily&lt;/a&gt;'s API lets you add real time video calls to any app with just a few lines of code. &lt;a href="https://anvil.works"&gt;Anvil&lt;/a&gt; makes it easy to build web apps entirely in Python -- no Javascript required. In this post, I'm going to show you how to use them together and show you how to get started with Daily's API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We're going to build an app that lets your users join a video call.&lt;/strong&gt; You could integrate it with anything -- communication for web based games, video-based collaboration software, or live customer support. (Click here to &lt;a href="https://dev.to/learn/examples"&gt;see some examples&lt;/a&gt; of apps you can build with Anvil.)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l1Y672K1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r672qnisco7wqgg5o93x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l1Y672K1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r672qnisco7wqgg5o93x.gif" alt="Daily call being started"&gt;&lt;/a&gt;Daily call being started&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Wait -- isn't Daily a JavaScript API? That's right, but with Anvil &lt;strong&gt;you can import Javascript libraries into your Python front end&lt;/strong&gt;. How? Read on...&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#create-a-form-to-join-video-calls"&gt;
  &lt;/a&gt;
  Create a form to join video calls
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#creating-an-app"&gt;
  &lt;/a&gt;
  Creating an app
&lt;/h3&gt;

&lt;p&gt;Creating web apps with Anvil is simple. We'll create one to get started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/login"&gt;Log in&lt;/a&gt; to Anvil and click 'New Blank App'. Choose the Material Design theme.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tQaLw9cp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcgffasp5kms9cudr6v5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tQaLw9cp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcgffasp5kms9cudr6v5.png" alt="Location of the Create App button"&gt;&lt;/a&gt;Location of the Create App button&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#creating-a-ui"&gt;
  &lt;/a&gt;
  Creating a UI
&lt;/h3&gt;

&lt;p&gt;We need a form with a text box to enter the name of our meeting room and buttons to start and stop the call. Our finished form will look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---WQ8X2QU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wzig21hd475u4cfx9sc4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---WQ8X2QU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wzig21hd475u4cfx9sc4.png" alt="Finished call form"&gt;&lt;/a&gt;Finished call form&lt;/p&gt;

&lt;p&gt;We construct the form by dragging-and-dropping &lt;a href="https://dev.to/docs/client/components"&gt;components&lt;/a&gt;. Let's start by dropping a Card into our form. Then drag a &lt;a href="https://anvil.works/docs/client/components/basic#textbox"&gt;TextBox&lt;/a&gt; into the Card and, in the properties panel on the right, change the name of the component to &lt;code&gt;room_name_textbox&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Underneath the TextBox, drag and drop two &lt;a href="https://anvil.works/docs/client/components/basic#button"&gt;Buttons&lt;/a&gt;. Change the first Button's name to &lt;code&gt;start_call_button&lt;/code&gt; and its text to &lt;code&gt;Start call&lt;/code&gt;. Change the second Button's name to &lt;code&gt;end_call_button&lt;/code&gt; and its text to &lt;code&gt;End call&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PJv0Kf3s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ziz2gc4gqg4xpxjcj436.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PJv0Kf3s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ziz2gc4gqg4xpxjcj436.gif" alt="Building our call form"&gt;&lt;/a&gt;Building our call form&lt;/p&gt;

&lt;p&gt;That's it! Our user interface is finished.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#using-the-daily-api"&gt;
  &lt;/a&gt;
  Using the Daily API
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-daily-video-call-room"&gt;
  &lt;/a&gt;
  Creating a Daily video call room
&lt;/h3&gt;

&lt;p&gt;We need to create a video call room our Anvil app users can join.&lt;/p&gt;

&lt;p&gt;Let's do this by going to &lt;a href="https://dashboard.daily.co/rooms"&gt;https://dashboard.daily.co/rooms&lt;/a&gt;, clicking &lt;code&gt;Create room&lt;/code&gt; and giving our room a name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8bobTRyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0o4tiyimjkds47359vmo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8bobTRyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0o4tiyimjkds47359vmo.gif" alt="Creating a room"&gt;&lt;/a&gt;Creating a room&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For more information on creating rooms, Daily has a useful guide &lt;a href="https://docs.daily.co/docs/experiment-in-the-dashboard#step-by-step-guide-create-a-daily-room-url-from-the-dashboard"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#importing-the-daily-api-library"&gt;
  &lt;/a&gt;
  Importing the Daily API library
&lt;/h3&gt;

&lt;p&gt;To import Daily's library, navigate to our app's &lt;a href="https://anvil.works/docs/client/javascript#using-native-javascript-libraries"&gt;Native Libraries&lt;/a&gt; and add the following line of code:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#starting-a-call"&gt;
  &lt;/a&gt;
  Starting a call
&lt;/h3&gt;

&lt;p&gt;Anvil lets you import and use JavaScript functions in Python code - handling all the conversion for you. Let's write the code our user interface needs to start a call.&lt;/p&gt;

&lt;p&gt;Navigate back to our &lt;code&gt;Form1&lt;/code&gt; and, at the top of our Form's &lt;a href="https://anvil.works/docs/editor#code-view"&gt;Code View&lt;/a&gt;, import the &lt;a href="https://docs.daily.co/reference#the-dailyiframe-class"&gt;&lt;code&gt;DailyIframe&lt;/code&gt; class&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Then, back in the Form's &lt;a href="https://anvil.works/docs/editor#design-view"&gt;Design View&lt;/a&gt;, create a click event handler for our &lt;code&gt;start_call_button&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5rxcCs3F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7oeuntx39cc0xfjog1og.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5rxcCs3F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7oeuntx39cc0xfjog1og.gif" alt="Adding a click event to our 'Start call' button"&gt;&lt;/a&gt;Adding a click event to our 'Start call' button&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;start_call_button_click&lt;/code&gt; function will be called every time the button is clicked. In the function, we'll check if the user has entered a room name and then create an instance of a &lt;code&gt;DailyIframe&lt;/code&gt; called &lt;code&gt;call_frame&lt;/code&gt;. Then, we'll call the &lt;code&gt;DailyIframe&lt;/code&gt;'s &lt;a href="https://docs.daily.co/reference#%EF%B8%8F-join"&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt; method, passing it our meeting room link plus the &lt;code&gt;room_name&lt;/code&gt; as a parameter.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Replace &lt;code&gt;'https://your-team.daily.co/'&lt;/code&gt; with your own meeting room link, which you can find in your &lt;a href="https://dashboard.daily.co/"&gt;Daily dashboard&lt;/a&gt;.)&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#what-if-that-room-doesnt-exist"&gt;
  &lt;/a&gt;
  What if that room doesn't exist?
&lt;/h3&gt;

&lt;p&gt;If the specified room doesn't exist, the &lt;code&gt;join()&lt;/code&gt; method will throw an exception. We can catch this the usual way, with a &lt;a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions"&gt;&lt;code&gt;try&lt;/code&gt;&lt;/a&gt; block. Then we'll use Anvil's &lt;a href="https://anvil.works/docs/client/python/alerts-and-notifications"&gt;&lt;code&gt;alert()&lt;/code&gt;&lt;/a&gt; function to pop up a dialog:.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;That's our start call functionality finished. Let's write the functionality that will end the call.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#ending-a-call"&gt;
  &lt;/a&gt;
  Ending a call
&lt;/h3&gt;

&lt;p&gt;When the user clicks "End Call", we want to end the call, by calling the &lt;code&gt;DailyIframe&lt;/code&gt;'s &lt;a href="https://docs.daily.co/reference#%EF%B8%8F-leave"&gt;&lt;code&gt;leave()&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://docs.daily.co/reference#%EF%B8%8F-destroy"&gt;&lt;code&gt;destroy()&lt;/code&gt;&lt;/a&gt; methods.&lt;/p&gt;

&lt;p&gt;Like we did with &lt;code&gt;start_call_button&lt;/code&gt;, create an event handler function for &lt;code&gt;end_call_button&lt;/code&gt; called &lt;code&gt;end_call_button_click&lt;/code&gt;. Then call those methods:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Great work! Our app's users can now enter the name of the meeting they want to join, start and end the call all without ever leaving your Anvil app.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h2&gt;

&lt;p&gt;We've just created a web app with nothing but Python; integrated it with Daily, and had it start a video call with the click of a button. Pretty cool, huh?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l1Y672K1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r672qnisco7wqgg5o93x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l1Y672K1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r672qnisco7wqgg5o93x.gif" alt="Daily call being started"&gt;&lt;/a&gt;Daily call being started&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clone-the-app"&gt;
  &lt;/a&gt;
  Clone the App
&lt;/h3&gt;

&lt;p&gt;For those of you who want to see the finished source code for this app:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://anvil.works/build#clone:PGXAZV7D53UI5FCJ%3d6VO4CP4AGJI4LHMCURXCYN2R"&gt;See the finished app&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#new-to-anvil"&gt;
  &lt;/a&gt;
  New to Anvil?
&lt;/h2&gt;

&lt;p&gt;If you're new to Anvil, welcome! &lt;a href="https://anvil.works/"&gt;Anvil&lt;/a&gt; is a platform for building full-stack web apps with nothing but Python. No need to wrestle with JS, HTML, CSS, Python, SQL and all their frameworks – just &lt;strong&gt;build it all in Python&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Yes – Python that &lt;a href="https://dev.to/docs/client/python"&gt;runs in the browser&lt;/a&gt;. Python that &lt;a href="https://dev.to/docs/server"&gt;runs on the server&lt;/a&gt;. Python that &lt;a href="https://dev.to/docs/client"&gt;builds your UI&lt;/a&gt;. A &lt;a href="https://dev.to/docs/client/ui"&gt;drag-and-drop UI editor&lt;/a&gt;. Anvil even has a built-in &lt;a href="https://dev.to/docs/data-tables"&gt;Python database&lt;/a&gt;, in case you don’t have your own.&lt;/p&gt;

&lt;p&gt;Why not have a play with the app builder? &lt;strong&gt;It's free!&lt;/strong&gt; Click here to get started:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://anvil.works/build"&gt;Get building&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Want to try a 5 minute tutorial? Try the &lt;a href="https://anvil.works/learn/tutorials/feedback-form"&gt;Feedback Form tutorial&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>#100daysofcode [Day - 06 ]
</title>
      <author>Al Siam</author>
      <pubDate>Mon, 16 Aug 2021 16:47:27 +0000</pubDate>
      <link>https://dev.to/alsiamworld/100daysofcode-day-06-305a</link>
      <guid>https://dev.to/alsiamworld/100daysofcode-day-06-305a</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day-06-"&gt;
  &lt;/a&gt;
  100daysofcode [Day - 06 ]
&lt;/h1&gt;

&lt;p&gt;Hello everyone, Today I'd create a Simple Bank calculation Page using Tailwind CSS &amp;amp; JavaScript DOM. You can deposit, withdraw and check the balance after login. I'm a beginner at JS and just learning JS DOM. and by this simple knowledge, I have made this bank calculation page and the next day I will post my Weekly Project. &lt;/p&gt;

&lt;p&gt;Live Preview: &lt;a href="https://100daysofcode-day06-alsiam.netlify.app"&gt;https://100daysofcode-day06-alsiam.netlify.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Code Link: &lt;a href="https://github.com/alsiamworld/100-days-of-code/tree/main/day-06"&gt;https://github.com/alsiamworld/100-days-of-code/tree/main/day-06&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R85OFpxS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1b5coy9i1ow6d9bwil4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R85OFpxS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1b5coy9i1ow6d9bwil4w.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#javascript-programming-beginner"&gt;
  &lt;/a&gt;
  javascript #programming #beginner
&lt;/h1&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Emacs package management with straight.el and use-package  </title>
      <author>Jeff Kreeftmeijer</author>
      <pubDate>Mon, 16 Aug 2021 16:37:12 +0000</pubDate>
      <link>https://dev.to/jkreeftmeijer/emacs-package-management-with-straight-el-and-use-package-3oc8</link>
      <guid>https://dev.to/jkreeftmeijer/emacs-package-management-with-straight-el-and-use-package-3oc8</guid>
      <description>&lt;p&gt;Emacs includes a package manager named &lt;code&gt;package.el&lt;/code&gt;, which installs packages from the official Emacs Lisp Package Archive, named &lt;a href="https://elpa.gnu.org"&gt;GNU ELPA.&lt;/a&gt; GNU ELPA hosts a selection of packages, but most are available on &lt;a href="https://melpa.org"&gt;MELPA&lt;/a&gt;, which is an unofficial package archive that implements the ELPA specification. To use MELPA, it has to be &lt;a href="https://melpa.org/#/getting-started"&gt;installed&lt;/a&gt; by adding it to the list of &lt;code&gt;package.el&lt;/code&gt; package archives.&lt;/p&gt;

&lt;p&gt;The built-in package manager installs packages through the &lt;code&gt;package-install&lt;/code&gt; function. For example, to install the "evil-commentary" package from MELPA, call &lt;code&gt;package-install&lt;/code&gt; inside Emacs:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;M-x&lt;/code&gt; &lt;code&gt;package-install&lt;/code&gt; &lt;code&gt;&amp;lt;RET&amp;gt;&lt;/code&gt; &lt;code&gt;evil-commentary&lt;/code&gt; &lt;code&gt;&amp;lt;RET&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id="org7efd26e"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#straightel"&gt;
  &lt;/a&gt;
  Straight.el
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/raxod502/straight.el"&gt;Straight.el&lt;/a&gt; is an alternative package manager that installs packages through Git checkouts instead of downloading tarballs from one of the package archives. Doing so allows installing forked packages, altering local package checkouts, and locking packages to exact versions for reproducable setups.&lt;/p&gt;

&lt;p&gt;&lt;a id="org822b70c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://github.com/raxod502/straight.el#getting-started"&gt;Getting started&lt;/a&gt; section in the straight.el README provides the bootstrap code to place inside &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; in order to install it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="c1"&gt;;; Install straight.el&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defvar&lt;/span&gt; &lt;span class="nv"&gt;bootstrap-version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;bootstrap-file&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;expand-file-name&lt;/span&gt; &lt;span class="s"&gt;"straight/repos/straight.el/bootstrap.el"&lt;/span&gt; &lt;span class="nv"&gt;user-emacs-directory&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;bootstrap-version&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;file-exists-p&lt;/span&gt; &lt;span class="nv"&gt;bootstrap-file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;with-current-buffer&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;url-retrieve-synchronously&lt;/span&gt;
     &lt;span class="s"&gt;"https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"&lt;/span&gt;
     &lt;span class="ss"&gt;'silent&lt;/span&gt; &lt;span class="ss"&gt;'inhibit-cookies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;goto-char&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;point-max&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;eval-print-last-sexp&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;load&lt;/span&gt; &lt;span class="nv"&gt;bootstrap-file&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="ss"&gt;'nomessage&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Straight.el uses package archives like GNU ELPA as registries to find the linked repositories to clone from. Since these are checked automatically, there's no need to add them to the list of package archives.&lt;/p&gt;

&lt;p&gt;While package.el loads all installed packages on startup, straight.el only loads packages that are referenced in the init file. This allows for installing packages temporarily without slowing down Emacs' startup time on subsequent startups.&lt;/p&gt;

&lt;p&gt;To create a truly reproducable setup, disable package.el in favor of straight.el by turning off &lt;code&gt;package-enable-at-startup&lt;/code&gt;. Because this step needs to happen before package.el gets a chance to load packages, it this configuration needs to be set in the early init file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="c1"&gt;;; Disable package.el in favor of straight.el&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;package-enable-at-startup&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this configuration set, Emacs will only load the packages installed through straight.el.&lt;/p&gt;

&lt;p&gt;&lt;a id="orga1f4b86"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;

&lt;p&gt;To use straight.el to install a package for the current session, execute the &lt;code&gt;straight-use-package&lt;/code&gt; command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;M-x&lt;/code&gt; &lt;code&gt;straight-use-package&lt;/code&gt; &lt;code&gt;&amp;lt;RET&amp;gt;&lt;/code&gt; &lt;code&gt;evil-commentary&lt;/code&gt; &lt;code&gt;&amp;lt;RET&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To continue using the package in future sessions, add the &lt;code&gt;straight-use-package&lt;/code&gt; call to &lt;code&gt;~/.emacs/init.el&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;straight-use-package&lt;/span&gt; &lt;span class="ss"&gt;'evil-commentary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To update an installed package, execute the &lt;code&gt;straight-pull-package&lt;/code&gt; command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;M-x&lt;/code&gt; &lt;code&gt;straight-pull-package&lt;/code&gt; &lt;code&gt;&amp;lt;RET&amp;gt;&lt;/code&gt; &lt;code&gt;evil-commentary&lt;/code&gt; &lt;code&gt;&amp;lt;RET&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To update the version lockfile, which is used to target the exact version to check out when installing, run &lt;code&gt;straight-freeze-versions&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;M-x&lt;/code&gt; &lt;code&gt;straight-freeze-versions&lt;/code&gt; &lt;code&gt;&amp;lt;RET&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id="org1946e61"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usepackage"&gt;
  &lt;/a&gt;
  Use-package
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/jwiegley/use-package"&gt;Use-package&lt;/a&gt; is a macro to configure and load packages in Emacs configurations. It interfaces with package managers like package.el or straight.el to install packages, but is not a package manager by itself.&lt;/p&gt;

&lt;p&gt;For example, when using straight.el without use-package, installing and starting evil-commentary requires installing the package and starting it as two separate steps:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;straight-use-package&lt;/span&gt; &lt;span class="ss"&gt;'evil-commentary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;evil-commentary-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#orgc0c3e53"&gt;Combined with use-package&lt;/a&gt;, the installation and configuration are unified into a single call to &lt;code&gt;use-package&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;evil-commentary&lt;/span&gt;
         &lt;span class="ss"&gt;:config&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;evil-commentary-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aside from keeping configuration files tidy, having package configuration contained within a single call allows for more advanced package setups. For example, packages can be lazy-loaded, keeping their configuration code from executing until the package they configure is needed.&lt;/p&gt;

&lt;p&gt;&lt;a id="org544bad0"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;To install use-package with straight.el, use &lt;code&gt;straight-use-package&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="c1"&gt;;; Install use-package&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;straight-use-package&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a id="orgc0c3e53"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#using-straightel-with-usepackage"&gt;
  &lt;/a&gt;
  Using straight.el with use-package
&lt;/h4&gt;

&lt;p&gt;By default, use-package uses package.el to install packages. To use straight.el instead of package.el, pass the &lt;code&gt;:straight&lt;/code&gt; option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;evil-commentary&lt;/span&gt;
         &lt;span class="ss"&gt;:straight&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To configure use-package to always use straight.el, use &lt;code&gt;use-package&lt;/code&gt; to configure straight.el to turn on &lt;code&gt;straight-use-package-by-default&lt;/code&gt;&lt;sup&gt;&lt;a id="fnr.1" href="#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="c1"&gt;;; Configure use-package to use straight.el by default&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;straight&lt;/span&gt;
         &lt;span class="ss"&gt;:custom&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;straight-use-package-by-default&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, installing any package using use-package uses straight.el, even when omitting the &lt;code&gt;:straight.el&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;Having both straight.el and use-package installed and configured to work together, the &lt;code&gt;straight-use-package&lt;/code&gt; function isn't used anymore. Instead, all packages are installed and configured through use-package.&lt;/p&gt;

&lt;p&gt;&lt;a id="orgb2cae30"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h4&gt;

&lt;p&gt;Use the &lt;code&gt;use-package&lt;/code&gt; macro to load a package. If the package is not installed yet, it is installed automatically:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;evil-commentary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use-package provides keywords to add configuration, key bindings and variables. Although there are &lt;a href="https://github.com/jwiegley/use-package#getting-started/"&gt;many more options&lt;/a&gt;, some examples include &lt;code&gt;:config&lt;/code&gt;, &lt;code&gt;:init&lt;/code&gt;, &lt;code&gt;:bind&lt;/code&gt;, and &lt;code&gt;:custom&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;:config&lt;/code&gt; and &lt;code&gt;:init&lt;/code&gt;:&lt;/strong&gt; The &lt;code&gt;:config&lt;/code&gt; and &lt;code&gt;:init&lt;/code&gt; configuration keywords define code that's run right after, or right before a package is loaded, respectively.&lt;/p&gt;

&lt;p&gt;For example, call &lt;code&gt;evil-mode&lt;/code&gt; from the &lt;code&gt;:config&lt;/code&gt; keyword to start Evil after loading its package. To &lt;a href="//emacs-evil-org-tab.md"&gt;turn off &lt;code&gt;evil-want-C-i-jump&lt;/code&gt;&lt;/a&gt; right before evil is loaded (instead of adding it to the early init file), configure it in the &lt;code&gt;:init&lt;/code&gt; keyword:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;evil&lt;/span&gt;
         &lt;span class="ss"&gt;:init&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;evil-want-C-i-jump&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="ss"&gt;:config&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;evil-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;:bind&lt;/code&gt;:&lt;/strong&gt; Adds key bindings after a module is loaded. For example, to use &lt;code&gt;consult-buffer&lt;/code&gt; instead of the built-in &lt;code&gt;switch-to-buffer&lt;/code&gt; after loading the consult package, add a binding through the &lt;code&gt;:bind&lt;/code&gt; keyword:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;consult&lt;/span&gt;
         &lt;span class="ss"&gt;:bind&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"C-x b"&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;consult-buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;:custom&lt;/code&gt;:&lt;/strong&gt; Sets customizable variables. The variables set through use-package are not saved in Emacs' custom file. Instead, all custom variables are expected to be set through use-package. In an example from before, the &lt;code&gt;:custom&lt;/code&gt; keyword is used to set the &lt;code&gt;straight-use-package-by-default&lt;/code&gt; configuration option after loading straight.el:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;straight&lt;/span&gt;
         &lt;span class="ss"&gt;:custom&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;straight-use-package-by-default&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id="org05c3625"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;The resulting &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; file installs straight.el and use-package, and configures straight.el as the package manager for use-package to use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="c1"&gt;;; Install straight.el&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defvar&lt;/span&gt; &lt;span class="nv"&gt;bootstrap-version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;bootstrap-file&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;expand-file-name&lt;/span&gt; &lt;span class="s"&gt;"straight/repos/straight.el/bootstrap.el"&lt;/span&gt; &lt;span class="nv"&gt;user-emacs-directory&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;bootstrap-version&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;file-exists-p&lt;/span&gt; &lt;span class="nv"&gt;bootstrap-file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;with-current-buffer&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;url-retrieve-synchronously&lt;/span&gt;
     &lt;span class="s"&gt;"https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"&lt;/span&gt;
     &lt;span class="ss"&gt;'silent&lt;/span&gt; &lt;span class="ss"&gt;'inhibit-cookies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;goto-char&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;point-max&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;eval-print-last-sexp&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;load&lt;/span&gt; &lt;span class="nv"&gt;bootstrap-file&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="ss"&gt;'nomessage&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;; Install use-package&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;straight-use-package&lt;/span&gt; &lt;span class="ss"&gt;'use-package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Configure use-package to use straight.el by default&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;use-package&lt;/span&gt; &lt;span class="nv"&gt;straight&lt;/span&gt;
         &lt;span class="ss"&gt;:custom&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;straight-use-package-by-default&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;~/.emacs.d/early-init.el&lt;/code&gt; file disables package.el to disable its auto-loading, causing all packages to be loaded through straight.el in the init file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="c1"&gt;;; Disable package.el in favor of straight.el&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;package-enable-at-startup&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the only configuration set in the early init file. All other packages are installed and configured through use-package, which makes sure to load configuration options before packages are loaded, if configured with the &lt;code&gt;:init&lt;/code&gt; keyword.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#footnotes"&gt;
  &lt;/a&gt;
  Footnotes
&lt;/h2&gt;

&lt;p&gt;&lt;sup&gt;&lt;a id="fn.1" href="#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; Calling &lt;code&gt;use-package&lt;/code&gt; would normally install straight.el, but since it's already installed, the installation is skipped and the configuration is set. Here, the call to &lt;code&gt;use-package&lt;/code&gt; is only used to configure straight.el, by setting the &lt;code&gt;straight-use-package-by-default&lt;/code&gt; option.&lt;/p&gt;

</description>
      <category>emacs</category>
    </item>
    <item>
      <title>Powering Kubernetes in the Cloud with Kuma Service Mesh</title>
      <author>Michael Bogan</author>
      <pubDate>Mon, 16 Aug 2021 16:32:20 +0000</pubDate>
      <link>https://dev.to/mbogan/powering-kubernetes-in-the-cloud-with-kuma-service-mesh-1cni</link>
      <guid>https://dev.to/mbogan/powering-kubernetes-in-the-cloud-with-kuma-service-mesh-1cni</guid>
      <description>&lt;p&gt;I recently decided I wanted to start cutting third-party cloud services out of my life. I purchased a shiny &lt;a href="https://www.raspberrypi.org/products/raspberry-pi-400/"&gt;Raspberry Pi 400&lt;/a&gt; (which reminded me of the Amiga computers of my youth) and decided to try &lt;a href="https://nextcloud.com"&gt;Nextcloud&lt;/a&gt; on it as a personal cloud. It was a far quicker process than I expected thanks to the awesome &lt;a href="http://nextcloudpi.com"&gt;NextCloudPi&lt;/a&gt; project. Within twenty minutes, I had a running Nextcloud instance. However, I could only access it locally on my internal network, and accessing it externally is complicated if you don’t have a static IP address, or use dynamic DNS on a router that supports it.&lt;/p&gt;

&lt;p&gt;There are of course myriad ways to solve these problems (and NextCloudPi offers convenient solutions to many of them), but I was also interested in how Kubernetes might handle some of the work for me. Of course, this can mean I am using cloud providers of a different kind, but I would have portability, and with a combination of an Ingress and Service Mesh, could move my hosting around as I wanted.&lt;/p&gt;

&lt;p&gt;In this post, I walk through the steps I took to use &lt;a href="https://konghq.com/solutions/kubernetes-ingress/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;Kong Ingress Controller&lt;/a&gt; and &lt;a href="https://kuma.io"&gt;Kuma Service Mesh&lt;/a&gt; to accomplish at least some of what I was aiming for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;To follow along, you need the following.&lt;/p&gt;

&lt;p&gt;A running Kubernetes cluster, I used Google Kubernetes Engine (GKE) so I wouldn't spend most of my time setting up a cluster, but most options should work for you. If you do use GKE, make sure you don’t use the “autopilot” option. I initially did, and hit issues later with the certification manager for creating SSL connections.&lt;/p&gt;

&lt;p&gt;Another important change to make is that when you create the cluster, change the Nodes in the "Default pool" to use the &lt;code&gt;COS&lt;/code&gt; (not &lt;code&gt;COS_CONTAINERD&lt;/code&gt;) image type. There are some underlying issues when using Kuma with GKE, as noted &lt;a href="https://github.com/kumahq/kuma/issues/2046"&gt;in this GitHub issue&lt;/a&gt;, and this is the currently recommended workaround. Otherwise, you will hit pod initializing issues that affect certificate provisioning.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.google.com/sdk/gcloud/"&gt;The GCloud CLI tool&lt;/a&gt; makes interacting with clusters much easier. I recommend you install it, and run &lt;code&gt;gcloud init&lt;/code&gt; before continuing.&lt;/p&gt;

&lt;p&gt;When the cluster is ready, make sure you are connected to it by clicking on the cluster, the &lt;em&gt;connect&lt;/em&gt; icon, and then copy the command under “Command-line access”, pasting, and running it in your terminal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yvf3fsc2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5hct8hc8rw9ourja259f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yvf3fsc2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5hct8hc8rw9ourja259f.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I used &lt;a href="https://helm.sh"&gt;Helm&lt;/a&gt; to roll out the resources that Nextcloud needed because it seemed easiest to me. But again, there are other options available.&lt;/p&gt;

&lt;p&gt;To install the Kubernetes certification manager for managing the cluster’s certificates needed to make it publicly accessible, &lt;a href="https://cert-manager.io/docs/installation/"&gt;I followed these installation instructions&lt;/a&gt;, and no changes were needed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.4.0/cert-manager.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you use GKE, then note the &lt;a href="https://cert-manager.io/docs/installation/"&gt;installation step about elevating permissions&lt;/a&gt;. \&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl create clusterrolebinding cluster-admin-binding \
    --clusterrole=cluster-admin \
    --user=$(gcloud config get-value core/account)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#1-install-kuma"&gt;
  &lt;/a&gt;
  1. Install Kuma
&lt;/h2&gt;

&lt;p&gt;A service mesh takes your cluster a step further and is useful for long-running or well-used clusters. The features between service meshes differ slightly, but most provide security, routing, and observability as a minimum. For this post, I used &lt;a href="https://kuma.io/docs/latest/overview/what-is-kuma/"&gt;Kuma&lt;/a&gt;, but other options are available.&lt;/p&gt;

&lt;p&gt;To add Kuma, follow steps one and two of &lt;a href="https://kuma.io/docs/1.1.6/installation/helm/"&gt;the Kuma installation guide with Helm&lt;/a&gt;, which are the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;helm repo add kuma https://kumahq.github.io/charts
kubectl create namespace kuma-system
helm install --namespace kuma-system kuma kuma/kuma
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-install-and-set-up-nextcloud"&gt;
  &lt;/a&gt;
  2. Install and Set Up Nextcloud
&lt;/h2&gt;

&lt;p&gt;Create a &lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"&gt;Namespace&lt;/a&gt; for Nextcloud. This does mean that you need to namespace some of your commands throughout the rest of this walkthrough. You do this by adding the &lt;code&gt;-n nextcloud&lt;/code&gt; argument. The namespace adds Kuma as a sidecar annotation, meaning that Kuma connects to any resources that are part of the namespace.&lt;/p&gt;

&lt;p&gt;Save the following manifest as a file called &lt;code&gt;namespace.yaml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: v1
kind: Namespace
metadata:
  name: nextcloud
  namespace: nextcloud
  annotations:
    kuma.io/sidecar-injection: enabled
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Send it to the cluster:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl apply -f namespace.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a &lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/"&gt;persistent volume claim&lt;/a&gt;. In my case, it uses a pre-defined GKE storage class.&lt;/p&gt;

&lt;p&gt;Save the following as &lt;code&gt;gke-pvc.yaml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-nc
  namespace: "nextcloud"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Send it to the cluster:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl apply -f gke-pvc.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the Nextcloud Helm repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;helm repo add nextcloud https://nextcloud.github.io/helm/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy the default configuration values for Nextcloud to make it easier to make any future changes. You can also do this with command-line arguments, but I found using the configuration file tidier and easier to follow.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;helm show values nextcloud/nextcloud &amp;gt;&amp;gt; nextcloud.values.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change the values to match your setup and suit your preferences. For this example, I changed the following to match my domain and persistent volume claim. You can find &lt;a href="https://github.com/nextcloud/helm/tree/master/charts/nextcloud#configuration"&gt;a full list of the configuration&lt;/a&gt; in the GitHub repository for the chart.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
nextcloud:
  host: nextcloud.chrischinchilla.com
...
mariadb:
  master:
    persistence:
      enabled: true
      existingClaim: "pvc-nc"
      accessMode: ReadWriteOnce
      size: "3Gi"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install the Nextcloud chart with Helm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;helm install nextcloud nextcloud/nextcloud \
  --namespace nextcloud \
  --values nextcloud.values.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Nextcloud setup tells you what steps to take to access the service. Ignore those for now, as the next steps expose the cluster to the wide web.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-add-kong-ingress-controller"&gt;
  &lt;/a&gt;
  3. Add Kong Ingress Controller
&lt;/h2&gt;

&lt;p&gt;With &lt;code&gt;kubectl&lt;/code&gt; or any Kubernetes dashboard, wait until all the needed containers are running and initialized.&lt;/p&gt;

&lt;p&gt;You need to set up the ingress in a couple of phases, and the order is important to get a certificate for secure connections. I followed &lt;a href="https://docs.konghq.com/kubernetes-ingress-controller/1.2.x/guides/cert-manager/"&gt;the Kong ingress instructions&lt;/a&gt; with a couple of changes to suit my use case.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I installed cert manager earlier (Read the &lt;a href="//#bookmark=id.30j0zll"&gt;prerequisites&lt;/a&gt; section).&lt;/li&gt;
&lt;li&gt;I used my personal DNS host (Netlify) to create an &lt;code&gt;A&lt;/code&gt; record and match it to the external IP address.&lt;/li&gt;
&lt;li&gt;As I used GKE, I updated cluster permissions &lt;a href="https://docs.konghq.com/kubernetes-ingress-controller/1.3.x/deployment/gke/"&gt;following the steps here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Install the ingress controller with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl create -f https://bit.ly/k4k8s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You need to apply the ingress manifest twice, with and without a certificate. This is because you cannot generate a certificate without a domain that responds.&lt;/p&gt;

&lt;p&gt;The first time I applied the ingress to the cluster, I used the following manifest, saved as &lt;code&gt;ingress.yaml&lt;/code&gt;. If you want to use the same, change the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;host&lt;/code&gt; values to match your domain:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nextcloud-chrischinchilla-com
  namespace: nextcloud
  annotations:
    kubernetes.io/ingress.class: kong
spec:
  rules:
  - host: nextcloud.chrischinchilla.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nextcloud
            port:
              number: 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Apply with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl apply -f ingress.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, you need the cluster’s external IP address, which you can find with &lt;code&gt;kubectl get service -n kong kong-proxy&lt;/code&gt; or from your provider dashboard.&lt;/p&gt;

&lt;p&gt;Create a DNS record with your domain registrar or local router. Once the DNS changes propagate (probably the slowest part of this whole blog), open the URL for the Nextcloud instance. The server only responds on a non-secure (HTTP) connection. If you switch to a secure connection (HTTPS), you see a warning. To fix this, you need to take some further steps.&lt;/p&gt;

&lt;p&gt;First, request a TLS Certificate from Let’s Encrypt. I used the following &lt;code&gt;ClusterIssuer&lt;/code&gt; definition, saved as &lt;code&gt;issuer.yaml&lt;/code&gt;. I used the email address that matches my GKE account just to be sure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  namespace: cert-manager
spec:
  acme:
    email: {EMAIL_ADDRESS}
    privateKeySecretRef:
      name: letsencrypt-prod
    server: https://acme-v02.api.letsencrypt.org/directory
    solvers:
    - http01:
        ingress:
          class: kong
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Apply with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl apply -f issuer.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update &lt;code&gt;ingress.yaml&lt;/code&gt; to include new annotations for the &lt;code&gt;cert-manager&lt;/code&gt; and a &lt;code&gt;tls&lt;/code&gt; section. Again, make sure to change the &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;secretName&lt;/code&gt;, and &lt;code&gt;host&lt;/code&gt; values to match your domain:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nextcloud-chrischinchilla-com
  namespace: nextcloud
  annotations:
    kubernetes.io/tls-acme: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: kong
spec:
  tls:
  - secretName: nextcloud-chrischinchilla-com
    hosts:
    - nextcloud.chrischinchilla.com
  rules:
  - host: nextcloud.chrischinchilla.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nextcloud
            port:
              number: 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Apply with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl apply -f ingress.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the secure connection and certificate work, and you can log in to use the Nextcloud instance. You can also confirm the certificate exists with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl -n nextcloud get certificates
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-add-features-to-service-mesh"&gt;
  &lt;/a&gt;
  4. Add Features to Service Mesh
&lt;/h2&gt;

&lt;p&gt;The Ingress works as intended. While the service mesh also works, it’s not adding much, so I decided to leverage the built-in metrics monitoring. I followed the steps in &lt;a href="https://kuma.io/docs/1.1.6/quickstart/kubernetes/#_3-visualize-traffic-metrics"&gt;the Kubernetes Quickstart&lt;/a&gt;, including updating and reapplying the mesh. &lt;/p&gt;

&lt;p&gt;You need to install the &lt;code&gt;kumactl&lt;/code&gt; tool to manage some Kuma features, &lt;a href="https://kuma.io/docs/1.2.1/documentation/cli/#kumactl"&gt;read the Kuma CLI guide&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;Enable Kuma metrics on the cluster with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kumactl install metrics | kubectl apply -f -
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command provisions a new &lt;code&gt;kuma-metrics&lt;/code&gt; namespace with all the services required to run the metric collection and visualization. This can take a while as Kubernetes downloads all the required resources.&lt;/p&gt;

&lt;p&gt;Create a file called &lt;code&gt;mesh.yaml&lt;/code&gt; that contains the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: kuma.io/v1alpha1
kind: Mesh
metadata:
  name: default
spec:
  mtls:
    enabledBackend: ca-1
    backends:
    - name: ca-1
      type: builtin
  metrics:
    enabledBackend: prometheus-1
    backends:
    - name: prometheus-1
      type: prometheus
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Apply the manifest:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl apply -n kuma-system -f mesh.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ignore the artificial metrics step, and instead enable Nextcloud metrics by updating the &lt;code&gt;metrics&lt;/code&gt; section of &lt;code&gt;nextcloud.values.yaml&lt;/code&gt; to enable metrics. Set the metrics exporter image to use, and add annotations to the pods. Some of these lines are already in the &lt;code&gt;nextcloud.values.yaml&lt;/code&gt; file, and you need to uncomment them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;metrics:
  enabled: true

  replicaCount: 1
  https: false
  timeout: 5s

  image:
    repository: xperimental/nextcloud-exporter
    tag: v0.3.0
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9205"
    labels: {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You then need to delete and reinstall Nextcloud with the new values. Do so using the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;helm delete nextcloud nextcloud/nextcloud \
  --namespace nextcloud
helm install nextcloud nextcloud/nextcloud \
  --namespace nextcloud \
  --values nextcloud.values.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the Grafana dashboard with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl port-forward svc/grafana -n kuma-metrics 3000:80
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then start watching and analyzing metrics by opening port &lt;code&gt;3000&lt;/code&gt; on the domain setup above.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nextcloud-steps"&gt;
  &lt;/a&gt;
  Next(cloud) Steps
&lt;/h2&gt;

&lt;p&gt;In this post, I looked at creating a Nextcloud instance with Kubernetes, enabling web access to the cluster with an ingress, and enabling some features specific to a service mesh. There’s a lot more mesh-relevant functionality that you could add to something like Nextcloud. &lt;/p&gt;

&lt;p&gt;For example, you could create and enforce regional data sovereignty by hosting Kubernetes instances in different regional data centers. Or you could use &lt;a href="https://kuma.io/docs/1.1.6/deployments/multi-zone/#multi-zone-mode"&gt;the multi-zone feature&lt;/a&gt; to manage routing or the &lt;a href="https://kuma.io/docs/1.1.6/networking/dns/#deployment"&gt;DNS feature&lt;/a&gt; to manage domain resolution instead of an external provider.&lt;/p&gt;

&lt;p&gt;Finally, at the moment, the cluster uses account details for various services as defined in the &lt;em&gt;nextcloud.values.yaml&lt;/em&gt; file. This is partially secure as you don’t need to check this file into version control. Instead, I could use the secrets feature to rotate access details at run time, enabling maximum security.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
    </item>
    <item>
      <title>Why companies should hire Juniors in IT?</title>
      <author>Dawid Zamkowski</author>
      <pubDate>Mon, 16 Aug 2021 16:26:16 +0000</pubDate>
      <link>https://dev.to/dawidzamkowski/why-companies-should-hire-juniors-in-it-5baa</link>
      <guid>https://dev.to/dawidzamkowski/why-companies-should-hire-juniors-in-it-5baa</guid>
      <description>&lt;p&gt;If you go through job boards, how many times do you see job ads that are focused on juniors or entry-level candidates posted?&lt;/p&gt;

&lt;p&gt;Questions that come to mind are; are there no vacancies for juniors or is it the company’s policy that consideration should be given to mid and senior hires alone?&lt;/p&gt;

&lt;p&gt;It is very understandable that a lot of companies require immediate results every now and then.&lt;/p&gt;

&lt;p&gt;Therefore, it makes sense to focus on hires that already have the required proficiency for execution and a proven track record.&lt;/p&gt;

&lt;p&gt;As it is every organization’s dream to outlive its founders, it is important to give attention to the kind of hires you make thinking not only about the present alone but rather creating a balance between the present and the future that reflects in the way you hire talent.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here are 10 reasons why IT companies should hire juniors:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Juniors have exceptional passion to deliver&lt;/strong&gt;&lt;br&gt;
Candidates who have little or no experience and apply to entry/junior roles are looking for an opportunity to put all they’ve learned to work, earn, and make a name for themselves.&lt;/p&gt;

&lt;p&gt;You can’t find such passion elsewhere. They have every reason to perform.&lt;/p&gt;

&lt;p&gt;Having such candidates in your company ensures that you have the fire needed for you to meet your goals.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Proof of Skill / Talent&lt;/strong&gt;&lt;br&gt;
Hiring for junior roles allows companies to validate the skills and talent of new hires over time.&lt;/p&gt;

&lt;p&gt;This way, new hires are given tasks and projects based on their capabilities while they are accessed and they can always advance to senior levels as they show competence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. An opportunity to Groom a Rockstar&lt;/strong&gt;&lt;br&gt;
Seniors were not always seniors. They started out as juniors, gained the requisite skill and experience, and got to where they are because they were given the opportunity to.&lt;/p&gt;

&lt;p&gt;When you hire Juniors, you have the opportunity to train them and groom them to be just the way you want them to be in line with your company’s culture and values.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Retention &amp;amp; Loyalty&lt;/strong&gt;&lt;br&gt;
As long as you encourage their ambition and progression and there are opportunities for them to get promoted, candidates hired as juniors will be lifelong advocates of your company.&lt;/p&gt;

&lt;p&gt;Considering all you’ve invested in their training and development, they mostly will find your organization as a place they call home. They would always want to stay and keep building with you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Opportunity for seniors to transfer their skills&lt;/strong&gt;&lt;br&gt;
Having juniors come work in your IT company means there’s an opportunity for skill transfer from the seniors to the juniors.&lt;/p&gt;

&lt;p&gt;Juniors get to learn all the skills needed to get the job done and gain experience in real-time while at it.&lt;/p&gt;

&lt;p&gt;This relationship is beneficial to the seniors as well as they get to reinforce what they know and even become better.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Path to Continuity&lt;/strong&gt;&lt;br&gt;
Hiring juniors means you would always have the tested and trusted candidate required to fill most vacancies in your company.&lt;/p&gt;

&lt;p&gt;You will have suitable candidates to fill senior roles when there’s a need for people who already have a working history with your company.&lt;/p&gt;

&lt;p&gt;Transitioning and performing their roles will be a breeze because they already have knowledge about your company’s needs &amp;amp; processes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Inclusivity &amp;amp; Diversity&lt;/strong&gt;&lt;br&gt;
The kind of people you have in your company is a reflection of what your company stands for.&lt;/p&gt;

&lt;p&gt;In this day and age where there is mass adoption and preference for companies that are inclusive and diverse in their workforce, hiring juniors would cast your company in a better light and attract people to want to know more about your service offerings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Motivated Workforce&lt;/strong&gt;&lt;br&gt;
Motivation is infectious. When team members who are not juniors see how the juniors are motivated and passionate about their job, they rekindle their own fire.&lt;/p&gt;

&lt;p&gt;There is healthy competition on performance and everyone on the team wants to be at their best all because the juniors are overperforming at their responsibilities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Junior hires bring about innovation.&lt;/strong&gt;&lt;br&gt;
Juniors consume a lot of materials and content while undergoing training at the same time in order for them to overperform. This results in them discovering new and better ways of doing things.&lt;/p&gt;

&lt;p&gt;In the process of discovering new things and implementing them, juniors can bring about innovation in the organization thereby improving the company’s processes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. Reduces the risk &amp;amp; cost of new hires&lt;/strong&gt;&lt;br&gt;
Junior hires are less experienced, hence their pay would be lesser than those of more experienced hires.&lt;/p&gt;

&lt;p&gt;It is very possible that a senior hire wouldn’t reach all the expectations of the company and would need to be trained to be able to deliver on their responsibility while still being paid the negotiated salary.&lt;/p&gt;

&lt;p&gt;A junior hire on the other hand takes away the risk and cost associated with hiring a senior who is paid at that level and still requires training.&lt;/p&gt;

&lt;p&gt;With time, as the junior hire proves their worth. Their salary can be increased.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;br&gt;
Your workforce should be diverse and that includes having juniors on your team.&lt;br&gt;
Hiring a junior gives organizations an opportunity to impact an individual in such a way that is life-changing for them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feel free to register on &lt;a href="http://www.juniorjobsonly.com"&gt;www.juniorjobsonly.com&lt;/a&gt; as a junior or company!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PS. Juniors, which services would you love to get under my website to help you get the first IT job?&lt;/p&gt;

</description>
      <category>junior</category>
      <category>firstjob</category>
      <category>hr</category>
      <category>intern</category>
    </item>
    <item>
      <title>Adding an Updated Date to Markdown and Mdx Posts</title>
      <author>Adam</author>
      <pubDate>Mon, 16 Aug 2021 16:23:00 +0000</pubDate>
      <link>https://dev.to/adamcollier/adding-an-updated-date-to-markdown-and-mdx-posts-4lb9</link>
      <guid>https://dev.to/adamcollier/adding-an-updated-date-to-markdown-and-mdx-posts-4lb9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;Unlike a CMS grabbing the modified date for your posts in frameworks like Gatsby and Next can come as a bit of a challenge. In Gatsby for instance you could use the &lt;code&gt;gatsby-transformer-gitinfo&lt;/code&gt; plugin which adds a &lt;code&gt;gitPublishedDate&lt;/code&gt; field to your GraphQL schema, and this will work perfectly for a lot of cases. However, there is a huge caveat in that approach, which is what I experienced when deploying to Vercel. If your &lt;code&gt;.git&lt;/code&gt; directory isn't deployed alongside your repo, then your git logs can't be accessed and no timestamps can be pulled. This is true for a few other approaches I stumbled upon, such as &lt;a href="https://angelos.dev/2019/09/add-support-for-modification-times-in-gatsby/"&gt;angelos.devs&lt;/a&gt; and &lt;a href="https://pragmaticpineapple.com/add-updated-at-to-your-gatsby-blog/"&gt;pragmatic pineapples&lt;/a&gt; posts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finding-a-solution"&gt;
  &lt;/a&gt;
  Finding a Solution
&lt;/h2&gt;

&lt;p&gt;Luckily I did come across a &lt;a href="https://twitter.com/monicalent/status/1353327937085464576"&gt;thread&lt;/a&gt; from &lt;a href="https://twitter.com/monicalent"&gt;@monicalent&lt;/a&gt; which offered some alternate solutions, and influenced the approach I ended up taking (here is the &lt;a href="https://twitter.com/leeerob/status/1353381006062063616"&gt;initial tweet&lt;/a&gt; from Lee Robinson and the &lt;a href="https://leerob.io/snippets/update-mdx-meta"&gt;snippet page&lt;/a&gt; it links to). Unlike the previous approaches, it adds the updated date when staging your content to commit rather than pulling the dates at build time. This means you don't need to rely on a &lt;code&gt;.git&lt;/code&gt; directory being deployed, with minimal changes to your existing git workflow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-approach"&gt;
  &lt;/a&gt;
  The Approach
&lt;/h2&gt;

&lt;p&gt;The approach that Lee Robinson and Michael Novotny took is to have an existing meta-object in the MDX which is altered via a script. It's a great idea but I want to cater to both Markdown and MDX files and not have to rely on an initial object to exist. Therefore, instead of having a meta-object, which would only be usable in MDX documents, we parse and alter the frontmatter instead. This way we have a common solution which easily integrates into Next and Gatsby projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-node-script"&gt;
  &lt;/a&gt;
  The Node Script
&lt;/h2&gt;

&lt;p&gt;Taking all of this into account, I wrote the below script to satisfy those needs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* eslint-disable import/no-extraneous-dependencies */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;matter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gray-matter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateFrontmatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;mdFilePaths&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;mdFilePaths&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;matter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;currentFrontmatter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentFrontmatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;published&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updatedFrontmatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;currentFrontmatter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;updatedOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;updatedFrontmatter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updatedFileContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;matter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updatedFileContent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;updateFrontmatter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what's happening:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We grab the Markdown/MDX file paths&lt;/li&gt;
&lt;li&gt;Loop over all of the file paths&lt;/li&gt;
&lt;li&gt;Read each file with the &lt;a href="https://www.npmjs.com/package/gray-matter"&gt;gray-matter&lt;/a&gt; package which parses the frontmatter for us.&lt;/li&gt;
&lt;li&gt;Parse the frontmatter and split it into an object. Take the rest of the content and dump it in a string.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;h1&amp;gt;Hello world!&amp;lt;/h1&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Hello"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"slug"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"home"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;^ What is returned from gray-matter, data here being the parsed frontmatter content.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If the posts published frontmatter is true we continue, otherwise we do nothing.&lt;/li&gt;
&lt;li&gt;Immutably update the object with the new date and assign it to the data property.&lt;/li&gt;
&lt;li&gt;Take the newly updated gray-matter object and turn this back into a string&lt;/li&gt;
&lt;li&gt;Overwrite the existing content using &lt;code&gt;fs.writeFile&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you will probably have noticed above that we are grabbing the paths using &lt;code&gt;process.argv&lt;/code&gt;. The reason for doing this is we are using Husky and lint-staged to create a git commit hook. What this essentially means is when we make a commit which includes a Markdown or MDX file, we can run a node script and pass the paths as arguments, hence what you saw above.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-husky-and-lintstaged"&gt;
  &lt;/a&gt;
  Setting Up Husky and lint-staged
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Install Husky &lt;code&gt;npm i -D husky&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Add Husky's git hooks with &lt;code&gt;npx husky install&lt;/code&gt; (you will notice it created a .husky directory).&lt;/li&gt;
&lt;li&gt;Add your commit hook via &lt;code&gt;npx husky add .husky/pre-commit "npm run lint:staged"&lt;/code&gt;. This will add a pre-commit file to your &lt;code&gt;.husky&lt;/code&gt; directory and within that file, your npm command should exist (if not you can manually add it)&lt;/li&gt;
&lt;li&gt;Install lint-staged &lt;code&gt;npm i lint-staged -D&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;.lintstagedrc&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Add your lint-staged config:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"**/*.{md,mdx}"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node updateFrontmatter"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(updateFrontmatter is the filename of your script)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add the script to your package.json
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;"lint:staged"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lint-staged"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Now, whenever you commit either a Markdown or MDX file Husky will run the node script and update/create the updatedOn frontmatter content. No more worrying about the build step and depending on git logs being available. It just works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/gray-matter"&gt;gray-matter package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://typicode.github.io/husky/#/"&gt;Husky docs&lt;/a&gt; - These are worth checking out as V5 is very different to V4&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.gatsbyjs.com/plugins/gatsby-transformer-gitinfo/"&gt;gatsby-transformer-gitinfo&lt;/a&gt; - if your .git directory is deployed alongside your repo check out this plugin&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>markdown</category>
      <category>mdx</category>
      <category>nextjs</category>
      <category>gatsby</category>
    </item>
    <item>
      <title>Securely connecting to third party AWS accounts using cross account roles</title>
      <author>Brooke McKim</author>
      <pubDate>Mon, 16 Aug 2021 16:11:05 +0000</pubDate>
      <link>https://dev.to/vantage/securely-connecting-to-third-party-aws-accounts-using-cross-account-roles-1ce6</link>
      <guid>https://dev.to/vantage/securely-connecting-to-third-party-aws-accounts-using-cross-account-roles-1ce6</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rh4AQvOT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsqczc4wlvizvgowkoj4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rh4AQvOT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsqczc4wlvizvgowkoj4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the beginning of Vantage we have had the need to connect to our customer's AWS accounts to interact with AWS services, ingest cost data and potentially take actions on resources within their account. Developing a product which has direct access to a company's infrastructure requires diligence and we take this responsibility very seriously. We’ve invested considerable time and effort into ensuring the mechanics of our integration is secure and we thought the community would benefit from us sharing our approach. &lt;/p&gt;

&lt;p&gt;During our invite-only, early-access period nearly a year ago we started down the “easy” path of having the customer create an IAM User in their account and then giving Vantage the access key and secret for that IAM User. While this was very quick for us to implement in a time where we needed customer feedback, it required additional effort from our customers and did not follow AWS security best practices. After doing some additional research and talking with AWS representatives we changed our approach and implemented the &lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_common-scenarios_third-party.html"&gt;Cross-Account IAM Role methodology&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Connecting to a customer's AWS account via a Cross-Account IAM Role requires more effort on the part of the provider (in this case, Vantage), but ends up being more convenient for our users and provides a much higher level of security. This method works by creating an IAM Role in the customer's AWS account with a specific set of permissions (in the case of Vantage, a set of read-only permissions to a variety of AWS services) and then specifying which other IAM Roles have the permissions to &lt;a href="https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html"&gt;"assume"&lt;/a&gt; that role. While Vantage uses this method to interact across AWS accounts from different companies, AWS recommends using this same method for interactions between AWS accounts within your own organization as well. &lt;/p&gt;

&lt;p&gt;So what are the benefits of Cross Account IAM Roles? It is very common for companies to have multiple AWS accounts. These accounts have completely separate users, roles and permissions. To make it easier to maintain and reduce the blast radius of a security incident, best practices dictate maintaining your IAM users in a management account and specifically granting permissions for those users to assume predefined roles present in the other accounts in the organization.  &lt;/p&gt;

&lt;p&gt;There are a few benefits with this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If an IAM user’s password is compromised you only have to reset it in one place (the management account).&lt;/li&gt;
&lt;li&gt;When Vantage assumes a role, the access to that role is temporary and the credentials expire after a specified period of time - which is defined via a TTL. &lt;/li&gt;
&lt;li&gt;The customer ultimately can add or remove IAM permissions on their IAM Role very easily.&lt;/li&gt;
&lt;li&gt;The customer can revoke access to Vantage very easily. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#vantages-cross-account-iam-role-architecture"&gt;
  &lt;/a&gt;
  Vantage’s Cross Account IAM Role Architecture
&lt;/h2&gt;

&lt;p&gt;In the Vantage AWS account we create an IAM User and IAM Role per customer. This IAM User has access to assume that IAM Role and that role is what is configured to assume the role in the customer’s account. This process is called &lt;a href="https://mechanicalrock.github.io/2020/03/03/role-assumption-tricks.html"&gt;Role Chaining&lt;/a&gt; and again creates a model where the user is maintained separately from the role. This allows Vantage to make API calls on behalf of the customer. &lt;/p&gt;

&lt;p&gt;One more layer of security we employ is the use of an &lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html"&gt;External ID&lt;/a&gt;. This is an unique ID we generate per customer account and supply in the creation of the IAM Role in the customer’s account. Only if you supply that specific ID when assuming the role does it actually grant you access. The primary function of the External ID is to address and prevent the &lt;a href="https://en.wikipedia.org/wiki/Confused_deputy_problem"&gt;"confused deputy problem”&lt;/a&gt;. This prevents malicious users from guessing the ARN of another Vantage user's IAM Role and submitting a connection to Vantage claiming to be the owner of that ARN. Because the External IDs won't match between accounts, the connection to assume this role will fail. Without the use of an External ID, a malicious user could get all the same privileges of the compromised account. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#heightened-security-doesnt-mean-sacrificing-developer-experience"&gt;
  &lt;/a&gt;
  Heightened Security Doesn’t Mean Sacrificing Developer Experience
&lt;/h2&gt;

&lt;p&gt;At Vantage we strongly believe in providing an intuitive developer experience in all aspects of our product. While the details mentioned above are obviously complex, we believe it's our responsibility to ensure our self-service onboarding process is as easy as possible. In this case, we wanted to maintain a “one-click” (or copy and paste CLI command) experience for our customers onboarding to Vantage without the need to manually research and configure a multitude of thing&lt;/p&gt;

&lt;p&gt;As a result, we turned to AWS CloudFormation to automate the creation of the IAM Role in the customer's account and also communicate back to Vantage to hand us the information necessary to complete the connection. In order to communicate back to Vantage we took advantage of the AWS SNS &lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources-sns.html"&gt;Custom Resources functionality&lt;/a&gt; which allows you to specify an SNS topic and the data which will be sent to that topic inside of a CloudFormation template.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Overall we thought this was a great process built on primitives provided by AWS. AWS representatives also told us that not everyone was utilizing this method to connect to third-party AWS accounts. In light of that, we thought it would be useful to share our implementation with the community to ensure as many products as possible were utilizing the cross-account method. &lt;/p&gt;

&lt;p&gt;This blog post details how we connect to a single AWS account. Our larger customers have requirements for connecting dozens or maybe hundreds of AWS accounts. The next post in this series will cover our implementation of CloudFormation StackSets which make it very easy for our users to connect all of their organizational member accounts in two simple commands in five minutes or less.&lt;/p&gt;

&lt;p&gt;Want to see the cross account IAM role in action? Sign up for Vantage &lt;a href="https://console.vantage.sh/signup"&gt;here&lt;/a&gt;. &lt;br&gt;
Interested in solving problems like this? We’re hiring! See our open &lt;a href="https://www.vantage.sh/careers"&gt;roles&lt;/a&gt;. &lt;br&gt;
Want to discuss this topic and more? Join our &lt;a href="https://join.slack.com/t/vantagecommunity/shared_invite/zt-oey52myv-gq4AWRKkX25kjp1UGziPTw"&gt;Slack Community&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>security</category>
      <category>cloud</category>
    </item>
    <item>
      <title>JavaScript - Make API calls asynchronously in a loop - (Promises, Async/Await)</title>
      <author>Srivastava Bodakunti</author>
      <pubDate>Mon, 16 Aug 2021 15:48:01 +0000</pubDate>
      <link>https://dev.to/srivastava295/javascript-make-api-calls-asynchronously-in-a-loop-promises-async-await-1e00</link>
      <guid>https://dev.to/srivastava295/javascript-make-api-calls-asynchronously-in-a-loop-promises-async-await-1e00</guid>
      <description>&lt;p&gt;I have written the blog post at &lt;a href="https://velocitybytes.com/javascript-make-api-calls-asynchronously-in-a-loop-asyncawait"&gt;https://velocitybytes.com/javascript-make-api-calls-asynchronously-in-a-loop-asyncawait&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>I quit my dream job to learn to code</title>
      <author>rotimidokun</author>
      <pubDate>Mon, 16 Aug 2021 15:43:38 +0000</pubDate>
      <link>https://dev.to/rotimidokun/i-quit-my-dream-job-to-learn-to-code-1hpm</link>
      <guid>https://dev.to/rotimidokun/i-quit-my-dream-job-to-learn-to-code-1hpm</guid>
      <description>&lt;p&gt;It’s my first blog since I decided to switch careers and become a Software Engineer. &lt;/p&gt;

&lt;p&gt;By way of introduction, I am &lt;a href="https://rotimidokun.netlify.app/"&gt;Tosin Rotimidokun&lt;/a&gt;. I am interested in many things and you can tell from my journey in career so far. &lt;/p&gt;

&lt;p&gt;As an undergraduate, I worked as a creative designer in a management consulting firm. After a year, I decided to become a management consultant at &lt;a href="https://cchubnigeria.com/"&gt;Co-Creation Hub&lt;/a&gt;, Africa's largest technology innovation centre where I had the opportunity to manage several Startup Accelerator programs. I liken the experience to throwing me into a deep pool of resources, brilliant minds, strong networks and stakeholders, and I am forever grateful for the experience. &lt;/p&gt;

&lt;p&gt;I interacted with many technical and non-technical founders, and together we redefined products, Business Value, Teams, Corporate governance structures, Partnerships and raised Investments. This helped me build other skills in project, program and product management.&lt;/p&gt;

&lt;p&gt;My time as a Management consultant in the technology space helped me realise how valuable the skill of coding is today. This was when I made the decision to transition again. This felt like I was "crazy", terrible and inconsistent, because I was giving up a good career to try something new and perceived as difficult. I started my learning journey in February 2021 and can now confidently call myself a software engineer. Hurray!! &lt;/p&gt;

&lt;p&gt;I decided to apply for the &lt;a href="https://internship.zuri.team"&gt;HNG internship 8 by Zuri&lt;/a&gt;, because I came across a lot of great software engineers today who also went through this program. I applied to the frontend track and in the 8 weeks of this internship, I hope to;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be able to complete full scale frontend applications using the React framework and Redux for state management. &lt;/li&gt;
&lt;li&gt;Build a network of great software engineers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are at the point of starting out like I was in February 2021, finding resources that help you understand basic concepts and also solve specific challenges at a point are important. Here are some resources that could help you get started;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Figma: &lt;a href="https://youtube.com/playlist?list=PLXDU_eVOJTx7QHLShNqIXL1Cgbxj7HlN4"&gt;Getting started with Figma&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Git: &lt;a href="https://www.youtube.com/watch?v=8JJ101D3knE"&gt;Learn Git in 1 Hour&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HTML: &lt;a href="https://www.youtube.com/watch?v=qz0aGYrrlhU"&gt;HTML Tutorial for Beginners&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript: &lt;a href="https://www.youtube.com/watch?v=PkZNo7MFNFg&amp;amp;t=730s"&gt;Learn JavaScript - Full Course for Beginners&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Are you interested in fast tracking your development journey as a beginner, join the &lt;a href="https://training.zuri.team"&gt;Zuri training program&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have some development knowledge and want to gain hands-on experience building projects quickly, join the &lt;a href="https://internship.zuri.team"&gt;HNG Internship 8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading my story. Follow me. Till I come your way again..&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>dream</category>
      <category>programming</category>
      <category>courage</category>
    </item>
  </channel>
</rss>
