<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to make a horizontal layout list with Recyclerview  </title>
      <author>Tomo</author>
      <pubDate>Sat, 15 May 2021 03:21:47 +0000</pubDate>
      <link>https://dev.to/tomokawaguchi/how-to-make-a-horizontal-layout-list-with-recyclerview-3bkc</link>
      <guid>https://dev.to/tomokawaguchi/how-to-make-a-horizontal-layout-list-with-recyclerview-3bkc</guid>
      <description>&lt;p&gt;You often encounter situations where you need to handle lists of items in mobile app development. One of the approaches you could go with is utilising &lt;code&gt;ListView&lt;/code&gt; and &lt;code&gt;ArrayAdapter&lt;/code&gt;(if your data is stored in an &lt;code&gt;ArrayList&lt;/code&gt;) as I explained in my previous &lt;a href="https://dev.to/tomokawaguchi/utilising-listview-and-arrayadapter-in-java-20i0"&gt;article&lt;/a&gt;. This is not a bad approach but it turns out it only caters for a vertical layout. &lt;br&gt;
As I was looking for a way to display my list items horizontally and scrollable, utilizing &lt;code&gt;Recyclerview&lt;/code&gt; appears to be one of the best approaches. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-recyclerview"&gt;
  &lt;/a&gt;
  What is RecyclerView?
&lt;/h2&gt;

&lt;p&gt;If you are familiar with &lt;code&gt;ListView&lt;/code&gt;, &lt;code&gt;RecyclerView&lt;/code&gt; is an improved version of it. It allows us to implement the layout more flexibly as well as to handle a larger amount of data even more efficiently. To understand &lt;code&gt;RecyclerView&lt;/code&gt; better, let's look at some of the features and requirements when you use &lt;code&gt;RecyclerView&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In order to utilise &lt;code&gt;RecyclerView&lt;/code&gt;, you need to work with &lt;code&gt;RecyclerView.Adapter&lt;/code&gt;, &lt;code&gt;ViewHolder&lt;/code&gt; and &lt;code&gt;LayoutManager&lt;/code&gt;. &lt;code&gt;RecyclerView.Adapter&lt;/code&gt; is an adapter that populates the child items of the &lt;code&gt;RecyclerView&lt;/code&gt; just like &lt;code&gt;ArrayAdapter&lt;/code&gt;. However, it requires &lt;code&gt;ViewHolder&lt;/code&gt; which acts as a kind of template of the child item (ViewHolder pattern). &lt;code&gt;ViewHolder&lt;/code&gt; is handy for the adapter as it contains the details of views within a row. Furthermore, by defining this ViewHolder pattern first, it eliminates the repetitive use of the &lt;code&gt;findViewById()&lt;/code&gt; method. This saves us a lot from slowing down the app performance while scrolling the items. When we utilise &lt;code&gt;ArrayAdapter&lt;/code&gt;, the process of recycling view was good but we still need to call the &lt;code&gt;findViewById()&lt;/code&gt; method multiple times to look up the elements to update the view data. Compare to this, using the &lt;code&gt;ViewHolder&lt;/code&gt; approach is definitely more efficient.  &lt;/p&gt;

&lt;p&gt;Now let's talk about another key player for this topic, &lt;code&gt;LayoutManager&lt;/code&gt;. As mentioned above, one of the benefits of using &lt;code&gt;RecyclerView&lt;/code&gt; is horizontal list layout and this is thanks to &lt;code&gt;LayoutManager&lt;/code&gt;. &lt;code&gt;LayoutManager&lt;/code&gt; is basically in charge of positioning child items as well as decide when to reuse old views. &lt;code&gt;RecyclerView&lt;/code&gt; offers flexible layouts and there are 3 different &lt;code&gt;LayoutManager&lt;/code&gt;s, which are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;LinearLayoutManager&lt;/code&gt; : displaying items vertically or horizontally&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GridLayoutManager&lt;/code&gt; : displaying items in a grid vertically or horizontally&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;StaggeredGridLayoutManager&lt;/code&gt; : displaying items in a staggered grid (different width/height are allowed)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By utilising these mentioned key players together, &lt;code&gt;RecyclerView&lt;/code&gt; can successfully create child items in an efficient way. Now let's look at a detailed example of how to use &lt;code&gt;RecyclerView&lt;/code&gt;. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-use-recyclerview"&gt;
  &lt;/a&gt;
  How to use RecyclerView
&lt;/h2&gt;

&lt;p&gt;In this article, we assume that we want to showcase a list of subjects in a horizontal layout. Each item includes the name of the subject, image and the number of likes. First, let's start with considering the high-level view of what we need to do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define a model class called Subject to store all of your field types (subject name, image and number of likes)&lt;/li&gt;
&lt;li&gt;Populate your subject's data and store it in an &lt;code&gt;ArrayList&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Define the layout of each list item (2 &lt;code&gt;TextView&lt;/code&gt;s and 1 &lt;code&gt;ImageView&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Create a custom &lt;code&gt;RecyclerView&lt;/code&gt; and &lt;code&gt;ViewHolder&lt;/code&gt; to showcase list items&lt;/li&gt;
&lt;li&gt;Set up the custom &lt;code&gt;RecyclerView&lt;/code&gt; with a &lt;code&gt;LayoutManager&lt;/code&gt; and adapter&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---gQ7gKCg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/letiaiqkb88cnao9daul.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---gQ7gKCg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/letiaiqkb88cnao9daul.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's tackle one by one. We first need to define a class called Subject to store required fields and set up getter methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Subject.java&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Subject&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;imageId&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;numOfLikes&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Constructor&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;imageId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;numOfLikes&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;imageId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imageId&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;numOfLikes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numOfLikes&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//Setting up the getter methods&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getSubject&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;getImageId&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;imageId&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;getNumOfLikes&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numOfLikes&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have the data model class, let's populate our &lt;code&gt;ArrayList&lt;/code&gt; to contain subjects details.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="c1"&gt;// MainActivity.java&lt;/span&gt;

&lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;subjectArrayList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class="n"&gt;subjectArrayList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"English"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;drawable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;english&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;subjectArrayList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Math"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;drawable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;math&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;subjectArrayList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"P.E"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;drawable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pe&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;subjectArrayList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Science"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;drawable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;science&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;subjectArrayList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Art"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;drawable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;art&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="na"&gt;etc&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we will quickly set up the layout of the individual item. As mentioned, we will have 2 TextViews and 1 ImageView for the example in this article. Just a side note that if you want your layout to be VERTICAL, be careful with the height of the row (root view of the list) as it needs to be &lt;code&gt;wrap_content&lt;/code&gt; to show your items correctly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;// list_item.xml
&lt;span class="nt"&gt;&amp;lt;LinearLayout&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:tools=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/tools"&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;  
    &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt; 
    &lt;span class="na"&gt;android:layout_margin=&lt;/span&gt;&lt;span class="s"&gt;"16dp"&lt;/span&gt;
    &lt;span class="na"&gt;android:orientation=&lt;/span&gt;&lt;span class="s"&gt;"vertical"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;ImageView&lt;/span&gt;
        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/subject_image_view"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_marginBottom=&lt;/span&gt;&lt;span class="s"&gt;"8dp"&lt;/span&gt;
        &lt;span class="na"&gt;android:scaleType=&lt;/span&gt;&lt;span class="s"&gt;"centerCrop"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;TextView&lt;/span&gt;
        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/subject_text_view"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_gravity=&lt;/span&gt;&lt;span class="s"&gt;"center_horizontal"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;TextView&lt;/span&gt;
        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/likes_text_view"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_gravity=&lt;/span&gt;&lt;span class="s"&gt;"center_horizontal"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will move on to our custom SubjectAdapter that extends the &lt;code&gt;RecyclerView.Adapter&lt;/code&gt;. Please note here that we need to define a custom ViewHolder to specify and give access to all of the Views. This is because we will use this custom &lt;code&gt;ViewHolder&lt;/code&gt; later to bind the data. It also prevents us from calling &lt;code&gt;findById()&lt;/code&gt; methods multiple times when the adapter assigns data to respective views.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="c1"&gt;// SubjectAdapter.java&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SubjectAdapter&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;RecyclerView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Adapter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SubjectAdapter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ViewHolder&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This is a template - give a direct reference to each view&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ViewHolder&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;RecyclerView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ViewHolder&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;ImageView&lt;/span&gt; &lt;span class="n"&gt;subjectImageView&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;TextView&lt;/span&gt; &lt;span class="n"&gt;subjectTextView&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;TextView&lt;/span&gt; &lt;span class="n"&gt;numOfLikesTextView&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// Constructor - accepts entire row item&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ViewHolder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@NonNull&lt;/span&gt; &lt;span class="nc"&gt;View&lt;/span&gt; &lt;span class="n"&gt;itemView&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itemView&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

            &lt;span class="c1"&gt;// Find each view by id you set up in the list_item.xml&lt;/span&gt;
            &lt;span class="n"&gt;subjectImageView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itemView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findViewById&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;subject_image_view&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;subjectTextView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itemView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findViewById&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;subject_text_view&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;numOfLikesTextView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itemView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findViewById&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;likes_text_view&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After setting up ViewHolder, let's start working on the adapter now. There are 4 major things to do here: setting up a constructor and overriding 3 different methods, which are &lt;code&gt;onCreateViewHolder()&lt;/code&gt;, &lt;code&gt;onBindViewHolder()&lt;/code&gt; and &lt;code&gt;getItemCount()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="c1"&gt;// SubjectAdapter.java&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SubjectAdapter&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;RecyclerView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Adapter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SubjectAdapter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ViewHolder&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// ... ViewHolder class and its constructor as per above&lt;/span&gt;


    &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Constructor&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;SubjectAdapter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Creating a viewHolder&lt;/span&gt;
    &lt;span class="nd"&gt;@NonNull&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;ViewHolder&lt;/span&gt; &lt;span class="nf"&gt;onCreateViewHolder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@NonNull&lt;/span&gt; &lt;span class="nc"&gt;ViewGroup&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;viewType&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Inflate the layout&lt;/span&gt;
        &lt;span class="nc"&gt;View&lt;/span&gt; &lt;span class="n"&gt;contactView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;LayoutInflater&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getContext&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;inflate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;list_item&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Return a new holder instance&lt;/span&gt;
        &lt;span class="nc"&gt;ViewHolder&lt;/span&gt; &lt;span class="n"&gt;viewHolder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ViewHolder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contactView&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;viewHolder&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Assigning respective data for the views based on the position of the current item&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onBindViewHolder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@NonNull&lt;/span&gt; &lt;span class="nc"&gt;SubjectAdapter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ViewHolder&lt;/span&gt; &lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Get the Subject based on the current position&lt;/span&gt;
        &lt;span class="nc"&gt;Subject&lt;/span&gt; &lt;span class="n"&gt;currentItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Setting views with the corresponding data&lt;/span&gt;
        &lt;span class="nc"&gt;ImageView&lt;/span&gt; &lt;span class="n"&gt;imageView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;subjectImageView&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;imageView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setImageResource&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentItem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getImageId&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

        &lt;span class="nc"&gt;TextView&lt;/span&gt; &lt;span class="n"&gt;subjectTextView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;subjectTextView&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;subjectTextView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setText&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentItem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSubject&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

        &lt;span class="nc"&gt;TextView&lt;/span&gt; &lt;span class="n"&gt;likesTextView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;numOfLikesTextView&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;likesTextView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setText&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentItem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSubject&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Indicating how long your data is&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;getItemCount&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we start off by setting up a constructor for the adapter. Simply passing the list of data so that our adapter can utilise it to populate items. Next, let's look at the &lt;code&gt;onCreateViewHolder()&lt;/code&gt; method. This method is called by the&lt;code&gt;LayoutManager&lt;/code&gt; and it handles layout inflation when needed. Returning the ViewHolder with all of the necessary details is its role as well. Moving onto the next, the &lt;code&gt;onBindViewHolder()&lt;/code&gt; method plays a critical role to bind data to corresponding views. By utilising the predefined view details from the &lt;code&gt;ViewHolder&lt;/code&gt;, it manages to replace the content efficiently. Finally &lt;code&gt;getItemCount()&lt;/code&gt; method is a way to inform the adapter about the size of your data, which is the total number of items to showcase.  &lt;/p&gt;

&lt;p&gt;After going through the above process, all you need to do is to set up &lt;code&gt;Recyclerview&lt;/code&gt; with your custom adapter and &lt;code&gt;LayoutManager&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="c1"&gt;// MainActivity.java&lt;/span&gt;

&lt;span class="c1"&gt;// Find RecyclerView by Id (from the activity_main.xml)&lt;/span&gt;
&lt;span class="nc"&gt;RecyclerView&lt;/span&gt; &lt;span class="n"&gt;recyclerView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;findViewById&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;recycler_view&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Instantiate SubjectAdapter with the data&lt;/span&gt;
&lt;span class="nc"&gt;SubjectAdapter&lt;/span&gt; &lt;span class="n"&gt;adapter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;SubjectAdapter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subjectsList&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Set adapter with RecyclerView&lt;/span&gt;
&lt;span class="n"&gt;recyclerView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setAdapter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Set LayoutManager&lt;/span&gt;
&lt;span class="n"&gt;recyclerView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setLayoutManager&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;LinearLayoutManager&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;RecyclerView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;HORIZONTAL&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One thing to note here is that we chose to implement &lt;code&gt;LinearLayoutManage&lt;/code&gt; with a horizontal layout this time. Luckily it sets to be scrollable automatically if there are many items. But if you wish to implement other styles, you could do so here by instantiating different &lt;code&gt;LayoutManager&lt;/code&gt; with your chosen dimension. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;We have gone through how to utilise &lt;code&gt;RecyclerView&lt;/code&gt; with custom &lt;code&gt;RecyclerView.Adapter&lt;/code&gt; and &lt;code&gt;LayoutManager&lt;/code&gt;. This is one of the best approaches to efficiently display a list of items. I found it quite useful and it has actually more to offer such as item animation. (I will write about this when I know it better!)&lt;/p&gt;

&lt;p&gt;Please feel free to leave a comment and your inputs are more than welcome and appreciated! Thanks for reading 😄&lt;/p&gt;

</description>
      <category>android</category>
      <category>java</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Are you using React ? Then I think you must know this</title>
      <author>Sudarshan Sawandkar</author>
      <pubDate>Sat, 15 May 2021 02:37:03 +0000</pubDate>
      <link>https://dev.to/sudarshansb143/are-you-using-react-then-i-think-you-must-know-this-47cg</link>
      <guid>https://dev.to/sudarshansb143/are-you-using-react-then-i-think-you-must-know-this-47cg</guid>
      <description>&lt;p&gt;At the time of writing this, React is at version &lt;strong&gt;17.02&lt;/strong&gt;. It is fascinating to see the exponential growth of this library. Everyone one is writing code in the react with the amusing speed and efficiency. But, still there are plenty of rabbit holes where most of the programmers got into the jargon. &lt;/p&gt;

&lt;p&gt;If you are using react for a while, then I think you have faced the weird behavior of react sometimes like :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tooooo many re-renders error&lt;/li&gt;
&lt;li&gt;Async behavior of setState() 
etc. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, In this article I will touch over some of the situations where we have to be careful 🔍&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#%E2%9C%82-destructure-props-with-default-values-"&gt;
  &lt;/a&gt;
  ✂ Destructure Props With Default Values :-
&lt;/h3&gt;

&lt;p&gt;React Components heavily relies on the data forwarded using props. Whether it is a state object or a callback function. Handling  props and destructing them before actual using them is  one of good practice. It makes your code less error prone  and more robust in order to sustain the uncertain behavior of  inputs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ChildComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Anonymous&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, In this snippet props are destructured with  default  values to avoid undefined error. Also, while using the props are used with &lt;em&gt;??&lt;/em&gt; operator to avoid any further conflicts &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#using-usememo-"&gt;
  &lt;/a&gt;
  😷 Using useMemo()  :
&lt;/h3&gt;

&lt;p&gt;Every state change comes with the cost of re-rendering the virtual DOM. Sometimes this re-render is less costly, but  sometimes it does make the difference. So, when re-render happens every bit of code inside the function body is re-defined and it is unnecessary to re-render the &lt;em&gt;Dumb Code&lt;/em&gt;. Because, it is not going change its functionality.  hence, we use ** useMemo() **&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExecuteCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Increment&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As, everyone can notice, the execute counter is DUMB Components. Hence, here it is wrapped in the memo(). This will re-render the ExecuteCounter() only  when the  props are changed.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#setstate-is-async-"&gt;
  &lt;/a&gt;
  🔨 setState() is async :
&lt;/h3&gt;

&lt;p&gt;setState() is async in nature. When  we call the  setState() in  the callback function, it is not  going to update the state  instantly. rather, it will batch the any subsequent changes and then apply them once it's done. This avoids the several heavy lifting because the setState() applies huge computations while re-rendering&lt;/p&gt;

&lt;p&gt;This is probably the haven't estimated by many but, it's worth mentioning it here. Reason behind making the setState() async is pretty simple. As JavaScript is single threaded, making the setState() synchronous can block the browser's main execution thread and ultimately results in the unresponsive page. Hence, to avoid this the React's DEV team  created the setState() as async in nature.&lt;/p&gt;

&lt;p&gt;This is experienced by many dev's if we immediatly querying state values after we call the setState()&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#use-thunk-"&gt;
  &lt;/a&gt;
  🎉 Use thunk() :
&lt;/h3&gt;

&lt;p&gt;If anyone already using redux may know this, but still I will explain It. Making async changes in the redux reducer is pretty easy  with actios. But, any newbie ever tried to make ajax requests from the actions of the redux, then here is the trick,&lt;/p&gt;

&lt;p&gt;while creating store in redux, we have to wrap the redux thunk inside the create store&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;thunk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redux-thunk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;middelware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;thunk&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rootReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;applyMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;middelware&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this you can dispatch the async request from  the action creaters like  this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;userInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//fetch data &lt;/span&gt;

    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ACTION_TYPE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;VIRUS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;err&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;)
   }

}

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This, is simplistic example of thunk. We can exploit it to do more actions then that of simple ajax requests&lt;/p&gt;




&lt;p&gt;😎 Final Views :&lt;/p&gt;

&lt;p&gt;Re-rendering the components in react cost us more. Avoid re-rendering of the dumb code can significantly  increase the render speed and avoid the any pitfall or lag in the interaction between the user and the we application&lt;/p&gt;

&lt;p&gt;Thanks For Reading 🙏&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Top 10 software for your Homelab in 2021</title>
      <author>Aaron Berry</author>
      <pubDate>Sat, 15 May 2021 02:05:53 +0000</pubDate>
      <link>https://dev.to/aaronktberry/top-10-software-for-your-homelab-in-2021-28e1</link>
      <guid>https://dev.to/aaronktberry/top-10-software-for-your-homelab-in-2021-28e1</guid>
      <description>&lt;p&gt;You may have lots of reasons for what you run your lab but there is an always growing list of new things to try in your homelab or server. Check out this quick list of 10 apps that you can try out and see if you can get some new functionality for free through self-hosting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#portainer"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.portainer.io/"&gt;Portainer&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bEfodvuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9i62kcno1j4uq4bdjdy8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bEfodvuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9i62kcno1j4uq4bdjdy8.png" alt="Portainer Web Ui"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Docker is a powerful tool that can allow you to host and run apps easily on your servers. Now, docker's main interface is a command-line tool but with an application like Portainer you get a nice GUI interface to manage your host's docker client.&lt;/p&gt;

&lt;p&gt;Portainer supports your running Docker environments, Docker Swarms, local or remote by interfacing either directly with the local docker.sock on your host or the remote docker endpoint. The UI can easily be used for either monitoring the status of containers, reading current logs or building and modifying docker container stacks (Dockerfile).&lt;/p&gt;

&lt;p&gt;It's a well thought out interface, well supported with updates and very low maintenance. It tries to guide you where it can to use the more advanced features of docker to your advantage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plex-media-server"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.plex.tv/en-au/"&gt;Plex Media Server&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8L-fi4jC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6t590hbt9zpwxzczs4h.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8L-fi4jC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6t590hbt9zpwxzczs4h.jpeg" alt="Plex Media Server Web Ui"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is one of the top-rated and downloaded media servers that you can run to get your own Amazon Prime or Netflix level features with all your own content.&lt;/p&gt;

&lt;p&gt;Plex lets you bring all of your own content and it will automatically try to match your files to its database of movies and tv and give you reach features like chapter detection, automatic subtitle detection and stream to devices outside your network or syncing to your devices if you don't want your server to be accessible outside your network.&lt;/p&gt;

&lt;p&gt;This application is regularly updated and supported by the Plex company and they are always looking to improve features in the application. Recently the company has been expanding its streaming services further to offer free media streaming through their cloud services.&lt;/p&gt;

&lt;p&gt;There are other options available to you like Emby or Jelly fin so have a check out of all of them and their features and pick the one that gives you the features you want.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#proxmox"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.proxmox.com/en/proxmox-ve"&gt;Proxmox&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mJe961x_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shzcbywiheusqvtim1o2.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mJe961x_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shzcbywiheusqvtim1o2.jpeg" alt="Proxmox Web Ui"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This application is best installed on a bare-metal machine as it runs as an OS and will allow for more advanced virtualization features to be used. This OS is installed as a Debian spin with a custom Ubuntu Kernel. This base install has a tiny ram and CPU draw in comparison to other enterprise-level virtualization platforms like ESXi and HyperV so this is a solution suited for lower-powered systems as well. One thing to take note of is the if your looking to use Proxmox is that it is using KVM under the hood for virtualization converting vdmk or ova files to qcow2 can prove to be a chore if you're looking to migrate your existing virtual disks.&lt;/p&gt;

&lt;p&gt;Proxmox gives you the perfect environment to quickly spin up and down either VM's or Linux containers for your applications to either try things out or iterate on your infrastructure quickly or run your infrastructure efficiently only when needed using Proxmox's easy to use the web interface to manage your new virtualized infrastructure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pihole"&gt;
  &lt;/a&gt;
  &lt;a href="https://pi-hole.net/"&gt;Pi-Hole&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q4sqKRNB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bb3zfmcvsaqjpv3n928l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q4sqKRNB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bb3zfmcvsaqjpv3n928l.png" alt="Pi-Hole Web Ui"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Advertising is EVERYWHERE on the internet these days and you can use extensions in your browsers to try and get around these pesky Ads. But what if you could do this for your whole network to have automatic Ad-Blocking for clients that may not have had ad-blocking capabilities initially.&lt;/p&gt;

&lt;p&gt;The application can be installed as a container or on a small device as a Raspberry Pi would work perfectly. You get a nice GUI interface to administer the ad-blocking service and set up normal router capabilities like routes, static IP addresses and DHCP servers if need and you want to replace your router with Pi-Hole. Now with the blocking of any network traffic, you'll always have a time you need to whitelist a domain that just needs to be connected too even if it leads to some Ads due to the cat and mouse game between us and the Marketing companies. The GUI's of Pi-Hole makes it nice and easy to update and manage these filtering whitelist and blacklists either through domains or IP addresses.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#papertrail"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.papertrail.com/"&gt;Papertrail&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rZ7Gaibi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4dskprxq3y9qj7v8xfc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rZ7Gaibi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4dskprxq3y9qj7v8xfc.png" alt="Papertrail Web Ui"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Log Management is important, aside from monitoring it will be the thing that provides you with the most information about your systems and what's running on them. There are plenty of options for this problem such as Graylog to ELK and they provide their own unique features and interfaces so consult which one works best for you.&lt;/p&gt;

&lt;p&gt;The true power of Papertrail for me however was being able to search logs in real-time via the web browser. Much like ELK and similar software you may host yourself, you can also create Alerts on specific log events which can be pushed by email, Slack or other channels should those events occur or when aggregated. The Search bar is also pretty quick when searching back in the logs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#graylog"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.graylog.org/"&gt;Graylog&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SNeictjY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6ec0xfekc8ek2b9a345.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SNeictjY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6ec0xfekc8ek2b9a345.jpeg" alt="Graylog Web Ui"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now if your running applications across multiple containers, multiple hosts or even multiple clouds you are gonna get overrun with how you access the logs of these applications to monitor they are running correctly or diagnose any issues you might come across.&lt;/p&gt;

&lt;p&gt;Graylog makes it easy to use standard protocols to export your applications logs either through files and R-SYSLOG or through an automatic remote transport like docker and GELF messaging to export the logs. Once centralised you can set up metrics and dashboards from these imported logs to get some more visibility for your applications and infrastructure.&lt;/p&gt;

&lt;p&gt;Graylog is recommended to be set up as soon as possible as the advantages gained from being able to quickly see all logs in one place makes debugging even complex issues a breeze.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#netdata"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.netdata.cloud/"&gt;Netdata&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yxz2whIP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jqbhqx9man73kvvjorpe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yxz2whIP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jqbhqx9man73kvvjorpe.png" alt="Netdata Web Ui"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Netdata is server monitoring on steroids. Starting off it's a local install with a one-liner found on the Netdata site. The never-ending (seemingly) downward scroll presents graphical real-time breakdowns into systems, applications and everything running on the system. Each release provides a greater set of plugins and delving into more far-reaching information on applications.&lt;/p&gt;

&lt;p&gt;You can run Netdata locally, and use a pattern of Prometheus to pull data from Netdata and push to influx DB and display the output in Grafana. If this sounds like hard work, recently netdata.cloud was launched and you can "claim" your Netdata installs and pull the data into a centralized Netdata Cloud instance. It's early days for the netdata.cloud interface however its slowly improving and is a user interface for data aggregation.&lt;/p&gt;

&lt;p&gt;While many items on this list have "open source" alternatives Netdata stands out as a really useful service for both real-time system monitoring and if using Grafana. The fact that Netdata is so usable right out of the box too is a huge advantage of the Netdata application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ansible"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.redhat.com/en/technologies/management/ansible"&gt;Ansible&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LCGjgc06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/godln74cyo5ll9wt1q9x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LCGjgc06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/godln74cyo5ll9wt1q9x.png" alt="Ansible solution diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although it may have a high learning curve ansible is a fantastic tool for creating reusable playbooks for comment operations such as shell commands or file copies on your local and remote hosts. This makes complex operations nice and reproducible across multiple hosts allowing for lots of automation across your physical and virtual infrastructure.&lt;/p&gt;

&lt;p&gt;Ansible joins the host of tools such as chef or puppet that allows for similar configuring functionality that ansible provides but over the past 5 years ansible has been embraced by the community for its flexibility to build and share configuration scripts for common software or configuration of hosts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#terraform"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.terraform.io/"&gt;Terraform&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hvqza76W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjkzyowlnof26rozl8nq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hvqza76W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjkzyowlnof26rozl8nq.png" alt="Terraform solution diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another tool similar to Ansible, Terraform provides you with the ability to write a definition for your virtual infrastructure and apply it to your hosts. If your using technology like docker or virtualization for your machine you can utilise terraform to create reusable modules of infrastructure that can be configured for their specific use cases.&lt;/p&gt;

&lt;p&gt;An example of this would be to create a terraform module that deploys a generic virtual machine with passed in module parameters used to define the resources for that VM. Now in another terraform module can define an array of application machines all with their unique resource configurations for their specific applications. Now looped over our generic virtual machine module we can create identical infrastructure for each VM deployed the exact same way but configured uniquely for each application.&lt;/p&gt;

&lt;p&gt;This can allow you to deploy and test identical infrastructure allow for higher change confidence when updating infrastructure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nginx"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.nginx.com/"&gt;Nginx&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0FkeDqoW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ip9du34czshp76sfcuu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0FkeDqoW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ip9du34czshp76sfcuu.png" alt="Nginx solution diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now there are many uses you might have for a web server in your Homelab be it an actual webserver to a reverse proxy so that you can expose your services being run in your Homelab to the internet from a single port under subdomains.&lt;/p&gt;

&lt;p&gt;You can easily learn the Nginx configuration language to deploy these configurations for Nginx and get some utility out of your current applications by securing them behind SSL or to just make it easier for your users to access through a more memorable URL to access your service on.&lt;/p&gt;

&lt;p&gt;Nginx can easily be run via its binary installed via apt or with your applications in a lightweight docker container. The docker container deployment is particularly good for deploying application-specific configuration for routing with your applications through a docker-compose file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-further"&gt;
  &lt;/a&gt;
  Connect further
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Read more articles over on my &lt;a href="https://dev.to/aaronktberry"&gt;dev.to&lt;/a&gt; blog, or on my &lt;a href="https://aaron-kt-berry.medium.com/"&gt;medium&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Feel free to send me a message on &lt;a href="https://www.linkedin.com/in/aaron-kt-berry/"&gt;LinkedIn&lt;/a&gt; if you want to chat.&lt;/li&gt;
&lt;li&gt;If you are interested in server components and hardware check out my store &lt;a href="https://serverlabs.com.au"&gt;Server Labs Aus&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>docker</category>
      <category>devops</category>
      <category>linux</category>
      <category>opensource</category>
    </item>
    <item>
      <title>An accessible intro to Machine Learning</title>
      <author>Logan Anderson</author>
      <pubDate>Sat, 15 May 2021 01:37:03 +0000</pubDate>
      <link>https://dev.to/logan_anderson/an-accessible-intro-to-machine-learning-4pnk</link>
      <guid>https://dev.to/logan_anderson/an-accessible-intro-to-machine-learning-4pnk</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-machine-learning"&gt;
  &lt;/a&gt;
  What is Machine Learning
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Success in creating AI would be the biggest event in human history. Unfortunately, it might also be the last, unless we learn how to avoid the risks&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;- &lt;a href="https://www.hawking.org.uk/biography"&gt;Stephen Hawking&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Machine learning and artificial intelligence have had grown in popularity significantly over the past years. With this growth comes benefits and consequences. This article introduces the basic concepts of machine learning with intuitive visuals and little or no math/calculations. The goal is to give one a feel for how machine learning works. Understanding will play a key role in the future of machine learning as not having a good understanding of what is happening can have dire consequences.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intuitive-understanding"&gt;
  &lt;/a&gt;
  Intuitive Understanding
&lt;/h2&gt;

&lt;p&gt;At its core machine learning is an algorithm (or a set of instructions) for updating parameters. For example, If I had a function that looked like this.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def housePriceModel(x0,x1,squareFootage):
    return x0 + squareFootage*x1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The goal of this function is to guess the price of the house when given square footage and to do it as accurately as possible. It takes an &lt;strong&gt;x0&lt;/strong&gt; and &lt;strong&gt;x1&lt;/strong&gt; as parameters but we do not know what these parameters are. This is where machine learning comes to the rescue. Without machine learning, we would pick an &lt;strong&gt;x0&lt;/strong&gt; and &lt;strong&gt;x1&lt;/strong&gt; by trial and error. We could pick them and then look at how well these two parameters work on a set of data. I have coded up a demo below so you can play the role of machine learning and see how well you can make this model perform. The goal is to tweak and change &lt;strong&gt;x0&lt;/strong&gt; and &lt;strong&gt;x1&lt;/strong&gt; and try to make the error as small as possible (we will get into how this is calculated later). The data that is being used for this is a &lt;a href="https://www.kaggle.com/c/house-prices-advanced-regression-techniques"&gt;subset of a housing dataset&lt;/a&gt;. Go ahead, play the role of machine learning, tweak &lt;strong&gt;x0&lt;/strong&gt; and &lt;strong&gt;x1&lt;/strong&gt; in the &lt;a href="https://logan-ml-demo.netlify.app/"&gt;demo here&lt;/a&gt; and see how small you can make the error.&lt;/p&gt;

&lt;p&gt;If your anything like me you may have played around with &lt;strong&gt;x1&lt;/strong&gt; or &lt;strong&gt;x0&lt;/strong&gt; and looked at how the error was changing while you changed &lt;strong&gt;x0&lt;/strong&gt; and &lt;strong&gt;x1&lt;/strong&gt;. If it was going down one might keep changing the parameter and if it was going up we might change it in the other direction. What we just did was not machine learning but it was very close. Instead of you updating the parameters based on your intuition an algorithm updates the parameters based on mathematical principles.&lt;/p&gt;

&lt;p&gt;Although important these mathematical principles often trip people up and can be a barrier to entry to learning machine learning. Let's go over some of them to gain further insight into how machine learning works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#machine-learning-model"&gt;
  &lt;/a&gt;
  Machine learning model
&lt;/h3&gt;

&lt;p&gt;The function that is learned in the machine learning process. In the example we just looked at it was the &lt;code&gt;housePriceModel&lt;/code&gt;. This function has parameters that are learned. In our case, it was &lt;strong&gt;x0&lt;/strong&gt; and &lt;strong&gt;x1&lt;/strong&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cost-function"&gt;
  &lt;/a&gt;
  Cost Function
&lt;/h3&gt;

&lt;p&gt;A cost function is a function that lets provide a measure for how will that machine learning model is performing on a set of examples. The cost function takes a model as input and outputs how well it is doing.  If our model is doing well on a set of examples the cost will below. If it is doing poorly the cost is high. This is also sometimes called the Loss or Error function. In our example, the cost function was Cost(x, h) = (h(price) - RealPice)^2. Where &lt;strong&gt;h&lt;/strong&gt; is our model.&lt;/p&gt;

&lt;p&gt;I know this is a lot to take in but hopefully, you are still following. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-how-does-the-model-learn"&gt;
  &lt;/a&gt;
  But How does the model &lt;em&gt;Learn&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;The model learns by calculating the gradient of the cost function. In basic terms, the gradient is how each parameter (&lt;strong&gt;x0&lt;/strong&gt; and &lt;strong&gt;x1&lt;/strong&gt;) changes in relation to the cost. A big change will mean it affects the cost a lot and a little change will mean it affects the cost a little. Similarly to how in our example we change &lt;strong&gt;x0&lt;/strong&gt; and &lt;strong&gt;x1&lt;/strong&gt; until we say a decrease in cost. The gradient is the same idea but expressed in terms of math, namely calculus. &lt;/p&gt;

&lt;p&gt;Now that we have some basic intuition we can see the learning process as a series of steps&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Calculate the cost of your model&lt;/li&gt;
&lt;li&gt;Is it good?

&lt;ol&gt;
&lt;li&gt;If it is we can stop (we have a good model)&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Not good?

&lt;ol&gt;
&lt;li&gt;We calculate the gradient and make a small change to our model based on it&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Go back to step one and repeat the process&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is a lot we have glossed over but hopefully, this provides some basic insight into how machine learning works and demystifies some of the magic.&lt;/p&gt;

&lt;p&gt;This post was original &lt;a href="https://logana.dev/blog/machine-learning"&gt;posted in my blog&lt;/a&gt;. Please check it out for more content.&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>ai</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Have you taken part in a coding challenge or hackathon before? How did it help you grow?</title>
      <author>Fum</author>
      <pubDate>Fri, 14 May 2021 23:09:19 +0000</pubDate>
      <link>https://dev.to/inspirezone/have-you-taken-part-in-a-coding-challenge-or-hackathon-before-how-did-it-help-you-grow-1kdn</link>
      <guid>https://dev.to/inspirezone/have-you-taken-part-in-a-coding-challenge-or-hackathon-before-how-did-it-help-you-grow-1kdn</guid>
      <description>&lt;p&gt;Let us know what challenges or hackathons you’ve participated in before. What did you like about them and what did you learn?&lt;/p&gt;

&lt;p&gt;I’m building a developer community called &lt;a href="https://community.inspirezone.tech/"&gt;inspirezone&lt;/a&gt; all about encouraging devs to keep a regular coding habit through various coding challenges and events. We are also focused on using accountability to push each other to reach our goals.&lt;/p&gt;

&lt;p&gt;Read the post below for more details on our community and challenges!&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/funbeedev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ls-S8Zoy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--6nTSlYfM--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/451342/745b9200-9a73-40ed-af7c-30e174b9a3c4.jpg" alt="funbeedev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inspirezone/a-developer-community-encouraging-active-coding-practice-4koh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;A Developer Community Encouraging Active Coding Practice 🏁 &lt;/h2&gt;
      &lt;h3&gt;Fum ・ Apr 24 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>watercooler</category>
      <category>discuss</category>
      <category>programming</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Developer Enablement Unpacked: Developer Experience, Relations, and Marketing</title>
      <author>Matt Hawkins</author>
      <pubDate>Fri, 14 May 2021 22:20:16 +0000</pubDate>
      <link>https://dev.to/hoss/developer-enablement-unpacked-developer-experience-relations-and-marketing-4cee</link>
      <guid>https://dev.to/hoss/developer-enablement-unpacked-developer-experience-relations-and-marketing-4cee</guid>
      <description>&lt;p&gt;Public APIs create value—for the provider and the consumer—only when they’re used. That’s why fields that attract and support developers have grown in recent years. These individuals and teams &lt;em&gt;enable&lt;/em&gt; developers to discover and better use APIs and other technical tools. Once a part of only the largest companies, these roles are now more common at medium-sized businesses and even startups.&lt;/p&gt;

&lt;p&gt;We’ll cover three common areas companies use to interact with a developer audience:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Developer Experience&lt;/li&gt;
&lt;li&gt;Developer Relations&lt;/li&gt;
&lt;li&gt;Developer Marketing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may find these by other names, but they’re the core pieces of developer enablement—and they’re crucial to both attracting and retaining developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developer-experience-how-you-guide-the-developer-journey"&gt;
  &lt;/a&gt;
  Developer Experience: How You Guide the Developer Journey
&lt;/h2&gt;

&lt;p&gt;Once a developer has discovered your API, they may want to use it. Your &lt;a href="https://www.hoss.com/blog/developer-onboarding-best-practices"&gt;developer onboarding&lt;/a&gt; will determine whether they can quickly get started. These earliest interactions determine their initial developer experience. How you further guide them will determine whether they stick around to be successful with your API.&lt;/p&gt;

&lt;p&gt;There are many factors that go into this hands-off developer enablement. There are product decisions, user interface elements, and technical education that all need to come together. If you’re clear about why and how to use your API, you’ll enable developers to accomplish their goals. &lt;/p&gt;

&lt;p&gt;A robust developer experience will quickly answer what is possible and help them take the next step. The most valuable tools of the developer trade are all varying forms of documentation. Yes, there are various types of documentation you need to provide a developer to enable them to succeed. Make sure you have at least all of the following, if applicable:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A getting started guide;&lt;/li&gt;
&lt;li&gt;Tutorials;&lt;/li&gt;
&lt;li&gt;An up-to-date reference guide;&lt;/li&gt;
&lt;li&gt;Sample applications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, &lt;a href="https://developers.deepgram.com/"&gt;Deepgram&lt;/a&gt; meets developer needs in its documentation portal:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nelUm6NO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/lP8M99K3De5Q6YmhnMi6jAhpqzsMBconLSI1GL7W-6j7KyFp3i8pjXUyIknqu-oRzLYaqDpNYUsLboRz7F6JU94UrPGSORvfRQupX9grB23jFooo6GE3W-y2CNh_ky5puPTKM7OY" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nelUm6NO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/lP8M99K3De5Q6YmhnMi6jAhpqzsMBconLSI1GL7W-6j7KyFp3i8pjXUyIknqu-oRzLYaqDpNYUsLboRz7F6JU94UrPGSORvfRQupX9grB23jFooo6GE3W-y2CNh_ky5puPTKM7OY" alt="Deepgram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For someone brand new to Deepgram, it provides a guide to get started. The complete reference is useful for a quick glance at what’s possible or an experienced developer checking on syntax. Finally, guides and samples bridge the gap between first interactions and complete integrations.&lt;/p&gt;

&lt;p&gt;Of course, the specifics of your documentation will vary based on your API. This is a great chance to use your product knowledge to customize the documentation with the context needed to truly empower your users. Just make sure you avoid these &lt;a href="https://www.hoss.com/blog/10-common-mistakes-in-developer-experience"&gt;10 common developer experience mistakes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As great as your self serve experience should be, remember developers are people, too. Sometimes direct interaction and the support of others unlocks their full potential. Let's look at how developer relations can amplify your developer enablement.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developer-relations-coders-helping-coders"&gt;
  &lt;/a&gt;
  Developer Relations: Coders Helping Coders
&lt;/h2&gt;

&lt;p&gt;Communication is a crucial element of your developer onboarding, but it doesn’t all have to be in your developer experience. Self-serve signup is great, but so is a friendly face to point out the time-wasting gotchas. No documentation can cover all of those, nor have the same empathy as another person. The field of developer relations can fill these gaps.&lt;/p&gt;

&lt;p&gt;Some of the common titles you’ll see in developer relations include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Developer advocate&lt;/li&gt;
&lt;li&gt;Developer evangelist&lt;/li&gt;
&lt;li&gt;Community manager&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The exact responsibilities may vary, based on title and organization, but the overall duties are to enable fellow coders to be successful. Google first popularized the “advocate” title, which it meant to include bringing product feedback from the outside into the company (being an internal advocate for external developers). By contrast, “evangelists” face outward and spread the good word of the company. In practice, some advocates may be promotional and some evangelists bring tremendous insights back to their employers.&lt;/p&gt;

&lt;p&gt;While the example of a new developer onboarding can look like customer support, that’s only one type of communication. Developer relations practitioners attend events, host live coding sessions, and jump into open source forums, among many others.&lt;/p&gt;

&lt;p&gt;Even after integrating with  your product, developers run into issues the documentation may not answer. It might be specific to their situation or industry. In traditional developer fashion, they could just go down a rabbit hole of hit-or-miss StackOverflow threads. But often an advocate, evangelist, or community manager can provide a quick, helpful point in the right direction.&lt;/p&gt;

&lt;p&gt;Once you develop those relationships, it's important to take steps to &lt;em&gt;maintain&lt;/em&gt; them throughout their time using your product. A great way to be helpful to developers and to support those relationships is through having a presence in the communities where they congregate. These communities can be of your creation, such as product-specific forums, or be of pre-existing platforms, such as Twitter and Reddit. Just look at all the ways developers can interact with each other from &lt;a href="https://www.twilio.com/"&gt;Twilio&lt;/a&gt;'s website:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yQ_UYH87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/ciDjY5RrWOP14HmuoYKIr99sxlwr1L_Wv0txUbvpl6i3iSq2DzVozoEk9Ir5PmqMSM0vRJEitZZt9p2_A6IOikrhUU06asUVqd1_xWDTwXtTOcu0s0ySJ3XTKt1gLpf-CVl67M86" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yQ_UYH87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/ciDjY5RrWOP14HmuoYKIr99sxlwr1L_Wv0txUbvpl6i3iSq2DzVozoEk9Ir5PmqMSM0vRJEitZZt9p2_A6IOikrhUU06asUVqd1_xWDTwXtTOcu0s0ySJ3XTKt1gLpf-CVl67M86" alt="Twilio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Making use of one of these should not be mutually exclusive from using the other; each has its own advantages. By having a presence on pre-existing platforms, you'll reach developers who might not have realized your product is the solution to their problems otherwise. And by having your own product-focused community, you create an informative, communicative dynamic between people using your product.&lt;/p&gt;

&lt;p&gt;We believe that communicating with developers is important, as you can see, but that assumes you’ve helped them discover you in the first place. Let's look at what you can do to address that concern.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developer-marketing-go-find-your-technical-audience"&gt;
  &lt;/a&gt;
  Developer Marketing: Go Find Your Technical Audience
&lt;/h2&gt;

&lt;p&gt;Before a developer can enjoy their first experience or ask a question of your advocate, they need to find out you exist. As with other fields, marketing can help you find an audience. Unlike other fields, developers are especially uncertain about most marketing activities, so you’ll need to be careful how you reach out.&lt;/p&gt;

&lt;p&gt;Luckily, most developers are always looking to learn and expand their abilities. If you can help them on their journey—before they’ve even used your product—then they’re more likely to trust what might otherwise come across as promotional messages.&lt;/p&gt;

&lt;p&gt;Some common and successful developer marketing tactics are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Events and webinars&lt;/li&gt;
&lt;li&gt;Content marketing&lt;/li&gt;
&lt;li&gt;Community sponsorship&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use any of these approaches to show up where developers already participate.&lt;/p&gt;

&lt;p&gt;Bring information to developers when you participate and host events. Help them find the next new thing, or understand better how the current things work. Keep your product promotion low key or non-existent and instead focus on how you can communicate about the problems to developers before working on the solutions.&lt;/p&gt;

&lt;p&gt;You can do the same in SEO-focused content marketing and advertising-focused community sponsorships. Show yourself to be a key resource and developers will be willing to hear from you. Use other tactics like retargeting and email newsletter to stay top of mind.&lt;/p&gt;

&lt;p&gt;For example, cloud database &lt;a href="https://www.snowflake.com/"&gt;Snowflake&lt;/a&gt; puts it all together in this email:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DnA6lWCz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/b3GMXnmzv64ySuxr_bgeibwAwL2IhzMaUF36kFPHfxIGeaq2FqLEt0w8fDViemz7RjtaXzYSyEKXJ1e14vqUYDsHRt0GFSgsYWmkKpbCJT2diP35Yr7aUekXpA9R_FOqtfVytF2J" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DnA6lWCz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/b3GMXnmzv64ySuxr_bgeibwAwL2IhzMaUF36kFPHfxIGeaq2FqLEt0w8fDViemz7RjtaXzYSyEKXJ1e14vqUYDsHRt0GFSgsYWmkKpbCJT2diP35Yr7aUekXpA9R_FOqtfVytF2J" alt="Snowflake"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s an event related to specific problems that Snowflake solves. A Q&amp;amp;A session offers the chance to ask questions of experts (perhaps their developer relations team?). All of these resources could then be bundled into content to attract more developers to their platform in the future.&lt;/p&gt;

&lt;p&gt;Naturally, you’ll want to include all of these resources within a framework that provides the best experience and access to your own team of experts. How you treat developer enablement in your organization will greatly determine the success of your API. Consider the &lt;a href="https://www.hoss.com/docs"&gt;Hoss developer hub&lt;/a&gt; to host not just your documentation, but the full enablement experience.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.hoss.com/contact/"&gt;Reach out to us&lt;/a&gt; to learn more about what we’ve built.&lt;/p&gt;

</description>
      <category>devrel</category>
      <category>developerexperience</category>
      <category>developermarketing</category>
      <category>docs</category>
    </item>
    <item>
      <title>LeetCode 1482. Minimum Number of Days to Make m Bouquets (javascript solution)
</title>
      <author>codingpineapple</author>
      <pubDate>Fri, 14 May 2021 21:44:15 +0000</pubDate>
      <link>https://dev.to/cod3pineapple/leetcode-1482-minimum-number-of-days-to-make-m-bouquets-javascript-solution-5gfp</link>
      <guid>https://dev.to/cod3pineapple/leetcode-1482-minimum-number-of-days-to-make-m-bouquets-javascript-solution-5gfp</guid>
      <description>&lt;h3&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  Description:
&lt;/h3&gt;

&lt;p&gt;Given an integer array bloomDay, an integer m and an integer k.&lt;/p&gt;

&lt;p&gt;We need to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden.&lt;/p&gt;

&lt;p&gt;The garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet.&lt;/p&gt;

&lt;p&gt;Return the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution:
&lt;/h3&gt;

&lt;p&gt;Time Complexity : O(nlog(n))&lt;br&gt;
Space Complexity: O(1)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Binary Search&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;minDays&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bloomDay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Check if we can make m bouquets given in day days&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;checkCondition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bouq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;flowers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bloom&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;bloomDay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;day&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;bloom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;flowers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;bouq&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
                &lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// If we can make m or more bouquets, check if we can do it faster&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;bouq&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// It is impossible to make m bouquets if we don't have enough flowers&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;bloomDay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="c1"&gt;// The fastest we can make a bouquet is the min of bloomDay and the slowest we can make a bouquet is the max of bloomDay&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;bloomDay&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;bloomDay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// Binary search template&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;checkCondition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Run Node.js app with ES6 features</title>
      <author>Muhammad Iqbal</author>
      <pubDate>Fri, 14 May 2021 21:43:55 +0000</pubDate>
      <link>https://dev.to/muhammadiqbal/run-node-js-app-with-es6-features-59o3</link>
      <guid>https://dev.to/muhammadiqbal/run-node-js-app-with-es6-features-59o3</guid>
      <description>&lt;p&gt;In this article, we will learn how to use ES6 syntax to write your &lt;strong&gt;Node Server&lt;/strong&gt; in few simple steps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-babel-as-dev-dependencies-in-the-project"&gt;
  &lt;/a&gt;
  Installing babel as dev dependencies in the project
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Babel is a toolchain that is mainly used to convert ECMAScript 2015+&lt;br&gt;
code into a backward-compatible version of JavaScript in current and&lt;br&gt;
older browsers or environments. Here are the main things Babel can do&lt;br&gt;
for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Transform syntax&lt;/li&gt;
&lt;li&gt;  Polyfill features that are missing in your target environment (through a third-party polyfill such as
&lt;a href="https://github.com/zloirock/core-js"&gt;core-js&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;  Source code transformations (codemods)&lt;/li&gt;
&lt;li&gt;  And more! (check out these &lt;a href="https://babeljs.io/videos.html"&gt;videos&lt;/a&gt; for inspiration)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Installation with npm&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev @babel/core @babel/node @babel/preset-env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Installation with yarn&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add @babel/core @babel/node @babel/preset-env -D
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;After successful installations of dev-dependencies create a file named &lt;strong&gt;.babelrc&lt;/strong&gt; like this. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ewy-c3al--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/SXNjpYV/Screenshot-2021-05-15-at-2-23-46-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ewy-c3al--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/SXNjpYV/Screenshot-2021-05-15-at-2-23-46-AM.png" alt=".babelrc-file"&gt;&lt;/a&gt;&lt;br&gt;
and paste the following code in it and save the .babelrc file.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "presets":  ["@babel/preset-env"]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#running-the-es6-code"&gt;
  &lt;/a&gt;
  Running the ES6 Code
&lt;/h2&gt;

&lt;p&gt;Now you can run your node.js project with ES6 features by running the following command.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn babel-node index.js
or
npx babel-node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;That is it for this short article. &lt;/p&gt;

&lt;p&gt;I am writing this first time please forgive me for my mistakes. I hope you guys find it informative.&lt;/p&gt;

</description>
      <category>node</category>
      <category>es6</category>
      <category>babel</category>
      <category>babelnode</category>
    </item>
    <item>
      <title>Everything you need to know to deploy an Azure Static Web App</title>
      <author>Yönet</author>
      <pubDate>Fri, 14 May 2021 21:39:44 +0000</pubDate>
      <link>https://dev.to/azure/everything-you-need-to-know-to-deploy-an-azure-static-web-app-fm6</link>
      <guid>https://dev.to/azure/everything-you-need-to-know-to-deploy-an-azure-static-web-app-fm6</guid>
      <description>&lt;p&gt;With &lt;a href="https://azure.microsoft.com/en-us/services/app-service/static/?WT.mc_id=aiml-28641-ayyonet#overview"&gt;Azure Static Web Apps&lt;/a&gt; you can host your serverless web app, continiously deploy with Github actions and easily integrate with your Azure APIs or add your custom authentications and domains. &lt;/p&gt;

&lt;p&gt;Sounds too good to be true? Well I would think so if I didn't get to deploy and set up automations with Github Actions, without needing to know anything about actions, in minutes. &lt;/p&gt;

&lt;p&gt;You can read more about the key &lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/overview?WT.mc_id=aiml-28641-ayyonet#key-features"&gt;Azure Static Web App features&lt;/a&gt; or dive right into it. &lt;strong&gt;Seeing is believing&lt;/strong&gt;, so here are all the things that you can get started with depending on your preference:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#tutorials"&gt;Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-guides"&gt;How to Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-samples"&gt;Code Samples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tutorials"&gt;
  &lt;/a&gt;
  Tutorials
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.microsoft.com/en-us/learn/paths/azure-static-web-apps/?WT.mc_id=aiml-28641-ayyonet"&gt;Azure Learn Modules&lt;/a&gt; covering everything from &lt;strong&gt;Angular, React, Svelte, Vue, Gatsby&lt;/strong&gt; and plain old &lt;strong&gt;JavaScript&lt;/strong&gt; to publishing a &lt;strong&gt;Blazor WebAssembly app and .NET API&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.microsoft.com/azure/static-web-apps/publish-gatsby?WT.mc_id=aiml-28641-ayyonet"&gt;Tutorials&lt;/a&gt;  for working with static site generators to working with databases. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-to-guides"&gt;
  &lt;/a&gt;
  How to Guides
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/local-development?WT.mc_id=aiml-28641-ayyonet"&gt;Setup your local development environment&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/front-end-frameworks?WT.mc_id=aiml-28641-ayyonet"&gt;Configure your frontend framework of your choice&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/functions-bring-your-own?WT.mc_id=aiml-28641-ayyonet"&gt;How to integrate with your Azure Functions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/add-mongoose?WT.mc_id=aiml-28641-ayyonet"&gt;How to use a database with Azure Static Web Apps&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/custom-domain?tabs=azure-dns&amp;amp;WT.mc_id=aiml-8567-ayyonet"&gt;Set up your custom domain&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-custom?tabs=aad&amp;amp;WT.mc_id=aiml-8567-ayyonet"&gt;How to do custom authentication with Azure Static Web Apps&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#code-samples"&gt;
  &lt;/a&gt;
  Code Samples
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/microsoft/static-web-apps-gallery-code-samples?WT.mc_id=aiml-28641-ayyonet"&gt;Microsoft code samples&lt;/a&gt; with lots of cool projects and for different frameworks and integrations like &lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/?WT.mc_id=aiml-28641-ayyonet"&gt;Azure Functions&lt;/a&gt; or &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/?WT.mc_id=aiml-28641-ayyonet"&gt;Azure Cognitive Services&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LGobyE_X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q26kcreul2ecpxvir9xa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LGobyE_X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q26kcreul2ecpxvir9xa.png" alt="PoseDance: A TikTok Trainer App"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/microsoft/static-web-apps-gallery-code-samples/blob/master/media/angular-search-experience.gif"&gt;Awesome List of Azure Static Web Apps&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, join us at &lt;a href="https://www.microsoft.com/en-us/devrel/cognitiveservices/?WT.mc_id=aiml-28641-ayyonet"&gt;AI Show Live&lt;/a&gt; to see how we build and deploy with Cognitive Services for &lt;a href="https://github.com/aiadvocates/AIPlayground"&gt;AI Playground&lt;/a&gt;. Ask your questions and let us know the features you want to see on our &lt;a href="https://github.com/aiadvocates/AIPlayground/discussions/?WT.mc_id=aiml-8567-ayyonet"&gt;Github Discussion&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLlrxD0HtieHinivDFATQd5qyjL6ijKHUF"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OzBl0c_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://img.youtube.com/vi/vRNG8BCtTeU/0.jpg" alt="AI Show Live"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let us know in the comments what you think and what you would like to see as a tutorial, code sample or a video about Azure Static Web Apps.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__29"&gt;
  
    .ltag__tag__id__29 .follow-action-button{
      background-color: #F54D27 !important;
      color: #413932 !important;
      border-color: #F54D27 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/git" class="ltag__tag__link"&gt;git&lt;/a&gt; 
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class="ltag__tag ltag__tag__id__8"&gt;
  
    .ltag__tag__id__8 .follow-action-button{
      background-color: #562765 !important;
      color: #ffffff !important;
      border-color: #562765 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/webdev" class="ltag__tag__link"&gt;webdev&lt;/a&gt; 
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>azure</category>
      <category>serverless</category>
    </item>
    <item>
      <title>CSS Gradients: An Introduction</title>
      <author>Mehmed Duhovic</author>
      <pubDate>Fri, 14 May 2021 21:04:12 +0000</pubDate>
      <link>https://dev.to/bracikaa/css-gradients-an-introduction-ci6</link>
      <guid>https://dev.to/bracikaa/css-gradients-an-introduction-ci6</guid>
      <description>&lt;p&gt;This article will cover CSS gradients and take a took at some real-life uses for them.&lt;/p&gt;

&lt;p&gt;Most of the time we use solid background colors to style our web application, using the &lt;code&gt;background&lt;/code&gt; property. There is actually more to the &lt;code&gt;background&lt;/code&gt; property, as it is a shorthand for many different properties including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;background-image&lt;/code&gt; - can set a background image or generate a color gradient (we will talk about this!)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;background-position&lt;/code&gt; - can set the position of the background image&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;background-size&lt;/code&gt; - sets the size of the rendered background image&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;background-repeat&lt;/code&gt; - can set the 'repeat' property of the image in order to fill the entire element&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;background-origin&lt;/code&gt; - can set the background positioning, being relative to the element's &lt;code&gt;border-box&lt;/code&gt;, &lt;code&gt;padding-box&lt;/code&gt; or &lt;code&gt;content-box&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;background-color &lt;/code&gt;- sets a specific background color which will render behind any set background image&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While using some of these single properties, we should also keep in mind that if we at a later time style elements with the &lt;code&gt;background&lt;/code&gt; property, we will &lt;a href="https://thedukh.com/2021/04/on-css-shorthand-properties/" rel="noreferrer noopener"&gt;reset all the others back to their initial value&lt;/a&gt;. We should instead write individual properties unless we are definitely sure that we won't override them later.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#backgroundimage-and-css-gradients"&gt;
  &lt;/a&gt;
  Background-image and CSS gradients
&lt;/h1&gt;

&lt;p&gt;We usually use &lt;code&gt;background-image&lt;/code&gt; property to accept a path to an image URL (&lt;code&gt;background-image: url(url-to-image.png&lt;/code&gt;) in order to set the image as the element's background. But the &lt;code&gt;background-property &lt;/code&gt;actually serves one additional use - we can define gradients, which are actually extremely useful effects. Let us see them in use: &lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"image-wrapper wrapper-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Two-Color linear gradient&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
      &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://i.pinimg.com/originals/02/c5/13/02c5130828505d0365ca6afdb047c888.png"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"image-wrapper wrapper-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Two-Color linear gradient with an angle&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
      &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://i.pinimg.com/originals/02/c5/13/02c5130828505d0365ca6afdb047c888.png"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.image-wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.wrapper-1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;#e66465&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#9198e5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* linear gradient example */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.wrapper-2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#e66465&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#9198e5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* linear gradient example */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The two listing above would produce the following two images:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bVuIrGqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thedukh.com/wp-content/uploads/2021/05/gradients1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bVuIrGqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thedukh.com/wp-content/uploads/2021/05/gradients1.png" alt="CSS Gradients Example - Using Two-Color Linear Gradients"&gt;&lt;/a&gt;CSS Gradients Example - Using Two-Color Linear Gradient&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;linear-gradient&lt;/code&gt; function used above consists of three basic parameters that define its behavior: angle, starting color, and ending color. In the first example (the basic two-color linear gradient) we omitted the angle so the style was automatically reverted to the default &lt;em&gt;top to bottom angle&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The second example actually has a set angle of 45 degrees, and it visually appears to be different than the first  - even though they use the same colors! We can set gradient angles using several different controls. For example, by using predefined keywords such as &lt;code&gt;to top&lt;/code&gt;, &lt;code&gt;to bottom&lt;/code&gt;, or even a corner such as &lt;code&gt;to bottom right&lt;/code&gt;. In each of these cases, the gradient would start from the top, from the bottom, or from the bottom-right corner of the element. &lt;/p&gt;

&lt;p&gt;In the second example above, using a precise angle, we used &lt;em&gt;degrees&lt;/em&gt; as the unit. &lt;code&gt;0deg&lt;/code&gt; would be equivalent to the to top command, and by increasing the degree value we would move the gradient clockwise around the circle. We can also use &lt;code&gt;rad&lt;/code&gt; (or radians), &lt;code&gt;turn&lt;/code&gt; (turns) or &lt;code&gt;grad&lt;/code&gt; (gradians). For more information about angles, please click &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/angle" rel="noreferrer noopener"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#multiple-color-stops"&gt;
  &lt;/a&gt;
  Multiple color stops
&lt;/h1&gt;

&lt;p&gt;Now let us take a look at this:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper-3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#e66465&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#9198e5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#12045b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#1afe49&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.wrapper-4&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;#e66465&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;#9198e5&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;#12045b&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;#1afe49&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which would produce the following (&lt;code&gt;.wrapper-3&lt;/code&gt; is the left image, while &lt;code&gt;.wrapper-4&lt;/code&gt; is the right image in the listing):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IDwUZ9fE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thedukh.com/wp-content/uploads/2021/05/gradients2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IDwUZ9fE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thedukh.com/wp-content/uploads/2021/05/gradients2.png" alt="CSS Gradients Example -Multi colored gradients"&gt;&lt;/a&gt;CSS Gradients Example -Multi colored gradients&lt;/p&gt;

&lt;p&gt;Above we defined gradients using more than two colors, each of which are called &lt;em&gt;color stops.&lt;/em&gt; The listing above has a gradient function that accepts four colors. New colors can be simply inserted by adding them to the &lt;code&gt;linear-gradient&lt;/code&gt; function. We can add any number of colors, separated by a comma, and the function will spread them evenly. We can additionally explicitly set the position of the color stops, and they do not need to be evenly spaced. Instead of percentages, we could also use pixels, ems, and any other length units.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#hard-stops-and-repeating-linear-gradients"&gt;
  &lt;/a&gt;
  Hard stops and repeating linear gradients
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper-5&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt; &lt;span class="m"&gt;33%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt; &lt;span class="m"&gt;33%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt; &lt;span class="m"&gt;66%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt; &lt;span class="m"&gt;66%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.wrapper-6&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;repeating-linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="no"&gt;blue&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="no"&gt;salmon&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="no"&gt;red&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="no"&gt;blue&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above inside the &lt;code&gt;.wrapper-5&lt;/code&gt; block we set the colors inside the &lt;code&gt;linear-gradient()&lt;/code&gt; function at the same position. This will have the effect of instant switch between colors, rather than a smooth transition.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KHHCgud5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thedukh.com/wp-content/uploads/2021/05/gradient3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KHHCgud5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thedukh.com/wp-content/uploads/2021/05/gradient3.png" alt="CSS Gradients - Linear gradient with a hard stop and repeating linear gradient"&gt;&lt;/a&gt;CSS Gradients - Linear gradient with a hard stop and repeating linear gradient&lt;/p&gt;

&lt;p&gt;We created the left image (having the appearance of the Italian flag) using hard stops. The right image is created using a new function - &lt;code&gt;repeating-linear-gradient()&lt;/code&gt; in which - wait for it - the pattern repeats, alternating between blue, salmon, and red colors.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#radial-and-repeating-radial-gradients"&gt;
  &lt;/a&gt;
  Radial and repeating radial gradients
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper-7&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.wrapper-8&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;repeating-radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nb"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="no"&gt;red&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="no"&gt;red&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="no"&gt;black&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="no"&gt;black&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Key6FKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thedukh.com/wp-content/uploads/2021/05/gradient4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Key6FKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thedukh.com/wp-content/uploads/2021/05/gradient4.png" alt="CSS Gradients - Radial and Repeating radial gradient"&gt;&lt;/a&gt;CSS Gradients - Radial and Repeating radial gradient&lt;/p&gt;

&lt;p&gt;We have created some really cool effects above, using a new type of gradient or the &lt;code&gt;radial-gradient&lt;/code&gt;. This type of gradients starts at a single point and proceeds outward in all directions. By default, it is centered, and transitions evenly to every corner. We can also change the appearance of the radial gradient, by specifying where the gradient should be centered, or by making the gradient a circle rather than an ellipse. On the right, we used the &lt;code&gt;repeating-radial-gradient()&lt;/code&gt; function in order to repeat the pattern in concentric rings.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h1&gt;

&lt;p&gt;Gradients can be a lot more expressive and complex and in this article, we only mentioned the basics of using them. For a more detailed explanation, you can visit the official developer documentation for&lt;code&gt;linear-gradient()&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient()" rel="noreferrer noopener"&gt;here&lt;/a&gt;, for &lt;code&gt;radial-gradient()&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/radial-gradient()" rel="noreferrer noopener"&gt;here&lt;/a&gt;, and from there you can start exploring the concepts more deeply.&lt;/p&gt;

&lt;p&gt;Here we have our codepen for this article:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/brachika/embed/bGqdOLo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Please check other blog posts on &lt;a href="http://thedukh.com" rel="noreferrer noopener"&gt;thedukh.com&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Why Regular Expressions Are Super Powerful, But A Terrible Coding Decision</title>
      <author>Joseph Maurer</author>
      <pubDate>Fri, 14 May 2021 20:40:33 +0000</pubDate>
      <link>https://dev.to/mwrpwr/why-regular-expressions-are-super-powerful-but-a-terrible-coding-decision-m8i</link>
      <guid>https://dev.to/mwrpwr/why-regular-expressions-are-super-powerful-but-a-terrible-coding-decision-m8i</guid>
      <description>&lt;p&gt;We’ve all been there. You have a string input and need a fast and efficient way to parse something important out of it. Your options are relatively low since manually parsing a string for a pattern is tedious and often very inefficient as the string gets larger. So what do you do? You turn to Regular Expressions! What’s the problem with that? Let’s explore.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Impossible To Read or Debug&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;A huge assumption that is made when creating regular expressions is that the schema you are programming to won’t change. If it does, it could require rewriting the regular expression to hopefully produce the same usable output. But let’s say you are tasked with fixing a broken regular expression that fell victim to a changing schema. It means that you would have to first understand how the regex worked with the old schema, before understanding how the new schema changed. Only then can you rewrite the regular expression to account for the new input. That’s a fairly tedious process that is potentially very error prone. And the level of difficulty goes up exponentially with the length and complexity of regular expressions. I would hate to be the only one in charge of fixing this&lt;a href="http://www.ex-parrot.com/~pdw/Mail-RFC822-Address.html"&gt; 6.2kb monster that validates RFC822 email addresses&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Regex Abuse&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;A common use case for regular expression is something like the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--egjwOHNr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/555/0%2AIS5fzV7OCtIXAwsR" class="article-body-image-wrapper"&gt;&lt;img alt="" src="https://res.cloudinary.com/practicaldev/image/fetch/s--egjwOHNr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/555/0%2AIS5fzV7OCtIXAwsR"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This regular expression tries to emulate a parser to rip out useful information into named capture groups from a structured data set like &lt;a href="https://www.json.org/json-en.html"&gt;json&lt;/a&gt;. The benefit of this is that (in c# at least) you then can have reference to exactly what the regular expression matched on.&lt;/p&gt;

&lt;p&gt;The downside of this is that you are using the wrong tool for the job. As much as it might seem like a quick and easy solution, it causes more problems than it solves. Parsing json, xml, or even html with regular expressions is a terrible idea. And it’s mostly a solved problem. &lt;a href="https://docs.python.org/3/library/html.parser.html"&gt;Check out this HTML Python Parser&lt;/a&gt;. Using a tool like this will make your coding easier and make code maintenance easier in the future.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Balancing Act&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;I know most of this article has been bashing the use of regular expressions, but there are some benefits to using them (if used correctly). &lt;strong&gt;All developers and engineers should learn to use basic regular expressions, because they’ll produce better, more flexible, more maintainable code with them.&lt;/strong&gt; When used responsibly, regular expressions are a huge net positive. For example, writing a regular expression to validate a phone number is relatively straightforward:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VJ0XiZSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/374/0%2AyClX3Avq7-2wvB3T" class="article-body-image-wrapper"&gt;&lt;img alt="" src="https://res.cloudinary.com/practicaldev/image/fetch/s--VJ0XiZSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/374/0%2AyClX3Avq7-2wvB3T"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Regular expressions are extremely powerful and useful in the right situation. When abused and used in incorrect situations, they can lead to ugly and unmaintainable code. So use them wisely!&lt;/p&gt;

&lt;p&gt;Comment below your opinion on Regular Expressions and if you use them regularly!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lz6JYuNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://medium.com/_/stat%3Fevent%3Dpost.clientViewed%26referrerSource%3Dfull_rss%26postId%3De4cd37fe957f" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lz6JYuNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://medium.com/_/stat%3Fevent%3Dpost.clientViewed%26referrerSource%3Dfull_rss%26postId%3De4cd37fe957f" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>watercooler</category>
      <category>development</category>
      <category>performance</category>
    </item>
    <item>
      <title>TypeScript enum guide: get started in 5 minutes</title>
      <author>Erin Schaffer</author>
      <pubDate>Fri, 14 May 2021 20:25:02 +0000</pubDate>
      <link>https://dev.to/educative/typescript-enum-guide-get-started-in-5-minutes-4447</link>
      <guid>https://dev.to/educative/typescript-enum-guide-get-started-in-5-minutes-4447</guid>
      <description>&lt;p&gt;Enumerations (or enums) are a supported data type in &lt;a href="https://www.educative.io/blog/typescript-tutorial"&gt;TypeScript&lt;/a&gt;. Enums are used in most object-oriented programming languages like Java and C# and are now available in TypeScript too. They are one of the few features of TypeScript which isn’t a type-level extension of JavaScript. Enums allow you to define a set of named constants. Using them makes it easier to document intent or create a set of distinct cases. Today, we’ll explore the basics of TypeScript enums along with use cases, various enum types, and next steps for your learning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We’ll cover&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#enum"&gt;What is enum in TypeScript?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why"&gt;Why use enums in TypeScript?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#alternatives"&gt;Enums vs. alternatives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#numeric"&gt;Numeric enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#string"&gt;String enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#heterogeneous"&gt;Heterogeneous enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reverse"&gt;Reverse mapping with enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#const"&gt;Const enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#computed"&gt;Computed enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#nextsteps"&gt;What to learn next&lt;/a&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-enum-in-typescript"&gt;
  &lt;/a&gt;
  What is enum in Typescript?
&lt;/h2&gt;

&lt;p&gt;TypeScript enums &lt;strong&gt;allow you to define a set of named constants&lt;/strong&gt;. Using them can make it easier to document intent or to create a set of distinct cases. Many programming languages, like C, C#, and Java, have an &lt;code&gt;enum&lt;/code&gt; data type, but JavaScript doesn’t. However, TypeScript does. &lt;strong&gt;TypeScript has both numeric and string-based enums&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;The syntax for enums is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum States {
    Oregon,
    Washington,
    Idaho,
    Montana,
    Wyoming
}

// usage 
var region = States.Washington;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before we look more closely at a few different enum types, let’s discuss the benefits of enums in TypeScript.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-use-enums-in-typescript"&gt;
  &lt;/a&gt;
  Why use enums in TypeScript?
&lt;/h2&gt;

&lt;p&gt;Enums are a great way to organize your code in TypeScript. Let’s look at some pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provides flexibility making it easier to express and document intentions and use cases&lt;/li&gt;
&lt;li&gt;Saves compile-time and runtime with inline code in JavaScript&lt;/li&gt;
&lt;li&gt;Allows for the creation of memory-efficient custom constants in JavaScript&lt;/li&gt;
&lt;li&gt;Etc.

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#enums-vs-alternatives"&gt;
  &lt;/a&gt;
  Enums vs. alternatives
&lt;/h2&gt;

&lt;p&gt;While there are many benefits of using TypeScript enums, there are some times you &lt;em&gt;shouldn’t&lt;/em&gt; use them, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Reassigning or changing enum member values&lt;/strong&gt;: enums are type-safe and would return compile errors on reassignment&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Recording dynamic values&lt;/strong&gt;: enums are suited for finite items and help to create a user-defined constants system&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Using variables&lt;/strong&gt;: enums can’t be used as variables and doing so would return errors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let’s dive deeper into some enum types.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#numeric-enums"&gt;
  &lt;/a&gt;
  Numeric enums
&lt;/h2&gt;

&lt;p&gt;Numeric enums &lt;strong&gt;store string values as numbers&lt;/strong&gt;. They can be defined using the &lt;code&gt;enum&lt;/code&gt; keyword. Let’s say you wanted to store a set of different types of cars. The following example shows a numeric enum in TypeScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum CarType {
    Honda,
    Toyota,
    Subaru,
    Hyundai
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The enum value &lt;code&gt;CarType&lt;/code&gt; has four values: Honda, Toyota, Subaru, and Hyundai. Enum values start from zero and increment by one for each member, which would look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Honda = 0
Toyota = 1
Subaru = 2
Hyundai = 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want, you can initialize the first numeric value yourself like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum CarType {
    Honda = 1,
    Toyota,
    Subaru,
    Hyundai
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we initialized the first member &lt;code&gt;Honda&lt;/code&gt; with the numeric value of one. The remaining numbers will be incremented by one.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: It’s not necessary to assign sequential values to your enum members. You can assign them any values you want.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#string-enums"&gt;
  &lt;/a&gt;
  String enums
&lt;/h2&gt;

&lt;p&gt;String enums are similar to numeric enums, but their &lt;strong&gt;enum values are initialized with string values instead of numeric values&lt;/strong&gt;. String enums have &lt;strong&gt;better readability&lt;/strong&gt; than numeric enums, making it easier to debug your programs. &lt;/p&gt;

&lt;p&gt;The following example uses the same info as the numeric enum example, but is represented as a string enum:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum CarType {
    Honda = "HONDA",
    Toyota = "TOYOTA",
    Subaru = "SUBARU",
    Hyundai = "HYUNDAI"
}
// Access String Enum
CarType.Toyota; //returns TOYOTA
CarType['Honda']; //returns HONDA
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example, we defined the string enum &lt;code&gt;CarType&lt;/code&gt; with the same values as the numeric enum, except the enum values are initialized as string literals. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: String enum values need to be individually initialized.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#heterogeneous-enums"&gt;
  &lt;/a&gt;
  Heterogeneous enums
&lt;/h2&gt;

&lt;p&gt;Heterogeneous enums &lt;strong&gt;contain both numeric and string values&lt;/strong&gt;. Here’s an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum BooleanHeterogeneousEnum {
    Yes = 0,
    No = "NO",
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reverse-mapping-with-enums"&gt;
  &lt;/a&gt;
  Reverse mapping with enums
&lt;/h2&gt;

&lt;p&gt;You know that num values can be retrieved using their corresponding enum member values. With reverse mapping, you can &lt;strong&gt;access the value of a member and a member name from its value&lt;/strong&gt;. Let’s look at an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum CarType {
    Honda = 1,
    Toyota,
    Subaru,
    Hyundai
}

CarType.Subaru; // returns 3
CarType["Subaru"]; // returns 3
CarType[3]; // returns Subaru
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;CarType[3]&lt;/code&gt; returns its member name “Subaru” because of reverse mapping. Let’s look at another example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum CarType {
    Honda = 1,
    Toyota,
    Subaru,
    Hyundai
}
console.log(CarType)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You would see the following output in your browser console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    '1': 'Honda',
    '2': 'Toyota',
    '3': 'Subaru',
    '4': 'Hyundai',
    Honda: 1,
    Toyota: 2,
    Subaru: 3,
    Hyundai: 4
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each value of the enum appears two times in the internally stored enum object. &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#const-enums"&gt;
  &lt;/a&gt;
  Const enums
&lt;/h2&gt;

&lt;p&gt;You can use const enums to improve the performance of your numeric enums. They are defined using the &lt;code&gt;const&lt;/code&gt; modifier:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const enum Enum {
    X = 1
    Y = X * 2,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unlike regular enums, const enums are completely removed during compilation. They can only use constant enum expressions and are inlined at use sites.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#computed-enums"&gt;
  &lt;/a&gt;
  Computed enums
&lt;/h2&gt;

&lt;p&gt;The value of an enum member can be a &lt;em&gt;constant value&lt;/em&gt; or a &lt;em&gt;computed value&lt;/em&gt;. The following example includes computed values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum CarType {
    Honda = 1,
    Toyota = getCarTypeCode('toyota'),
    Subaru = Toyota * 3,
    Hyundai = 10
}

function getCarTypeCode(carName: string): number {
    if (carName === 'toyota') {
        return 5;
    }
}

CarType.Toyota; // returns 5
CarType.Subaru; // returns 15
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the enum includes both computed and constant members, then uninitiated enum members either come first or after other initialized members with numeric constants. This next example will show an error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum CarType {
    Toyota = getCarTypeCode('toyota'),
    Honda, // Error: Enum member must have initializer
    Subaru,
    Hyundai = Toyota * 3,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can declare the above enum like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum CarType {
    Honda,
    Hyundai,
    Toyota = getCarTypeCode('toyota'),
    Subaru = Toyota * 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-learn-next"&gt;
  &lt;/a&gt;
  What to learn next
&lt;/h2&gt;

&lt;p&gt;TypeScript provides many advantages for client-side developers. It’s easier to pick up than some other alternatives because you can jump in with a JavaScript background. TypeScript enums make it easier to document intent or to create a distinct set of cases. &lt;/p&gt;

&lt;p&gt;Now that you know more about different TypeScript enums and their benefits, you’re ready to learn more about advanced TypeScript concepts. Some recommended topics to cover next are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Strict types&lt;/li&gt;
&lt;li&gt;Generic functions&lt;/li&gt;
&lt;li&gt;Mapped types&lt;/li&gt;
&lt;li&gt;And much more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get started learning these concepts, check out Educative’s text-based course, &lt;a href="https://www.educative.io/courses/advanced-typescript-masterclass"&gt;&lt;strong&gt;Advanced TypeScript Masterclass&lt;/strong&gt;&lt;/a&gt;. In this course, you’ll explore the advanced features of TypeScript with in-browser coding exercises. By the end, you’ll be more confident in your advanced TypeScript skills, and you’ll be ready to apply them to your next project.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continue-reading-about-typescript"&gt;
  &lt;/a&gt;
  Continue reading about TypeScript
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/typescript-tutorial"&gt;TypeScript Tutorial: A step-by-step guide to learn TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/advanced-typescript-concepts"&gt;Understanding Advanced Concepts in TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/top-50-typescript-interview-questions"&gt;Top 50 TypeScript Interview Questions Explained&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>typescript</category>
      <category>programming</category>
      <category>javascript</category>
      <category>computerscience</category>
    </item>
  </channel>
</rss>
