<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Object Oriented Programming in Java</title>
      <author>vindhya Hegde </author>
      <pubDate>Tue, 21 Sep 2021 14:55:25 +0000</pubDate>
      <link>https://dev.to/vindhyasadanand/object-oriented-programming-in-java-50ko</link>
      <guid>https://dev.to/vindhyasadanand/object-oriented-programming-in-java-50ko</guid>
      <description>&lt;p&gt;Object-oriented programming helps us with data security, code reusability, and also helps us to improve code readability.&lt;br&gt;
Let us see and Understand different Object-oriented concepts with code examples.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#1abstraction"&gt;
  &lt;/a&gt;
  1.Abstraction
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WtxvtX82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/736x/ca/ac/56/caac56b1013ed6b47bf4fa4ef72f34c8--real-life-things-to.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WtxvtX82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/736x/ca/ac/56/caac56b1013ed6b47bf4fa4ef72f34c8--real-life-things-to.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
-&amp;gt;Means showing only essential parts and hiding the implementation details.&lt;br&gt;
-&amp;gt;Only the functionality will be provided to the user,&lt;br&gt;
 in other words user will have the information on what the object &lt;br&gt;
 does instead how it does.&lt;br&gt;
-&amp;gt;Here we will be hiding the details of our class from the outside world.What happens within the class will not be known to the outside users.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;abstract class Car
{
    abstract void run();
}
class Baleno extends Car
{
    void run()
    {
        System.out.println("drive car safely");
    }
}
public class Main
{

    public static void main(String args[])
    {
       Car c = new Baleno();
       c.run();

    }

}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2encapsulation"&gt;
  &lt;/a&gt;
  2.Encapsulation
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tWQXT7a3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.expertphp.in/images/articles/ArtImgKPTPrr_OOP4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tWQXT7a3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.expertphp.in/images/articles/ArtImgKPTPrr_OOP4.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
-&amp;gt;Binding variables and methods under a single entity. &lt;br&gt;
-&amp;gt;Or It is a mechanism of wrapping the data(variables) and code acting on the data(methods) together in a single unit. Data (variables) present inside class can be accessed only through methods of the current class.Therefore it is also known as data hiding,&lt;br&gt;
 To achieve encapsulation in java&lt;br&gt;
 -&amp;gt;Declare the variables as private : if we declare variables as private then it will not be visible to the outside world. &lt;br&gt;
 -&amp;gt; If we want to access these private variables then,&lt;br&gt;
 Provide public setter and getter methods to modify and view the variables values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Student
{

    private String sname;

    public String getName()
    {
        return sname;
    }

    public void setName(String name)
    {
        sname = name;
    }

}

public class Main
{

    public static void main(String args[])
    {
        Student f1 = new Student();
        f1.setName("Vindhya");
        System.out.println(f1.getName());

    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#3inheritence"&gt;
  &lt;/a&gt;
  3.Inheritence
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ej3ryGYd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codestall.files.wordpress.com/2017/09/inheritance.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ej3ryGYd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codestall.files.wordpress.com/2017/09/inheritance.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
-&amp;gt;Acquiring properties of one class to another class.&lt;br&gt;
-&amp;gt;If we consider parent class and child class ,then child class &lt;br&gt;
  will acquire the Properties of Parent class.&lt;br&gt;
-&amp;gt;Parent class is also known as Base class and Super class.&lt;br&gt;
  Child class is also known as derived class and subclass.&lt;br&gt;
-&amp;gt;In general  children will acquire the properties of their parent &lt;br&gt;
  that is example for inheritance&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Base
{
   void method1()
   {
       System.out.println("Parent class");
   }   

}
class Derived extends Base
{
    void method2()
    {
        System.out.println("Child class");
    }
}
public class Main{
    public static void main(String args[])
    {
         Derived d = new Derived();
         d.method1();
         d.method2();
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#4polymorphism"&gt;
  &lt;/a&gt;
  4.Polymorphism
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6K-n5wXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/780/1%2AOPkH3mxC97uaMCldI6OGZg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6K-n5wXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/780/1%2AOPkH3mxC97uaMCldI6OGZg.jpeg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
-&amp;gt;The ability of an Object to take many forms&lt;br&gt;
-&amp;gt;Performing the same task in different ways.&lt;br&gt;
-&amp;gt;here task means method.Polymorphism is a combination of two &lt;br&gt;
  different words poly means many and morphs means forms. &lt;br&gt;
-&amp;gt;Finally polymorphism gives the meaning of many forms&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Multiply{
    static int multiply(int a,int b)
    {
        return a*b;
    }
    static double multiply(double a, double b)
    {
        return a*b;
    }
}

public class Main{

    public static void main(String args[])
    {
        System.out.println(Multiply.multiply(2,3));
        System.out.println(Multiply.multiply(1.1,2.1));

    }

}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank You&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Supabase/Postgres SQL Cheatsheet - Curated List of SQL</title>
      <author>Zernonia</author>
      <pubDate>Tue, 21 Sep 2021 14:48:36 +0000</pubDate>
      <link>https://dev.to/zernonia/supabase-postgres-sql-cheatsheet-curated-list-of-sql-62f</link>
      <guid>https://dev.to/zernonia/supabase-postgres-sql-cheatsheet-curated-list-of-sql-62f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hey"&gt;
  &lt;/a&gt;
  Hey!
&lt;/h2&gt;

&lt;p&gt;If you are  a &lt;strong&gt;PostgreSQL&lt;/strong&gt; user, you are missing out on Big Thing!!! You could spin up a Backend Server, with PostgreSQL as Database in just 2 minutes! How? That is using &lt;a href="https://supabase.io/"&gt;Supabase&lt;/a&gt;. Supabase has raised &lt;a href="https://techcrunch.com/2021/09/09/supabase-raises-30m-for-its-open-source-insta-backend/"&gt;30 million&lt;/a&gt; as an Open Source Backend-as-a-Service (BaaS) startup. Mind blown!!!! 🤯&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GwE2t0p---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://supabase.io/new/images/blog/2021-august/supabase-series-a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GwE2t0p---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://supabase.io/new/images/blog/2021-august/supabase-series-a.png" alt="Supabase raised 30 million"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#built-on-top-problem"&gt;
  &lt;/a&gt;
  Built on Top, problem?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2qRU9r2x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://supabase.io/new/images/blog/pg13/postgres-13-og.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2qRU9r2x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://supabase.io/new/images/blog/pg13/postgres-13-og.jpg" alt="Postgres 13 with Supabase"&gt;&lt;/a&gt;&lt;br&gt;
Supabase is indeed build on top of Postgres, and thus enabled developers to utilize all the awesome and stable &lt;a href="https://supabase.io/docs/guides/database/extensions"&gt;extension&lt;/a&gt;/scripts that has been around the industry for years! You agree with me... right? 😂&lt;/p&gt;

&lt;p&gt;Because of the continuous updates by Postgres (and I heard &lt;a href="https://www.postgresql.org/about/news/postgresql-14-beta-1-released-2213/"&gt;v14&lt;/a&gt; is drawing near!), many of the scripts on &lt;strong&gt;Stackoverflow&lt;/strong&gt; has outdated, and causes Supabase users, including &lt;em&gt;myself&lt;/em&gt; (which switch from Firebase - NoSQL) to encounter some problem when running SQL query. Thus, we need Postgres expert like &lt;strong&gt;you&lt;/strong&gt; to give Supabase a try, and join the Supabase community, &lt;a href="https://discord.com/invite/AYybku5cUz"&gt;Discord&lt;/a&gt; and most importantly make Open Source better! &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#solution-cheatsheets"&gt;
  &lt;/a&gt;
  Solution - Cheatsheets
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://supabase-sql.vercel.app"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x6qul7fG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://supabase-sql.vercel.app/og.png" alt="Supabase SQL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Due to the reason mentioned previously, I've curated some of the SQL scripts, to aid Supabase users, or Postgres users in finding the relevant, up-to-date, and tested SQL scripts. &lt;/p&gt;

&lt;p&gt;Where's the list, here it is!!!! -&amp;gt; &lt;a href="https://supabase-sql.vercel.app/"&gt;Supabase SQL&lt;/a&gt; 🎉🙌&lt;/p&gt;

&lt;p&gt;If you - find it useful, please spare a 🌟 at the &lt;a href="https://github.com/zernonia/supabase-sql"&gt;Github Repo&lt;/a&gt;&lt;br&gt;
If you - found any issue/bug, create &lt;code&gt;issues&lt;/code&gt; is much appreciated.&lt;br&gt;
If you - wanted to contribute the SQL scripts, PR is even more welcomed!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it
&lt;/h2&gt;

&lt;p&gt;That's all the good news I wanna share with you today. If you are a Supabase user, hope you'll like it. If you are a Postgres user, I hope you'll give &lt;a href="https://supabase.io"&gt;Supabase&lt;/a&gt; a try. If you are none of the above, then you are really missing out on &lt;strong&gt;GREAT&lt;/strong&gt; things! &lt;/p&gt;

&lt;p&gt;Until next time, bye! 👋&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#follow-me"&gt;
  &lt;/a&gt;
  Follow me
&lt;/h2&gt;

&lt;p&gt;🐤 Bird app - &lt;a href="https://twitter.com/zernonia"&gt;@zernonia&lt;/a&gt;&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--JqI6wApG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1419846185519513601/aIz1i1Oh_normal.jpg" alt="Zernonia profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Zernonia
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/zernonia"&gt;@zernonia&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Ask and you shall receive!&lt;br&gt;&lt;br&gt;Here comes the open-source &lt;a href="https://twitter.com/supabase"&gt;@supabase&lt;/a&gt; SQL! Welcome your PR and feedback!&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/wk1Bsp6fM1"&gt;supabase-sql.vercel.app&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/supabase"&gt;#supabase&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/sql"&gt;#sql&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/postgresql"&gt;#postgresql&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/opensource"&gt;#opensource&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/nuxt"&gt;#nuxt&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      07:30 AM - 17 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1438767175515271176" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1438767175515271176" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1438767175515271176" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>supabase</category>
      <category>postgres</category>
      <category>showdev</category>
      <category>vue</category>
    </item>
    <item>
      <title>Git Hotfix Branches : The Final Guide</title>
      <author>ZigRazor</author>
      <pubDate>Tue, 21 Sep 2021 14:19:27 +0000</pubDate>
      <link>https://dev.to/zigrazor/git-hotfix-branches-the-final-guide-1mll</link>
      <guid>https://dev.to/zigrazor/git-hotfix-branches-the-final-guide-1mll</guid>
      <description>&lt;p&gt;Hotfix branches are very much like release branches in that they are also meant to prepare for a new production release, albeit unplanned. They arise from the necessity to act immediately upon an undesired state of a live production version. When a critical bug in a production version must be resolved immediately, a hotfix branch may be branched off from the corresponding tag on the master branch that marks the production version.&lt;/p&gt;

&lt;p&gt;The essence is that work of team members (on the develop branch) can continue, while another person is preparing a quick production fix.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cGikoQYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g5q79ahvk2fntry4w42t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cGikoQYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g5q79ahvk2fntry4w42t.png" alt="hotfix branches"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-hotfix-branch"&gt;
  &lt;/a&gt;
  Creating the hotfix branch
&lt;/h2&gt;

&lt;p&gt;Hotfix branches are created from the master branch. For example, say version 1.2.1 is the current production release running live and causing troubles due to a severe bug. But changes on develop are yet unstable. We may then branch off a hotfix branch and start fixing the problem:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git checkout -b hotfix-1.2.1 master
Switched to a new branch "hotfix-1.2.1"
$ ./bump-version.sh
Files modified successfully, version bumped to 1.2.1.
$ git commit -s -a -m "Bumped version number to 1.2.1"
[hotfix-1.2.1 41e61bb] Bumped version number to 1.2.1
1 files changed, 1 insertions(+), 1 deletions(-)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to bump the version number after branching off! Again, the bumpversion. sh script will automatically determine the new version number starting from the branch name.&lt;br&gt;
Then, fix the bug and commit the fix in one or more separate commits.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git commit
[hotfix-1.2.1-2 abbe5d6] Fixed severe production problem
5 files changed, 32 insertions(+), 17 deletions(-)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#finishing-a-hotfix-branch"&gt;
  &lt;/a&gt;
  Finishing a hotfix branch
&lt;/h2&gt;

&lt;p&gt;When finished, the bugfix needs to be merged back into master , but also needs to be merged back into develop , in order to safeguard that the bugfix is included in the next release as well. This is completely similar to how release branches are finished.&lt;br&gt;
The one exception to the rule here is that, when a release branch currently exists, the hotfix changes need to be merged into that release branch, instead of develop .&lt;br&gt;
Back-merging the bugfix into the release branch will eventually result in the bugfix being merged into develop too, when the release branch is finished.(If work in develop immediately requires this bugfix and cannot wait for the release branch to be finished, you may safely merge the bugfix into develop now already as well.)&lt;/p&gt;

&lt;p&gt;Finally, remove the temporary branch:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git branch -d hotfix-1.2.1
Deleted branch hotfix-1.2.1 (was abbe5d6).
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;em&gt;For More "The Final Guide" see the &lt;a href="https://dev.to/zigrazor/the-final-guide-index-4954"&gt;Index Page&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>codenewbie</category>
      <category>tutorial</category>
      <category>git</category>
    </item>
    <item>
      <title>How to check if the mouse right button has been clicked?</title>
      <author>101samovar</author>
      <pubDate>Tue, 21 Sep 2021 14:12:09 +0000</pubDate>
      <link>https://dev.to/101samovar/how-to-check-if-the-mouse-right-button-has-been-clicked-ho9</link>
      <guid>https://dev.to/101samovar/how-to-check-if-the-mouse-right-button-has-been-clicked-ho9</guid>
      <description>&lt;p&gt;We have some site.&lt;br&gt;
Let’s click with the mouse right button.&lt;br&gt;
The default context menu pops up.&lt;br&gt;
We need to add an event listener to the “contextmenu” event.&lt;br&gt;
And we need to prevent the default behaviour of the context menu event.&lt;br&gt;
That’s all.&lt;br&gt;
Let’s click with the mouse right button.&lt;br&gt;
There’s no default context menu.&lt;br&gt;
Only our right button message.&lt;/p&gt;




&lt;p&gt;I hope you found this article useful, if you need any help please let me know in the comment section.&lt;/p&gt;

&lt;p&gt;👋 See you next time. Have a nice day!&lt;/p&gt;

&lt;p&gt;Subscribe to our channel:&lt;br&gt;
&lt;a href="https://www.youtube.com/c/Samovar101"&gt;https://www.youtube.com/c/Samovar101&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Wikis don't work for software documentation</title>
      <author>Nik Begley</author>
      <pubDate>Tue, 21 Sep 2021 13:57:03 +0000</pubDate>
      <link>https://dev.to/doctave/wikis-don-t-work-for-software-documentation-1ejk</link>
      <guid>https://dev.to/doctave/wikis-don-t-work-for-software-documentation-1ejk</guid>
      <description>&lt;p&gt;If your software documentation lives in a Wiki, it's very likely out of date and possibly actively harming your engineering team's productivity. This is a story that repeats in almost every organization - a tool like Confluence or Notion is selected as the "corporate knowledge base" of choice and  developers start documenting code in them. But time and again that documentation goes stale and eventually serves no other purpose than to &lt;a href="http://geek-and-poke.com/geekandpoke/2012/4/25/the-new-developer.html"&gt;confuse eager new hires&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-wikis-good-for"&gt;
  &lt;/a&gt;
  What are wikis good for?
&lt;/h2&gt;

&lt;p&gt;First, let's take a look at what wikis &lt;em&gt;do&lt;/em&gt; work for. They are used actively by millions of people every day and absolutely have good use cases.&lt;/p&gt;

&lt;p&gt;We'd list the following reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Trivially easy to add new content&lt;/li&gt;
&lt;li&gt;WYSIWYG editing allows non-technical users to collaborate&lt;/li&gt;
&lt;li&gt;Searchability and linking across pages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wikis are an accessible and easy to use way to write down information. At a click of a button you can create a new page and the powerful in-built editors make it easy to add graphs and style to your thoughts. Finally, once it's all written down, you can reference other pages and search across the whole knowledge base. Wikis are the lowest common denominator that can work in &lt;em&gt;most&lt;/em&gt; cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-cant-you-do-with-wikis"&gt;
  &lt;/a&gt;
  What can't you do with wikis?
&lt;/h2&gt;

&lt;p&gt;But let's look at what you &lt;em&gt;cannot&lt;/em&gt; do with wikis:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integrate documentation changes into code review&lt;/li&gt;
&lt;li&gt;Atomic changes to your docs and code&lt;/li&gt;
&lt;li&gt;Programmatically generate docs at build time&lt;/li&gt;
&lt;li&gt;Edit the documentation using your IDE/editor of choice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wouldn't you want to be able to see during code review that the relevant documentation has been updated along with the code? Maybe the committer included a link to the updated wiki page, but are the docs changes already live before the PR is merged? Or will they remember to go submit the changes in the wiki once the code goes live? What if your update only applies to v2.5 of your product but not the newest v3.1 release and the documentation needs an important update?&lt;/p&gt;

&lt;p&gt;None of these questions have clear answers when using a wiki and most likely will lead to the documentation simply never being written or maintained.&lt;/p&gt;

&lt;p&gt;As &lt;a href="https://twitter.com/rionam"&gt;Riona MacNamara&lt;/a&gt;, who worked on Google's internal documentation tooling, put it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Documentation will never be part of engineering culture until it is integrated into the codebase&lt;br&gt;
and workflow.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#a-better-tool-for-the-job"&gt;
  &lt;/a&gt;
  A better tool for the job
&lt;/h2&gt;

&lt;p&gt;We previously wrote about how &lt;a href="https://blog.doctave.com/2021/09/07/how-google-twitter-and-spotify-build-culture-of-documentation.html"&gt;Google, Twitter, and Spotify all built their own docs-as-code systems&lt;/a&gt; for managing internal technical documentation. They did not build wikis.&lt;/p&gt;

&lt;p&gt;Instead, they built systems that allowed documentation to live next to source code and get rendered into searchable pages in CI/CD. This practice is generally called "docs-as-code" and is not a new invention.&lt;/p&gt;

&lt;p&gt;What they all found was that allowing developers to update documentation as part of their regular workflow lowered the barrier to update docs and ultimately lead to better documented projects. Instead of having to step into a different system to make changes to the project docs, all they had to do was open a Markdown file and start writing. There was one way to document and it was optimized for developers.&lt;/p&gt;

&lt;p&gt;Removing friction leads to better documentation. We should be using better tools to remove all the friction we can.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tradeoffs"&gt;
  &lt;/a&gt;
  Trade-offs
&lt;/h2&gt;

&lt;p&gt;No solution is perfect, so let's take a moment to talk about the trade-offs of taking a docs-as-code approach.&lt;/p&gt;

&lt;p&gt;Firstly, using docs-as-code will make it more difficult for non-technical collaborators to edit documentation. That being said, for internal technical documentation the maintainers should be the engineers and technical writers. Also, GitHub allows editing directly in the browser, so everyone does not need to learn the correct &lt;code&gt;git&lt;/code&gt; incantations to contribute.&lt;/p&gt;

&lt;p&gt;Secondly, you have to think about search. If you use a documentation site generator to turn your Markdown docs into HTML sites, even if the toolchain builds a search index for the site, you will end up with N disconnected sites for N projects. &lt;a href="https://www.doctave.com"&gt;Doctave.com&lt;/a&gt; can help with this if you are using our open source &lt;a href="https://github.com/Doctave/doctave"&gt;documentation site generator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, your documentation will have to be limited to Markdown (or an equivalent format). Many would argue that this is a feature, not a limitation - forcing documentation to be in a simple format can make it easier to write and consume. Some tools will support useful "extensions" to Markdown. Our generator for example supports &lt;a href="https://mermaid-js.github.io/mermaid/#/"&gt;Mermaid JS&lt;/a&gt; diagrams, so that you can embed graphs and charts into your docs easily.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technology-options"&gt;
  &lt;/a&gt;
  Technology options
&lt;/h2&gt;

&lt;p&gt;Here's a quick list of some technology options if you want to look into docs-as-code.&lt;/p&gt;

&lt;p&gt;We are building &lt;a href="https://www.doctave.com"&gt;Doctave.com&lt;/a&gt; to be the best home for your technical documentation. If you want to do docs-as-code with a light-weight &lt;a href="https://https://github.com/Doctave/doctave"&gt;open source docs site generator&lt;/a&gt;, but host the docs in a centralized place that allows searching across all your projects, &lt;a href="https://www.doctave.com"&gt;check us out&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are also many open source generators out there that are worth mentioning: &lt;a href="https://www.mkdocs.org/"&gt;MkDocs&lt;/a&gt; and &lt;a href="https://docusaurus.io/"&gt;Docusaurus&lt;/a&gt; to name a couple popular ones. If you need something more customizable, &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; and &lt;a href="https://gohugo.io/"&gt;Hugo&lt;/a&gt; are good options. Generic static site generators however tend to add a lot of complexity so we'd recommend going for something more light-weight.&lt;/p&gt;

&lt;p&gt;In the end, the exact technology choice is less important. As long as it's not a wiki.&lt;/p&gt;

</description>
      <category>writing</category>
      <category>documentation</category>
      <category>agile</category>
    </item>
    <item>
      <title>React: Creating an HTML Class in JSX</title>
      <author>Randy Rivera</author>
      <pubDate>Tue, 21 Sep 2021 13:47:07 +0000</pubDate>
      <link>https://dev.to/rthefounding/react-creating-an-html-class-in-jsx-52ik</link>
      <guid>https://dev.to/rthefounding/react-creating-an-html-class-in-jsx-52ik</guid>
      <description>&lt;ul&gt;
&lt;li&gt;One difference in JSX is that you don't use the word class to define HTML classes. This is because class is a reserved word in JavaScript. Instead, JSX uses className. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;Also note that HTML attributes and event references in JSX become camelCase.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's Apply a class of &lt;code&gt;myDiv&lt;/code&gt; to the &lt;code&gt;div&lt;/code&gt; provided in the JSX code.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;JSX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'myDiv'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* &amp;lt;--- added a class of myDiv */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Add a class to this div&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#selfclosing"&gt;
  &lt;/a&gt;
  Self-closing
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;In JSX, it's little different, Any JSX element can be written with a self-closing tag, and every element must be closed. The line-break tag, for example, must always be written as  in order to be valid JSX that can be transpiled. A , on the other hand, can be written as  or . The difference is that in the first version there is no way to include anything in the . You will see in my later posts why that this syntax is useful when rendering React components.

&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>devops</category>
      <category>react</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to Remove Underlines From Links with CSS</title>
      <author>Coderslang: Become a Software Engineer</author>
      <pubDate>Tue, 21 Sep 2021 13:39:37 +0000</pubDate>
      <link>https://dev.to/coderslang/how-to-remove-underlines-from-links-with-css-42kk</link>
      <guid>https://dev.to/coderslang/how-to-remove-underlines-from-links-with-css-42kk</guid>
      <description>&lt;p&gt;You know how hyperlinks always come with an underline, right? And you want to get rid of it so you can add your style. Well, you can do it by using the &lt;code&gt;text-decoration&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;text-decoration&lt;/code&gt; is a CSS property that will specify how to decorate the text. Since the hyperlink by default has a decoration, all you have to do is remove the text-decoration from the link.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-example-code"&gt;
  &lt;/a&gt;
  An example code
&lt;/h2&gt;

&lt;p&gt;Let us take an example of how to remove underline with the &lt;code&gt;text-decoration&lt;/code&gt; property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Example&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Definitely not a clickbait&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As shown from the example code above, the &lt;code&gt;text-decoration: none;&lt;/code&gt; basically tells the CSS not to have any decoration on the hyperlink. That means the hyperlink no longer has an underline.&lt;/p&gt;

&lt;p&gt;And that is pretty much it. Quite simple, right?&lt;/p&gt;

&lt;p&gt;Get my &lt;a href="https://learn.coderslang.com/free-ebooks/"&gt;free e-book&lt;/a&gt; to prepare for the technical interview or start to &lt;a href="https://js.coderslang.com/"&gt;Learn Full-Stack JavaScript&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>css</category>
      <category>html</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>7 popular extensions from Microsoft Edge Addons</title>
      <author>nagachaitanyalokam</author>
      <pubDate>Tue, 21 Sep 2021 13:38:19 +0000</pubDate>
      <link>https://dev.to/naga_chaitanya_lokam/7-popular-extensions-from-microsoft-edge-addons-n0o</link>
      <guid>https://dev.to/naga_chaitanya_lokam/7-popular-extensions-from-microsoft-edge-addons-n0o</guid>
      <description>&lt;p&gt;Hello,&lt;/p&gt;

&lt;p&gt;Microsoft Edge is rapidly growing as a preferred browser, thanks to its &lt;a href="https://aka.ms/EdgePerformsbetter"&gt;low resource consumption&lt;/a&gt;,&lt;a href="http://aka.ms/EdgeMoreSecure"&gt;strong security&lt;/a&gt; and &lt;a href="https://aka.ms/EdgeFeatures"&gt;innovative features&lt;/a&gt;. With Microsoft Edge Add-ons, users can personalize and do more with their browser.&lt;/p&gt;

&lt;p&gt;In addition to organizing your research with collections, working efficiently with vertical tabs, and taking back control with tracking prevention, you can also personalize your Microsoft Edge browser by downloading add-ons or extensions. Add-ons can enhance your browser experience and boost your productivity. For example, you can personalize your browser with themes, organize your work with performance tools and much more.&lt;/p&gt;

&lt;p&gt;To help you get started, here is a list of 7 highly user rated extensions* on Microsoft Edge Add-ons website that can enhance your browsing experience:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-grammar-and-spell-checkerlanguagetool"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://aka.ms/GrammarandSpellChecker"&gt;Grammar and Spell Checker-LanguageTool&lt;/a&gt;:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8cDMqFv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnd0bqpk6a4vpbqqculg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8cDMqFv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnd0bqpk6a4vpbqqculg.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
This add-on will check your texts for spelling and grammar problems by sending it to &lt;a href="https://aka.ms/LanguageTool"&gt;LanguageTool.org&lt;/a&gt; over an encrypted connection.&lt;/p&gt;

&lt;p&gt;LanguageTool is compatible with almost all text, regardless of source, including social networks such as Twitter or LinkedIn and online e-mail services, such as Gmail. This grammar and spelling correction works across all variations of common language.&lt;/p&gt;

&lt;p&gt;LanguageTool also features a personal dictionary for exceptions or words that you might commonly use but that are not found in a conventional dictionary. LanguageTool will recognize these words in future grammar checking and proofreading. Furthermore, it supports more than 25 languages, including English, Spanish, French, German, Polish, and Russian. No account is needed to use this add-on.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-qr-code-generator"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://aka.ms/QRCodeGenerator"&gt;QR Code Generator&lt;/a&gt;:
&lt;/h4&gt;

&lt;p&gt;This simple add-on by &lt;a href="https://aka.ms/AwesomeExtensions"&gt;Awesome Extensions&lt;/a&gt; is a super handy QR Code Generator that converts your current page into QR Code with one click and generates QR Codes from free text, URLs. Features include scan, analyze, decode, and read QR codes.&lt;/p&gt;

&lt;p&gt;It also offers the option to download the QR code as an image and you can use this add-on offline too.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-tampermonkey"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://aka.ms/Tampermonkey"&gt;Tampermonkey&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KKaZJJ8b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8y3itk5yep4h44y0low.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KKaZJJ8b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8y3itk5yep4h44y0low.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aka.ms/Tampermonkey.net"&gt;Tampermonkey&lt;/a&gt; is the most popular Free User Script manager, with over 10 million weekly users.&lt;/p&gt;

&lt;p&gt;This add-on manages User Script, which can change the appearance and function of the website completely and make sure they’re operating on the right site.&lt;/p&gt;

&lt;p&gt;It also provides features like a clear overview over the running scripts, a built-in editor, ZIP-based import and export, automatic update checks, and cloud storage-based synchronization.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-enhancer-for-youtube"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://aka.ms/EnhancerforYouTube"&gt;Enhancer for YouTube&lt;/a&gt;:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FT-aPQgn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zunwiynhun9l15w7nkfm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FT-aPQgn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zunwiynhun9l15w7nkfm.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This add-on by &lt;a href="https://aka.ms/mrfdev"&gt;Maxime RF&lt;/a&gt; allows you to manage ads, control the playback speed and the volume level with the mouse wheel, automate repetitive tasks such as selecting the appropriate playback quality, and configure dozens of keyboard shortcuts to control on YouTube.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-infinity-new-tab-pro"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://aka.ms/InfinityNewTabPro"&gt;Infinity New Tab (Pro)&lt;/a&gt;:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mFPUJGzy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bocba5kjlcjjfobvbodv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mFPUJGzy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bocba5kjlcjjfobvbodv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Infinity New Tab Pro by &lt;a href="https://aka.ms/StarlabTechnology"&gt;Starlab Technology&lt;/a&gt; allows you to customize your New Tab page. This add-on changes your new tab experiences by offering options to add all your favorite sites. Additionally, you could add and check your To-Do list, notes and bookmarks.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-microsoft-editor-spelling-amp-grammar-checker"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://aka.ms/MicrosoftSpellingandGrammarChecker"&gt;Microsoft Editor: Spelling &amp;amp; Grammar Checker&lt;/a&gt;:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--houRWeSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1reafmw84eh40snlds8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--houRWeSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1reafmw84eh40snlds8.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Microsoft Editor: Spelling &amp;amp; Grammar Checker proofreads the content written by the user, for correct grammar, spelling, and punctuation.&lt;/p&gt;

&lt;p&gt;This add-on provides grammar, spelling, and style suggestions across multiple websites. The editor checks spellings in more than 80 languages and provides grammar checking and writing improvements in 20+ languages. It also provides Editor’s assistance in the Office apps. Just open Word or Outlook on the web and get suggestions to improve one’s documents and e-mail.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#7-dark-reader"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://aka.ms/DarkReader"&gt;Dark Reader&lt;/a&gt;:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qWngISmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d92eqbxxkudrhdhzkbvt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qWngISmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d92eqbxxkudrhdhzkbvt.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dark Reader Add-on by &lt;a href="https://aka.ms/darkreader.org"&gt;alexanderby&lt;/a&gt;, &lt;a href="https://aka.ms/Darkreader2.org"&gt;William Zijl&lt;/a&gt; enables night mode and creates dark themes for websites. &lt;/p&gt;

&lt;p&gt;It automatically inverts bright colors, making them high in contrast and removing the white light brightness. You can easily adjust brightness, contrast, sepia filter, dark mode, font settings and ignore-list. Dark Reader neither shows ads nor sends user data anywhere. &lt;/p&gt;

&lt;p&gt;I'd love to hear your experience and feedback using the above extensions. Please comment and let us know what other extensions would you like us to feature.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Automated Accessibility Testing</title>
      <author>Oliwia Połeć</author>
      <pubDate>Tue, 21 Sep 2021 13:24:48 +0000</pubDate>
      <link>https://dev.to/livechat/automated-accessibility-testing-2j8f</link>
      <guid>https://dev.to/livechat/automated-accessibility-testing-2j8f</guid>
      <description>&lt;p&gt;As described in our &lt;a href="https://developers.livechat.com/updates/all?category=accessibility"&gt;recent series of blog posts&lt;/a&gt;, our team has been working on improving the accessibility of the Chat Widget. While making the improvements, we wanted to maintain top-notch quality and ensure that while introducing new changes, there was no drop in standards. We use &lt;a href="https://www.cypress.io/"&gt;Cypress&lt;/a&gt; for all our automated testing, and so we decided to extend the existing testing suite by adding automated accessibility tests. In this article, I’d like to share with you what we’ve learned and how you can do this yourself!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SsFki3zd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u97qkhdsi091ux501l1z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SsFki3zd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u97qkhdsi091ux501l1z.png" alt="LiveChat Automated Accessibility Testing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-app-overview"&gt;
  &lt;/a&gt;
  Example app overview
&lt;/h2&gt;

&lt;p&gt;In order to make it easier for you to follow, I’ve created a simple app that allows the user to submit a dummy form. You can find the repository &lt;a href="https://github.com/klarzynskik/cypress-a11y-testing"&gt;here&lt;/a&gt;. Don’t worry, the data you submit in the app is not sent anywhere, so you can play around with it as much as you want.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_zNg5AgG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3om04alhld7x1kze0rn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_zNg5AgG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3om04alhld7x1kze0rn.png" alt="Simple form with two three inputs and two buttons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s created using the &lt;a href="https://reactjs.org/docs/create-a-new-react-app.html#create-react-app"&gt;Create React App&lt;/a&gt; scripts and using &lt;code&gt;yarn&lt;/code&gt; as a dependency manager (&lt;a href="https://classic.yarnpkg.com/en/docs/install/"&gt;installation instructions&lt;/a&gt;). After cloning the repository, all you need to do is install the dependencies by simply typing &lt;code&gt;yarn&lt;/code&gt; (or &lt;code&gt;npm install&lt;/code&gt; if you'll choose to do it without &lt;code&gt;yarn&lt;/code&gt;) in the console. Then, with &lt;code&gt;yarn start&lt;/code&gt; (or &lt;code&gt;npm start&lt;/code&gt;), you can run the app, and it will be available at &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;. Each step described in the article is reflected on the corresponding git branch.&lt;/p&gt;

&lt;p&gt;The repository also contains a simple integration test created with Cypress, located in the &lt;code&gt;functional.spec.js&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-cypressaxe-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;cypress-axe&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;In the previous article describing our &lt;a href="https://developers.livechat.com/updates/livechat-testing-chat-widget-accessibility"&gt;journey with accessibility testing&lt;/a&gt;, I mentioned the &lt;a href="https://www.deque.com/axe/browser-extensions/"&gt;axe DevTools&lt;/a&gt; browser extension. It allows the user to perform audits on the website, so that any accessibility issues can be discovered. This extension is based on the &lt;a href="https://github.com/dequelabs/axe-core"&gt;axe-core&lt;/a&gt; engine — a testing tool, validating against different types of rules and best practices.&lt;/p&gt;

&lt;p&gt;The same engine can be used with Cypress, thanks to the &lt;a href="https://github.com/component-driven/cypress-axe"&gt;cypress-axe&lt;/a&gt; package. It adds several custom commands to the Cypress API, which utilizes “axe-core” under the hood. It makes it possible to perform a11y audits directly while testing.&lt;/p&gt;

&lt;p&gt;Let’s, then, add the required dependencies to the project — we need the &lt;code&gt;cypress-axe&lt;/code&gt; and &lt;code&gt;axe-core&lt;/code&gt; (with the &lt;code&gt;--dev&lt;/code&gt; flag, so that these are added as developer dependencies):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add cypress-axe axe-core &lt;span class="nt"&gt;--dev&lt;/span&gt;
&lt;span class="c"&gt;# or&lt;/span&gt;
npm &lt;span class="nb"&gt;install &lt;/span&gt;cypress-axe axe-core &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we need to let Cypress know that we have extended the list of commands. Therefore, we should add the following import statement in &lt;code&gt;cypress/support/index.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;​​&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cypress-axe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great, with that in place, we can start using the library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-audits"&gt;
  &lt;/a&gt;
  Running audits
&lt;/h2&gt;

&lt;p&gt;The first command we’re going to use is &lt;code&gt;injectAxe&lt;/code&gt;. Basically, it inserts the &lt;code&gt;axe-core&lt;/code&gt; code into the application under test. Therefore, it needs to be run after the &lt;code&gt;visit&lt;/code&gt; call (and after each reload) to make sure the runtime is available on the website.&lt;/p&gt;

&lt;p&gt;Let’s create a separate &lt;code&gt;accessibility.spec.js&lt;/code&gt; test suite and utilize it in there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should not report any errors during the accessibility audit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;injectAxe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can run the tests now. To get more feedback while developing, we’ll run it in Cypress Test Runner with a full GUI. This can be done via the &lt;code&gt;open&lt;/code&gt; command (keep in mind to start the app earlier with &lt;code&gt;yarn start&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn run cypress open
&lt;span class="c"&gt;# or&lt;/span&gt;
npx cypress open
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in the runner, we select &lt;code&gt;accessibility.spec.js&lt;/code&gt; to run it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ppohk52Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uiq7g6wbvv0ujglfkr4c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ppohk52Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uiq7g6wbvv0ujglfkr4c.png" alt="Cypress GUI with two specs: accessibility and functional"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So far, so good — the test runs without any errors. After opening the developer tools and switching the console context to our app, we should have access to the &lt;code&gt;axe&lt;/code&gt; object, which indicates that it was indeed correctly injected:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BGqVb2rG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wc78l9ya1bv2t78uvqt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BGqVb2rG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wc78l9ya1bv2t78uvqt.png" alt="Cypress Test Runner with developers console opened and AXE object logged there"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s worth noting that the library also adds a &lt;code&gt;configureAxe&lt;/code&gt; command. This corresponds to &lt;code&gt;axe.configure&lt;/code&gt; from &lt;code&gt;axe-core&lt;/code&gt;, described &lt;a href="https://www.deque.com/axe/core-documentation/api-documentation/#api-name-axeconfigure"&gt;here&lt;/a&gt;. Using it is not needed in most cases but might be useful.&lt;/p&gt;

&lt;p&gt;We can now run the audit. This is done with the &lt;code&gt;checkA11y&lt;/code&gt; command. It can be run with the following parameters, all optional:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;context&lt;/code&gt; — a selector to a DOM element that should be analyzed.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;options&lt;/code&gt; — overrides for the global axe configuration whenever you want to set custom rules or checks for just that particular audit.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;violationCallback&lt;/code&gt; — custom handler for reported errors.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;skipFailures&lt;/code&gt; — allows you to prevent the test from failing on error and instead only log the error to the console.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s add it to the test and run it (on branch: &lt;code&gt;step-1&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should not report any errors during the accessibility audit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;injectAxe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checkA11y&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The app fails a test, informing the user about the violations. Upon clicking on each of the violations, the console logs more details, and the element causing the violation in each case is highlighted:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JTLp0HJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hs3pq78ph1du2i25tbgv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JTLp0HJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hs3pq78ph1du2i25tbgv.png" alt="Cypress Test Runner with failing accessibility audit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The log for each violation contains the following set of information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;command&lt;/code&gt; — informing us whether a violation is an error, warning, etc.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;id&lt;/code&gt; — identifier of the violated rule, for example, &lt;code&gt;button-name&lt;/code&gt; or &lt;code&gt;color-contrast.&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;impact&lt;/code&gt; — defining the severity of the violation.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tags&lt;/code&gt; — making it easier to identify which rulesets were violated (e.g., &lt;code&gt;wcag2a&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;description&lt;/code&gt; — brief details about the rule.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;help&lt;/code&gt; — information on how to fix the issue.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;helpurl&lt;/code&gt; — link to more details about the issue.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nodes&lt;/code&gt; — affected elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#fixing-the-bugs"&gt;
  &lt;/a&gt;
  Fixing the bugs
&lt;/h2&gt;

&lt;p&gt;In the example, we had three bugs reported. The first one was about the “clear the form” button missing “&lt;a href="https://dequeuniversity.com/rules/axe/4.3/button-name?application=axeAPI"&gt;discernible text&lt;/a&gt;.” As you can see, it’s an “icon button.” This means that screen reader users won’t be able to identify what it does! One way of fixing that is by adding an &lt;code&gt;aria-label&lt;/code&gt; attribute to the button.&lt;/p&gt;

&lt;p&gt;The second issue reported is informing us that the color contrast on the submit button is incorrect. Using “inspect” from the browser’s dev tools, indeed we can see that the contrast is 1.41, while &lt;a href="https://dequeuniversity.com/rules/axe/4.3/color-contrast"&gt;the rule&lt;/a&gt; requires at least 4.5 for smaller texts:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p5omWdvX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27p4562f5fpco7u7my0i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p5omWdvX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27p4562f5fpco7u7my0i.png" alt='Browser inspect on "Submit" button from the example app, showing the contrast being 1.41'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It can be easily fixed, for example by changing the text colors on the buttons to “black” instead of “white”:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---DlYK58_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1uvpi3a4nm9ag08yo6a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---DlYK58_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1uvpi3a4nm9ag08yo6a.png" alt='Browser inspect on "Submit" button from the example app, showing the contrast being 14.81'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last error is caused by the form input missing a label, and &lt;a href="https://dequeuniversity.com/rules/axe/4.3/label"&gt;each one of them should have it&lt;/a&gt; so that screen reader users can easily navigate around. This can be fixed by either setting a &lt;code&gt;for&lt;/code&gt; attribute to the &lt;code&gt;id&lt;/code&gt; of the given &lt;code&gt;input&lt;/code&gt; for the &lt;code&gt;label&lt;/code&gt;, or if a &lt;code&gt;label&lt;/code&gt; is not present, by adding a corresponding &lt;code&gt;aria-&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;Let’s apply all of the fixes (branch: &lt;code&gt;step-2&lt;/code&gt;) and re-run the tests:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sE-3yJaV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nu89cy935l2ywar07l40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sE-3yJaV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nu89cy935l2ywar07l40.png" alt="Cypress Test Runner with passing accessibility audit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nice! The app has passed the test, meaning that there were no accessibility violations found during the audit. With that test included in the pipeline, we can make sure we have not introduced any regressions in that area.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#audits-are-not-all-there-is"&gt;
  &lt;/a&gt;
  Audits are not all there is
&lt;/h2&gt;

&lt;p&gt;Audits are a powerful way of verifying accessibility violations; however, these are not always enough. The application might pass all of the automated audits, yet still not be accessible.&lt;/p&gt;

&lt;p&gt;One of the additional layers you can add to make sure you are building a good, accessible app, is to use  “accessible queries” for elements you interact with in the tests. In other words, you find elements by text, labels, roles, aria-attributes, etc., rather than using the IDs or data-test attributes. This applies to all layers of testing. There is a very useful project called &lt;a href="https://testing-library.com/"&gt;Testing Library&lt;/a&gt;, which provides you with UI-centric queries out of the box. It has a separate package for many different testing methods and libraries, including the Cypress one: &lt;a href="https://github.com/testing-library/cypress-testing-library"&gt;Cypress Testing Library&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the test we initially had in the repository (file: &lt;code&gt;functional.spec.js&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should allow submitting data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[id=name]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dummy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[id=last-name]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tester&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[id=books]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[type=submit]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thanks for submitting the form!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;be.visible&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It heavily relies on the IDs — these don’t matter much for the end-user since they rarely browse the web with the developer tools opened. They care much more about the labels we mentioned before, so let’s try to rewrite that test with that in mind.&lt;/p&gt;

&lt;p&gt;First, we need to install the dependency:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add @testing-library/cypress &lt;span class="nt"&gt;--dev&lt;/span&gt;
&lt;span class="c"&gt;# or&lt;/span&gt;
npm &lt;span class="nb"&gt;install&lt;/span&gt; @testing-library/cypress &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we add an appropriate import statement in &lt;code&gt;cypress/support/index.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;cypress&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s it — we can make use of all the &lt;a href="https://testing-library.com/docs/queries/about/"&gt;queries&lt;/a&gt;! Let’s apply that to the test (branch: &lt;code&gt;step-3&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should allow submitting data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Name:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dummy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Last Name:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tester&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Books&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Submit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thanks for submitting the form!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;be.visible&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running the test, it still passes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v04yg1Hi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vu0w1k74hu3ozpes0wjd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v04yg1Hi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vu0w1k74hu3ozpes0wjd.png" alt="Cypress Test Runner with passing test after introducing queries from Testing Library"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;findByLabelText&lt;/code&gt; command, we would have found the bug reported by the audit much sooner. Even if you were to decide not to use that package, referring to the &lt;a href="https://testing-library.com/docs/queries/about/#priority"&gt;priority&lt;/a&gt; of the queries description in the Testing Library docs would be beneficial for your users, and the quality of your tests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keyboard-navigation"&gt;
  &lt;/a&gt;
  Keyboard navigation
&lt;/h2&gt;

&lt;p&gt;Additionally, you can test the flow of your app for just keyboard navigation. A lot of users use just the keyboard to browse the web, and it’s important that the whole application flow can be completed without using the mouse. You can read more about its importance in the &lt;a href="https://developers.livechat.com/updates/livechat-accessibility-keyboard-navigation"&gt;“Keyboard navigation”&lt;/a&gt; article.&lt;/p&gt;

&lt;p&gt;The way Cypress is built does not allow simulating “real” user actions out of the box. All of the actions there are triggered via JavaScript. Usually, this is not a problem; however, in terms of keyboard navigation, it is — &lt;a href="https://docs.cypress.io/api/commands/type#Tabbing"&gt;we won’t be able to use a “Tab” key&lt;/a&gt;, which is necessary to simulate how the user would navigate around. Luckily, the &lt;a href="https://github.com/dmtrKovalenko/cypress-real-events"&gt;Cypress Real Events&lt;/a&gt; package comes in handy (or its alternatives, e.g. &lt;a href="https://github.com/Bkucera/cypress-plugin-tab"&gt;Cypress Plugin Tab&lt;/a&gt;). It uses the &lt;a href="https://chromedevtools.github.io/devtools-protocol/"&gt;Chrome DevTools Protocol&lt;/a&gt; (so it only works in Chrome) in order to fire actual system events. Still, it has its downsides, though — you won’t be able to interact with certain system elements like default selects. If you were to determine that this is an important part of your app, other testing frameworks might be necessary.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-simple-test-for-keyboard-navigation"&gt;
  &lt;/a&gt;
  Creating a simple test for keyboard navigation
&lt;/h2&gt;

&lt;p&gt;Let’s create a simple test for the keyboard flow. Let’s add the package to our project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add cypress-real-events &lt;span class="nt"&gt;--dev&lt;/span&gt;
&lt;span class="c"&gt;# or&lt;/span&gt;
npm &lt;span class="nb"&gt;install &lt;/span&gt;cypress-real-events &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, as previously, import it in the &lt;code&gt;cypress/support/index.js&lt;/code&gt; to let Cypress know about the new goodies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cypress-real-events/support&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we should have access to all of the additional &lt;a href="https://github.com/dmtrKovalenko/cypress-real-events#api"&gt;API commands&lt;/a&gt;. What interests us most are &lt;code&gt;realPress&lt;/code&gt; (for single key presses) and &lt;code&gt;realType&lt;/code&gt; (for typing).&lt;/p&gt;

&lt;p&gt;Let’s add another simple test case, then, in the &lt;code&gt;accesibility.spec.js&lt;/code&gt; suite. We must use only the keyboard to navigate around and fill in all of the inputs in the form.&lt;/p&gt;

&lt;p&gt;Based on the application overview, after visiting the page, the first &lt;code&gt;Tab&lt;/code&gt; stroke should focus us on the "Name" field within the form. Let’s check that, then, using both the &lt;code&gt;realPress&lt;/code&gt; command from &lt;code&gt;cypress-real-events&lt;/code&gt; and the &lt;code&gt;focused&lt;/code&gt; one (&lt;a href="https://docs.cypress.io/api/commands/focused"&gt;from Cypress&lt;/a&gt;). The latter is from the Cypress API and gets the currently focused DOM element. However, since Cypress wraps the Application Under Test (AUT) in its own, separate iframe, and the events are fired using the CDP, we would need an extra click somewhere in the AUT. This would make sure the events are correctly fired for the AUT and not the Cypress runner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should allow submitting with just keyboard&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dummy form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;be.visible&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;realClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;realPress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far so good. We would need an assertion to make sure that the focused element indeed has the “Name:” label. Let’s add a custom assertion for that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;assertFocusedInputLabel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expectedLabel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focused&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`label[for="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;"]`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;have.text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;expectedLabel&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let’s add that to the test, along with the typing action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should allow submitting with just keyboard&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dummy form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;be.visible&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;realClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;realPress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;assertFocusedInputLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Name:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;realType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dummy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, let’s run it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X7BYdr6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvmey3uvxjsjzwmdeg5s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X7BYdr6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvmey3uvxjsjzwmdeg5s.png" alt="Cypress Test Runner with passing test after introducing simple keyboard navigation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The test passes, hooray! We can now do the same for other form elements, and finally, submit a form using the &lt;code&gt;Enter&lt;/code&gt; key (branch: &lt;code&gt;step-4&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should allow submitting with just keyboard&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dummy form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;be.visible&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;realClick&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;realPress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tab&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;assertFocusedInputLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Name:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;realType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dummy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;realPress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tab&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;assertFocusedInputLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Last Name:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;realType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;realPress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tab&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;assertFocusedInputLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Books&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;realPress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Space&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;realPress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Thanks for submitting the form!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;be.visible&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s run the test and see how it does:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dUjKKyc3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wc3u2vnjigwcharbrjdh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dUjKKyc3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wc3u2vnjigwcharbrjdh.png" alt="Cypress Test Runner with failing test after introducing keyboard navigation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oh no, a failure! Upon investigation, it seems that someone has added a &lt;code&gt;tabindex=-1&lt;/code&gt; attribute to the “Last name” field. That attribute will make the element “not tabbable” and as a result hide it from keyboard users. Let’s remove it (branch: &lt;code&gt;step-5&lt;/code&gt;) and re-run the tests:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xm5jtz4---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpg92yao3its4fn34uvp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xm5jtz4---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpg92yao3its4fn34uvp.png" alt="Cypress Test Runner with passing test after introducing keyboard navigation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perfect, we can see that it would find a bug in such a case. As you can see, the audit has passed, as this attribute is not disallowed. This is why having an additional layer for that would be highly beneficial in the long run.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#static-analysis"&gt;
  &lt;/a&gt;
  Static analysis
&lt;/h2&gt;

&lt;p&gt;The other things — apart from automated tests — you can add to prevent accessibility mistakes, are accessible plugins for the linters. In the same way they let you know about missing semicolons, they can warn you whenever necessary attributes are missing, or any other violations are made.&lt;/p&gt;

&lt;p&gt;A good example of such a tool is the &lt;a href="https://marketplace.visualstudio.com/items?itemName=deque-systems.vscode-axe-linter"&gt;axe Accessibility Linter&lt;/a&gt; VS code plugin. With the same &lt;code&gt;axe-core&lt;/code&gt; rules engine, the plugin will inform you whenever an accessibility bug appears.&lt;/p&gt;

&lt;p&gt;The other example is an accessibility eslint plugin for JSX elements: &lt;a href="https://www.npmjs.com/package/eslint-plugin-jsx-a11y"&gt;eslint-plugin-jsx-a11y&lt;/a&gt;. Although it would not inform you about all of the errors, it would for sure prevent you from making the most basic mistakes. The eslint plugin has a big advantage over any editor plugins — it can be run as a &lt;a href="https://gist.github.com/estorgio/e8bcaa8e87d0fcdcf85fdf598956e34c"&gt;pre-commit hook&lt;/a&gt; or on the CI before the build process. Thanks to that, the verification can be forced within the project configuration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapup"&gt;
  &lt;/a&gt;
  Wrap-up
&lt;/h2&gt;

&lt;p&gt;Making our Chat Widget accessible has been really enlightening for us, in many areas. It was also hard work, requiring a lot of learning. We believe in the value automated tests bring, and since accessibility is one of our biggest priorities, we want to make sure that it’s being thoroughly tested. We hope that with this description of our test setup, you’ll try it yourself.&lt;/p&gt;

&lt;p&gt;Be sure to let us know if you have any questions!&lt;/p&gt;

</description>
      <category>testing</category>
      <category>showdev</category>
      <category>a11y</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Your front door to testing with Jest</title>
      <author>Lucas Bandeira</author>
      <pubDate>Tue, 21 Sep 2021 13:20:27 +0000</pubDate>
      <link>https://dev.to/lucasbandeiramj/your-front-door-to-testing-with-jest-2cl</link>
      <guid>https://dev.to/lucasbandeiramj/your-front-door-to-testing-with-jest-2cl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-testing"&gt;
  &lt;/a&gt;
  What is testing:
&lt;/h2&gt;

&lt;p&gt;Testing is, in short, to see if our code is executing properly, there is a number of ways to do so, but today we will be talking about automated tests.&lt;/p&gt;

&lt;p&gt;Automated tests are a software testing technique where we write pre-determined tests to check automatically if our code is running as expected.&lt;br&gt;
There are a number of benefits to writing automated tests, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Saves a lot of time as oposed of manual testing&lt;/li&gt;
&lt;li&gt;Is a reliable way to prevent bugs and issues as we write our code&lt;/li&gt;
&lt;li&gt;Monitors the functionality of our code to see if any alterations we make breaks the app, before sending it to production&lt;/li&gt;
&lt;li&gt;Overall improves our coding skill&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are diferent types of testing, like:&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#end-to-end"&gt;
  &lt;/a&gt;
  End to end:
&lt;/h4&gt;

&lt;p&gt;Tests the entire aplication by clicking on links and navigating through the page as a user would interact with the app.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#integration"&gt;
  &lt;/a&gt;
  Integration:
&lt;/h4&gt;

&lt;p&gt;Verifies if multiple units of our code are working together as they should and returning the wanted outcome.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#unit"&gt;
  &lt;/a&gt;
  Unit:
&lt;/h4&gt;

&lt;p&gt;Verifies if individual, isolated units of our code (a Class or a function) are working.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#static"&gt;
  &lt;/a&gt;
  Static:
&lt;/h4&gt;

&lt;p&gt;Catches typos or type errors as we are writing the code.&lt;/p&gt;

&lt;p&gt;Today we will be focusing on unit testing.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-unit-testing"&gt;
  &lt;/a&gt;
  What is unit testing:
&lt;/h2&gt;

&lt;p&gt;Unit testing is to verify if individual parts of our code work as expected, such as methods returning a specified outcome if we pass specific parameters to it. They should be short isolated tests to check if there is any error in the functions that compose our app, and for that, today we will be introducing Jest.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-jest"&gt;
  &lt;/a&gt;
  What is Jest
&lt;/h2&gt;

&lt;p&gt;Jest describes itself as "a delightful JavaScript Testing Framework with a focus on simplicity", it was created by Christoph Nakazawa and is maintained by Facebook. It can be used to test code in projects that use: Babel, TypeScript, Node, React, Angular, Vue and more.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installing-jest"&gt;
  &lt;/a&gt;
  Installing Jest
&lt;/h2&gt;

&lt;p&gt;We can Install Jest by initiating a project with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to generate our package.json file. Then, we can add jest to our project with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;jest&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are saving it as a dev dependency because we will be running our tests in development, before we send our app into production.&lt;/p&gt;

&lt;p&gt;Next, we should go into our generated package.json file and write our scripts for testing, like so&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, when we run this code with &lt;code&gt;npm run test&lt;/code&gt;, jest will automatically search our project for our test files and execute the tests we've written.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-our-test-file"&gt;
  &lt;/a&gt;
  Creating our test file:
&lt;/h3&gt;

&lt;p&gt;Our test file should be named after the file we're trying to test, with the extension of ".test.js" or ".spec.js", these extensions are what Jest will look for in order to execute our tests, so, as an example, if we're trying to test a file called "hello.js", we should create a testing script called "hello.test.js".&lt;/p&gt;

&lt;p&gt;Lets create our "hello.js" file, which will contain the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// hello.js&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will be using this syntax for exporting because jest doesn't natively support ES6+ exporting, it is possible to use, but would require some extra configuration.&lt;/p&gt;

&lt;p&gt;Now, we will create our test file by importing the method we're trying to test, then we will create our test using Jest's global functions "test" or "it", which takes two parameters, the first is a string which contains a brief description of the test we're trying to execute, and the second is a callback function containing the actual test.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// hello.test.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should say hello to the full name passed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello John Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can run this code by typing &lt;code&gt;npm run jest&lt;/code&gt; in our terminal, and we can see our first test running successfully.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--chM6ZWic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8jn5pci9tpzw42dpbm3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--chM6ZWic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8jn5pci9tpzw42dpbm3.png" alt="Passing test"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And thats it! We've just written our first unit test, so lets go back and take a look at what we just did in greater detail.&lt;/p&gt;

&lt;p&gt;In this test we are using what is called a "triple A" pattern which stands for:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arrange"&gt;
  &lt;/a&gt;
  Arrange:
&lt;/h3&gt;

&lt;p&gt;To prepare what will be needed in order to execute our test&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#act"&gt;
  &lt;/a&gt;
  Act
&lt;/h3&gt;

&lt;p&gt;To call the method we're trying to test with the information we've already arranged&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#assert"&gt;
  &lt;/a&gt;
  Assert
&lt;/h3&gt;

&lt;p&gt;To determine what is the expected outcome and if the function we've acted upon is executing properly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello John Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first two steps are easy to follow, but let's take another look at step three and explain what is going on.&lt;/p&gt;

&lt;p&gt;Here, we are calling another one of Jest's functions, "expect", and that gives us access to what jest calls "matchers", which are methods that are used to see if our result meets the requirements of our test. They are pretty self explanatory, so in this example we want our result .toBe("Hello John Doe"). &lt;/p&gt;

&lt;p&gt;For a more in depth look into Jest Expect method and its Matchers we can access this link: &lt;a href="https://jestjs.io/docs/expect"&gt;Expect . Jest&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it for our introduction about unit testing with Jest, if you want to expand your knowledge about testing and what Jest is capable of, here are some links that I used as learning material:&lt;br&gt;
&lt;a href="https://jestjs.io/docs/getting-started"&gt;Getting Started . Jest&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=r9HdJ8P6GQI"&gt;JavaScript Testing Introduction Tutorial - Unit Tests, Integration Tests &amp;amp; e2e Tests&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=ajiAl5UNzBU"&gt;Jest Crash Course&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next time we will take a deeper dive at Jest's capabilities by writting some tests to a faulty app.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>jest</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to create a documentation site &amp; GitHub Page using Docz with NextJs and Typescript</title>
      <author>Muhammad Ali (Nerdjfpb)</author>
      <pubDate>Tue, 21 Sep 2021 13:12:26 +0000</pubDate>
      <link>https://dev.to/nerdjfpb/how-to-create-a-documentation-site-github-page-using-docz-with-nextjs-and-typescript-n37</link>
      <guid>https://dev.to/nerdjfpb/how-to-create-a-documentation-site-github-page-using-docz-with-nextjs-and-typescript-n37</guid>
      <description>&lt;h1&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h1&gt;

&lt;p&gt;Making good documentation can help understand a project better. It also saves much time! Creating good documentation and showcasing is a tedious task for big projects. In this blog, we will be going over how to maintain documentation for big projects. We chose Docz for the documentation. Read the rest of the blog to find out why!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;React JS basics&lt;/li&gt;
&lt;li&gt;Typescript basics&lt;/li&gt;
&lt;li&gt;Github basics&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#project-technical-needs"&gt;
  &lt;/a&gt;
  Project Technical Needs
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Node JS - &lt;a href="https://nodejs.org/en/"&gt;https://nodejs.org/en/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Visual Studio Code - &lt;a href="https://code.visualstudio.com/"&gt;https://code.visualstudio.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Github account - &lt;a href="https://github.com/"&gt;https://github.com/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#why-chose-docz-for-all-your-software-documentation-needs"&gt;
  &lt;/a&gt;
  Why Chose Docz for All Your Software Documentation Needs
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;It’s powered by Gatsby, so easy to change themes, and we can give a great look to our documentation.&lt;/li&gt;
&lt;li&gt;There is no complex configuration in Docz, it is very straightforward.&lt;/li&gt;
&lt;li&gt;MDX is getting popular and widely used nowadays. In Docz, we have the power to write MDX.&lt;/li&gt;
&lt;li&gt;Finally, the typescript support is available in Docz. Typescript helps a project to maintain easily, and with Docz integration, it becomes super easy to make documentation. Try the blog for more information.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#how-to-start-initializing-the-nextjs-with-typescript"&gt;
  &lt;/a&gt;
  How to start (initializing the nextjs with typescript)
&lt;/h1&gt;

&lt;p&gt;Initializing a project is super easy. Thanks to nextjs team for this. They already have a typescript boilerplate which will help us to start this quickly. Try&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-next-app --ts nextdoczts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-next-app --typescript nextdoczts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Want to find out the rest? Follow the link - &lt;a href="https://aviyel.com/post/824/how-to-create-a-documentation-site-github-page-using-docz-with-nextjs-and-typescript"&gt;https://aviyel.com/post/824/how-to-create-a-documentation-site-github-page-using-docz-with-nextjs-and-typescript&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>typescript</category>
      <category>github</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Top 11 distributed tracing tools in 2021</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Tue, 21 Sep 2021 13:12:24 +0000</pubDate>
      <link>https://dev.to/signoz/top-11-distributed-tracing-tools-in-2021-54km</link>
      <guid>https://dev.to/signoz/top-11-distributed-tracing-tools-in-2021-54km</guid>
      <description>&lt;p&gt;Choosing the right distributed tracing tool is critical. How do you know which is the right one for you? Here are the top 11 distributed tracing tools that can solve your monitoring and observability needs.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is a distributed tracing tool?&lt;br&gt;&lt;br&gt;
A distributed tracing tool enables you to track user requests across multiple servers and services in a microservice architecture. It gives you a central overview of how user requests are performing in different services.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Distributed tracing tools have become a critical component in a distributed and microservices-based architecture.&lt;/p&gt;

&lt;p&gt;So why is distributed software so popular?&lt;/p&gt;

&lt;p&gt;There are three major reasons for the popularity of distributed software: scalability, reliability, and maintainability.&lt;/p&gt;

&lt;p&gt;But it also comes with its own challenges. Distributed software becomes complex with scale, and no single team can fully comprehend how all services interact. Although engineering teams own single services, they become implicitly responsible for many services.&lt;/p&gt;

&lt;p&gt;A single user request can travel through hundreds or thousands of microservices. So to quickly identify where things are going wrong, you need a central overview of how requests are performing across services.&lt;/p&gt;

&lt;p&gt;Distributed tracing tools capture user requests as they travel through every service and measure things like latency.&lt;/p&gt;

&lt;p&gt;A great distributed tracing tool can improve your team's response to performance issues, thereby improving the end-user experience.&lt;/p&gt;

&lt;p&gt;Here's the list of the top 11 distributed tracing tools we will be looking at in this article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#signoz"&gt;SigNoz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#jaeger"&gt;Jaeger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#zipkin"&gt;Zipkin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dynatrace"&gt;Dynatrace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#new-relic"&gt;New Relic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#honeycomb"&gt;Honeycomb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lightstep"&gt;Lightstep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#instana"&gt;Instana&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#datadog"&gt;DataDog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#elastic-apm"&gt;Elastic APM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#splunk"&gt;Splunk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before we deep dive into each of these distributed tracing tools, let's take a short detour to understand distributed tracing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-distributed-tracing"&gt;
  &lt;/a&gt;
  What is distributed tracing?
&lt;/h2&gt;

&lt;p&gt;In the world of microservices, a user request travels through hundreds of services before serving a user what they need. To make a business scalable, engineering teams are responsible for particular services with no insight into how the system performs as a whole. And that's where distributed tracing comes into the picture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G8Vee_gt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/jaeger_vs_zipkin_microservices_architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G8Vee_gt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/jaeger_vs_zipkin_microservices_architecture.png" alt="Microservices architecture"&gt;&lt;/a&gt;Microservice architecture of a fictional e-commerce application&lt;/p&gt;

&lt;p&gt;Distributed tracing gives you insight into how a particular service is performing as part of the whole in a distributed software system. There are two essential concepts involved in distributed tracing: &lt;strong&gt;Spans&lt;/strong&gt; and &lt;strong&gt;trace context&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;User requests are broken down into spans.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are spans?&lt;br&gt;&lt;br&gt;
Spans represent a single operation within a trace. Thus, it represents work done by a single service which can be broken down further depending on the use case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A &lt;strong&gt;trace context&lt;/strong&gt; is passed along when requests travel between services, which tracks a user request across services. Thus, you can see how a user request performs across services and identify what exactly needs your attention without manually shifting through multiple dashboards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXTMH1wS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/opentelemetry_distributed_tracing-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXTMH1wS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/opentelemetry_distributed_tracing-min.png" alt="Trace context is passed to track user requests across services"&gt;&lt;/a&gt;A trace context is passed when user requests pass from one service to another&lt;/p&gt;

&lt;p&gt;Below is a snapshot from SigNoz dashboard showing spans from a request as rectangular blocks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_dvN4DCv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/spans_traces-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_dvN4DCv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/spans_traces-min.jpg" alt="SigNoz dashboard showing spans from a request"&gt;&lt;/a&gt;Spans representing logical operations within a trace as rectangular blocks (Source: SigNoz dashboard)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-11-distributed-tracing-tools"&gt;
  &lt;/a&gt;
  Top 11 distributed tracing tools
&lt;/h2&gt;

&lt;p&gt;Now let's explore the top 11 distributed tracing tools in 2021.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#signoz"&gt;
  &lt;/a&gt;
  SigNoz
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt; is a full-stack open-source APM and observability tool. It captures both metrics and traces with log management currently in the product roadmap. Logs, metrics, and traces are considered to be the three pillars of observability in modern-day distributed systems.&lt;/p&gt;

&lt;p&gt;SigNoz provides a unified UI for metrics and traces so that there is no need to switch between different tools like Jaeger and Prometheus.&lt;/p&gt;

&lt;p&gt;Using SigNoz, you can track things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User requests per second&lt;/li&gt;
&lt;li&gt;50th, 90th, and 99th percentile latencies of microservices in your application&lt;/li&gt;
&lt;li&gt;Error rate of requests to your services&lt;/li&gt;
&lt;li&gt;Slow endpoints in your application&lt;/li&gt;
&lt;li&gt;User requests across different microservices using distributed tracing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An open-source tool with the capabilities of SaaS vendors, SigNoz is a great choice for a distributed tracing tool.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" alt="Architecture of SigNoz with OpenTelemetry and ClickHouse"&gt;&lt;/a&gt;Architecture of SigNoz with ClickHouse as storage backend and OpenTelemetry for code instrumentatiion&lt;/p&gt;

&lt;p&gt;SigNoz uses OpenTelemetry for code instrumentation. OpenTelemetry provides vendor-agnostic instrumentation libraries and is quietly becoming the world standard for generating and managing telemetry data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" alt="SigNoz UI showing the popular RED metrics"&gt;&lt;/a&gt;SigNoz UI showing application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/p&gt;

&lt;p&gt;You can also use flamegraphs to visualize spans from your trace data. All of this comes out of the box with SigNoz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" alt=""&gt;&lt;/a&gt;Flamegraphs showing exact duration taken by each spans - a concept of distributed tracing&lt;/p&gt;

&lt;p&gt;Gantt charts make it easy to visualize your services and events in a parent-child relationship tree. You can easily figure out which events are causing latency in a request call.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ItU4B-3C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/signoz_gantt_chart-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ItU4B-3C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/signoz_gantt_chart-min.png" alt="Gantt charts on SigNoz dashboard"&gt;&lt;/a&gt;Gantt charts on SigNoz dashboard to visualize your spans in a parent-child relationship&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jaeger"&gt;
  &lt;/a&gt;
  Jaeger
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.jaegertracing.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;Jaeger&lt;/b&gt;&lt;/a&gt; is an open-source APM tool developed at Uber, later donated to Cloud Native Computing Foundation(CNCF). Inspired by Google's Dapper, Jaeger is a distributed tracing system.&lt;/p&gt;

&lt;p&gt;It is used for monitoring and troubleshooting microservices-based distributed systems. Some of its key features include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Distributed context propagation&lt;/li&gt;
&lt;li&gt;Distributed transaction monitoring&lt;/li&gt;
&lt;li&gt;Root cause analysis&lt;/li&gt;
&lt;li&gt;Service dependency analysis&lt;/li&gt;
&lt;li&gt;Performance / latency optimization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sPD4rjIu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/Jaeger_architecture-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sPD4rjIu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/Jaeger_architecture-min.jpg" alt="Jaeger Architecture"&gt;&lt;/a&gt;Architecture of Jaeger&lt;/p&gt;

&lt;p&gt;Jaeger supports two popular open-source NoSQL databases as trace storage backends: Cassandra and Elasticsearch. Jaeger's UI can be used to see individual traces. You can also filter the traces based on service, duration, and tags.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PBiBbLYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/jaeger_ui-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PBiBbLYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/jaeger_ui-min.png" alt="Jaeger UI"&gt;&lt;/a&gt;Jaeger UI showing services and corresponding traces&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zipkin"&gt;
  &lt;/a&gt;
  Zipkin
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://zipkin.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;Zipkin&lt;/b&gt;&lt;/a&gt; is an open-source APM tool used for distributed tracing. Zipkin captures timing data need to troubleshoot latency problems in service architectures.&lt;/p&gt;

&lt;p&gt;Zipikin was initially developed at Twitter and drew inspiration from Google's Dapper. Unique identifiers called Trace ID are attached to each request which then identifies that request across services.&lt;/p&gt;

&lt;p&gt;Zipkin's architecture includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reporters to send data to Zipkin&lt;/li&gt;
&lt;li&gt;Collectors which persist trace data to storage&lt;/li&gt;
&lt;li&gt;API to query data&lt;/li&gt;
&lt;li&gt;UI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
    alt="Zipkin architecture"&lt;br&gt;
    height={500}&lt;br&gt;
    src="/img/blog/2021/09/zipkin_architecture-min.jpg"&lt;br&gt;
    title="Zipkin architecture (Source: Zipkin website)"&lt;br&gt;
    width={700}&lt;br&gt;
/&amp;gt;&lt;/p&gt;

&lt;p&gt;Zipkin's in-built UI is limited, and you can use Grafana or Kibana from the ELK stack for better analytics and visualizations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nmkD1fSP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/07/Zipkin_ui-min_o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nmkD1fSP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/07/Zipkin_ui-min_o.png" alt="Zipkin UI"&gt;&lt;/a&gt;Zipkin UI (Source: Zipkin's GitHub repo)&lt;/p&gt;

&lt;p&gt;It also includes a dependency diagram that shows how many user requests went through each service. It can help you to identify error paths and calls to deprecated services.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Do5OAgEx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/07/zipkin_dependency_diagram-min_o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Do5OAgEx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/07/zipkin_dependency_diagram-min_o.png" alt="Zipkin dependency diagram"&gt;&lt;/a&gt;Zipkin dependency diagram (Source: GitHub repo)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dynatrace"&gt;
  &lt;/a&gt;
  Dynatrace
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.dynatrace.com/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;Dynatrace&lt;/b&gt;&lt;/a&gt; is an extensive SaaS enterprise tool targeting a broad spectrum of monitoring needs of large-scale enterprises. For distributed tracing, it provides a technology called &lt;a href="https://www.dynatrace.com/platform/purepath/"&gt;Purepath&lt;/a&gt;, which combines distributed tracing with code-level insights. When a user initiates a transaction with the application, PurePath gives the transaction a unique ID.&lt;/p&gt;

&lt;p&gt;Some of the key features provided by the Dynatrace distributed tracing tool includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Automatic injection and collection of data&lt;/li&gt;
&lt;li&gt;Code-level visibility across all application tiers for web and mobile apps together&lt;/li&gt;
&lt;li&gt;Always-on code profiling and diagnostics tools for application analysis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WQuCCJYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/dynatrace_purepath-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WQuCCJYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/dynatrace_purepath-min.jpg" alt="Dynatrace distributed tracing dashboard"&gt;&lt;/a&gt;Distributed tracing by PurePath technology (Source: Dynatrace website)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gtzYTm1v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/dynatrace_purepath_code_level-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gtzYTm1v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/dynatrace_purepath_code_level-min.jpg" alt="Code-level insights with Dynatrace PurePath technology"&gt;&lt;/a&gt;Code-level insights shown on Dynatrace dashboard (Source: Dynatrace website)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-relic"&gt;
  &lt;/a&gt;
  New Relic
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://newrelic.com/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;New Relic&lt;/b&gt;&lt;/a&gt; is one of the oldest companies in the application performance monitoring domain. It offers multiple solutions to enterprises for performance monitoring. For distributed tracing, it offers New Relic Edge, which can observe 100% of an application's traces.&lt;/p&gt;

&lt;p&gt;Some of the key features of the New Relic distributed tracing tool includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Distributed tracing and sampling options for a wide range of technology stack&lt;/li&gt;
&lt;li&gt;Support for open-source tracing tools and standards like OpenTelemetry&lt;/li&gt;
&lt;li&gt;Correlation of tracing data with other aspects of application infrastructure and user monitoring&lt;/li&gt;
&lt;li&gt;Fully managed cloud-native experience with on-demand scalability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BIlJBwqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/new_relic_distributed_tracing-min_2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BIlJBwqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/new_relic_distributed_tracing-min_2.jpg" alt="New Relic distributed tracing dashboard"&gt;&lt;/a&gt;New Relic distributed tracing dashboard (Source: New Relic website)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#honeycomb"&gt;
  &lt;/a&gt;
  Honeycomb
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.honeycomb.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;Honeycomb&lt;/b&gt;&lt;/a&gt; is a full-stack cloud-based observability tool with support for events, logs, and traces. Honeycomb provides an easy-to-use distributed tracing solution.&lt;/p&gt;

&lt;p&gt;Some of the key features of the Honeycomb distributed tracing tool includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quickly diagnose bottlenecks and optimize performance with a waterfall view to understand how your system is processing service requests&lt;/li&gt;
&lt;li&gt;Full-text search over trace spans and toggle to collapse and expand sections of trace waterfalls&lt;/li&gt;
&lt;li&gt;Provides Honeycomb beelines to automatically define key pieces of trace data like serviceName, name, timestamp, duration, traceID, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BedXJ_5J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/honeycomb_tracing_dashboard-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BedXJ_5J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/honeycomb_tracing_dashboard-min.jpg" alt="Honeycomb tracing dashboard (Source: Honeycomb website)"&gt;&lt;/a&gt;Honeycomb distributed tracing dashboard (Source: Honeycomb website)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lightstep"&gt;
  &lt;/a&gt;
  Lightstep
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://lightstep.com/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;Lightstep&lt;/b&gt;&lt;/a&gt; is a distributed tracing tool that provides complete visibility to distributed systems based on microservices and multi-cloud environment. It uses open-source friendly data ingestion methods and is built to support applications of any scale.&lt;/p&gt;

&lt;p&gt;Some of the key features of the Lightstep distributed tracing tool includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Move seamlessly from a high-level view of dependencies to specific services, operations, traces, or any other signals contributing to issues in production&lt;/li&gt;
&lt;li&gt;Provides full-context root cause analysis with exact logs, metrics, and traces to simplify and solve complex investigations&lt;/li&gt;
&lt;li&gt;Auto-instrumentation libraries powered by OpenTelemetry&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wvvPe5sf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/lightstep_tracing_dashboard-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wvvPe5sf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/lightstep_tracing_dashboard-min.jpg" alt="Lighstep tracing dashboard (Source: thenewstack.io)"&gt;&lt;/a&gt;Lighstep distributed tracing dashboard (Source: thenewstack.io)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#instana"&gt;
  &lt;/a&gt;
  Instana
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.instana.com/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;Instana&lt;/b&gt;&lt;/a&gt; is a distributed tracing tool aimed at microservice applications. The Instana platform offers website monitoring, cloud &amp;amp; infrastructure monitoring, observability platform apart from distributed tracing of microservice applications.&lt;/p&gt;

&lt;p&gt;Some of the key features of the Instana distributed tracing tool includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A single, lightweight agent per host to continually discover and monitor all components of the technology stack&lt;/li&gt;
&lt;li&gt;Dependency Map to continuously model application services and infrastructure&lt;/li&gt;
&lt;li&gt;Enriched trace data with information about the underlying service, application, and system infrastructure&lt;/li&gt;
&lt;li&gt;Root cause analysis with a correlated sequence of events and issues identifying the exact source of the problem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nxcc1h1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/instana_distributed_tracing_dashboard-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nxcc1h1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/instana_distributed_tracing_dashboard-min.jpg" alt="Instana distributed tracing dashboard"&gt;&lt;/a&gt;Instana distributed tracing dashboard (Source: Instana website)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#datadog"&gt;
  &lt;/a&gt;
  DataDog
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.datadoghq.com/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;DataDog&lt;/b&gt;&lt;/a&gt;  is an enterprise APM tool that provides monitoring products ranging from infrastructure monitoring, log management, network monitoring to security monitoring. Its application performance monitoring tool has distributed tracing capabilities.&lt;/p&gt;

&lt;p&gt;Some of the key features of DataDog APM, which provides distributed tracing capabilities, includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Out of box performance dashboards for web services, queues, and databases to monitor requests, errors, and latency&lt;/li&gt;
&lt;li&gt;Correlation of distributed tracing to browser sessions, logs, profiles, network, processes, and infrastructure metrics&lt;/li&gt;
&lt;li&gt;Can ingest 50 traces per second per APM host&lt;/li&gt;
&lt;li&gt;Service maps to understand service dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N6YpMgnp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/datadog_distributed_tracing_dashboard-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N6YpMgnp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/datadog_distributed_tracing_dashboard-min.jpg" alt="DataDog distributed tracing dashboard"&gt;&lt;/a&gt;DataDog distributed tracing dashboard (Source: DataDog website)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#elastic-apm"&gt;
  &lt;/a&gt;
  Elastic APM
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.elastic.co/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;Elastic APM&lt;/b&gt;&lt;/a&gt; is an Application Performance Monitoring system built on the Elastic Stack - ElasticSearch, Logstash, and Kibana. It consists of four components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Elasticsearch - For data storage and indexing&lt;/li&gt;
&lt;li&gt;Kibana - For analyzing and visualizing the data&lt;/li&gt;
&lt;li&gt;APM agents - Collects the data to send to the APM server&lt;/li&gt;
&lt;li&gt;APM server - Receives data from APM agents and process it for storing in Elasticsearch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W-hckGxO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/elastic_apm_distributed_tracing_dashboard-min.jp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W-hckGxO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/elastic_apm_distributed_tracing_dashboard-min.jp" alt="Elastic APM distributed tracing dashboard"&gt;&lt;/a&gt;Elastic APM distributed tracing dashboard (Source: DataDog website)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#splunk"&gt;
  &lt;/a&gt;
  Splunk
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.splunk.com/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;Splunk&lt;/b&gt;&lt;/a&gt; provides a distributed tracing tool that can ingest all application data for a high-fidelity analysis. It stores all trace data in Splunk Cloud's offering.&lt;/p&gt;

&lt;p&gt;Some of the key features of the Splunk distributed tracing tool includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No sample full fidelity trace data ingestion
With Splunk, you can capture all trace data to ensure your cloud-native application work the way it is supposed to.&lt;/li&gt;
&lt;li&gt;Full-stack observability
Splunk APM provides a seamless correlation between infrastructure metrics and application performance metrics.&lt;/li&gt;
&lt;li&gt;AI-Driven troubleshooting
Splunk APM provides uses an AI-driven approach to identify error-prone microservices.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J7S7lnxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/splunk_distributed_tracing_dashboard-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J7S7lnxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/splunk_distributed_tracing_dashboard-min.jpg" alt="Splunk distributed tracing dashboard"&gt;&lt;/a&gt;Splunk distributed tracing dashboard (Source: DataDog website)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-choose-the-right-distributed-tracing-tool"&gt;
  &lt;/a&gt;
  How to choose the right distributed tracing tool?
&lt;/h2&gt;

&lt;p&gt;Tracing user requests is now critical for maintaining an exemplary user experience. Yes, distributed tracing directly impacts end-user experience as it gives your teams the right insights in the right amount of time to act on issues affecting application performance.&lt;/p&gt;

&lt;p&gt;In our view, distributed tracing tools should be developer first tools. As developers directly utilize these tools in critical situations, the codebase of the tools should be open-source. Open-source is the future of all software tools.&lt;/p&gt;

&lt;p&gt;Transparency and collaboration are some key benefits of open-source software tools. Developers want to see the code first hand, and if there are issues they want to address, they prefer to reach out to an active developer community than a customer support team.&lt;/p&gt;

&lt;p&gt;At the same time, most open-source tools don't provide the same user experience as provided by SaaS vendors. But it doesn't have to be that way. With that objective, we created SigNoz.&lt;/p&gt;

&lt;p&gt;SigNoz is a full-stack open-source application performance monitoring and observability tool. It provides a unified UI for both metrics and traces. Log management is also in the product roadmap and will be launched seen.&lt;/p&gt;

&lt;p&gt;You can check out SigNoz's GitHub repo here 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>distributedsystems</category>
      <category>tracing</category>
      <category>monitoring</category>
      <category>microservices</category>
    </item>
  </channel>
</rss>
