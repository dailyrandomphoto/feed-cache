<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Metaverse Hackathon is calling for amazing DEVs and Degens!</title>
      <author>Metaverse Alliance</author>
      <pubDate>Tue, 07 Dec 2021 08:00:34 +0000</pubDate>
      <link>https://dev.to/metaalliance_/metaverse-hackathon-is-calling-for-amazing-devs-and-degens-56m7</link>
      <guid>https://dev.to/metaalliance_/metaverse-hackathon-is-calling-for-amazing-devs-and-degens-56m7</guid>
      <description>&lt;p&gt;We are organizing a worldwide online Metaverse/Game/NFT related hackathon with TOP Ventures Capital and Tier ONE public chain organizations right now. Our partners are Dapper Labs, Republic, Binance Labs, Huobi Venture, DHVC, Delphi Digital, LD Capital, IOSG, Solana, Avalanche, Polygon, etc. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Details and application entrance: (&lt;a href="https://metaversealliance.com/"&gt;https://metaversealliance.com/&lt;/a&gt;)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sincerely invite all developers who are interested in joining our BIG PARTY!&lt;/p&gt;

&lt;p&gt;We provide the most experienced advice about blockchain and metaverse, the connections and chances to talk with all of these TOP ventures and firms, also, up to $50M in prize and seed funding if we see any potentials of your submissions. &lt;/p&gt;

&lt;p&gt;Hackathon runs through Dec 1, 2021 till Jan 15, 2022, and has 5 major topics. You could apply in person, or submit your project as a team, more detailed information please find here (&lt;a href="https://medium.com/@MetaverseAlliance/metathon-is-calling-for-amazing-devs-and-degens-c1985f87a827"&gt;https://medium.com/@MetaverseAlliance/metathon-is-calling-for-amazing-devs-and-degens-c1985f87a827&lt;/a&gt;).   &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Details and application entrance: (&lt;a href="https://metaversealliance.com/"&gt;https://metaversealliance.com/&lt;/a&gt;)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Twitter: [&lt;a href="https://twitter.com/MetaAlliance_?s=20"&gt;https://twitter.com/MetaAlliance_?s=20&lt;/a&gt;]&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>hackathon</category>
    </item>
    <item>
      <title>I promise this hook will blow up your 1000+ lines of Async code(pt. 2)</title>
      <author>Harsh Choudhary</author>
      <pubDate>Tue, 07 Dec 2021 07:59:21 +0000</pubDate>
      <link>https://dev.to/harshkc/i-promise-this-hook-will-blow-up-your-1000-lines-of-async-codept-2-3ofb</link>
      <guid>https://dev.to/harshkc/i-promise-this-hook-will-blow-up-your-1000-lines-of-async-codept-2-3ofb</guid>
      <description>&lt;p&gt;WoW, part 1 got a solid response, if you haven't checked that out go ahead &lt;a href="https://dev.to/harshkc/i-promise-this-hook-will-blow-your-1000-lines-of-async-code-2cao"&gt;here&lt;/a&gt;, it shows how this hook can help you write &lt;strong&gt;clean, robust and readable code&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But as promised this part is the real deal, we will not only learn how to make such an awesome hook but also &lt;strong&gt;learn how to develop true generic custom hooks&lt;/strong&gt;, the menu for the day:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Extracting logic from component to custom hook&lt;/li&gt;
&lt;li&gt;Making the hook generic&lt;/li&gt;
&lt;li&gt;Making reducer method more elegant &lt;/li&gt;
&lt;li&gt;Making the hook more robust&lt;/li&gt;
&lt;li&gt;Implementing reset state functionality &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tons of stuff, Fasten your seat-belt we are in for some ride!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/2wfDH6nZQ58DS/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/2wfDH6nZQ58DS/giphy.gif" alt="Riding GIF" width="224" height="231"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We used the final version of our hook to refactor the &lt;code&gt;BookInfo&lt;/code&gt; component in the last part, also explained what these components are and what they are doing. If you haven't still read that, go check that out first,  &lt;a href="https://dev.to/harshkc/i-promise-this-hook-will-blow-your-1000-lines-of-async-code-2cao"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import * as React from 'react'
import {
  fetchBook,
  BookInfoFallback,
  BookForm,
  BookDataView,
  ErrorFallback,
} from '../book'

function BookInfo({bookName}) {
  const [status, setStatus] = React.useState('idle')
  const [book, setBook] = React.useState(null)
  const [error, setError] = React.useState(null)

  React.useEffect(() =&amp;gt; {
    if (!bookName) {
      return
    }
    setStatus('pending')
    fetchBook(bookName).then(
      book =&amp;gt; {
        setBook(book)
        setStatus('resolved')
      },
      error =&amp;gt; {
        setError(error)
        setStatus('rejected')
      },
    )
  }, [bookName])

  if (status === 'idle') {
    return 'Submit a book'
  } else if (status === 'pending') {
    return &amp;lt;BookInfoFallback name={bookName} /&amp;gt;
  } else if (status === 'rejected') {
    return &amp;lt;ErrorFallback error={error}/&amp;gt;
  } else if (status === 'resolved') {
    return &amp;lt;BookDataView book={book} /&amp;gt;
  }

  throw new Error('This should be impossible')
}

function App() {
  const [bookName, setBookName] = React.useState('')

  function handleSubmit(newBookName) {
    setBookName(newBookName)
  }

  return (
    &amp;lt;div className="book-info-app"&amp;gt;
      &amp;lt;BookForm bookName={bookName} onSubmit={handleSubmit} /&amp;gt;
      &amp;lt;hr /&amp;gt;
      &amp;lt;div className="book-info"&amp;gt;
        &amp;lt;BookInfo bookName={bookName} /&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

export default App

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#extracting-the-logic-into-a-custom-hook"&gt;
  &lt;/a&gt;
  Extracting the logic into a custom hook
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Plan A:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We will decouple the effects and state from the &lt;code&gt;BookInfo&lt;/code&gt; component and manage them in our custom hook only, we will let users(users of hooks) pass just a callback method and dependencies and the rest will be managed for them.&lt;/p&gt;

&lt;p&gt;Here's how our &lt;code&gt;useAsync&lt;/code&gt; hook looks like now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function useAsync(asyncCallback, dependencies) {
  const [state, dispatch] = React.useReducer(asyncReducer, {
    status: 'idle',
    data: null,
    error: null,
  })

  React.useEffect(() =&amp;gt; {
    const promise = asyncCallback()
    if (!promise) {
      return
    }
    dispatch({type: 'pending'})
    promise.then(
      data =&amp;gt; {
        dispatch({type: 'resolved', data})
      },
      error =&amp;gt; {
        dispatch({type: 'rejected', error})
      },
    )
  }, dependencies)

  return state
}

function asyncReducer(state, action) {
  switch (action.type) {
    case 'pending': {
      return {status: 'pending', data: null, error: null}
    }
    case 'resolved': {
      return {status: 'resolved', data: action.data, error: null}
    }
    case 'rejected': {
      return {status: 'rejected', data: null, error: action.error}
    }
    default: {
      throw new Error(`Unhandled action type: ${action.type}`)
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how &lt;code&gt;asyncReducer&lt;/code&gt; is declared and defined below it is called. JS feels like magic, not much if you know about &lt;code&gt;Hoisting&lt;/code&gt;, if you don't, check  &lt;a href="https://twitter.com/harshkc99/status/1443930896482979840?s=20"&gt;this out&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;And now we can use our hook like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function BookInfo({bookName}) {
const state = useAsync(
    () =&amp;gt; {
      if (!BookName) {
        return
      }
      return fetchBook(BookName)
    },
    [BookName],
  )

const {data: Book, status, error} = state

//rest of the code same as above
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This looks good but this is nowhere near our final version and it has some shortcomings:&lt;/p&gt;

&lt;p&gt;Unfortunately, the ESLint plugin is unable to determine whether the &lt;code&gt;dependencies&lt;/code&gt; argument is a valid argument for &lt;code&gt;useEffect&lt;/code&gt;, normally it isn't bad we can just ignore it and move on. But, there’s a better solution.&lt;/p&gt;

&lt;p&gt;Instead of accepting dependencies to &lt;code&gt;useAsync&lt;/code&gt;, why don’t we just treat the &lt;code&gt;asyncCallback&lt;/code&gt; as a dependency? Any time it changes, we know that we should call it again. The problem is that because it depends on the &lt;code&gt;bookName&lt;/code&gt; which comes from props, it has to be defined within the body of the component, which means that it will be defined on every render which means it will be new every render. Phew, This is where &lt;code&gt;React.useCallback&lt;/code&gt; comes in!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;useCallback&lt;/code&gt; accepts the first argument as the callback we want to call, the second argument is an array of dependencies which is similar to &lt;code&gt;useEffect&lt;/code&gt;, which controls returned value after re-renders.&lt;br&gt;
If they change, we will get the callback we passed, If they don't change, we’ll get the callback that was returned the previous time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function BookInfo({bookName}) {
const asyncCallback = React.useCallback(() =&amp;gt; {
    if (!BookName) {
      return
    }
    return fetchBook(BookName)
  }, [BookName])
}

const state = useAsync(asyncCallback)
//rest same

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#making-the-hook-more-generic"&gt;
  &lt;/a&gt;
  Making the hook more generic
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Plan B:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Requiring users to provide a memoized value is fine as we can document it as part of the API and expect them to just read the docs 🌚. It’d be way better if we could memoize the function, and the users of our hook don’t have to worry about it.&lt;/p&gt;

&lt;p&gt;So we are giving all the power back to the user by providing a (memoized) run function that people can call in their own &lt;code&gt;useEffect&lt;/code&gt; and manage their own dependencies.&lt;/p&gt;

&lt;p&gt;If you don't know about memoization check this thread &lt;a href="https://twitter.com/harshkc99/status/1467880871818522625?s=20"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now the &lt;code&gt;useAsync&lt;/code&gt; hook look like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//!Notice: we have also allowed users(hook user) to send their own initial state
function useAsync(initialState) {
  const [state, dispatch] = React.useReducer(asyncReducer, {
    status: 'idle',
    data: null,
    error: null,
    ...initialState,
  })

  const {data, error, status} = state

  const run = React.useCallback(promise =&amp;gt; {
    dispatch({type: 'pending'})
    promise.then(
      data =&amp;gt; {
        dispatch({type: 'resolved', data})
      },
      error =&amp;gt; {
        dispatch({type: 'rejected', error})
      },
    )
  }, [])

  return {
    error,
    status,
    data,
    run,
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in the &lt;code&gt;BookInfo&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function BookInfo({bookName}) {
 const {data: book, status, error, run} = useAsync({
    status: bookName ? 'pending' : 'idle',
  })

 React.useEffect(() =&amp;gt; {
    if (!bookName) {
      return
    }
    run(fetchBook(bookName))
  }, [bookName, run])
.
.
.
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yay! We have made our own basic custom hook for managing Async code. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o7abldj0b3rxrZUxW/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o7abldj0b3rxrZUxW/giphy.gif" alt="Dancing people" width="563" height="432"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's add some functionality and make it more robust.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-reducer-method-elegant"&gt;
  &lt;/a&gt;
  Making reducer method elegant 🎨
&lt;/h3&gt;

&lt;p&gt;Our asyncReducer looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function asyncReducer(state, action) {
  switch (action.type) {
    case 'pending': {
      return {status: 'pending', data: null, error: null}
    }
    case 'resolved': {
      return {status: 'resolved', data: action.data, error: null}
    }
    case 'rejected': {
      return {status: 'rejected', data: null, error: action.error}
    }
    default: {
      throw new Error(`Unhandled action type: ${action.type}`)
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Have a look at it for a minute.&lt;br&gt;
Notice that we are overdoing stuff by checking &lt;code&gt;action.type&lt;/code&gt; and manually setting different objects of the state according to it.&lt;/p&gt;

&lt;p&gt;Look at the refactored one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const asyncReducer = (state, action) =&amp;gt; ({...state, ...action})

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wth did just happen?&lt;/p&gt;

&lt;p&gt;This does the same thing as previous, we have leveraged the power of JavaScript and made it elegant.&lt;br&gt;
We are spreading the previous state object and returning the latest one by spreading our actions, which automatically handles collisions and gives more priority to actions because of their position.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#making-the-hook-robust"&gt;
  &lt;/a&gt;
  Making the hook robust
&lt;/h3&gt;

&lt;p&gt;Consider the scenario where we fetch a book, and before the request finishes, we change our mind and navigate to a different page. In that case, the component would &lt;code&gt;unmount&lt;/code&gt; but when the request is finally completed, it will call dispatch, but because the component is &lt;code&gt;unmounted&lt;/code&gt;, we’ll get this warning from React:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Warning: Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To overcome this we can prevent dispatch from being called if the component is unmounted.&lt;br&gt;
For this, we will use &lt;code&gt;React.useRef&lt;/code&gt; hook, learn more about it &lt;a href="https://reactjs.org/docs/hooks-reference.html#useref"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function useSafeDispatch(dispatch) {
  const mountedRef = React.useRef(false)

  // to make this even more generic we used the useLayoutEffect hook to
  // make sure that we are correctly setting the mountedRef.current immediately
  // after React updates the DOM. Check the fig below explaining lifecycle of hooks.
  // Even though this effect does not interact
  // with the dom another side effect inside a useLayoutEffect which does
  // interact with the dom may depend on the value being set
  React.useLayoutEffect(() =&amp;gt; {
    mountedRef.current = true
    return () =&amp;gt; {
      mountedRef.current = false
    }
  }, [])

  return React.useCallback(
    (...args) =&amp;gt; (mountedRef.current ? dispatch(...args) : void 0),
    [dispatch],
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can use the method like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const dispatch = useSafeDispatch(oldDispatch)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are setting &lt;code&gt;mountedRef.current&lt;/code&gt; to true when component is mounted and false when it is unmounted by running cleanup effects.&lt;/p&gt;

&lt;p&gt;See the below fig to learn the lifecycle of hooks.&lt;br&gt;
Notice how &lt;code&gt;layoutEffects&lt;/code&gt; are executed way before &lt;code&gt;useEffects&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FjfOoRq2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/donavon/hook-flow/master/hook-flow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FjfOoRq2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/donavon/hook-flow/master/hook-flow.png" alt="Hooks lifecycle" width="761" height="969"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#implementing-reset-method"&gt;
  &lt;/a&gt;
  Implementing reset method
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function useAsync(initialState) {
  const initialStateRef = React.useRef({
    ...defaultInitialState,
    ...initialState,
  })

  const [{status, data, error}, unsafeDispatch] = React.useReducer(
    (s, a) =&amp;gt; ({...s, ...a}),
    initialStateRef.current,
  )

  const dispatch = useSafeDispatch(unsafeDispatch)

  const reset = React.useCallback(
    () =&amp;gt; dispatch(initialStateRef.current),
    [dispatch],
  )

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We used &lt;code&gt;refs&lt;/code&gt; as they don't change between re-renders.&lt;br&gt;
Basically, we are storing &lt;code&gt;initialState&lt;/code&gt; in a ref and the &lt;code&gt;reset&lt;/code&gt; method sets the state to &lt;code&gt;initialState&lt;/code&gt; upon calling, pretty self-explanatory stuff.&lt;/p&gt;

&lt;p&gt;We are almost done with our hook, we just need to wire up things together. Let's review what we have implemented till now: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;functionality to handle async code&lt;/li&gt;
&lt;li&gt;functionality to handle success, pending, and error state&lt;/li&gt;
&lt;li&gt;memoization for efficiency&lt;/li&gt;
&lt;li&gt;functionality to pass own custom initialState&lt;/li&gt;
&lt;li&gt;functionality to reset current state&lt;/li&gt;
&lt;li&gt;Safe dispatch to handle calling of dispatch method upon mounting and unmounting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Phew, that is a lot of work and I hope you are enjoying it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/mGK1g88HZRa2FlKGbz/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/mGK1g88HZRa2FlKGbz/giphy.gif" alt="Seriously needs some applause" width="480" height="400"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#wiring-things-together"&gt;
  &lt;/a&gt;
  Wiring things together
&lt;/h3&gt;

&lt;p&gt;After wiring everything, the &lt;code&gt;useAsync&lt;/code&gt; hook looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function useSafeDispatch(dispatch) {
  const mounted = React.useRef(false)

  React.useLayoutEffect(() =&amp;gt; {
    mounted.current = true
    return () =&amp;gt; (mounted.current = false)
  }, [])
  return React.useCallback(
    (...args) =&amp;gt; (mounted.current ? dispatch(...args) : void 0),
    [dispatch],
  )
}

const defaultInitialState = {status: 'idle', data: null, error: null}

function useAsync(initialState) {
  const initialStateRef = React.useRef({
    ...defaultInitialState,
    ...initialState,
  })
  const [{status, data, error}, setState] = React.useReducer(
    (s, a) =&amp;gt; ({...s, ...a}),
    initialStateRef.current,
  )

  const safeSetState = useSafeDispatch(setState)

  const setData = React.useCallback(
    data =&amp;gt; safeSetState({data, status: 'resolved'}),
    [safeSetState],
  )
  const setError = React.useCallback(
    error =&amp;gt; safeSetState({error, status: 'rejected'}),
    [safeSetState],
  )
  const reset = React.useCallback(
    () =&amp;gt; safeSetState(initialStateRef.current),
    [safeSetState],
  )

  const run = React.useCallback(
    promise =&amp;gt; {
      if (!promise || !promise.then) {
        throw new Error(
          `The argument passed to useAsync().run must be a promise. Maybe a function that's passed isn't returning anything?`,
        )
      }
      safeSetState({status: 'pending'})
      return promise.then(
        data =&amp;gt; {
          setData(data)
          return data
        },
        error =&amp;gt; {
          setError(error)
          return Promise.reject(error)
        },
      )
    },
    [safeSetState, setData, setError],
  )

  return {
    isIdle: status === 'idle',
    isLoading: status === 'pending',
    isError: status === 'rejected',
    isSuccess: status === 'resolved',
    setData,
    setError,
    error,
    status,
    data,
    run,
    reset,
  }
}

export {useAsync}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yay, we are done.🎉&lt;/p&gt;

&lt;p&gt;That was huge, and I hope you are more excited than tired and I hope you got to learn something new today.&lt;br&gt;
Legends say &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"People need to write or teach what they have learned to remember it."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why don't use the comment section as your writing pad and write your finding, also if you have some criticism, suggestions? feel free to write.&lt;/p&gt;

&lt;p&gt;This hook is used extensively throughout &lt;a href="https://kentcdodds.com"&gt;Kent C. Dodds&lt;/a&gt; &lt;a href="https://epicreact.dev"&gt;Epic React Course&lt;/a&gt;. He teaches a lot of cool and advanced topics in his course, he is the author of this hook and I have learned to build it from scratch from his course.&lt;/p&gt;

&lt;p&gt;A little about me, I am Harsh and I love to code, I feel at home while building web apps in React. I am currently learning Remix. Also, I am looking for a Front-end developer role, if you have an opening, DM me on &lt;a href="https://twitter.com/messages/2525392830-2525392830?recipient_id=2525392830&amp;amp;text=Hello%20Harsh"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is part 2 of &lt;code&gt;useAsync&lt;/code&gt; hook series&lt;/li&gt;
&lt;li&gt;Find part 1  &lt;a href="https://harshkc.hashnode.dev/i-promise-this-hook-will-blow-your-1000-lines-of-async-code"&gt;here&lt;/a&gt; .&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I am so excited for part 3 as we will be writing tests.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;I am also planning to share my learning through such blogs in Future, Let's keep in touch!&lt;/em&gt;✌️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.harshkc.tech"&gt;Portfolio&lt;/a&gt; &lt;br&gt;
&lt;a href="https://www.twitter.com/harshkc99"&gt;Twitter&lt;/a&gt; &lt;br&gt;
&lt;a href="https://www.linkedin.com/in/harshkc99"&gt;Linkedin&lt;/a&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Kick-Start Automation Testing With Katalon Recorder</title>
      <author>Cody Simons</author>
      <pubDate>Tue, 07 Dec 2021 07:53:06 +0000</pubDate>
      <link>https://dev.to/codysimons20/kick-start-automation-testing-with-katalon-recorder-2377</link>
      <guid>https://dev.to/codysimons20/kick-start-automation-testing-with-katalon-recorder-2377</guid>
      <description>&lt;p&gt;Software testing was initially a manual activity, however, due to the importance of speedy delivery, the transition to automation testing is predictable.&lt;/p&gt;

&lt;p&gt;Suppose you are a manual tester (or developer) seeking an automation solution to speed up your project. There’s no surprise that your first instinct would be to find tools that are easy to get started with and require the slightest effort to be integrated into workflows.&lt;/p&gt;

&lt;p&gt;On the flip side, sustainability counts. You need a stepping stone to kick-start automation with ease, but it should be sustainable enough to pave the way for your dynamic growth in the future.&lt;/p&gt;

&lt;p&gt;This is the dilemma automation testing beginners face: How to find an automation solution that is easy to kick-start and can accommodate future needs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.katalon.com/resources-center/blog/browser-automation/"&gt;Continue reading&lt;/a&gt;&lt;/p&gt;

</description>
      <category>browserautomteston</category>
      <category>testing</category>
      <category>automationtesting</category>
      <category>katalonrecoder</category>
    </item>
    <item>
      <title>Advanced TypeScript With Code Challenges: Template Literal Types</title>
      <author>Marius Bongarts</author>
      <pubDate>Tue, 07 Dec 2021 07:48:35 +0000</pubDate>
      <link>https://dev.to/mariusbongarts/advanced-typescript-with-code-challenges-template-literal-types-1bg3</link>
      <guid>https://dev.to/mariusbongarts/advanced-typescript-with-code-challenges-template-literal-types-1bg3</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IqaEaSyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AjUBpz0DE_5DSUvDOk_3ZJg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IqaEaSyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AjUBpz0DE_5DSUvDOk_3ZJg.png" alt="Small Elephant stating Javascript, big elephant stating Typescript" width="880" height="640"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Template literal types allow us to build more flexible types. As its name suggests, they have the same syntax as template literal strings in JavaScript but are used in type positions.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="https://javascript.plainenglish.io/advanced-typescript-with-code-challenges-template-literal-types-479f56496daa" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e2_KEboz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AtHDAGXmHWPWPSCMJyPPvQg.png" alt="Marius Bongarts"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="https://javascript.plainenglish.io/advanced-typescript-with-code-challenges-template-literal-types-479f56496daa" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Advanced TypeScript With Code Challenges: Template Literal Types | by Marius Bongarts | Dec, 2021 | JavaScript in Plain English&lt;/h2&gt;
      &lt;h3&gt;Marius Bongarts ・ &lt;time&gt;Dec 6, 2021&lt;/time&gt; ・ 
      &lt;div class="ltag__link__servicename"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hnDHPsJs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/medium-f709f79cf29704f9f4c2a83f950b2964e95007a3e311b77f686915c71574fef2.svg" alt="Medium Logo"&gt;
        javascript.plainenglish.io
      &lt;/div&gt;
    &lt;/h3&gt;
&lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Binary search and big O notation</title>
      <author>Elias Juremalm</author>
      <pubDate>Tue, 07 Dec 2021 07:23:05 +0000</pubDate>
      <link>https://dev.to/pluppen/binary-search-and-big-o-notation-4ih3</link>
      <guid>https://dev.to/pluppen/binary-search-and-big-o-notation-4ih3</guid>
      <description>&lt;p&gt;In this article, I will teach you about big O notation and we will also implement binary search in Python3. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#big-o-notation"&gt;
  &lt;/a&gt;
  Big O notation
&lt;/h2&gt;

&lt;p&gt;Big O notation is a special notation that tells you how fast your algorithm is. Why does big O notation matter? When you use people's algorithms, it's nice to understand how fast or slow they are. When it comes to measuring algorithms it's not enough to measure the time in seconds because when an algorithm is working with small amounts of operations it can be hard to see a difference. But the more operations you will need to compute, the more time will scale. With big O notation, you can quickly see how much the algorithm will scale based on input. The amount of input into the algorithm is called &lt;strong&gt;n&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;For example, O(n) will scale linearly while O(n^2) will scale exponentially.&lt;/p&gt;

&lt;p&gt;Some common big O notations you will see are the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O(1) static.&lt;/li&gt;
&lt;li&gt;O(log n), also known as log time. Example: Binary search.&lt;/li&gt;
&lt;li&gt;O(n), also known as linear time. Example: Simple search.&lt;/li&gt;
&lt;li&gt;O(n * log n). Example: A fast sorting algorithm.&lt;/li&gt;
&lt;li&gt;O(n^2). Example: A slow sorting algorithm.&lt;/li&gt;
&lt;li&gt;O(n!). Example: A super slow algorithm, like the traveling salesperson problem.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--63Q10uJZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1838/1%2AFkQzWqqIMlAHZ_xNrEPKeA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--63Q10uJZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1838/1%2AFkQzWqqIMlAHZ_xNrEPKeA.png" alt="Big O notation image" width="880" height="761"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#binary-search"&gt;
  &lt;/a&gt;
  Binary Search
&lt;/h2&gt;

&lt;p&gt;When you need to search for something you'll probably use some kind of algorithm. One popular algorithm is binary search. One of the reasons because it's so popular is its efficiency(O(log n)). Now how does binary search work?&lt;/p&gt;

&lt;p&gt;Imagine a sorted list of numbers. &lt;br&gt;
&lt;code&gt;[1, 4, 6, 7, 9, 21, 43]&lt;/code&gt;&lt;br&gt;
If I would like to see if number 6 is inside this list and where it is located I could go through each element in the list until I find the number 6. That's simple search. The problem with simple search is that with large lists it will be slow. If I would instead use binary search we could search the list fast even with a large list.&lt;/p&gt;

&lt;p&gt;How binary search starts is as the following. Start looking at the number seven. If the number we are looking for is lower we move forward and only look at the left side of the list. If it's higher we only look on the right side. In this case, 6 is lower than 7 so we will look at the left side. Now the numbers we care about are these.&lt;br&gt;
&lt;code&gt;[1, 4, 6]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we do the same thing we did before. We start to look at 4, is 6 higher or lower? Higher. We therefore move forward and our list only looks like this:&lt;br&gt;
&lt;code&gt;[6]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now when we do the same thing again, we'll see that the item we are looking at is the number we are searching for. Boom, we found it! Now if instead, the number we were looking for was 5, we would not have found anything, then our program would return -1 instead.&lt;/p&gt;

&lt;p&gt;To sum it up&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Look at the item in the middle(lowest value:highest value) of the list&lt;/li&gt;
&lt;li&gt;If the list is empty return -1&lt;/li&gt;
&lt;li&gt;Check if the item is the one you're looking for.&lt;/li&gt;
&lt;li&gt;If yes return index&lt;/li&gt;
&lt;li&gt;Check if the item is lower or higher than what you're looking for&lt;/li&gt;
&lt;li&gt;Modify list/lowest and highest value&lt;/li&gt;
&lt;li&gt;Start over&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now let's implement this in code&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#binary-search-in-python-3"&gt;
  &lt;/a&gt;
  Binary search in Python 3
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def bin_search(item, arr):
    low, high = 0, len(arr) - 1

    while low &amp;lt;= high:
        mid = (low + high) // 2
        if arr[mid] == item:
            return mid

        if arr[mid] &amp;lt; item:
            low = mid + 1
        elif arr[mid] &amp;gt; item:
            high = mid - 1
     return -1

my_list= [1, 4, 6, 7, 9, 21, 43]

print(bin_search(6, my_list)) // Returns 2
print(bin_search(5, my_list)) // Returns -1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above is a simple implementation of binary search, there are different ways to implement a binary search and this is one of them. This program will go through the list to search for the &lt;em&gt;item&lt;/em&gt; we are looking for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Algorithms speed is not measured in seconds.&lt;/li&gt;
&lt;li&gt;Algorithm times are written in big O notation.&lt;/li&gt;
&lt;li&gt;Big O notation is showing in terms of the growth of an algorithm.&lt;/li&gt;
&lt;li&gt;Some common Big O notations: O(n), O(log n), O(n^2), O(n * log n) &lt;/li&gt;
&lt;li&gt;Binary search is a fast searching algorithm. Much faster than simple search.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading this short post about Big O notation and Binary Search. This post is part of a data structures and algorithms series I'm working on so make sure to leave a follow if you're interested to see more.&lt;/p&gt;

</description>
      <category>python</category>
      <category>algorithms</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to get current time zone in JavaScript</title>
      <author>bikashgosai</author>
      <pubDate>Tue, 07 Dec 2021 07:07:57 +0000</pubDate>
      <link>https://dev.to/bikashgosai/how-to-get-current-time-zone-in-javascript-p62</link>
      <guid>https://dev.to/bikashgosai/how-to-get-current-time-zone-in-javascript-p62</guid>
      <description>&lt;p&gt;To get the current browser's time zone, you can use the &lt;code&gt;getTimezoneOffset()&lt;/code&gt; method from the JavaScript Date object.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;getTimezoneOffset()&lt;/code&gt; returns the time difference, in minutes, between UTC time and local time. The returned value is positive if the local time zone is behind UTC and negative if the local time zone is ahead of UTC.&lt;/p&gt;

&lt;p&gt;For example, if your time zone is UTC+5:45, the &lt;code&gt;getTimezoneOffset()&lt;/code&gt; method will return -345 minutes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
const date = new Date();
const offset = date.getTimezoneOffset();
console.log(offset);    // -345
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;getTimezoneOffset()&lt;/code&gt; works in all modern browsers, Internet Explorer 5 and higher.&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>
Support pattern matching in JavaScript</title>
      <author>iptop</author>
      <pubDate>Tue, 07 Dec 2021 07:06:19 +0000</pubDate>
      <link>https://dev.to/iptop/support-pattern-matching-in-javascript-31p5</link>
      <guid>https://dev.to/iptop/support-pattern-matching-in-javascript-31p5</guid>
      <description>&lt;p&gt;Pattern matching is a standard feature of modern programming languages&lt;br&gt;
[babel-plugin-proposal-pattern-matching]&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(&lt;a href="https://github.com/iptop/babel-plugin-proposal-pattern-matching"&gt;https://github.com/iptop/babel-plugin-proposal-pattern-matching&lt;/a&gt;)&lt;br&gt;
the plugin supports the use of this feature in JavaScript&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;With npm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; babel-plugin-proposal-pattern-matching
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#babelrc"&gt;
  &lt;/a&gt;
  .babelrc
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"babel-plugin-proposal-pattern-matching"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#easy"&gt;
  &lt;/a&gt;
  easy
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;babel-plugin-proposal-pattern-matching/match&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; 55&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fnmatch"&gt;
  &lt;/a&gt;
  fnmatch
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;babel-plugin-proposal-pattern-matching/match&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fnmatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;// -&amp;gt; 55&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;fnmatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;one&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// -&amp;gt; [ 'one', 'two', 'three' ]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#type"&gt;
  &lt;/a&gt;
  type
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;babel-plugin-proposal-pattern-matching/match&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nullish&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nullish&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; undefined type`&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; string&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; number&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; nullish&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; nullish&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#instanceof"&gt;
  &lt;/a&gt;
  instanceOf
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;instanceOf&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;babel-plugin-proposal-pattern-matching/match&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;instanceOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;RegExp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;instanceOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Array&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;instanceOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/111/&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; RegExp&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getType&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; Array&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getType&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; Object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deconstruction"&gt;
  &lt;/a&gt;
  deconstruction
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;babel-plugin-proposal-pattern-matching/match&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
  &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;([])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; 6&lt;/span&gt;


&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;})(&lt;/span&gt;
      &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FizzBuzz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="c1"&gt;// Fizz&lt;/span&gt;
&lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;span class="c1"&gt;// Buzz&lt;/span&gt;
&lt;span class="c1"&gt;// Fizz&lt;/span&gt;
&lt;span class="c1"&gt;// 7&lt;/span&gt;
&lt;span class="c1"&gt;// 8&lt;/span&gt;
&lt;span class="c1"&gt;// Fizz&lt;/span&gt;
&lt;span class="c1"&gt;// Buzz&lt;/span&gt;
&lt;span class="c1"&gt;// 11&lt;/span&gt;
&lt;span class="c1"&gt;// Fizz&lt;/span&gt;
&lt;span class="c1"&gt;// 13&lt;/span&gt;
&lt;span class="c1"&gt;// 14&lt;/span&gt;
&lt;span class="c1"&gt;// FizzBuzz&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#not"&gt;
  &lt;/a&gt;
  not
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;babel-plugin-proposal-pattern-matching/match&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; [ 1, 0, 0, 1, 2, 3 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#or"&gt;
  &lt;/a&gt;
  or
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;babel-plugin-proposal-pattern-matching/match&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; 55&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#and"&gt;
  &lt;/a&gt;
  and
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;babel-plugin-proposal-pattern-matching/match&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// -&amp;gt; 55&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  LICENSE
&lt;/h2&gt;

&lt;p&gt;MIT&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top 5 VS Code Extensions for Developers in 2022</title>
      <author>Nomadev💻🔱</author>
      <pubDate>Tue, 07 Dec 2021 07:03:02 +0000</pubDate>
      <link>https://dev.to/thenomadevel/top-5-vs-code-extensions-for-developers-in-2022-1ina</link>
      <guid>https://dev.to/thenomadevel/top-5-vs-code-extensions-for-developers-in-2022-1ina</guid>
      <description>&lt;p&gt;Hello, techies  &lt;a href="https://twitter.com/thenomadevel"&gt;Nomadev&lt;/a&gt;  here, back with another blog on tech. Looking for the best VS Code extension which can supercharge your work for your next project? Then here is the list that offers some of the best 5 VS Code extensions for Developers in 2022. &lt;br&gt;
Before we start the list, let’s get to know what VS Code is?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is VS Code?&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;If you are my regular reader, you might know that I am a very big fan of Visual Studio Code and always endorses it for its cool features and functionalities. Visual Studio Code is a source-code editor made owned by Microsoft for Windows, Linux, and macOS. It has support for debugging, syntax highlighting, intelligent code completion, snippets, code refactoring, and &lt;strong&gt;embedded Git&lt;/strong&gt;(super useful).&lt;/p&gt;

&lt;p&gt;The most loved features of VS are IntelliSense, Terminal support, quick navigation, fast editing, syntax highlighting, built-in Git controls, and various vs code extensions that supercharge developer experience and productivity.&lt;/p&gt;

&lt;p&gt;It is widely used and loved by developers and it has a &lt;strong&gt;marketplace&lt;/strong&gt; that contains numerous extensions to make it handy to do the coding stuff. In this list, we are going to talk about the Top VS code extensions that can make your work super easy. So without wasting much time let's get started!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P0SzR-Gf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638091514415/YLXAUk-dd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P0SzR-Gf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638091514415/YLXAUk-dd.gif" alt="start.gif" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-prettier"&gt;
  &lt;/a&gt;
  1.  &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Installs - 17M&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have contributed to any open source organization or are working for a company, &lt;br&gt;
every organization has its unique way of code indention and it is a trait of good developers that they always prioritize writing clean and symmetric code. &lt;br&gt;
Prettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary and you can adjust the re-printing rules.&lt;br&gt;
I remember once I was contributing to an open-source organization and they have 2 space rules for their code's indentation, whereas I have done it using 4 spaces (the default one). I just adjusted the settings on prettier settings and boom! You must give it a try.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sk-BSQgs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638817523219/HnhW_E8xW.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sk-BSQgs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638817523219/HnhW_E8xW.gif" alt="prettier.gif" width="880" height="276"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#2-live-server"&gt;
  &lt;/a&gt;
  2.  &lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;Live Server&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Installs - 16.9 M&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are into Web Development, I am damn sure that you have used/heard live server at least once. It makes your existing server live that helps you to live reload feature for dynamic content, you don't have to refresh every time you will make a change to your codebase. After installation, automated localhost will be able to run in your browser, which you can start with a single button or just by pressing &lt;code&gt;Alt + L Alt + O&lt;/code&gt;. Once you make changes in your code or write something new, after saving it, the browser will auto-refresh itself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--11NvMqza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638857754195/P3Fum-kwD.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--11NvMqza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638857754195/P3Fum-kwD.gif" alt="live server.gif" width="880" height="471"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#3-github-copilot"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://marketplace.visualstudio.com/items?itemName=GitHub.copilot"&gt;GitHub Copilot&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Installs - 636 k&lt;/strong&gt; (&lt;em&gt;Only available on preview&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Without a doubt, GitHub Copilot is one of the best VS Code extensions that can supercharge your work with its amazing capability of converting comments into code. GitHub Copilot uses the context you’ve provided and synthesizes code to match. A tool powered by gpt3 is capable of writing code automatically all you have to do is write a descriptive function name or some comments and it will automatically fill in the implementation details for you. If you want to know about GitHub Copilot in detail, you can check my article  &lt;a href="https://dev.to/thenomadevel/what-is-github-copilot-will-it-take-your-jobs--33p5"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2XRC1LUB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638858553800/voijwns4J.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2XRC1LUB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638858553800/voijwns4J.gif" alt="copilot.gif" width="640" height="360"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#4-pylance"&gt;
  &lt;/a&gt;
  4.   &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance"&gt;Pylance&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Pylance - 19.7 M&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pylance is an extension that works alongside Python in Visual Studio Code to provide performant language support. Under the hood, Pylance is powered by Pyright, Microsoft's static type checking tool. Using  &lt;a href="https://github.com/microsoft/pyright"&gt;Pyright&lt;/a&gt;, Pylance has the ability to supercharge your Python IntelliSense experience with rich type information, helping you write better code faster.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#5-visual-studio-intellicode"&gt;
  &lt;/a&gt;
  5.  &lt;a href="https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode"&gt;Visual Studio IntelliCode&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Installs - 15.2 M&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;The Visual Studio IntelliCode extension provides AI-assisted development features for Python, TypeScript/JavaScript, and Java developers in Visual Studio Code, with insights based on understanding your code context combined with machine learning.&lt;br&gt;
When it comes to overloads, rather than taking the time to cycle through the alphabetical list of members, IntelliCode presents the most relevant one first. In the example shown above, you can see that the predicted APIs that IntelliCode elevates appear in a new section of the list at the top with members prefixed by a star icon.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--40YOYwPJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638818009216/jQPkvGjDa.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--40YOYwPJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638818009216/jQPkvGjDa.gif" alt="python-intellicode.gif" width="880" height="390"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you haven't used them, then give them a try. I hope you will find it insightful and for other such articles make sure to follow me on  &lt;a href="https://twitter.com/thenomadevel"&gt;Twitter&lt;/a&gt; and here also.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/thenomadevel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oXBZZGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638859846607/CmXZ9RBvb.jpeg" alt="Twitter.jpg" width="880" height="418"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;And if you want to appreciate my work you can  &lt;a href="https://www.buymeacoffee.com/nomadevel"&gt;buy me a coffee&lt;/a&gt;, &lt;strong&gt;Your appreciation is my motivation.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/nomadevel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Vno0upf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637869195331/r4SfPP57h.jpeg" alt="coffee.jfif" width="880" height="441"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-you-dont-know-now-you-know"&gt;
  &lt;/a&gt;
  If you don't know, now you know
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can access Visual Studio Code on your browser without installing it,  you can visit -  &lt;a href="https://vscode.dev/"&gt;https://vscode.dev/&lt;/a&gt;  and get a coding experience nearly identical to its desktop version.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you are on GitHub, you can open the repository on your screen to  &lt;a href="https://vscode.dev/"&gt;VSCode.dev&lt;/a&gt;  by just pressing "." on your browser.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am sure you will love it, Happy Coding! &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>github</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Notes on default ES behavior</title>
      <author>Louis</author>
      <pubDate>Tue, 07 Dec 2021 06:48:26 +0000</pubDate>
      <link>https://dev.to/louisgv/notes-on-default-es-behavior-33ia</link>
      <guid>https://dev.to/louisgv/notes-on-default-es-behavior-33ia</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const n = null

console.log(n?.something) // undefined

const o = {}

console.log(o?.something) // undefined

function test(d = 0) {
    console.log({ d })
}

test(o?.something) // { d : 0 }
test(n?.something) // { d : 0 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>notes</category>
    </item>
    <item>
      <title>mongoose connection in NextJS</title>
      <author>EasyCode Sardar</author>
      <pubDate>Tue, 07 Dec 2021 06:34:18 +0000</pubDate>
      <link>https://dev.to/hardeepcoder/mongoose-connection-in-nextjs-3lcj</link>
      <guid>https://dev.to/hardeepcoder/mongoose-connection-in-nextjs-3lcj</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.tourl"&gt;&lt;/a&gt;#nextjs  #tutorial  for #beginners &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;check and give me feedback&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/DN19NsAXAlQ"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=DN19NsAXAlQ"&gt;https://www.youtube.com/watch?v=DN19NsAXAlQ&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>mongodb</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Roadmap for React JS 2022</title>
      <author>Digvijay Jadhav</author>
      <pubDate>Tue, 07 Dec 2021 06:31:43 +0000</pubDate>
      <link>https://dev.to/digvijayjadhav98/roadmap-for-react-js-2022-4ccn</link>
      <guid>https://dev.to/digvijayjadhav98/roadmap-for-react-js-2022-4ccn</guid>
      <description>&lt;p&gt;In the previous blog I talked about why one should prefer react for Frontend. (&lt;a href="https://dev.to/digvijayjadhav98/why-choose-react-for-frontend-4m23"&gt;https://dev.to/digvijayjadhav98/why-choose-react-for-frontend-4m23&lt;/a&gt;) Now we'll take a look at React developer roadmap that will guide you through your journey from being a novice developer to a skilled plus experienced developer over time.&lt;/p&gt;

&lt;p&gt;React is one of the most popular JavaScript library for designing rich and interactive User Interfaces.&lt;/p&gt;

&lt;p&gt;Below is the mind-map of learning React. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--euHRE9Fb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3exkakb8xol72rpah4z1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--euHRE9Fb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3exkakb8xol72rpah4z1.png" alt="Image description" width="880" height="715"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I remember when I started learning React, I was confused how to start and what all things I should know before building some real time projects. After reading few books, referring blogs, online courses videos and two years of experience has made me enough confident about React and what to do and what not to.&lt;/p&gt;

&lt;p&gt;Assuming you have basic understanding of HTML, CSS and JS&lt;/p&gt;

&lt;p&gt;If not then do check out the resources section below. That being said, Lets dive in. &lt;/p&gt;

&lt;p&gt;Lets divide the learning into three sections: Fundamentals, Advance and Ecosystem&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Fundamentals:&lt;/strong&gt; &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create React App&lt;/li&gt;
&lt;li&gt;Components : react application is made up of reusable bits of code called components and in react you can create a function component or a class component&lt;/li&gt;
&lt;li&gt;Functional Component &lt;/li&gt;
&lt;li&gt;Class Component &lt;/li&gt;
&lt;li&gt;JSX :  the idea of writing HTML like code inside JavaScript this is what is termed as JSX and is a syntax extension to JavaScript with JSX you pretty much describe what the UI should look like&lt;/li&gt;
&lt;li&gt;Props and State : Props which stands for properties are just arbitrary inputs for a component which play a major part in making the component reusable. However props are read-only the component can never modify its own props this is the point in time where you start learning about state, state allows react components to change their output&lt;/li&gt;
&lt;li&gt;useState and useEffect Hooks&lt;/li&gt;
&lt;li&gt;setState and Component Lifecycle Methods&lt;/li&gt;
&lt;li&gt;Conditional Rendering&lt;/li&gt;
&lt;li&gt;Lists and Keys&lt;/li&gt;
&lt;li&gt;Building Simple forms&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After doing this I recommend you to do a basic mini project. Here are some cool examples &lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/thenerdydev/10-react-projects-every-beginner-should-try-fk9"&gt;✨8 React Projects Every Beginner Should Try&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Ecosystem :&lt;/strong&gt; &lt;br&gt;
    React is not framework, its a library which means to complete your web application you need to have a stable ecosystem which covers styling, testing, scalability, performance and application oriented dependencies(eg for language translation one can use i18Net or for Serverless application one can check firebase or AWS lambda)    &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;State Management : Redux / Mobx / Flux / redux-toolkit&lt;/li&gt;
&lt;li&gt;Routing : React Router&lt;/li&gt;
&lt;li&gt;Styling : Styled Components, MaterialUI,Chakra,Tailwind.css, Bootstrap etc&lt;/li&gt;
&lt;li&gt;Forms : Formik,React hook form&lt;/li&gt;
&lt;li&gt;Testing : 

&lt;ol&gt;
&lt;li&gt;Cypress → End to end testing&lt;/li&gt;
&lt;li&gt;Jest → unit Testing&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Misc:

&lt;ol&gt;
&lt;li&gt;TypeScript&lt;/li&gt;
&lt;li&gt;Storybook&lt;/li&gt;
&lt;li&gt;React i18Net&lt;/li&gt;
&lt;li&gt;Firebase&lt;/li&gt;
&lt;li&gt;Practical React libraries &lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After covering above topics you will be enough confident on React library and ready to build some real time projects. As you move ahead, you should also focus about performance optimization, caching, cookies, security and SEO. This leads to our last point Advance section.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Advance Topics:&lt;/strong&gt; &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Isomorphic&lt;/li&gt;
&lt;li&gt;GraphQL&lt;/li&gt;
&lt;li&gt;Higher Order Components&lt;/li&gt;
&lt;li&gt;Render Props&lt;/li&gt;
&lt;li&gt;Refs&lt;/li&gt;
&lt;li&gt;Error boundaries&lt;/li&gt;
&lt;li&gt;Portals&lt;/li&gt;
&lt;li&gt;Http Requests : GET, PUT,POST,DELETE(fetch or axios)&lt;/li&gt;
&lt;li&gt;Caching, Cookies, local and session storage
10.Hooks

&lt;ol&gt;
&lt;li&gt;useContext&lt;/li&gt;
&lt;li&gt;useReducer&lt;/li&gt;
&lt;li&gt;useRef&lt;/li&gt;
&lt;li&gt;useMemo&lt;/li&gt;
&lt;li&gt;useCallBack&lt;/li&gt;
&lt;li&gt;Custome Hooks&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Learning journey never get to an end. If you have came this far in your react learning then I will recommend you to learn Typescript and move towards Next JS as Next has removed few drawbacks of React and has so many additional functionalities. People also prefer learning React Native so along with Web you will also be able to build Android and IOS applications. &lt;/p&gt;

&lt;p&gt;My intentions were to give an idea on how React looks like from top and what all useful things it contains. Below are some resources which I found most useful while learning ReactJS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;html and css&lt;/strong&gt; : Code with harry : &lt;a href="https://www.youtube.com/watch?v=GeykycZ4Ixs"&gt;https://www.youtube.com/watch?v=GeykycZ4Ixs&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Book&lt;/strong&gt;: &lt;a href="https://www.amazon.in/HTML-CSS-Design-Build-Websites/dp/1118008189"&gt;https://www.amazon.in/HTML-CSS-Design-Build-Websites/dp/1118008189&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JS required for React JS&lt;/strong&gt; : &lt;a href="https://www.youtube.com/watch?v=XevQlT444qg"&gt;https://www.youtube.com/watch?v=XevQlT444qg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Plain JS&lt;/strong&gt; : &lt;a href="https://www.youtube.com/watch?v=W6NZfCO5SIk"&gt;https://www.youtube.com/watch?v=W6NZfCO5SIk&lt;/a&gt;&lt;br&gt;
JS ES6 : &lt;a href="https://www.youtube.com/watch?v=NCwa_xi0Uuc"&gt;https://www.youtube.com/watch?v=NCwa_xi0Uuc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React JS:&lt;/strong&gt; &lt;br&gt;
playlist :Code evolution :  &lt;a href="https://www.youtube.com/watch?v=QFaFIcGhPoM&amp;amp;list=PLC3y8-rFHvwgg3vaYJgHGnModB54rxOk3"&gt;https://www.youtube.com/watch?v=QFaFIcGhPoM&amp;amp;list=PLC3y8-rFHvwgg3vaYJgHGnModB54rxOk3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mosh : &lt;a href="https://www.youtube.com/watch?v=Ke90Tje7VS0&amp;amp;t=813s"&gt;https://www.youtube.com/watch?v=Ke90Tje7VS0&amp;amp;t=813s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Tip: *&lt;/em&gt;&lt;em&gt;Try making notes on Notion or some other notes making application. Try adding code snippets along with textual information. This will not only help you remember after long time but also you don't have to visit google every time, you can refer your notes.&lt;/em&gt;&lt;/p&gt;


&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Beginners MongoDB Cheat-Sheet</title>
      <author>Shubham Athawane</author>
      <pubDate>Tue, 07 Dec 2021 06:27:41 +0000</pubDate>
      <link>https://dev.to/shubhamathawane/beginners-mongodb-cheat-sheet-19j</link>
      <guid>https://dev.to/shubhamathawane/beginners-mongodb-cheat-sheet-19j</guid>
      <description>&lt;p&gt;1.Enlist available databases&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="err"&gt;→&lt;/span&gt; &lt;span class="nx"&gt;Show&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2 . To Create a new DB&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="err"&gt;→&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3 . See your current working directry&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="err"&gt;→&lt;/span&gt;  &lt;span class="nx"&gt;db&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;4 . Create User&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;pws&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;readWrite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dbAdmin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;5 . Creating Collections&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createCollection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;customers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;6 . Showing Collections&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="nx"&gt;collections&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;7 . Inserting values into collections&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shubham&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Athawane&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;8 . View Collection Records&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//And&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;pretty&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//Note: pretty() will show you result in json formate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;9 . Add new Document in Collections&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instert&lt;/span&gt;&lt;span class="p"&gt;([{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;first_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Virat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;last_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Kohli&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;first_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Taylor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;last_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Swift&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}])&lt;/span&gt;
&lt;span class="c1"&gt;// And -&amp;gt; $set, $inc, $unset&lt;/span&gt;
&lt;span class="c1"&gt;// And &lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Glen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;$set&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;10 . Rename Document&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Virat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;$rename&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;age&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;old&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;11 . Remove document&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>mongodb</category>
      <category>javascript</category>
      <category>mern</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
