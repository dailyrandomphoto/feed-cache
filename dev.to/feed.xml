<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Leverage Being an Introvert for Better Content Creation</title>
      <author>Sumudu Siriwardana</author>
      <pubDate>Mon, 24 Jan 2022 02:54:01 +0000</pubDate>
      <link>https://dev.to/sumusiriwardana/how-to-leverage-being-an-introvert-for-better-content-creation-3mnm</link>
      <guid>https://dev.to/sumusiriwardana/how-to-leverage-being-an-introvert-for-better-content-creation-3mnm</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;‚ÄúIntroverts don‚Äôt shout at the world, they listen!‚Äù&lt;br&gt;
-Jayne Thompson.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The day I learned the word ‚Äúintrovert‚Äù, I finally understood myself completely. I had spent my entire day reading, researching, and taking every test on introversion. Finally, I understood why I don't fit in with most of my friends, why I enjoy my own company most of the time, and there is nothing wrong with me. &lt;/p&gt;

&lt;p&gt;I grew up in a "culture of personality" where everything is designed to cater to extroverts. For example, we were always encouraged and rewarded for working together, speaking up, or asking questions in schools. Likewise, we were promoted and rewarded for marketing ourselves with outgoing personalities at workplaces. Sometimes, we had to pretend to be extroverts in order to fit into the system. &lt;/p&gt;

&lt;p&gt;Technology and this digital age have empowered introverts to thrive and connect with everyone on their own terms. This is becoming a golden age for us to connect, share, and help others with different communication options while living in our own quiet mind, choosing our own terms. This is why introverts are thriving in content creation. The unique characteristics of introversion help us capture our audience with authentic and insightful content.&lt;/p&gt;

&lt;p&gt;I recently had a very interesting session with &lt;a href="https://twitter.com/FrancescoCiull4"&gt;Francesco Ciulla&lt;/a&gt; about &lt;a href="https://www.youtube.com/watch?v=zUwB_imVjmg"&gt;introverts and content creations&lt;/a&gt;. During this session, one of the questions that came up was, &lt;strong&gt;being an introvert makes us better at content creation or not&lt;/strong&gt;. So let's dive into some of the unique strengths that help introverts excel in content creation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introverts-are-good-listeners"&gt;
  &lt;/a&gt;
  Introverts are good listeners
&lt;/h2&gt;

&lt;p&gt;We introverts always prefer to listen more than talk. We only voice our opinion when it's necessary. But, unfortunately, most of the time, most people never truly listen anymore. Instead, they wait to react immediately or voice their opinion. &lt;/p&gt;

&lt;p&gt;When we listen to our audience deeply, we can genuinely understand their needs and problems. As a result, we'll be more empathetic and closer to their minds. This helps us customize our content with different perspectives providing multiple solutions for their problems. &lt;/p&gt;

&lt;p&gt;The same way you listen in real life, start listening to conversations on the internet. Find the social media platforms, forums, content platforms where your relevant topics are popular and observe the discussions. This could be Twitter, Reddit, Instagram, TikTok, or any other platform that you frequently visit. And use your superpowers of listening and observing skills to notice the things that others might not notice. &lt;/p&gt;

&lt;p&gt;Once you patiently listen and understand each perspective, you can develop a solution for these problems and share. When your audience realizes that you listen to them and provide solutions for their problems, they start trusting you. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introverts-get-straight-to-the-point"&gt;
  &lt;/a&gt;
  Introverts get straight to the point
&lt;/h2&gt;

&lt;p&gt;We introverts hate small talk so much and unnecessary details. So we always find ways to authentically communicate and hold attention throughout the stories that we share. &lt;/p&gt;

&lt;p&gt;In today's world, everyone has a very short attention span. Reading through long paragraphs or listing to endless details will quickly discourage someone from reading our articles or listening to our podcasts. &lt;/p&gt;

&lt;p&gt;Use this superpower to structure your content with creative yet straightforward language that your audience will not have to spend much time to get to the important points and a summary of your message that you want to communicate. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introverts-love-helping-others"&gt;
  &lt;/a&gt;
  Introverts love helping others
&lt;/h2&gt;

&lt;p&gt;Since we are deep listeners and more empathetic, we tend to help others. This makes us want to share our knowledge with others and help them genuinely. &lt;/p&gt;

&lt;p&gt;Professionally or personally, you can create authentic and valuable content for your audience to share your knowledge and help them rather than providing redundant content for the sake of content creations. &lt;/p&gt;

&lt;p&gt;For us, it's not about clickbait. It's about the real value that we add to our content to help someone! &lt;/p&gt;

&lt;p&gt;Don't be shy or scared to share your thoughts if you think that you can help someone with even a small word. Your readers will appreciate your support. But think twice whether you are adding real value to your content. If you really want to help, the value matters. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introverts-dont-want-to-be-in-the-spotlight"&gt;
  &lt;/a&gt;
  Introverts don't want to be in the spotlight
&lt;/h2&gt;

&lt;p&gt;As introverts, we never care about being in the spotlight. Instead, we give credit to our teams or shift the attention to our work. &lt;/p&gt;

&lt;p&gt;So when we create content, we never shift the focus to ourselves. This helps us win the trust of our audience and make them listen to us. &lt;/p&gt;

&lt;p&gt;Be more mindful when you are creating content. Always think about the purpose and the audience when you are creating content. The more you understand your audience and the purpose, the easier it is to shift the focus and truly serve the purpose of their needs. &lt;/p&gt;

&lt;p&gt;If you use storytelling as your content strategy, avoid gold plating and be authentic. Shift the focus of your story for your audience's need rather than highlighting yourself or the product too much. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introverts-take-time-to-react"&gt;
  &lt;/a&gt;
  Introverts take time to react
&lt;/h2&gt;

&lt;p&gt;As introverts, we like to process information before reacting to anything asap. So we usually don't react to any comments fast without processing the data and having a solid answer. This helps us to win our audience's trust in our knowledge. &lt;/p&gt;

&lt;p&gt;Also, this quality is beneficial when dealing with critics and negativity. We can take time to process our feeling and thoughts carefully and decide whether to react or not. &lt;/p&gt;

&lt;p&gt;Introvert or not, sometimes you can be very sensitive, but when you come across negativity and trolls, it's better to avoid engagement and not take it personally. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introverts-enjoy-solitude"&gt;
  &lt;/a&gt;
  Introverts enjoy solitude
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Without great solitude, no serious work is possible - Pablo Picasso&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For us introverts, solitude is the source of our energy and quality work! &lt;/p&gt;

&lt;p&gt;We get our most creative ideas, think deeply, and be our authentic selves when we are alone and away from the noisy world. &lt;/p&gt;

&lt;p&gt;It's important to listen to your readers and understand them, but when you create and present your content, you need to have your own opinion and be authentic to win their trust. &lt;/p&gt;

&lt;p&gt;This means understanding yourself, what you believe in, what you stand for. This is the time we can use to understand ourselves, connect with our minds, and find our authentic voice. &lt;/p&gt;

&lt;p&gt;Dedicate this time in your calendar for deep thinking and content creation so that you will start using this time as a habit. It will help you avoid procrastination and be consistent with your content creations. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GW14CBsD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642940197381/HbOS19JBC.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GW14CBsD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642940197381/HbOS19JBC.jpeg" alt="photo-1504805572947-34fad45aed93.jpeg" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@clarktibbs"&gt;Clark Tibbs&lt;/a&gt; from &lt;a href="https://unsplash.com/photos/oqStl2L5oxI"&gt;Unsplash&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Technology has empowered us introverts and facilitated new communication platforms to thrive with our unique strengths. Now it's time for us to understand our strengths, leverage them to create better content, and thrive as content creators! &lt;/p&gt;

&lt;p&gt;I hope this post helps you understand your own strengths and how to use them to create better content.  If you have any more things to add to these qualities, I would love to hear from you üòä&lt;/p&gt;

&lt;p&gt;Feel free to connect with me on &lt;a href="https://twitter.com/sumusiriwardana"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/sumudusiriwardana/"&gt;LinkedIn&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>writing</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Build, deploy and host your Node.js-express application for Free with Utopiops</title>
      <author>mohsen</author>
      <pubDate>Mon, 24 Jan 2022 02:27:36 +0000</pubDate>
      <link>https://dev.to/mohsenkamrani/build-deploy-and-host-your-nodejs-express-application-for-free-with-utopiops-14o6</link>
      <guid>https://dev.to/mohsenkamrani/build-deploy-and-host-your-nodejs-express-application-for-free-with-utopiops-14o6</guid>
      <description>&lt;p&gt;As a software developer or a software development team, the most important thing for you is building quality software, shipping it and getting feedback from your customers. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.utopiops.com"&gt;Utopiops&lt;/a&gt; (utopiops.com) is a new player in town that aims to solve the problem uniquely by giving you a &lt;strong&gt;complete ecosystem&lt;/strong&gt; that supports you &lt;strong&gt;entire platform&lt;/strong&gt; from build, deployment and hosting your applications to monitoring the platform, incident reports and integrations with issue tracking systems.&lt;/p&gt;

&lt;p&gt;Utopiops also supports Fully-managed and Managed applications. The Fully-managed applications are hosted on Utopiops cloud platform, while Managed applications are hosted on your own cloud accounts.&lt;/p&gt;

&lt;p&gt;In his post I show you how to host your applications using Fully-managed applications on Utopiops for free.&lt;/p&gt;

&lt;p&gt;To do so, I have implemented a simple node application with express framework along with a typical Dockerfile.&lt;/p&gt;

&lt;p&gt;This is how &lt;code&gt;server.js&lt;/code&gt; looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello Utopiops!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server is listening on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is my Dockerfile:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM node:16

WORKDIR /usr/src/app

COPY package*.json ./

RUN npm ci --only=production

COPY . .

EXPOSE 3000

CMD [ "node", "server.js" ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I also always have &lt;code&gt;.dockerignore&lt;/code&gt; file in my repositories so I avoid bloating my docker images with unnecessary or unwanted files.&lt;/p&gt;

&lt;p&gt;If you're wondering what it does, it just acts similar to gitignore and simply tell you Dockerfile to ignore those files/directories.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_modules
README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find all these files in the repository &lt;a href="https://github.com/mkamrani/nodejs-express-deployed-on-utopiops"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before we begin the deployment you need to create an account on Utopiops if you already haven't done that before, by registering and verifying your email.&lt;/p&gt;

&lt;p&gt;Now we create a &lt;code&gt;dockerized&lt;/code&gt; application&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nyUGtz5U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642989419231/6Sk6sOITL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nyUGtz5U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642989419231/6Sk6sOITL.png" alt="Screen Shot 2022-01-24 at 12.56.53 pm.png" width="880" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we choose the repository we have stored our code:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8CwacqGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642989612845/-DF8cRdsR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8CwacqGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642989612845/-DF8cRdsR.png" alt="Screen Shot 2022-01-24 at 1.00.08 pm.png" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm using Github for this example, but you can also use Gitlab and Bitbucket too.&lt;/p&gt;

&lt;p&gt;Finally just git your application a name, set the git branch, the port your application is listening on, and an endpoint that can be used as health check. Remember that health-check path is just any endpoint that returns a 2xx response to an unauthorized HTTP GET request.&lt;br&gt;
You can also set the environment variables if you like.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PUbMUD-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642989697441/5W0AMyzlD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PUbMUD-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642989697441/5W0AMyzlD.png" alt="Screen Shot 2022-01-24 at 1.01.33 pm.png" width="880" height="519"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Right away the built-in CICD on Utopiops is set up and starts building and deploying your application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UdxGnEi1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642989870446/7eVGwf2zi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UdxGnEi1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642989870446/7eVGwf2zi.png" alt="Screen Shot 2022-01-24 at 1.04.24 pm.png" width="880" height="547"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see the build logs live as they happen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LO5egvaa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642989942294/dq7PVObDa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LO5egvaa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642989942294/dq7PVObDa.png" alt="Screen Shot 2022-01-24 at 1.05.37 pm.png" width="527" height="825"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And in a just few seconds your application is available (for this example it took 3 seconds to be precise)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pbOKTXcs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642989976254/D5oAqnJsc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pbOKTXcs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642989976254/D5oAqnJsc.png" alt="Screen Shot 2022-01-24 at 1.06.12 pm.png" width="880" height="252"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice that by default HTTPS is provided for you application, just the certificate takes a few minutes to be effective, but guess what! We're working on it to reduce that to few seconds as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l-ZmyafC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642990041364/is2VI2MGs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l-ZmyafC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642990041364/is2VI2MGs.png" alt="Screen Shot 2022-01-24 at 1.07.14 pm.png" width="684" height="102"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Worth mentioning, any time you make a change to your target branch, the new version of your application is built and deployed right away.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#final-note"&gt;
  &lt;/a&gt;
  Final note
&lt;/h2&gt;

&lt;p&gt;We're a very young startup with huge goals in our mind. You can be part of the first users who get to know about our features and our journey.&lt;/p&gt;

&lt;p&gt;Please join our family by joining our &lt;a href="https://discord.gg/WEWGuwkWeF"&gt;discord channel&lt;/a&gt;, following us on &lt;a href="https://twitter.com/utopiops"&gt;Twitter&lt;/a&gt;, and using our service. We have a generous hobby plan!&lt;/p&gt;

&lt;p&gt;Please leave a comment if you have any questions or even want to see a private demo!&lt;/p&gt;

</description>
      <category>devops</category>
      <category>cicd</category>
      <category>cloud</category>
      <category>node</category>
    </item>
    <item>
      <title>How to make a link preview ü§©</title>
      <author>YONKEU KWEYA STEVE JUNIOR</author>
      <pubDate>Mon, 24 Jan 2022 01:35:05 +0000</pubDate>
      <link>https://dev.to/yokwejuste/how-to-make-a-link-preview-2fnf</link>
      <guid>https://dev.to/yokwejuste/how-to-make-a-link-preview-2fnf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction üòä
&lt;/h2&gt;

&lt;p&gt;Today we are diving into a particularly interesting program. We will be discussing link preview.&lt;/p&gt;

&lt;p&gt;For long ago I've been noticing on some social media and apps a small preview of what awaits us in case we click or decide to follow the link, and others not having anything to preview. This has caused a set of variations on the different aspects of this link preview. Without turning around the boring story, let's go through our program.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-link-preview"&gt;
  &lt;/a&gt;
  What is a link preview ü§î
&lt;/h2&gt;

&lt;p&gt;Whenever on social media you add a URL, or when you receive an email message with a URL in the body, you'll see a rich preview that includes a link title, thumbnail image, domain, and description of the link. This is called a link &lt;strong&gt;preview&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Below is a clear example of such.&lt;br&gt;
&lt;/p&gt;
&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fbxPzN8j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642981706422/sch3CcsXG.png" alt="Image.png" width="880" height="495"&gt;&lt;br&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#history-of-the-link"&gt;
  &lt;/a&gt;
  History of the linküßì
&lt;/h2&gt;

&lt;p&gt;In 2010, Facebook launched the Open Graph protocol, which is now managed by the Open Web Foundation. The main purpose is easier integration between Facebook and other websites. The Open Graph Protocol allows controlling what information is used when a website is shared. If websites want to use Open Graph Protocol, they need to have Open Graph meta tags in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; part of the website‚Äôs code. Later run some other platforms such as &lt;a href="https://linkedin.com/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://twitter.com"&gt;Twitter&lt;/a&gt; gradually started following the idea.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-is-it-implemented"&gt;
  &lt;/a&gt;
  How is it implemented? ü•≤
&lt;/h2&gt;

&lt;p&gt;For all my fellow HTML programmers and web development newbies not aware of how powerful the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag together with &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; are. &lt;br&gt;
The implementation of our cute link previews is done using this.&lt;/p&gt;

&lt;p&gt;Below are the following Open Graph attributes we'll use in generating a web link preview.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;strong&gt;Open Graph Title&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This tag has no restrictions as concerned with the words count works the same as the meta &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag. It allows you to define the content‚Äôs title. If Facebook doesn‚Äôt find the &lt;code&gt;og: title&lt;/code&gt; tag, it uses the meta &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; instead and for Twitter, we use &lt;code&gt;twitter: title&lt;/code&gt; This tag is very important because &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; is usually shown in bold.&lt;/p&gt;

&lt;p&gt;Example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;head&amp;gt;
      &amp;lt;meta name="title" 
            content="Yokwejuste's Portfolio"&amp;gt;
           ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; &lt;strong&gt;Open Graph Description&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This tag is again similar to the &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag description. This is where you describe the website‚Äôs content. Similar rules apply to this tag as for the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag. If a social network robot cannot find the &lt;code&gt;og: description&lt;/code&gt; tag, it uses meta description and there is no limit on the number of characters. In this case, you should use around 200 letters.&lt;/p&gt;

&lt;p&gt;Examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;head&amp;gt;
      &amp;lt;meta name="description" 
            content="I wanna leave in the open-source way!üòÖ"&amp;gt;
           ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; &lt;strong&gt;Open Graph Image&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An image is probably the most eye-catching element in the link preview. You can define an image with the &lt;code&gt;og: image&lt;/code&gt; title. Recommended resolution is 1200 pixels x 627 pixels (1.91/1 ratio) and image size shouldn‚Äôt exceed 5MB.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;head&amp;gt;
      &amp;lt;meta property="og:image" 
            content="https://avatars.githubusercontent.com/u/71908316?v=4"&amp;gt;
          ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; &lt;strong&gt;Open Graph Url&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This tag defines the canonical URL for your page. URL provided is not shown on the Facebook newsfeed, only the domain is visible.&lt;/p&gt;

&lt;p&gt;A complete list of &lt;code&gt;og&lt;/code&gt; tags available can be found on the &lt;a href="https://ogp.me/"&gt;Open Graph website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;head&amp;gt;
      &amp;lt;meta property="og:url" content="https://go-records.me"&amp;gt;
     ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#other-minor-raw-og-endraw-tags-include-"&gt;
  &lt;/a&gt;
  Other minor &lt;code&gt;og&lt;/code&gt; tags include :
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;og: audio&lt;/code&gt;: A URL to an audio file to accompany this object.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;g: description&lt;/code&gt;: A one to two-sentence description of your object.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;og: determiner&lt;/code&gt;: The word that appears before this object's title in a sentence. An 
enum of (a, an, the, " ", auto). If auto is chosen, the consumer of your data should 
choose between "a" or "an". Default is " " (blank).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;og: locale&lt;/code&gt;: The locale these tags are marked up in. Of the format 
language_TERRITORY. Default is en_US.&lt;/li&gt;
&lt;li&gt;`og:locale: alternate: An array of other locales this page is available in.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;og:site_name&lt;/code&gt;: If your object is part of a larger website, the name should be displayed for the overall site. e.g., "IMDb".
og:video: A URL to a video file that complements this object.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion ‚úã
&lt;/h2&gt;

&lt;p&gt;After going through this article for sure you will consider doing a preview for your website or customer's product owner.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>news</category>
      <category>webdev</category>
      <category>link</category>
    </item>
    <item>
      <title>Question Mark (?) Operators ASAP</title>
      <author>ayubf</author>
      <pubDate>Mon, 24 Jan 2022 00:58:22 +0000</pubDate>
      <link>https://dev.to/ayubf/question-mark-operators-asap-316d</link>
      <guid>https://dev.to/ayubf/question-mark-operators-asap-316d</guid>
      <description>&lt;p&gt;¬†¬†¬†¬†If you've ever used conditionals in your code you've seen &lt;code&gt;if&lt;/code&gt; statements, and if you've seen &lt;code&gt;if&lt;/code&gt; statements you've seen them nested several layers deep. In your personal project this could be simply annoying and cause problems down the road but in production code this can be really problematic. &lt;/p&gt;

&lt;p&gt;¬†¬†¬†¬†The ternary operator, &lt;code&gt;?:&lt;/code&gt;, is one Question Mark operator and a feature in some programming languages that makes conditional statemnts cleanier and easier to read. The basic syntax goes like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;condition&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In use this would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this snippet, &lt;code&gt;foo&lt;/code&gt; is 1, since the condition is &lt;code&gt;true&lt;/code&gt;, and &lt;code&gt;true&lt;/code&gt; is (obviously) a truthy value.&lt;/p&gt;

&lt;p&gt;If you're not sure what truthy/falsy values are just think of it this way:&lt;/p&gt;

&lt;p&gt;0, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;, empty strings, arrays, objects etc are falsy. All other values are truthy.&lt;/p&gt;

&lt;p&gt;If an expressions result is a falsy value then the statement itself is falsy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a falsy statement, because it returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this article I'll teach you how to use Question Mark operators, and their uses in ES2020.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usages"&gt;
  &lt;/a&gt;
  Usages
&lt;/h2&gt;



&lt;h3&gt;
  &lt;a href="#ternary-operator-raw-endraw-"&gt;
  &lt;/a&gt;
  Ternary Operator (&lt;code&gt;?&lt;/code&gt;)
&lt;/h3&gt;

&lt;p&gt;The first implementation of the &lt;code&gt;?&lt;/code&gt; in JavaScript is the simplest one, the one I showed at the beginning of the article, the ternary operator (&lt;code&gt;?:&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;conditon&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the condition here is true, then the first value after the &lt;code&gt;?&lt;/code&gt; is either assigned or called.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#nullish-coalescingassignment-raw-endraw-"&gt;
  &lt;/a&gt;
  Nullish Coalescing/Assignment (&lt;code&gt;??&lt;/code&gt;)
&lt;/h3&gt;

&lt;p&gt;The next implementation is the &lt;code&gt;??&lt;/code&gt; or nullish operator, which is used in Nullish Coalescing.&lt;/p&gt;

&lt;p&gt;Nullish coalescing looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†¬†¬†¬†&lt;code&gt;value&lt;/code&gt; will become &lt;code&gt;true&lt;/code&gt;. You may be wondering now what's the difference between this and the Logical Or operator (&lt;code&gt;||&lt;/code&gt;)? The &lt;code&gt;||&lt;/code&gt; operator worked well but a problem a lot of people run into sometimes is that it considered values like empty compound types (&lt;code&gt;{}&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;""&lt;/code&gt;) and 0 as falsy so the need for a logical operator that only considered &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; as falsy naturally arose.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#logical-nullish-assignment-raw-endraw-"&gt;
  &lt;/a&gt;
  Logical Nullish Assignment (&lt;code&gt;??=&lt;/code&gt;)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;??=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The third question mark operator is called the Logical Nullish assignment operator, &lt;code&gt;??=&lt;/code&gt;. The gist of this operator is to assign a value &lt;code&gt;y&lt;/code&gt; to a value &lt;code&gt;x&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, and only if it is.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;??=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// val is now 10, because it was null before&lt;/span&gt;


&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;??=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// num stays as 0, because 0 is neither undefined nor null&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;egg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;egg&lt;/span&gt; &lt;span class="o"&gt;??=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scrambled&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// egg is now "scrambled" becuase uninitialized variables are undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#optional-chaining-raw-endraw-"&gt;
  &lt;/a&gt;
  Optional Chaining (&lt;code&gt;?.&lt;/code&gt;)
&lt;/h3&gt;

&lt;p&gt;¬†¬†¬†¬†The last and latest question mark operator is a very useful feature. It allows us to access a value on the value of an object only if it exists. It gets rid of &lt;code&gt;if&lt;/code&gt; statements and &lt;code&gt;try..catch&lt;/code&gt; statements .In the event of a &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; value being returned, there is no error thrown, the value is just &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;John&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;parents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jane&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;John&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt; "John"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;John&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bestFriend&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt; undefined&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;John&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bestFriend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt; Error: Cannot read properties of undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#use-in-other-languages"&gt;
  &lt;/a&gt;
  Use in Other languages
&lt;/h3&gt;

&lt;p&gt;¬†¬†¬†¬†Question mark operators exist in a large number of programming languages, as ternary operations are originally a mathematical concept, these are some examples:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Ternary or similar expression&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C++, Java, JavaScript, C#, C, Bash, Ruby, Swift, PHP&lt;/td&gt;
&lt;td&gt;&lt;code&gt;condition ? if true : else;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;&lt;code&gt;value if conditon else false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rust&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if condition {true} else {false}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if (condition) true else false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;No implimentation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Haskell&lt;/td&gt;
&lt;td&gt;&lt;code&gt;if condition then true else false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;¬†¬†¬†¬†Now with your new-found knowledge of the question mark operators you can go impress your friends, colleagues, teammates or classmates, but don't overdo it. Question mark operators are prone to misuse and can make code unreadable if overused, so don't try to force it in whenever you can.&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#sources"&gt;
  &lt;/a&gt;
  Sources
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator"&gt;MDN Docs: Conditional (ternary) operator&lt;/a&gt; &lt;br&gt;&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator"&gt;MDN Docs: Nullish coalescing operator (??)&lt;/a&gt; &lt;br&gt;&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment"&gt;MDN Docs: Logical nullish assignment (??=)&lt;/a&gt; &lt;br&gt;&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining"&gt;MDN Docs: Optional chaining (?.)&lt;/a&gt; &lt;br&gt;&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/%3F:"&gt;Wikipedia: ?:&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>functional</category>
    </item>
    <item>
      <title>10 GitHub Repositories You Should Know</title>
      <author>Seth Addo</author>
      <pubDate>Mon, 24 Jan 2022 00:24:45 +0000</pubDate>
      <link>https://dev.to/seths10/10-github-repositories-you-should-know-1ce7</link>
      <guid>https://dev.to/seths10/10-github-repositories-you-should-know-1ce7</guid>
      <description>&lt;p&gt;In this article, I have curated a list of GitHub repositories that contains interesting Open Source projects on the internet. There are other resources of all kinds: ranging from basics of API's, roadmaps, and to projects ideas and more. Check the list below;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-developer-roadmap"&gt;
  &lt;/a&gt;
  1. Developer Roadmap
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#github-184k"&gt;
  &lt;/a&gt;
  GitHub‚≠ê: 184K+
&lt;/h4&gt;

&lt;p&gt;Need some advice for getting started to your developer journey? then this &lt;a href="https://github.com/kamranahmedse/developer-roadmap"&gt;repository&lt;/a&gt; will guide you through. It has all the technologies you need to know if you want to become a Frontend or Backend or DevOps Engineer. It has all the alternative technologies from which can choose whatever suits your need or comfort.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-free-programming-books"&gt;
  &lt;/a&gt;
  2. Free Programming Books
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#github-184k"&gt;
  &lt;/a&gt;
  GitHub‚≠ê: 184K+
&lt;/h4&gt;

&lt;p&gt;Even though it has "Books" in its name, it offers a lot more than that. It contains sections of free online courses, interactive programming resources, problem sets and competitive programming, programming playgrounds and podcasts and cheat sheets for almost every programming language.&lt;/p&gt;

&lt;p&gt;But has a major collection of programming books which makes it an "Awesome" collection. &lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Link To Repository&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-ossu-computer-science"&gt;
  &lt;/a&gt;
  3. OSSU Computer Science
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#github-84k"&gt;
  &lt;/a&gt;
  GitHub‚≠ê: 84K+
&lt;/h4&gt;

&lt;p&gt;If you don't have a computer science background or degree and want the equivalent knowledge same as a Computer Science degree then this repository is for you. It's for those who want a proper, well-rounded grounding in concepts fundamental to all computing disciplines. It offers all the resources to help you become a self-taught computer science graduate equivalent and has a worldwide community of learners.&lt;br&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Link To Repository&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-awesome"&gt;
  &lt;/a&gt;
  4. Awesome
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#github-150k"&gt;
  &lt;/a&gt;
  GitHub‚≠ê: 150K+
&lt;/h4&gt;

&lt;p&gt;As the name describes it has an Awesome lists of all kinds of interesting topics ranging from computer science to &lt;strong&gt;media&lt;/strong&gt;, from &lt;strong&gt;gaming&lt;/strong&gt; to &lt;strong&gt;business&lt;/strong&gt; and the list goes on.&lt;br&gt;
&lt;a href="https://github.com/sindresorhus/awesome"&gt;Link To Repository&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#5-public-apis"&gt;
  &lt;/a&gt;
  5. Public API's
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#github-184k"&gt;
  &lt;/a&gt;
  GitHub‚≠ê: 184K+
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/public-apis/public-apis"&gt;Public Apis&lt;/a&gt; has a collective list of all the free &lt;strong&gt;API's&lt;/strong&gt; available on the internet to use in your personal or professional projects. It offers a wide range of Application Programming interfaces (APIs) such as &lt;code&gt;business&lt;/code&gt;, &lt;code&gt;anime&lt;/code&gt;, &lt;code&gt;animals&lt;/code&gt;, &lt;code&gt;news&lt;/code&gt;, &lt;code&gt;finance&lt;/code&gt;, &lt;code&gt;games&lt;/code&gt;, and more.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#6-tech-interview-handbook"&gt;
  &lt;/a&gt;
  6. Tech Interview Handbook
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#github-50k"&gt;
  &lt;/a&gt;
  GitHub‚≠ê: 50K+
&lt;/h4&gt;

&lt;p&gt;It has a variety of material regarding How to prepare for coding interviews, Good questions to ask your interviewer, Helpful tips on &lt;strong&gt;resume&lt;/strong&gt;, and many more.&lt;br&gt;
&lt;a href="https://github.com/yangshun/tech-interview-handbook"&gt;Link To Repository&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#7-awesome-repos"&gt;
  &lt;/a&gt;
  7. Awesome Repos
&lt;/h3&gt;

&lt;p&gt;It has a number of resourceful repositories packed in just one place. All you have to do is just visit this repository and that's it.&lt;br&gt;
&lt;a href="https://github.com/pawelborkar/awesome-repos"&gt;Link To Repository&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#8-build-your-own-x"&gt;
  &lt;/a&gt;
  8. Build Your Own X
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#github-100k"&gt;
  &lt;/a&gt;
  GitHub‚≠ê: 100K+
&lt;/h4&gt;

&lt;p&gt;If you are a person who believes in the principle of "Learning by doing" then this repository has the potential of becoming your daily stop at GitHub. It has links to the resources which help you build your own &lt;code&gt;Cryptocurrency&lt;/code&gt;, &lt;code&gt;Database&lt;/code&gt;, &lt;code&gt;Bots&lt;/code&gt;, &lt;code&gt;BitTorrent Clients&lt;/code&gt;, and many more.&lt;br&gt;
&lt;a href="https://github.com/danistefanovic/build-your-own-x"&gt;Link To Repository&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#9-coding-interview-university"&gt;
  &lt;/a&gt;
  9. Coding Interview University
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#github-160k"&gt;
  &lt;/a&gt;
  GitHub‚≠ê: 160K+
&lt;/h4&gt;

&lt;p&gt;Coding Interview University has a multi-month study plan to become a software engineer for a large tech company like &lt;code&gt;Google&lt;/code&gt;, &lt;code&gt;Amazon&lt;/code&gt;, &lt;code&gt;Facebook&lt;/code&gt;, &lt;code&gt;Apple&lt;/code&gt;, or any other software company. It offers advice on how to study to become a reliability engineer or operations engineer. It also has links to the flashcards for quickly brushing up your knowledge and stay updated originally created by the author of the repository who landed a job at Amazon. And there are much more success stories like that.&lt;br&gt;
&lt;a href="https://github.com/jwasham/coding-interview-university"&gt;Link To Repository&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#10-design-resources-for-developers"&gt;
  &lt;/a&gt;
  10. Design Resources for Developers
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#github-25k"&gt;
  &lt;/a&gt;
  GitHub‚≠ê: 25K+
&lt;/h4&gt;

&lt;p&gt;This repository has a curated list of design and UI resources from &lt;code&gt;stock photos&lt;/code&gt;, &lt;code&gt;web templates&lt;/code&gt;, &lt;code&gt;CSS frameworks&lt;/code&gt;, &lt;code&gt;UI libraries&lt;/code&gt;, &lt;code&gt;tools&lt;/code&gt; and much more, available for free to use in your projects and applications.&lt;br&gt;
&lt;a href="https://github.com/bradtraversy/design-resources-for-developers"&gt;Link To Repository&lt;/a&gt;&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;Thanks for reading this article. Follow me on &lt;a href="https://www.twitter.com/set_addo"&gt;twitter&lt;/a&gt;: @set_addo.&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Follow me on:
Twitter: @set_addo
LinkedIn: Seth Addo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>productivity</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>JavaScript memory model demystified</title>
      <author>Zhenghao He</author>
      <pubDate>Sun, 23 Jan 2022 23:32:17 +0000</pubDate>
      <link>https://dev.to/he_zhenghao/javascript-memory-model-demystified-3ma1</link>
      <guid>https://dev.to/he_zhenghao/javascript-memory-model-demystified-3ma1</guid>
      <description>&lt;p&gt;I admit this title is a little clickbaity. Maybe a more accurate title should be ‚Äúthe JavaScript memory model that is implemented in the current version of V8 demystified (with some oversimplification)‚Äù. &lt;/p&gt;

&lt;p&gt;There are a wealth of resources online such as this claiming that in JavaScript primitive values are allocated on the stack while objects are allocated on the heap. This idea is false, at least this is not how the language is implemented in the majority of JavaScript engines I have seen. I am typing in this post so that I can link to it and save myself some time in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;All JavaScript values are allocated on the heap accessed by pointers no matter if they are objects, arrays, strings or numbers (except for small integers i.e. &lt;code&gt;smi&lt;/code&gt; due to &lt;a href="%5Bhttps://v8.dev/blog/pointer-compression#value-tagging-in-v8%5D(https://v8.dev/blog/pointer-compression#value-tagging-in-v8)"&gt;pointer tagging&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The stack only stores temporary, function-local and small variables (mostly pointers) and that's largely unrelated to JavaScript types.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#they-are-all-implementation-details"&gt;
  &lt;/a&gt;
  They are all implementation details
&lt;/h2&gt;

&lt;p&gt;First of all, the JavaScript language itself doesn‚Äôt mandate memory layout. You cannot find the term ‚ÄúStack‚Äù or ‚ÄúHeap‚Äù used in the ECMAScript specification. In fact, I doubt you can find anything about memory layout in any language specification - even for C++, which is considered much more low-level than JavaScript, does not have the terms defined in &lt;a href="https://en.cppreference.com/w/cpp/language/storage_duration"&gt;its standard&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These are considered implementation details. Asking how JavaScript handles memory allocation is like asking if JavaScript is a compiled or interpreted language. It is a &lt;strong&gt;wrong&lt;/strong&gt; question. What is interpreted or compiled is not the languages but instead implementations - we can easily build simple AST interpreter for JavaScript, or a Stack-based virtual machine, or static LLVM compiler to native code.&lt;/p&gt;

&lt;p&gt;However being an implementation detail doesn‚Äôt mean it is a myth. You can trivially check this yourself by doing memory profiling in Chrome DevTools. If you want the ground truth, you can always look up the source code for the VM - at least for V8 it is all open-sourced. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#everything-is-on-the-heap"&gt;
  &lt;/a&gt;
  Everything is on the heap
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Again, all of the examples in this post are based on V8‚Äôs implementation. The V8 source code is from commit Id &lt;a href="https://chromium.googlesource.com/v8/v8/+/a684fc4c927940a073e3859cbf91c301550f4318"&gt;a684fc4c927940a073e3859cbf91c301550f4318&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Contrary to common belief, primitive values are also allocated on the heap, just like objects. I covered how JavaScript values are implemented in V8 in details &lt;a href="https://www.zhenghao.io/posts/javascript-variables"&gt;in this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you don‚Äôt want to really dig into V8‚Äôs source code, there is an easy way that I can prove this to you.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First use &lt;code&gt;node --v8-options | grep -B0 -A1 stack-size&lt;/code&gt; to get the default size of stack in V8 on your machine. For me it outputs 864 KB.&lt;/li&gt;
&lt;li&gt;Create a JavaScript file. Create a giant string and use &lt;code&gt;process.memoryUsage().heapUsed&lt;/code&gt; to get the size of the heap used.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is a script that does that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;memoryUsed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mbUsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memoryUsage&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;heapUsed&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Memory used: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;mbUsed&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; MB`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;before&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;memoryUsed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bigString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bigString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// need to use the string otherwise the compiler would just optimize it into nothingness&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;after&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;memoryUsed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The size of the heap memory used before we create the string was 3.78 MB.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dTWOqhBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zhenghao.io/art/blog/javascript-memory/before.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dTWOqhBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zhenghao.io/art/blog/javascript-memory/before.png" alt="alt" width="880" height="97"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After I create a string of a size of 10 MB, the heap memory used increases to 13.78 MB&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jpuv86iq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zhenghao.io/art/blog/javascript-memory/after.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jpuv86iq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zhenghao.io/art/blog/javascript-memory/after.png" alt="alt" width="620" height="68"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The difference between the before and after is precisely 10 MB. See the stack size we printed out before, it was only 864 KB - there is no way the stack can store such a string.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#primitive-values-are-mostly-reused"&gt;
  &lt;/a&gt;
  Primitive values are (mostly) reused
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#string-interning"&gt;
  &lt;/a&gt;
  String interning
&lt;/h3&gt;

&lt;p&gt;A quick question: for our 10 MB string created by &lt;code&gt;'x'.repeat(10*1024*1024)&lt;/code&gt;, does an assignment (e.g. &lt;code&gt;const anotherString = bigString&lt;/code&gt;) duplicate the string in memory so that we end up with 20 MB in total allocated on the heap? &lt;/p&gt;

&lt;p&gt;The answer is no - there is no duplicate strings allocated. You can easily verify this by adding &lt;code&gt;const anotherString  = bigString&lt;/code&gt; after the declaration of &lt;code&gt;bigString&lt;/code&gt; and check to see if the heap memory size increases or not. &lt;/p&gt;

&lt;p&gt;You can also check this via memory profiling using Chrome DevTools.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNb9UZdN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zhenghao.io/art/blog/javascript-memory/memoryProfile.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNb9UZdN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zhenghao.io/art/blog/javascript-memory/memoryProfile.png" alt="alt" width="880" height="383"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a html file with the following snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'btn'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;btn&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;  
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;string1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;string2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/body&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the memory profiling and click on the button to create two variables with the same string value &lt;code&gt;foo&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gLwaFzXM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zhenghao.io/art/blog/javascript-memory/onlyOneString.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gLwaFzXM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zhenghao.io/art/blog/javascript-memory/onlyOneString.png" alt="alt" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will see there is only one heap string allocated.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Chrome DevTools do not show where the pointer resides in memory but rather where it points to. Also it does not represent the raw memory address. If you want to inspect the actual memory, you need to use a native debugger.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is called &lt;a href="https://en.wikipedia.org/wiki/String_interning"&gt;string interning&lt;/a&gt;. Inside V8, this is implemented via &lt;code&gt;StringTable&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;explicit&lt;/span&gt; &lt;span class="nf"&gt;StringTable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Isolate&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;isolate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;StringTable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Capacity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;NumberOfElements&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Find string in the string table. If it is not there yet, it is&lt;/span&gt;
  &lt;span class="c1"&gt;// added. The return value is the string found.&lt;/span&gt;
  &lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;LookupString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Isolate&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;isolate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Find string in the string table, using the given key. If the string is not&lt;/span&gt;
  &lt;span class="c1"&gt;// there yet, it is created (by the key) and added. The return value is the&lt;/span&gt;
  &lt;span class="c1"&gt;// string found.&lt;/span&gt;
  &lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;StringTableKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;IsolateT&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;LookupKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IsolateT&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;isolate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;StringTableKey&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#oddballs"&gt;
  &lt;/a&gt;
  Oddballs
&lt;/h2&gt;

&lt;p&gt;There are a special subset of primitive values called &lt;a href="https://chromium.googlesource.com/v8/v8/+/master/src/builtins/base.tq#500"&gt;Oddball&lt;/a&gt; in V8.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Null&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Oddball&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Undefined&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Oddball&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;True&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Oddball&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Oddball&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Oddball&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;EmptyString&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;They are pre-allocated on the heap by V8 before the first line of your script runs - it doesn‚Äôt matter if your JavaScript program actually uses them down the road or not.&lt;/p&gt;

&lt;p&gt;They are always reused - there is only one value of each &lt;code&gt;Oddball&lt;/code&gt; type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Oddballs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emptyString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Oddballs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Oddballs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Take a heap snapshot for this script above we get:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sf2qDIlY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zhenghao.io/art/blog/javascript-memory/oddballs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sf2qDIlY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zhenghao.io/art/blog/javascript-memory/oddballs.png" alt="alt" width="880" height="514"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You see? Each &lt;code&gt;Oddball&lt;/code&gt; type only has the same memory location on the heap even though the values are pointed by different objects' properties. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#numbers-are-complicated"&gt;
  &lt;/a&gt;
  Numbers are complicated
&lt;/h2&gt;

&lt;p&gt;In V8, small integers (the term in V8 is &lt;code&gt;smi&lt;/code&gt;) are &lt;a href="https://v8.dev/blog/pointer-compression#value-tagging-in-v8"&gt;heavily optimized&lt;/a&gt; so they can be encoded inside of a pointer directly without the need to allocate additional storage for it.&lt;/p&gt;

&lt;p&gt;So technically, a &lt;code&gt;smi&lt;/code&gt; can exist on the stack since they don‚Äôt need additional storage allocated on the heap, depending how the variables:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;const a = 123&lt;/code&gt; &lt;strong&gt;could&lt;/strong&gt; be on the stack&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;var a = 123&lt;/code&gt; is on the heap, since it becomes a property of the global object&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also it depends on what the rest of the script is doing, and the runtime environment. The optimizing compiler keeps pointers held in registers as long as it can; it'll spill to the stack only when needed (e.g. registers run out).&lt;/p&gt;

&lt;p&gt;Another comlication about numbers is, unlike other types of primitive values, they might not get reused.&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;smi&lt;/code&gt;, they are encoded as recognizably invalid pointers, which don't point to anything, so the whole concept of "reusing" doesn't really apply to them.&lt;br&gt;
For numbers that are not considered &lt;code&gt;smi&lt;/code&gt;, they are called &lt;code&gt;HeapNumber&lt;/code&gt;. When a &lt;code&gt;HeapNumber&lt;/code&gt; is pointed by an object's property, it becomes a mutable &lt;code&gt;HeapNumber&lt;/code&gt;, which allows updating the value without allocating a new &lt;code&gt;HeapNumber&lt;/code&gt; every time. Because of this optmization, mutable &lt;code&gt;HeapNumber&lt;/code&gt;s are not reused.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyNumbers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;smi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.14&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MyNumbers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MyNumbers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Take a heap snapshot for this script above we get:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hWLCWmp---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zhenghao.io/art/blog/javascript-memory/smi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hWLCWmp---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zhenghao.io/art/blog/javascript-memory/smi.png" alt="alt" width="880" height="386"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can tell that two &lt;code&gt;smi&lt;/code&gt;s are "pointing" to the same memory location &lt;code&gt;@427911&lt;/code&gt; - that is because they have the same bit pattern for the same value &lt;code&gt;123&lt;/code&gt;, and Chrome DevTools still treats them as pointers even though they are invalid pointers due to pointer tagging. &lt;/p&gt;

&lt;p&gt;As to &lt;code&gt;HeapNumber&lt;/code&gt;s, they are pointing to the different memory locations &lt;code&gt;@427915&lt;/code&gt; and &lt;code&gt;@427927&lt;/code&gt;, meaning they are not reused.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#put-these-together"&gt;
  &lt;/a&gt;
  Put these together
&lt;/h2&gt;

&lt;p&gt;Here is a diagram that conceptually illustrates some &lt;strong&gt;possible&lt;/strong&gt; memory layout in V8:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9y0eAHA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zhenghao.io/art/blog/javascript-memory/overview.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9y0eAHA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zhenghao.io/art/blog/javascript-memory/overview.png" alt="alt" width="880" height="366"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts
&lt;/h2&gt;

&lt;p&gt;In preparation for writing this blog post, I pulled out my college textbook on operating system. It's almost 600 pages long, of which a discussion on memory takes about a third of it. &lt;/p&gt;

&lt;p&gt;Computer memory is an incredibly complex topic. And nearly every answer to a question related to memory varies across compilers and processor architectures. For example, our variables are not always in memory (RAM) - they can be loaded directly in the destination registers, become part of instruction as an immediate value, or even get optimized entirely away into nothingness. The compiler can do whatever it wants as long as all the language semantics defined by the specification are preserved - the &lt;a href="https://stackoverflow.com/questions/15718262/what-exactly-is-the-as-if-rule"&gt;as-if rule&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>v8</category>
      <category>programming</category>
    </item>
    <item>
      <title>Stop using static cloud credentials in GitHub Actions</title>
      <author>Lee Briggs</author>
      <pubDate>Sun, 23 Jan 2022 23:20:02 +0000</pubDate>
      <link>https://dev.to/jaxxstorm/stop-using-static-cloud-credentials-in-github-actions-45il</link>
      <guid>https://dev.to/jaxxstorm/stop-using-static-cloud-credentials-in-github-actions-45il</guid>
      <description>&lt;p&gt;Picture the scene. You're configuring your automation pipelines, whether it's deploying infrastructure, applications or any other piece of your CI/CD pipeline that needs to access a cloud provider. You want to do things properly, so you define a well scoped role with a minimum set of permissions that you need for the pipeline to be successful. Then you assign those permissions to your cloud provider's authentication mechanism. If you're lucky, your CI/CD pipeline runs in the cloud too, so you never need to define a set of static credentials.&lt;/p&gt;

&lt;p&gt;If you're not using self hosted runners for your CI/CD pipeline, you might pause for a second. "I need to remember to rotate these credentials" you think. Maybe you'll set a reminder to rotate them in a month's time, or perhaps you'll set up some elaborate mechanism to rotate them. More likely than not, you'll forget about it completely until your wonderful InfoSec team bug you about them, hopefully it'll be for a compliance reasons and not because someone got hold of them.&lt;/p&gt;

&lt;p&gt;Until recently, these hard coded credentials have been not only dangeorus, but unavoidable. Mechanisms for accessing cloud provider from &lt;em&gt;outside&lt;/em&gt; the cloud provider itself have been almost non-existent. You defined an IAM user/service principal/service account/insert other mechanism here and you just...hoped. &lt;/p&gt;

&lt;p&gt;In addition to these credentials being static and hard to rotate, often the credentials stored in CI/CD services can have extremely broad and permissive privileges. If you're running infrastructure automation, for example, you might need to scope the credentials to basically admin permissions, which is an extremely worrying prospect.&lt;/p&gt;

&lt;p&gt;The good news is, this is starting to change, and a well defined protocol is in the middle of these changes. &lt;/p&gt;

&lt;p&gt;If you're using GitHub Actions to as your CI/CD tool of choice, you can now use OIDC with the 3 major cloud providers to securely authenticate to that provider. You can find a long, well defined document in the GitHub documentation &lt;a href="https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect"&gt;here&lt;/a&gt;. This document clearly states the benefit of using OIDC, but for posterity, we'll repeat them here:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;No cloud secrets&lt;/em&gt;: You won't need to duplicate your cloud credentials as long-lived GitHub secrets. Instead, you can configure the OIDC trust on your cloud provider, and then update your workflows to request a short-lived access token from the cloud provider through OIDC.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Authentication and authorization management&lt;/em&gt;: You have more granular control over how workflows can use credentials, using your cloud provider's authentication (authN) and authorization (authZ) tools to control access to cloud resources.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Rotating credentials&lt;/em&gt;: With OIDC, your cloud provider issues a short-lived access token that is only valid for a single workflow run, and then automatically expires.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This all sounds pretty amazing right? No cloud credentials?! How do I set this up?&lt;/p&gt;

&lt;p&gt;In the rest of this blog post, we'll look at how you can use &lt;a href="https://pulumi.com"&gt;Pulumi&lt;/a&gt;'s TypeScript SDKs to quickly an easy set up GitHub actions, so you don't have to manually configure the access!&lt;/p&gt;

&lt;p&gt;It's of course quite possible to use Pulumi's other SDKs, as well as other infrastructure as code tools to do the setup, but we'll use Pulumi in this walkthrough. If you don't want to read a whole blog post, you can go directly to the code &lt;a href="https://github.com/jaxxstorm/secure-cloud-access"&gt;here&lt;/a&gt; with example actions running to show you this does really work, honest.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To jump directly to your cloud provider, use these links: &lt;a href="#aws"&gt;AWS&lt;/a&gt; | &lt;a href="#azure"&gt;Azure&lt;/a&gt; | &lt;a href="#google-cloud"&gt;Google Cloud&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#aws"&gt;
  &lt;/a&gt;
  AWS
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The complete code for this example can be found &lt;a href="https://github.com/jaxxstorm/secure-cloud-access/tree/main/aws"&gt;here&lt;/a&gt;"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;AWS has leaned into OIDC as an authentication mechanism since they introduced &lt;a href="https://aws.amazon.com/blogs/opensource/introducing-fine-grained-iam-roles-service-accounts/"&gt;IAM roles for service accounts&lt;/a&gt; back in 2019. The ability to use OIDC as an authentication mechanism has also been extended to other services, and GitHub actions is one of them.&lt;/p&gt;

&lt;p&gt;We'll need the &lt;a href="https://www.pulumi.com/registry/packages/aws/"&gt;Pulumi AWS provider&lt;/a&gt; in order to interact with AWS, as well as the &lt;a href="https://www.pulumi.com/registry/packages/github/"&gt;GitHub provider&lt;/a&gt;, so make sure you've got those installed in your Pulumi program like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;npm install @pulumi/aws @pulumi/github&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-an-oidc-provider"&gt;
  &lt;/a&gt;
  Create an OIDC Provider
&lt;/h3&gt;

&lt;p&gt;The first step in being able to use OIDC in GitHub actions is to define an OIDC provider.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oidcProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;iam&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OpenIdConnectProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;example&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;thumbprintLists&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;6938fd4d98bab03faadb97b34396831e3780aea1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;clientIdLists&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://github.com/jaxxstorm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sts.amazonaws.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://token.actions.githubusercontent.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The URL is important here, as it the thumprint. You can essentially copy and paste these static values. The &lt;code&gt;clientIDList&lt;/code&gt; needs to be updated to use your GitHub organization, and this can be used across repositories within your GitHub Org.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#define-an-iam-role"&gt;
  &lt;/a&gt;
  Define an IAM Role
&lt;/h3&gt;

&lt;p&gt;Next up, we'll need to define an IAM role. We'll set a condition on this IAM role to scope the role to repository in the &lt;code&gt;Condition&lt;/code&gt; field. You can scope the access to anything that exists in the &lt;a href="https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#understanding-the-oidc-token"&gt;OIDC token&lt;/a&gt; - in this example we're allowing all, because YOLO.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;iam&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;secure-cloud-access&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Access for github.com/jaxxstorm/secure-cloud-access&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;assumeRolePolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2012-10-17&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;Statement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sts:AssumeRoleWithWebIdentity&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Allow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;Condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;StringLike&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;token.actions.githubusercontent.com:sub&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;repo:jaxxstorm/secure-cloud-access:*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// replace with your repo&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;Principal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;Federated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;oidcProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arn&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;iam&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PolicyDocument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next up, we'll need to attach a policy to this role, to define what this repository will be able to do in AWS. In this example I'm going to just add `ReadOnly permissions, but we'll need to be considerate about what this repo is going to do.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`typescript&lt;br&gt;
// get our AWS account ID&lt;br&gt;
const partition = aws.getPartition();&lt;/p&gt;

&lt;p&gt;// Attack the readonlyaccess policy&lt;br&gt;
partition.then((p) =&amp;gt; {&lt;br&gt;
  new aws.iam.PolicyAttachment("readOnly", {&lt;br&gt;
    policyArn: &lt;code&gt;arn:${p.partition}:iam::aws:policy/ReadOnlyAccess&lt;/code&gt;,&lt;br&gt;
    roles: [role.name],&lt;br&gt;
  });&lt;br&gt;
});&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Our final step is to use Pulumi's &lt;code&gt;GitHub&lt;/code&gt; provider to store the role name in a GitHub actions secret, so we can quickly and easy access it from a workflow:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;typescript&lt;br&gt;
new github.ActionsSecret("roleArn", {&lt;br&gt;
  repository: "secure-cloud-access",&lt;br&gt;
  secretName: "ROLE_ARN",&lt;br&gt;
  plaintextValue: role.arn,&lt;br&gt;
});&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Your final Pulumi program will look a bit like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`typescript&lt;br&gt;
import * as aws from "@pulumi/aws";&lt;br&gt;
import * as github from "@pulumi/github"&lt;/p&gt;

&lt;p&gt;const oidcProvider = new aws.iam.OpenIdConnectProvider("secure-cloud-access", {&lt;br&gt;
  thumbprintLists: ["6938fd4d98bab03faadb97b34396831e3780aea1"],&lt;br&gt;
  clientIdLists: ["&lt;a href="https://github.com/jaxxstorm"&gt;https://github.com/jaxxstorm&lt;/a&gt;", "sts.amazonaws.com"],&lt;br&gt;
  url: "&lt;a href="https://token.actions.githubusercontent.com"&gt;https://token.actions.githubusercontent.com&lt;/a&gt;",&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;const role = new aws.iam.Role("secure-cloud-access", {&lt;br&gt;
  description: "Access for github.com/jaxxstorm/secure-cloud-access",&lt;br&gt;
  assumeRolePolicy: {&lt;br&gt;
    Version: "2012-10-17",&lt;br&gt;
    Statement: [&lt;br&gt;
      {&lt;br&gt;
        Action: ["sts:AssumeRoleWithWebIdentity"],&lt;br&gt;
        Effect: "Allow",&lt;br&gt;
        Condition: {&lt;br&gt;
          StringLike: {&lt;br&gt;
            "token.actions.githubusercontent.com:sub":&lt;br&gt;
              "repo:jaxxstorm/secure-cloud-access:*",&lt;br&gt;
          },&lt;br&gt;
        },&lt;br&gt;
        Principal: {&lt;br&gt;
          Federated: [oidcProvider.arn],&lt;br&gt;
        },&lt;br&gt;
      },&lt;br&gt;
    ],&lt;br&gt;
  } as aws.iam.PolicyDocument,&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;const partition = aws.getPartition();&lt;/p&gt;

&lt;p&gt;partition.then((p) =&amp;gt; {&lt;br&gt;
  new aws.iam.PolicyAttachment("readOnly", {&lt;br&gt;
    policyArn: &lt;code&gt;arn:${p.partition}:iam::aws:policy/ReadOnlyAccess&lt;/code&gt;,&lt;br&gt;
    roles: [role.name],&lt;br&gt;
  });&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;new github.ActionsSecret("roleArn", {&lt;br&gt;
  repository: "secure-cloud-access",&lt;br&gt;
  secretName: "ROLE_ARN",&lt;br&gt;
  plaintextValue: role.arn,&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;export const roleArn = role.arn;&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#define-your-github-actions-workflow"&gt;
  &lt;/a&gt;
  Define your GitHub Actions workflow
&lt;/h3&gt;

&lt;p&gt;Now, let's define a workflow to verify what credentials we got:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`yaml&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-workflow-creates-static-website-using-aws-s3"&gt;
  &lt;/a&gt;
  The workflow Creates static website using aws s3
&lt;/h1&gt;

&lt;p&gt;name: AWS Workflow&lt;br&gt;
on:&lt;br&gt;
  push&lt;br&gt;
permissions:&lt;br&gt;
  id-token: write&lt;br&gt;
  contents: read&lt;br&gt;
jobs:&lt;br&gt;
  CheckAccess:&lt;br&gt;
    runs-on: ubuntu-latest&lt;br&gt;
    steps:&lt;br&gt;
      - name: Git clone the repository&lt;br&gt;
        uses: actions/checkout@v2&lt;br&gt;
      - name: configure aws credentials&lt;br&gt;
        uses: aws-actions/configure-aws-credentials@master&lt;br&gt;
        with:&lt;br&gt;
          role-to-assume: ${{ secrets.ROLE_ARN }}&lt;br&gt;
          role-session-name: githubactions&lt;br&gt;
          aws-region: us-west-2&lt;br&gt;
      - name:  Check permissions&lt;br&gt;
        run: |&lt;br&gt;
          aws sts get-caller-identity&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You'll notice we're passing the &lt;code&gt;ROLE_ARN&lt;/code&gt; from the repository secret directly, so we don't have to hardcode anything. Now, run your Pulumi program to create all the AWS resources needed, and check everything in. You should have access to AWS with &lt;code&gt;ReadOnly&lt;/code&gt; access, without having to specify any AWS credentials!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#azure"&gt;
  &lt;/a&gt;
  Azure
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The complete code for this example can be found &lt;a href="https://github.com/jaxxstorm/secure-cloud-access/tree/main/azure"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To configure "credentialless access" in Azure, we can follow a similar pattern. We'll need to use Pulumi's &lt;a href="https://www.pulumi.com/registry/packages/azuread/"&gt;Azure AD&lt;/a&gt; provider, the &lt;a href="https://www.pulumi.com/registry/packages/github/"&gt;GitHub&lt;/a&gt; as well as the &lt;a href="https://www.pulumi.com/registry/packages/azure-native/"&gt;Azure Native&lt;/a&gt; provider. We're also going to use the Azure SDK to make our life a little easier, so make sure you've run the following in your Pulumi program before you proceed:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;yaml&lt;br&gt;
npm install @pulumi/azure-native @pulumi/azuread @pulumi/github @azure/arm-authorization @azure/ms-rest-js&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-an-azure-ad-application-and-service-principal"&gt;
  &lt;/a&gt;
  Create an Azure AD Application and Service Principal
&lt;/h3&gt;

&lt;p&gt;Our first step is to define the user that GitHub actions will use to get its permissions. We create an Azure AD Application, a Service Principal and a random password, like so:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`typescript&lt;br&gt;
// create an azure AD application&lt;br&gt;
const adApp = new azuread.Application("gha", {&lt;br&gt;
  displayName: "githubActions",&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;// create a service principal&lt;br&gt;
const adSp = new azuread.ServicePrincipal(&lt;br&gt;
  "ghaSp",&lt;br&gt;
  { applicationId: adApp.applicationId },&lt;br&gt;
  { parent: adApp }&lt;br&gt;
);&lt;/p&gt;

&lt;p&gt;// mandatory SP password&lt;br&gt;
const adSpPassword = new azuread.ServicePrincipalPassword(&lt;br&gt;
  "aksSpPassword",&lt;br&gt;
  {&lt;br&gt;
    servicePrincipalId: adSp.id,&lt;br&gt;
    endDate: "2099-01-01T00:00:00Z",&lt;br&gt;
  },&lt;br&gt;
  { parent: adSp }&lt;br&gt;
);&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-federated-identity-credential"&gt;
  &lt;/a&gt;
  Create a Federated Identity Credential
&lt;/h3&gt;

&lt;p&gt;Now here comes the magic. We're going to create a Federated Identity credential, which has a subject for our repository in it. Azure is stricter about the subject than AWS, so we'll need to define what part of the OIDC token we want to allow access. In this example, I'm allowing the main branch access, but you can use any part of the &lt;a href="https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#understanding-the-oidc-token"&gt;OIDC token&lt;/a&gt; like the environment.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`typescript&lt;br&gt;
/*&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is the magic. We set the subject to the repo we're running from&lt;/li&gt;
&lt;li&gt;Also need to ensure your AD Application is the one where access is defined
*/
new azuread.ApplicationFederatedIdentityCredential(
"gha",
{
audiences: ["api://AzureADTokenExchange"],
subject: "repo:jaxxstorm/secure-cloud-access:ref:refs/heads/main", // this can be any ref
issuer: "&lt;a href="https://token.actions.githubusercontent.com"&gt;https://token.actions.githubusercontent.com&lt;/a&gt;",
applicationObjectId: adApp.objectId,
displayName: "github-actions",
},
{ parent: adApp }
);
`&lt;code&gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#define-a-permissions-this-application-gets"&gt;
  &lt;/a&gt;
  Define a permissions this application gets
&lt;/h3&gt;

&lt;p&gt;Now we've got the federated identity credential, we need to create a role assignment. There's going to be a lot to unpack here, so let's look at the code first, then walk through it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`typescript&lt;/p&gt;

&lt;p&gt;import { AuthorizationManagementClient } from "@azure/arm-authorization";&lt;br&gt;
import { TokenCredentials } from "@azure/ms-rest-js";&lt;br&gt;
import * as authorization from "@pulumi/azure-native/authorization";&lt;/p&gt;

&lt;p&gt;async function getAuthorizationManagementClient(): Promise {&lt;br&gt;
  const config = await authorization.getClientConfig();&lt;br&gt;
  const token = await authorization.getClientToken();&lt;br&gt;
  const credentials = new TokenCredentials(token.token);&lt;br&gt;
  // Note: reuse the credentials and/or the client in case your scenario needs&lt;br&gt;
  // multiple calls to Azure SDKs.&lt;br&gt;
  return new AuthorizationManagementClient(credentials, config.subscriptionId);&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;async function getRoleIdByName(&lt;br&gt;
  roleName: string,&lt;br&gt;
  scope?: string&lt;br&gt;
): Promise {&lt;br&gt;
  const client = await getAuthorizationManagementClient();&lt;br&gt;
  const roles = await client.roleDefinitions.list(scope || "", {&lt;br&gt;
    filter: &lt;code&gt;roleName eq '${roleName}'&lt;/code&gt;,&lt;br&gt;
  });&lt;br&gt;
  if (roles.length === 0) {&lt;br&gt;
    throw new Error(&lt;code&gt;role "${roleName}" not found at scope "${scope}"&lt;/code&gt;);&lt;br&gt;
  }&lt;br&gt;
  if (roles.length &amp;gt; 1) {&lt;br&gt;
    throw new Error(&lt;br&gt;
      &lt;code&gt;too many roles "${roleName}" found at scope "${scope}". Found: ${roles.length}&lt;/code&gt;&lt;br&gt;
    );&lt;br&gt;
  }&lt;br&gt;
  const role = roles[0];&lt;br&gt;
  return role.id!;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;const subInfo = authorization.getClientConfig();&lt;/p&gt;

&lt;p&gt;subInfo.then((info) =&amp;gt; {&lt;br&gt;
    new authorization.RoleAssignment("readOnly", {&lt;br&gt;
    principalId: adSp.id,&lt;br&gt;
    principalType: authorization.PrincipalType.ServicePrincipal,&lt;br&gt;
    scope: pulumi.interpolate&lt;code&gt;/subscriptions/${info.subscriptionId}&lt;/code&gt;,&lt;br&gt;
    roleDefinitionId: getRoleIdByName("Reader"),&lt;br&gt;
  });&lt;br&gt;
});&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Huge thanks to &lt;a href="https://twitter.com/mikhailshilkov"&gt;Mikhail Shilkov&lt;/a&gt; here for his prior art on retrieving the &lt;code&gt;roleDefinitionId&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why do we need all this? Well, we could hard code the &lt;code&gt;roleDefinitionId&lt;/code&gt; but looking it up is cleaner. Let's step through it:&lt;/p&gt;

&lt;p&gt;First we define an auth client to talk to Azure using the Azure TypeScript SDK&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;typescript&lt;br&gt;
async function getAuthorizationManagementClient():  Promise&amp;lt;AuthorizationManagementClient&amp;gt; {&lt;br&gt;
  const config = await authorization.getClientConfig();&lt;br&gt;
  const token = await authorization.getClientToken();&lt;br&gt;
  const credentials = new TokenCredentials(token.token);&lt;br&gt;
  // Note: reuse the credentials and/or the client in case your scenario needs&lt;br&gt;
  // multiple calls to Azure SDKs.&lt;br&gt;
  return new AuthorizationManagementClient(credentials, config.subscriptionId);&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, we define a function which can look up an Azure role by its name, rather than the long string you define it by:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;typescript&lt;br&gt;
async function getRoleIdByName(&lt;br&gt;
  roleName: string,&lt;br&gt;
  scope?: string&lt;br&gt;
): Promise&amp;lt;string&amp;gt; {&lt;br&gt;
  const client = await getAuthorizationManagementClient();&lt;br&gt;
  const roles = await client.roleDefinitions.list(scope || "", {&lt;br&gt;
    filter:&lt;/code&gt;roleName eq '${roleName}'&lt;code&gt;,&lt;br&gt;
  });&lt;br&gt;
  if (roles.length === 0) {&lt;br&gt;
    throw new Error(&lt;/code&gt;role "${roleName}" not found at scope "${scope}"&lt;code&gt;);&lt;br&gt;
  }&lt;br&gt;
  if (roles.length &amp;gt; 1) {&lt;br&gt;
    throw new Error(&lt;br&gt;
&lt;/code&gt;too many roles "${roleName}" found at scope "${scope}". Found: ${roles.length}&lt;code&gt;&lt;br&gt;
    );&lt;br&gt;
  }&lt;br&gt;
  const role = roles[0];&lt;br&gt;
  return role.id!;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, we use &lt;code&gt;azure-native&lt;/code&gt;'s &lt;code&gt;authorization&lt;/code&gt; package to get the current client information:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;typescript&lt;br&gt;
const subInfo = authorization.getClientConfig();&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, we can create a role assignment for our service principal that defines the ReadOnly permission:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;typescript&lt;br&gt;
subInfo.then((info) =&amp;gt; {&lt;br&gt;
    new authorization.RoleAssignment("readOnly", {&lt;br&gt;
    principalId: adSp.id,&lt;br&gt;
    principalType: authorization.PrincipalType.ServicePrincipal,&lt;br&gt;
    scope: pulumi.interpolate&lt;/code&gt;/subscriptions/${info.subscriptionId}&lt;code&gt;,&lt;br&gt;
    roleDefinitionId: getRoleIdByName("Reader"),&lt;br&gt;
  });&lt;br&gt;
});&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;At this stage, our service principal has read only permissions on the subscription we're using. Now, let's allow GitHub actions to use it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#define-github-secrets"&gt;
  &lt;/a&gt;
  Define GitHub secrets
&lt;/h3&gt;

&lt;p&gt;Our final step is to define the GitHub secrets that we use in our workflow:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`typescript&lt;br&gt;
subInfo.then((info) =&amp;gt; {&lt;/p&gt;

&lt;p&gt;// define some github actions secrets so your AZ login is correct&lt;br&gt;
  new github.ActionsSecret("tenantId", {&lt;br&gt;
    repository: "secure-cloud-access",&lt;br&gt;
    secretName: "AZURE_TENANT_ID",&lt;br&gt;
    plaintextValue: info.tenantId,&lt;br&gt;
  });&lt;/p&gt;

&lt;p&gt;new github.ActionsSecret("subscriptionId", {&lt;br&gt;
    repository: "secure-cloud-access",&lt;br&gt;
    secretName: "AZURE_SUBSCRIPTION_ID",&lt;br&gt;
    plaintextValue: info.subscriptionId,&lt;br&gt;
  });&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;// finally, we set the client id to be the application we created&lt;br&gt;
new github.ActionsSecret("clientId", {&lt;br&gt;
  repository: "secure-cloud-access",&lt;br&gt;
  secretName: "AZURE_CLIENT_ID",&lt;br&gt;
  plaintextValue: adApp.applicationId,&lt;br&gt;
});&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note, we need to define the &lt;code&gt;tenantId&lt;/code&gt; and &lt;code&gt;subcriptionId&lt;/code&gt; inside the promise returned by the &lt;code&gt;subInfo&lt;/code&gt; call. The &lt;code&gt;clientId&lt;/code&gt; is set to our Azure AD application client id.&lt;/p&gt;

&lt;p&gt;Our complete Pulumi program looks like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`typescript&lt;br&gt;
import * as pulumi from "@pulumi/pulumi";&lt;br&gt;
import * as authorization from "@pulumi/azure-native/authorization";&lt;br&gt;
import * as azuread from "@pulumi/azuread";&lt;br&gt;
import * as github from "@pulumi/github";&lt;/p&gt;

&lt;p&gt;import { AuthorizationManagementClient } from "@azure/arm-authorization";&lt;br&gt;
import { TokenCredentials } from "@azure/ms-rest-js";&lt;/p&gt;

&lt;p&gt;async function getAuthorizationManagementClient(): Promise {&lt;br&gt;
  const config = await authorization.getClientConfig();&lt;br&gt;
  const token = await authorization.getClientToken();&lt;br&gt;
  const credentials = new TokenCredentials(token.token);&lt;br&gt;
  // Note: reuse the credentials and/or the client in case your scenario needs&lt;br&gt;
  // multiple calls to Azure SDKs.&lt;br&gt;
  return new AuthorizationManagementClient(credentials, config.subscriptionId);&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;async function getRoleIdByName(&lt;br&gt;
  roleName: string,&lt;br&gt;
  scope?: string&lt;br&gt;
): Promise {&lt;br&gt;
  const client = await getAuthorizationManagementClient();&lt;br&gt;
  const roles = await client.roleDefinitions.list(scope || "", {&lt;br&gt;
    filter: &lt;code&gt;roleName eq '${roleName}'&lt;/code&gt;,&lt;br&gt;
  });&lt;br&gt;
  if (roles.length === 0) {&lt;br&gt;
    throw new Error(&lt;code&gt;role "${roleName}" not found at scope "${scope}"&lt;/code&gt;);&lt;br&gt;
  }&lt;br&gt;
  if (roles.length &amp;gt; 1) {&lt;br&gt;
    throw new Error(&lt;br&gt;
      &lt;code&gt;too many roles "${roleName}" found at scope "${scope}". Found: ${roles.length}&lt;/code&gt;&lt;br&gt;
    );&lt;br&gt;
  }&lt;br&gt;
  const role = roles[0];&lt;br&gt;
  return role.id!;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;// create an azure AD application&lt;br&gt;
const adApp = new azuread.Application("gha", {&lt;br&gt;
  displayName: "githubActions",&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;// create a service principal&lt;br&gt;
const adSp = new azuread.ServicePrincipal(&lt;br&gt;
  "ghaSp",&lt;br&gt;
  { applicationId: adApp.applicationId },&lt;br&gt;
  { parent: adApp }&lt;br&gt;
);&lt;/p&gt;

&lt;p&gt;// mandatory SP password&lt;br&gt;
const adSpPassword = new azuread.ServicePrincipalPassword(&lt;br&gt;
  "aksSpPassword",&lt;br&gt;
  {&lt;br&gt;
    servicePrincipalId: adSp.id,&lt;br&gt;
    endDate: "2099-01-01T00:00:00Z",&lt;br&gt;
  },&lt;br&gt;
  { parent: adSp }&lt;br&gt;
);&lt;/p&gt;

&lt;p&gt;/*&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is the magic. We set the subject to the repo we're running from&lt;/li&gt;
&lt;li&gt;Also need to ensure your AD Application is the one where access is defined
*/
new azuread.ApplicationFederatedIdentityCredential(
"gha",
{
audiences: ["api://AzureADTokenExchange"],
subject: "repo:jaxxstorm/secure-cloud-access:ref:refs/heads/main", // this can be any ref
issuer: "&lt;a href="https://token.actions.githubusercontent.com"&gt;https://token.actions.githubusercontent.com&lt;/a&gt;",
applicationObjectId: adApp.objectId,
displayName: "github-actions",
},
{ parent: adApp }
);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;// retrieve the current tenant and subscription&lt;br&gt;
const subInfo = authorization.getClientConfig();&lt;/p&gt;

&lt;p&gt;subInfo.then((info) =&amp;gt; {&lt;/p&gt;

&lt;p&gt;// define some github actions secrets so your AZ login is correct&lt;br&gt;
  new github.ActionsSecret("tenantId", {&lt;br&gt;
    repository: "secure-cloud-access",&lt;br&gt;
    secretName: "AZURE_TENANT_ID",&lt;br&gt;
    plaintextValue: info.tenantId,&lt;br&gt;
  });&lt;/p&gt;

&lt;p&gt;new github.ActionsSecret("subscriptionId", {&lt;br&gt;
    repository: "secure-cloud-access",&lt;br&gt;
    secretName: "AZURE_SUBSCRIPTION_ID",&lt;br&gt;
    plaintextValue: info.subscriptionId,&lt;br&gt;
  });&lt;/p&gt;

&lt;p&gt;/* define a role assignment so we have permissions on the subscription&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We use the helper to get the role by name, but you can of course define it explicitly
*/
new authorization.RoleAssignment("readOnly", {
principalId: adSp.id,
principalType: authorization.PrincipalType.ServicePrincipal,
scope: pulumi.interpolate&lt;code&gt;/subscriptions/${info.subscriptionId}&lt;/code&gt;,
roleDefinitionId: getRoleIdByName("Reader"),
});
});&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;// finally, we set the client id to be the application we created&lt;br&gt;
new github.ActionsSecret("clientId", {&lt;br&gt;
  repository: "secure-cloud-access",&lt;br&gt;
  secretName: "AZURE_CLIENT_ID",&lt;br&gt;
  plaintextValue: adApp.applicationId,&lt;br&gt;
});&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Run your Pulumi program and define all your infrastructure, then we can define our workflow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#define-the-github-actions-workflow"&gt;
  &lt;/a&gt;
  Define the GitHub Actions workflow
&lt;/h3&gt;

&lt;p&gt;Our GitHub actions workflow will use the secrets we defined to know how to authenticate. It looks a little bit like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`yaml&lt;br&gt;
name: Run Azure Login with OpenID Connect&lt;br&gt;
on: [push]&lt;/p&gt;

&lt;p&gt;permissions:&lt;br&gt;
  id-token: write&lt;br&gt;
  contents: read&lt;/p&gt;

&lt;p&gt;jobs: &lt;br&gt;
  CheckAccess:&lt;br&gt;
    runs-on: ubuntu-latest&lt;br&gt;
    steps:&lt;br&gt;
    - name: 'Az CLI login'&lt;br&gt;
      uses: azure/login@v1&lt;br&gt;
      with:&lt;br&gt;
        client-id: ${{ secrets.AZURE_CLIENT_ID }}&lt;br&gt;
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}&lt;br&gt;
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- name: 'Run Azure CLI commands'
  run: |
      az account show
      az group list
      pwd 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Check all this in, and watch the magic as GitHub Actions is now authenticated against Azure!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#google-cloud"&gt;
  &lt;/a&gt;
  Google Cloud
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The complete code for this example can be found &lt;a href="https://github.com/jaxxstorm/secure-cloud-access/tree/main/gcp"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Google Cloud supports OIDC authentication using workflow providers. We'll use the &lt;code&gt;@pulumi/gcp&lt;/code&gt; and &lt;code&gt;@pulumi/google-native&lt;/code&gt; to achieve our goals here, so make sure the following packages are installed in your Pulumi program:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;yaml&lt;br&gt;
npm install @pulumi/gcp @pulumi/google-native&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#define-the-service-account"&gt;
  &lt;/a&gt;
  Define the Service Account
&lt;/h2&gt;

&lt;p&gt;We'll need a GCP service account to for GitHub actions to use. We'll assign the service account the &lt;code&gt;viewer&lt;/code&gt; role:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`typescript&lt;br&gt;
const serviceAccount = new google.iam.v1.ServiceAccount(name, {&lt;br&gt;
    accountId: "github-actions"&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;new gcp.projects.IAMMember("github-actions", {&lt;br&gt;
    role: "roles/viewer",&lt;br&gt;
    member: pulumi.interpolate&lt;code&gt;serviceAccount:${serviceAccount.email}&lt;/code&gt;&lt;br&gt;
})&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-workloadidentitypool"&gt;
  &lt;/a&gt;
  Create a WorkloadIdentityPool
&lt;/h3&gt;

&lt;p&gt;Now we'll define a workload identity pool for GitHub actions to use&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;typescript&lt;br&gt;
const identityPool = new gcp.iam.WorkloadIdentityPool("github-actions", {&lt;br&gt;
  disabled: false,&lt;br&gt;
  workloadIdentityPoolId:&lt;/code&gt;github-actions&lt;code&gt;,&lt;br&gt;
});&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-workloadidentitypoolprovider"&gt;
  &lt;/a&gt;
  Create a WorkloadIdentityPoolProvider
&lt;/h2&gt;

&lt;p&gt;We'll now need to define a provider for this workload identity pool. The mappings section is important, here is where we map Google OIDC subjects to the OIDC token objects. The following works pretty well:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;typescript&lt;br&gt;
const identityPoolProvider = new gcp.iam.WorkloadIdentityPoolProvider(&lt;br&gt;
  "github-actions",&lt;br&gt;
  {&lt;br&gt;
    workloadIdentityPoolId: identityPool.workloadIdentityPoolId,&lt;br&gt;
    workloadIdentityPoolProviderId: "github-actions",&lt;br&gt;
    oidc: {&lt;br&gt;
      issuerUri: "https://token.actions.githubusercontent.com",&lt;br&gt;
    },&lt;br&gt;
    attributeMapping: {&lt;br&gt;
      "google.subject": "assertion.sub",&lt;br&gt;
      "attribute.actor": "assertion.actor",&lt;br&gt;
      "attribute.repository": "assertion.repository",&lt;br&gt;
    },&lt;br&gt;
  }&lt;br&gt;
);&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#assign-the-workload-identity-permission"&gt;
  &lt;/a&gt;
  Assign the workload identity permission
&lt;/h2&gt;

&lt;p&gt;Now we've defined the workload identity and provider, we need to allow our earlier defined service account to use these new resources:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;typescript&lt;br&gt;
new gcp.serviceaccount.IAMMember("repository", {&lt;br&gt;
    serviceAccountId: serviceAccount.name,&lt;br&gt;
    role: "roles/iam.workloadIdentityUser",&lt;br&gt;
    member: pulumi.interpolate&lt;/code&gt;principalSet://iam.googleapis.com/${identityPool.name}/attribute.repository/jaxxstorm/secure-cloud-access&lt;code&gt;&lt;br&gt;
})&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Notice here that we interpolate the name of the identity pool, and also the name of the repository that we want to access.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-the-github-actions-secrets"&gt;
  &lt;/a&gt;
  Create the GitHub actions secrets
&lt;/h3&gt;

&lt;p&gt;Now we'll store some important information in GitHub secrets so we don't have to hardcode them in our workflow:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`typescript&lt;br&gt;
new github.ActionsSecret("identityProvider", {&lt;br&gt;
  repository: "secure-cloud-access",&lt;br&gt;
  secretName: "WORKLOAD_IDENTITY_PROVIDER",&lt;br&gt;
  plaintextValue: identityPoolProvider.name,&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;new github.ActionsSecret("subscriptionId", {&lt;br&gt;
  repository: "secure-cloud-access",&lt;br&gt;
  secretName: "SERVICE_ACCOUNT_EMAIL",&lt;br&gt;
  plaintextValue: serviceAccount.email,&lt;br&gt;
});&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We're storing the identity pool provider name, and the service account we created's email address as actions.&lt;/p&gt;

&lt;p&gt;Your complete Pulumi program should look like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`typescript&lt;br&gt;
import * as pulumi from "@pulumi/pulumi";&lt;br&gt;
import * as gcp from "@pulumi/gcp";&lt;br&gt;
import * as google from "@pulumi/google-native";&lt;br&gt;
import * as github from "@pulumi/github";&lt;/p&gt;

&lt;p&gt;const name = "github-actions";&lt;/p&gt;

&lt;p&gt;const serviceAccount = new google.iam.v1.ServiceAccount(name, {&lt;br&gt;
  accountId: "github-actions",&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;new gcp.projects.IAMMember("github-actions", {&lt;br&gt;
  role: "roles/viewer",&lt;br&gt;
  member: pulumi.interpolate&lt;code&gt;serviceAccount:${serviceAccount.email}&lt;/code&gt;,&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;const identityPool = new gcp.iam.WorkloadIdentityPool("github-actions", {&lt;br&gt;
  disabled: false,&lt;br&gt;
  workloadIdentityPoolId: &lt;code&gt;${name}-4&lt;/code&gt;,&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;const identityPoolProvider = new gcp.iam.WorkloadIdentityPoolProvider(&lt;br&gt;
  "github-actions",&lt;br&gt;
  {&lt;br&gt;
    workloadIdentityPoolId: identityPool.workloadIdentityPoolId,&lt;br&gt;
    workloadIdentityPoolProviderId: &lt;code&gt;${name}&lt;/code&gt;,&lt;br&gt;
    oidc: {&lt;br&gt;
      issuerUri: "&lt;a href="https://token.actions.githubusercontent.com"&gt;https://token.actions.githubusercontent.com&lt;/a&gt;",&lt;br&gt;
    },&lt;br&gt;
    attributeMapping: {&lt;br&gt;
      "google.subject": "assertion.sub",&lt;br&gt;
      "attribute.actor": "assertion.actor",&lt;br&gt;
      "attribute.repository": "assertion.repository",&lt;br&gt;
    },&lt;br&gt;
  }&lt;br&gt;
);&lt;/p&gt;

&lt;p&gt;new gcp.serviceaccount.IAMMember("repository", {&lt;br&gt;
  serviceAccountId: serviceAccount.name,&lt;br&gt;
  role: "roles/iam.workloadIdentityUser",&lt;br&gt;
  member: pulumi.interpolate&lt;code&gt;principalSet://iam.googleapis.com/${identityPool.name}/attribute.repository/jaxxstorm/secure-cloud-access&lt;/code&gt;,&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;new github.ActionsSecret("identityProvider", {&lt;br&gt;
  repository: "secure-cloud-access",&lt;br&gt;
  secretName: "WORKLOAD_IDENTITY_PROVIDER",&lt;br&gt;
  plaintextValue: identityPoolProvider.name,&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;new github.ActionsSecret("subscriptionId", {&lt;br&gt;
  repository: "secure-cloud-access",&lt;br&gt;
  secretName: "SERVICE_ACCOUNT_EMAIL",&lt;br&gt;
  plaintextValue: serviceAccount.email,&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;export const workloadIdentityProviderUrl = identityPoolProvider.name;&lt;br&gt;
export const serviceAccountEmail = serviceAccount.email;&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Run your Pulumi program, created the needed resources and then we can define our workflow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#define-the-workflow"&gt;
  &lt;/a&gt;
  Define the workflow
&lt;/h3&gt;

&lt;p&gt;Now we've configured all the access we need, we can define a workflow to check our access:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`yaml&lt;br&gt;
name: List services in GCP&lt;br&gt;
on:&lt;br&gt;
  push&lt;/p&gt;

&lt;p&gt;permissions:&lt;br&gt;
  id-token: write&lt;/p&gt;

&lt;p&gt;jobs:&lt;br&gt;
  Get_OIDC_ID_token:&lt;br&gt;
    runs-on: ubuntu-latest&lt;br&gt;
    steps:&lt;br&gt;
    - id: 'auth'&lt;br&gt;
      name: 'Authenticate to GCP'&lt;br&gt;
      uses: 'google-github-actions/&lt;a href="mailto:auth@v0.3.1"&gt;auth@v0.3.1&lt;/a&gt;'&lt;br&gt;
      with:&lt;br&gt;
          create_credentials_file: 'true'&lt;br&gt;
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}&lt;br&gt;
          service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}&lt;br&gt;
    - id: 'gcloud'&lt;br&gt;
      name: 'gcloud'&lt;br&gt;
      run: |-&lt;br&gt;
        gcloud auth login --brief --cred-file="${{ steps.auth.outputs.credentials_file_path }}" --project briggs-237615&lt;br&gt;
        gcloud auth list&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We're using the &lt;code&gt;auth&lt;/code&gt; action, creating a credentials file and then verifying we're authenticated.&lt;/p&gt;

&lt;p&gt;Check all this in, and watch in awe as your GitHub action runs with GCP access without any hardcoded credentials!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap Up
&lt;/h2&gt;

&lt;p&gt;This blog post guides you through accessing the 3 major cloud providers with GitHub Actions without specifying hardcoded credentials. It's my hope that more CI/CD providers will offer this support soon, as well as other awesome cloud providers. &lt;/p&gt;

</description>
      <category>aws</category>
      <category>azure</category>
      <category>github</category>
      <category>googlecloud</category>
    </item>
    <item>
      <title>JavaScript for Making API Calls</title>
      <author>Olumide</author>
      <pubDate>Sun, 23 Jan 2022 23:02:15 +0000</pubDate>
      <link>https://dev.to/shittu_olumide_/javascript-for-making-api-calls-4lgk</link>
      <guid>https://dev.to/shittu_olumide_/javascript-for-making-api-calls-4lgk</guid>
      <description>&lt;p&gt;There are a variety of ways to make an API request with JavaScript, ranging from plain JavaScript to jQuery to additional tools that greatly simplify the process. In this article, we'll utilize a standard JavaScript technique. We'll change our code in following courses to make our API request in a variety of ways. We'll also learn about several tools for working with asynchronous programming in the process. APIs, after all, are asynchronous. While we'll just be using async tools to make API calls in this part, the async tools we'll learn may be used to other asynchronous JavaScript tasks as well.&lt;/p&gt;

&lt;p&gt;We'll make an API request the old-fashioned manner in this session, using only vanilla JavaScript. This old-fashioned method is used by all of the tools that jQuery utilizes to perform API requests. However, we won't cover the jQuery technique in this section because the Fetch API is a far superior option. Fetch is likewise based on this time-honored method. So, while you may not utilize this strategy for the independent project in this area (though you certainly may! ), you will have a better knowledge of how technologies like Fetch function when we use them later in this section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starting-off"&gt;
  &lt;/a&gt;
  Starting Off
&lt;/h2&gt;

&lt;p&gt;We won't include all of the code for setting up our environment in the next sections. The sample code below is available in a fully functional webpack environment in the repository at the conclusion of the lecture. If you're going to create this project from scratch, you'll need to include a webpack environment, which you can either build yourself or get from the repository at the conclusion of the class. We don't require a &lt;code&gt;__tests__&lt;/code&gt; directory because we aren't testing anything. We don't need a &lt;code&gt;js&lt;/code&gt; directory right now. In this session, we'll put all of our JS code in &lt;code&gt;index.js&lt;/code&gt;, which is the same naming scheme we've been using with webpack projects. We only need to look at two files for the code sample below: &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;index.js&lt;/code&gt;.&lt;br&gt;
HTML code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html lang="en-US"&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Weather&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div class="container"&amp;gt;
    &amp;lt;h1&amp;gt;Get Weather Conditions From Anywhere!&amp;lt;/h1&amp;gt;
    &amp;lt;label for="location"&amp;gt;Enter a location:&amp;lt;/label&amp;gt;
    &amp;lt;input id="location" type="text"&amp;gt;
    &amp;lt;button class="btn-success" id="weatherLocation"&amp;gt;Get Current Temperature and Humidity&amp;lt;/button&amp;gt;
    &amp;lt;div class="showErrors"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class="showHumidity"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class="showTemp"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For a location, we have a basic form input. There are also various divs for displaying errors, temperature, and humidity.&lt;/p&gt;

&lt;p&gt;Let's have a look at the API call's code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import $ from 'jquery';
import 'bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';
import './css/styles.css';

$(document).ready(function() {
  $('#weatherLocation').click(function() {
    const city = $('#location').val();
    $('#location').val("");

    let request = new XMLHttpRequest();
    const url = `http://api.openweathermap.org/data/2.5/weather?q=${city}&amp;amp;appid=[YOUR-API-KEY-HERE]`;

    request.onreadystatechange = function() {
      if (this.readyState === 4 &amp;amp;&amp;amp; this.status === 200) {
        const response = JSON.parse(this.responseText);
        getElements(response);
      }
    };

    request.open("GET", url, true);
    request.send();

   function getElements(response) {
      $('.showHumidity').text(`The humidity in ${city} is ${response.main.humidity}%`);
      $('.showTemp').text(`The temperature in Kelvins is ${response.main.temp} degrees.`);
    }
  });
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To begin, we'll look at our import declarations. We have a click handler that pulls a city value from a form, puts it in a variable named city, and then erases the form field  $('#location') . val(""); This section is just for review.&lt;/p&gt;

&lt;p&gt;The following is the first line of the new code:&lt;br&gt;
&lt;code&gt;let request = new XMLHttpRequest();&lt;/code&gt;&lt;br&gt;
We create a new &lt;code&gt;XMLHttpRequest&lt;/code&gt; (or XHR for short) object and save it in the &lt;code&gt;request&lt;/code&gt; variable. &lt;code&gt;XMLHttpRequest&lt;/code&gt; is a little deceptive name. These objects are used to interface with servers, which is exactly what API calls are for. They aren't only for XML queries. As previously stated, XML is a rather widespread data format used by APIs. However, JSON is becoming increasingly popular, and &lt;code&gt;XMLHttpRequest&lt;/code&gt; objects may be used with JSON as well as other forms of data, not simply XML.&lt;/p&gt;

&lt;p&gt;The URL for our API call is then saved in a variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; const url = http://api.openweathermap.org/data/2.5/weather?q=${city}&amp;amp;appid=[Add-Your-API-Key]; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This isn't required, but it does make our code simpler to understand. For the code to operate properly, you'll need to add your own API key in &lt;code&gt;[YOUR-API-KEY-HERE]&lt;/code&gt;. Because our string is a template literal with an embedded expression &lt;code&gt;($city)&lt;/code&gt;, the value that the user enters in the form is transmitted straight into our URL string via our &lt;code&gt;city&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;The remainder of the code is divided into three sections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A function that monitors any changes to the &lt;code&gt;XMLHttpRequest'&lt;/code&gt;s &lt;code&gt;readyState&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The request is really processed and sent.&lt;/li&gt;
&lt;li&gt;A callback function that will be used to display results in the browser.
Let's start with the function that monitors the &lt;code&gt;XMLHttpRequest&lt;/code&gt; for changes:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;request.onreadystatechange = function() {
  if (this.readyState === 4 &amp;amp;&amp;amp; this.status === 200) {
    const response = JSON.parse(this.responseText);
    getElements(response);
  }
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Onreadystatechange&lt;/code&gt; is a property of our &lt;code&gt;XMLHttpRequest&lt;/code&gt; object. This attribute can be set to the value of a function that performs anything we desire. We have an anonymous function (an unnamed function) set to the value of that property in the example above.&lt;/p&gt;

&lt;p&gt;We could even tweak the code to just track changes in the ready state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;request.onreadystatechange = function() {
  console.log(this.readyState);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we did, the console would show the following. The comment has been included.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 // Opened
2 // Headers Received
3 // Loading
4 // Done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These numbers represent the many states in which our &lt;code&gt;XMLHttpRequest&lt;/code&gt; object may be found. (Because this is the initial state - and the &lt;code&gt;readyState&lt;/code&gt; hasn't changed yet - you wouldn't see &lt;code&gt;0&lt;/code&gt;, which corresponds to Unsent.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that if you attempt this in the console, ESLint will complain about &lt;code&gt;no-unused-vars&lt;/code&gt;. This is due to the fact that the &lt;code&gt;getElements()&lt;/code&gt; method, which we define later in the code, is no longer in use. To make ESLint feel better, temporarily comment it out. Also, when you're finished, be sure to restore the code to its original state.&lt;br&gt;
We wouldn't want to do anything until &lt;code&gt;this.readyState&lt;/code&gt; is &lt;code&gt;4&lt;/code&gt; because the data transmission isn't finished yet. At work, this is classic async. Once this is done and this if &lt;code&gt;this.readyState === 4&lt;/code&gt;. We'll do anything with the data if &lt;code&gt;this.status === 200&lt;/code&gt;. Why does this happen? Is it necessary for &lt;code&gt;this.status === 200&lt;/code&gt; to be included in our conditional? We discussed how a 200 response signals a successful API request in the last lecture. To put it another way, before our code analyses the data, the API request must be successful and the data transfer must be complete.&lt;/p&gt;

&lt;p&gt;When the conditional is true, we execute the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const response = JSON.parse(this.responseText);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;This.responseText&lt;/code&gt; is another built-in property of &lt;code&gt;XMLHttpRequest&lt;/code&gt; objects, as you might expect. Once a server answer is received, it is immediately filled. It should be evident by now that &lt;code&gt;XMLHttpRequest&lt;/code&gt; objects are quite strong and perform a significant amount of work for us.&lt;br&gt;
The built-in &lt;code&gt;JSON.parse&lt;/code&gt; method in JavaScript is used to parse &lt;code&gt;this.responseText&lt;/code&gt;. This guarantees that the data is formatted correctly as JSON data. Otherwise, our code won't identify the data as JSON, and when we try to obtain data from it using dot notation, we'll receive an error. Working with APIs necessitates the use of the &lt;code&gt;JSON.parse()&lt;/code&gt; method. Other programming languages, as we mentioned in a previous lecture, include methods for parsing JSON as well.&lt;/p&gt;

&lt;p&gt;Then, using the data in the &lt;code&gt;response&lt;/code&gt; variable, we'll build a callback:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getElements(response);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A &lt;strong&gt;callback&lt;/strong&gt; occurs when a function calls another function. In a moment, we'll go through this in further detail.&lt;/p&gt;

&lt;p&gt;Before we do that, let's talk about &lt;code&gt;XMLHttpRequest&lt;/code&gt; objects in more depth. By placing a breakpoint within our conditional and then executing the code in the browser, we can see exactly what characteristics an &lt;code&gt;XMLHttpRequest&lt;/code&gt; object has.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;request.onreadystatechange = function() {
  if (this.readyState === 4 &amp;amp;&amp;amp; this.status === 200) {
    debugger;
    ...
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's wiser to add a breakpoint from the Sources tab - the sample above only demonstrates where the breakpoint should be placed.&lt;br&gt;
An &lt;code&gt;XMLHttpRequest&lt;/code&gt; object, as you can see, has a lot of capabilities. Most of these assets aren't worth worrying about right now. There are, however, a few that will come in use throughout this section:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;responseText:&lt;/strong&gt; We've previously talked about this. It contains the response's text. (The identical text can also be found in the &lt;code&gt;response&lt;/code&gt; property.)&lt;br&gt;
&lt;strong&gt;Status:&lt;/strong&gt; The status code is the API status code. A score of 200 indicates that it was a success. There are a variety of different codes, such as 404 not found.&lt;br&gt;
&lt;strong&gt;statusText:&lt;/strong&gt; As you can see, it's "OK." With a status code of 200, this is standard. That indicates we're ready to go! If anything goes wrong, though, we could get a more descriptive error message like "not found" or "not permitted."&lt;/p&gt;

&lt;p&gt;Let's get back to our new code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let request = new XMLHttpRequest();
const url = `http://api.openweathermap.org/data/2.5/weather?q=${city}&amp;amp;appid=[YOUR-API-KEY-HERE]`;

request.onreadystatechange = function() {
  if (this.readyState === 4 &amp;amp;&amp;amp; this.status === 200) {
    const response = JSON.parse(this.responseText);
    getElements(response);
  }
};

// We've covered everything except for the two lines below!
request.open("GET", url, true);
request.send();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Except for the last two lines (which are highlighted in the comment), we've covered everything.&lt;/p&gt;

&lt;p&gt;We've created a new &lt;code&gt;XMLHttpRequest&lt;/code&gt; object and set a method to the &lt;code&gt;onreadystatechange&lt;/code&gt; property to listen for changes in the object's ready state at this point in our code, but we haven't done anything with it yet. The request must still be opened and sent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; request.open("GET", url, true);
 request.send();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The method of the request (in this instance &lt;code&gt;GET&lt;/code&gt;), the &lt;code&gt;url&lt;/code&gt; (which we saved in a variable named url), and a boolean indicating whether the request should be async or not are all sent to &lt;code&gt;XMLHttpRequest.open()&lt;/code&gt;. We want the request to be async once more; we don't want our users' browsers to freeze! The three parameters will nearly always be the same for the API calls we make in this section; the only exception will be if you make a &lt;code&gt;"POST"&lt;/code&gt; or other form of request instead of &lt;code&gt;"GET."&lt;/code&gt;&lt;br&gt;
We send the request after we've opened it. The &lt;code&gt;readyState&lt;/code&gt; of the &lt;code&gt;XMLHttpRequest&lt;/code&gt; object will change, as we've already explained, and the function we've attached to the object's &lt;code&gt;onreadystatechange&lt;/code&gt; will fire each time the &lt;code&gt;readyState&lt;/code&gt; changes. Finally, our &lt;code&gt;getElements()&lt;/code&gt; method will be run when our conditional in the function we've linked to the &lt;code&gt;onreadystatechange&lt;/code&gt; property is activated.&lt;br&gt;
A &lt;strong&gt;callback&lt;/strong&gt; occurs when a function calls another function. Callbacks may rapidly become perplexing, particularly when one function calls another, which in turn calls another, and so on. As a result, they may be somewhat daunting to newcomers. Remember that a callback is simply a function calling another function when you see scary-looking callbacks in the real world. In a later lesson, when we cover the notion of "callback hell," we'll describe why callbacks may be so frightening.&lt;br&gt;
For the time being, it's crucial to understand that callbacks are one method JavaScript writers may deal with async code. It used to be the sole option for dealing with async code. Fortunately, we now have access to new technologies that will make our life simpler. Later in this section, we'll look at some of these tools.&lt;/p&gt;

&lt;p&gt;Because we need to wait till our conditional is triggered before using getElements, we need to utilize a callback here (). Keep in mind that JavaScript is a non-blocking language. Even if some of the code is async, it will continue to run.&lt;/p&gt;

&lt;p&gt;Let's see what would happen if we didn't utilize a callback.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Note: This code will not work! It's meant to show why we need to structure our code to use a callback.

    let response;

    request.onreadystatechange = function() {
      if (this.readyState === 4 &amp;amp;&amp;amp; this.status === 200) {
        response = JSON.parse(this.responseText);
      }
    };

    request.open("GET", url, true);
    request.send();
    getElements(response);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we execute &lt;code&gt;request.send()&lt;/code&gt; in the code above, our request is submitted to the server. Keep in mind that this will take some time. Our request will be accepted (or denied) by the server, and we will receive a response. We must first wait for the answer to load before parsing it. JavaScript, on the other hand, is not a blocking language. That implies it won't wait for &lt;code&gt;request.send()&lt;/code&gt; to finish before continuing. The call to &lt;code&gt;getElements(response)&lt;/code&gt; will happen right away, and we'll get the following error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Cannot read property 'main' of undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a typical async problem &lt;code&gt;getElements(response)&lt;/code&gt; is not async, although &lt;code&gt;request.send()&lt;/code&gt; is. When &lt;code&gt;getElements()&lt;/code&gt; is invoked, the result will still be &lt;code&gt;undefined&lt;/code&gt; since the function is still running. The answer will be specified later, but our code will break before that.&lt;/p&gt;

&lt;p&gt;This is why a callback is required. Let's look at our original code once more:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;request.onreadystatechange = function() {
      if (this.readyState === 4 &amp;amp;&amp;amp; this.status === 200) {
        const response = JSON.parse(this.responseText);
        getElements(response);
      }
    };

...

    function getElements(response) {
      $('.showHumidity').text(`The humidity in ${city} is ${response.main.humidity}%`);
      $('.showTemp').text(`The temperature in Kelvins is ${response.main.temp} degrees.`);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;getElements(response)&lt;/code&gt; will not be invoked in this code until the conditional is true. In other words, we ensure that the function doesn't start until we receive a response from the server by utilizing a callback.&lt;/p&gt;

&lt;p&gt;One of the many essential use cases for callbacks is async code. Callbacks can assist us in determining the order in which functions should be executed. If we require a sync function to execute after an async function, we may use a callback to ensure that the code runs in the expected sequence.&lt;/p&gt;

&lt;p&gt;Of course, when we need a sequence of sync and async methods to run in a specified order, things may quickly get strange.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We covered how to build and send an XMLHttpRequest object in this lecture. You should have a better knowledge of how JavaScript creates HTTP requests after doing so. We also spoke about how to utilize callbacks to ensure that our code runs in the order we want it to.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>api</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Reverse-engineering frontend (Cuphead's film-grain effect)! Can you?</title>
      <author>Michael Z</author>
      <pubDate>Sun, 23 Jan 2022 22:10:02 +0000</pubDate>
      <link>https://dev.to/michi/reverse-engineering-frontend-cupheads-film-grain-effect-can-you-c9o</link>
      <guid>https://dev.to/michi/reverse-engineering-frontend-cupheads-film-grain-effect-can-you-c9o</guid>
      <description>&lt;p&gt;For quite a while I've been thinking how cool it would be to have a website in the style of the fantastic game Cuphead. How would that even look like? Then, out of nowhere, either Netflix, or Cuphead's team - not sure, releases &lt;a href="https://cupheadcountdown.com"&gt;https://cupheadcountdown.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Immediately, I noticed the film-grain effect on the website and wanted to have it ;)&lt;/p&gt;

&lt;p&gt;If you are not sure what I mean, it's this: &lt;a href="https://rqnmd.csb.app/"&gt;https://rqnmd.csb.app/&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Let me share with you how I extracted it from their website.&lt;/p&gt;

&lt;p&gt;I invite you to try it out for yourself, maybe you come up with a different approach!&lt;/p&gt;

&lt;p&gt;If you want to go straight to the end, there you go: &lt;a href="https://github.com/MZanggl/film-grain"&gt;https://github.com/MZanggl/film-grain&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#checking-the-html"&gt;
  &lt;/a&gt;
  Checking the HTML
&lt;/h3&gt;

&lt;p&gt;As usual with these things, opening the "Elements" tab in devtools was the first step to solving this puzzle.&lt;/p&gt;

&lt;p&gt;Immediately I noticed it was using Nuxt.js due to elements like &lt;code&gt;&amp;lt;div id="_nuxt"&amp;gt;&lt;/code&gt;, not relevant yet, but it's at least an indication that the JavaScript will be most likely compiled and not a walk in the park to read.&lt;/p&gt;

&lt;p&gt;Going inside &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; I found the accurately-named element &lt;code&gt;&amp;lt;div class="filmGrain"&amp;gt;&lt;/code&gt; containing a canvas.&lt;br&gt;
It was spanning the entire page with pointer-events turned off so you could still click around.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="nc"&gt;.filmGrain&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;pointer-events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.filmGrain&lt;/span&gt; &lt;span class="nt"&gt;canvas&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;mix-blend-mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"filmGrain"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;canvas&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately it's not so easy to look into a canvas, so that's where the next challenge lies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#finding-the-relevant-code-for-painting-the-canvas"&gt;
  &lt;/a&gt;
  Finding the relevant code for painting the Canvas
&lt;/h3&gt;

&lt;p&gt;By focusing on the &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element in the devtools "Elements" tab, you can access it in the console using &lt;code&gt;$0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Trying out various context types, I found out that it's using webgl.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// null&lt;/span&gt;
&lt;span class="nx"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webgl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// bingo!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this knowledge it's easier to find the relevant code in the compiled JavaScript.&lt;/p&gt;

&lt;p&gt;In the "Sources" tab, I right-clicked on "&lt;a href="http://www.cupheadcountdown.com"&gt;www.cupheadcountdown.com&lt;/a&gt;" &amp;gt; "Search in Files" and searched for "webgl".&lt;br&gt;
This yielded 3 results which I checked, after using my browser's "pretty print" option on the bottom left.&lt;/p&gt;

&lt;p&gt;The third result looked very promising, here's a snippet from said code (compiled &amp;amp; pretty printed):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;animID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onResize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cancelAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;animID&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onResize&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;animID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;animID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;skipFrame&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;skipFrame&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;skipFrame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useProgram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;programInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;program&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;programInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bufferInfo&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uniforms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;001&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uniforms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uniforms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uniforms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;programInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uniforms&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bufferInfo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reverseengineering-the-compiled-code"&gt;
  &lt;/a&gt;
  Reverse-Engineering the compiled code
&lt;/h3&gt;

&lt;p&gt;The code was fairly readable, frankly I had no idea what all these one-letter variable names were for... Though the frequently used variable &lt;code&gt;o&lt;/code&gt; was easy as it was declared just at the top of the function as &lt;code&gt;var o = this;&lt;/code&gt;. It's the Vue component instance.&lt;/p&gt;

&lt;p&gt;With this, I laid out the code in a class, and I got most of it looking like regular code again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;GrainRenderer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;animID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;skipFrame&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;skipFrame&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;skipFrame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's interesting about the above code is that the variable names for a class are not shortened (&lt;code&gt;this.skipFrame&lt;/code&gt;) and so it's very easy to comprehend all the other code. This is important for later.&lt;/p&gt;

&lt;p&gt;Now it's to find out what the variable names "r", "h", and "c" stand for...&lt;/p&gt;

&lt;p&gt;"r" is being used all over the place and contains lots of functions like "r.d", "r.c", or "r.f".&lt;br&gt;
"c" and "h" are only being used once &lt;code&gt;this.programInfo = r.b(this.gl, [c.a, h.a]);&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I realized the code is using &lt;code&gt;requestAnimationFrame&lt;/code&gt; so the "render" method will run in a constant loop. This is where I now set a breakpoint and triggered the browser's debugger by focusing on the cupheadcountdown.com tab.&lt;/p&gt;

&lt;p&gt;Luckily, &lt;code&gt;c.a&lt;/code&gt; and &lt;code&gt;h.a&lt;/code&gt; turned out to be just strings. Strings containing GLSL language, which is used for rendering webGL.&lt;/p&gt;

&lt;p&gt;The code for &lt;code&gt;c.a&lt;/code&gt; is simply:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight glsl"&gt;&lt;code&gt;&lt;span class="k"&gt;attribute&lt;/span&gt; &lt;span class="kt"&gt;vec4&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;gl_Position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;while the other string was a lot bigger. It was what entailed the actual code to render the film-grain effect. The devs conveniently left comments in the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Random spots&lt;/span&gt;
&lt;span class="c1"&gt;// Vignette&lt;/span&gt;
&lt;span class="c1"&gt;// Random lines&lt;/span&gt;
&lt;span class="c1"&gt;// Grain&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#whats-r"&gt;
  &lt;/a&gt;
  What's "r"...
&lt;/h3&gt;

&lt;p&gt;Now to the final hurdle...&lt;/p&gt;

&lt;p&gt;Stepping into some of &lt;code&gt;r&lt;/code&gt;'s functions with the debugger turned out that it's a rabbit-hole. Rather than digging deep, this got me thinking. Would they really go to such lengths or is this maybe a library? This is where the non-compiled variable names comes into play (like "this.programInfo").&lt;/p&gt;

&lt;p&gt;Searching for &lt;code&gt;webgl "programInfo"&lt;/code&gt; yielded a few promising results. And finally, the documentation of twgl.js looked like it contained all the relevant functions.&lt;/p&gt;

&lt;p&gt;it's quite doable to map most functions by comparing the arguments the functions took, the order in which the code was executed, as well as the variable names.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// cuphead&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;programInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="c1"&gt;//twgl.js docs&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;programInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;twgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createProgramInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="c1"&gt;// cuphead&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bufferInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// twgl.js docs&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrays&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bufferInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;twgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createBufferInfoFromArrays&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arrays&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// cuphead&lt;/span&gt;
&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useProgram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;programInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;program&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;programInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bufferInfo&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;programInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uniforms&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bufferInfo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// twgl.js&lt;/span&gt;
&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useProgram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;programInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;program&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;twgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setBuffersAndAttributes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;programInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bufferInfo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;twgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setUniforms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;programInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;uniforms&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;twgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawBufferInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bufferInfo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only difficult one was &lt;code&gt;r.d(o.gl.canvas, .5)&lt;/code&gt;. So I stepped into the function with the debugger and found this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ze&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientWidth&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
      &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this, I opened twgl.js' GitHub page and looked for for "Math.max". After a bit of searching I finally found this code: &lt;a href="https://github.com/greggman/twgl.js/blob/42291da89afb019d1b5e32cd98686aa07cca063d/npm/base/dist/twgl.js#L4683-L4695"&gt;https://github.com/greggman/twgl.js/blob/42291da89afb019d1b5e32cd98686aa07cca063d/npm/base/dist/twgl.js#L4683-L4695&lt;/a&gt;. Got it!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And voila, puzzle solved&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing"&gt;
  &lt;/a&gt;
  Closing
&lt;/h2&gt;

&lt;p&gt;This was a fun little challenge, I hope you could take something away from it. Even it's just that you should definitely play and (soon) watch Cuphead ;)&lt;/p&gt;

&lt;p&gt;Would you have approached it differently?&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>challenge</category>
    </item>
    <item>
      <title>What Chat Solutions to Choose? Firebase Vs SendBird Vs Node.js + Socket.io</title>
      <author>Fora Soft</author>
      <pubDate>Sun, 23 Jan 2022 21:30:18 +0000</pubDate>
      <link>https://dev.to/forasoft/what-chat-solutions-to-choose-firebase-vs-sendbird-vs-nodejs-socketio-1md6</link>
      <guid>https://dev.to/forasoft/what-chat-solutions-to-choose-firebase-vs-sendbird-vs-nodejs-socketio-1md6</guid>
      <description>&lt;p&gt;People frequently come to us with a request to create a text chat. Some of them want a messenger with a chat being the main or the only function. Others need to add chat into different projects, such as telemedicine. In this article, we‚Äôll take a look at the most popular options for chat creation.&lt;/p&gt;

&lt;p&gt;All solutions for chats can be split into two categories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Ready-made chat platforms, such as Firechat, SendBird.&lt;br&gt;
They have prepared functionality for main chat options. The developer needs to put a small effort and time to add a chat into an app or a website. But the behavior of functionality has strict borders by a platform creator, and possibilities for customization are limited.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Technologies for exchanging data between client and server, such as Firebase Cloud Messaging, Node.js + Socket.io.&lt;br&gt;
They allow building a very flexible chat solution upon them. Those technologies take time to implement but offer unlimited possibilities for customization.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the four solutions are cross-platform, they work on the web, iOS, Android.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#chat-solutions"&gt;
  &lt;/a&gt;
  Chat Solutions
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#firebase-cloud-messaging"&gt;
  &lt;/a&gt;
  Firebase Cloud Messaging
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://firebase.google.com/docs/cloud-messaging"&gt;Firebase Cloud Messaging&lt;/a&gt; is a platform for information exchange between a mobile app and a server. It‚Äôs widely used for notification send-out, and it can be used to build a chat on its foundation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Free for products with up to 100 simultaneous users.&lt;/li&gt;
&lt;li&gt;As a Google product, one can expect stable work when used correctly&lt;/li&gt;
&lt;li&gt;With comprehensive documentation and high popularity, developers can find any answers quickly, which saves time and money&lt;/li&gt;
&lt;li&gt;No need to buy an additional server, you can do everything on the Firebase server&lt;/li&gt;
&lt;li&gt;Thanks to the Firestore database, the servers will automatically come into existence or be eliminated when they are not needed, which will save you a ton of money. Node.js and socket.io will make you create scaling separately&lt;/li&gt;
&lt;li&gt;Data is cached by default and is available for search in chat offline&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Difficult search inquiries are difficult or impossible to realize&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, inquiries like ‚Äúfind all messages with ‚ÄúHello!‚Äù that a user received last year from all users whose nicknames start with an A‚Äù.&lt;/p&gt;

&lt;p&gt;The thing is when using Firebase Cloud Messaging, you are limited in choosing a database. It‚Äôs either Firebase Realtime Database or Firestore. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://firebase.google.com/docs/database/"&gt;Firebase Realtime Database&lt;/a&gt; is a NoSQL database, where data is stored as JSON. It has lots of advantages compared to traditional SQL databases. The possibilities for creating a new search inquiry are limited by a developer to keep productivity levels.&lt;/p&gt;

&lt;p&gt;To deal with that problem, Google came up with the &lt;a href="https://firebase.google.com/products/firestore"&gt;Firestore&lt;/a&gt; database. It‚Äôs a NoSQL database but its search and data structuring possibilities are vastly increased. However, difficult search inquiries still pose a bigger problem than those in SQL databases or NoSQL databases like MongoDB. Some of them are impossible, others will take much more time to develop.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Up to 200k simultaneous users in Firebase Realtime Database, up to a million in Firestore&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Firebase Realtime Database is limited by 200k connections in the database. It‚Äôs roughly the same as 200k simultaneous users. Firebase developers think out of 10 million active app users there are 200k of those who would use the app at the same time.&lt;/p&gt;

&lt;p&gt;Firestore offers up to a million users at the same moment.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://firebase.google.com/pricing"&gt;Paid&lt;/a&gt; from 100 simultaneous users&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When using Firestore, &lt;a href="https://firebase.google.com/docs/firestore/pricing"&gt;the cost&lt;/a&gt; is determined by read/write operations in the database. The more data is there, the more expensive it will be. For instance, by Firestore calculation, a small up (50k installations and 5k active users daily) the usage cost will be $12-14 a month. For a big app (10 mil installations with 1 mil active users daily), the cost will be $2951,52 monthly. There are &lt;a href="https://firebase.google.com/docs/firestore/quotas"&gt;borders&lt;/a&gt; within which Firestore is free to use.&lt;/p&gt;

&lt;p&gt;With Firestore Realtime Database &lt;a href="https://firebase.google.com/docs/database/usage/billing"&gt;the cost&lt;/a&gt; is determined by the amount of data stored in a base and downloaded from there ‚Äì approximately $5 a month for each stored gigabyte and $1 a month for each downloaded gigabyte.&lt;/p&gt;

&lt;p&gt;Therefore an app that processes many read/write in the database operations, &lt;strong&gt;it will be cheaper to use Firebase Realtime Database.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The most profitable option would be &lt;strong&gt;to use Firebase Realtime Database for one type of data and Firestore for another.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For example, for a typical e-commerce app, operations that involve reading a list of goods will run every time a user opens the app, and the number of operations will grow as more people use it. The size of the list, however, won‚Äôt depend on the number of users. For an app like that, the most profitable option would be storing the list data in Firebase Realtime Database (to not pay for multiple read operations), and storing the user data in Firestore, as storing 1 gigabyte of data is cheaper there (&lt;a href="https://medium.com/nestedif/guide-to-chose-between-firebase-database-options-firebase-realtime-database-vs-firebase-cloud-632fda2e4838"&gt;source&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Using Firebase Cloud Messaging is free itself, which means that you only pay for using the database, hosting, and authentication.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Works slowly when searching offline&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In Firestore, if there are hundreds of documents in the base, the offline search will be slower, which will worsen the UX. For instance, in a chat with a hundred channels, when you have to find one without internet access, the search will work noticeably slower.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The developer needs experience working with NoSQL to build a convenient and effective database structure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Firestore has a limit of 1 write operation in a second for 1 document. The document is a structural part of a Firestore database. The Firestore database consists of documents organized in a collection. The document is practically a set of ‚Äúkey-meaning‚Äù couples. It is actually a flexible limitation: if you go for 10 read operations at the same time once, Firestore will process them correctly. If, however, you keep sending thousands of requests into the base at a rate of more than 1 per second, Firestore will return errors for some requests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#firechat"&gt;
  &lt;/a&gt;
  Firechat
&lt;/h2&gt;

&lt;p&gt;Firechat is a framework for chat creation, and it was made by the Firebase team using Firebase as a foundation. Firechat uses Firebase for authorization, sync, storing data. Firechat provides API for a chat, that allows user authentication; forwarding messages, images, and files; group chats creation, sending out invitations. Here are the links to their &lt;a href="https://firechat.firebaseapp.com/"&gt;official website&lt;/a&gt; and &lt;a href="https://github.com/FirebaseExtended/firechat"&gt;project code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Saving time and money on developing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A ready-made API for the chat main functionality allows not to create a realization of those functions by yourself&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Same advantages as with the Firebase Cloud Messaging&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not all functions are possible to realize&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use a ready-made API for the chat functionality, you can only realize the functions in offers. For instance, it doesn‚Äôt support showing unread messages, deleting messages, and has a limitation of 100 users in the chat group. The full functionality list is difficult to find, but you can get an impression by their API methods &lt;a href="https://firechat.firebaseapp.com/docs/#api_methods"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Same disadvantages as with the Firebase Cloud Messaging&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Firechat only uses Firebase Realtime Database from the box. There is no choosing a database, like in the Firebase Cloud Messaging, Firebase Realtime Database, or Firestore.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sendbird"&gt;
  &lt;/a&gt;
  Sendbird
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://sendbird.com/"&gt;Sendbird&lt;/a&gt; is a ready-made chat platform. It offers a multitude of prepared features, including an indication of the number of unread messages, blocking users, and admin dashboard.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Many functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lots of features are already realized and work right away: message or file exchange, invitations, users blocking, typing indication, editing messages, automatic translation, admin dashboard, group chats for up to 100 users&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A ready-made UI with limited customization possibilities&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Creating a UI and its design isn‚Äôt necessary. Sendbird offers standard UI options, which you can use as is. You can also apply your own design on top of the standard one, changing the color and form of chat components. So, we can simply add Sendbird with default settings into our product and get a char with a default design. Then, customize some components whenever the need arises.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scales automatically&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You don‚Äôt need to worry about having too many users so your server doesn‚Äôt catch up to the number of requests, New servers will create themselves. Sendbird supports more than a million simultaneous users. It uses AWS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can‚Äôt realize all functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chat and functionality behaviors are strictly set.  A user logs in and gets access to a list of channels. They can choose an existing channel or create their own. Channels are either public or private. Users can exchange messages in either one.&lt;/p&gt;

&lt;p&gt;This is the standard structure for the majority of chats. If you need something more exotic for your product, it will be really problematic to realize that with SendBird. Some functions are outright impossible to implement, others can take much more time than if they were created from scratch, for example, with Node.js and socket.io. For example, you can‚Äôt create threads to answer a message, like in Slack.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not all available functions can be realized the way you see it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SendBird provides more customization opportunities than it seems. There are serious limitations, too. For example, SendBirds allows storing additional information about any user, but not more than 5 parameters. Let‚Äôs say, those will be a name, last name, city, sex, weight, eye color. So, it is not nearly enough for dating chats&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not as popular as Firebase and Socket.io&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Popularity is an important metric when choosing a framework. The more popular a framework is, the more developers using it are out there. It helps get important resources, support, answers. If other pros and cons are equal, this will help make the development faster (and cheaper if you pay for time)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Price&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depends on the number of users. The base package costs &lt;a href="https://sendbird.com/pricing"&gt;$400 monthly&lt;/a&gt; for 5k active users. With 100k active monthly users, the price will go up to $5000. Or even $7600 if you also want automatic message translation and advanced moderation. For products with more than 100k users, the price is decided individually. There is a 30-day trial period.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nodejs-socketio"&gt;
  &lt;/a&gt;
  Node.js + Socket.io
&lt;/h2&gt;

&lt;p&gt;Server platform &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt;, going with the real-time data exchange library &lt;a href="https://socket.io/"&gt;Socket.io&lt;/a&gt; helps build a chat with unlimited customization possibilities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allows realization of any functionality&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The developer has full control over all components: interface, logic, and server data and endpoint can be whatever is needed. For instance, it helps organize threads to answer chosen messages, which you can‚Äôt do in SendBird. You can implement message deleting, which is nowhere to be found in Firechat.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scales&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Provides an opportunity to realize automatic scalability that depends on the load. It‚Äôs possible to do on AWS and other ready-made solutions, such as Oracle. However, scalability isn‚Äôt provided right away, it has to be developed by a programmer.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can choose the database type that suits your product best&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For instance, if in the future product you are going to realize many difficult search inquiries, you can choose the SQL database, instead of using Firestore or Firebase Realtime Database that don‚Äôt support these functions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The chat works quickly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Client and server exchange messages directly, which results in fast work. When you use Firebase Cloud Messaging, the message goes from your server to Firebase server, and only from there will it travel further to the device. It‚Äôs important to mention that, though, that if there is a 0,5s delay, it‚Äôs not critical for a text chat.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Free to use&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Open-source free solution ‚Äì you don‚Äôt have to pay monthly for this technology. But please note that you have to pay for a server rent, where your product is based. However, this cost is usually way lower than that of Firebase Cloud Messaging or Firechat. We will discuss forecasting server costs in a different article.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Requires more time and money, as the developer creates all functions from scratch&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not everyone can develop the chat. You will need someone with the relevant experience&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#to-sum-it-up"&gt;
  &lt;/a&gt;
  To sum it up
&lt;/h1&gt;

&lt;p&gt;Ready-made platforms will give you quick results because the functionality is already there. But you are limited to those functions.&lt;/p&gt;

&lt;p&gt;Node.js and socket.io allow creating any chat you need but each function will have to be developed from zero. It takes time and money.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-to-choose"&gt;
  &lt;/a&gt;
  What to choose?
&lt;/h1&gt;

&lt;p&gt;The first thing to think about, when answering this question, is what kind of solution fits you and your company best.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If your chat requires a minimum base functionality, you don‚Äôt have high level of requirements to it, then Firechat or a Firebase Cloud Messaging-based solution is the way to go&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you expect a chat to be more advanced, take a look at SendBird. Compare monthly payments to SendBird against creating a chat from zero on Node.js and socket.io&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If there are a lot of requirements for a chat or you need lots of customized options, Node.js and socket.io are your friends!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-at-fora-soft-we-recommend-nodejs-socketio"&gt;
  &lt;/a&gt;
  Why at Fora Soft we recommend Node.js + socket.io?
&lt;/h2&gt;

&lt;p&gt;Developing the chat functionality on Node.js + socket.io takes about 40 hours. Embedding and customizing a prepared one requires around 24-32 hours.&lt;/p&gt;

&lt;p&gt;Ready-made chats charge you every month. It is more expensive than paying just for servers in the case of Node.js + socket.io. A little increase in the development costs is usually recouped in a few months.&lt;/p&gt;

&lt;p&gt;In exchange, they:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Are not bound to any limitations. They can implement any functionality in the future&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do not depend on third-party components that developers can just stop updating someday, and your chat will stop working.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To find out more about &lt;a href="https://forasoft.com/contacts"&gt;chat creation&lt;/a&gt;, do not hesitate to contact us!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to Disable Autofill in ¬´Google Chrome¬ª?</title>
      <author>Michael Mirosnichenko</author>
      <pubDate>Sun, 23 Jan 2022 20:54:38 +0000</pubDate>
      <link>https://dev.to/hetmansoftware/how-to-disable-autofill-in--56je</link>
      <guid>https://dev.to/hetmansoftware/how-to-disable-autofill-in--56je</guid>
      <description>&lt;p&gt;Read this article to learn more about autofill settings in Google Chrome. How to enable or disable the autofill feature, where to find these settings, and how to use them to advantage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;One of the main priorities in further development of Google Chrome is to make it more functional and help users save time, which is achieved by adding various extensions, and one of them is designed to help you enter data required by network resources.&lt;/p&gt;

&lt;p&gt;When you need to fill in a standard form somewhere on the Internet, Google Chrome can save the data you enter and use it next time so you can avoid typing it again in a similar situation. However, if there is no need to use this function regularly and you don‚Äôt feel like storing your personal information inside Google Chrome, there is a simple way to turn the whole thing off.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-disable-the-autofill-feature"&gt;
  &lt;/a&gt;
  How to disable the autofill feature?
&lt;/h2&gt;

&lt;p&gt;The procedure to disable the autofill feature in Google Chrome is very simple, but requires a sequence of steps to be taken.&lt;/p&gt;

&lt;p&gt;Step 1. Open Google Chrome.&lt;/p&gt;

&lt;p&gt;Step 2. In the upper right corner of the browser window, click the Customize and control Google Chrome button with three vertical dots on it.&lt;/p&gt;

&lt;p&gt;An important note. To quickly access the settings page in Google Chrome you can do the following: type chrome://settings/ in the address bar, press the Enter key and the corresponding page will open at once.&lt;/p&gt;

&lt;p&gt;Step 3. When the context menu appears, find and select Settings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--697krZeh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hetmanrecovery.com/pic/blog/a153/settings.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--697krZeh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hetmanrecovery.com/pic/blog/a153/settings.jpg" alt="Image description" width="417" height="486"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 4. Navigate the settings page with the help of the scroll bar or the mouse wheel and find the section Autofill, then select Addresses and more below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dDYM9RzF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hetmanrecovery.com/pic/blog/a153/addresses-and-more.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dDYM9RzF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hetmanrecovery.com/pic/blog/a153/addresses-and-more.jpg" alt="Image description" width="696" height="313"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 5. In the linked page that opens, click on the slider for Save and fill addresses and change its position (the color will change too, from the active blue to the neutral grey which means that this option is disabled).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WOSOyvA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hetmanrecovery.com/pic/blog/a153/save-and-fill-addresses.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WOSOyvA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hetmanrecovery.com/pic/blog/a153/save-and-fill-addresses.jpg" alt="Image description" width="693" height="210"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you complete these steps, the autofill function for user data will be turned off, and saving / transmitting data over Google Chrome will be paused.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-remove-data-from-the-autofill-options-in-google-chrome"&gt;
  &lt;/a&gt;
  How to remove data from the autofill options in Google Chrome?
&lt;/h2&gt;

&lt;p&gt;If you want to secure your personal data and remove the autofill information previously saved to Google Chrome, and you want to do it after the autofill feature was disabled manually, then here‚Äôs the hint: you can safely erase this data from your browser settings. Below are the steps to take if you want to edit the saved information manually.&lt;/p&gt;

&lt;p&gt;Step 1. Open Google Chrome again.&lt;/p&gt;

&lt;p&gt;Step 2. In the upper right corner of the screen, tap on the button with three vertical dots to access Google Chrome controls.&lt;/p&gt;

&lt;p&gt;Step 3. From the context menu that appears, select the line Settings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--697krZeh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hetmanrecovery.com/pic/blog/a153/settings.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--697krZeh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hetmanrecovery.com/pic/blog/a153/settings.jpg" alt="Image description" width="417" height="486"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 4. Use the mouse wheel or the scroll bar to find the Autofill section and then click on the line Addresses and more to continue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dDYM9RzF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hetmanrecovery.com/pic/blog/a153/addresses-and-more.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dDYM9RzF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hetmanrecovery.com/pic/blog/a153/addresses-and-more.jpg" alt="Image description" width="696" height="313"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An important note. To access the address autofill directly in Google Chrome type chrome://settings/addresses in the address bar and press the Enter key to confirm.&lt;/p&gt;

&lt;p&gt;Step 5. In the new page, look for the section Addresses, select any line containing information saved to Google Chrome for autofill purposes, and click on the More actions button (it looks like three vertical dots and can be found at the right end of each line).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rq9I6aVZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hetmanrecovery.com/pic/blog/a153/addresses.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rq9I6aVZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hetmanrecovery.com/pic/blog/a153/addresses.jpg" alt="Image description" width="690" height="103"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 6. Select Remove from the context menu that appears in order to clear data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3iSbct-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hetmanrecovery.com/pic/blog/a153/remove.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3iSbct-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hetmanrecovery.com/pic/blog/a153/remove.jpg" alt="Image description" width="690" height="152"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The information will be deleted at once without any warnings or confirmations, and there is no way to cancel this step. So before you delete anything, make sure this is the data you want to disappear.&lt;/p&gt;

&lt;p&gt;The final step in the procedure for removing user data is to use the Clear browsing data function to erase possible remains of information that could be visible in your browser. For that matter, there a few quick steps to take.&lt;/p&gt;

&lt;p&gt;Step 1. Open Google Chrome again to access the Internet from your computer.&lt;/p&gt;

&lt;p&gt;Step 2. Click on the Customize and control Google Chrome button (three vertical dots) next to the address bar, in the right corner of the browser window.&lt;/p&gt;

&lt;p&gt;Step 3. Select Settings from the menu. Otherwise, type chrome://settings/ in the address bar and hit the Enter key to access the settings page directly.&lt;/p&gt;

&lt;p&gt;Step 4. In this page, scroll down until you see the link Advanced to display hidden settings of your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rIKflsKV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hetmanrecovery.com/pic/blog/a153/advanced.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rIKflsKV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hetmanrecovery.com/pic/blog/a153/advanced.jpg" alt="Image description" width="745" height="304"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 5. Find the tab Privacy and security and click on the line Clear browsing history.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--94rpKJjE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hetmanrecovery.com/pic/blog/a153/clear-browsing-history.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--94rpKJjE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hetmanrecovery.com/pic/blog/a153/clear-browsing-history.jpg" alt="Image description" width="724" height="135"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 6. Google Chrome will show a pop-up window listing all data that can be removed without any effect to the browser performance. In this window, go to the Advanced tab, then scroll down to the line Autofill form data, and check the corresponding box to select it. Look at other boxes and uncheck the ones where you don‚Äôt need to remove data. Otherwise, the information contained under the boxes checked by default (such as Browsing history, Download history, Cookies and other site data) and other selected items will be erased. When you are finished with checking and selecting the information for removal, click Clear data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lLgy99zZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hetmanrecovery.com/pic/blog/a153/clear-data.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lLgy99zZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hetmanrecovery.com/pic/blog/a153/clear-data.jpg" alt="Image description" width="754" height="647"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After some time (which depends largely on how much data you are trying to erase) all selected information will be erased from Google Chrome. Next time you need to fill your details into a form, you will have to do it manually, without hints from your browser.&lt;/p&gt;

&lt;p&gt;Read the &lt;a href="https://hetmanrecovery.com/recovery_news/how-to-disable-automatic-completion-of-delivery-addresses-in-google-chrome.htm"&gt;full article&lt;/a&gt; with all additional video tutorials. Also visit our &lt;a href="https://www.youtube.com/channel/UCu-D9QnPsAPn7AtxL4HXLUg"&gt;Youtube channel&lt;/a&gt;, there are over 400 video tutorials.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>testing</category>
      <category>tutorial</category>
      <category>security</category>
    </item>
    <item>
      <title>State of the Web: Bundlers &amp; Build Tools</title>
      <author>AsyncBanana</author>
      <pubDate>Sun, 23 Jan 2022 20:40:23 +0000</pubDate>
      <link>https://dev.to/asyncbanana/state-of-the-web-bundlers-build-tools-1j73</link>
      <guid>https://dev.to/asyncbanana/state-of-the-web-bundlers-build-tools-1j73</guid>
      <description>&lt;p&gt;Ever since Browserify, bundlers have been extremely important in the web ecosystem. They provide the ability to automatically process code, which opens up opportunities for performance optimization and non-native languages. This article looks at the background of bundlers, why they are essential, and their current state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background-of-bundlers"&gt;
  &lt;/a&gt;
  Background of Bundlers
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#the-web-before-bundlers"&gt;
  &lt;/a&gt;
  The Web Before Bundlers
&lt;/h3&gt;

&lt;p&gt;For a large part of the web, bundlers did not exist. To include scripts, most people just linked to the library on a CDN like &lt;a href="https://cdnjs.com/"&gt;CDNJS&lt;/a&gt; or &lt;a href="https://developers.google.com/speed/libraries"&gt;Google Hosted Libraries&lt;/a&gt;. This would begin to change in 2009 when Node.js was released. Instead of using CDNs, Node.js came with its package manager, npm. npm was easy to use because every library was just one &lt;code&gt;npm install&lt;/code&gt; away, and updating was effortless. Because of the ease of use, many people wanted to use npm on the web. However, this was impossible until &lt;a href="https://browserify.org/"&gt;Browserify&lt;/a&gt; came along.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#browserify"&gt;
  &lt;/a&gt;
  Browserify
&lt;/h3&gt;

&lt;p&gt;Browserify's tagline describes itself pretty well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Browserify lets you &lt;code&gt;require('modules')&lt;/code&gt; in the browser by bundling up all of your dependencies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Browserify was the first JavaScript "bundler." If you do not know what a bundler is, it is a tool that bundles multiple scripts together into one script and often performs transformations on the scripts it bundles. This means that you can bundle different scripts from NPM with your code by parsing &lt;code&gt;require()&lt;/code&gt; statements in your code. Bundling also meant that your site was often faster because there were not as many HTTP requests being sent out, which reduced overhead (this is less the case in modern browsers because HTTP/2 adds the ability to download multiple resources on a single connection). Browserify quickly gained adoption because of these advantages. It is also important to note other ways of using modules on the web, like Require.js, which used AMD instead of CommonJS, and Bower, which fully replaced NPM for the browser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grunt-amp-gulp"&gt;
  &lt;/a&gt;
  Grunt &amp;amp; Gulp
&lt;/h3&gt;

&lt;p&gt;While Browserify was great at bundling scripts together, it was not quite as good at transforming code. Let's say you wanted to compile your CoffeeScript code to JavaScript. You can do this with plain Browserify. However, it is unwieldy and relatively inflexible. To fix this, a new group of tools for the web where born, which focused on running code transforms. These are usually called task runners, and the most popular ones are &lt;a href="https://gruntjs.com/"&gt;Grunt&lt;/a&gt; and &lt;a href="https://gulpjs.com/"&gt;Gulp&lt;/a&gt;. Grunt was the first task manager, first released in January of 2012. It allowed for more flexible code transforms when using bundlers like Browserify or without a bundler. However, there were still problems with Grunt, which were solved by Gulp. Gulp is faster, as it uses Node streams instead of temporary files and runs tasks in parallel, as well as allowing for people to use a script instead of a JSON configuration file. This was still not perfect, though, because it was annoying to use two separate tools. This was fixed by Webpack&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#webpack"&gt;
  &lt;/a&gt;
  Webpack
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://webpack.js.org/"&gt;Webpack&lt;/a&gt; combines both bundling and compiling, making it easier than the previous standard of Gulp + Browserify. Webpack first started becoming popular in 2016, and it is still popular to this day. There are also some other advantages of Webpack. First, it supports bundling and transforming non-JavaScript assets, like HTML, CSS, and images. Second, the API is often easier to use (although it is still complicated relative to the newest bundlers). Many tools, like Create-React-App, Next.js, and Vuepress, use Webpack.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-bundlersbuild-tools-are-significant"&gt;
  &lt;/a&gt;
  Why Bundlers/Build tools are Significant
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;If you already know why bundlers are used, you can skip this section&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#optimization"&gt;
  &lt;/a&gt;
  Optimization
&lt;/h3&gt;

&lt;p&gt;In general, most people do not write their code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead, to make things readable, they would probably write something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; world! &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, the first example is smaller and therefore transferred faster. Now, you might think you have to sacrifice size for readability, but there is a solution, minifiers. Minifiers automatically transform your source code into a smaller form. In fact, the first code example was generated by &lt;a href="https://terser.org/"&gt;Terser&lt;/a&gt;, which is one of the best minifiers. Bundlers make using minifiers easy through plugins. Additionally, bundlers help perform other optimizations, like tree shaking, which removes unused code. Finally, bundling scripts itself can improve performance by reducing HTTP requests needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nonweb-native-languages"&gt;
  &lt;/a&gt;
  Non-web Native Languages
&lt;/h3&gt;

&lt;p&gt;Often, it is more efficient to use a language like &lt;a href="https://sass-lang.com/"&gt;Sass&lt;/a&gt; or &lt;a href="https://stylus-lang.com/"&gt;Stylus&lt;/a&gt; instead of plain CSS. Or, perhaps you are trying to use &lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt; to enforce static typing in your code. Whatever the case, it is often better to use languages that the web does not natively support. Bundlers can help with this. Instead of running a bunch of different commands yourself to compile everything, you can often just add plugins to your bundler config file and run the bundler.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#development-features"&gt;
  &lt;/a&gt;
  Development Features
&lt;/h3&gt;

&lt;p&gt;Most modern bundlers have features that enable faster iteration, like Hot Module Reload (HMR). HMR automatically reloads specific modules that have changed rather than the whole page, making reloading faster. Additionally, if you are using a framework like React, React state can be preserved, which means that the page data does not reset every time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#easy-inclusion-of-modules"&gt;
  &lt;/a&gt;
  Easy Inclusion of Modules
&lt;/h3&gt;

&lt;p&gt;Bundling modules together is the original reason why bundlers were made. Even though there are many other features now, this is still important. Even with the native support of ESM, it is still helpful to be able to &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; modules without having to write full import paths (although &lt;a href="https://github.com/WICG/import-maps"&gt;import maps&lt;/a&gt; could help with this).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-state-of-build-tools"&gt;
  &lt;/a&gt;
  The State of Build Tools
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#adoption"&gt;
  &lt;/a&gt;
  Adoption
&lt;/h3&gt;

&lt;p&gt;Nowadays, almost every web developer uses one bundler or another. Webpack is by far the most popular, with &lt;a href="https://rollupjs.org/"&gt;Rollup&lt;/a&gt; and &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt; in second and third, respectively. Currently, Vite is the fastest-growing major bundler, which has been adopted by frameworks like Vitepress, SvelteKit, Astro, and more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ecmascript-modules-esm"&gt;
  &lt;/a&gt;
  ECMAScript Modules (ESM)
&lt;/h3&gt;

&lt;p&gt;ESM is supported in most modern bundlers. While tools like Browserify do not support ESM, most tools as new or newer than Webpack support ESM. Additionally, ESM is often the recommended way to do things for supported bundlers because it is more future-oriented than CommonJS or AMD, and it is easier to statically analyze imports for tree shaking. ESM also opens up the opportunity for unbundled development, which we cover below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unbundled-development"&gt;
  &lt;/a&gt;
  Unbundled Development
&lt;/h3&gt;

&lt;p&gt;Unbundled development utilizes native ESM support in browsers to offer an ultra-fast development experience. Unlike a traditional bundler which bundles everything in development, unbundled development transforms the code and rewrites import paths to the ESM compliant file path without bundling your code. Additionally, most bundlers that do this pre-bundle dependencies because that decreases the number of imports needed, and dependencies are unlikely to change often. The two most prominent bundlers that utilize unbundled development are &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt; and &lt;a href="https://www.snowpack.dev/"&gt;Snowpack&lt;/a&gt;. Snowpack, created in 2019, was the first bundler to have an unbundled development experience. However, while Snowpack was popular for some time, this did not last forever. In 2020, the team behind Vue created Vite. Vite has many advantages over Snowpack, like the ease of use, speed, better optimization, and more. Additionally, popular projects like SvelteKit adopted Vite instead of Snowpack. All of this helped Vite pass Snowpack in downloads, and it now has &lt;a href="https://www.npmtrends.com/snowpack-vs-vite"&gt;more than 10x downloads&lt;/a&gt; compared to Snowpack. In fact, even &lt;a href="https://astro.build/"&gt;Astro&lt;/a&gt;, a project created by the team behind Snowpack (be on the lookout for an article about Astro), is now using Vite. Overall, if you want fast, unbundled development, I recommend Vite.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#faster-languages"&gt;
  &lt;/a&gt;
  Faster Languages
&lt;/h3&gt;

&lt;p&gt;Another way that many people are trying to speed up bundling and code transformation is through using more optimized languages like Go or Rust. Currently, the two most notable tools that do this are &lt;a href="https://esbuild.github.io/"&gt;esbuild&lt;/a&gt; and &lt;a href="https://swc.rs/"&gt;SWC&lt;/a&gt;. esbuild was created by Evan Wallace in 2016 using Go. esbuild performed the role of Babel in transforming modern JavaScript, the TypeScript compiler, Terser, and basic bundling all in one package that was significantly faster than any other tools at that time. SWC was created in 2017 by kdy1 using Rust. SWC is even faster than esbuild, although only marginally. esbuild is currently more popular than SWC and is used by projects like Vite, although &lt;a href="https://dev.to/posts/deno"&gt;Deno&lt;/a&gt; and Next.js have adopted SWC.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#low-to-zero-config"&gt;
  &lt;/a&gt;
  Low to Zero Config
&lt;/h3&gt;

&lt;p&gt;Webpack has an infamously complex plugin system. While it is very powerful, it can be scary for beginners. Luckily, there are newer bundlers that focus on this. &lt;a href="https://parceljs.org/"&gt;Parcel&lt;/a&gt; was created in 2017 by Devon Govett to allow for easy, zero-config bundling. Parcel supports many of the features Webpack plugins provide, like Sass, TypeScript, and JSX, without requiring you to do anything. Additionally, due to caching and the increasing use of Rust, Parcel v2 can be faster than Webpack. Vite is another low-config bundler, although it does not do as much out of the box.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-about-webpack"&gt;
  &lt;/a&gt;
  What About Webpack?
&lt;/h3&gt;

&lt;p&gt;Webpack is still the most popular bundler. While it has not been taking advantage of the ability for massive speed improvements specified above, it still has added new features in the most recent version, Webpack 5. The biggest thing added in Webpack 5 is &lt;a href="https://webpack.js.org/concepts/module-federation/"&gt;module federation&lt;/a&gt;, or micro-frontends. Module federation separates different elements of a website and makes it easier to share pieces of code like component libraries. Another big thing Webpack added in version 5 is better caching, which can improve reload times in development. Overall, Webpack is still advancing, although it is falling behind some bundlers in certain features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The world of web bundlers is advancing quickly. Hopefully this article gave you an overview of what is currently happening for bundlers. If you liked this article, sign up for the ByteofDev mailing list &lt;a href="https://byteofdev.com/signup/"&gt;here&lt;/a&gt; (or don't, but I hope you do üôÉ), and thank you for reading.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>webpack</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
