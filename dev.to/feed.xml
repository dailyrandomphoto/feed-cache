<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What are objects in programming?</title>
      <author>Calin Baenen</author>
      <pubDate>Thu, 30 Dec 2021 01:53:52 +0000</pubDate>
      <link>https://dev.to/baenencalin/what-are-objects-in-programming-1nc9</link>
      <guid>https://dev.to/baenencalin/what-are-objects-in-programming-1nc9</guid>
      <description>&lt;p&gt;So, if you're new to programming, or just hang around people that are programmers, you may have heard of things called "objects".&lt;br&gt;
In this article, we will discuss what exactly objects are, and what they are like in certain languages.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-an-object"&gt;
  &lt;/a&gt;
  What is an object?
&lt;/h2&gt;

&lt;p&gt;At its most fundamental level, an object is a collection of data grouped together.&lt;/p&gt;

&lt;p&gt;Here's a classic example, a &lt;code&gt;Person&lt;/code&gt; object.&lt;br&gt;
Say we want to talk about a person in some code, people in the real world are more complex than a simple number, or a string of text (text, as the kind you're reading now, in programming is referred to as a "string").&lt;br&gt;
But, combining those last two, we get two basic properties all people have in common, name and age.&lt;/p&gt;

&lt;p&gt;So, we know all people have a name and an age, but how do we represent that?&lt;br&gt;
Well, not writing in any particular language, an object may be represented like following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    String name;
    Number age;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This says that this object (&lt;code&gt;o&lt;/code&gt;) contains some &lt;strong&gt;string&lt;/strong&gt; data called &lt;code&gt;name&lt;/code&gt; and some number data called &lt;code&gt;age&lt;/code&gt;.&lt;br&gt;
(The semicolons &lt;code&gt;;&lt;/code&gt; just separate the lines, like decoration.)&lt;br&gt;&lt;br&gt;
The idea of an object in programming is no different than the idea of having a subscript &lt;code&gt;i&lt;/code&gt; on a variable &lt;code&gt;V&lt;/code&gt; (Vi) in science (which stands for the "&lt;strong&gt;I&lt;/strong&gt;nitial &lt;strong&gt;V&lt;/strong&gt;elocity" of a real-world object).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#disambiguating-class-and-object"&gt;
  &lt;/a&gt;
  Disambiguating "class" and "object".
&lt;/h2&gt;

&lt;p&gt;If you've heard "object", you've likely also heard of "class".&lt;br&gt;
If you haven't, you can skip this, as it may just add confusion for the time-being.&lt;/p&gt;

&lt;p&gt;So, what is a class?&lt;br&gt;
A "class" is a general programming term that refers to the structure of an object.&lt;br&gt;
In fact, most people compare classes to blueprints, where the class is the blueprint and the object is the building (finished product).&lt;/p&gt;

&lt;p&gt;Classes in most programming languages are defined like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Person {
    String name;
    Number age;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This states there exists a class called &lt;code&gt;Person&lt;/code&gt;, whose members consist of a &lt;code&gt;name&lt;/code&gt; "field" and an &lt;code&gt;age&lt;/code&gt; "field", where a "field" is some named data.  &lt;/p&gt;

&lt;p&gt;But, classes are comprised of more than just the blueprint.&lt;br&gt;
Because in the real world, we actually use those plans to build something. - In programming, it's not much different.&lt;br&gt;
The "building" we make with this "blueprint" class is called an "instance", as in "I have an instance of a class.".&lt;br&gt;
Any building constructed with the &lt;code&gt;Person&lt;/code&gt; blueprint will always be a &lt;code&gt;Person&lt;/code&gt; instance (&lt;a href="https://www.analyticsvidhya.com/blog/2020/10/inheritance-object-oriented-programming/"&gt;but not always vice-versa&lt;/a&gt;; kind of like how all squares are rectangles, but not all rectangles are squares).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-objects-look-like-in-multiple-languages"&gt;
  &lt;/a&gt;
  What objects look like in multiple languages.
&lt;/h2&gt;

&lt;p&gt;Now that we know what an object and a class is, lets see how they look in various languages, in order of difficulty from easiest to understand to hardest to understand.&lt;br&gt;
In case you were thinking of dipping your toes into the water a little.&lt;br&gt;&lt;br&gt;
To help boost your understanding a little, all "people" (&lt;code&gt;Person&lt;/code&gt; instances) created will have the name "Tom" and will be fifteen (15) years old.&lt;br&gt;
In other words, the same thing will be shown, just in a bunch of different programming languages.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python.
&lt;/h3&gt;

&lt;p&gt;Python has simple object-classes that anyone can read!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
    &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Tom"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript.
&lt;/h3&gt;

&lt;p&gt;JavaScript allows you to create objects on their own, or from a blueprint.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;15&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Does the same thing as the last definition.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#java"&gt;
  &lt;/a&gt;
  Java.
&lt;/h3&gt;

&lt;p&gt;Java has classes but not raw objects, unlike JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;    &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* ... */&lt;/span&gt;

&lt;span class="nc"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Tom"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#c"&gt;
  &lt;/a&gt;
  C.
&lt;/h3&gt;

&lt;p&gt;C is one of the barest languages to exist, but it still provides us with a neat way to organize our data!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt;         &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="cm"&gt;/* ... */&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;name:&lt;/span&gt; &lt;span class="s"&gt;"Tom"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nl"&gt;age:&lt;/span&gt;  &lt;span class="mi"&gt;15&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
&lt;b&gt;&lt;/b&gt;&lt;center&gt;Thanks for reading!&lt;br&gt;Cheers!&lt;/center&gt;
&lt;/h1&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Time for change? 🤔</title>
      <author>Let's Code</author>
      <pubDate>Thu, 30 Dec 2021 00:46:12 +0000</pubDate>
      <link>https://dev.to/frontendengineer/time-for-change-469l</link>
      <guid>https://dev.to/frontendengineer/time-for-change-469l</guid>
      <description>&lt;p&gt;Prices 💲 and services everywhere are continuing to soar 📈 at record levels AND the worth of money on our savings account is losing value over time. Although the yearly salary 💶 increase helps, it seems to be not enough.&lt;/p&gt;

&lt;p&gt;The thought of a career 💼 switch definitely came to mind as it may bring at least extra 20% more compensation. It is understandable if this option doesn't apply to many as everybody's situation are different - one is happy and job hopping is a bit risky. &lt;/p&gt;

&lt;p&gt;I am leaning on looking to better provide for my family. As a matter of fact I have couple of interviews lined up next week. What is your situation and are you considering it?&lt;/p&gt;

&lt;p&gt;This &lt;a href="https://dev.to/frontendengineer/series/14457"&gt;resource&lt;/a&gt; might help you in case you need a refresher on interview.&lt;/p&gt;

</description>
      <category>career</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Building a scraping tool with Python and storing it in Airtable (with real code)</title>
      <author>Kalob Taulien</author>
      <pubDate>Thu, 30 Dec 2021 00:27:30 +0000</pubDate>
      <link>https://dev.to/kalobtaulien/building-a-scraping-tool-with-python-and-storing-it-in-airtable-with-real-code-4pbl</link>
      <guid>https://dev.to/kalobtaulien/building-a-scraping-tool-with-python-and-storing-it-in-airtable-with-real-code-4pbl</guid>
      <description>&lt;p&gt;A startup often needs extremely custom tools to achieve its goals. &lt;/p&gt;

&lt;p&gt;At &lt;a href="https://arbington.com"&gt;Arbington.com&lt;/a&gt; we've had to build scraping tools, data analytics tools, and custom email functions. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;None of this required a database. We used files as our "database" but mostly we used Airtable. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#scrapers"&gt;
  &lt;/a&gt;
  Scrapers
&lt;/h2&gt;

&lt;p&gt;Nobody wants to admit it, but scraping is pretty important for gathering huge amounts of useful data. &lt;/p&gt;

&lt;p&gt;It's frowned upon, but frankly, everyone does it. Whether they use an automated tool, or manually sift through thousands of websites to collect email addresses - most organizations do it. &lt;/p&gt;

&lt;p&gt;In fact, scraping is what made the worlds best search engine: Google. &lt;/p&gt;

&lt;p&gt;And in Python, this is REALLY easy. &lt;/p&gt;

&lt;p&gt;The hardest part is reading through various forms of HTML, but even then, we have a tool for that. Let's take a look at an example that I've adjusted so you can scrape my website. &lt;/p&gt;

&lt;p&gt;We'll use &lt;a href="https://kalob.io/teaching/"&gt;https://kalob.io/teaching/&lt;/a&gt; as the example and get all the courses I teach. &lt;/p&gt;

&lt;p&gt;First, we look for a pattern in the DOM. Open up that page, right click, inspect element, and look for all the blue buttons. &lt;/p&gt;

&lt;p&gt;You'll see they all have &lt;code&gt;class="btn btn-primary"&lt;/code&gt;. Interesting, we've found a pattern. Great! We can work with that. &lt;/p&gt;

&lt;p&gt;Now let's just right into the code. And if you're a Python dev, feel free to paste this into your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt; 

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://kalob.io/teaching/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll see the HTML for my website. Now, all we need to do is parse the HTML. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: utf-8 encoding is most commonly used on the internet. So we'll want to decode the HTML we scraped into utf-8 compatible text (in a giant string)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our code now looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt; 

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://kalob.io/teaching/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you'll see the HTML looks a little nicer now. &lt;/p&gt;

&lt;p&gt;Now here's a big hairy problem: parsing HTML. Some people use &lt;code&gt;attr=""&lt;/code&gt; some people use &lt;code&gt;attr=''&lt;/code&gt; some people use XHTML and some don't. &lt;/p&gt;

&lt;p&gt;So how do we get around this? &lt;/p&gt;

&lt;p&gt;Introducing: Beautiful Soup 4. &lt;/p&gt;

&lt;p&gt;In your Python environment pip install this package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;beautifulsoup4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And your code now looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt; 

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://kalob.io/teaching/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt;  &lt;span class="c1"&gt;# You'll need to `pip install `
&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bs4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"html.parser"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Shows the parsed HTML
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# Returns &amp;lt;class 'bs4.BeautifulSoup'&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So our &lt;code&gt;soup&lt;/code&gt; variable is no longer a string, but an object. This means we can use object methods on it - like looking for  certain elements in the HTML we scraped. &lt;/p&gt;

&lt;p&gt;Let's put together a list of all the links on this page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt; 

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://kalob.io/teaching/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt;  &lt;span class="c1"&gt;# You'll need to `pip install `
&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bs4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"html.parser"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;courses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"class"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look at that.. now we have a list of buttons from the page we scraped at the beginning of this article. &lt;/p&gt;

&lt;p&gt;Lastly, let's loop through them to get the button text and the link:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"href"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Listen, I wrote 3 print statements to make this clear - but typically I'd write this in a single line. &lt;/p&gt;

&lt;p&gt;Now we have something to work with! We have the entire HTML element, the &lt;code&gt;href&lt;/code&gt; attribute, and the &lt;code&gt;innerText&lt;/code&gt; without any whitespace. &lt;/p&gt;

&lt;p&gt;The entire script is 9 lines of code and looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt;  &lt;span class="c1"&gt;# You'll need to `pip install `
&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://kalob.io/teaching/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bs4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"html.parser"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;courses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"class"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'href'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; -&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#moving-this-data-somewhere-useful"&gt;
  &lt;/a&gt;
  Moving this data somewhere useful.
&lt;/h2&gt;

&lt;p&gt;You know me, I'm a HUGE fan of Airtable. &lt;/p&gt;

&lt;p&gt;And instead of using local database or a cloud based database, I like to use Airtable so me and my team and work with the data and easily expand the tables if we need to. Like if we needed to add a column to see if a course meetings our criteria to be on Arbington.com. &lt;/p&gt;

&lt;p&gt;For this we use Airtables API and the python package known as &lt;br&gt;
&lt;code&gt;airtable-python-wrapper&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Go ahead an install this through pip.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;airtable-python-wrapper
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now before we continue, you'll need a &lt;a href="https://airtable.com/invite/r/JXx8l4fX"&gt;free Airtable account&lt;/a&gt; 👈 that's our referral link. No need to use it, it's just a nice kickback for us for constantly promoting Airtable 😂&lt;/p&gt;

&lt;p&gt;Once you have an account, you need to dig up your app API key, your table API key, and your Base Name. It would look something like this in python:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;airtable.airtable&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Airtable&lt;/span&gt;

&lt;span class="n"&gt;airtable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Airtable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'appXXXXXXXXX'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Links'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'keyXXXXXXXXXX'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, all we need to do is create a dictionary of Airtable Column Names, and insert the record.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt;  &lt;span class="c1"&gt;# You'll need to `pip install `
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;airtable.airtable&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Airtable&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://kalob.io/teaching/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bs4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"html.parser"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;courses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"class"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;

&lt;span class="n"&gt;airtable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Airtable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'appXXXXXXXXX'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Links'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'keyXXXXXXXXXX'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;new_record&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"Link"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'href'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;"Text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;airtable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_record&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assuming you setup your Airtable columns, table and API keys properly, you should see my website links and URLs appear in your Airtable. &lt;/p&gt;

&lt;p&gt;Now you and your team can scrape webpages and store the data in Airtable for the rest of your team to use! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pulling-data-out-to-work-with-it"&gt;
  &lt;/a&gt;
  Pulling data out to work with it
&lt;/h2&gt;

&lt;p&gt;Now that all the data we want is in Airtable, we can use the same Python package to pull the data out, work with it, scrape more data, and update each record. &lt;/p&gt;

&lt;p&gt;But that's for another day 😉 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-to-learn-python"&gt;
  &lt;/a&gt;
  Want to learn Python?
&lt;/h2&gt;

&lt;p&gt;If you're looking for online courses, take a look at Arbington.com, &lt;a href="https://arbington.com/search/?q=python"&gt;there are over 40 Python courses&lt;/a&gt; available. &lt;/p&gt;

&lt;p&gt;And it comes with a free 14 day trial to access over 1,500 courses immediately! 🔥 &lt;/p&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>Holidays are almost over 😭 Back to Reality 😱</title>
      <author>Let's Code</author>
      <pubDate>Thu, 30 Dec 2021 00:25:08 +0000</pubDate>
      <link>https://dev.to/frontendengineer/holiday-is-over-back-to-reality-4op</link>
      <guid>https://dev.to/frontendengineer/holiday-is-over-back-to-reality-4op</guid>
      <description>&lt;p&gt;While some of us might be back to work already after a glorious holiday, some of us will be back after the New Year's holiday and will face the inevitable. I am one of the latter and is definitely not quite ready yet.&lt;/p&gt;

&lt;p&gt;I am curious on what did you do during the long holiday - either personal and professional wise. Below is my story. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Spent my leave on staycation. I hang out with the family and in-laws. Lots of shopping and ice skating.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ate a bunch of unhealthy food I shouldn't be eating - more than what I imagined. Major diet after New Year to follow. 😊&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, wrote couple of ReactJS articles here at dev.to and created a video version that I am very proud of (still honing my video recording skills). Below are the links if you want to check it out. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thanks for the dev.to community for a great, warm support of the articles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/frontendengineer/react-interview-questions-part-2-mid-senior-level-cal"&gt;Advance React Interview Questions&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/frontendengineer/common-react-interview-questions-50gm"&gt;Basic React Interview Questions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, that is my story. What is yours - No right/wrong answers.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>career</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Handling form input in React(including drop-down and checkbox)</title>
      <author>Samuel Lucas</author>
      <pubDate>Wed, 29 Dec 2021 23:37:51 +0000</pubDate>
      <link>https://dev.to/sam_lukaa/handling-form-input-in-reactincluding-drop-down-and-checkbox-47h8</link>
      <guid>https://dev.to/sam_lukaa/handling-form-input-in-reactincluding-drop-down-and-checkbox-47h8</guid>
      <description>&lt;p&gt;I have a form that requests for user's details - username and password, how do I get them in react?&lt;/p&gt;

&lt;p&gt;Hello my dear reader, my name's Lucas and today we'll be solving the problem above and beyond that.&lt;/p&gt;

&lt;p&gt;To start with, I need you to know that the way you create forms in react is very similar to that of vanilla html. Let's create a simple login form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;  &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the simple form we'll be using.&lt;/p&gt;

&lt;p&gt;Let's start by creating a state for each input, with empty string to start with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUserData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we destructure the state so that we can interact with its data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userData&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we'll be doing next is this. We want to recognize each input by their names, so we will be giving both of them a corresponding name plus we'll also set the values to the state's value(&lt;strong&gt;username&lt;/strong&gt; and &lt;strong&gt;password&lt;/strong&gt; in &lt;em&gt;useState()&lt;/em&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Up next, we'll create a function that updates &lt;strong&gt;setUserData&lt;/strong&gt; whenever there's a change within it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onChangeHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setUserData&lt;/span&gt;&lt;span class="p"&gt;({...&lt;/span&gt; &lt;span class="nx"&gt;userData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or shorter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onChangeHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;setUserData&lt;/span&gt;&lt;span class="p"&gt;({...&lt;/span&gt; &lt;span class="nx"&gt;userData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userData&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally all we've got to do is attach the function to each input.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onChangeHandler&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onChangeHandler&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I really love to do for checkbox but then I discovered it will be interesting if you tried it out yourself, using this example. Let me know in the comment section if you did it. I'd be glad to know.&lt;/p&gt;

&lt;p&gt;To read and understand more about this topic, visit Reacts official website: &lt;a href="https://reactjs.org/docs/forms.html"&gt;https://reactjs.org/docs/forms.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Did you find this post helpful? Why not give it a like and share with others. 😉&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>HTML ignored knowledge</title>
      <author>Mohammed Sobhi</author>
      <pubDate>Wed, 29 Dec 2021 23:34:07 +0000</pubDate>
      <link>https://dev.to/mohammedsobhi/html-ignored-knowledge-1b03</link>
      <guid>https://dev.to/mohammedsobhi/html-ignored-knowledge-1b03</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;An HTML Document is mainly divided into two parts: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;HEAD&lt;/strong&gt;: This contains the information about the HTML document. For Example, Title of the page, version of HTML, Metadata etc.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;BODY&lt;/strong&gt;: This contains everything you want to display on the Web Page.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;     
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;: This is called HTML root element and used to wrap all the code.&lt;/p&gt;

&lt;p&gt;All the HTML elements that can be used inside the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;element are:&lt;br&gt;
&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#the-document-base-url-element-raw-ltbasegt-endraw-"&gt;
  &lt;/a&gt;
  The Document Base URL element&lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; HTML element specifies the base URL to use for all relative URLs in a document. There can be only one  element in a document.&lt;br&gt;
For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;base&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://www.example.com/"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"images/bolika.gif"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"osos bolika"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"tags/tag_base.asp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;HTML base Tag&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#the-metadata-element-raw-ltmetagt-endraw-"&gt;
  &lt;/a&gt;
  The metadata element &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag defines metadata about an HTML document. Metadata is data (information) about data.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Free Web tutorials"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"keywords"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"HTML, CSS, JavaScript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"author"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"John Doe"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Meta tag attributes:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U6k9mdv2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lm4hd88uobct01ybetme.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U6k9mdv2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lm4hd88uobct01ybetme.png" alt="Meta tag attributes" width="880" height="396"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#-raw-httpequiv-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;http-equiv&lt;/code&gt;:
&lt;/h3&gt;

&lt;p&gt;usually used to solve legacy browsers problems, but nowadays, you only need it to instruct Internet Explorer to use its latest rendering engine. By writing the following meta tag in the head:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-name-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;name&lt;/code&gt;:
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;content&lt;/code&gt; attributes can be used together to provide document metadata in terms of name-value pairs, with the name attribute giving the metadata name, and the content attribute giving the value.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-noscript-tag-raw-ltnoscriptgt-endraw-"&gt;
  &lt;/a&gt;
  The noscript tag &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt;:
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt; tag defines an alternate content to be displayed to users that have disabled scripts in their browser or have a browser that doesn't support script.&lt;/p&gt;

&lt;p&gt;The  element can be used in both  and &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;. When used inside &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, the  element could only contain &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; elements.&lt;br&gt;
For example, in create-react-app template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;You need to enable JavaScript to run this app.&lt;span class="nt"&gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#what-are-raw-data-endraw-attributes-good-for"&gt;
  &lt;/a&gt;
  What are &lt;code&gt;data-&lt;/code&gt; attributes good for?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;data-*&lt;/code&gt; attributes allow us to store extra information on standard, semantic HTML elements without other hacks or extra properties on DOM.&lt;/p&gt;

&lt;p&gt;These days, using &lt;code&gt;data-&lt;/code&gt; attributes is generally not encouraged. One reason is that users can modify the data attribute easily by using inspect element in the browser. The data model is better stored within JavaScript itself and stay updated with the DOM via data binding, possibly through a library or a framework.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-difference-between-raw-ltscriptgt-endraw-raw-ltscript-asyncgt-endraw-and-raw-ltscript-defergt-endraw-"&gt;
  &lt;/a&gt;
  The difference between &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;script async&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;script defer&amp;gt;&lt;/code&gt;.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-ltscriptgt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;:
&lt;/h3&gt;

&lt;p&gt;HTML parsing is blocked, the script is fetched and executed immediately, HTML parsing resumes after the script is executed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ocnwc7Mw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0m6hhptkb2jic68p6cf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ocnwc7Mw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0m6hhptkb2jic68p6cf.png" alt="Script timeline" width="854" height="147"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"javascript.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-ltscript-asyncgt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;script async&amp;gt;&lt;/code&gt;:
&lt;/h3&gt;

&lt;p&gt;The script will be fetched in parallel to HTML parsing and executed as soon as it is available (potentially before HTML parsing completes). Use async when the script is independent of any other scripts on the page, for example, analytics and adds.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H1yViyGC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdtzbqaacgh2jcvzdk4z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H1yViyGC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdtzbqaacgh2jcvzdk4z.png" alt="Script async" width="705" height="146"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"javascript.js async"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-ltscript-defergt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;script defer&amp;gt;&lt;/code&gt;:
&lt;/h3&gt;

&lt;p&gt;The script will be fetched in parallel to HTML parsing and executed when the page has finished parsing. If there are multiple of them, each deferred script is executed in the order they were encountered in the document. If a script relies on a fully-parsed DOM, the defer attribute will be useful in ensuring that the HTML is fully parsed before executing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y54cdOU7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qj2nv682jydnrsagqp5c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y54cdOU7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qj2nv682jydnrsagqp5c.png" alt="Script defer" width="705" height="153"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"javascript.js defer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#why-is-it-generally-a-good-idea-to-position-css-raw-ltlinkgt-endraw-s-between-raw-ltheadgtltheadgt-endraw-"&gt;
  &lt;/a&gt;
  Why is it generally a good idea to position CSS &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;s between &lt;code&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;Putting s in the &lt;/p&gt; is part of proper specification in building an optimized website. When a page first loads, HTML and CSS are being parsed simultaneously; HTML creates the DOM (Document Object Model) and CSS creates the CSSOM (CSS Object Model). Both are needed to create the visuals in a website, allowing for a quick "first meaningful paint" timing. This progressive rendering is a category optimization sites are measured in their performance scores. Putting stylesheets near the bottom of the document is what prohibits progressive rendering in many browsers. Some browsers block rendering to avoid having to repaint elements of the page if their styles change. The user is then stuck viewing a blank white page. Other times there can be flashes of unstyled content (FOUC).

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--El8ikvpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/955esn6zkijrb81ts5u0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--El8ikvpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/955esn6zkijrb81ts5u0.png" alt="Rendering timeline" width="611" height="307"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Java Complete Roadmap 2022</title>
      <author>Ashish Yadav</author>
      <pubDate>Wed, 29 Dec 2021 23:32:47 +0000</pubDate>
      <link>https://dev.to/expoashish/java-complete-roadmap-2022-3be1</link>
      <guid>https://dev.to/expoashish/java-complete-roadmap-2022-3be1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#java-complete-roadmap-2022"&gt;
  &lt;/a&gt;
  Java Complete Roadmap 2022
&lt;/h2&gt;

&lt;p&gt;In this blog we are going to discuss complete roadmap for Java Programming in 2022. I will give you only topics and if you like my post then follow my Blogs. Lets Start:-👇&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#java-complete-roadmap-2022"&gt;
  &lt;/a&gt;
  &lt;a href="https://codexashish.blogspot.com/2021/12/java-complete-roadmap-2022.html"&gt;Java Complete Roadmap 2022&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#new-amp-trending-topics"&gt;
  &lt;/a&gt;
  New &amp;amp; Trending Topics:👇
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/top-10-trending-technologies-to-learn.html"&gt;Top 10 Trending Technologies to Learn in 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/top-10-programming-languages-you-must.html"&gt;Top 10 Programming Languages You Must Know In 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-machine-learning.html"&gt;Machine Learning Complete Roadmap 2022&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complete-roadmap-2022"&gt;
  &lt;/a&gt;
  Complete Roadmap 2022:-👇
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-python-programming.html"&gt;Python Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-machine-learning.html"&gt;Machine Learning Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-c-programming.html"&gt;C++ Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/java-complete-roadmap-2022.html"&gt;Java Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-data-structure.html"&gt;Data Structure Complete Roadmap 2022&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-laravel-tutorial-for-developer"&gt;
  &lt;/a&gt;
  Some Laravel Tutorial for developer:👇
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-8-interview-questions-and.html"&gt;Laravel 8 Interview Questions and Answers in 2022 (Part #1)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-8-interview-questions-and_22.html"&gt;Laravel 8 Interview Questions and Answers in 2022 (Part #2)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/advance-laravel-8-interview-questions.html"&gt;Advance Laravel 8 Interview Questions and Answers 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/everything-about-laravel-8-composer.html"&gt;Everything About Laravel 8 Composer 2022 | Composer in Laravel 8&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-jetstream-vs-laravel-ui-vs.html"&gt;Laravel Jetstream vs Laravel ui  vs Breeze&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-concept-and-projects"&gt;
  &lt;/a&gt;
  Python Concept and Projects:-👇
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/10-best-python-libraries-for-machine.html"&gt;10 Best Python Libraries For Machine Learning&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/07/alarm-clock-in-python-with-gui.html"&gt;Alarm Clock in Python with GUI&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/06/tic-tac-toe-game-using-pygame-in-python.html"&gt;Tic Tac Toe Game Using Pygame in Python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thankyou for reading my blogs.&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#my-website"&gt;
  &lt;/a&gt;
  My Website:👇
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/"&gt;CodexAshish&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>🤔 How should I build my Frontend for a huge project?</title>
      <author>William McGonagle</author>
      <pubDate>Wed, 29 Dec 2021 22:44:02 +0000</pubDate>
      <link>https://dev.to/williammcgonagle/how-would-you-connect-a-frontend-and-backend-3p30</link>
      <guid>https://dev.to/williammcgonagle/how-would-you-connect-a-frontend-and-backend-3p30</guid>
      <description>&lt;p&gt;I’ve been working on building a non-profit, open-source organization for a while now and we have gotten to a solid point in the backend code. We have authentication, an event and rsvp system, profile picture generator, etc. If you want to check it out, you can &lt;a href="https://github.com/fairfield-programming/backend-server/"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I’m also working on a frontend, but I’m at a stage where I can change the stack for it completely, so I wanted to hear your suggestions! You can check out the code so far &lt;a href="https://github.com/fairfield-programming/fairfield-programming.github.io/"&gt;here&lt;/a&gt;, and the domain for the website is &lt;a href="https://fairfieldprogramming.org"&gt;fairfieldprogramming.org&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Do you think I should switch to react, pure html/css, or should I use vue? And how do you think I should communicate with the server? &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>discuss</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>A printable, PDF - Git cheatsheet</title>
      <author>tq-bit</author>
      <pubDate>Wed, 29 Dec 2021 22:40:55 +0000</pubDate>
      <link>https://dev.to/tqbit/a-printable-pdf-git-cheatsheet-33bd</link>
      <guid>https://dev.to/tqbit/a-printable-pdf-git-cheatsheet-33bd</guid>
      <description>&lt;p&gt;Hello guys, &lt;/p&gt;

&lt;p&gt;instead of a new article, I'd like to share two printable cheatsheets with you. &lt;/p&gt;

&lt;p&gt;I hope you'll find these useful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cheatsheet-1-common-git-commands-for-local-development"&gt;
  &lt;/a&gt;
  Cheatsheet 1: Common Git commands for local development
&lt;/h2&gt;

&lt;p&gt;The first cheatsheet shows a common development workflow when working on a development project. Among these are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to initialize a Git repository&lt;/li&gt;
&lt;li&gt;How to add and remove files from the Git repos&lt;/li&gt;
&lt;li&gt;How to manage code changes over several new features&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BFqXX3C9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4u6kwij7r55y4tgnjuj3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BFqXX3C9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4u6kwij7r55y4tgnjuj3.png" alt="Git cheatsheet one" width="880" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get the PDF from my Git repos: &lt;a href="https://github.com/tq-bit/dev-cheatsheets/blob/main/q-bit_cheatsheets_git_and_github_IGit%20Cheatsheet_I.pdf"&gt;https://github.com/tq-bit/dev-cheatsheets/blob/main/q-bit_cheatsheets_git_and_github_IGit%20Cheatsheet_I.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cheatsheet-2-remote-git-servers"&gt;
  &lt;/a&gt;
  Cheatsheet 2: Remote Git Servers
&lt;/h2&gt;

&lt;p&gt;The second cheatsheet shows you a common, distributed development pattern and visualizes how several maintainers work on the same codebase. &lt;/p&gt;

&lt;p&gt;It attempts to answer the questions about: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How does a pull request work?&lt;/li&gt;
&lt;li&gt;How are local and remote repositories synchronized?&lt;/li&gt;
&lt;li&gt;How to delete a remote branch?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GLZ1FjA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fq8v3239ifeocsvvsvkd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GLZ1FjA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fq8v3239ifeocsvvsvkd.png" alt="Image description" width="880" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get the PDF from my Git repos: &lt;a href="https://github.com/tq-bit/dev-cheatsheets/blob/main/q-bit_cheatsheets_git_and_github_IGit%20Cheatsheet_II.pdf"&gt;https://github.com/tq-bit/dev-cheatsheets/blob/main/q-bit_cheatsheets_git_and_github_IGit%20Cheatsheet_II.pdf&lt;/a&gt;&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How I started my Web Development career in 2021</title>
      <author>Margarita Vlachou</author>
      <pubDate>Wed, 29 Dec 2021 22:33:05 +0000</pubDate>
      <link>https://dev.to/mvlachou/how-i-started-my-web-development-career-in-2021-58aa</link>
      <guid>https://dev.to/mvlachou/how-i-started-my-web-development-career-in-2021-58aa</guid>
      <description>&lt;p&gt;2021 has been a very challenging and exciting year at the same time but at the end I managed to do the switch I always wanted... &lt;/p&gt;

&lt;p&gt;10 years ago I started my bachelor's degree in Information Technology but due to life circumstances I was never able to pursue that career as sometimes life gets in the middle you see. &lt;/p&gt;

&lt;p&gt;I remember, 6 years ago, I was talking with friends and they were asking me what I want to do, what is the dream job for me.. and I remember I was just smiling and I was saying "Web development" and everyone was telling me that I need to focus on that and follow my heart. But in life things aren't as straight forward sometimes. &lt;/p&gt;

&lt;p&gt;I was at a point in my life where I didn't have the space to think or dream about anything, but I had to do what I had to do in order to pay my bills. But every time I was closing my eyes ... I was keep dreaming and thinking about that dream career and job and I was instantly smiling.&lt;/p&gt;

&lt;p&gt;In 2020... and when the pandemic started, I realized that life can be too short and there is no reason to waste our time and do things we don't enjoy. For that reason, I decided to apply for a master's degree in Software Development. I was studying full time my online course, while I was working full time as well and sometimes without days off for weeks. But I said to myself that if I can push through this, then I will be unstoppable. &lt;/p&gt;

&lt;p&gt;I only new the basic of C++, HTML, CSS , JS and I just started learning React when I applied for my Masters. The challenge I had in front of me was unreal and many times I was getting frustrated and I was asking myself why I did this as I didn't have the knowledge required for that degree. I had to do python, develop a full stack application and all that while I had to learn the technologies as I go. It was tough...&lt;/p&gt;

&lt;p&gt;The first 2 semesters gone and I have been successful so far. In addition to that I had a full stack application in my hands as a project I could add to my portfolio. And that was the point when I started applying for jobs. I applied for over 100 jobs in 3 months time with no luck. And suddenly I've been offered a position as full stack developer position. I couldn't believe it. And few months later, I realized that I do enjoy more front end development and I moved to a different company as front end developer.&lt;/p&gt;

&lt;p&gt;The lesson I've learnt from that process is that you will never be 100% ready for any job but apply anyway. Employers are looking for skills and experience, but also they are looking for the right attitude and willingness to learn. Skills get be taught, but the right attitude can't.&lt;/p&gt;

&lt;p&gt;So if you are starting out now, make a portfolio and showcase some of the projects you have created, create an attractive resume to show your skills and personality and go get it !! You will fail, you will get rejected at the beginning....but this will help you to learn more and prepare you for the next interview. &lt;/p&gt;

&lt;p&gt;"In order to succeed you must have willing to fail"&lt;/p&gt;

&lt;p&gt;Good Luck :) &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>career</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>JS Types to Avoid Polyfilling</title>
      <author>Lucia Cerchie</author>
      <pubDate>Wed, 29 Dec 2021 22:28:28 +0000</pubDate>
      <link>https://dev.to/cerchie/js-types-to-avoid-polyfilling-2pli</link>
      <guid>https://dev.to/cerchie/js-types-to-avoid-polyfilling-2pli</guid>
      <description>&lt;p&gt;I was reading the &lt;a href="https://github.com/airbnb/javascript#types"&gt;AirBnB JavaScript Style Guide&lt;/a&gt; recently and came across: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Symbols and BigInts cannot be faithfully polyfilled, so they should not be used when targeting browsers/environments that don’t support them natively."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since I didn't know what polyfilling was, I couldn't understand the full implication of the rest of the sentence. &lt;/p&gt;

&lt;p&gt;Wikipedia &lt;a href="https://en.wikipedia.org/wiki/Polyfill_(programming)"&gt;provided a helpful definition&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"In web development, a polyfill is code that implements a feature on web browsers that do not support the feature." &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, so that was polyfilling in theory -- using code to patch discrepancies between browsers. But what about in practice? And why doesn't it work for Symbols and BigInts? I decided to hunt down a good example. &lt;/p&gt;

&lt;p&gt;I found a great one on &lt;a href="https://javascript.info/polyfills"&gt;Javascript.info&lt;/a&gt;. It explained that the Math.trunc() function doesn't exist in all JS engines, so the polyfill code for it checks for the built-in func, and if it doesn't exist, executes the same functionality. &lt;/p&gt;

&lt;p&gt;I found the &lt;a href="//To%20emulate%20such%20behavior,%20a%20polyfill%20would%20need%20to%20analyze%20the%20code%20and%20replace%20all%20such%20operators%20with%20its%20functions.%20But%20doing%20so%20is%20cumbersome%20and%20would%20cost%20a%20lot%20of%20performance."&gt;exact reason why polyfilling is not a wise idea for BigInt&lt;/a&gt; on JavaScript.info as well:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"To emulate such behavior, a polyfill would need to analyze the code and replace all such operators with its functions. But doing so is cumbersome and would cost a lot of performance."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But what about Symbols? I found the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol"&gt;definition of the Symbol type&lt;/a&gt; on MDN:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Symbol is a built-in object whose constructor returns a symbol primitive — also called a Symbol value or just a Symbol — that’s guaranteed to be unique." &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because these values must be guaranteed to be unique, I can imagine the process to generate them with a polyfill must also be high performance, like that of generating BigInts. That's my surmise, but I was unable to find anything that supported it, so I'd appreciate input here! &lt;/p&gt;

&lt;p&gt;The last question I have is: &lt;/p&gt;

&lt;p&gt;Why does the AirBnB style guide say Symbols and BigInts cannot be &lt;em&gt;faithfully&lt;/em&gt; polyfilled? It seems that they can't be &lt;em&gt;frugally&lt;/em&gt; polyfilled, in terms of performance, but I wonder why they used the adjective "faithfully". Does it mean that polyfilling these types changes them in some way? &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>discuss</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Why we used Docker for testing </title>
      <author>Nitzan Hen</author>
      <pubDate>Wed, 29 Dec 2021 21:11:09 +0000</pubDate>
      <link>https://dev.to/nitzanhen/why-we-used-docker-for-testing-p1d</link>
      <guid>https://dev.to/nitzanhen/why-we-used-docker-for-testing-p1d</guid>
      <description>&lt;p&gt;Perhaps the greatest lesson I've learned from creating &lt;a href="https://github.com/NitzanHen/agrippa"&gt;Agrippa&lt;/a&gt; so far is just how important tests are. Of course I knew they were important before - everybody does - but it's so easy to just push it aside and focus on more exciting code, or write some perfunctory tests that don't really, well, test anything. Eventually, however, slacking off on testing comes back to bite you; for me, luckily, it did when things were only getting started, but the point was clear - writing good tests is a top priority.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-challenging-tool-to-test"&gt;
  &lt;/a&gt;
  A challenging tool to test
&lt;/h2&gt;

&lt;p&gt;For Agrippa, however, writing good tests is far from trivial - it's a CLI for generating React components based on a project's environment (dependencies, existence of config files, etc.), as well as an optional &lt;code&gt;.agripparc.json&lt;/code&gt; config. In other words, a lot of its work is reading &amp;amp; parsing command-line arguments, looking up and reading certain files, and its end result is writing additional files. All of those are non-pure side effects, which are difficult to cover properly with just unit tests. &lt;/p&gt;

&lt;p&gt;Additionally, because Agrippa's defaults greatly depend on the project's environment, it's easy for tests to return false results because of the presence of an unrelated file or dependency. &lt;br&gt;
This is best explained with an example: when run, Agrippa auto-detects whether a project uses Typescript or not, by the existence of a &lt;code&gt;tsconfig.json&lt;/code&gt; file in it. However, Agrippa itself is written in Typescript, which means there's a &lt;code&gt;tsconfig.json&lt;/code&gt; file at its root. As a result, whenever running Agrippa in any sub directory of the project root, &lt;em&gt;it generates Typescript (&lt;code&gt;.ts&lt;/code&gt;/&lt;code&gt;.tsx&lt;/code&gt;) files unless explicitly told otherwise.&lt;/em&gt; And, if tests were stored, for example, in a &lt;code&gt;test&lt;/code&gt; folder in the project repository - they would all be tampered with (at least, those where files are looked up). A similar problem is cause by the existence Agrippa's own &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With this in mind, when planning the implementation of testing I decided on these two key principles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There need to be good &lt;em&gt;integration&lt;/em&gt; tests which test the process - including all of its non pure effects (parsing CLI options, reading files, writing files) - from start to finish, under different conditions and in different environments.&lt;/li&gt;
&lt;li&gt;The integration tests have to be executed in a space as &lt;em&gt;isolated&lt;/em&gt; as possible, due to the process being greatly dependent on the environment it's run in.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The second point is where you can see the need for &lt;em&gt;Docker&lt;/em&gt; - initially, I tried implementing the tests in a temporary directory created by Node and running the tests there, but this turned out to be too much work to build and maintain, and the created directory could still theoretically be non-pure. &lt;br&gt;
Docker, on the other hand, is all about spinning up isolated environments with ease - we have complete control over the OS, the file structure, the present files, and we're more explicit about it all. &lt;/p&gt;

&lt;p&gt;In our case, then, &lt;strong&gt;running the tests inside a docker container would get us the isolation we need&lt;/strong&gt;. So that's what we went with:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Solution file structure (simplified)&lt;/span&gt;
&lt;span class="nb"&gt;test&lt;/span&gt;/integration/
├─ case1/
│  ├─ solution/
│  │  ├─ ComponentOne.tsx
│  │  ├─ component-one.css
│  ├─ testinfo.json
├─ case2/
│  ├─ solution/
│  │  ├─ ComponentTwo.tsx
│  │  ├─ component-two.css
│  ├─ testinfo.json
├─ case3/
│  ├─ ...
├─ integration.test.ts
├─ jest.integration.config.js
Dockerfile.integration
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The end solution works like so:&lt;br&gt;
Integration test cases are stored under &lt;a href="https://github.com/NitzanHen/agrippa/tree/main/test/integration"&gt;&lt;code&gt;test/integration&lt;/code&gt;&lt;/a&gt;, in the &lt;a href="https://github.com/NitzanHen/agrippa"&gt;Agrippa repository&lt;/a&gt;. Each case contains a &lt;code&gt;testinfo.json&lt;/code&gt; file, which declares some general info about the test - a &lt;code&gt;name&lt;/code&gt;, a &lt;code&gt;description&lt;/code&gt; and the &lt;code&gt;command&lt;/code&gt; to be run - and a directory &lt;code&gt;solution&lt;/code&gt;, with the directories and files that are meant to be created by the command. The &lt;code&gt;test/integration&lt;/code&gt; directory also contains a Jest config, and &lt;a href="https://github.com/NitzanHen/agrippa/blob/main/test/integration/integration.test.ts"&gt;&lt;code&gt;integration.test.ts&lt;/code&gt;&lt;/a&gt;, which contains the test logic itself.&lt;/p&gt;

&lt;p&gt;When the &lt;code&gt;test:integration&lt;/code&gt; Node script is run, it builds a Docker image from &lt;a href="https://github.com/NitzanHen/agrippa/blob/main/Dockerfile.integration"&gt;&lt;code&gt;Dockerfile.integration&lt;/code&gt;&lt;/a&gt;, located at the project root. This is a two-stage build: the first stage copies the project source, builds it and packs it into a tarball, and the second copies &amp;amp; installs that tarball, then copies the &lt;code&gt;test/integration&lt;/code&gt; directory. After building the image, a container is created from it, which runs the tests inside.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/NitzanHen/agrippa/blob/main/test/integration/integration.test.ts"&gt;testing logic&lt;/a&gt; is non-trivial, too. It scans the &lt;code&gt;test/integration&lt;/code&gt; directory for cases, and creates a test suite for each (using &lt;code&gt;describe.each()&lt;/code&gt;). The test suite for each case starts by running the case - scanning the &lt;code&gt;solution&lt;/code&gt; directory, running the &lt;code&gt;agrippa&lt;/code&gt; command, then scanning the output directory - then compares the two results. A case is considered successful if (and only if) both &lt;code&gt;solution&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt; have exactly the same directories, the same files, and the content in each file is the same.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-improvements"&gt;
  &lt;/a&gt;
  Further improvements
&lt;/h2&gt;

&lt;p&gt;So far, the solution has been working well. The script takes longer to run than a standard testing script, because of the time it takes for Docker to set up (about 60-70 seconds if Docker needs to build the image, a few seconds otherwise). However, it's simpler, more robust, and safer than implementing a custom solution (with temporary directories, for example), and adding new test cases is easy and boilerplate-free. &lt;/p&gt;

&lt;p&gt;The output (shortened for display purposes) looks like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iJCBSOJH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rpe3u42rt7b4tnad42gl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iJCBSOJH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rpe3u42rt7b4tnad42gl.png" alt="output, shortened" width="880" height="767"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One problem with the implementation, unrelated to Docker, is about using Jest as the testing framework. As it turns out, Jest is limited when it comes to asynchronous testing, and combining a dynamic number of test suites (one for each case), a dynamic number of tests in each, as well as asynchronous setup before all tests (scanning &lt;code&gt;test/integration&lt;/code&gt; for cases) and before each test (running the case) simply doesn't work out.&lt;/p&gt;

&lt;p&gt;When I get to it, I hope to switch to a different testing framework - &lt;a href="https://mochajs.org/"&gt;Mocha&lt;/a&gt; looks good for this particular scenario, and seems fun to get into.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Since Agrippa is greatly sensitive to the environment it's run in, &lt;br&gt;
we needed complete isolation of our testing environment for the tests to truly be accurate. Docker provides exactly that - and therefore we turned to it. The solution using it took some time to properly implement - but it turned out well.&lt;/p&gt;

&lt;p&gt;What do you think? do you have an improvement to suggest, or something to add? I'd love to hear from you!&lt;br&gt;
Thanks for your time.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>docker</category>
      <category>testing</category>
    </item>
  </channel>
</rss>
