<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>JavaScript Scope: An Easy Explanation</title>
      <author>Aravind Sanjeev</author>
      <pubDate>Mon, 08 Nov 2021 11:51:26 +0000</pubDate>
      <link>https://dev.to/aravsanj/javascript-scope-an-easy-explanation-n0h</link>
      <guid>https://dev.to/aravsanj/javascript-scope-an-easy-explanation-n0h</guid>
      <description>&lt;p&gt;The scope of a variable determines where the variable can be used. The scope is broadly divided into two - global scope and local scope.&lt;/p&gt;

&lt;p&gt;The global scope is the outermost scope in JavaScript. Any variable declared in global scope can be accessed anywhere.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;\\&lt;/span&gt; &lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The variable &lt;code&gt;message&lt;/code&gt; is defined in global scope. We can access it anywhere in the document. Apart from the global scope, there are multiple local scopes.&lt;/p&gt;

&lt;p&gt;A variabe declared in local scope can only be accessed inside that local scope. That includes any other (local) scope(s) defined inside it.&lt;/p&gt;

&lt;p&gt;For the sake of understanding, we can categorize local scopes into 3 types:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Block scope&lt;/li&gt;
&lt;li&gt;Function scope&lt;/li&gt;
&lt;li&gt;Module scope&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iX5T9EOO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efhy5boctc3rao1l4qil.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iX5T9EOO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efhy5boctc3rao1l4qil.png" alt="scopes" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#block-scope"&gt;
  &lt;/a&gt;
  Block scope
&lt;/h2&gt;

&lt;p&gt;In JavaScript, a code block is defined using curly braces &lt;code&gt;{}&lt;/code&gt;. Any variable declared inside is in block scope. This applies to &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, and &lt;code&gt;while&lt;/code&gt; statements&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 20&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ReferenceError&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 30&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ReferenceError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should be noted that the block scope only applies to &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;. Anything declared using &lt;code&gt;var&lt;/code&gt; will be in global scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 50&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 50&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can create a block scoped variable by simply declaring it inside a code block too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// hello&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ReferenceError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way we can work with isolated pieces of codes and variables.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#function-scope"&gt;
  &lt;/a&gt;
  Function scope
&lt;/h2&gt;

&lt;p&gt;Any variable declared inside a function is in function scope. It works for &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, and &lt;code&gt;const&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 20&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 30&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 50&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ReferenceError&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ReferenceError&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ReferenceError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Any variable intented to be used on multiple independent functions must be declared in global scope (or enclosing block scope).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#module-scope"&gt;
  &lt;/a&gt;
  Module scope
&lt;/h2&gt;

&lt;p&gt;With the introduction of ES6, modules are a reality. Any variable defined inside a module is within the module scope and cannot be used elsewhere.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// gravity.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;9.8&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 9.8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above module has defined constant &lt;code&gt;g&lt;/code&gt; for internal usage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./gravity&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ReferenceError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, we can use if the variable &lt;code&gt;g&lt;/code&gt; is explicitly exported using the &lt;code&gt;export&lt;/code&gt; keyword.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#nesting-scopes"&gt;
  &lt;/a&gt;
  Nesting scopes
&lt;/h2&gt;

&lt;p&gt;Scopes in JavaScript can be nested. This means variables declared in parent scope can be accessed inside children scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Technically, this is why a variable declared in global scope is accessible anywhere.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lexical-scoping-static-scoping"&gt;
  &lt;/a&gt;
  Lexical scoping (static scoping)
&lt;/h2&gt;

&lt;p&gt;Lexical/static scoping means that a variable defined in outer function can be accessed by the inner function. This is because scope of the variable is &lt;em&gt;statically&lt;/em&gt; determined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pie&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I like &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// I like pie&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here variable &lt;code&gt;p&lt;/code&gt; is defined inside &lt;code&gt;outer()&lt;/code&gt;. However, it is also accessible inside &lt;code&gt;inner()&lt;/code&gt; because of position of variable &lt;code&gt;p&lt;/code&gt;. The variable is located in the &lt;code&gt;outer()&lt;/code&gt;'s scope where the &lt;code&gt;inner()&lt;/code&gt; is also defined. This is called lexical or static scoping.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#let-and-const-keywords-plus-es6-modules"&gt;
  &lt;/a&gt;
  let and const keywords (plus ES6 modules)
&lt;/h2&gt;

&lt;p&gt;Before the introduction of &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; keywords, only global and function scope used to exist. Basically, function scope was the local scope. However, with the introduction of let and const, a separate block scope now exists. You must have noticed that block scope only works for let and const keywords.&lt;/p&gt;

&lt;p&gt;In addition, introduction of ES6 module have brought in module scope. Now function scope along with block and module scope are all local scopes in JavaScript.&lt;/p&gt;

&lt;p&gt;The introduction of let and const keywords are important because it allows us to repeat general variable names in block scope. So we don't have to keep redeclaring them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#undeclared-variables"&gt;
  &lt;/a&gt;
  Undeclared variables
&lt;/h2&gt;

&lt;p&gt;If you have undeclared variables that are assigned a value, it automatically has global scope. For example, in the below example we assign value "Hello" to variable &lt;code&gt;message&lt;/code&gt; inside a function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the variable wasn't declared before it was assigned a value. So variable &lt;code&gt;message&lt;/code&gt; is now in global scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Hello&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is always recommended to declare your variables before or while assigning the value. Simply assigning a value to a variable is just an assignment operation. In the above example, variable &lt;code&gt;message&lt;/code&gt; becomes a property of &lt;code&gt;window&lt;/code&gt; object (because it is defacto declared using &lt;code&gt;var&lt;/code&gt; keyword, we will get to this later below).&lt;/p&gt;

&lt;p&gt;PS: Running JavaScript in strict mode can prevent undeclared variables from being automatically global.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-scope-exists"&gt;
  &lt;/a&gt;
  Why scope exists?
&lt;/h2&gt;

&lt;p&gt;Scopes can create execution context for JS engine. For example, when the engine starts executing a function, all the variables defined inside the function are allocated to memory. Once the function is done executing, the variables are destroyed. This will keep the memory clean and provides a proper execution context to the JS engine.&lt;/p&gt;

&lt;p&gt;This will also help developers easily deal with bugs since codes can be looked at in isolated pieces. It will also take care of variable naming issues since we can repeat the same variable names in different scopes.&lt;/p&gt;

&lt;p&gt;Variables declared in global scope should be minimum. This is because global scope variables will be in the memory until application closes. Make sure any variable is only within the necessary scope. Principle of least accessibility should be practiced.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#var-vs-let-amp-const"&gt;
  &lt;/a&gt;
  var vs let &amp;amp; const
&lt;/h2&gt;

&lt;p&gt;As we saw earlier, variable scoping has some differences depending on how you declare them. Although &lt;code&gt;var&lt;/code&gt; is essentially outdated and is not recommended to be used, you should understand why.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var&lt;/code&gt; was introduced to JavaScript when only global and function scope existed. Both functions and variables declared by &lt;code&gt;var&lt;/code&gt; keyword is &lt;em&gt;hoisted&lt;/em&gt; before JavaScript executes. Hoisting is the process by which JS engine moves functions and variables on top of the file before script is executed.&lt;/p&gt;

&lt;p&gt;That means any variable declared using &lt;code&gt;var&lt;/code&gt; keyword will be available globally. This will not only flood the memory but also creates some painful bugs. Variables declared using &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; keyword are not hoisted. Hence they're block scoped (unless declared globally) which limits them to a narrow purpose.&lt;/p&gt;

&lt;p&gt;Hoisting will also make any variable declared using &lt;code&gt;var&lt;/code&gt; keyword a property of &lt;code&gt;window&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will conflict with variables that are already defined in the &lt;code&gt;window&lt;/code&gt; object. For example, the &lt;code&gt;name&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;However, since &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; are not hoisted, the issue is resolved.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Love it or hate it, you cannot deny ES6 has made an average JavaScript programer's life simpler.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Scope is a way to define the accessibility of variables. JavaScript has evolved over time in accordance with the principle of least accessibility. Hence in 2015, it introduced &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; which enables block scoping.&lt;/p&gt;

&lt;p&gt;From JavaScript's perspective, scope is a way to clearly define the execution context. It will reduce the clutter during development and execution.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Where is the limit of your ethics? Where would you draw the line?</title>
      <author>Keff</author>
      <pubDate>Mon, 08 Nov 2021 11:46:18 +0000</pubDate>
      <link>https://dev.to/nombrekeff/where-is-the-limit-of-your-ethics-where-would-you-draw-the-line-13pp</link>
      <guid>https://dev.to/nombrekeff/where-is-the-limit-of-your-ethics-where-would-you-draw-the-line-13pp</guid>
      <description>&lt;p&gt;I'm guessing that many of you have strong ethics right? I know I have them, and for me it's always hard to know when to draw the line when a client requests certain things. &lt;/p&gt;

&lt;p&gt;What about you?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1. Where would/do YOU draw the line? &lt;/li&gt;
&lt;li&gt;2. Is there anything that would make, or has made, YOU say &lt;em&gt;"NO, I won't do that"&lt;/em&gt;? &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm really curious to know, please feel free to discuss it in the comments!&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>help</category>
      <category>ethics</category>
    </item>
    <item>
      <title>An introduction to atomic state management libraries in React</title>
      <author>Tom Lienard</author>
      <pubDate>Mon, 08 Nov 2021 11:42:33 +0000</pubDate>
      <link>https://dev.to/tomlienard/an-introduction-to-atomic-state-management-libraries-in-react-4fhh</link>
      <guid>https://dev.to/tomlienard/an-introduction-to-atomic-state-management-libraries-in-react-4fhh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Atomic state management libraries are growing. Fast. As you can see in this graph from &lt;a href="https://www.npmtrends.com/jotai-vs-recoil"&gt;npmtrends&lt;/a&gt;, the two most famous libraries &lt;a href="https://recoiljs.org/"&gt;Recoil&lt;/a&gt; and &lt;a href="https://jotai.pmnd.rs/"&gt;Jotai&lt;/a&gt; were almost unknown last year, and now count respectively &lt;strong&gt;240k and 35k downloads per week&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A6vF0-Yq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7hwtx58ko9ymvcog6r5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A6vF0-Yq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7hwtx58ko9ymvcog6r5.png" alt="Jotai VS Recoil" width="880" height="366"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've also open-sourced a new atomic library called &lt;a href="https://github.com/QuiiBz/particule"&gt;Particule&lt;/a&gt;, which has some new interesting features such as &lt;a href="https://github.com/quiiBz/particule#custom-atom-with-hooks"&gt;custom &lt;code&gt;atom&lt;/code&gt;  functions with hooks&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-what-is-atomic-state-management"&gt;
  &lt;/a&gt;
  But what is atomic state management?
&lt;/h2&gt;

&lt;p&gt;Ha, that's a good question. From &lt;a href="https://recoiljs.org/docs/introduction/core-concepts/#atoms"&gt;Recoil's docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Atoms are units of state. They're updateable and subscribable: when an atom is updated, each subscribed component is re-rendered with the new value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An atom represents a piece of state that you can read and update anywhere in your application. Think of it as a &lt;code&gt;useState&lt;/code&gt; that can be shared in any component.&lt;/p&gt;

&lt;p&gt;This approach provides many benefits, mainly:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#avoid-unwanted-rerenders-and-computations"&gt;
  &lt;/a&gt;
  Avoid unwanted re-renders and computations
&lt;/h3&gt;

&lt;p&gt;You won't anymore pass state values and update functions via &lt;code&gt;props&lt;/code&gt;, nor trigger the whole tree of components from a context's consumer. &lt;strong&gt;Only components subscribed to the atom's value will update&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Take a look at this example using &lt;a href="https://github.com/QuiiBz/particule"&gt;Particule&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;textAtom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;atom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useGetAtom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;textAtom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Won't re-render!&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSetAtom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;textAtom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Updated!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Update&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Won't re-render!&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Only &lt;code&gt;&amp;lt;Text /&amp;gt;&lt;/code&gt; will re-render, even if &lt;code&gt;&amp;lt;Button /&amp;gt;&lt;/code&gt; also uses the atom. But there's a difference between the two: &lt;code&gt;&amp;lt;Button /&amp;gt;&lt;/code&gt; &lt;strong&gt;isn't subscribed to updates, because it uses &lt;code&gt;useSetAtom&lt;/code&gt;&lt;/strong&gt; and only retrieves a setter function (similar to the one in &lt;code&gt;useState&lt;/code&gt;. On the contrary, &lt;code&gt;&amp;lt;Text /&amp;gt;&lt;/code&gt; is subscribed to updates because it uses &lt;code&gt;useGetAtom&lt;/code&gt; to retrieve the value.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compose-atom-from-other-atoms"&gt;
  &lt;/a&gt;
  Compose atom from other atoms
&lt;/h3&gt;

&lt;p&gt;Derived (or composed) atoms are atoms made from other atoms. They subscribe to each atom that they depend on, and such automatically trigger a re-render when needed.&lt;/p&gt;

&lt;p&gt;This can be made using &lt;a href="https://recoiljs.org/docs/basic-tutorial/selectors"&gt;selectors&lt;/a&gt; in Recoil, and is even simpler in Jotai and Particule. This example is made with &lt;a href="https://github.com/QuiiBz/particule"&gt;Particule&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eurosAtom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;atom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dollarsAtom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;atom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eurosAtom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;1.15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;euros&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEuros&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAtom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eurosAtom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dollars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setDollars&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAtom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dollarsAtom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setEuros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;euros&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setDollars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dollars&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When &lt;code&gt;eurosAtom&lt;/code&gt; changes, &lt;code&gt;dollarsAtom&lt;/code&gt; is re-calculated since it is subscribed using &lt;code&gt;get&lt;/code&gt; and re-render the component once.&lt;/p&gt;

&lt;p&gt;There are many other interesting topics with atomic state management libraries, such as &lt;code&gt;&amp;lt;Suspense /&amp;gt;&lt;/code&gt; support for async, helper &lt;code&gt;atom&lt;/code&gt; functions to add new functionalities...&lt;/p&gt;

&lt;p&gt;So feel free to comment down below if you want more articles on this, and you can check out the GitHub repository of the libraries I mentioned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/QuiiBz/particule"&gt;Particule&lt;/a&gt; (looking for feedback!)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/facebookexperimental/Recoil"&gt;Recoil&lt;/a&gt; (created by Facebook)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pmndrs/jotai"&gt;Jotai&lt;/a&gt; (created by Poimandres)&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>VS Code: You don't need that extension part 2</title>
      <author>Rob OLeary</author>
      <pubDate>Mon, 08 Nov 2021 11:40:09 +0000</pubDate>
      <link>https://dev.to/robole/vs-code-you-dont-need-that-extension-part-2-34o3</link>
      <guid>https://dev.to/robole/vs-code-you-dont-need-that-extension-part-2-34o3</guid>
      <description>&lt;p&gt;This follows on from the post &lt;a href="https://dev.to/robole/vs-code-you-don-t-need-that-extension-18d7"&gt;VS Code: You don't need that extension&lt;/a&gt; that I wrote last year.&lt;/p&gt;

&lt;p&gt;There are builtin features and settings that ably do the work of many popular extensions. Perhaps, you do not need that extension!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Our remedies oft in ourselves do lie&lt;/p&gt;

&lt;p&gt;- William Shakespeare&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#1-wrap-selected-html-in-a-tag"&gt;
  &lt;/a&gt;
  1. Wrap selected HTML in a tag
&lt;/h2&gt;

&lt;p&gt;Sometimes, you want to wrap a block of HTML with another element when you are refactoring your HTML. This is awkward to do manually.&lt;/p&gt;

&lt;p&gt;For example, in the code below, to wrap the 3 &lt;code&gt;div&lt;/code&gt; elements in a &lt;code&gt;main&lt;/code&gt; element, we would need to go to line 10 and type out an opening &lt;code&gt;main&lt;/code&gt; tag. If we have auto closing tags setting turned on, we may have to delete this closing tag. Then, we need to go to line 26 and type out the closing &lt;code&gt;main&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NXYNV_4Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6df2oefvqu742xdyj5in.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NXYNV_4Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6df2oefvqu742xdyj5in.png" alt="html example" width="880" height="477"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It would be nice to just select the block and run a command to wrap it with the &lt;code&gt;main&lt;/code&gt; tags.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extensions"&gt;
  &lt;/a&gt;
  Extensions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=bradgashler.htmltagwrap"&gt;htmltagwrap&lt;/a&gt; (277K installs): "Wraps selected code with HTML tags"&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=hwencc.html-tag-wrapper&amp;amp;ssr=false#overview"&gt;html tag wrapper&lt;/a&gt; (165K installs): "wrap selected html tag by press ctrl+i, you can change the wrapper tag name simply too."&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#feature"&gt;
  &lt;/a&gt;
  Feature
&lt;/h3&gt;

&lt;p&gt;Emmet can do this for you. Select the code you want and run the command &lt;code&gt;Emmet: wrap with abbreviation&lt;/code&gt;. You will be prompted for an abbreviation, you can just type the name of the tag you want. We just type "main" and hit enter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xgJ6W_rD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3kv4bo1k122p04mn9ddn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xgJ6W_rD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3kv4bo1k122p04mn9ddn.gif" alt="emmet wrap abbreviation demo" width="500" height="344"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you wanted to wrap it with more than one tag and include a class, you can provide an Emmet abbreviation such as &lt;code&gt;main&amp;gt;div.container&lt;/code&gt;, which will give you HTML like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Lorem....&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Animi...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Velit...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-bracket-pair-coloring"&gt;
  &lt;/a&gt;
  2. Bracket pair coloring
&lt;/h2&gt;

&lt;p&gt;Styling of matching brackets pairs can help with identification of scope in your code. In particular, it is very popular for people to color brackets depending on their nesting level.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Za5KM0Ht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zbimukteri9b1lq05uu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Za5KM0Ht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zbimukteri9b1lq05uu.png" alt="bracket colorization example" width="681" height="252"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quite a few extensions have filled this role in some way or another.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extensions"&gt;
  &lt;/a&gt;
  Extensions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer"&gt;Bracker Pair Colorizer&lt;/a&gt; (6.2M installs): "A customizable extension for colorizing matching brackets." The same author wrote Bracket Pair Colorizer 2 as a replacement with breaking changes and more emphasis on performance.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2"&gt;Bracket Pair Colorizer 2&lt;/a&gt; (3.2M installs): "A customizable extension for colorizing matching brackets." It is now unmaintained.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=2gua.rainbow-brackets"&gt;Rainbow Brackets&lt;/a&gt; (1M installs): "Provide rainbow colors for the round brackets, the square brackets and the squiggly brackets. "&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=vincaslt.highlight-matching-tag"&gt;Highlight Matching Tag&lt;/a&gt; (945K installs): "Highlights matching closing and opening tags".&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=rafamel.subtle-brackets"&gt;Subtle Match Brackets&lt;/a&gt; (88K installs): "Underlined matching brackets and more".&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#feature"&gt;
  &lt;/a&gt;
  Feature
&lt;/h3&gt;

&lt;p&gt;VS Code introduced native bracket pair coloring in v1.6.0 (August 2021). It is much faster than any of the extensions listed. You can read the  &lt;a href="https://code.visualstudio.com/blogs/2021/09/29/bracket-pair-colorization"&gt;"Bracket pair colorization 10,000x faster"&lt;/a&gt; blog for a deep dive.&lt;/p&gt;

&lt;p&gt;Bracket pair coloring can be enabled by setting &lt;code&gt;editor.bracketPairColorization.enabled&lt;/code&gt; to true.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1FCJ45or--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vlv4e5hdkljne6zul9wn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1FCJ45or--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vlv4e5hdkljne6zul9wn.png" alt="demostration of bracket pair colorization for 6 indented levels" width="591" height="598"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The bracket colors can be declared in a theme, or can be set through the setting &lt;code&gt;workbench.colorCustomizations&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To set the colors for an installed theme through the  &lt;code&gt;workbench.colorCustomizations&lt;/code&gt; setting, you specify the name of the theme in square brackets, and then assign values to the properties as below. The property &lt;code&gt;editorBracketHighlight.foreground1&lt;/code&gt; refers to the first set of brackets, &lt;code&gt;editorBracketHighlight.foreground2&lt;/code&gt; to the second set of brackets, and so on. Also, there is  the &lt;code&gt;editorBracketHighlight.unexpectedBracket.foreground&lt;/code&gt; property for any extra brackets that are unmatched.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bracket-pair-coloring-settings-summary"&gt;
  &lt;/a&gt;
  Bracket pair coloring settings summary
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;editor.bracketPairColorization.enabled"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="s"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;workbench.colorCustomizations"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;[Panda&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Syntax]"&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;editorBracketHighlight.foreground1"&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#E6E6E6"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;editorBracketHighlight.foreground2"&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#FF75B5"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;editorBracketHighlight.foreground3"&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#19f9d8"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;editorBracketHighlight.foreground4"&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#B084EB"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;editorBracketHighlight.foreground5"&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#45A9F9"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;editorBracketHighlight.foreground6"&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#FFB86C"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;editorBracketHighlight.unexpectedBracket.foreground"&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#FF2C6D"&lt;/span&gt;
&lt;span class="pi"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some of the aforementioned extensions enable you to apply more styles to the brackets, such as underlining and borders, currently this is not possible with this feature. However, there is a possibility for this to be added in the future because &lt;a href="https://code.visualstudio.com/blogs/2021/09/29/bracket-pair-colorization#_tokens-to-the-rescue"&gt;the bracket pair algorithm identifies brackets as tokens&lt;/a&gt; similar to how syntax highlighting works. Time will tell if this is something that will be added.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-indentation-guides-colorization"&gt;
  &lt;/a&gt;
  3. Indentation guides colorization
&lt;/h2&gt;

&lt;p&gt;Indentation guides are vertical lines that outline the blocks of your code. They can help guide your eye to see how your code structured. VS Code refers to them as "brackt pair guides".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GBz6j2mI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4mfvgw85t170bbxezejt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GBz6j2mI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4mfvgw85t170bbxezejt.png" alt="colored guides example" width="681" height="252"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extensions"&gt;
  &lt;/a&gt;
  Extensions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow"&gt;Indent Rainbow&lt;/a&gt; (2.4M installs): "This extension colorizes the indentation in front of your text alternating four different colors on each step." Indentation colorization is based on tab size.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#feature"&gt;
  &lt;/a&gt;
  Feature
&lt;/h3&gt;

&lt;p&gt;Since v1.61 (September 2021), the editor supports colors for indentation guides. VS Code refers to them as "bracket pair guides". They use the same colors as the bracket pair coloring feature discussed above by default.&lt;/p&gt;

&lt;p&gt;Bracket pair guides can be enabled by setting &lt;code&gt;editor.guides.bracketPairs&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, it is set to to &lt;code&gt;false&lt;/code&gt; by default. There is a third option &lt;code&gt;active&lt;/code&gt; to only show the indent guide for the active block. This setting should be used instead of the deprecated  &lt;code&gt;editor.renderIndentGuides&lt;/code&gt; setting.&lt;/p&gt;

&lt;p&gt;As you can see from the example below, the guides are quite muted by default. It looks like the colors are destaurated.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4p6Pcq6Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ok9mpj004g72sfdxoct.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4p6Pcq6Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ok9mpj004g72sfdxoct.png" alt="indent guide colorization" width="591" height="598"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can enable highlighting of the indent guide for the current scope by setting &lt;code&gt;editor.guides.highlightActiveIndentation&lt;/code&gt; to true. This should be used instead of the deprecated &lt;code&gt;editor.highlightActiveIndentGuide&lt;/code&gt; setting.&lt;/p&gt;

&lt;p&gt;As you can see from the example below, the active indent guide is shown in a brighter (more saturated) color.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YHauOBDH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ucumkvoekmrtk3cfpra.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YHauOBDH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ucumkvoekmrtk3cfpra.png" alt="active indent guide" width="591" height="598"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is also a setting &lt;code&gt;editor.guides.bracketPairsHorizontal&lt;/code&gt; that controls if and when to render horizontal lines when a line of code crosses into another indentation level. It defaults to &lt;code&gt;active&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hjEn5RZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kcnb68fu0ci4q3w3zyc8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hjEn5RZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kcnb68fu0ci4q3w3zyc8.gif" alt="horiztonal line indent guide" width="600" height="342"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similar to bracket pairs, the colors can be declared in a theme, or can be set through the setting &lt;code&gt;workbench.colorCustomizations&lt;/code&gt;. You can change the color of the lines at each indent level through the properties &lt;code&gt;editorBracketPairGuide.background{1,...,6}&lt;/code&gt; and &lt;code&gt;editorBracketPairGuide.activeBackground{1,...,6}&lt;/code&gt; .&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#indent-guides-settings-summary"&gt;
  &lt;/a&gt;
  Indent guides settings summary
&lt;/h3&gt;

&lt;p&gt;The relevent settings are:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"editor.guides.bracketPairs"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.guides.highlightActiveIndentation"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.guides.bracketPairsHorizontal"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"active"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"workbench.colorCustomizations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"[Panda Syntax]"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketPairGuide.background1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#FFB86C"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketPairGuide.background2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#FF75B5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketPairGuide.background3"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#45A9F9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketPairGuide.background4"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#B084EB"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketPairGuide.background5"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#E6E6E6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketPairGuide.background6"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#19f9d8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

      &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketPairGuide.activeBackground1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#FFB86C"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketPairGuide.activeBackground2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#FF75B5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketPairGuide.activeBackground3"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#45A9F9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketPairGuide.activeBackground4"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#B084EB"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketPairGuide.activeBackground5"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#E6E6E6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketPairGuide.activeBackground6"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#19f9d8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-running-and-automating-scripts-npm-gulp-make-and-others"&gt;
  &lt;/a&gt;
  4. Running and automating scripts (NPM, Gulp, Make, and others)
&lt;/h2&gt;

&lt;p&gt;Most projects requires some tasks to be run like linting, testing, building, packaging, and deploying. Depending on the type of project it is, you may use different tools to handle this such as NPM, Grunt, Gulp, Make, and so on. While this is often something you do on the command-line, it can be handy to run some of these actions in the editor without switching context.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extensions"&gt;
  &lt;/a&gt;
  Extensions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=eg2.vscode-npm-script"&gt;NPM&lt;/a&gt; (2.7M installs): "This extension supports running npm scripts defined in the package.json file and validating the installed modules against the dependencies defined in the package.json."&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=nickdodd79.gulptasks"&gt;Gulp Tasks&lt;/a&gt; (39K installs): "A gulp task visualization and execution extension for Visual Studio Code."&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=technosophos.vscode-make"&gt;Make&lt;/a&gt; (31K installs): "Run Make easily."&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#feature"&gt;
  &lt;/a&gt;
  Feature
&lt;/h3&gt;

&lt;p&gt;VS Code has a Tasks feature. Tasks can be configured to run scripts you want inside VS Code through the command palette, you can customise how they are run, you can add a keybinding to them, you can run multiple scripts in a sequence, and you can run them automatically when you open a workspace.&lt;/p&gt;

&lt;p&gt;VS Code can autodetect scripts for Gulp, Grunt, Jake, and npm. You can also run shell scripts, however they are not autodetected.&lt;/p&gt;

&lt;p&gt;I will show you briefly how you can run NPM scripts as tasks. VS Code picks them up from your &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#default-build-task"&gt;
  &lt;/a&gt;
  Default build task
&lt;/h4&gt;

&lt;p&gt;Pressing &lt;code&gt;Ctrl+Shift+B&lt;/code&gt; or running the command &lt;strong&gt;Run Build Task&lt;/strong&gt; will show you a picker of the autodetected tasks. For NPM, it narrows the list down for you:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WI6i798i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oe7k1zbkqzg6x0zanmm0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WI6i798i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oe7k1zbkqzg6x0zanmm0.png" alt="build task command palette" width="734" height="223"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Usually, the first option is the correct option.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#running-a-task"&gt;
  &lt;/a&gt;
  Running a task
&lt;/h4&gt;

&lt;p&gt;You can run a task through the &lt;strong&gt;Tasks: Run Task&lt;/strong&gt; command. It will show you a list of the autodetected tasks from your workspace, and any custom tasks you created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ZhqCFqN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nomc7v5conh37t60ien.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ZhqCFqN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nomc7v5conh37t60ien.png" alt="tasks" width="590" height="255"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to be run a task for a particular tool, you can use &lt;strong&gt;Quick Open&lt;/strong&gt;, by pressing &lt;code&gt;Ctrl + P&lt;/code&gt; or through the menu &lt;em&gt;File &amp;gt; Go to File&lt;/em&gt;, you type "task" and hit &lt;code&gt;space&lt;/code&gt;, and then the dropdown will show you the options for the different tools.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qp68fLXK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ih157bl741m6kt5vbhsy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qp68fLXK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ih157bl741m6kt5vbhsy.jpg" alt="tasks" width="599" height="176"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For my JavaScript project I pick "npm" and I get a list of my npm scripts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7yjF_uKO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/urpojx82mnk3veknllsm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7yjF_uKO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/urpojx82mnk3veknllsm.jpg" alt="npm tasks" width="598" height="352"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pick one and it will run the script.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#automate-tasks"&gt;
  &lt;/a&gt;
  Automate tasks
&lt;/h4&gt;

&lt;p&gt;You can define custom tasks for your project in &lt;code&gt;&amp;lt;project folder&amp;gt;/.vscode/tasks.json&lt;/code&gt;. You can create the file yourself, or you can run the &lt;strong&gt;Tasks: Configure Task&lt;/strong&gt; command to build a template file for you by picking the option &lt;strong&gt;Create task.json file from template&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UcOxWi5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8f08vrino79sxu9pwl3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UcOxWi5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8f08vrino79sxu9pwl3.png" alt="configure task command" width="880" height="275"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can configure a task to run when you open a project through the &lt;code&gt;runOptions&lt;/code&gt; property.  I discuss this in another article - &lt;a href="https://www.roboleary.net/vscode/2020/10/19/vscode-task-onstartup.html"&gt;How to run a command automatically in VS Code when you open a project&lt;/a&gt;. I often use this in projects to fire up a dev server whenever I open a project. This is what the &lt;code&gt;tasks.json&lt;/code&gt; look like for that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2.0.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tasks&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Run dev server on startup&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shell&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;command&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;npm run dev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;windows&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;command&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;npm run dev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;presentation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;reveal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;always&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;panel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;runOptions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;runOn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;folderOpen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adding-a-shortcut-for-a-task"&gt;
  &lt;/a&gt;
  Adding a shortcut for a task
&lt;/h3&gt;

&lt;p&gt;If you run a task frequently, you can define a keyboard shortcut for the task.&lt;/p&gt;

&lt;p&gt;For example, to bind &lt;code&gt;Ctrl+R&lt;/code&gt; to the my dev server task, I could add the following to the  &lt;code&gt;keybindings.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ctrl+r"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"workbench.action.tasks.runTask"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Run dev server on startup"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;args&lt;/code&gt; property should match the value of the &lt;code&gt;label&lt;/code&gt; property from the &lt;code&gt;tasks.json&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;You can read the &lt;a href="https://code.visualstudio.com/docs/editor/tasks#vscode"&gt;user guide on Tasks&lt;/a&gt; to learn more about tasks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-formatting-code"&gt;
  &lt;/a&gt;
  5. Formatting code
&lt;/h2&gt;

&lt;p&gt;Consistent code formatting makes code easier to read, and saves your brain parsing cycles.&lt;/p&gt;

&lt;p&gt;If you use many different languages, you will need some type of extension for formatting, but along the way you still may be using an extension that you actually don't need. It is not as cut and dry as the other items I have discussed, it is dependent on the particular languages you use. Let's get into it more specifically.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extensions"&gt;
  &lt;/a&gt;
  Extensions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt; (15M installs): Prettier is a very opinionated formatter with very few configuration options. It supports some languages by default: JavaScript, JSX, Angular, Vue, Flow, TypeScript, CSS, Less,  SCSS, HTML, JSON, GraphQL, Markdown, and YAML. It has a plugin architecture to extend it to more languages.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=HookyQR.beautify"&gt;Beautify&lt;/a&gt; (7.3M installs): Beautify uses &lt;code&gt;js-beautify&lt;/code&gt;, which is a less opinionated formatter.  It supports Javascript, JSON, CSS, Sass, and HTML. You can use a &lt;code&gt;.jsbeautifyrc&lt;/code&gt; file to control the style settings.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=mohd-akram.vscode-html-format"&gt;HTML Format&lt;/a&gt; (300k installs)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=ClemensPeters.format-json"&gt;JSON Formatter&lt;/a&gt; (30K installs)&lt;/li&gt;
&lt;li&gt;Many, many more &lt;a href="https://marketplace.visualstudio.com/search?target=VSCode&amp;amp;category=Formatters&amp;amp;sortBy=Installs."&gt;extensions listed in the "Formatter" category in the VS Code marketplace&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#feature"&gt;
  &lt;/a&gt;
  Feature
&lt;/h3&gt;

&lt;p&gt;VS Code has builtin formatters for HTML, JavaScript, TypeScript, and  JSON. This is a decent basis for frontend developers and JavaScript-oriented backend developers.&lt;/p&gt;

&lt;p&gt;You may be wondering why CSS and CSS-like syntaxes are not on this list, I don't know why. What i do know is that &lt;a href="https://github.com/microsoft/vscode/issues/119877"&gt;the VS Code does not plan to add one in the future&lt;/a&gt;. Like other languages that are not in this list, you will need an extension to provide formatting for that language. While it is tempting, particularly as a frontend developer, just to install Prettier because it covers a number of languages out of the box, there are tradeoffs with this. I will discuss this in the "Other languages" section below.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#settings-for-languages-with-builtin-formatters"&gt;
  &lt;/a&gt;
  Settings for languages with builtin formatters
&lt;/h4&gt;

&lt;p&gt;To use the builtin formatters, you can add the following settings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"[html]"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.defaultFormatter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vscode.html-language-features"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"[javascript, javascriptreact, typescript]"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.defaultFormatter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vscode.typescript-language-features"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"[json, jsonc]"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.defaultFormatter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vscode.json-language-features"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I tried these out for a while and was pleasantly surprised. VS Code uses &lt;a href="https://www.npmjs.com/package/js-beautify/v/1.13.0"&gt;js-beautify&lt;/a&gt; under the hood, which is also used by the &lt;a href="https://marketplace.visualstudio.com/items?itemName=HookyQR.beautify"&gt;Beautify&lt;/a&gt; extension. So, you can expect similar results to that extension. Your mileage may vary for the formating of JSONC, it is asking the JSON Language Features extension to deal with "illegal" comments, but it appears to manage it without issues. I don't use React, so I can't comment how well React is formatted.&lt;/p&gt;

&lt;p&gt;You cannot include a &lt;code&gt;.jsbeautifyrc&lt;/code&gt; file in a project to control the formatting. However, there are equivalent formatting settings available. You will find formatting settings for each language with the naming convention of &lt;code&gt;"&amp;lt;language-name&amp;gt;.format.&amp;lt;property-name&amp;gt;"&lt;/code&gt;. Here are a few examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"html.format.wrapAttributesIndentSize"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"html.format.templating"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"javascript.format.insertSpaceAfterCommaDelimiter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"javascript.format.semicolons"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"insert"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is an &lt;a href="https://code.visualstudio.com/docs/languages/html#_formatting"&gt;overview of the HTML formatting settings in the docs if you want to delve deeper&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#other-languages"&gt;
  &lt;/a&gt;
  Other languages
&lt;/h4&gt;

&lt;p&gt;The tricky thing with formatters is that they involve considerable work to maintain, it is mosty left to independent devs to create the extensions to fill the gaps. Realistically, people are not able to maintain these as side projects, so the quality varies depending on how popular a language is. This is a weak spot for VS Code.&lt;/p&gt;

&lt;p&gt;For other languages, you have a few different options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Many language support extensions are also formatters e.g. &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python"&gt;Python&lt;/a&gt;, &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.java"&gt;Language Support for Java by Red Hat&lt;/a&gt;, &lt;a href="https://marketplace.visualstudio.com/items?itemName=rebornix.Ruby"&gt;Ruby&lt;/a&gt;, &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml"&gt;YAML&lt;/a&gt;, &lt;a href="https://marketplace.visualstudio.com/items?itemName=DotJoshJohnson.xml"&gt;XML Tools&lt;/a&gt;,  &lt;a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur"&gt;Vetur&lt;/a&gt; for Vue, and &lt;a href="https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode"&gt;Svelte for VS Code&lt;/a&gt; (uses Prettier under the hood). You can use one of these as your formatter.&lt;/li&gt;
&lt;li&gt;You can install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt; extension or the &lt;a href="https://marketplace.visualstudio.com/items?itemName=HookyQR.beautify"&gt;Beautify&lt;/a&gt; extension to cover a few extra languages such as CSS. This is easy to do. However, these extensions are always loaded, regardless of the languages used in a project, because they use the &lt;code&gt;onStartupFinished&lt;/code&gt; &lt;a href="https://code.visualstudio.com/api/references/activation-events"&gt;Activation Event&lt;/a&gt; in their configuration. This is wasteful of system resources, especially if you are working on backend projects that do not use to any of their default languages that these extensions format. Of course, you can disable the extension for a workspace to ensure that they do not load. If you have a decent computer, this may not bother you.&lt;/li&gt;
&lt;li&gt;If you want to use the &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt; extension for a language that is not supported out of the box such as Java, you need to install a Prettier plugin (a node package) as a development dependency for that project. It is awkward to have node packages in a non-JavaScript backend project. If you share a project with others, having 2 or more sets of dev dependencies is a headache.&lt;/li&gt;
&lt;li&gt;You can install a formatter that targets a particular language. You can search in the marketplace for a particular language in the "Formatter" category: &lt;a href="https://marketplace.visualstudio.com/search?target=VSCode&amp;amp;category=Formatters&amp;amp;sortBy=Installs"&gt;https://marketplace.visualstudio.com/search?target=VSCode&amp;amp;category=Formatters&amp;amp;sortBy=Installs&lt;/a&gt;. These are not that common.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are a frontend developer, the big omission from the list of builtin formatters is for CSS and CSS-like syntaxes. The options for this are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can use the &lt;a href="https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint"&gt;stylelint&lt;/a&gt; extension to cover you for both linting and formatting. Stylelint covers all CSS-like syntaxes. You can point to a global stylelint config in the VS Code settings.&lt;/li&gt;
&lt;li&gt;If you use SASS (.sass files), you probably have installed the &lt;a href="https://marketplace.visualstudio.com/items?itemName=Syler.sass-indented"&gt;SASS extension&lt;/a&gt; for language support. This is also a formatter.&lt;/li&gt;
&lt;li&gt;If you use one of the UI frameworks, you probably have installed an extension for language support, which are also formatters e.g. &lt;a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur"&gt;Vetur&lt;/a&gt; for Vue, and &lt;a href="https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode"&gt;Svelte for VS Code&lt;/a&gt; for Svelte.&lt;/li&gt;
&lt;li&gt;There does not seem to be a worthwhile dedicated CSS formatter, there is the &lt;a href="https://marketplace.visualstudio.com/items?itemName=lonefy.vscode-JS-CSS-HTML-formatter&amp;amp;ssr=false#review-details"&gt;JS-CSS-HTML Formatter&lt;/a&gt; but it has a backlog of serious issues.&lt;/li&gt;
&lt;li&gt;If the above does not satisfy you, then maybe installing &lt;a href="https://marketplace.visualstudio.com/items?itemName=HookyQR.beautify"&gt;Beautify&lt;/a&gt; or &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt; is the best option.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For backend languages, you will find that most language support extensions are also formatters. You need to try them out to see if they are satisfactory. Of course, you could choose to use a linter to cover the formatting duties for you for these languages too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Before you reach for an extension, see if VS Code can do it already. It sounds like an obvious move, but we are all probably guilty of doing it at one time or another. VS Code is adding features regularly, so it is worth checking the changelog every so often.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>tooling</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Top 10 dev.to articles of the week🙌.</title>
      <author>Kavindu Santhusa</author>
      <pubDate>Mon, 08 Nov 2021 11:36:36 +0000</pubDate>
      <link>https://dev.to/ksengine/top-10-devto-articles-of-the-week-47i3</link>
      <guid>https://dev.to/ksengine/top-10-devto-articles-of-the-week-47i3</guid>
      <description>&lt;p&gt;DEV is a community of software developers getting together to help one another out. The software industry relies on collaboration and networked learning. They provide a place for that to happen.&lt;br&gt;
Here is the most popular articles published on this platform.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1"&gt;
  &lt;/a&gt;
  #1
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/github/how-to-create-the-perfect-readme-for-your-open-source-project-1k69"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fDWBqDXf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3it-8oUw--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hb63jq9wuevwrpg32va.png" alt="Image of post" width="880" height="440"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/github" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pM6fmKzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7fGFlBNG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2575/3da37f64-b46e-4fa5-bf86-01b63ba5f57b.png" alt="GitHub" width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZV7rcsza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--dHxkCv5o--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/302741/1c09aafd-6e00-4f49-b80c-5bf0eb190314.jpg" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/github/how-to-create-the-perfect-readme-for-your-open-source-project-1k69" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Create the Perfect README for Your Open Source Project&lt;/h2&gt;
      &lt;h3&gt;Rizel Scarlett for GitHub ・ Nov 2 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
,
&lt;h2&gt;
  &lt;a href="#2"&gt;
  &lt;/a&gt;
  #2
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/nilanth/react-architecture-for-enterprise-application-3pnh"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B8f1hEl9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--RmcQshZa--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bt2hyi92343wdhmqh8r7.png" alt="Image of post" width="880" height="440"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/nilanth" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IIOawU8_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--pANBZ-qG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/561035/f0dd96a3-bc20-4bb3-8717-03125438c6ab.jpeg" alt="nilanth"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nilanth/react-architecture-for-enterprise-application-3pnh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;React Architecture for Enterprise Application&lt;/h2&gt;
      &lt;h3&gt;Nilanth ・ Nov 6 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
,
&lt;h2&gt;
  &lt;a href="#3"&gt;
  &lt;/a&gt;
  #3
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/altamashali/deep-dive-into-nodejs-architecture-5190"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--489rJZ8g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--p0YB9Ymd--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9x6ibatjqgzibmxd29j.png" alt="Image of post" width="880" height="440"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/altamashali" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zl3kyyLk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--O64mS1vZ--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/638177/d5756be4-5953-47cd-8591-312d5177c31b.png" alt="altamashali"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/altamashali/deep-dive-into-nodejs-architecture-5190" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Deep dive into Node.js Architecture&lt;/h2&gt;
      &lt;h3&gt;Altamash Ali ・ Nov 6 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
,
&lt;h2&gt;
  &lt;a href="#4"&gt;
  &lt;/a&gt;
  #4
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/alexomeyer/10-vs-code-extensions-to-fight-technical-debt-508f"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y6o_fC22--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--4Z91kpZx--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yc0bk74ubq8f4vrw65ac.jpg" alt="Image of post" width="880" height="440"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/alexomeyer" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lqys3DbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--FHaAbnOf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/205186/9a0a943c-c21c-451d-bb4e-96bef7ef8d94.png" alt="alexomeyer"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/alexomeyer/10-vs-code-extensions-to-fight-technical-debt-508f" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 VS Code Extensions to Fight Technical Debt&lt;/h2&gt;
      &lt;h3&gt;Alex Omeyer ・ Nov 3 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codequality&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vscode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tooling&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#refactorit&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
,
&lt;h2&gt;
  &lt;a href="#5"&gt;
  &lt;/a&gt;
  #5
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/codebucks/build-a-stunning-portfolio-with-react-js-p1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tws4-o5N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--madTBCLD--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7pkfs5vyft03x5ohb1ww.png" alt="Image of post" width="880" height="440"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/codebucks" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uEyjIdNs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--v1YN8sWN--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/520837/06d9d334-edd9-457e-9741-9b4e929bcff6.png" alt="codebucks"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/codebucks/build-a-stunning-portfolio-with-react-js-p1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🔥Build a Stunning Portfolio website with React JS&lt;/h2&gt;
      &lt;h3&gt;CodeBucks ・ Nov 2 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
,
&lt;h2&gt;
  &lt;a href="#6"&gt;
  &lt;/a&gt;
  #6
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/codeoz/enhance-your-js-skill-by-using-the-correct-array-method-5c2j"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xFIgf3tc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--TS3HdV5m--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t99gaklkkvhwa391td5n.jpg" alt="Image of post" width="880" height="440"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/codeoz" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fqyYINYJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--A8scdPPB--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/535221/d73c1f8e-f607-440b-a29d-1e8e5f1174ab.png" alt="codeoz"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/codeoz/enhance-your-js-skill-by-using-the-correct-array-method-5c2j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Enhance your JS Skill by using the correct array method&lt;/h2&gt;
      &lt;h3&gt;CodeOz ・ Nov 5 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
,
&lt;h2&gt;
  &lt;a href="#7"&gt;
  &lt;/a&gt;
  #7
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/ruppysuppy/5-tips-to-take-your-website-lighthouse-score-from-meh-to-wow-2375"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TMWzaGBR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Fls98rae--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpnxqdvknws1bitpak6p.png" alt="Image of post" width="880" height="440"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/ruppysuppy" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oA7zxE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--E69pqyft--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/530414/941751d8-06b8-41bd-9de9-6ea056b7199f.png" alt="ruppysuppy"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ruppysuppy/5-tips-to-take-your-website-lighthouse-score-from-meh-to-wow-2375" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 Tips to Take your Website Lighthouse Score from Meh to WOW!&lt;/h2&gt;
      &lt;h3&gt;Tapajyoti Bose ・ Nov 7 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
,
&lt;h2&gt;
  &lt;a href="#8"&gt;
  &lt;/a&gt;
  #8
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/medusajs/get-started-with-medusa-the-open-source-alternative-to-shopify-305j"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUar90y4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--82rbWiWu--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o74562rexg1ojyezqu42.png" alt="Image of post" width="880" height="440"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/medusajs" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gJWMKFUF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--eI6J4_Sp--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/4507/16eb5347-8d42-4547-a4e0-a45d2d91d14b.png" alt="Medusa Commerce" width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y-odgQ4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--t1wCpb78--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/507096/fe1c31aa-a974-42d3-a189-df8fe702cd3a.jpeg" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/medusajs/get-started-with-medusa-the-open-source-alternative-to-shopify-305j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Get started with Medusa: the open-source alternative to Shopify&lt;/h2&gt;
      &lt;h3&gt;Shahed Nasser for Medusa Commerce ・ Nov 2 ・ 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
,
&lt;h2&gt;
  &lt;a href="#9"&gt;
  &lt;/a&gt;
  #9
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/mbarzeev/creating-a-react-component-with-tdd-2jn8"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BSnv7zGN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--a7Qge8DZ--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/we1r81gmo7qy4iubpw5f.jpg" alt="Image of post" width="880" height="440"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/mbarzeev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4uZ0anF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--A07_qypK--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/210953/29b527cd-2c72-4a08-af7b-a8e4eb778637.png" alt="mbarzeev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mbarzeev/creating-a-react-component-with-tdd-2jn8" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Creating a React component with TDD&lt;/h2&gt;
      &lt;h3&gt;Matti Bar-Zeev ・ Nov 5 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#testing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
,
&lt;h2&gt;
  &lt;a href="#10"&gt;
  &lt;/a&gt;
  #10
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/zelcion/how-a-single-json-file-could-become-your-entire-code-base-356j"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2jqrPfI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/social_previews/article/881585.png" alt="Image of post" width="880" height="468"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/zelcion" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g1w6hum---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tbtHNz15--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/738474/caba3fd7-a7a7-411d-a217-3c19e42e4ee1.png" alt="zelcion"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/zelcion/how-a-single-json-file-could-become-your-entire-code-base-356j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How a single JSON file could become your entire code base&lt;/h2&gt;
      &lt;h3&gt;Fábio M Jr ・ Nov 1 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Orginal authors of this articles are &lt;a class="mentioned-user" href="https://dev.to/blackgirlbytes"&gt;@blackgirlbytes&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/nilanth"&gt;@nilanth&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/altamashali"&gt;@altamashali&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/alexomeyer"&gt;@alexomeyer&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/codebucks"&gt;@codebucks&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/codeoz"&gt;@codeoz&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/ruppysuppy"&gt;@ruppysuppy&lt;/a&gt;
, shahednasser, mbarzeev, zelcion&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Enjoy these articles.&lt;br&gt;
Follow me for more articles.&lt;br&gt;
Thanks 💖💖💖&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Django 2.x V/S Django 3.x</title>
      <author>Priyanshu Panwar</author>
      <pubDate>Mon, 08 Nov 2021 11:10:07 +0000</pubDate>
      <link>https://dev.to/priyanshupanwar/django-2x-vs-django-3x-18e5</link>
      <guid>https://dev.to/priyanshupanwar/django-2x-vs-django-3x-18e5</guid>
      <description>&lt;p&gt;In this article, we'll talk about the new features added to Django 3.x and their differences, though Django 2.2.x still has a Long Term Support. (I still use Django 2.2.6)&lt;br&gt;
Before we start, &lt;strong&gt;Both Django versions work very well with Python 3.x&lt;/strong&gt;, though one might feel some problem with some libraries in Django 2.x for python 3.6+(in rare libraries).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#new-features-added-in-django-3x"&gt;
  &lt;/a&gt;
  New Features added in Django 3.x
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#maria-db"&gt;
  &lt;/a&gt;
  MARIA DB
&lt;/h3&gt;

&lt;p&gt;Django 3.x comes in support with Maria DB. This might not effect most of the django programmers but for those who are fans of this open source MYSQL database. &lt;br&gt;
This is how you can use MariaDB in your django project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# settings.py
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS': {
            'read_default_file': '/path/to/my.cnf',
        },
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# my.cnf
[client]
database = NAME
user = USER
password = PASSWORD
default-character-set = utf8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#asgi-in-django-biggest-upgrade-of-3x"&gt;
  &lt;/a&gt;
  ASGI in Django - Biggest Upgrade of 3.x
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Django 3.0 is now &lt;strong&gt;fully async-capable&lt;/strong&gt;, it provides support for running as an ASGI application in addition to the existing WSGI support.&lt;/li&gt;
&lt;li&gt;ASGI (Asynchronous Server Gateway Interface) is a spiritual successor of WSGI, intended to provide a standard interface between async-capable Python web servers, frameworks and applications.
Let's take a simple example to see the working of async python in django.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async def application(scope, receive, send):
    event = await receive()
    ...
    await send({"type": "websocket.send", ...})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These two features are the main upgrades in the Django 3.0&lt;br&gt;
If you are looking to work with MariaDB or want to use the power of async python, then definitely upgrade to Django 3.0&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  THANK YOU
&lt;/h2&gt;

&lt;p&gt;Feel Free to ask me anything in comments or reach out to me directly. &lt;a href="http://priyanshu-panwar.github.io/"&gt;Priyanshu Panwar&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/priyanshu-panwar"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Top 10 Youtube Channels To Learn Web Development</title>
      <author>Muthu Annamalai Venkatachalam</author>
      <pubDate>Mon, 08 Nov 2021 10:35:55 +0000</pubDate>
      <link>https://dev.to/muthuannamalai12/top-10-youtube-channels-to-learn-web-development-13nc</link>
      <guid>https://dev.to/muthuannamalai12/top-10-youtube-channels-to-learn-web-development-13nc</guid>
      <description>&lt;p&gt;If you wish to make Web development a career or it is merely your hobby it can be overwhelming to decide where to begin. You can certainly invest in short online or offline courses - many of them are quite expensive. However, YouTube channels can provide developers with interesting perspectives and tips. In the end, Youtube is the largest online video platform in the world. The following are 10 of the best YouTube channels to learn web development.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-traversy-media"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.youtube.com/user/TechGuyWeb"&gt;Traversy Media&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Brad Traversy founded Traversy Media. It provides the latest information on a wide variety of programming languages in the form of web tutorials. There are 1.5 million subscribers on the channel, and its tutorials cover a wide range of programming languages like React.js, Angular, Node, Ruby, Python, and many more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nhlC3P4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628788550085/pbfFAv0Da.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nhlC3P4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628788550085/pbfFAv0Da.jpeg" alt="Traversy.jpg" width="880" height="434"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-derek-banas"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://www.youtube.com/user/derekbanas"&gt;Derek Banas&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;There are detailed tutorials on programming languages from Derek Banas that are ideal for novices as well as experienced developers. There are separate playlists for each language on this web development YouTube channel for beginners, which has already uploaded more than 1000 videos. Furthermore, it is updated on a regular basis every two weeks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r5GPL6E2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628788592020/E3mQKBGiY.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r5GPL6E2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628788592020/E3mQKBGiY.jpeg" alt="Derek.jpg" width="880" height="437"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-adam-khoury"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://www.youtube.com/user/flashbuilding/featured"&gt;Adam Khoury&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;More than a decade ago, Adam Khoury started creating videos for his users. The channel was founded in 2008 and since then has developed a great reputation for offering detailed videos on many different programming languages, including JavaScript, SQL, PHP, CSS, HTML, ActionScript, and more. There are more than 100 videos on JavaScript alone.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ryAx_8mI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636367964575/oZFrxoJtV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ryAx_8mI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636367964575/oZFrxoJtV.png" alt="Adam Khoury - Yo.png" width="880" height="471"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-programming-with-mosh"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://www.youtube.com/user/programmingwithmosh"&gt;Programming With Mosh&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Mosh Hamedani created Programming with Mosh. With this channel, you will discover not only the current trend in web languages but also the newest web technologies that are rapidly gaining popularity. Basically, the channel provides long videos discussing each topic and language in detail (extending to hours).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Z4PE_Tg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628788717946/bgr_v_pYC.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Z4PE_Tg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628788717946/bgr_v_pYC.jpeg" alt="Mosh.jpg" width="880" height="446"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-devtips"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://www.youtube.com/user/DevTipsForDesigners"&gt;DevTips&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Each Friday, two bug generators — David and MPJ — release new videos on Dev Tips. Both website design and development are covered in this channel. Those who wish to master both skills, instead of just one, should choose this route.&lt;/p&gt;

&lt;p&gt;Among the topics they cover are CSS, HTML5, SASS, Foundation, jQuery, Ruby on Rails, Bootstrap, and GitHub. You can experiment with code while also learning to program.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nhkJactx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628789649649/H3HiOSRwX.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nhkJactx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628789649649/H3HiOSRwX.jpeg" alt="Dev Tips.jpg" width="880" height="436"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-leveluptuts"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://www.youtube.com/user/LevelUpTuts"&gt;LevelUpTuts&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;With LevelUpTuts, users will be able to improve their documentation abilities and learn how to handle web projects. Tutorials on web design and development are detailed and easy to follow. Among the topics covered on the channel are Meteor, Sass, Stylus, Polymer 1.0, WordPress, JavaScript, and design applications such as Sketch.&lt;/p&gt;

&lt;p&gt;It has published 750+ tutorials on the web and graphic design since 2012. Twice a week, Scott Tolinski - the channel's founder - uploads a new video. You get a real tutorial experience here&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kpfAh7aH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636368054741/enKfa5U7e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kpfAh7aH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636368054741/enKfa5U7e.png" alt="LevelUpTuts - Yo.png" width="880" height="438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-web-dev-simplified"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://www.youtube.com/channel/UCFbNIlppjAuEX4znoulh0Cw"&gt;Web Dev Simplified&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Web Dev Simplified focuses on teaching web development skills and techniques in a practical manner. You can use Web Dev Simplified to learn the most popular and newest technologies to become a full-stack developer if you are just getting started with web development. In addition, Web Dev Simplified covers advanced topics using the latest best practices for experienced web developers.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6MaflpR2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628790418915/cz_5YGtuL.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6MaflpR2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628790418915/cz_5YGtuL.jpeg" alt="Web Dev.jpg" width="880" height="438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-thenewboston"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://www.youtube.com/user/thenewboston"&gt;TheNewBoston&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Founded by Bucky Roberts this channel has more than two million subscribers to TheNewBoston, which is a popular YouTube video channel for learning programming languages for beginners. Many beginners turn to this channel for free web learning. Tutorials are available in both backend and frontend languages, suitable for beginners to experts.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0b2K1Zst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628790797070/9fSJQXrIa.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0b2K1Zst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628790797070/9fSJQXrIa.jpeg" alt="new boston.jpg" width="880" height="463"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-net-ninja"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://www.youtube.com/channel/UCW5YeuERMmlnqo4oq8vwUpg"&gt;Net Ninja&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The Net Ninja is an awesome resource for improving your web development skills. Over 1000 free programming tutorials are available on this channel, including those on Modern JavaScript (beginners to advanced), Node.js, React, Vue.js, Firebase, MongoDB, and others. The tutorials are updated on a daily basis.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uuFh8K7C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628790907774/-xxGeh_u7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uuFh8K7C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628790907774/-xxGeh_u7.png" alt="Net Ninja.png" width="700" height="302"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-programming-knowledge"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://www.youtube.com/channel/UCs6nmQViDpUw0nuIx9c_WvA"&gt;Programming Knowledge&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Programming Knowledge Contains an extensive video tutorial library for top backend and frontend languages such as Swift, Golang, Python, PHP, Ruby, etc. The channel is one of the best for learning web development on YouTube. In addition, it contains videos on a variety of frameworks and is visited daily by thousands of people.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ssjj5VAy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628791565402/JrX6_gpYn.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ssjj5VAy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628791565402/JrX6_gpYn.jpeg" alt="Programming Knowledge.jpg" width="880" height="434"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Utilize what you have and start where you are. Find a way, not an excuse, if your goal is to become a developer. &lt;/p&gt;

&lt;p&gt;What other Youtube would you suggest for Web Development? Feel free to comment below!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can now extend your support by buying me a Coffee.😊👇&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/muthuannamalai"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee" width="545" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for Reading 😊 &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>5 Security Vulnerabilities to Fix Without any Programming Skill</title>
      <author>SmartScanner</author>
      <pubDate>Mon, 08 Nov 2021 10:12:57 +0000</pubDate>
      <link>https://dev.to/smartscanner/5-security-vulnerabilities-to-fix-without-any-programming-skill-37in</link>
      <guid>https://dev.to/smartscanner/5-security-vulnerabilities-to-fix-without-any-programming-skill-37in</guid>
      <description>&lt;p&gt;We usually think security and hacking are complicated—at least it's super geeky in movies—but you will be surprised to see how easy you can fix some security problems even without programming knowledge. Let's review and fix them right away.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weak-password"&gt;
  &lt;/a&gt;
  Weak Password
&lt;/h2&gt;

&lt;p&gt;Do you use &lt;code&gt;123456&lt;/code&gt; to login into your website? Change it now! Easy passwords can be guessed and cracked in minutes.&lt;br&gt;
You should use strong and unique passwords for any of your accounts. To have a strong password, always use a long, hard to guess &lt;a href="https://en.wikipedia.org/wiki/Passphrase"&gt;passphrase&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outdated-application"&gt;
  &lt;/a&gt;
  Outdated Application
&lt;/h2&gt;

&lt;p&gt;Outdated applications are like open doors for hackers to break in. Hackers search the whole Internet for outdated applications of any kind (web server, CMS, router, etc.). If you're using outdated software, you've already become a target for hackers.&lt;br&gt;
Modern applications like WordPress and Joomla! provide one-click auto-update features to make our life much easier. If your site is one of them, login into your administration panel and check for available updates.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-listing"&gt;
  &lt;/a&gt;
  Directory listing
&lt;/h2&gt;

&lt;p&gt;Does your website display a list of files and folders when the URL ends with a slash (&lt;code&gt;/&lt;/code&gt;)? If yes, you have a &lt;a href="https://www.thesmartscanner.com/vulnerability-list/directory-listing"&gt;directory listing issue&lt;/a&gt; you need to fix.&lt;/p&gt;

&lt;p&gt;A universal and easy fix for this issue is to login into your website hosting panel and create an empty file named &lt;code&gt;index.html&lt;/code&gt; inside every directory that doesn't have one. Try not to override files to prevent unwanted damages to your website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; It's better to ask your web hosting provider for the specific instructions for your website to have a permanent fix for the directory listing problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hidden-pages-or-functionalities"&gt;
  &lt;/a&gt;
  Hidden Pages or Functionalities
&lt;/h2&gt;

&lt;p&gt;Let's say you have a &lt;em&gt;secret&lt;/em&gt; page on your website that you're the only one who knows its URL. If you believe no other one can access it because they don't know the URL, you're wrong!&lt;br&gt;
Obscuring a resource does not make it secure. Because hackers can find hidden pages by trying many different URLs. Furthermore, the &lt;em&gt;secret&lt;/em&gt; URL you access will be reported and recorded in many places like web server logs and referrer headers where others can see it.&lt;/p&gt;

&lt;p&gt;Common example of hidden pages are debug pages like &lt;a href="https://www.thesmartscanner.com/vulnerability-list/phpinfo-found"&gt;phpInfo()&lt;/a&gt;, beta versions, hidden administration pages and pre-production features.&lt;br&gt;
Immediately delete such pages from your website or use password protection for them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backup-files"&gt;
  &lt;/a&gt;
  Backup files
&lt;/h2&gt;

&lt;p&gt;Taking regular backups is a must. But leaving backup files under the web directory where they are accessible over the Internet, is a bad habit you have to quit.&lt;br&gt;
Backups contain source code and config files that can reveal secrets like the source codes, password of your database and protected directories.&lt;/p&gt;

&lt;p&gt;Common backup formats are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compressed files like &lt;code&gt;.rar&lt;/code&gt;, &lt;code&gt;.zip&lt;/code&gt;, &lt;code&gt;.gz&lt;/code&gt; and &lt;code&gt;.tar&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.bak&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.tmp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.gho&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.001&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.bac&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Search for the above file types in your web hosting panel and make sure they are not publicly accessible over the web.&lt;br&gt;
Also, If you use a compressed file for transferring resources to your web hosting, do not forget to remove the compressed archive after extracting files.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-always-use-https"&gt;
  &lt;/a&gt;
  Bonus: Always use HTTPS
&lt;/h2&gt;

&lt;p&gt;Do you still use &lt;code&gt;http://&lt;/code&gt; (without S) for viewing your website in the browser? The HTTP protocol transfers everything in plain text. That means anyone between your system and the target website can see everything, as well as your password!&lt;/p&gt;

&lt;p&gt;Next time you want to access any web page, always use the &lt;code&gt;httpS://&lt;/code&gt; instead of &lt;code&gt;http://&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We didn't cover many other vulnerabilities that require time and technical skills to fix. To keep your site safe and protected, always use up-to-date applications and regularly &lt;a href="https://www.thesmartscanner.com"&gt;scan for vulnerabilities&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Do you know any other easy-to-fix issues to add? Share it in the comments.&lt;/p&gt;

</description>
      <category>security</category>
      <category>programming</category>
      <category>testing</category>
      <category>webdev</category>
    </item>
    <item>
      <title>✨Top Vuejs Charts Libraries</title>
      <author>reactjsfav</author>
      <pubDate>Mon, 08 Nov 2021 10:11:34 +0000</pubDate>
      <link>https://dev.to/pccprint/top-vuejs-charts-libraries-1kgm</link>
      <guid>https://dev.to/pccprint/top-vuejs-charts-libraries-1kgm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#apexchartsjs"&gt;
  &lt;/a&gt;
  apexcharts.js
&lt;/h2&gt;

&lt;p&gt;A modern JavaScript charting library that allows you to build interactive data visualizations with simple API and 100+ ready-to-use samples. Packed with the features that you expect, ApexCharts includes over a dozen chart types that deliver beautiful, responsive visualizations in your apps and dashboards. ApexCharts is an MIT licensed open-source project that can be used in commercial and non-commercial projects.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SAcs9cRL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7xiudjgdl5evjq2fxpi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SAcs9cRL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7xiudjgdl5evjq2fxpi.png" alt="apexcharts.js" width="756" height="490"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/apexcharts/apexcharts.js"&gt;https://github.com/apexcharts/apexcharts.js&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vueecharts"&gt;
  &lt;/a&gt;
  Vue-ECharts
&lt;/h2&gt;

&lt;p&gt;Apache ECharts component for Vue.js. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G7SdcJjx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xsqnze04e81wj6xfkoat.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G7SdcJjx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xsqnze04e81wj6xfkoat.png" alt="Vue-ECharts" width="665" height="449"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/ecomfe/vue-echarts"&gt;https://github.com/ecomfe/vue-echarts&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vuechartjs"&gt;
  &lt;/a&gt;
  vue-chartjs
&lt;/h2&gt;

&lt;p&gt;vue-chartjs is a wrapper for Chart.js in vue. You can easily create reuseable chart components. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jsv8esb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ieyxlhlgv0yewlo7kx8e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jsv8esb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ieyxlhlgv0yewlo7kx8e.png" alt="vue-chartjs" width="880" height="567"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/apertureless/vue-chartjs"&gt;https://github.com/apertureless/vue-chartjs&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#threejs-vuejs-3-vitejs"&gt;
  &lt;/a&gt;
  ✨ ThreeJS + VueJS 3 + ViteJS ⚡
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;✨ ThreeJS&lt;/strong&gt;&lt;br&gt;
The most popular WebGL library, with a good support on both desktop and mobile.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;🛠️ VueJS 3&lt;/strong&gt;&lt;br&gt;
With TroisJS you can easily create 3D content for your website using VueJS components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;⚡️ ViteJS / HMR&lt;/strong&gt;&lt;br&gt;
Really fast development time with ViteJS/HMR ! Useful to create awesome 3D scenes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---4NL6UUw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5i13wgl4jrx5lvvmijgw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---4NL6UUw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5i13wgl4jrx5lvvmijgw.png" alt="ThreeJS + VueJS 3 + ViteJS" width="729" height="566"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://troisjs.github.io/"&gt;https://troisjs.github.io/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sourcehttpsbestofvuecom"&gt;
  &lt;/a&gt;
  Source:&lt;a href="https://bestofvue.com/"&gt;https://bestofvue.com/&lt;/a&gt;
&lt;/h3&gt;

</description>
    </item>
    <item>
      <title>Week 2 task force 4.0</title>
      <author>mucyo chris</author>
      <pubDate>Mon, 08 Nov 2021 10:00:25 +0000</pubDate>
      <link>https://dev.to/muchristian/week-2-task-force-40-56m9</link>
      <guid>https://dev.to/muchristian/week-2-task-force-40-56m9</guid>
      <description>&lt;p&gt;The more time passes, the more things get intense and super cool; Chris said. In fact, the second week was a bit intense but educative. We had awesome sessions with Awesomity CTO, emphasized on several technologies and practices used in tech companies. But what are they? let me not keep you wondering.&lt;/p&gt;

&lt;p&gt;Git work Flow&lt;br&gt;
I've already had an experience working with git, but at this session also, i learned new tricks and their favorite practice.&lt;/p&gt;

&lt;p&gt;You may wonder, which version control?&lt;br&gt;
Actually, was gitlab. I had no more experience working with gitlab, but this session made us superman in it. Way from creating account to pull request continuous integration with gitlab pipeline.&lt;/p&gt;

&lt;p&gt;Docker&lt;br&gt;
We also had a session about docker. More of self learning. &lt;/p&gt;

&lt;p&gt;Lastly, we had a presentation on Friday, each summarizing what we learned the whole week. Actually, on my side was like an evaluation of how am good in presenting. which also something i have to improve in.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Day 31 of 100 Days of Code &amp; Scrum: Mobile Navbar and react-css-modules</title>
      <author>Rammina</author>
      <pubDate>Mon, 08 Nov 2021 09:35:47 +0000</pubDate>
      <link>https://dev.to/rammina/day-31-of-100-days-of-code-scrum-mobile-navbar-and-react-css-modules-334a</link>
      <guid>https://dev.to/rammina/day-31-of-100-days-of-code-scrum-mobile-navbar-and-react-css-modules-334a</guid>
      <description>&lt;p&gt;Good day, everyone!&lt;/p&gt;

&lt;p&gt;It's Monday again... the start of a new week. I have to admit, this has become pretty normal for me now that it's been a month.&lt;/p&gt;

&lt;p&gt;Speaking of which, I will be writing about my experiences in my first month of blogging. I might go for a more realistic depiction of what beginner bloggers experience, instead of the typical click bait articles about starting a blog. With all the things I'm new juggling right now, I might publish it around the end of the week, we'll see.&lt;/p&gt;

&lt;p&gt;Anyway, let's move on to my daily report!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I did my Sprint Planning yesterday, and I said I'll be focusing on &lt;strong&gt;Next.js&lt;/strong&gt; and &lt;strong&gt;Typescript&lt;/strong&gt;, while still studying &lt;strong&gt;Scrum&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Here are the things I learned and worked on today:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nextjs"&gt;
  &lt;/a&gt;
  Next.js
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I learned about and used &lt;code&gt;react-css-modules&lt;/code&gt; to make modular CSS a lot easier to utilize.&lt;/li&gt;
&lt;li&gt;I finished the mobile version of the navbar skeleton.&lt;/li&gt;
&lt;li&gt;working on my company website.&lt;/li&gt;
&lt;li&gt;I decided on what things I'll be working on for my company website. Here are some of them:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sGdm4747--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qces4ulprvcb9zm2hc7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sGdm4747--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qces4ulprvcb9zm2hc7.png" alt="Zenhub Board" width="880" height="421"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm using &lt;a href="https://www.zenhub.com/"&gt;Zenhub&lt;/a&gt; as my task/project management tool.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I did some practice flashcards for Scrum.&lt;/li&gt;
&lt;li&gt;reviewed some of the things I've learned before.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once again, thank you to everyone for reading and supporting me! I wish you all the best!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v4-uQhuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmvnodbpyw8gtdkj9zeq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v4-uQhuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmvnodbpyw8gtdkj9zeq.png" alt="Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gajus/react-css-modules"&gt;react-css-modules | Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zenhub.com/"&gt;Zenhub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/learn/basics/create-nextjs-app?utm_source=next-site&amp;amp;utm_medium=nav-cta&amp;amp;utm_campaign=next-website"&gt;Official Next.js tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/intro.html"&gt;The Typescript Handbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>ابزارهای رایگان برای توسعه دهندگان وب</title>
      <author>Mahdi Safavi</author>
      <pubDate>Mon, 08 Nov 2021 09:34:58 +0000</pubDate>
      <link>https://dev.to/safavi/bzrhy-rygn-bry-twsh-dhndgn-wb-2e1n</link>
      <guid>https://dev.to/safavi/bzrhy-rygn-bry-twsh-dhndgn-wb-2e1n</guid>
      <description>&lt;p&gt;حال بهترین دوستان هستیم ( مگر اینکه این اولین باری است که مقالات من را می‌خوانید... در این صورت بیایید کارها را آهسته پیش ببریم ):&lt;/p&gt;

&lt;p&gt;آیکون های سه بعدی منبع باز برای وب سایت شما&lt;br&gt;
الهامات طراحی وب سایت&lt;br&gt;
با این کار هر چیزی را که می خواهید از تصاویر حذف کنید&lt;br&gt;
تبدیل شدن به یک استاد جعبه سایه و نه ارباب سایه جعبه&lt;br&gt;
برای کسانی از شما که نمی‌دانند، تیم ZTM و من بهترین منابع رایگان تاریخ خود را در اینجا برای شما فهرست می‌کنیم . یا... می توانید به عقب برگردید و تمام 39 شماره قبلی این خبرنامه را بخوانید. این یک جوک است. این کار را نکن!&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
  </channel>
</rss>
