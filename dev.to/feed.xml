<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Welcome Thread - v138</title>
      <author>dev.to staff</author>
      <pubDate>Tue, 17 Aug 2021 20:14:57 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v138-10ao</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v138-10ao</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/jF1oqkXJL0Mda/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/jF1oqkXJL0Mda/giphy.gif" alt="Welcome Jurrasic Park"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. 👋 &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>Magical Javascript tips for every Frontend Developer</title>
      <author>Njugtt</author>
      <pubDate>Tue, 17 Aug 2021 20:04:15 +0000</pubDate>
      <link>https://dev.to/njugtt/magical-javascript-tips-for-every-frontend-developer-3g61</link>
      <guid>https://dev.to/njugtt/magical-javascript-tips-for-every-frontend-developer-3g61</guid>
      <description>&lt;p id="f6cc"&gt;In this article, we will discuss the 15 useful JavaScript tips for every web developer to save their valuable and precious time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p id="e1bb"&gt;I am always ready to learn although I do not always like being taught&lt;/p&gt;

&lt;p id="0fe5"&gt;— Winston Churchill&lt;/p&gt;


&lt;/blockquote&gt;
&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;h1 id="fa85"&gt;Tip 1. Flatten the array of the array&lt;/h1&gt;
&lt;p id="4e31"&gt;This tip will help you to flatten a deeply nested array of arrays by using &lt;code&gt;Infinity&lt;/code&gt; in &lt;code&gt;flat&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;span id="e3aa"&gt;var array = [123, 500, [1, 2, [34, 56, 67, [234, 1245], 900]], 845, [30257]]&lt;/span&gt;&lt;span id="16da"&gt;//flatten array of array&lt;br&gt;array.flat(Infinity)&lt;/span&gt;&lt;span id="b0d8"&gt;// output:&lt;br&gt;// [123, 500, 1, 2, 34, 56, 67, 234, 1245, 900, 845, 30257]&lt;/span&gt;&lt;/pre&gt;
&lt;h1 id="902c"&gt;Tip 2. Easy Exchange Variables&lt;/h1&gt;
&lt;p id="ebf9"&gt;You probably swap the two variables using a third variable &lt;code&gt;temp&lt;/code&gt;. But this tip will show you a new way to exchange variables using destructuring.&lt;/p&gt;
&lt;pre&gt;&lt;span id="298c"&gt;//example 1&lt;/span&gt;&lt;span id="3316"&gt;var a = 6;&lt;br&gt;var b = 7;&lt;/span&gt;&lt;span id="b133"&gt;[a,b] = [b,a]&lt;/span&gt;&lt;span id="aa36"&gt;console.log(a,b) // 7 6&lt;/span&gt;&lt;/pre&gt;
&lt;br&gt;Read More: &lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/magical-javascript-tips-for-every-web-developer/"&gt;10 Magical JavaScript Tips for Every Web Developer&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;

</description>
    </item>
    <item>
      <title>User friendly errors with React error boundaries and fallback components</title>
      <author>Leandro Coelho</author>
      <pubDate>Tue, 17 Aug 2021 20:03:36 +0000</pubDate>
      <link>https://dev.to/leandrocoelho1/user-friendly-errors-with-react-error-boundaries-and-fallback-components-mig</link>
      <guid>https://dev.to/leandrocoelho1/user-friendly-errors-with-react-error-boundaries-and-fallback-components-mig</guid>
      <description>&lt;p&gt;If we want to prevent our UI from crashing on errors and also have a fallback UI to show this errors in a friendly manner, we can use &lt;strong&gt;React error boundary components&lt;/strong&gt; that wraps around critical parts of our app and catches JavaScript errors anywhere in it's child component tree.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Complete code example with typescript &lt;a href="https://github.com/Leandrocoelho1/using-error-boundary"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-custom-error-boundary-component"&gt;
  &lt;/a&gt;
  Creating a custom error boundary component
&lt;/h3&gt;

&lt;p&gt;Error boundaries are created as class components with access to two special lifecycle methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;static getDerivedStateFromError()&lt;/code&gt; which updates it's state to show the fallback UI.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;componentDidCatch()&lt;/code&gt; used to log error information.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;getDerivedStateFromError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;componentDidCatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errorInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;logErrorToMyService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errorInfo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FallbackComponent&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example we are passing a &lt;code&gt;FallbackComponent&lt;/code&gt; to be rendered &lt;em&gt;if our ErrorBoundary catches an error&lt;/em&gt; and we are logging the error to a external service.&lt;/p&gt;

&lt;p&gt;To use the ErrorBoundary component in our application we just need to wrap it around a component that might come across some errors. In this example I wrapped a component that fetches data from an API and passed a fallback component that shows an error message if something goes wrong:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ErrorBoundary&lt;/span&gt;
  &lt;span class="c1"&gt;// use key as a workaround for resetting the errorboundary state&lt;/span&gt;
  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;circuitName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;FallbackComponent&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;CircuitErrorFallback&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CircuitContent&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CircuitErrorFallback&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Something went wrong...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;&amp;lt;CircuitContent /&amp;gt;&lt;/code&gt; component will throw an error if something goes wrong with our API call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CircuitContent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;circuitName&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;idle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;circuit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;circuit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;circuitName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({...&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pending&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="nx"&gt;fetchCircuit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;circuitName&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;circuit&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({...&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resolved&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;circuit&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({...&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rejected&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;  
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;circuitName&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;idle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CircuitIdle&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pending&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CircuitLoading&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rejected&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// throw error to be handled by error boundary&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resolved&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CircuitDetails&lt;/span&gt; &lt;span class="na"&gt;circuit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;circuit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Something went really wrong.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And ErrorBoundary will catch this error and render our fallback component:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9_hIlTQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmkckza5pua3ghtny302.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9_hIlTQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmkckza5pua3ghtny302.jpg" alt="Error fallback component"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-reacterrorboundary"&gt;
  &lt;/a&gt;
  Using react-error-boundary
&lt;/h3&gt;

&lt;p&gt;Creating our own error boundary component is pretty straight forward but we can also install &lt;code&gt;react-error-boundary&lt;/code&gt; package on our app and use it's features for &lt;strong&gt;resetting our error boundary and restoring the state of our UI&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-error-boundary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt;
  &lt;span class="nx"&gt;onReset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleReset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;resetKeys&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="nx"&gt;circuitName&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
  &lt;span class="nx"&gt;FallbackComponent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;CircuitErrorFallback&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CircuitContent&lt;/span&gt; &lt;span class="na"&gt;circuitName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;circuitName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can extend our fallback component with a button for reset the errorboundary:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CircuitErrorFallback&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resetErrorBoundary&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Something went wrong...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;resetErrorBoundary&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Try again
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the resulting error UI will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3MRqHA87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vv9rfy5yl4y661mqjp3c.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3MRqHA87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vv9rfy5yl4y661mqjp3c.jpg" alt="Extended error fallback component"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;We can wrap different parts of our applications with error boundaries to &lt;strong&gt;keep our interface interactive&lt;/strong&gt; and prevent crashing. This can also benefit us during development stage while catching &lt;strong&gt;errors that could even get unnoticed by typescript&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#note-on-usage-with-create-react-app"&gt;
  &lt;/a&gt;
  Note on usage with Create React App:
&lt;/h4&gt;

&lt;p&gt;CRA may display an overlay with error information in development mode &lt;strong&gt;even if error boundary catches the error&lt;/strong&gt;. There are workarounds to change this behavior of Create React App but I think it's unecessary, since &lt;em&gt;you can press 'esc' to close the overlay and this will not be shown in production build anyway&lt;/em&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tip-for-handling-error-messages-with-axios"&gt;
  &lt;/a&gt;
  Tip for handling error messages with Axios:
&lt;/h4&gt;

&lt;p&gt;Axios will throw an error with a custom message like "The server responded with 404 status code." when an API call fails. You can use an axios interceptor to change this custom message to the actual error message in the API response body or even map it to something else:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.backend.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;interceptors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;The idea for this post came from a lesson on the React hooks workshop from epicreact.dev. Thanks for reading!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>ux</category>
      <category>errors</category>
      <category>axios</category>
    </item>
    <item>
      <title>I am not Getting Promoted at Work - How to Escape the Endless Loophole?</title>
      <author>Kevin Peters</author>
      <pubDate>Tue, 17 Aug 2021 20:00:33 +0000</pubDate>
      <link>https://dev.to/getworkrecognized/i-am-not-getting-promoted-at-work-how-to-escape-the-endless-loophole-3l46</link>
      <guid>https://dev.to/getworkrecognized/i-am-not-getting-promoted-at-work-how-to-escape-the-endless-loophole-3l46</guid>
      <description>&lt;p&gt;Everyone in the workforce has some drive. For most employees, it is the payment at the end of the month that makes them work in their job. A lot of people are also doing their job because they love it. But in our capitalistic world, the salary of a job is an important aspect for every one of us. Because of inflation, our cost of living is rising nearly every year by around 2%. This also would mean that everyone working should get a 2% raise every year, right? Unfortunately, this is not the case for every employee. Some companies just hand out raises for promotions and similar things. Getting promoted is difficult. A lot of companies have structured plans on how to get promoted, which requirements need to be fulfilled to get to the next level. But it is not the case for every company out there making it a frustrating experience to not get promoted even if you might think that you are worth the promotion. In this article, I will explain how you can get over this and finally work on your promotion hands on. After reading this article you will have an actionable plan on what to do in the next week, month, and year to get to the next level in your job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-over-your-frustration"&gt;
  &lt;/a&gt;
  Get over your frustration
&lt;/h2&gt;

&lt;p&gt;Do you read this article after getting denied a promotion the last time? We all know this feeling sucks. But you need to get over this feeling. See it as feedback and that you might be not ready yet. Yes, there are always other jobs and of course, you could apply for the targeted position in another company. But it won’t improve your immediate current situation. It sucks, but it is what it is. You cannot change the past, focus on the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#speak-to-your-manager"&gt;
  &lt;/a&gt;
  Speak to Your Manager
&lt;/h2&gt;

&lt;p&gt;The first thing after a failed promotion that you should do is seeking a conversation with your manager. In a lot of companies managers and their employees maintain regular 1-on-1 sessions. These sessions can be informal but most often employees talk about their growth there and the manager is supporting the employee in this regard. If your manager is not supportive, you can still ask the right questions on how to get actionable results. Make sure to say that you want to get to the next level but first review your current position. We need to make a reality check.&lt;/p&gt;

&lt;p&gt;For example, you could ask what are the current expectations of your position to see how your manager reacts. They usually show emotions and say what you need to improve on. If they do not, try to ask generic questions like what is the focus of the company and how can I provide value towards this goal for example. Now when coming to the expectations and goals, make notes. Share these notes with your manager so you are on the same base on what should be achieved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#define-goals"&gt;
  &lt;/a&gt;
  Define Goals
&lt;/h2&gt;

&lt;p&gt;In the previous chapter, we have learned that you should try to find the talk to your manager and figure out what they expect from you directly or indirectly. After the meeting, you should revisit your notes and figure out what the goals would be that you can contribute to the company to achieve the goals. These notes should be defined in Objective Key Results (OKRs). Objective Key Results are defined by having an objective, measurable goal. This is because these goals should be trackable over a longer time frame. A goal like “Need to learn more about Topic XY” is not a good OKR because no one can track objectively how far you got with achieving this goal. If you have such generic OKRs it might be worth it to always split them down into individual OKRs. For example, you could do different processes to achieve the overall goal “Need to learn more about Topic XY”:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Finish the course … by End of April (0 out of 14 chapters done)&lt;/li&gt;
&lt;li&gt;Read the book … by End of June (0 out of 8 chapters)&lt;/li&gt;
&lt;li&gt;Apply principle … 6 times by the end of August&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With going into more details you can always find measurable OKRs. Even if it sounds stupid, it will give your manager and peers some overview of how well you are doing inside the company. Every OKR should also be linked to one of the leadership principles of your company if they exist. You can read how Klarna’s Leadership Principles work in another blog article.&lt;/p&gt;

&lt;p&gt;After figuring out what the goals are, discuss them with your manager. Present them and ask for validation. Your manager might think you are over motivated or something but just says you want to have a track that you can follow to advance your career. Also, talk with your manager about how realistic the goals are. I would always give a lower estimate than what you have initially thought because overpromising is never working out in the way you want it. Underpromise and overdeliver is where you can shine and exceed expectations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#track-the-goals"&gt;
  &lt;/a&gt;
  Track the goals
&lt;/h2&gt;

&lt;p&gt;Now that Objective Key Results are defined, you can start working on them. It is hard to keep track of your work. Getworkrecognized offers a solution by reminding you via email notifications to track down on what you have done. Creating this backlog takes a lot of continuous work, but when you finally want to look back at what you have achieved you can create an easy overview. For example, in our application, you can see the log of your past weeks notes easily like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a9iLTfIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zuhd3p6cs0q0018czzuf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a9iLTfIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zuhd3p6cs0q0018czzuf.png" alt="The tracking element of getworkrecognized"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In general, we also recommend summarizing your goals regarding the OKRs once per month. It will give you an easier time to summarize goals on a large scale.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tdntw1GF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zg7wkvcd8kh6k06cb3r7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tdntw1GF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zg7wkvcd8kh6k06cb3r7.gif" alt="Promotional banner for getworkrecognized"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#speak-to-your-manageragainand-again"&gt;
  &lt;/a&gt;
  Speak to Your Manager...again...and again
&lt;/h2&gt;

&lt;p&gt;After tracking your work notes for 2-3 weeks, you should talk to your manager again. Bigger companies might have scheduled 1-on-1 sessions between managers and their employees. If you do not, ask your manager if they have a time slot of 30 minutes left per week. Normally they agree to this and you can organize the meetings normally. Review the notes you have done before the meeting for 10-15 minutes and point out things you are struggling with. In the 1-on-1 session ask your manager how they can help you or would behave in your situation. Always see it neutral and review what your manager said also. Have an open mind. Also, from time to time, mention your achievements and how the OKRs are getting followed so your manager is not just seeing the asking/demanding side of yourself.&lt;/p&gt;

&lt;p&gt;After having 1-on-1s for quite some time you should see progress in your notes. It could be hard to visualize but one indicator is how much in percent you are close to finishing your OKRs. Another way to visualize your achievements is by tagging your notes and run analytics over them. Different graphs could help you with how frequently you are working on different topics. getworkrecognized provides these graphs out of the box. Just keep your notes in our application and you get some graphs like the following for free:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gyd3i2OP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i83yn37nwoyiootwx46i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gyd3i2OP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i83yn37nwoyiootwx46i.png" alt="Analytics element of getworkrecognized"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#act-like-you-are-on-the-next-level"&gt;
  &lt;/a&gt;
  Act Like you are on the Next Level
&lt;/h2&gt;

&lt;p&gt;After having your OKRs defined, regular 1-on-1s, and being on track towards your goal, it is time for the next phase in your career. In one of the meetings with your manager, you should speak about what the expectations of the role above your level are. A lot of companies have a career matrix ranked by different levels and different areas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eQQeoK7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mhxkwcuzq6npbe2ekhrj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eQQeoK7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mhxkwcuzq6npbe2ekhrj.png" alt="A career matrix example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find the full table here: &lt;a href="https://docs.google.com/spreadsheets/d/1XKmDuSfJGb1A7xCt6BctIvunDZWqU4mFGv4XRiYnefM/edit?usp=sharing"&gt;Google Sheet Example - Career Matrix&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see there are different topics and different levels. Assuming you are a Level 1 Engineer and aspire to get promoted to Level 2, you can have a look at the different topics. If you are strong already in Communication, have a look at the responsibilities and key areas that you could apply already. Create some OKRs regarding these requirements to act on the level. If you have room during your work left, even follow these principles of the targeted level.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#review-your-actions"&gt;
  &lt;/a&gt;
  Review Your Actions
&lt;/h2&gt;

&lt;p&gt;As you read already in previous chapters, reviewing your actions is mandatory throughout the whole process. Reviewing the actions is hard though. A technique that helped and is supported in our application is tagging the notes. Every action you take regarding an OKR or even in a generic way can be tagged with a specific label. These labels are normally the company values or leadership principles. An example could be the Klarna Leadership Principles, that are also described in more detail in &lt;a href="https://getworkrecognized.com/blog/how-klarnas-leadership-principles-work"&gt;one of the recent blog articles&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Customer Obsession&lt;/li&gt;
&lt;li&gt;Deliver Results&lt;/li&gt;
&lt;li&gt;Let the team shine&lt;/li&gt;
&lt;li&gt;Challenge the status quo&lt;/li&gt;
&lt;li&gt;Start small and learn fast&lt;/li&gt;
&lt;li&gt;Courage&lt;/li&gt;
&lt;li&gt;Hire and develop exceptional talent&lt;/li&gt;
&lt;li&gt;Detailed thinkers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The leadership principles differ from company to company, and some companies do not even have a vision or these principles. In these cases, you can look through a collection of different company frameworks since a lot of them are also quite generic. In our application you can find the LinkedIn 2020 Leadership Principles that include the following principles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Creativity&lt;/strong&gt;: Employees need to be creative. The ability and focus on bringing up new ideas let companies strive and grow. Creative people are contributing massively to this.
Persuasion: For companies, it is important to share the “why” behind decisions so everybody is onboard and pursues the common goal. People can also question the “why” that is supported, but communication to colleagues and stakeholders why the “why” might not be the best reason is encouraged.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Collaboration&lt;/strong&gt;: Working in a team motivates everyone. Every colleague is trying to be the best but also praising other people’s successes is an important part of the team culture. It increases trust and improves the productivity of the whole team and the company.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Adaptability&lt;/strong&gt;: Businesses and companies are in constant change. During the digitalization age more than ever before. Employees need to adjust to new situations, team changes. This requires an open mind, professionalism, and the will to change according to the situation.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Emotional&lt;/strong&gt;: Emotional intelligence is the ability to perceive, evaluate, and respond to your own emotions and the emotions of others. This describes how you react to other people’s opinions but also how you can present your thoughts to other people in a recognizable way.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These principles are quite generic and can be applied to most jobs and professions. Tagging your notes will help you to keep the notes organized somehow and this will be useful later on.&lt;/p&gt;

&lt;p&gt;With tagging the notes you can also create better reviews. Most often the leadership principles contribute to specific OKRs defined in the process before. Connect them and see with your notes how these notes might be related to the OKRs.&lt;/p&gt;

&lt;p&gt;The review cycle should be something you can also plan. Getworkrecognized recommends summarizing your notes monthly. With this monthly review, it will be also easier to focus on more important goals during your Self-Review or Performance Review. It will exclude unimportant notes but also highlights your most impactful contributions.&lt;/p&gt;

&lt;p&gt;The monthly reviews can also be used in the 1-on-1s with your manager to discuss progress on the OKRs. In general, they will help you to have an overview of your biggest achievements helping you in your whole career.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ask-for-your-promotion"&gt;
  &lt;/a&gt;
  Ask for your Promotion
&lt;/h2&gt;

&lt;p&gt;One important of every promotion is starting the process. Companies normally do not want to give out promotions since they do not get a lot of value out of the promotion itself. It is expected for most employees to act on the next level already for getting to the next level. When the company is not appreciating this, not increasing the salary they can play with their employees, letting them do work outside of their responsibility additionally to what they get paid for. Companies most often act in their interest and deny or delay promotions to keep the pay of their employees low and increase profits of the company overall. Because of this process, an employee should be always showing the desire to get promoted and speak up. Otherwise, you might get ignored and left behind. Take your shot.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preparation"&gt;
  &lt;/a&gt;
  Preparation
&lt;/h3&gt;

&lt;p&gt;As we learned previously, you should always ask for your promotion by yourself. But preparing for the promotion is an important part that should be done before actually requesting the promotion.&lt;/p&gt;

&lt;p&gt;The first two steps are described in earlier chapters: Tracking your Work Achievements and Tagging + Grouping the notes. The Review is also mentioned in the last chapter. After all of this, you can go through your work achievement notes again and create a good Self-Review or Brag sheet. This document is the baseline for your promotion. It should include all major achievements but also weaknesses. We wrote &lt;a href="https://getworkrecognized.com/blog/how-to-write-the-perfect-self-review"&gt;a guide already on what to focus on while writing this document&lt;/a&gt;. Basic learnings are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Structure by KPIs or Leadership Principles&lt;/li&gt;
&lt;li&gt;Start with the "bad" things, give a good last impression&lt;/li&gt;
&lt;li&gt;Write an outlook&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-talk"&gt;
  &lt;/a&gt;
  The Talk
&lt;/h3&gt;

&lt;p&gt;After preparing your brag sheet or Self-Review, you can contact your manager. Instead of asking for a regular 1-on-1, you can ask them if they have more than 30 minutes to review your current work. Regarding this talk, you can also say that you prepared a summary of all the work achievements you have reached in the past time. Link your brag sheet or Self-Review. Then wait for the talk.&lt;/p&gt;

&lt;p&gt;Start the talk like a normal 1-on-1. Ask some soft questions first and get more serious over time. Try to bring up the promotion topic quite fast in the meeting. Something along the lines that you are doing work that is exceeding expectations heavily and you are acting already on the next level. A promotion would be the right next step for you so that you can even try to grow more and impact the company even more in a positive way. Now your manager will react. Pay close attention to their words and how they are laying these words out. If they are happy with you, they will promote you. Ask about a salary increase and all the legal stuff as well. If they react negatively ask why they do not want to promote you and what is missing for you to get promoted.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#after-the-promotion"&gt;
  &lt;/a&gt;
  After the Promotion
&lt;/h2&gt;

&lt;p&gt;If the promotion was successful, hey congrats. If not, work on the things that your manager has told you. One thing that stays always there is to write down your work achievements because work is getting forgotten quite quickly. &lt;a href="https://getworkrecognized.com/login"&gt;Use getworkrecognized to have an efficient way to do this. Try now!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Best CSS3 library for Frontend Developer</title>
      <author>Njugtt</author>
      <pubDate>Tue, 17 Aug 2021 20:00:00 +0000</pubDate>
      <link>https://dev.to/njugtt/best-css3-library-for-frontend-developer-3fbn</link>
      <guid>https://dev.to/njugtt/best-css3-library-for-frontend-developer-3fbn</guid>
      <description>&lt;p&gt;Web Developers used to spend a lot of time creating beautiful CSS. Thanks to the CSS libraries, we now have a better, faster, and more effective way to build responsive websites and web applications.&lt;/p&gt;
&lt;p&gt;Are you still looking for the best CSS libraries? Do you want to know which library you should try? In this article, we have 20 best CSS libraries for your inspiration.&lt;/p&gt;
&lt;h2&gt;
&lt;br&gt;
&lt;a href="https://dev.to/chetan_atrawalkar/20-best-css3-library-for-developers-58p#how-do-css-libraries-work"&gt;&lt;/a&gt;🤔 How do CSS libraries work?&lt;/h2&gt;
&lt;p&gt;CSS library gives web developers a basic structure, which includes grid, interactive UI patterns, web typography, tooltips, buttons, form elements, icons. This structure helps web developers to start quickly and efficiently when they are designing a website or web applications.&lt;/p&gt;
&lt;p&gt;Here we have put together &lt;span&gt;20 best CSS libraries.&lt;/span&gt; We hope you like them, and most importantly, find the best one for your needs.&lt;/p&gt;
&lt;h4&gt;
&lt;br&gt;
&lt;a href="#"&gt;&lt;/a&gt;Let's go....🤩&lt;/h4&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/20-best-css3-library-for-developers/&amp;amp;ved=2ahUKEwii76qFzaPyAhWvyzgGHX9RA-kQFnoECAMQBQ&amp;amp;usg=AOvVaw2AtoxfMkY_y5JPLB2VuSdV"&gt;🚀20 Best CSS3 Library For Developers&lt;/a&gt;&lt;/b&gt;.

</description>
    </item>
    <item>
      <title>Vs Code extensions for every Frontend Developer</title>
      <author>Njugtt</author>
      <pubDate>Tue, 17 Aug 2021 19:59:03 +0000</pubDate>
      <link>https://dev.to/njugtt/vs-code-extensions-for-every-frontend-developer-7j5</link>
      <guid>https://dev.to/njugtt/vs-code-extensions-for-every-frontend-developer-7j5</guid>
      <description>&lt;p&gt; &lt;span&gt;Hello everyone, my name is suman and I'm a frontend developer. In this blog post, I would like to share 10 VS code extensions that every frontend developer should use. The purpose of using these extensions is to write faster, cleaner, and more consistent code. &lt;/span&gt;&lt;span&gt;Let's Jump in!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;a href="https://www.codelivly.com/10-vs-code-extensions-every-frontend-developer-should-use/"&gt;10 VS Code extensions every Frontend Developer should use&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Stop playing Big Tech's hiring game</title>
      <author>Simon Barker</author>
      <pubDate>Tue, 17 Aug 2021 19:45:17 +0000</pubDate>
      <link>https://dev.to/allthecode/stop-playing-big-tech-s-hiring-game-97a</link>
      <guid>https://dev.to/allthecode/stop-playing-big-tech-s-hiring-game-97a</guid>
      <description>&lt;p&gt;The hiring process is broken, companies find it incredibly difficult to hire the technical talent they need to do the job. There simply aren’t enough skilled developers out there to work on the perfect magical systems that the collective genius of even a mid rate regional tech firm has made. In fact it’s so unlikely that you have the technical skills required to meet their high bar that you probably won’t get hired. So don’t apply.&lt;/p&gt;

&lt;p&gt;Seriously, don’t apply to companies who think the rubbish I just wrote. Or that copy the hiring practices of those companies because they think it's what they should do.&lt;/p&gt;

&lt;p&gt;The truth is that very few tech companies need the level of technical perfection that they think they need. The reason they find it “so hard to hire good talent” is because they have multiple rounds of interview that absorb hours of your personal time and brain space requiring you to solve puzzles and do backflips all while dealing with the stress of an interview and where one miss-step blacklists you!&lt;/p&gt;

&lt;p&gt;So stop applying to these companies, it’s a waste of everyone’s time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#big-tech-broke-tech-hiring"&gt;
  &lt;/a&gt;
  Big Tech broke tech hiring
&lt;/h2&gt;

&lt;p&gt;The tech hiring process is broken because Big Tech broke it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;take home tests&lt;/li&gt;
&lt;li&gt;technical deep dives&lt;/li&gt;
&lt;li&gt;presentations&lt;/li&gt;
&lt;li&gt;pair programming sessions (that are really just more technical tests in disguise)&lt;/li&gt;
&lt;li&gt;and follow up call after follow up call&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;"But that's what companies need to do!" I hear you cry! How else will they find the right people?&lt;/p&gt;

&lt;p&gt;Well, I’ve been through 11 interview processes in the last 2 years, receiving 10 job offers, and only one required me to do more than 3 rounds. Some, including my current role at an EduTech startup, didn't require a coding test at all.&lt;/p&gt;

&lt;p&gt;The one long interview process I went through was 5 rounds across 7 hours and ended with a follow up call from the recruiter where they said "it was a really tough call but your solution on test 4 wasn't as elegant as the interviewer would have liked" he did then chuckle and say that the final interviewer asked if they had seen the same candidate because I "smashed it" and "I think this will be our loss".&lt;/p&gt;

&lt;p&gt;If after 7 hours of tests a role isn't offered simply because in 60 minutes someone couldn't write Conway's Game Of Life as elegantly as possible but everyone else thought they were a good fit for the role then the problem isn't "lack of tech talent", it's their hiring processes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-the-developer-hiring-process-alternative"&gt;
  &lt;/a&gt;
  What's the developer hiring process alternative?
&lt;/h2&gt;

&lt;p&gt;The reason only one required me to go through more than 3 rounds is because I actively avoid applying to places that require more than 3. I made an exception in this case because I have used the company's product a lot and have a genuine affinity for it. Otherwise I wouldn't have bothered.&lt;/p&gt;

&lt;p&gt;Multi stage interview processes where one person can kill your chance of getting the job are a waste of your time. Stop playing their game and start applying to companies who actually understand that not every developer on staff needs 20 years experience and a PhD in Computer Engineering from Stanford, and instead realise that people come from a variety of backgrounds, with a range of skills and most of what you do each day can be learned on the job as and when required.&lt;/p&gt;

&lt;p&gt;Find that local digital agency who struggle to find developers and want to grow their client base. Or, that regional e-commerce retailer with a home grown order management system that they need modernised who will appreciate you and your time.&lt;/p&gt;

&lt;p&gt;Most developers never work in big tech. Not working for Apple or Facebook or Google isn't a bug, in fact it could be considered a feature for many companies. You can have a wonderful, interesting and fruitful career without being bounced from pillar to post going through the hoops that jumped up Big Tech bros put up for you.&lt;/p&gt;

&lt;p&gt;Ask how many rounds of interview there will be at the start, if it's more than 3 and they're not paying you for your time then "regretfully pass on their process" and move on. If we all stop playing their stupid game, they will have to adapt.&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>✅ Solución: SSH Config -Problemas por múltiples cuentas de git en un mismo ordenador</title>
      <author>Fernando Cutire</author>
      <pubDate>Tue, 17 Aug 2021 19:18:53 +0000</pubDate>
      <link>https://dev.to/fernandocutire/solucion-a-problemas-por-multiples-cuentas-de-git-ssh-config-1eh7</link>
      <guid>https://dev.to/fernandocutire/solucion-a-problemas-por-multiples-cuentas-de-git-ssh-config-1eh7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#en-este-art%C3%ADculo-aprender%C3%A1s"&gt;
  &lt;/a&gt;
  📰 En este artículo aprenderás
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;El problema de tener muchas cuentas de git, gitlab&lt;/li&gt;
&lt;li&gt;Una solución sencilla si te da problemas al momento de clonar o hacer push a un repo de forma remota por ssh&lt;/li&gt;
&lt;li&gt;Por qué colocar las llaves ssh no es suficiente &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#contenido"&gt;
  &lt;/a&gt;
  🗨️ Contenido
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Toda gran solución comienza con un gran problema&lt;/em&gt;. El día de hoy solucionaremos el:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Git&lt;/span&gt; &lt;span class="nx"&gt;fatal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Could&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;read&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;remote&lt;/span&gt; &lt;span class="nx"&gt;repository&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esto me sucedió a mí cuando quería hacer un git clone de mi repo personal de github. Y &lt;em&gt;ya había configurado mi llave ssh.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sucede también que tenía configurada mi cuenta de gitlab de la organización donde trabajo también la tenía configurada también.&lt;/p&gt;

&lt;p&gt;Entonces me dió problema, puede que te pase igual. Yo solo tenía 2 cuentas pero tú puedes tener incluso más, entonces para que no se te vuelva muy dificil de manejar , te recomiendo que implementes esta solución.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#soluci%C3%B3n"&gt;
  &lt;/a&gt;
  ✅ Solución
&lt;/h2&gt;

&lt;p&gt;La solución viene de la mano de un archivo que insertaras en tu carpeta .ssh/&lt;/p&gt;

&lt;p&gt;Esta carpeta se creó al momento de crear tu llave ssh, así que si no las hecho, te recomiendo que lo hagas y regreses aquí.&lt;/p&gt;

&lt;p&gt;Ahora dentro de esta carpeta insertaremos un archivo config. Este tendrá una estructura que nos podrá incorporar varias claves ssh en un formato sencillo de leer ideal para manejar diferentes llaves ssh, que podrás incorporar como tu creas sea mejor.&lt;/p&gt;

&lt;p&gt;Aquí el código.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;GITHUB&lt;/span&gt;
&lt;span class="nx"&gt;Host&lt;/span&gt; &lt;span class="nx"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;
   &lt;span class="nx"&gt;HostName&lt;/span&gt; &lt;span class="nx"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;
   &lt;span class="nx"&gt;PreferredAuthentications&lt;/span&gt; &lt;span class="nx"&gt;publickey&lt;/span&gt;
   &lt;span class="nx"&gt;IdentityFile&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;/.ssh/gi&lt;/span&gt;&lt;span class="nx"&gt;thub&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;id_rsa_pub&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;GITLAB&lt;/span&gt;
&lt;span class="nx"&gt;Host&lt;/span&gt; &lt;span class="nx"&gt;gitlab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;
   &lt;span class="nx"&gt;HostName&lt;/span&gt; &lt;span class="nx"&gt;gitlab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;
   &lt;span class="nx"&gt;PreferredAuthentications&lt;/span&gt; &lt;span class="nx"&gt;publickey&lt;/span&gt;
   &lt;span class="nx"&gt;IdentityFile&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;/.ssh/i&lt;/span&gt;&lt;span class="nx"&gt;d_rsa_pub&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El nombre del archivo es config&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Puedes configurarlo para varias cuentas por ejemplo GITHUB PERSONAL, GITHUB PROFESIONAL.&lt;/strong&gt; Entonces usar una llave ssh diferente para cada una, así se detectará bien y no habrá problema.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recuerda también el &lt;code&gt;IdentityFile&lt;/code&gt;, muy importante para separar las diferentes llaves&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recapitulando"&gt;
  &lt;/a&gt;
  🔥 Recapitulando
&lt;/h2&gt;

&lt;p&gt;Repasemos lo que aprendiste&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creación de config&lt;/li&gt;
&lt;li&gt;Diferentes problemas a la hora de tener diferentes cuentas en una misma máquina&lt;/li&gt;
&lt;li&gt;Por qué colocar las llaves ssh no es suficiente&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#fin"&gt;
  &lt;/a&gt;
  🔚 Fin
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Ya has podido identificar el problema de llevar diferentes cuentas y has podido solucionarlo gracias a un config&lt;/em&gt;. Colocaste las diferentes llaves con nombres diferentes y colocaste su ubicación dentro del archivo config, y tienes todo mucho más ordenado y sin problemas al usar conexiones ssh para repositorios.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/FernandoCutire/4c8589813bef6a5c914706b530fee102"&gt;GitHub Gist - FernandoCutire -Solución: SSH Config -Problemas por múltiples cuentas de git en un mismo ordenador&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#turno-para-t%C3%AD-comenta-y-comparte"&gt;
  &lt;/a&gt;
  👊🏽 Turno para tí: Comenta y comparte
&lt;/h2&gt;

&lt;p&gt;Has aprendido a darle una solución a este problema, &lt;strong&gt;lamentablemente todavía existe este problema para varios desarrolladores, compartiendo la solución podemos ayudar a que deje de serlo&lt;/strong&gt;. Puedes compartir la guía si te ha sido útil y/o comentar por si te ha dado un problema.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Aunque sea por un gol de diferencia, la victoria es victoria&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>github</category>
      <category>gitlab</category>
      <category>git</category>
      <category>development</category>
    </item>
    <item>
      <title>Day 4: 100 days of code</title>
      <author>Gaurav-Shekhawat</author>
      <pubDate>Tue, 17 Aug 2021 19:04:40 +0000</pubDate>
      <link>https://dev.to/gauravshekhawat/day-4-100-days-of-code-3egl</link>
      <guid>https://dev.to/gauravshekhawat/day-4-100-days-of-code-3egl</guid>
      <description>&lt;h3&gt;
  &lt;a href="#difference-between-innerhtml-and-innertext-in-js"&gt;
  &lt;/a&gt;
  DIfference between innerHTML and innerText in js
&lt;/h3&gt;

&lt;p&gt;see this &lt;a href="https://betterprogramming.pub/whats-best-innertext-vs-innerhtml-vs-textcontent-903ebc43a3fc"&gt;medium&lt;/a&gt; article for details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@parasbisht/difference-between-innerhtml-innertext-and-textcontent-c0789c6dd9c1"&gt;This&lt;/a&gt; is short summary of the above article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#difference-between-raw-getelementbyid-endraw-and-raw-getelementsbyclassname-endraw-"&gt;
  &lt;/a&gt;
  Difference between &lt;code&gt;getElementById&lt;/code&gt; and &lt;code&gt;getElementsByClassName&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The difference that I found through trial and error:-&lt;br&gt;&lt;br&gt;
The &lt;code&gt;getElementById&lt;/code&gt; will select only one element(as only one element will have that unique id), while in the arguments of &lt;code&gt;getElementsByClassName&lt;/code&gt; we can provide multiple classes, and it will select all the elements matching those classes. Hence &lt;code&gt;getElementsByClassName&lt;/code&gt; is like an array. Example:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="parentDiv"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To access the above, you have to write&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var divToBeAppended = document.getElementsByClassName("parentDiv");
divToBeAppended[0].appendChild(newButton);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#important-things-to-remember"&gt;
  &lt;/a&gt;
  Important things to remember:-
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5TFDiDuO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcaromptgkar914mtxqi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5TFDiDuO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcaromptgkar914mtxqi.png" alt="centering using margin auto"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In case of a image as direct child of an div with rounded corners, the image will overflow through the container. To stop that, you can use:-&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container{
overflow:hidden;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#things-i-couldnt-make-a-summary-of"&gt;
  &lt;/a&gt;
  Things i couldn't make a summary of:-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Change button colors project&lt;/li&gt;
&lt;li&gt;Kotlin basics:- functions, variables, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#things-couldnt-complete-try-again"&gt;
  &lt;/a&gt;
  Things couldn't complete ( try again)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;CP problem:- Time is Mooney &lt;/li&gt;
&lt;li&gt;CP DP handbook last section&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>|HTML &amp; CSS ONLY , TEXT ANIMATION EFFECTS</title>
      <author>yusuf._ch</author>
      <pubDate>Tue, 17 Aug 2021 19:02:38 +0000</pubDate>
      <link>https://dev.to/youssefcharrouf/html-css-only-text-animation-effects-44al</link>
      <guid>https://dev.to/youssefcharrouf/html-css-only-text-animation-effects-44al</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/yusuf-_ch/embed/ZEKNdLM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>Deploying CI/CD For NodeJS Serverless Applications Workshop: Part V</title>
      <author>Salah Elhossiny</author>
      <pubDate>Tue, 17 Aug 2021 18:19:41 +0000</pubDate>
      <link>https://dev.to/aws-builders/deploying-ci-cd-for-nodejs-serverless-applications-workshop-part-v-4g32</link>
      <guid>https://dev.to/aws-builders/deploying-ci-cd-for-nodejs-serverless-applications-workshop-part-v-4g32</guid>
      <description>&lt;h1&gt;
  &lt;a href="#canary-deployments"&gt;
  &lt;/a&gt;
  CANARY DEPLOYMENTS
&lt;/h1&gt;

&lt;p&gt;A Canary Deployment is a technique that reduces the risk of deploying a new version of an application by slowly rolling out the changes to a small subset of users before rolling it out to the entire customer base.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--imVT5wRp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkwmsxhnyty6stdecswk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--imVT5wRp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkwmsxhnyty6stdecswk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  HOW DOES IT WORK?
&lt;/h2&gt;

&lt;p&gt;The concepts of blue/green and canary deployments have been around for a while and have been well-established as best-practices for reducing the risk of software deployments. In traditional applications, you slowly and incrementally update the servers in your fleet while simultaneously verifying application health. However, there is somewhat of an impedance mismatch when mapping these concepts to a serverless world. You can’t incrementally deploy your software across a fleet of servers when there are no servers!&lt;/p&gt;

&lt;p&gt;The answer is that there are a couple of services and features involved in making this possible. Let us explain:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lambda-versions-and-aliases"&gt;
  &lt;/a&gt;
  Lambda versions and aliases
&lt;/h3&gt;

&lt;p&gt;AWS Lambda allows you to publish multiple versions of the same function. Each version has its own code and associated dependencies, as well as its own function settings (like memory allocation, timeout and environment variables). &lt;/p&gt;

&lt;p&gt;You can then refer to a given version by using a Lambda Alias. An alias is nothing but a name that can be pointed to a given version of a Lambda function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vNKwinXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0m4cw9qvf1o30tsm5itt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vNKwinXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0m4cw9qvf1o30tsm5itt.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#traffic-shifting-with-lambda-aliases"&gt;
  &lt;/a&gt;
  Traffic shifting with Lambda aliases
&lt;/h3&gt;

&lt;p&gt;With the introduction of alias traffic shifting, it is now possible to trivially implement canary deployments of Lambda functions. By updating additional version weights on an alias, invocation traffic is routed to the new function versions based on the weight specified. Detailed CloudWatch metrics for the alias and version can be analyzed during the deployment, or other health checks performed, to ensure that the new version is healthy before proceeding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uDylWLw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8m83d7dm8ui25auub0o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uDylWLw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8m83d7dm8ui25auub0o.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#traffic-shifting-with-sam-and-codedeploy"&gt;
  &lt;/a&gt;
  Traffic shifting with SAM and CodeDeploy
&lt;/h3&gt;

&lt;p&gt;AWS CodeDeploy provides an intuitive turn-key implementation of this functionality integrated directly into AWS SAM.&lt;/p&gt;

&lt;p&gt;Traffic-shifted deployments can be declared in a SAM template, and CodeDeploy manages the function rollout as part of the CloudFormation stack update. CloudWatch alarms can also be configured to trigger a stack rollback if something goes wrong.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---TwiFxpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4oj41hde2hzyxjograo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---TwiFxpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4oj41hde2hzyxjograo.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#update-sam-template"&gt;
  &lt;/a&gt;
  UPDATE SAM TEMPLATE
&lt;/h2&gt;

&lt;p&gt;Open the SAM template (sam-app/template.yaml) in your project and add the following lines to the HelloWorldFunction properties section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;AutoPublishAlias&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;live&lt;/span&gt;
&lt;span class="na"&gt;DeploymentPreference&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Canary10Percent5Minutes&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Take care of indentation, YAML files ! :D &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wn0wzWnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58usv9c71ys2h8jgzcbf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wn0wzWnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58usv9c71ys2h8jgzcbf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deployment-preference-types"&gt;
  &lt;/a&gt;
  Deployment Preference Types
&lt;/h2&gt;

&lt;p&gt;For this workshop, we are using the Canary10Percent5Minutes strategy, which means that traffic is shifted in two increments. In the first increment, only 10% of the traffic is shifted to the new Lambda version, and after 5 minutes, the remaining 90% is shifted. &lt;/p&gt;

&lt;p&gt;There are other deployment strategies you can choose in CodeDeploy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Canary10Percent30Minutes&lt;/li&gt;
&lt;li&gt;Canary10Percent5Minutes&lt;/li&gt;
&lt;li&gt;Canary10Percent10Minutes&lt;/li&gt;
&lt;li&gt;Canary10Percent15Minutes&lt;/li&gt;
&lt;li&gt;Linear10PercentEvery10Minutes&lt;/li&gt;
&lt;li&gt;Linear10PercentEvery1Minute&lt;/li&gt;
&lt;li&gt;Linear10PercentEvery2Minutes&lt;/li&gt;
&lt;li&gt;Linear10PercentEvery3Minutes&lt;/li&gt;
&lt;li&gt;AllAtOnce&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Linear strategy means that traffic is shifted in equal increments with an equal number of time interval between each increment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#validate-the-sam-template"&gt;
  &lt;/a&gt;
  Validate the SAM template
&lt;/h2&gt;

&lt;p&gt;Run the following command on your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/environment/sam-app
~ sam validate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the template is correct, you will see template.yaml is a valid SAM Template. If you see an error, then you likely have an indentation issue on the YAML file. Double check and make sure it matches the screenshot shown above.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#push-the-changes"&gt;
  &lt;/a&gt;
  Push the changes
&lt;/h2&gt;

&lt;p&gt;In the terminal, run the following commands from the root directory of your sam-app project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ git add &lt;span class="nb"&gt;.&lt;/span&gt;
~ git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Canary deployments with SAM"&lt;/span&gt;
~ git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#monitor-canary-health"&gt;
  &lt;/a&gt;
  MONITOR CANARY HEALTH
&lt;/h2&gt;

&lt;p&gt;Canary deployments are considerably more successful if the code is being monitored during the deployment. You can configure CodeDeploy to automatically roll back the deployment if a specified CloudWatch metric has breached the alarm threshold. Common metrics to monitor are Lambda Invocation errors or Invocation Duration (latency), for example. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#define-a-cloudwatch-alarm"&gt;
  &lt;/a&gt;
  Define a CloudWatch Alarm
&lt;/h3&gt;

&lt;p&gt;Add the following alarm definition to the template.yaml file in the Resources section after the HelloWorldFunction definition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;CanaryErrorsAlarm&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::CloudWatch::Alarm&lt;/span&gt;
  &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;AlarmDescription&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Lambda function canary errors&lt;/span&gt;
    &lt;span class="na"&gt;ComparisonOperator&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;GreaterThanThreshold&lt;/span&gt;
    &lt;span class="na"&gt;EvaluationPeriods&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
    &lt;span class="na"&gt;MetricName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Errors&lt;/span&gt;
    &lt;span class="na"&gt;Namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS/Lambda&lt;/span&gt;
    &lt;span class="na"&gt;Period&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;
    &lt;span class="na"&gt;Statistic&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Sum&lt;/span&gt;
    &lt;span class="na"&gt;Threshold&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
    &lt;span class="na"&gt;Dimensions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Resource&lt;/span&gt;
        &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;${HelloWorldFunction}:live"&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;FunctionName&lt;/span&gt;
        &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;HelloWorldFunction&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ExecutedVersion&lt;/span&gt;
        &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;HelloWorldFunction.Version.Version&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then add the following lines to the DeploymentPreference section of the HelloWorldFunction definition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Alarms&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;CanaryErrorsAlarm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your template.yaml should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;AWSTemplateFormatVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;2010-09-09'&lt;/span&gt;
&lt;span class="na"&gt;Transform&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Serverless-2016-10-31&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="s"&gt;sam-app&lt;/span&gt;

  &lt;span class="s"&gt;Sample SAM Template for sam-app&lt;/span&gt;

&lt;span class="na"&gt;Globals&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Function&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Timeout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;

&lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;HelloWorldFunction&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Serverless::Function&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;CodeUri&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;hello-world/&lt;/span&gt;
      &lt;span class="na"&gt;Handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app.lambdaHandler&lt;/span&gt;
      &lt;span class="na"&gt;Runtime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nodejs14.x&lt;/span&gt;
      &lt;span class="na"&gt;AutoPublishAlias&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;live&lt;/span&gt;
      &lt;span class="na"&gt;DeploymentPreference&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Canary10Percent5Minutes&lt;/span&gt;
        &lt;span class="na"&gt;Alarms&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;CanaryErrorsAlarm&lt;/span&gt;
      &lt;span class="na"&gt;Events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;HelloWorld&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Api&lt;/span&gt;
          &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/hello&lt;/span&gt;
            &lt;span class="na"&gt;Method&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;get&lt;/span&gt;

  &lt;span class="na"&gt;CanaryErrorsAlarm&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::CloudWatch::Alarm&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;AlarmDescription&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Lambda function canary errors&lt;/span&gt;
      &lt;span class="na"&gt;ComparisonOperator&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;GreaterThanThreshold&lt;/span&gt;
      &lt;span class="na"&gt;EvaluationPeriods&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
      &lt;span class="na"&gt;MetricName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Errors&lt;/span&gt;
      &lt;span class="na"&gt;Namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS/Lambda&lt;/span&gt;
      &lt;span class="na"&gt;Period&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;
      &lt;span class="na"&gt;Statistic&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Sum&lt;/span&gt;
      &lt;span class="na"&gt;Threshold&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
      &lt;span class="na"&gt;Dimensions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Resource&lt;/span&gt;
          &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;${HelloWorldFunction}:live"&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;FunctionName&lt;/span&gt;
          &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;HelloWorldFunction&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ExecutedVersion&lt;/span&gt;
          &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;HelloWorldFunction.Version.Version&lt;/span&gt;

&lt;span class="na"&gt;Outputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# ServerlessRestApi is an implicit API created out of Events key under Serverless::Function&lt;/span&gt;
  &lt;span class="c1"&gt;# Find out more about other implicit resources you can reference within SAM&lt;/span&gt;
  &lt;span class="c1"&gt;# https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api&lt;/span&gt;
  &lt;span class="na"&gt;HelloWorldApi&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;API&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Gateway&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;endpoint&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;URL&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;for&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Prod&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;stage&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;for&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Hello&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;World&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;function"&lt;/span&gt;
    &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"&lt;/span&gt;
  &lt;span class="na"&gt;HelloWorldFunction&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Hello&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;World&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Lambda&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Function&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ARN"&lt;/span&gt;
    &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;HelloWorldFunction.Arn&lt;/span&gt;
  &lt;span class="na"&gt;HelloWorldFunctionIamRole&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Implicit&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;IAM&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Role&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;created&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;for&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Hello&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;World&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;function"&lt;/span&gt;
    &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;HelloWorldFunctionRole.Arn&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you can validate again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/environment/sam-app
sam validate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If it's ok, then push again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Added CloudWatch alarm to monitor the canary"&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Navigate to the AWS CodeDeploy console and after a couple of minutes, you should see a new deployment in progress. Click on the Deployment to see the details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MWv0Y7If--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/swtdgu8vqkbx9s4odmr2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MWv0Y7If--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/swtdgu8vqkbx9s4odmr2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The deployment status shows that 10% of the traffic has been shifted to the new version (aka The Canary). CodeDeploy will hold the remaining percentage until the specified time interval has ellapsed, in this case we specified the interval to be 5 minutes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xupUWOST--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wvxu39xh0u6acqt8oqzk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xupUWOST--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wvxu39xh0u6acqt8oqzk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Shortly after the 5 minutes, the remaining traffic should be shifted to the new version:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KmikGRaF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f9s5zyhlmd7euecrji5a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KmikGRaF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f9s5zyhlmd7euecrji5a.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rollbacks"&gt;
  &lt;/a&gt;
  ROLLBACKS
&lt;/h2&gt;

&lt;p&gt;Monitoring the health of your canary allows CodeDeploy to make a decision to whether a rollback is needed or not. If any of the CloudWatch Alarms specified gets to ALARM status, CodeDeploy rollsback the deployment automatically.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduce-an-error-on-purpose"&gt;
  &lt;/a&gt;
  Introduce an error on purpose
&lt;/h3&gt;

&lt;p&gt;Lets break the Lambda function on purpose so that the CanaryErrorsAlarm gets triggered during deployment. Update the lambda code in sam-app/hello-world/app.js to throw an error on every invocation, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lambdaHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This will cause a deployment rollback&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// try {&lt;/span&gt;
    &lt;span class="c1"&gt;//     response = {&lt;/span&gt;
    &lt;span class="c1"&gt;//         'statusCode': 200,&lt;/span&gt;
    &lt;span class="c1"&gt;//         'body': JSON.stringify({&lt;/span&gt;
    &lt;span class="c1"&gt;//             message: 'hello my friend with canaries',&lt;/span&gt;
    &lt;span class="c1"&gt;//         })&lt;/span&gt;
    &lt;span class="c1"&gt;//     }&lt;/span&gt;
    &lt;span class="c1"&gt;// } catch (err) {&lt;/span&gt;
    &lt;span class="c1"&gt;//     console.log(err);&lt;/span&gt;
    &lt;span class="c1"&gt;//     return err;&lt;/span&gt;
    &lt;span class="c1"&gt;// }&lt;/span&gt;

    &lt;span class="c1"&gt;// return response&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to update the unit test, otherwise the build will fail. Comment out every line in the sam-app/hello-world/tests/unit/test-handler.js file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 'use strict';&lt;/span&gt;

&lt;span class="c1"&gt;// const app = require('../../app.js');&lt;/span&gt;
&lt;span class="c1"&gt;// const chai = require('chai');&lt;/span&gt;
&lt;span class="c1"&gt;// const expect = chai.expect;&lt;/span&gt;
&lt;span class="c1"&gt;// var event, context;&lt;/span&gt;

&lt;span class="c1"&gt;// describe('Tests index', function () {&lt;/span&gt;
&lt;span class="c1"&gt;//     it('verifies successful response', async () =&amp;gt; {&lt;/span&gt;
&lt;span class="c1"&gt;//         const result = await app.lambdaHandler(event, context)&lt;/span&gt;

&lt;span class="c1"&gt;//         expect(result).to.be.an('object');&lt;/span&gt;
&lt;span class="c1"&gt;//         expect(result.statusCode).to.equal(200);&lt;/span&gt;
&lt;span class="c1"&gt;//         expect(result.body).to.be.an('string');&lt;/span&gt;

&lt;span class="c1"&gt;//         let response = JSON.parse(result.body);&lt;/span&gt;

&lt;span class="c1"&gt;//         expect(response).to.be.an('object');&lt;/span&gt;
&lt;span class="c1"&gt;//         expect(response.message).to.be.equal("hello my friend with canaries");&lt;/span&gt;
&lt;span class="c1"&gt;//     });&lt;/span&gt;
&lt;span class="c1"&gt;// });&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the terminal, run the following commands from the root directory of your sam-app project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Breaking the lambda function on purpose"&lt;/span&gt;
git push

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, wait for your Pipeline to reach the deployment phase (ExecuteChangeSet). It should turn blue when it begins:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w3TK_4Km--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w405rzehex3u7pwqkyz4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w3TK_4Km--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w405rzehex3u7pwqkyz4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#invoke-the-canary"&gt;
  &lt;/a&gt;
  INVOKE THE CANARY
&lt;/h3&gt;

&lt;p&gt;While the deployment is running, you need to generate traffic to the new Lambda function to make it fail and trigger the CloudWatch Alarm. In a real production environment, your users will likely generate organic traffic to the canary function, so you may not need to do this.&lt;/p&gt;

&lt;p&gt;In your terminal, run the following command to invoke the Lambda function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws lambda invoke &lt;span class="nt"&gt;--function-name&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="si"&gt;$(&lt;/span&gt;aws lambda list-functions | jq &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'.Functions[] | select( .FunctionName | contains("sam-app-HelloWorldFunction")).FunctionName'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;:live &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--payload&lt;/span&gt; &lt;span class="s1"&gt;'{}'&lt;/span&gt;  response.json

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1P6YMB11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7sy0hlh3luh1q165bnym.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1P6YMB11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7sy0hlh3luh1q165bnym.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember: During deployment, only 10% of the traffic will be routed to the new version. So, keep on invoking your lambda many times. 1 out of 10 invocations should trigger the new broken lambda, which is what you want to cause a rollback.&lt;/p&gt;

&lt;p&gt;Here is a command that invokes your function 15 times in a loop. Feel free to run it in your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$counter&lt;/span&gt; &lt;span class="nt"&gt;-le&lt;/span&gt; 15 &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;do
    &lt;/span&gt;aws lambda invoke &lt;span class="nt"&gt;--function-name&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="si"&gt;$(&lt;/span&gt;aws lambda list-functions | jq &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'.Functions[] | select( .FunctionName | contains("sam-app-HelloWorldFunction")).FunctionName'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;:live &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--payload&lt;/span&gt; &lt;span class="s1"&gt;'{}'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    response.json
    &lt;span class="nb"&gt;sleep &lt;/span&gt;1
    &lt;span class="o"&gt;((&lt;/span&gt;counter++&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Navigate to the AWS CodeDeploy Console and go into the deployment In-Progress to view its details.&lt;/p&gt;

&lt;p&gt;After a few minutes, CodeDeploy will detect that the CanaryErrorsAlarm has triggered and it will start rolling back the deployment. The screen will look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JXzN3hxu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzgcrztam57yqvbsr2hc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JXzN3hxu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzgcrztam57yqvbsr2hc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cleanup"&gt;
  &lt;/a&gt;
  CLEANUP
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#delete-s3-buckets"&gt;
  &lt;/a&gt;
  DELETE S3 BUCKETS
&lt;/h4&gt;

&lt;p&gt;Empty the buckets by going to the S3 console. And then Delete them (there are 2 buckets).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2vJBs1tn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zin904alx9jl7u4q2ak.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2vJBs1tn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zin904alx9jl7u4q2ak.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tS8s4xxC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s3v1x2g1r054y1gnyaxa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tS8s4xxC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s3v1x2g1r054y1gnyaxa.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#delete-cf-stacks"&gt;
  &lt;/a&gt;
  DELETE CF STACKS
&lt;/h3&gt;

&lt;p&gt;Now that the buckets are empty, we can delete the Cloudformation stacks:&lt;/p&gt;

&lt;p&gt;Delete the CF stacks in following sequence and please wait for each to complete before going to next one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ aws cloudformation delete-stack &lt;span class="nt"&gt;--stack-name&lt;/span&gt; sam-app

~ aws cloudformation delete-stack &lt;span class="nt"&gt;--stack-name&lt;/span&gt; sam-app-cicd

~ aws cloudformation delete-stack &lt;span class="nt"&gt;--stack-name&lt;/span&gt; aws-sam-cli-managed-default

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now delete the Cloud9 instance we created:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to your Cloud9 Environment.&lt;/li&gt;
&lt;li&gt;Select the environment (i.e. MyCloud9Workspace) and click delete.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n9XVf2Sm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3vnaupbqjpbef9zxrpn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n9XVf2Sm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3vnaupbqjpbef9zxrpn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#congratulations-you-finished-the-workshop-thank-you-for-reading-all-parts-of-this-workshop-series"&gt;
  &lt;/a&gt;
  Congratulations, you finished the workshop. Thank you for reading all parts of this workshop series.
&lt;/h3&gt;

</description>
      <category>aws</category>
      <category>node</category>
      <category>serverless</category>
      <category>devops</category>
    </item>
    <item>
      <title>Array.splice() &amp; Array.slice()</title>
      <author>Swarnali Roy</author>
      <pubDate>Tue, 17 Aug 2021 18:17:13 +0000</pubDate>
      <link>https://dev.to/swarnaliroy94/array-splice-array-slice-ag</link>
      <guid>https://dev.to/swarnaliroy94/array-splice-array-slice-ag</guid>
      <description>&lt;p&gt;Hello Dear Readers,&lt;/p&gt;

&lt;p&gt;In the previous posts of this series, we've already learnt how to &lt;em&gt;add&lt;/em&gt; elements to an array using &lt;code&gt;array.unshift()&lt;/code&gt; &amp;amp; &lt;code&gt;array.push()&lt;/code&gt; methods and &lt;em&gt;remove&lt;/em&gt; elements from an array using &lt;code&gt;array.shift()&lt;/code&gt; &amp;amp; &lt;code&gt;array.pop()&lt;/code&gt; methods. &lt;br&gt;
[ &lt;a href="https://dev.to/swarnaliroy94/add-items-to-arrays-with-unshift-push-methods-"&gt;https://dev.to/swarnaliroy94/add-items-to-arrays-with-unshift-push-methods-&lt;/a&gt;]&lt;br&gt;
[&lt;a href="https://dev.to/swarnaliroy94/remove-items-from-arrays-with-shift-pop-methods-5caf"&gt;https://dev.to/swarnaliroy94/remove-items-from-arrays-with-shift-pop-methods-5caf&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;Now, what if we want &lt;em&gt;one or more than one&lt;/em&gt; item to be removed from somewhere in the &lt;em&gt;middle&lt;/em&gt; of an array, that too at the same time? &lt;br&gt;
Well, that's exactly where &lt;code&gt;array.splice()&lt;/code&gt; comes in. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#arraysplice-method"&gt;
  &lt;/a&gt;
  Array.splice() Method
&lt;/h3&gt;

&lt;p&gt;👉 This method allows us to &lt;em&gt;remove&lt;/em&gt; any number of &lt;em&gt;consecutive elements&lt;/em&gt; from &lt;em&gt;anywhere&lt;/em&gt; in an array and/or &lt;em&gt;add&lt;/em&gt; new elements in place. &lt;br&gt;
👉 &lt;em&gt;Array.splice()&lt;/em&gt; can take up to three parameters.&lt;br&gt;
👉 We can use this method multiple times in a single code snippet , step by step. With each execution , the values of the indices change.&lt;/p&gt;

&lt;p&gt;The basic syntax are:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deleteCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deleteCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;itemN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's know about these parameters and what they mean.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#parameters-of-arraysplice"&gt;
  &lt;/a&gt;
  Parameters of Array.splice()
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;🔸 splice()'s &lt;em&gt;first parameter&lt;/em&gt; represents the &lt;em&gt;index&lt;/em&gt; on the array from which to &lt;em&gt;begin removing elements&lt;/em&gt;.&lt;br&gt;
🔸 If greater than the length of the array, &lt;code&gt;start&lt;/code&gt; will be set to the &lt;em&gt;length of the array&lt;/em&gt;. In this case, no element will be removed but the method will behave as an &lt;em&gt;adding function&lt;/em&gt;, adding as many element as provided. &lt;br&gt;
🔸 splice() can also take &lt;em&gt;negative integers&lt;/em&gt; as parameter. If negative, it will begin that many elements from the &lt;em&gt;end of the array&lt;/em&gt;. In this case, -1 means -n , that is the index of the &lt;em&gt;nth last element&lt;/em&gt;, and is therefore equivalent to the index of &lt;em&gt;array.length - n&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;deleteCount&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;🔸 The &lt;em&gt;second parameter&lt;/em&gt; indicates the number of elements to be &lt;em&gt;removed&lt;/em&gt; or &lt;em&gt;replaced&lt;/em&gt;.&lt;br&gt;
🔸 It indicates the number of elements in the array to &lt;em&gt;remove&lt;/em&gt; from &lt;code&gt;start&lt;/code&gt;. &lt;br&gt;
🔸 If &lt;code&gt;deleteCount&lt;/code&gt; is &lt;em&gt;omitted&lt;/em&gt; or is &lt;em&gt;equal to or greater than&lt;/em&gt; the number of elements left in the array, starting at &lt;code&gt;start&lt;/code&gt;, then all the elements from &lt;code&gt;start&lt;/code&gt; to the end of the array will be &lt;em&gt;eliminated&lt;/em&gt;. &lt;br&gt;
🔸 If &lt;code&gt;deleteCount&lt;/code&gt; is 0 or &lt;em&gt;negative&lt;/em&gt;, no elements will be &lt;em&gt;removed&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;item1, item2, ...., itemN&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;🔸 The &lt;em&gt;third parameter&lt;/em&gt; of splice() is &lt;em&gt;optional&lt;/em&gt; and &lt;em&gt;only&lt;/em&gt; used when we want to &lt;em&gt;add&lt;/em&gt; elements to the array, beginning from the &lt;code&gt;start&lt;/code&gt;.&lt;br&gt;
🔸 If no element is &lt;em&gt;specified&lt;/em&gt;, splice() will only &lt;em&gt;remove&lt;/em&gt; elements from the array. &lt;/p&gt;

&lt;p&gt;Let's move on to some &lt;em&gt;examples&lt;/em&gt; to understand this concept better. We need to always remember that index of an array starts at 0.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#smallbluediamond-example-1-remove-2-elements-starting-from-index-2-and-insert-two-new-elements"&gt;
  &lt;/a&gt;
  🔹 Example 1: Remove 2 elements starting from index 2 and insert two new elements.
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;flowers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;orchid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;marigold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sunflower&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;belly&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output: [ 'rose', 'orchid', 'belly' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output: [ 'marigold', 'sunflower' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In this example, &lt;code&gt;start&lt;/code&gt; is the index 2 and &lt;code&gt;deleteCount&lt;/code&gt; is also 2 that means, splice() will start removing elements from index 2 and remove the values of index 2 and 3.&lt;/p&gt;

&lt;p&gt;We can see the same example and insert two new elements &lt;em&gt;in place&lt;/em&gt; of the removed elements 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;flowers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;orchid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;marigold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sunflower&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;belly&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;almonda&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rosemary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//output: [ 'rose', 'orchid', 'almonda', 'rosemary', 'belly' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output: [ 'marigold', 'sunflower' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, value of index 2 and 3 are removed and &lt;em&gt;in place&lt;/em&gt; of them two new values are added.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#smallbluediamond-example-2-remove-elements-using-splice-multiple-times"&gt;
  &lt;/a&gt;
  🔹 Example 2: Remove elements using splice() multiple times
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;flowers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;orchid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;marigold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sunflower&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;belly&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;almonda&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rosemary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hibiscus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [ 'marigold' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;// ['rose', 'orchid', 'sunflower', 'belly', 'almonda', 'rosemary', 'hibiscus' ]&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removeAgain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removeAgain&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//[ 'rosemary', 'hibiscus' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;// [ 'rose', 'orchid', 'sunflower', 'belly', 'almonda' ]&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;include&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tulip&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;include&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//[ 'sunflower' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//[ 'rose', 'orchid', 'tulip', 'belly', 'almonda' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;em&gt;example&lt;/em&gt; at first &lt;em&gt;marigold&lt;/em&gt; is removed from &lt;em&gt;index 2&lt;/em&gt;.&lt;br&gt;
Now, the modified array holds &lt;em&gt;rosemary&lt;/em&gt; and &lt;em&gt;hibiscus&lt;/em&gt; at index 5 and 6. So, removed them using *splice(5,2). Lastly, "sunflower" has been replaced by "tulip". &lt;br&gt;
In the process of changing the original array, with the first execution, the value of the indices has been changed and depending on that we executed the next steps. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#smallbluediamond-example-3-remove-0-zero-elements-before-index-3-and-insert-1-new-element"&gt;
  &lt;/a&gt;
  🔹 Example 3: Remove 0 (zero) elements before index 3, and insert 1 new element.
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;flowers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;orchid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;marigold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sunflower&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;belly&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;almonda&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//output: [ 'rose', 'orchid', 'marigold', 'almonda', 'sunflower', 'belly' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output: []&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here, &lt;code&gt;deleteCount&lt;/code&gt; is 0 so nothing is removed but a new element is &lt;em&gt;added&lt;/em&gt; to the array at index 3 as the &lt;em&gt;first parameter&lt;/em&gt; of splice() is 3. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#smallbluediamond-example-4-remove-elements-from-index-0-and-insert-elementsnothing"&gt;
  &lt;/a&gt;
  🔹 Example 4: Remove elements from index 0 and insert elements/nothing
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;birds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;crow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pigeon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;parrot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;birds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;macaw&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;peacock&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lovebird&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;birds&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//output: [ 'macaw', 'peacock', 'lovebird', 'parrot' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output: [ 'crow', 'pigeon' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's see what happens if we take the &lt;em&gt;same&lt;/em&gt; array and &lt;em&gt;remove&lt;/em&gt; all the elements and &lt;em&gt;insert&lt;/em&gt; nothing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;birds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;crow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pigeon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;parrot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;birds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instruments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output: []&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output: [ 'crow', 'pigeon', 'parrot' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, there were only 3 values and we &lt;em&gt;removed&lt;/em&gt; 3 items from index 0, so the &lt;em&gt;output&lt;/em&gt; shows an empty array.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#smallbluediamond-example-5-remove-elements-from-index-n"&gt;
  &lt;/a&gt;
  🔹 Example 5: Remove elements from index -n
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;colours&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pink&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yellow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;grey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;colours&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;colours&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output: [ 'blue', 'black', 'red', 'grey' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output: [ 'pink', 'yellow' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, &lt;code&gt;start&lt;/code&gt; is -3 which indicates the &lt;em&gt;3rd last element&lt;/em&gt; of the array and &lt;code&gt;deleteCount&lt;/code&gt; is 2 which means the &lt;em&gt;splice()&lt;/em&gt; method will remove 2 elements from the 3rd last element and the other values will be same as before. &lt;/p&gt;

&lt;p&gt;Let's add some new values to the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;colours&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;grey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;colours&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pink&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;purple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;colours&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//output: [ 'blue', 'black', 'pink', 'purple', 'grey' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output: [ 'red' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;start&lt;/code&gt; is -2 which indicates the &lt;em&gt;2nd last element&lt;/em&gt; of the array and &lt;code&gt;deleteCount&lt;/code&gt; is 1 which means the &lt;em&gt;splice()&lt;/em&gt; method will remove 1 element from the 2nd last element and &lt;em&gt;add&lt;/em&gt; two new values starting from &lt;em&gt;index -2&lt;/em&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#smallbluediamond-example-6-remove-all-elements-no-deletecount-no-new-insertion"&gt;
  &lt;/a&gt;
  🔹 Example 6: Remove all elements, no deleteCount, no new insertion
&lt;/h4&gt;

&lt;p&gt;Remove all elements starting from index 4 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;music&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;guitar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;drums&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;violin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;piano&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tambourine&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flute&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;music&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;music&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//output: [ 'guitar', 'drums', 'violin', 'piano' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output: [ 'tambourine', 'flute' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remove all elements starting from index -4 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;music&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;guitar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;drums&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;violin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;piano&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tambourine&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flute&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;music&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;music&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//output: [ 'guitar', 'drums' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output: [ 'violin', 'piano', 'tambourine', 'flute' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, we have known enough of how to &lt;em&gt;modify&lt;/em&gt; an array by adding and removing items. But there is another way which we can use to &lt;em&gt;access part of an array without modifying it&lt;/em&gt;. That concept is known as &lt;strong&gt;Array.slice()&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arrayslice-method"&gt;
  &lt;/a&gt;
  Array.slice() Method
&lt;/h3&gt;

&lt;p&gt;👉 Rather than modifying an array, &lt;code&gt;Array.slice()&lt;/code&gt; copies or extracts a given number of elements to a new array, leaving the &lt;em&gt;original array&lt;/em&gt; unmodified.&lt;br&gt;
👉 It returns a shallow copy of elements from the original array. Elements of the original array are copied into the returned array.&lt;br&gt;
👉 It can take only &lt;em&gt;two parameters&lt;/em&gt; and both of them are &lt;em&gt;optional&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The basic syntax are: &lt;br&gt;
&lt;code&gt;slice()&lt;/code&gt;&lt;br&gt;
or&lt;br&gt;
&lt;code&gt;slice(start)&lt;/code&gt;&lt;br&gt;
or&lt;br&gt;
&lt;code&gt;slice(start,end)&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#parameters-of-arrayslice"&gt;
  &lt;/a&gt;
  Parameters of Array.slice()
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;🔸 &lt;code&gt;start&lt;/code&gt; indicates the &lt;em&gt;index&lt;/em&gt; at which to &lt;em&gt;start extraction&lt;/em&gt;&lt;br&gt;
🔸 Index can be &lt;em&gt;negative&lt;/em&gt;, indicating an &lt;em&gt;offset&lt;/em&gt; from the &lt;em&gt;end&lt;/em&gt; of the sequence.&lt;br&gt;
🔸 The process generally starts extracting from index 0 if &lt;code&gt;start&lt;/code&gt; is undefined.&lt;br&gt;
🔸 If &lt;code&gt;start&lt;/code&gt; is greater than the index range of the sequence, an empty array is returned. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;end&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;🔸 &lt;code&gt;end&lt;/code&gt; indicates index &lt;em&gt;before which to end extraction&lt;/em&gt;.&lt;br&gt;
🔸 &lt;code&gt;slice()&lt;/code&gt; extracts &lt;em&gt;up to&lt;/em&gt; but not including &lt;em&gt;end&lt;/em&gt;. For &lt;em&gt;example&lt;/em&gt;, slice(1,4) starts extracting from index 1 through index 3. (elements indexed 1, 2, and 3 will be copied). &lt;br&gt;
🔸 A negative indexing can be used. For &lt;em&gt;example&lt;/em&gt;, slice(2,-1) extracts the third element through the second-to-last element in the sequence. &lt;br&gt;
🔸 &lt;code&gt;slice()&lt;/code&gt; extracts through the end of the sequence (array.length), if there is no &lt;code&gt;end&lt;/code&gt; specified.&lt;br&gt;
🔸 If &lt;code&gt;end&lt;/code&gt; is greater than the &lt;em&gt;length&lt;/em&gt; of the sequence, &lt;code&gt;slice()&lt;/code&gt; extracts through to the end of the sequence (array.length). &lt;/p&gt;

&lt;p&gt;A few examples will clear the concept more. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#smallbluediamond-example-1-return-a-copy-of-the-original-array"&gt;
  &lt;/a&gt;
  🔹 Example 1: Return a Copy of the Original Array
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;music&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;guitar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;drums&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;violin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;piano&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tambourine&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flute&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;extracted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;music&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;music&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//output: [ 'guitar', 'drums', 'violin', 'piano', 'tambourine', 'flute' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;extracted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//output: [ 'guitar', 'drums', 'violin', 'piano', 'tambourine', 'flute' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As &lt;em&gt;no parameter&lt;/em&gt; is passed within &lt;code&gt;slice()&lt;/code&gt;, it returns the whole array unchanged. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#smallbluediamond-example-2-return-a-part-of-the-existing-array-only-using-one-parameter"&gt;
  &lt;/a&gt;
  🔹 Example 2: Return a Part of the Existing Array, only using one parameter
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mango&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;orange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;grape&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lemon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;kiwi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;extracted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//output: ['mango', 'apple', 'orange', 'grape', 'lemon', 'banana', 'kiwi']&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;extracted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//output: [ 'grape', 'lemon', 'banana', 'kiwi' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the above &lt;em&gt;example&lt;/em&gt;, the &lt;em&gt;original array&lt;/em&gt; is unchanged after &lt;em&gt;slice()&lt;/em&gt; being called upon it but the new array &lt;em&gt;extracted&lt;/em&gt; holds the copies of the values starting from &lt;em&gt;index 3&lt;/em&gt;. As no &lt;code&gt;end&lt;/code&gt; is specified, &lt;code&gt;slice()&lt;/code&gt; extracted all the value through &lt;em&gt;array.length&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#smallbluediamond-example-3-return-a-part-of-the-existing-array-using-both-parameters"&gt;
  &lt;/a&gt;
  🔹 Example 3: Return a Part of the Existing Array, using both parameters
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mango&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;orange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;grape&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lemon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;kiwi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;extracted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//output: ['mango', 'apple', 'orange', 'grape', 'lemon', 'banana', 'kiwi']&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;extracted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//output: [ 'orange', 'grape', 'lemon' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This &lt;em&gt;example&lt;/em&gt; shows, the &lt;em&gt;original array&lt;/em&gt; is unchanged after &lt;em&gt;slice()&lt;/em&gt; being called upon it but the new array &lt;em&gt;extracted&lt;/em&gt; holds the copies of the values starting from &lt;em&gt;index 2&lt;/em&gt; up to &lt;em&gt;index 5&lt;/em&gt; but not including the value of &lt;em&gt;index 5&lt;/em&gt;. The &lt;em&gt;extracted&lt;/em&gt; array holds the copies of values indexed at 2, 3 and 4.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#summarizing-arraysplice-vs-arrayslice"&gt;
  &lt;/a&gt;
  Summarizing Array.splice() vs Array.slice()
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Array.splice()&lt;/th&gt;
&lt;th&gt;Array.slice()&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;The &lt;code&gt;splice()&lt;/code&gt; method returns the removed item(s) in an array.&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;slice()&lt;/code&gt; method returns the selected element(s) in an array, as a new array object.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;This method &lt;em&gt;changes&lt;/em&gt; the original array.&lt;/td&gt;
&lt;td&gt;This method &lt;em&gt;doesn’t change&lt;/em&gt; the original array.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;It &lt;em&gt;does not create any copy&lt;/em&gt; of the existing array, rather &lt;em&gt;modifies&lt;/em&gt; it.&lt;/td&gt;
&lt;td&gt;It just &lt;em&gt;creates a shallow copy&lt;/em&gt; of the existing array &lt;em&gt;without&lt;/em&gt; doing any &lt;em&gt;modification&lt;/em&gt; to it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Can take &lt;em&gt;three&lt;/em&gt; parameters&lt;/td&gt;
&lt;td&gt;Can take &lt;em&gt;two&lt;/em&gt; parameters&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;When we write splice(2,4), it starts removing values from index 2 and remove 4 elements, &lt;em&gt;including&lt;/em&gt; the value of index 4 (removed items will be indexed at 2,3,4 &amp;amp; 5)&lt;/td&gt;
&lt;td&gt;When we write slice(2,4), it extracts values of index 2 up to index 4, &lt;em&gt;excluding&lt;/em&gt; the value of index 4 (removed items will be indexed at 2 &amp;amp; 3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;In this method, the third parameter gives the &lt;em&gt;option to add&lt;/em&gt; one or more new items to the existing array&lt;/td&gt;
&lt;td&gt;There is no such &lt;em&gt;adding option&lt;/em&gt; in this method&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;In the end , I'll give only one problem to solve to my readers. Let's see how you solve this.&lt;/p&gt;

&lt;p&gt;🔲 Use &lt;code&gt;splice()&lt;/code&gt; to remove &lt;em&gt;"USA"&lt;/em&gt; first and then &lt;em&gt;from "Japan" to "Canada"&lt;/em&gt;. Insert &lt;em&gt;"Bhutan"&lt;/em&gt; in place of &lt;em&gt;"UK"&lt;/em&gt;. Use &lt;code&gt;slice()&lt;/code&gt; to keep a &lt;em&gt;copy&lt;/em&gt; of the original array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;countries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bangladesh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;India&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nepal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;USA&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;UK&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Germany&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Japan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Spain&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Canada&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Expected Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ 'Bangladesh', 'India', 'Nepal', 'Bhutan', 'Germany' ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Readers can post their solutions in the discussion part.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
