<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Say something from the terminal</title>
      <author>Siddharth</author>
      <pubDate>Sat, 24 Apr 2021 08:57:29 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/say-something-from-the-terminal-117g</link>
      <guid>https://dev.to/siddharthshyniben/say-something-from-the-terminal-117g</guid>
      <description>&lt;p&gt;Today I learned about the &lt;code&gt;say&lt;/code&gt; command in macos. You use it like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;say something
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It may not seem useful, but I use it when I have long scripts to run...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run build &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; say &lt;span class="s2"&gt;"build done"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and It can also be used to do fun things...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;say abcdefghijklmnopqrstuvwxyz &lt;span class="c"&gt;# The impossible is possible&lt;/span&gt;
say dskfjkhadsfhjkasjhkfgjdasgfj 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>todayilearned</category>
      <category>speaking</category>
    </item>
    <item>
      <title>build a social media website with Next JS and Firebase</title>
      <author>Naman vyas</author>
      <pubDate>Sat, 24 Apr 2021 08:14:37 +0000</pubDate>
      <link>https://dev.to/namanvyas/build-a-social-media-website-with-next-js-and-firebase-3i3k</link>
      <guid>https://dev.to/namanvyas/build-a-social-media-website-with-next-js-and-firebase-3i3k</guid>
      <description>&lt;p&gt;Hello Everyone,&lt;/p&gt;

&lt;p&gt;As the title say I created a social media website with Next JS framework and Firebase. Its a basic and simple social media just for learning new stuff about Next JS and Firebase.&lt;/p&gt;

&lt;p&gt;Website Link : &lt;a href="http://emote.vercel.app/"&gt;http://emote.vercel.app/&lt;/a&gt;&lt;br&gt;
Github Link : &lt;a href="https://github.com/NV404/Emote"&gt;https://github.com/NV404/Emote&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This website is still in development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-am-going-to-add"&gt;
  &lt;/a&gt;
  What I am Going To Add
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;All post by user on profile&lt;/li&gt;
&lt;li&gt;Like and comment system&lt;/li&gt;
&lt;li&gt;Suggestions system&lt;/li&gt;
&lt;li&gt;Follow System
++ And many more stuff&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Tell me what you think about it.&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Also feel free to contribute.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>nextjs</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Implement login user API that returns PASETO or JWT access token in Go</title>
      <author>TECH SCHOOL</author>
      <pubDate>Sat, 24 Apr 2021 08:13:04 +0000</pubDate>
      <link>https://dev.to/techschoolguru/implement-login-user-api-that-returns-paseto-or-jwt-access-token-in-go-5b1p</link>
      <guid>https://dev.to/techschoolguru/implement-login-user-api-that-returns-paseto-or-jwt-access-token-in-go-5b1p</guid>
      <description>&lt;p&gt;Hello everyone! Welcome back to the backend master class!&lt;/p&gt;

&lt;p&gt;In the &lt;a href="https://dev.to/techschoolguru/how-to-create-and-verify-jwt-paseto-token-in-golang-1l5j"&gt;previous lecture&lt;/a&gt;, we’ve implemented the token maker interface using JWT and PASETO. It provides 2 methods to create and verify tokens.&lt;/p&gt;

&lt;p&gt;So today we’re gonna learn how to use it to implement the login API, where the username and password are provided by the client, and the server will return an access token if those credentials are correct.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lnHbZ9GOGAs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here's:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link to the &lt;a href="https://bit.ly/backendmaster"&gt;full series playlist on Youtube&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;And its &lt;a href="https://github.com/techschool/simplebank"&gt;Github repository&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OK let’s start!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-token-maker-to-the-server"&gt;
  &lt;/a&gt;
  Add token Maker to the Server
&lt;/h2&gt;

&lt;p&gt;The first step is to add the token maker to our API server. So let’s open &lt;code&gt;api/server.go&lt;/code&gt; file!&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;Server&lt;/code&gt; struct, I’m gonna add a &lt;code&gt;tokenMaker&lt;/code&gt; field of type &lt;code&gt;token.Maker&lt;/code&gt; interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;store&lt;/span&gt;      &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;
    &lt;span class="n"&gt;tokenMaker&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Maker&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt;     &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Engine&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then let’s initialize this field inside the &lt;code&gt;NewServer()&lt;/code&gt; function! First we have to create a new token maker object. We can choose to use either &lt;code&gt;JWT&lt;/code&gt; or &lt;code&gt;PASETO&lt;/code&gt;, they both implement the same &lt;code&gt;token.Maker&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;I think PASETO is better, so let’s call &lt;code&gt;token.NewPasetoMaker()&lt;/code&gt;. It requires a symmetric key string, so we will need to load this from environment variable. For now, let’s just put an empty string here as a placeholder.&lt;/p&gt;

&lt;p&gt;If the returned error is not &lt;code&gt;nil&lt;/code&gt;, we return a &lt;code&gt;nil&lt;/code&gt; server, and an error saying "cannot create token maker". The &lt;code&gt;%w&lt;/code&gt; is used to wrap the original error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewPasetoMaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cannot create token maker: %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OK, so now we have to change the return type of the &lt;code&gt;NewServer()&lt;/code&gt; function to include an &lt;code&gt;error&lt;/code&gt; as well. Then in the statement to create a &lt;code&gt;Server&lt;/code&gt; object, we add the &lt;code&gt;tokenMaker&lt;/code&gt; object that we’ve just created.&lt;/p&gt;

&lt;p&gt;Alright, now let’s come back to the symmetric key parameter. I’m gonna add a new environment variable to the &lt;code&gt;app.env&lt;/code&gt; file. Let’s call it &lt;code&gt;TOKEN_SYMMETRIC_KEY&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And as we’re using PASETO version 2, which uses ChachaPoly algorithm, the size of this symmetric key should be exactly 32 bytes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;TOKEN_SYMMETRIC_KEY=12345678901234567890123456789012
ACCESS_TOKEN_DURATION=15m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should also add 1 more variable to store the valid duration of the access token. It’s a best practice to set this to a very short duration, let’s say, just 15 minutes for example.&lt;/p&gt;

&lt;p&gt;OK, now we have to update our config struct to include the 2 new variables that we’ve just added.&lt;/p&gt;

&lt;p&gt;First, the &lt;code&gt;TokenSymmetricKey&lt;/code&gt; of type &lt;code&gt;string&lt;/code&gt;. We have to specify the &lt;code&gt;mapstructure&lt;/code&gt; tag for it because &lt;a href="https://github.com/spf13/viper"&gt;viper&lt;/a&gt; uses &lt;a href="https://github.com/mitchellh/mapstructure"&gt;mapstructure&lt;/a&gt; package to parse the config data. Please refer to the &lt;a href="https://dev.to/techschoolguru/load-config-from-file-environment-variables-in-golang-with-viper-2j2d"&gt;lecture 12 of the course&lt;/a&gt; if you don’t know how to use viper.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;TokenSymmetricKey&lt;/span&gt;   &lt;span class="kt"&gt;string&lt;/span&gt;        &lt;span class="s"&gt;`mapstructure:"TOKEN_SYMMETRIC_KEY"`&lt;/span&gt;
    &lt;span class="n"&gt;AccessTokenDuration&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Duration&lt;/span&gt; &lt;span class="s"&gt;`mapstructure:"ACCESS_TOKEN_DURATION"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next field is &lt;code&gt;AccessTokenDuration&lt;/code&gt; of type &lt;code&gt;time.Duration&lt;/code&gt;. And its &lt;code&gt;mapstructure&lt;/code&gt; tag should be this environment variable’s name: &lt;code&gt;ACCESS_TOKEN_DURATION&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As you can see, when the type of a config field is &lt;code&gt;time.Duration&lt;/code&gt;, we can specify the value in a human readable format like this: &lt;code&gt;15m&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;OK so now we’ve loaded the secret key and token duration into the config, let’s go back to the server and use them. We have to add a &lt;code&gt;config&lt;/code&gt; parameter to the &lt;code&gt;NewServer()&lt;/code&gt; function. Then in the &lt;code&gt;token.NewPasetoMaker()&lt;/code&gt; call, we pass in &lt;code&gt;config.TokenSymmetricKey&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We should also add a config field to the &lt;code&gt;Server&lt;/code&gt; struct, and store it here when initialize the &lt;code&gt;Server&lt;/code&gt; object. We will use the &lt;code&gt;TokenDuration&lt;/code&gt; in this &lt;code&gt;config&lt;/code&gt; object later when creating the tokens.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;     &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;
    &lt;span class="n"&gt;store&lt;/span&gt;      &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;
    &lt;span class="n"&gt;tokenMaker&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Maker&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt;     &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Engine&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewPasetoMaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TokenSymmetricKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cannot create token maker: %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Engine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Validate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterValidation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"currency"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validCurrency&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setupRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At the end of this function, we should return a nil error. And that will be it!&lt;/p&gt;

&lt;p&gt;However, as we added a new config parameter to the &lt;code&gt;NewServer()&lt;/code&gt; function, some unit tests that we wrote before are broken. So let’s fix them!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fix-broken-unit-tests"&gt;
  &lt;/a&gt;
  Fix broken unit tests
&lt;/h2&gt;

&lt;p&gt;In the &lt;code&gt;api/main_test.go&lt;/code&gt; file, I’m gonna define a function &lt;code&gt;newTestServer()&lt;/code&gt;  that will create a new server for test. It takes a &lt;code&gt;testing.T&lt;/code&gt; object and a &lt;code&gt;db.Store&lt;/code&gt; interface as input. And it will return a &lt;code&gt;Server&lt;/code&gt; object as output.&lt;/p&gt;

&lt;p&gt;In this function, let’s create a new &lt;code&gt;config&lt;/code&gt; object, with &lt;code&gt;TokenSymmetricKey&lt;/code&gt; is &lt;code&gt;util.RandomString&lt;/code&gt; of 32 characters, and &lt;code&gt;AccessTokenDuration&lt;/code&gt; is 1 minute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;newTestServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;TokenSymmetricKey&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;32&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;AccessTokenDuration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Minute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;NewServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we create a new server with that &lt;code&gt;config&lt;/code&gt; object and the input &lt;code&gt;store&lt;/code&gt; interface. Require no errors, and finally return the created &lt;code&gt;server&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now get back to the &lt;code&gt;api/transfer_test.go&lt;/code&gt; file. Here, instead of &lt;code&gt;NewServer()&lt;/code&gt;, we will call &lt;code&gt;newTestServer&lt;/code&gt;, and pass in the &lt;code&gt;testing.T&lt;/code&gt; object and the mock store.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestTransferAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;testCases&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;tc&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;testCases&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="o"&gt;...&lt;/span&gt;

            &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;newTestServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;recorder&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;httptest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewRecorder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We do the same for the &lt;code&gt;server&lt;/code&gt; inside &lt;code&gt;api/user_test.go&lt;/code&gt; file and &lt;code&gt;api/account_test.go&lt;/code&gt; file as well. There are several calls of &lt;code&gt;NewServer()&lt;/code&gt; in these files, so we have to change all of them to &lt;code&gt;newTestServer()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Alright, now everything is updated. Let’s run the whole api package tests!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L0ilTBXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nj5xykkfqwc2bm2gmus3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L0ilTBXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nj5xykkfqwc2bm2gmus3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All passed! Excellent! So the tests are now working well with the new &lt;code&gt;Server&lt;/code&gt; struct.&lt;/p&gt;

&lt;p&gt;But there’s one more place we need to update, that’s the main entry point of our server: &lt;code&gt;main.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LoadConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cannot load config:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DBDriver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DBSource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cannot connect to db:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cannot create server:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServerAddress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cannot start server:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, in this &lt;code&gt;main()&lt;/code&gt; function, we have to add config to the &lt;code&gt;api.NewServer()&lt;/code&gt; call. And this call will return a &lt;code&gt;server&lt;/code&gt; and an &lt;code&gt;error&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;error&lt;/code&gt; is not &lt;code&gt;nil&lt;/code&gt;, we just write a fatal log, saying "cannot create server". Just like that, and we’re done!&lt;/p&gt;

&lt;p&gt;Now it’s time to build the login user API!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implement-login-user-handler"&gt;
  &lt;/a&gt;
  Implement login user handler
&lt;/h2&gt;

&lt;p&gt;Let’s open the &lt;code&gt;api/user.go&lt;/code&gt; file!&lt;/p&gt;

&lt;p&gt;The login API’s request payload must contain the &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;, which is very similar to the &lt;code&gt;createUserRequest&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;createUserRequest&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"username" binding:"required,alphanum"`&lt;/span&gt;
    &lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"password" binding:"required,min=6"`&lt;/span&gt;
    &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"full_name" binding:"required"`&lt;/span&gt;
    &lt;span class="n"&gt;Email&lt;/span&gt;    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"email" binding:"required,email"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So I’m gonna copy this struct, and paste it to the end of this file. Then let’s change the struct name to &lt;code&gt;loginUserRequest&lt;/code&gt; and remove the &lt;code&gt;FullName&lt;/code&gt; and &lt;code&gt;Email&lt;/code&gt; fields, just keep the &lt;code&gt;Username&lt;/code&gt; and &lt;code&gt;Password&lt;/code&gt; fields.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;loginUserRequest&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"username" binding:"required,alphanum"`&lt;/span&gt;
    &lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"password" binding:"required,min=6"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let’s define the &lt;code&gt;loginUserResponse&lt;/code&gt; struct. The most important field that should be returned to the client is &lt;code&gt;AccessToken&lt;/code&gt; string. This is the token that we will create using the token maker interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;loginUserResponse&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;AccessToken&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;       &lt;span class="s"&gt;`json:"access_token"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Beside the access token, we might also want to return some information of the logged in user, just like the one we returned in the create user API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;createUserResponse&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Username&lt;/span&gt;          &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"username"`&lt;/span&gt;
    &lt;span class="n"&gt;FullName&lt;/span&gt;          &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"full_name"`&lt;/span&gt;
    &lt;span class="n"&gt;Email&lt;/span&gt;             &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"email"`&lt;/span&gt;
    &lt;span class="n"&gt;PasswordChangedAt&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="s"&gt;`json:"password_changed_at"`&lt;/span&gt;
    &lt;span class="n"&gt;CreatedAt&lt;/span&gt;         &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="s"&gt;`json:"created_at"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So to make this struct reusable, I’m gonna change its name to just &lt;code&gt;userResponse&lt;/code&gt;. It will be the type of the &lt;code&gt;User&lt;/code&gt; field in this &lt;code&gt;loginUserResponse&lt;/code&gt; struct:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;userResponse&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Username&lt;/span&gt;          &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"username"`&lt;/span&gt;
    &lt;span class="n"&gt;FullName&lt;/span&gt;          &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"full_name"`&lt;/span&gt;
    &lt;span class="n"&gt;Email&lt;/span&gt;             &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"email"`&lt;/span&gt;
    &lt;span class="n"&gt;PasswordChangedAt&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="s"&gt;`json:"password_changed_at"`&lt;/span&gt;
    &lt;span class="n"&gt;CreatedAt&lt;/span&gt;         &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="s"&gt;`json:"created_at"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;loginUserResponse&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;AccessToken&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;       &lt;span class="s"&gt;`json:"access_token"`&lt;/span&gt;
    &lt;span class="n"&gt;User&lt;/span&gt;        &lt;span class="n"&gt;userResponse&lt;/span&gt; &lt;span class="s"&gt;`json:"user"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then let’s copy the &lt;code&gt;userResponse&lt;/code&gt; object from the &lt;code&gt;createUser()&lt;/code&gt; handler, and define a &lt;code&gt;newUserResponse()&lt;/code&gt; function at the top.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;newUserResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;userResponse&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;userResponse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;             &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;PasswordChangedAt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PasswordChangedAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;CreatedAt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;         &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreatedAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The role of this function is to convert the input &lt;code&gt;db.User&lt;/code&gt; object into &lt;code&gt;userResponse&lt;/code&gt;. The reason we do that is because there’s a sensitive data inside the &lt;code&gt;db.User&lt;/code&gt; struct, which is the &lt;code&gt;hashed_password&lt;/code&gt;, that we don’t want to expose to the client.&lt;/p&gt;

&lt;p&gt;OK, so now in the &lt;code&gt;createUser()&lt;/code&gt; handler, we can just call the &lt;code&gt;newUserResponse()&lt;/code&gt; function to create the response object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;rsp&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;newUserResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rsp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;newUserResponse()&lt;/code&gt; function will be useful for our new &lt;code&gt;loginUser()&lt;/code&gt; handler as well.&lt;/p&gt;

&lt;p&gt;Alright, now let’s add a new method to the server struct: &lt;code&gt;loginUser()&lt;/code&gt;. Similar as in other API handlers, this function will take a &lt;code&gt;gin.Context&lt;/code&gt; object as input.&lt;/p&gt;

&lt;p&gt;Inside, we declare a &lt;code&gt;request&lt;/code&gt; object of type &lt;code&gt;loginUserRequest&lt;/code&gt;, and we call the &lt;code&gt;ctx.ShouldBindJSON()&lt;/code&gt; function with a pointer to that &lt;code&gt;request&lt;/code&gt; object. This will bind all the input parameters of the API into the &lt;code&gt;request&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;loginUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="n"&gt;loginUserRequest&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShouldBindJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusBadRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If &lt;code&gt;error&lt;/code&gt; is not &lt;code&gt;nil&lt;/code&gt;, we send a response with status &lt;code&gt;400 Bad Request&lt;/code&gt; to the client, together with the &lt;code&gt;errorResponse()&lt;/code&gt; body to explain why it failed.&lt;/p&gt;

&lt;p&gt;If there’s no error, we will find the user from the database by calling &lt;code&gt;server.store.GetUser()&lt;/code&gt; with the context &lt;code&gt;ctx&lt;/code&gt; and &lt;code&gt;req.Username&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;loginUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ErrNoRows&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusNotFound&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the error returned by this call is not &lt;code&gt;nil&lt;/code&gt;, then there are 2 possible cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first case is when the &lt;code&gt;username&lt;/code&gt; doesn’t exist, which means &lt;code&gt;error&lt;/code&gt; equals to &lt;code&gt;sql.ErrNoRows&lt;/code&gt;. In this case, we send a response with status &lt;code&gt;404 Not Found&lt;/code&gt; to the client, and return immediately.&lt;/li&gt;
&lt;li&gt;The second case is an unexpected error occurs when talking to the database. In this case, we send a &lt;code&gt;500 Internal Server Error&lt;/code&gt; status to the client, and also return right away.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If everything goes well, and no errors occur, we will have to check if the password provided by the client is correct or not. So we call &lt;code&gt;util.CheckPassword()&lt;/code&gt; with the input &lt;code&gt;req.Password&lt;/code&gt; and &lt;code&gt;user.HashedPassword&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;loginUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CheckPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HashedPassword&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusUnauthorized&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If this function returns a not &lt;code&gt;nil&lt;/code&gt; error, then it means the provided password is incorrect. We will send a response with status &lt;code&gt;401 Unauthorized&lt;/code&gt; to the client, and return.&lt;/p&gt;

&lt;p&gt;Only when the password is correct, then we will create a new access token for this user.&lt;/p&gt;

&lt;p&gt;Let’s call &lt;code&gt;server.tokenMaker.CreateToken()&lt;/code&gt;, pass in &lt;code&gt;user.Username&lt;/code&gt;, and &lt;code&gt;server.config.AccessTokenDuration&lt;/code&gt; as input arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;loginUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AccessTokenDuration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;rsp&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;loginUserResponse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;AccessToken&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;newUserResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rsp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If an unexpected error occurs, we just return &lt;code&gt;500 Internal Server Error&lt;/code&gt; status code.&lt;/p&gt;

&lt;p&gt;Otherwise, we will build the &lt;code&gt;loginUserResponse&lt;/code&gt; object, where &lt;code&gt;AccessToken&lt;/code&gt; is the created access token, and &lt;code&gt;User&lt;/code&gt; is &lt;code&gt;newUserResponse(user)&lt;/code&gt;. We then send this response to the client with a &lt;code&gt;200 OK&lt;/code&gt; status code.&lt;/p&gt;

&lt;p&gt;And that’s basically it! The &lt;code&gt;loginUser()&lt;/code&gt; handler function is completed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;loginUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="n"&gt;loginUserRequest&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ShouldBindJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusBadRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ErrNoRows&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusNotFound&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CheckPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HashedPassword&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusUnauthorized&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AccessTokenDuration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;rsp&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;loginUserResponse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;AccessToken&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;newUserResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rsp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#add-login-api-route-to-the-server"&gt;
  &lt;/a&gt;
  Add login API route to the server
&lt;/h2&gt;

&lt;p&gt;The next step is to add a new API endpoint to the server that will route the login request to the &lt;code&gt;loginUser()&lt;/code&gt; handler.&lt;/p&gt;

&lt;p&gt;I’m gonna put it next to the create user route. So &lt;code&gt;router.POST()&lt;/code&gt;, the path should be &lt;code&gt;/users/login&lt;/code&gt;, and the handler function is &lt;code&gt;server.loginUser()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;router&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/users/login"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loginUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we’re done!&lt;/p&gt;

&lt;p&gt;However, this &lt;code&gt;NewServer()&lt;/code&gt; function is getting quite long now, which makes it harder to read.&lt;/p&gt;

&lt;p&gt;So I’m gonna split the routing part into a separate method of the &lt;code&gt;server&lt;/code&gt; struct. Let’s call it &lt;code&gt;setupRouter()&lt;/code&gt;. Then paste in all the routing codes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;setupRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/users"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/users/login"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loginUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/accounts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createAccount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/accounts/:id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAccount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/accounts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listAccounts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/transfers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createTransfer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;router&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should move the gin router variable here as well. And at the end, we should save this router to the &lt;code&gt;server.router&lt;/code&gt; field.&lt;/p&gt;

&lt;p&gt;Then all we have to do in the &lt;code&gt;NewServer()&lt;/code&gt; function is to call &lt;code&gt;server.setupRouter()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewPasetoMaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TokenSymmetricKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cannot create token maker: %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Engine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Validate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterValidation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"currency"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validCurrency&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setupRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now we’ve really completed the login user API’s implementation. It’s pretty easy and straightforward, isn’t it?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#run-the-server-and-send-login-user-request"&gt;
  &lt;/a&gt;
  Run the server and send login user request
&lt;/h2&gt;

&lt;p&gt;Let’s run the server and send some requests to see how it goes!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;❯ make server
go run main.go
&lt;span class="o"&gt;[&lt;/span&gt;GIN-debug] &lt;span class="o"&gt;[&lt;/span&gt;WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

&lt;span class="o"&gt;[&lt;/span&gt;GIN-debug] &lt;span class="o"&gt;[&lt;/span&gt;WARNING] Running &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"debug"&lt;/span&gt; mode. Switch to &lt;span class="s2"&gt;"release"&lt;/span&gt; mode &lt;span class="k"&gt;in &lt;/span&gt;production.
 - using &lt;span class="nb"&gt;env&lt;/span&gt;:   &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;GIN_MODE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;release
 - using code:  gin.SetMode&lt;span class="o"&gt;(&lt;/span&gt;gin.ReleaseMode&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;GIN-debug] POST   /users                    &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; github.com/techschool/simplebank/api.&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;Server&lt;span class="o"&gt;)&lt;/span&gt;.createUser-fm &lt;span class="o"&gt;(&lt;/span&gt;3 handlers&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;GIN-debug] POST   /users/login              &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; github.com/techschool/simplebank/api.&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;Server&lt;span class="o"&gt;)&lt;/span&gt;.loginUser-fm &lt;span class="o"&gt;(&lt;/span&gt;3 handlers&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;GIN-debug] POST   /accounts                 &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; github.com/techschool/simplebank/api.&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;Server&lt;span class="o"&gt;)&lt;/span&gt;.createAccount-fm &lt;span class="o"&gt;(&lt;/span&gt;4 handlers&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;GIN-debug] GET    /accounts/:id             &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; github.com/techschool/simplebank/api.&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;Server&lt;span class="o"&gt;)&lt;/span&gt;.getAccount-fm &lt;span class="o"&gt;(&lt;/span&gt;4 handlers&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;GIN-debug] GET    /accounts                 &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; github.com/techschool/simplebank/api.&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;Server&lt;span class="o"&gt;)&lt;/span&gt;.listAccounts-fm &lt;span class="o"&gt;(&lt;/span&gt;4 handlers&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;GIN-debug] POST   /transfers                &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; github.com/techschool/simplebank/api.&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;Server&lt;span class="o"&gt;)&lt;/span&gt;.createTransfer-fm &lt;span class="o"&gt;(&lt;/span&gt;4 handlers&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;GIN-debug] Listening and serving HTTP on 0.0.0.0:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see here, the login user API is up and running.&lt;/p&gt;

&lt;p&gt;Now I’m gonna open &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt;, create a new request and set it method to &lt;code&gt;POST&lt;/code&gt;. The URL should be &lt;a href="http://localhost:8080/users/login"&gt;http://localhost:8080/users/login&lt;/a&gt;, then select body, raw, and JSON format.&lt;/p&gt;

&lt;p&gt;The JSON body will have 2 fields: &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;. In the database, there are 4 users that we already created in previous lectures. So I’m gonna use the first user with username &lt;code&gt;quang1&lt;/code&gt; and the password is &lt;code&gt;secret&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;OK let’s send this request:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B9Pqia7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwyei97ur9h1d1njvxsp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B9Pqia7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwyei97ur9h1d1njvxsp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Voilà! It's successful!&lt;/p&gt;

&lt;p&gt;We’ve got the PASETO v2 local access token here. And all the information of the logged in user in this object. So it worked!&lt;/p&gt;

&lt;p&gt;Let’s try login with an invalid password: &lt;code&gt;xyz&lt;/code&gt;. Send the request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pGfvekDI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4nvc3rurrsflbwxda5j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pGfvekDI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4nvc3rurrsflbwxda5j.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we’ve got &lt;code&gt;400 Bad Request&lt;/code&gt; because the password we sent was too short. That's because we have a validation rule for the password field to have at least 6 characters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;loginUserRequest&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"password" binding:"required,min=6"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So let’s change this value to &lt;code&gt;xyz123&lt;/code&gt;. And send the request again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2xDKMy7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v1i2t9o4wahc6euo9w0v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2xDKMy7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v1i2t9o4wahc6euo9w0v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This time we’ve got &lt;code&gt;401 Unauthorized&lt;/code&gt; status code, and the error is: "hashed password is not the hash of the given password", or in other words, the provided password is incorrect.&lt;/p&gt;

&lt;p&gt;Now let’s try the case when username doesn’t exist. I’m gonna change the &lt;code&gt;username&lt;/code&gt; to &lt;code&gt;quang10&lt;/code&gt;, and send the request again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LLgdGAF1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/613iweotcvnxahc0pvu5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LLgdGAF1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/613iweotcvnxahc0pvu5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This time, we’ve got &lt;code&gt;404 Not Found&lt;/code&gt; status code. That’s exactly what we expected! So the login user API is working very well.&lt;/p&gt;

&lt;p&gt;Before we finish, I’m gonna show you how easy it is to change the token types.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#change-the-token-type"&gt;
  &lt;/a&gt;
  Change the token type
&lt;/h2&gt;

&lt;p&gt;Right now, we’re using &lt;code&gt;PASETO&lt;/code&gt;, but since it implements the same token maker interface with JWT, it will be super easy if we want to switch to &lt;code&gt;JWT&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All we have to do is just change the &lt;code&gt;token.NewPasetoMaker()&lt;/code&gt; call to &lt;code&gt;token.NewJWTMaker()&lt;/code&gt; in the &lt;code&gt;api/server.go&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewJWTMaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TokenSymmetricKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cannot create token maker: %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s it! Let’s restart the server, then go back to Postman and send the login request one more time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4_-a5wCK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x85z3ngc9foi1scy3jrc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4_-a5wCK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x85z3ngc9foi1scy3jrc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the request is successful. And now the access token looks different because it’s a JWT token, not a PASETO token as before.&lt;/p&gt;

&lt;p&gt;OK, now as we’ve confirmed that it worked, I’m gonna revert the token type to PASETO because it’s better than JWT in my opinion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;tokenMaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewPasetoMaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TokenSymmetricKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cannot create token maker: %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that wraps up this lecture about implementing login user API in Go.&lt;/p&gt;

&lt;p&gt;I hope you find it useful. Thanks a lot for reading, and see you soon in the next one!&lt;/p&gt;




&lt;p&gt;If you like the article, please subscribe to our &lt;a href="http://bit.ly/techschoolguru"&gt;Youtube channel&lt;/a&gt; and follow us on &lt;a href="https://twitter.com/techschoolguru"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.facebook.com/techschool.guru"&gt;Facebook&lt;/a&gt; for more tutorials in the future.&lt;/p&gt;

</description>
      <category>go</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Medipol Global Summit 2021</title>
      <author>Vusal Ismayilov</author>
      <pubDate>Sat, 24 Apr 2021 07:46:40 +0000</pubDate>
      <link>https://dev.to/woosal/medipol-global-summit-2021-140l</link>
      <guid>https://dev.to/woosal/medipol-global-summit-2021-140l</guid>
      <description>&lt;p&gt;Medipol Global Summit 2021 is an event targeted for the enthusiasts in the field of Artificial Intelligence, Machine Learning, Cyber Security, Web and Mobile development, Blockchain and so many others! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KYp1j6Yv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/om9t9txwnrgqpnsn34ky.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KYp1j6Yv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/om9t9txwnrgqpnsn34ky.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The hosts, in other words, the presenters have 2 most important characteristics in common, which is they are all Experts in their respective fields and all are officially verified Google Developer Experts. Throughout the event while having applied and introductory projects welcome you by the GDE’s, you will have a general understanding of specific topics related to each field in your mind. If you are especially so confused about which field to choose and continue over, or already have chosen your path, however, need suggestions how to continue, this is literally a perfect opportunity for you all to ask your questions to the Experts with decades of experience.&lt;/p&gt;

&lt;p&gt;Feel free to visit the official Medipol Summit 2021 website by clicking the link below to stay more informed about the event:&lt;br&gt;
&lt;a href="https://medipolsummit.org"&gt;https://medipolsummit.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vCaNPMV0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8c6r4y7ud835z2xv96h.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vCaNPMV0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8c6r4y7ud835z2xv96h.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Down below, you can find the schedule of the event, and through the website (&lt;a href="https://medipolsummit.org"&gt;https://medipolsummit.org&lt;/a&gt;) you can register to the event for completely free while adding the special calendar made by us to your own Google calendar schedule with one click away in order to stay updated and notified to the case and not to miss any event!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Friday May 7
- Introduction to Machine Learning
- Neural Networks
- Artificial Intelligence

Saturday May 8
- Cyber Security Power between the Past and the Future
- Cyber Security
- Blockchain
- Blockchain

Sunday May 9
- Frontend Web Development
- Backend Web Development
- Flutter
- Jetpack Compose For Android
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to sign-up to the event and add to your calendar through the website &lt;a href="https://medipolsummit.org"&gt;https://medipolsummit.org&lt;/a&gt; &lt;/p&gt;

</description>
      <category>summit</category>
      <category>tech</category>
      <category>event</category>
      <category>medipol</category>
    </item>
    <item>
      <title>10-things-you-can-do-today-to-reduce-aws-costs</title>
      <author>Adit Modi</author>
      <pubDate>Sat, 24 Apr 2021 06:58:18 +0000</pubDate>
      <link>https://dev.to/aws-builders/10-things-you-can-do-today-to-reduce-aws-costs-54fk</link>
      <guid>https://dev.to/aws-builders/10-things-you-can-do-today-to-reduce-aws-costs-54fk</guid>
      <description>&lt;p&gt;Users of Amazon Web Services are likely familiar with some AWS cost optimization best practices, but probably not all of them. Consequently, I have compiled a list of the ten best practices to optimize AWS costs, and also suggest a solution that ensures the costs of using Amazon Web Services remain optimized.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0zASrpqM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/no58z5audrsr2tr768go.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0zASrpqM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/no58z5audrsr2tr768go.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;My Background: I am Cloud , DevOps &amp;amp; Big Data Enthusiast | 4x AWS Certified | 3x OCI Certified | 3x Azure Certified .&lt;/em&gt;  &lt;/p&gt;

&lt;p&gt;It’s not unusual to read headlines claiming businesses are overspending in the cloud, that a double-figure percentage of money is being wasted on unused services, or that millions of businesses provision resources with more capacity than they need. The most common “solutions” to the reported issues are rightsizing, scheduling, and purchasing Reserved Instances/Savings Plans for predictable workloads.&lt;/p&gt;

&lt;p&gt;These three “solutions” are probably the AWS cost optimization best practices most AWS users are familiar with, but they’re not necessarily the “best” best practices. Sometimes they don’t save a fraction of the cost that it's claimed they will, while plenty of other, often overlooked, AWS cost optimization best practices can save a lot more. This is an issue we aim to address below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-10-aws-cost-optimization-best-practices"&gt;
  &lt;/a&gt;
  The 10 AWS cost optimization best practices
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#1-rightsizing-ec2-instances"&gt;
  &lt;/a&gt;
  1. Rightsizing EC2 Instances
&lt;/h4&gt;

&lt;p&gt;As I have already mentioned rightsizing, scheduling, and Reserved Instances/Savings Plans, let’s start with these three AWS cost optimization best practices. The purpose of rightsizing is to match instance sizes to their workloads. Unfortunately, it doesn’t quite work like that because of the way in which instances double in capacity for each increase in size.&lt;/p&gt;

&lt;p&gt;If you double the capacity when you go up one size, then you also half the capacity when you go down one size. Therefore, rightsizing is only a worthwhile best practice if there are instances whose peak utilization does not exceed ~45%. It’s still worth analyzing utilization metrics to find opportunities to move workloads to different families (other than “General Purpose”) that better suit their needs.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-scheduling-onoff-times"&gt;
  &lt;/a&gt;
  2. Scheduling on/off times
&lt;/h4&gt;

&lt;p&gt;It’s worth scheduling on/off times for non-production instances such as those used for developing, staging, testing, and QA, as you will save around 65% of running these instances if you apply an “on” schedule of 8.00 a.m. to 8.00 p.m. Monday to Friday. However, it’s possible to save a lot more—especially if development teams work in irregular patterns or at irregular hours. &lt;/p&gt;

&lt;p&gt;You can apply more aggressive schedules by analyzing utilization metrics to determine when the instances are most frequently used, or apply an always stopped schedule which can be interrupted when access to the instances is required. It’s worth pointing out that while instances are scheduled to be off, you’re still being charged for EBS volumes and other components attached to them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-purchasing-reserved-instances-and-savings-plans"&gt;
  &lt;/a&gt;
  3. Purchasing Reserved Instances and Savings Plans
&lt;/h4&gt;

&lt;p&gt;Purchasing Reserved Instances is an easy way to reduce AWS costs. It can also be an easy way to increase AWS costs if you don’t utilize the Reserved Instance as much as you expected to, purchase the wrong type of Reserved Instance, or purchase a “standard” Reserved Instance only to find AWS prices fall over the term of your reservation by more than the reservation “saves”.&lt;/p&gt;

&lt;p&gt;Therefore, rather than suggest that purchasing Reserved Instances is one of the best practices for AWS cost optimization, we’re going to recommend the effective management of Reserved Instances as an AWS cost optimization best practice—effective management consisting of weighing up all the variables before making a purchase and then monitoring utilization throughout the reservation’s lifecycle.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-delete-unattached-ebs-volumes"&gt;
  &lt;/a&gt;
  4. Delete unattached EBS volumes
&lt;/h4&gt;

&lt;p&gt;Returning to Elastic Block Storage (EBS), when you launch an EC2 instance, an EBS volume is attached to the instance to act as its local block storage. When you terminate the EC2 instance, the EBS volume is only deleted if you checked the “delete on termination” box when the instance was launched. If the box wasn’t checked, the EBS volume still exists and is contributing toward the monthly AWS bill.&lt;/p&gt;

&lt;p&gt;Depending on how long your business has been operating in the cloud and the number of instances launched without the delete box being checked, there could be thousands of unattached EBS volumes in your AWS Cloud. It’s certainly one of our AWS cost optimization best practices to consider, even if your business is relatively new to the AWS Cloud.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-delete-obsolete-snapshots"&gt;
  &lt;/a&gt;
  5. Delete obsolete snapshots
&lt;/h4&gt;

&lt;p&gt;Snapshots are an efficient way to back up data on an EBS volume to an S3 storage bucket because they only back up data that’s changed since the last snapshot to prevent duplications in the S3 bucket. Consequently, each snapshot contains all of the information needed to restore your data (from the moment when the snapshot was taken) to a new EBS volume.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VtIoX4hT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djyy5a038x9jkmm0zlfz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VtIoX4hT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djyy5a038x9jkmm0zlfz.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Usually, you’re only going to need the most recent snapshot to restore data if something goes wrong (although it’s advisable to keep snapshots for a couple of weeks depending on the frequency with which they’re taken), and although snapshots don’t cost very much individually, you could save thousands of dollars by deleting those you no longer need.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-release-unattached-elastic-ip-addresses"&gt;
  &lt;/a&gt;
  6. Release unattached Elastic IP addresses
&lt;/h4&gt;

&lt;p&gt;Elastic IP addresses are public IPv4 addresses from Amazon’s pool of IP addresses that are allocated to an instance so it can be reached via the Internet. Businesses are allowed a maximum of five Elastic IP addresses per account because Amazon doesn´t have an unlimited pool of IP addresses. However, they are free of change when attached to running service. &lt;/p&gt;

&lt;p&gt;Exceptions to the free of charge rule occur if you remap an IP address more than 100 times a month, or if you hang on to unattached Elastic IP address once you have terminated the instances to which they were attached. The charge for unattached Elastic IP addresses may only be $0.01 per hour, but if there are fifty AWS accounts each holding back two IP addresses, that amounts to $8,760 of waste per year.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#7-upgrade-instances-to-the-latest-generation"&gt;
  &lt;/a&gt;
  7. Upgrade instances to the latest generation
&lt;/h4&gt;

&lt;p&gt;Due to Amazon Web Services’ wide array of products and services, there are frequent announcements about how products have been upgraded or features introduced to support specific services. With regards to AWS cost optimization best practices, the announcements to look out for are those relating to latest generation instances.&lt;/p&gt;

&lt;p&gt;When Amazon Web Services releases a new generation of instances, they tend to have improved performance and functionality compared to their predecessors. This means you can either upgrade existing instances to the latest generation, or downsize existing instances with borderline utilization metrics in order to benefit from the same level of performance at lower cost.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#8-purchase-reserved-nodes-for-redshift-and-elasticache-services"&gt;
  &lt;/a&gt;
  8. Purchase reserved nodes for Redshift and ElastiCache Services
&lt;/h4&gt;

&lt;p&gt;One recent AWS announcement detailed how the discount program for Amazon Redshift and ElastiCache had changed. Previously, businesses could purchase advanced-payment “Heavy Utilization” discounts, but these have now changed to (almost) mirror Reserved Instance purchases for EC2 and RDS instances.&lt;/p&gt;

&lt;p&gt;Reserved Nodes can be purchased for Redshift, ElasticCache, Redis, and Memcached Services for 1-year or 3-year terms, with the option of paying the full amount upfront or partially upfront, or paying monthly. One important note is that in order to take advantage of reservations on the ElastiCache Service, you must first upgrade Nodes to the latest generation. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#9-terminate-zombie-assets"&gt;
  &lt;/a&gt;
  9. Terminate zombie assets
&lt;/h4&gt;

&lt;p&gt;The term “zombie assets” is most often used to describe any unused asset contributing to the cost of operating in the AWS Cloud—many typical zombie assets have already been mentioned (unattached EBS volumes, obsolete snapshots, etc.). Other assets that fall into this category include components of instances that were activated when an instance failed to launch and unused Elastic Load Balancers.&lt;/p&gt;

&lt;p&gt;A problem businesses often encounter when trying to implement AWS cost optimization best practices is that some unused assets are difficult to find. For example, unattached IP addresses are notoriously difficult to locate in AWS System Manager or AWS Console.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#10-move-infrequentlyaccessed-data-to-lower-cost-tiers"&gt;
  &lt;/a&gt;
  10. Move infrequently-accessed data to lower cost tiers
&lt;/h4&gt;

&lt;p&gt;Amazon Web Services currently offers six tiers of storage at different price points. Determining which storage tier is most suitable for data will depend on factors such as how often data is accessed (as retrieval fees apply to the lower tiers) and how quickly a business would need to retrieve data in the event of a disaster (as it may take hours to retrieve from a lower tier).&lt;/p&gt;

&lt;p&gt;The savings from storing infrequently accessed, non-critical data in a lower cost tier can be substantial. The cost per month of storing up to 50TB of data in a standard S3 storage bucket is $0.023 per GB (US East Region), whereas storing the same data in S3 Glacier Deep Archive storage is $0.00099 per GB per month. The six tiers of storage are:&lt;/p&gt;

&lt;p&gt;S3 Standard&lt;br&gt;
S3 Intelligent Tiering&lt;br&gt;
S3 Infrequent Access&lt;br&gt;
S3 Infrequent Access (Single Zone)&lt;br&gt;
S3 Glacier&lt;br&gt;
S3 Deep Archive Glacier&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#aws-cost-optimization-is-an-ongoing-process"&gt;
  &lt;/a&gt;
  AWS cost optimization is an ongoing process
&lt;/h4&gt;

&lt;p&gt;Applying AWS cost optimization best practices is an ongoing process. Your AWS Cloud needs to be monitored at all times to identify when assets are being under-utilized (or not utilized at all) and when opportunities exist to reduce costs by deleting/terminating/releasing zombie assets. It’s also important to stay on top of Reserved Instances to ensure they’re being fully utilized.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--65DZ9Hvx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytfdy8su5nsiucxmfqdy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--65DZ9Hvx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytfdy8su5nsiucxmfqdy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope this guide helps you understand the things you can do today to reduce aws costs, feel free to connect with me on &lt;a href="https://www.linkedin.com/in/adit-modi-2a4362191/"&gt;LinkedIn.&lt;/a&gt;&lt;br&gt;
You can view my badges &lt;a href="https://www.youracclaim.com/users/adit-modi/badges"&gt;here.&lt;/a&gt;&lt;br&gt;
If you are interested in learning more about AWS then follow me on &lt;a href="https://github.com/AditModi"&gt;github.&lt;/a&gt;&lt;br&gt;
If you liked this content then do clap and share it . Thank You .&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>beginners</category>
      <category>aws</category>
    </item>
    <item>
      <title>Best Google Chrome Extensions for Web Designers And Developers in 2021</title>
      <author>Animesh Dhamku</author>
      <pubDate>Sat, 24 Apr 2021 06:27:59 +0000</pubDate>
      <link>https://dev.to/animeshdhamku/8-best-google-chrome-extensions-for-web-designers-and-developers-in-2021-4a02</link>
      <guid>https://dev.to/animeshdhamku/8-best-google-chrome-extensions-for-web-designers-and-developers-in-2021-4a02</guid>
      <description>&lt;p&gt;As a designer/developer we use google chrome in daily life. That's why I brought the top 10 google extensions to make your work easy, We have a modern browser that is always upgraded by developers. I have brought 10 browser extensions today that will help you in coding.&lt;/p&gt;

&lt;p&gt;Best Google Chrome Extensions for Web Designers and Developers:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whatfont"&gt;
  &lt;/a&gt;
  WhatFont
&lt;/h1&gt;

&lt;p&gt;The easiest thanks to identify fonts on sites&lt;/p&gt;

&lt;p&gt;What is the simplest thanks to determine the fonts utilized in a webpage? Firebug and Webkit Inspector are easy enough to use for developers. However, for others, this could not be necessary. With this extension, you'll inspect web fonts by just hovering on them. it's that straightforward and stylish .&lt;/p&gt;

&lt;p&gt;It also detects the services used for serving the online fonts. Supports Typekit and Google Font API.&lt;/p&gt;

&lt;p&gt;To embrace the new web font era, WhatFont also detects services used for serving the font. Now supports Typekit and Google Font API.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ruul-screen-ruler"&gt;
  &lt;/a&gt;
  ruul. Screen ruler
&lt;/h1&gt;

&lt;p&gt;A fantastically simple on-screen ruler for lining up and measuring type, line height, strokes and almost anything on the online .&lt;/p&gt;

&lt;p&gt;Get pixel perfect with: horizontal and vertical draggable rulers; pixel, picas and sort measurements, line height guides and stroke widths. Move ruul with arrow keys, one pixel at a time, and use multiple ruul together. Ruul have 4 different coloured ruul, steel and wooden ruul included.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#screen-capture-by-google"&gt;
  &lt;/a&gt;
  Screen Capture By Google
&lt;/h1&gt;

&lt;p&gt;Capture visible content of a tab, a neighborhood of an internet page, or the entire page as a PNG image. Support horizontal and vertical scroll…&lt;/p&gt;

&lt;p&gt;It's easy to use this extension to capture visible content of a tab, a neighborhood of an internet page, or the entire page as a PNG image.&lt;/p&gt;

&lt;p&gt;You can also edit your captured image before saving it as a PNG image. Highlighting, redacting and adding text are supported.&lt;/p&gt;

&lt;p&gt;What set this extension apart are: Super fast when capturing page image, esp. for giant pages; Support horizontal scroll for giant pages that don't slot in one tab screen horizontally; Intelligently detect floating objects on a page and avoid repeating capture of an equivalent floating objects if whole page capture requires scrolling; Works on Windows, Linux and Mac&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#image-downloader"&gt;
  &lt;/a&gt;
  Image Downloader
&lt;/h1&gt;

&lt;p&gt;See all images shown or linked on an internet page and download them.&lt;/p&gt;

&lt;p&gt;If you would like to bulk download images from an internet page, with this extension you can: See images that the page contains and links to, Filter or sort them by URL; also supports wildcards and regular expressions, Optionally show only images from links, Select images for download by either using the checkboxes or directly clicking on the image, Dedicated buttons to download or open in new tab individual images, Customize display width, border size, style and color, Hide filters, buttons and notifications you do not need&lt;/p&gt;

&lt;p&gt;When you press the "Download" button, all selected images are saved to the default download directory of Chrome. If you do not have one, you'll need to manually choose the save location for every image.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#evernote-web-clipper"&gt;
  &lt;/a&gt;
  Evernote Web Clipper
&lt;/h1&gt;

&lt;p&gt;Save all the content you discover interesting round the web in your account.&lt;/p&gt;

&lt;p&gt;From interests to research, save anything you see online—including text, links and images—into your Evernote account with one click. With one click, clip part or all of any webpage, including text, images, and links. Collect everything that inspires you online. Have it forever, albeit the first goes away.&lt;/p&gt;

&lt;p&gt;RescueTime for Google Chrome™&lt;/p&gt;

&lt;p&gt;RescueTime may be a personal-analytics service that helps you understand how you spend some time .&lt;/p&gt;

&lt;p&gt;RescueTime may be a personal-analytics service that helps you understand how you spend time on your computer, smartphone and tablet. there's no manual data-entry required. The web-application works hand-in-hand with the installable client available for OS X, Windows, Linux, Android devices, and ChromeOS.&lt;/p&gt;

&lt;p&gt;Pinterest for Google Chrome&lt;/p&gt;

&lt;p&gt;Discover, collect, and share inspiration&lt;/p&gt;

&lt;p&gt;Pinterest may be a tool to seek out your inspiration and share it with others. Use it to gather belongings you love, organize and plan important projects, and more.&lt;/p&gt;

&lt;p&gt;The official Pinterest extension for Google Chrome adds a button to your browser that allows you to pin from any website, quickly and simply&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;Get Some From HERE&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>php</category>
      <category>programming</category>
      <category>devops</category>
    </item>
    <item>
      <title>What are your favourite learning resources?</title>
      <author>Suraj Vishwakarma</author>
      <pubDate>Sat, 24 Apr 2021 06:24:26 +0000</pubDate>
      <link>https://dev.to/basecampxd/what-are-your-favourite-learning-resources-3mgk</link>
      <guid>https://dev.to/basecampxd/what-are-your-favourite-learning-resources-3mgk</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Every day we come across a lot of new &amp;amp; amazing things, some technical and some not. And if we find something which matches our vibe then we dive deep into it. Now here the real problem starts, if something is very popular then definitely there are a lot of resources out there to learn it but out of all those resources, which ones worth your precious time?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--11xy3zUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rtdj2p9yhu7gv3ujmok.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--11xy3zUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rtdj2p9yhu7gv3ujmok.gif" alt="2Confused"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we created this blog post to help you share all your favourite learning resources. It could be anything, a platform, some software, an app, a website or any of your favourite creators out there.&lt;/p&gt;

&lt;p&gt;Let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-way"&gt;
  &lt;/a&gt;
  My Way
&lt;/h2&gt;

&lt;p&gt;This is the specific sequence, I usually like to follow to learn new stuff.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I read blogs on the topic - An introduction, its uses, problems it overcomes, pros &amp;amp; cons. I usually do a google search to find these blogs 📝.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the topic seems interesting, then I have a look on &lt;a href="https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ"&gt;freeCodeCamp&lt;/a&gt;'s YouTube Channel to see if there's a course available on the topic I am interested in 👨‍💻.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If freeCodeCamp doesn't have a course on it or it seems to be outdated then I look for another good course on YouTube▶️.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.udemy.com/"&gt;Udemy&lt;/a&gt; is also a great place to find some really cool courses🏫.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;That's pretty much how I like to find learning resources for myself 📚.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#discussion"&gt;
  &lt;/a&gt;
  Discussion
&lt;/h1&gt;

&lt;p&gt;Let's start the discussion on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What are your favourite resources to learn something new?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do you utilize those resources to make the most of them?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>watercooler</category>
      <category>discuss</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Best Practices for Writing Super Readable Code</title>
      <author>Animesh Dhamku</author>
      <pubDate>Sat, 24 Apr 2021 06:19:27 +0000</pubDate>
      <link>https://dev.to/animeshdhamku/top-15-best-practices-for-writing-super-readable-code-31aa</link>
      <guid>https://dev.to/animeshdhamku/top-15-best-practices-for-writing-super-readable-code-31aa</guid>
      <description>&lt;h1&gt;
  &lt;a href="#1-commenting-amp-documentation"&gt;
  &lt;/a&gt;
  1. Commenting &amp;amp; Documentation
&lt;/h1&gt;

&lt;p&gt;IDE's (Integrated Development Environment) have come a long way in the past few years. This made commenting your code more useful than ever. Following certain standards in your comments allows IDE's and other tools to utilize them in different ways.  &lt;/p&gt;

&lt;p&gt;The comments I added at the function definition can be previewed whenever I use that function, even from other files.Here is another example where I call a function from a third party library : In these particular examples, the type of commenting (or documentation) used is based on PHPDoc, and the IDE is Aptana.&lt;/p&gt;

&lt;p&gt;2 Million+ WordPress Themes &amp;amp; Plugins, Web &amp;amp; Email Templates, UI Kits and More&lt;/p&gt;

&lt;p&gt;Download thousands of WordPress themes and plugins, web templates, UI elements, and much more with an Envato Elements membership. Get unlimited access to a growing library to millions of creative and code assets.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-consistent-indentation"&gt;
  &lt;/a&gt;
  2. Consistent Indentation
&lt;/h1&gt;

&lt;p&gt;I assume you already know that you should indent your code. However, it's also worth noting that it is a good idea to keep your indentation style consistent.&lt;/p&gt;

&lt;p&gt;There are more than one way of indenting code.&lt;/p&gt;

&lt;p&gt;Style 1:&lt;/p&gt;

&lt;p&gt;function foo()&lt;br&gt;
{&lt;br&gt;
    if ($maybe)&lt;br&gt;
    {&lt;br&gt;
        do_it_now();&lt;br&gt;
        again();&lt;br&gt;
    }&lt;br&gt;
    else&lt;br&gt;
    {&lt;br&gt;
        abort_mission();&lt;br&gt;
    }&lt;br&gt;
    finalize();&lt;br&gt;
}&lt;br&gt;
Style 2:&lt;/p&gt;

&lt;p&gt;function foo() {&lt;br&gt;
    if ($maybe) {&lt;br&gt;
        do_it_now();&lt;br&gt;
        again();&lt;br&gt;
    } else {&lt;br&gt;
        abort_mission();&lt;br&gt;
    }&lt;br&gt;
    finalize();&lt;br&gt;
}&lt;br&gt;
Style 3:&lt;/p&gt;

&lt;p&gt;function foo()&lt;br&gt;
{   if ($maybe)&lt;br&gt;
    {   do_it_now();&lt;br&gt;
        again();&lt;br&gt;
    }&lt;br&gt;
    else&lt;br&gt;
    {   abort_mission();&lt;br&gt;
    }&lt;br&gt;
    finalize();&lt;br&gt;
}&lt;br&gt;
I used to code in style #2 but recently switched to #1. But that is only a matter of preference. There is no "best" style that everyone should be following. Actually, the best style, is a consistent style. If you are part of a team or if you are contributing code to a project, you should follow the existing style that is being used in that project.&lt;/p&gt;

&lt;p&gt;The indentation styles are not always completely distinct from one another. Sometimes, they mix different rules. For example, in PEAR Coding Standards, the opening bracket "{" goes on the same line as control structures, but they go to the next line after function definitions.&lt;/p&gt;

&lt;p&gt;PEAR Style:&lt;/p&gt;

&lt;p&gt;function foo()&lt;br&gt;
{                     // placed on the next line&lt;br&gt;
    if ($maybe) {     // placed on the same line&lt;br&gt;
        do_it_now();&lt;br&gt;
        again();&lt;br&gt;
    } else {&lt;br&gt;
        abort_mission();&lt;br&gt;
    }&lt;br&gt;
    finalize();&lt;br&gt;
}&lt;br&gt;
Also note that they are using four spaces instead of tabs for indentations. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-avoid-obvious-comments"&gt;
  &lt;/a&gt;
  3. Avoid Obvious Comments
&lt;/h1&gt;

&lt;p&gt;Commenting your code is fantastic; however, it can be overdone or just be plain redundant. Take this example:&lt;/p&gt;

&lt;p&gt;// get the country code&lt;br&gt;
$country_code = get_country_code($_SERVER['REMOTE_ADDR']);&lt;/p&gt;

&lt;p&gt;// if country code is US&lt;br&gt;
if ($country_code == 'US') {&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// display the form input for state
echo form_input_state();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;When the text is that obvious, it's really not productive to repeat it within comments.&lt;/p&gt;

&lt;p&gt;If you must comment on that code, you can simply combine it to a single line instead:&lt;/p&gt;

&lt;p&gt;// display state selection for US users&lt;br&gt;
$country_code = get_country_code($_SERVER['REMOTE_ADDR']);&lt;br&gt;
if ($country_code == 'US') {&lt;br&gt;
    echo form_input_state();&lt;br&gt;
}&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-code-grouping"&gt;
  &lt;/a&gt;
  4. Code Grouping
&lt;/h1&gt;

&lt;p&gt;More often than not, certain tasks require a few lines of code. It is a good idea to keep these tasks within separate blocks of code, with some spaces between them.&lt;/p&gt;

&lt;p&gt;Here is a simplified example:&lt;/p&gt;

&lt;p&gt;// get list of forums&lt;br&gt;
$forums = array();&lt;br&gt;
$r = mysql_query("SELECT id, name, description FROM forums");&lt;br&gt;
while ($d = mysql_fetch_assoc($r)) {&lt;br&gt;
    $forums []= $d;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;// load the templates&lt;br&gt;
load_template('header');&lt;br&gt;
load_template('forum_list',$forums);&lt;br&gt;
load_template('footer');&lt;/p&gt;

&lt;p&gt;Adding a comment at the beginning of each block of code also emphasizes the visual separation.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-consistent-naming-scheme"&gt;
  &lt;/a&gt;
  5. Consistent Naming Scheme
&lt;/h1&gt;

&lt;p&gt;PHP itself is sometimes guilty of not following consistent naming schemes:&lt;/p&gt;

&lt;p&gt;strpos() vs. str_split()&lt;br&gt;
imagetypes() vs. image_type_to_extension()&lt;br&gt;
First of all, the names should have word boundaries. There are two popular options:&lt;br&gt;
camelCase: First letter of each word is capitalized, except the first word.&lt;br&gt;
underscores: Underscores between words, like: mysql_real_escape_string().&lt;br&gt;
Having different options creates a situation similar to the indent styles, as I mentioned earlier. If an existing project follows a certain convention, you should go with that. Also, some language platforms tend to use a certain naming scheme. For instance, in Java, most code uses camelCase names, while in PHP, the majority of uses underscores.&lt;/p&gt;

&lt;p&gt;These can also be mixed. Some developers prefer to use underscores for procedural functions, and class names, but use camelCase for class method names:&lt;/p&gt;

&lt;p&gt;class Foo_Bar {&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function someDummyMethod() {

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;function procedural_function_name() {&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;So again, there is no obvious "best" style. Just being consistent.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-dry-principle"&gt;
  &lt;/a&gt;
  6. DRY Principle
&lt;/h1&gt;

&lt;p&gt;DRY stands for Don't Repeat Yourself. Also known as DIE: Duplication is Evil.&lt;/p&gt;

&lt;p&gt;The principle states:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"Every piece of knowledge must have a single, unambiguous, authoritative representation within a system."
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The purpose for most applications (or computers in general) is to automate repetitive tasks. This principle should be maintained in all code, even web applications. The same piece of code should not be repeated over and over again.&lt;/p&gt;

&lt;p&gt;For example, most web applications consist of many pages. It's highly likely that these pages will contain common elements. Headers and footers are usually best candidates for this. It's not a good idea to keep copy pasting these headers and footers into every page. Here is Jeffrey Way explaining how to create templates in CodeIgniter.&lt;/p&gt;

&lt;p&gt;$this-&amp;gt;load-&amp;gt;view('includes/header');&lt;/p&gt;

&lt;p&gt;$this-&amp;gt;load-&amp;gt;view($main_content);&lt;/p&gt;

&lt;p&gt;$this-&amp;gt;load-&amp;gt;view('includes/footer');&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-avoid-deep-nesting"&gt;
  &lt;/a&gt;
  7. Avoid Deep Nesting
&lt;/h1&gt;

&lt;p&gt;Too many levels of nesting can make code harder to read and follow.&lt;/p&gt;

&lt;p&gt;function do_stuff() {&lt;/p&gt;

&lt;p&gt;// ...&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (is_writable($folder)) {

    if ($fp = fopen($file_path,'w')) {

        if ($stuff = get_some_stuff()) {

            if (fwrite($fp,$stuff)) {

                // ...

            } else {
                return false;
            }
        } else {
            return false;
        }
    } else {
        return false;
    }
} else {
    return false;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;For the sake of readability, it is usually possible to make changes to your code to reduce the level of nesting:&lt;/p&gt;

&lt;p&gt;function do_stuff() {&lt;/p&gt;

&lt;p&gt;// ...&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (!is_writable($folder)) {
    return false;
}

if (!$fp = fopen($file_path,'w')) {
    return false;
}

if (!$stuff = get_some_stuff()) {
    return false;
}

if (fwrite($fp,$stuff)) {
    // ...
} else {
    return false;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-limit-line-length"&gt;
  &lt;/a&gt;
  8. Limit Line Length
&lt;/h1&gt;

&lt;p&gt;Our eyes are more comfortable when reading tall and narrow columns of text. This is precisely the reason why newspaper articles look like this:&lt;/p&gt;

&lt;p&gt;It is a good practice to avoid writing horizontally long lines of code.&lt;/p&gt;

&lt;p&gt;// bad&lt;br&gt;
$my_email-&amp;gt;set_from('&lt;a href="mailto:test@email.com"&gt;test@email.com&lt;/a&gt;')-&amp;gt;add_to('&lt;a href="mailto:programming@gmail.com"&gt;programming@gmail.com&lt;/a&gt;')-&amp;gt;set_subject('Methods Chained')-&amp;gt;set_body('Some long message')-&amp;gt;send();&lt;/p&gt;

&lt;p&gt;// good&lt;br&gt;
$my_email&lt;br&gt;
    -&amp;gt;set_from('&lt;a href="mailto:test@email.com"&gt;test@email.com&lt;/a&gt;')&lt;br&gt;
    -&amp;gt;add_to('&lt;a href="mailto:programming@gmail.com"&gt;programming@gmail.com&lt;/a&gt;')&lt;br&gt;
    -&amp;gt;set_subject('Methods Chained')&lt;br&gt;
    -&amp;gt;set_body('Some long message')&lt;br&gt;
    -&amp;gt;send();&lt;/p&gt;

&lt;p&gt;// bad&lt;br&gt;
$query = "SELECT id, username, first_name, last_name, status FROM users LEFT JOIN user_posts USING(users.id, user_posts.user_id) WHERE post_id = '123'";&lt;/p&gt;

&lt;p&gt;// good&lt;br&gt;
$query = "SELECT id, username, first_name, last_name, status&lt;br&gt;
    FROM users&lt;br&gt;
    LEFT JOIN user_posts USING(users.id, user_posts.user_id)&lt;br&gt;
    WHERE post_id = '123'";&lt;/p&gt;

&lt;p&gt;Also, if anyone intends to read the code from a terminal window, such as Vim users, it is a good idea to to limit the line length to around 80 characters.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;File and Folder Organization
Technically, you could write an entire application code within a single file. But that would prove to be a nightmare to read and maintain.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;During my first programming projects, I knew about the idea of creating "include files." However, I was not yet even remotely organized. I created an "inc" folder, with two files in it: db.php and functions.php. As the applications grew, the functions file also became huge and unmaintainable.&lt;/p&gt;

&lt;p&gt;One of the best approaches is to either use a framework, or imitate their folder structure. Here is what CodeIgniter looks like:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#9-consistent-temporary-names"&gt;
  &lt;/a&gt;
  9. Consistent Temporary Names
&lt;/h1&gt;

&lt;p&gt;Normally, the variables should be descriptive and contain one or more words. But, this doesn't necessarily apply to temporary variables. They can be as short as a single character.&lt;/p&gt;

&lt;p&gt;It is a good practice to use consistent names for your temporary variables that have the same kind of role. Here are a few examples that I tend use in my code:&lt;/p&gt;

&lt;p&gt;// $i for loop counters&lt;br&gt;
for ($i = 0; $i &amp;lt; 100; $i++) {&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// $j for the nested loop counters
for ($j = 0; $j &amp;lt; 100; $j++) {

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;// $ret for return variables&lt;br&gt;
function foo() {&lt;br&gt;
    $ret['bar'] = get_bar();&lt;br&gt;
    $ret['stuff'] = get_stuff();&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return $ret;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;// $k and $v in foreach&lt;br&gt;
foreach ($some_array as $k =&amp;gt; $v) {&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;// $q, $r and $d for mysql&lt;br&gt;
$q = "SELECT * FROM table";&lt;br&gt;
$r = mysql_query($q);&lt;br&gt;
while ($d = mysql_fetch_assocr($r)) {&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;// $fp for file pointers&lt;br&gt;
$fp = fopen('file.txt','w');&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/04/top-15-best-practices-for-writing-super.html"&gt;Get some more from here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>php</category>
      <category>design</category>
    </item>
    <item>
      <title>What are Pointers in C/C++?</title>
      <author>Tomislav Kraljic</author>
      <pubDate>Sat, 24 Apr 2021 06:08:55 +0000</pubDate>
      <link>https://dev.to/tomislavkraljic/what-are-pointers-in-c-c-i56</link>
      <guid>https://dev.to/tomislavkraljic/what-are-pointers-in-c-c-i56</guid>
      <description>&lt;p&gt;To understand pointers, we need a quick overview on how a computer handles/stores data.&lt;/p&gt;

&lt;h3&gt;RAM&lt;/h3&gt; 

&lt;p&gt;RAM (Random Access Memory) is a component in your computer that stores data. &lt;/p&gt;

&lt;p&gt;Here is what it looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sv4n762x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qk4dbxfdm9vcar90hhc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sv4n762x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qk4dbxfdm9vcar90hhc.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RAM allows for direct-access to memory cells.&lt;/li&gt;
&lt;li&gt;These memory cells store data in a binary-format&lt;/li&gt;
&lt;li&gt;Each memory cell has an address where the data can be accessed.&lt;/li&gt;
&lt;li&gt;A pointer just "points" to that specific memory address where that data is stored.
&lt;/li&gt;
&lt;/ul&gt; 




&lt;h3&gt;Street Address Analogy&lt;/h3&gt;

&lt;p&gt;Now, that you understand what RAM is, how data is stored and accessed, this analogy will make more sense. &lt;/p&gt;

&lt;p&gt;Think of the RAM in your machine as a long street full of houses. &lt;/p&gt;

&lt;p&gt;Each house is different, unique and has its own address. &lt;/p&gt;

&lt;p&gt;Now, let's say you are expecting mail. Well, how does the mailman know where to bring your mail?&lt;/p&gt;

&lt;p&gt;Well, every house has a mailbox with a specific address on it with your house number. This specific house address is the "pointer". It says "Hey!, I am right here!."&lt;/p&gt;




&lt;h3&gt;So, What is a pointer? &lt;/h3&gt;

&lt;p&gt;In short, pointers are special data types just that store the memory address rather than a value. &lt;/p&gt;

&lt;p&gt;To create a pointer variable, all we do is a put an * before the variable name. Simple as that!&lt;/p&gt;




&lt;h3&gt;Variables&lt;/h3&gt;

&lt;p&gt;Why do we declare variables in programming? This may sound like a silly question on the surface but there is more to it!&lt;/p&gt;

&lt;p&gt;The memory address of data is a hexadecimal value. &lt;/p&gt;

&lt;p&gt;It would be tedious, difficult to read and annoying if we had to use the hexadecimal value every time. &lt;/p&gt;

&lt;p&gt;This is where variables come in. Instead of "0x9FFF0", we could give a meaningful name. If we named "0x9FFF0" to age, now it is easier to work with. Under the hood, it is still "0x9FFF0" and the computer understands it because it is still a valid address but for human readability and productivity, we just set it to a specific and meaningful name to work with. &lt;/p&gt;




&lt;h3&gt;Code Example&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ykqEzGnw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ktyh3upi6lgoco2gtujv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ykqEzGnw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ktyh3upi6lgoco2gtujv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DqdMPDSf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjtojbqhxkvd72pgy2em.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DqdMPDSf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjtojbqhxkvd72pgy2em.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>programming</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>How to clone object except for one or some keys</title>
      <author>Heru Hartanto</author>
      <pubDate>Sat, 24 Apr 2021 06:06:55 +0000</pubDate>
      <link>https://dev.to/elukuro/how-to-clone-object-except-for-one-or-some-keys-623</link>
      <guid>https://dev.to/elukuro/how-to-clone-object-except-for-one-or-some-keys-623</guid>
      <description>&lt;p&gt;Let say you have an object that you want to use it as payload to make a request&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;8fafasdf8afadsf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redirectUrl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;but you want to exclude &lt;code&gt;redirectUrl&lt;/code&gt; from your object before make request, and you don't want to delete this key, hmmm it is easy doesn't it, just destructuring the object and rearrange it to a new variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newPayload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;but wait, what if your object is actually updated and now look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;8fafasdf8afadsf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redirectUrl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstname&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lastname&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;brown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;birthdate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;01/12/2000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gender&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MALE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;address&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;planet earth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;seems like destructuring and rearrange is kind of hardwork to do.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#put-rest-to-the-last-technique-to-the-rescue"&gt;
  &lt;/a&gt;
  "Put rest to the last" technique to the rescue
&lt;/h4&gt;

&lt;p&gt;simply put keys that you don't want to use and put the rest of it in the last&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;8fafasdf8afadsf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redirectUrl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstname&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lastname&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;brown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;birthdate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;01/12/2000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gender&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MALE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;address&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;planet earth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;redirectUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;newPayload&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;
&lt;span class="nx"&gt;newPayload&lt;/span&gt;
&lt;span class="cm"&gt;/*
    {
        'username': 'Mark',
        'Hash' :'8fafasdf8afadsf',
        'firstname':'mark',
        'lastname':'brown',
        'birthdate':'01/12/2000',
        'gender':'MALE',
        'address':'planet earth'
    }
*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to add another key to exclude just simply put keys name after &lt;code&gt;redirectUrl&lt;/code&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Laravel One to Many Eloquent Relationship Tutorial</title>
      <author>Dharmik Tank</author>
      <pubDate>Sat, 24 Apr 2021 06:03:58 +0000</pubDate>
      <link>https://dev.to/dharmik_tank/laravel-one-to-many-eloquent-relationship-tutorial-4i0j</link>
      <guid>https://dev.to/dharmik_tank/laravel-one-to-many-eloquent-relationship-tutorial-4i0j</guid>
      <description>&lt;p&gt;In this tutorial, I Will explain you how to create laravel one to Many eloquent relationship. We will create one to many relationship in laravel. We will learn how we can create migration with foreign key schema, retrieve records, insert new records, update records etc. I will show you laravel hasMany relationship example.&lt;br&gt;
more..&lt;br&gt;
&lt;a href="https://itwebtuts.blogspot.com/2021/04/laravel-one-to-many-eloquent.html"&gt;https://itwebtuts.blogspot.com/2021/04/laravel-one-to-many-eloquent.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>php</category>
    </item>
    <item>
      <title>Free APIs That Nobody Is Talking About</title>
      <author>Animesh Dhamku</author>
      <pubDate>Sat, 24 Apr 2021 05:53:01 +0000</pubDate>
      <link>https://dev.to/animeshdhamku/free-apis-that-nobody-is-talking-about-5777</link>
      <guid>https://dev.to/animeshdhamku/free-apis-that-nobody-is-talking-about-5777</guid>
      <description>&lt;p&gt;Nothing excites me more than finding an out of the ordinary API.Many times we just want to focus on the frontend but also need interesting, dynamic data to display.This is where public APIs come into play. API is an acronym for Application Programming Interface.The core benefit of using it is that it allows one program to interact with other programs.Using public APIs allows you to focus on the frontend and things that matter without worrying so much about the database and the backend.Below are 7 less-talked about public and free APIs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-evil-insult-generator"&gt;
  &lt;/a&gt;
  1. Evil Insult Generator
&lt;/h1&gt;

&lt;p&gt;How many times have you tried to insult your best friend? Now you have got a helping hand!&lt;/p&gt;

&lt;p&gt;As the API name suggests, the goal is to offer some of the evilest insults.&lt;/p&gt;

&lt;p&gt;You can create an app centered around this API or combine this API with other excellent APIs provided below like implementing the generated insults in meme templates.&lt;/p&gt;

&lt;p&gt;The API is extremely simple to use. You just need to visit a URL and you get the desired JSON output without even signing up for a key.&lt;/p&gt;

&lt;p&gt;Sample output of the API is provided below:&lt;/p&gt;

&lt;p&gt;{&lt;br&gt;
"number":"117",&lt;br&gt;
"language":"en",&lt;br&gt;
"insult":"Some cause happiness wherever they go; others, whenever they go.",&lt;br&gt;
"created":"2020-11-22 23:00:15",&lt;br&gt;
"shown":"45712",&lt;br&gt;
"createdby":"",&lt;br&gt;
"active":"1",&lt;br&gt;
"comment":"http:\/\/&lt;a href="http://www.mirror.co.uk%5C/news%5C/weird-news%5C/worlds-20-most-bizarre-insults-7171396"&gt;www.mirror.co.uk\/news\/weird-news\/worlds-20-most-bizarre-insults-7171396&lt;/a&gt;"&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;You get the other properties as well such as the time it was created, the language, any comment as well as the views. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-movies-and-tv-api"&gt;
  &lt;/a&gt;
  2. Movies and TV API
&lt;/h1&gt;

&lt;p&gt;TMDb is a famous API, but do you know there are other API that provides insights from specific shows and movies?&lt;/p&gt;

&lt;p&gt;Below are some of the APIs you can use to develop apps featuring your favorite show:&lt;br&gt;
Breaking Bad API&lt;br&gt;
API of Ice And Fire &lt;br&gt;
Harry Potter API&lt;br&gt;
YouTube API (for embedding YouTube functionalities)&lt;br&gt;
The Lord of the Rings API&lt;br&gt;&lt;br&gt;
Like the API above, you can get started with some of the APIs without even signing up for a key.&lt;/p&gt;

&lt;p&gt;Not only this, using non-copyright images, you can truly create a great fan app for your beloved shows.&lt;/p&gt;

&lt;p&gt;Below is a sample output from the Breaking Bad API which you can get here.&lt;/p&gt;

&lt;p&gt;It doesn’t require a key however has a rate limit of 10,000 requests per day.&lt;/p&gt;

&lt;p&gt;{&lt;br&gt;
   [&lt;br&gt;
      {&lt;br&gt;
         "quote_id":1,&lt;br&gt;
         "quote":"I am not in danger, Skyler. I am the danger!",&lt;br&gt;
         "author":"Walter White",&lt;br&gt;
         "series":"Breaking Bad"&lt;br&gt;
      },&lt;br&gt;
      {&lt;br&gt;
         "quote_id":2,&lt;br&gt;
         "quote":"Stay out of my territory.",&lt;br&gt;
         "author":"Walter White",&lt;br&gt;
         "series":"Breaking Bad"&lt;br&gt;
      },&lt;br&gt;
      {&lt;br&gt;
         "quote_id":3,&lt;br&gt;
         "quote":"IFT",&lt;br&gt;
         "author":"Skyler White",&lt;br&gt;
         "series":"Breaking Bad"&lt;br&gt;
      }&lt;br&gt;
      .....&lt;br&gt;
   ]&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;It returns a JSON containing an array of objects with quotes, the author of the quotes, and an ID.&lt;/p&gt;

&lt;p&gt;You can mix these dedicated APIs with YouTube API to create an ultimate app for the fans of these shows.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-mapbox"&gt;
  &lt;/a&gt;
  3. Mapbox
&lt;/h1&gt;

&lt;p&gt;Mapbox provides precise location information and fully-fledged tools to developers.&lt;/p&gt;

&lt;p&gt;You get instant access to dynamic, live-updating maps which you can even further customize!&lt;/p&gt;

&lt;p&gt;If you have a project geared towards location and maps, this is a must-know API.&lt;/p&gt;

&lt;p&gt;However, it is worth mentioning that you have to sign up for free to get a unique access token.&lt;/p&gt;

&lt;p&gt;Using this token you can use the amazing services offered by this API.&lt;/p&gt;

&lt;p&gt;Not only this, you can use Mapbox with libraries such as the Leaflet.js library and create beautiful, mobile-friendly maps.&lt;/p&gt;

&lt;p&gt;I have discussed this and much more in my recent article covering the basics of Mapbox and Leaflet.js.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-nasa-api"&gt;
  &lt;/a&gt;
  4. NASA API
&lt;/h1&gt;

&lt;p&gt;NASA provides a fabulous updated database of space-related information.&lt;/p&gt;

&lt;p&gt;Using this API, one can create mesmerizing and educational apps and websites.&lt;/p&gt;

&lt;p&gt;You get access to various different kinds of data from the Astronomy Picture of the Day all the way to the pictures captured by the Mars Rover.&lt;/p&gt;

&lt;p&gt;You can browse the entire list here.&lt;/p&gt;

&lt;p&gt;You can also retrieve NASA’s patents, software, and technology spinoff descriptions which you can use to build a patent portfolio.&lt;/p&gt;

&lt;p&gt;This API is really diverse and offers a wide variety of data. You can even access the NASA Image and Video library using it.&lt;/p&gt;

&lt;p&gt;Below is a sample query of the pictures captured by Curiosity on Mars.&lt;/p&gt;

&lt;p&gt;{&lt;br&gt;
   "photos":[&lt;br&gt;
      {&lt;br&gt;
         "id":102693,&lt;br&gt;
         "sol":1000,&lt;br&gt;
         "camera":{&lt;br&gt;
            "id":20,&lt;br&gt;
            "name":"FHAZ",&lt;br&gt;
            "rover_id":5,&lt;br&gt;
            "full_name":"Front Hazard Avoidance Camera"&lt;br&gt;
         },&lt;br&gt;
         "img_src":"&lt;a href="http://mars.jpl.nasa.gov/msl-raw-images/proj/msl/redops/ods/surface/sol/01000/opgs/edr/fcam/FLB_486265257EDR_F0481570FHAZ00323M_.JPG"&gt;http://mars.jpl.nasa.gov/msl-raw-images/proj/msl/redops/ods/surface/sol/01000/opgs/edr/fcam/FLB_486265257EDR_F0481570FHAZ00323M_.JPG&lt;/a&gt;",&lt;br&gt;
         "earth_date":"2015-05-30",&lt;br&gt;
         "rover":{&lt;br&gt;
            "id":5,&lt;br&gt;
            "name":"Curiosity",&lt;br&gt;
            "landing_date":"2012-08-06",&lt;br&gt;
            "launch_date":"2011-11-26",&lt;br&gt;
            "status":"active"&lt;br&gt;
         }&lt;br&gt;
      },&lt;br&gt;
     .....&lt;br&gt;
   ]&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/04/7-free-apis-that-nobody-is-talking-about.html"&gt;Get some more APIs&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>php</category>
      <category>design</category>
    </item>
  </channel>
</rss>
