<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Using Docker Run inside of GitHub actions</title>
      <author>Andrew Schmelyun</author>
      <pubDate>Tue, 11 Jan 2022 03:03:18 +0000</pubDate>
      <link>https://dev.to/aschmelyun/using-docker-run-inside-of-github-actions-4gdk</link>
      <guid>https://dev.to/aschmelyun/using-docker-run-inside-of-github-actions-4gdk</guid>
      <description>&lt;p&gt;Recently I decided to take on the task of automating my site's build and deployment process through &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;. I'm using my own static site generator &lt;a href="https://github.com/aschmelyun/cleaver"&gt;Cleaver&lt;/a&gt; to handle that, which requires both Node + PHP to be installed in order to run the asset compilation and build process. Now, GitHub Actions &lt;em&gt;supports&lt;/em&gt; both of those runtimes out of the box, but I had just created a perfectly good &lt;a href="https://github.com/aschmelyun/cleaver-docker"&gt;Docker image&lt;/a&gt; for using Cleaver, and instead wanted to use that.&lt;/p&gt;

&lt;p&gt;Ultimately it was a mixture of just wanting the fine-grain control that a single Docker image provides, and because, well &lt;strong&gt;I just wanted to see how to do it!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-didnt-work"&gt;
  &lt;/a&gt;
  What Didn't Work
&lt;/h2&gt;

&lt;p&gt;So, you're able to actually use Docker images in GitHub actions, but by default you're only able to use them one of two ways.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;compile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Compile site assets&lt;/span&gt;
        &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
        &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aschmelyun/cleaver:latest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This first option is as the base for an entire job. Normally a lot of GitHub actions have you start off with an Ubuntu distro as the base for the VM (there are other OS's you can choose from as well) and then add in your container image. But the entire rest of the job uses &lt;em&gt;whatever container you specify&lt;/em&gt; as the starting point for &lt;strong&gt;all&lt;/strong&gt; of the rest of the job's steps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;compile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Compile site assets&lt;/span&gt;
        &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
        &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run the build process with Docker&lt;/span&gt;
            &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker://aschmelyun/cleaver&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This second option is as an action in the steps for a job. Instead of something like &lt;code&gt;uses: actions/checkout@v2&lt;/code&gt;, you can instead specify a Docker image from the hub to run in its place. The problem with this one though is that you have to generate a Docker image that runs &lt;strong&gt;specifically like a GitHub action expects&lt;/strong&gt;. That means things like avoiding &lt;code&gt;WORKDIR&lt;/code&gt; and &lt;code&gt;ENTRYPOINT&lt;/code&gt; attributes, as they're handled internally by the GitHub Actions worker.&lt;/p&gt;

&lt;p&gt;What I wanted was simply to be able to use &lt;code&gt;docker run ...&lt;/code&gt; under a &lt;em&gt;single&lt;/em&gt; action in a job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-worked"&gt;
  &lt;/a&gt;
  What Worked
&lt;/h2&gt;

&lt;p&gt;I ended up finding an action available on GitHub by &lt;strong&gt;addnab&lt;/strong&gt; called &lt;a href="https://github.com/addnab/docker-run-action"&gt;docker-run-action&lt;/a&gt; that works exactly how I wanted. You specify an image, any options, and a list of commands to run with it, and only during that step of the build process is it used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;compile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Compile site assets&lt;/span&gt;
        &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
        &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check out the repo&lt;/span&gt;
            &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run the build process with Docker&lt;/span&gt;
            &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;addnab/docker-run-action@v3&lt;/span&gt;
            &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aschmelyun/cleaver:latest&lt;/span&gt;
                &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;-v ${{ github.workspace }}:/var/www&lt;/span&gt;
                &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
                    &lt;span class="s"&gt;composer install&lt;/span&gt;
                    &lt;span class="s"&gt;npm install&lt;/span&gt;
                    &lt;span class="s"&gt;npm run production&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me break down what each of these lines does:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aschmelyun/cleaver:latest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This one is pretty obvious, it specifies the image that's pulled and used in the docker run command. I'm using mine for Cleaver that's on the public &lt;a href="https://hub.docker.com/r/aschmelyun/cleaver"&gt;Docker Hub&lt;/a&gt;, but you can also use a privately-owned image as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;-v ${{ github.workspace }}:/var/www&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here I'm creating a bind mount from the current workspace to &lt;code&gt;/var/www&lt;/code&gt;, which is the working directory that my Docker image expects. &lt;code&gt;github.workspace&lt;/code&gt; includes all of the code checked out from our current repo, and I'm mounting that whole directory as that's what my build process expects. Because I'm using a bind mount, &lt;strong&gt;anything done to this code will then be available to GitHub Actions&lt;/strong&gt; in any following step (like a deployment).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
    &lt;span class="s"&gt;composer install&lt;/span&gt;
    &lt;span class="s"&gt;npm install&lt;/span&gt;
    &lt;span class="s"&gt;npm run production&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is where I specify the actual commands I want to run against my container image. This action &lt;strong&gt;ignores the entrypoint of the container image&lt;/strong&gt;, so even though normally using &lt;code&gt;docker run aschmelyun/cleaver:latest&lt;/code&gt; it would run those three commands, using this action I have to actually specify them out again in the yaml. &lt;/p&gt;

&lt;p&gt;Once they complete, GitHub should now have a new &lt;code&gt;dist&lt;/code&gt; folder in the workspace containing the compiled site assets that can then be deployed out to a production server. Once the job finishes up, that's removed and is never committed to the repo or accessible to a separate job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Sometimes during a CI/CD process it's helpful to use a ready-made Docker image to run one-off commands and processes. This could be especially helpful if the software you need isn't available on the actions platform, or requires a lengthy setup process that's already written out in a Dockerfile.&lt;/p&gt;

&lt;p&gt;If you have any questions about anything in this article, or if you'd like to get more smaller pieces of regular content regarding Docker and other web dev stuff, feel free to follow or reach out to me on &lt;a href="https://twitter.com/aschmelyun"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>docker</category>
      <category>devops</category>
    </item>
    <item>
      <title>Develop a social network with ReactJS, Spring Boot and MongoDB</title>
      <author>Linh Truong Cong Hong</author>
      <pubDate>Tue, 11 Jan 2022 02:31:53 +0000</pubDate>
      <link>https://dev.to/linhtch90/develop-a-social-network-with-reactjs-spring-boot-and-mongodb-24l8</link>
      <guid>https://dev.to/linhtch90/develop-a-social-network-with-reactjs-spring-boot-and-mongodb-24l8</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K_w9vPAg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pid63yxzxjnyypgsi3r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K_w9vPAg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pid63yxzxjnyypgsi3r.png" alt="Image description" width="880" height="1265"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have developed a small social network web app for educational purpose and want to share this with the community. This app is built with ReactJS for frontend, Java Spring Boot for backend and MongoDB as the database.&lt;/p&gt;

&lt;p&gt;The app tries to mimic a few functions of Twitter, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create post with text and image&lt;/li&gt;
&lt;li&gt;The number of characters in each post is limited to 200 characters&lt;/li&gt;
&lt;li&gt;Like, comment and re-post a post&lt;/li&gt;
&lt;li&gt;View the number of likes, comments and shares of a post&lt;/li&gt;
&lt;li&gt;Comments are toggle&lt;/li&gt;
&lt;li&gt;The number of character in each comment is limited to 100 characters&lt;/li&gt;
&lt;li&gt;Follow, un-follow someone&lt;/li&gt;
&lt;li&gt;See who are following us and follow them back&lt;/li&gt;
&lt;li&gt;Check who we are following&lt;/li&gt;
&lt;li&gt;View all posts of an individual&lt;/li&gt;
&lt;li&gt;View our own posts&lt;/li&gt;
&lt;li&gt;List all user accounts in the entire social network (due to the number of users are still small, I did not develop search user function)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Due to limited storage space, client app compresses the uploaded image to the maximum of 250px (width or height) &lt;/li&gt;
&lt;li&gt;User avatar is created by hashing user id and convert that hash code into a hexagonal image&lt;/li&gt;
&lt;li&gt;Authentication and authorization use JWT&lt;/li&gt;
&lt;li&gt;Responsive frontend for desktop and mobile devices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Technical stack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Frontend: ReactJS, Redux Toolkit, React Router, React Bootstrap&lt;/li&gt;
&lt;li&gt;Backend: Java Spring Boot&lt;/li&gt;
&lt;li&gt;Database: MongoDB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope you enjoy it and if this project is useful for you , please give me a ⭐ &lt;strong&gt;Github star&lt;/strong&gt; ⭐ for my effort!&lt;/p&gt;

&lt;p&gt;Source Code:&lt;br&gt;
&lt;a href="https://github.com/linhtch90/psn-social-network-public-source"&gt;https://github.com/linhtch90/psn-social-network-public-source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Live Demo:&lt;br&gt;
&lt;a href="https://psn-social-network.herokuapp.com/#/"&gt;https://psn-social-network.herokuapp.com/#/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to fix security vulnerabillities in a newly created react app.</title>
      <author>Heritier Akilimali</author>
      <pubDate>Tue, 11 Jan 2022 02:01:34 +0000</pubDate>
      <link>https://dev.to/heritio/how-i-fixed-security-vulnerabillities-in-a-newly-created-react-app-31ge</link>
      <guid>https://dev.to/heritio/how-i-fixed-security-vulnerabillities-in-a-newly-created-react-app-31ge</guid>
      <description>&lt;p&gt;If you ever get error messages in the command line interface after creating a new react app with the create-react-app command, just like the image below, then this fix might help you out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f-5uy3L3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nlndn97lngp98e1vpyc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f-5uy3L3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nlndn97lngp98e1vpyc.png" alt="Image description" width="584" height="347"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing we do is deleting the starter files in the src path except the index.js and app.js files, ending up with the result in the below image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---5Z2R3vE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gx67ytq8gnpjadbhf371.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---5Z2R3vE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gx67ytq8gnpjadbhf371.png" alt="Image description" width="880" height="624"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step involves deleting every starter file in the public path except the index.html file just like below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5_RvRDl_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ct7e3twukfrq61dp4yk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5_RvRDl_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ct7e3twukfrq61dp4yk.png" alt="Image description" width="880" height="624"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In The next step, we will delete some code in the index.js file so that we don't have dependency imports that might trigger errors. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TdFKxjAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nc4pbv8fnae5tchl9ccx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TdFKxjAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nc4pbv8fnae5tchl9ccx.jpg" alt="Image description" width="880" height="624"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will also delete some code in the index.html file to get rid of some of the deleted dependencies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w27rVogY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ppr5uo07t3h9d1su0rf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w27rVogY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ppr5uo07t3h9d1su0rf.jpg" alt="Image description" width="880" height="624"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After you are finished with finding all the imports that are not used anymore and removing them, there should not be any more errors in the terminal. I hope this helped you out.&lt;br&gt;
Thanks.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Does /[A-z]/ Work For Case-Insensitive Regex?</title>
      <author>Kenny Fitzgerald (he/him)</author>
      <pubDate>Tue, 11 Jan 2022 01:55:51 +0000</pubDate>
      <link>https://dev.to/fitzgeraldkd/does-a-z-work-for-case-insensitive-regex-47fn</link>
      <guid>https://dev.to/fitzgeraldkd/does-a-z-work-for-case-insensitive-regex-47fn</guid>
      <description>&lt;p&gt;A while back I remember coming across one example online for finding a case-insensitive letter that looked like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="sr"&gt;/[A-z]/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Just to make sure it's crystal clear, that's a range from uppercase &lt;code&gt;A&lt;/code&gt; to lowercase &lt;code&gt;z&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I thought this would be a great and concise way to do the job, but I came to realize it was not quite doing what I thought it would.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-issue-with-raw-az-endraw-"&gt;
  &lt;/a&gt;
  The Issue With &lt;code&gt;/[A-z]/&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;While I initially thought this would be fine, I was getting some unexpected results when I used it. Here's a screenshot from &lt;a href="https://rubular.com/"&gt;Rubular&lt;/a&gt; showing what I started seeing:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fD_oQ-XR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/q9FosL5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fD_oQ-XR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/q9FosL5.png" alt="Regex example" width="880" height="181"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The expression is successfully finding lowercase and uppercase letters, but it's also grabbing a few extra symbols. Where is this coming from?&lt;/p&gt;

&lt;p&gt;Well if we take a look at the &lt;a href="https://www.ascii-code.com/"&gt;ASCII table&lt;/a&gt;, we'll notice that the uppercase alphabetical letters are codes 65 through 90, and that the lowercase alphabetical letters are codes 97 through 122. &lt;strong&gt;There are six additional characters between the two sets of letters!&lt;/strong&gt; Below is a portion of the table showing the six characters and their decimal codes:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Character Code&lt;/th&gt;
&lt;th&gt;Character&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;88&lt;/td&gt;
&lt;td&gt;&lt;code&gt;X&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;89&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Y&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;90&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Z&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;91&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;[&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;92&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;\&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;93&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;]&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;94&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;^&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;95&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;_&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;96&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;&lt;code&gt;`&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;97&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;98&lt;/td&gt;
&lt;td&gt;&lt;code&gt;b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;99&lt;/td&gt;
&lt;td&gt;&lt;code&gt;c&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Because of these additional symbols, what I thought was shorthand was a &lt;em&gt;completely different expression&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This expression:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="sr"&gt;/[A-z]/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Really evaluates to be something more like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="sr"&gt;/[A-Z\[\\\]^_`a-z]/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it's much clearer why the expression wasn't working the way I intended it to!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-use-instead"&gt;
  &lt;/a&gt;
  What To Use Instead
&lt;/h2&gt;

&lt;p&gt;If the &lt;strong&gt;whole regex&lt;/strong&gt; can be case-insensitive, the easiest thing to do is use the case insensitive modifier, &lt;code&gt;i&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="sr"&gt;/[a-z]/i&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If only a &lt;strong&gt;certain part&lt;/strong&gt; of your expression can be case-insensitive, there are a couple of options. For example, let's say we are looking for a three-character, letter-only string where the first and last character are lowercase but the middle character can be uppercase or lowercase. How would we write that?&lt;/p&gt;

&lt;p&gt;One option would be to do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="sr"&gt;/[a-z][a-zA-Z][a-z]/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another way to do this would be to &lt;a href="https://www.regular-expressions.info/modifiers.html"&gt;specify modes inline&lt;/a&gt; with the expression. This allows you to turn on the case insensitive mode for a portion of your rexpression. Here's what that could look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="sr"&gt;/[a-z](?i)[a-z](?-i)[a-z]/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: Specifying these modes inline may not work for all programming languages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;I'm actually glad I came across this issue. It was a great learning experience and it was helpful to see how the ranges in regex work. I thought it would be good to share this here in case anyone else comes across this in the future. Hopefully this is helpful to someone! &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>regex</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Transitioning from React Router v5 to v6</title>
      <author>Steph Crown</author>
      <pubDate>Tue, 11 Jan 2022 01:06:02 +0000</pubDate>
      <link>https://dev.to/stephcrown/transitioning-from-react-router-v5-to-v6-4e6</link>
      <guid>https://dev.to/stephcrown/transitioning-from-react-router-v5-to-v6-4e6</guid>
      <description>&lt;p&gt;React-router is the standard library for routing in react js. It allows users of a react app to move between different sections (components) of the app.&lt;/p&gt;

&lt;p&gt;The react-router team  &lt;a href="https://remix.run/blog/react-router-v6"&gt;announced the release&lt;/a&gt;  of a stable version of react-router version 6 (v6) towards the end of 2021, but switching from react-router version 5 (v5) to v6 may be difficult due to some big breaking API changes. In this article, we will walk through what is new in v6 and how to upgrade an existing React project from v5 to v6.&lt;/p&gt;

&lt;p&gt;To upgrade the version of the react-router package in our app, we navigate to the project folder and run&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install react-router-dom@[VERSION_NUMBER]&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Replace &lt;code&gt;VERSION_NUMBER&lt;/code&gt; with the version we want to install, or with “&lt;strong&gt;latest&lt;/strong&gt;” if we want the latest version, like so:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install react-router-dom@6&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;OR&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install react-router-dom@latest&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Note that we have to be connected to the internet to be able to complete the installation else the installation will fail. Also, ensure that the version of react in your project is v16.8 or greater because react-router v6 relies heavily on hooks that were first supported by react v16.8&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-switch-endraw-is-replaced-with-raw-routes-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Switch&lt;/code&gt; is replaced with &lt;code&gt;Routes&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The first casualty of the v5 era is the &lt;code&gt;Switch&lt;/code&gt; component. The &lt;code&gt;Switch&lt;/code&gt; component is used to wrap our routes and it ensures that just one matching route is loaded per time. But this does not exist in v6 anymore. We now use the &lt;code&gt;Routes&lt;/code&gt; component to do the same thing that &lt;code&gt;Switch&lt;/code&gt; does. Note that we still import &lt;code&gt;BrowserRouter&lt;/code&gt; to wrap our app in, just as is done in v5.&lt;/p&gt;

&lt;p&gt;In v5, we did it as so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BrowserRouter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Individual Routes come in here */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;BrowserRouter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But in v6, this is how we will do it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Routes&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BrowserRouter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Switch changes to Routes */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Individual Routes come in here */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;BrowserRouter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#update-in-the-definition-of-raw-route-endraw-component"&gt;
  &lt;/a&gt;
  Update in the definition of &lt;code&gt;Route&lt;/code&gt; component
&lt;/h2&gt;

&lt;p&gt;Although the &lt;code&gt;Route&lt;/code&gt; component still maintains a spot in v6, the way we will define it is different from the way we did in v5. We will no longer place the component we want to render in any of the ways we did it in v5, we will instead pass it as the value of the &lt;code&gt;element&lt;/code&gt; prop.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#no-more-raw-exact-endraw-prop"&gt;
  &lt;/a&gt;
  No more &lt;code&gt;exact&lt;/code&gt; prop
&lt;/h2&gt;

&lt;p&gt;In v5, without adding &lt;code&gt;exact&lt;/code&gt; as a prop to a &lt;code&gt;Route&lt;/code&gt; component, the path will match if a URL starts with the path keyword, and because the matching process is in order from top to bottom. But in v6, we would not be needing the &lt;code&gt;exact&lt;/code&gt; prop because the path pattern matching algorithm was changed, and is even more enhanced now. &lt;/p&gt;

&lt;p&gt;In v5, we did it as so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* There were 3 ways we declared routes in v5 */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/signup"&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* OR */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
   &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* This method allows us pass props to the rendered component */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/games"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* OR by passing a callback to the render prop */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/games"&lt;/span&gt; &lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In v6,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/games"&lt;/span&gt; &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* And with props for the rendered component */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/movies"&lt;/span&gt; &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;category&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"shirt"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-links-endraw-and-raw-navlinks-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Links&lt;/code&gt; and &lt;code&gt;NavLinks&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Link&lt;/code&gt; and &lt;code&gt;NavLink&lt;/code&gt; components still take their places in v6. The &lt;code&gt;Link&lt;/code&gt; component generally works as it did in v5, but with the &lt;code&gt;NavLink&lt;/code&gt; component, the &lt;code&gt;activeClassName&lt;/code&gt; and the &lt;code&gt;activeStyle&lt;/code&gt; prop were removed. In v5, &lt;code&gt;activeClassName&lt;/code&gt; prop was used to apply some CSS classes automatically to the link once it became active, and the &lt;code&gt;activeStyle&lt;/code&gt; allowed us to add internal styles to a link when it became active.&lt;/p&gt;

&lt;p&gt;But in v6, we can now use a function which information about the active state of the link. The function’s parameter is an object with the property &lt;code&gt;isActive&lt;/code&gt;. This property is true when the link is active and false when it is not. The value of &lt;code&gt;isActive&lt;/code&gt; now allows us to use conditional expressions to indicate an active style or class name(s).&lt;/p&gt;

&lt;p&gt;In v5, we did it as so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;NavLink&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;dom&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* … */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NavLink&lt;/span&gt;
   &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/product"&lt;/span&gt;
   &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#689&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
   &lt;span class="na"&gt;activeStyle&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#3072c9&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
   &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav_link"&lt;/span&gt;
   &lt;span class="na"&gt;activeClassName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"active"&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   Products
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;NavLink&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But in v6, we will do it as so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NavLink&lt;/span&gt;
   &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/product"&lt;/span&gt;
   &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;isActive&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isActive&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#3072c9&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#689&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
   &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;isActive&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`link&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;isActive&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; active&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   Product
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;NavLink&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-redirect-endraw-has-made-way-for-raw-navigate-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Redirect&lt;/code&gt; has made way for &lt;code&gt;Navigate&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;In v5, we used the &lt;code&gt;Redirect&lt;/code&gt; component to take one to another page but it is no longer exported from react-router-dom in v6. It has been replaced with the &lt;code&gt;Navigate&lt;/code&gt; component.&lt;br&gt;
In v5, we did it as so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/faq"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Redirect&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But in v6, we will do it as so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/games"&lt;/span&gt; &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Navigate&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/games"&lt;/span&gt; &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;About&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is important to note that if we just added the &lt;code&gt;Navigate&lt;/code&gt; component the way we did in the snippet above, it will only push our navigation to this path onto the navigation stack, but if we intend to replace the current page with a new page, we will add the replace prop to the &lt;code&gt;Navigate&lt;/code&gt; component as in so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/games"&lt;/span&gt; &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Navigate&lt;/span&gt; &lt;span class="na"&gt;replace&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#nested-routes"&gt;
  &lt;/a&gt;
  Nested Routes
&lt;/h2&gt;

&lt;p&gt;Nested routes, as the name implies, are routes placed in another route. They are used to render more specific information in child components. In v6, we place our nested routes as children of our parent route. Then we introduce the &lt;code&gt;Outlet&lt;/code&gt; component, which is exported from react-router-dom in the rendered component to specify where we want the nested information to be displayed. The Outlet component is not necessary but it makes the code cleaner.&lt;br&gt;
In v5, we did it as so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouteMatch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BrowserRouter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;exact&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/product"&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
           &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;BrowserRouter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouteMatch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* match.path returns the path specified in parent route. In this case it is "/product" */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AllProducts&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
               &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* And in this case it is /product/:id */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/:id`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ProductDetail&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
               &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

       &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In v6, we do it as so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Outlet&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt; &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;About&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
           &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/product"&lt;/span&gt; &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Here the paths of the nested routes are relative to the path of the parent route. */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
               &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* This becomes "/product/" */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AllProducts&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
               &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* And This becomes "/product/:id" */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/:id"&lt;/span&gt; &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ProductDetail&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

           &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Product&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Other content of the parent component */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
           &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
           &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* This is where the nested information begins */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
           &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Outlet&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#programmatic-navigation"&gt;
  &lt;/a&gt;
  Programmatic Navigation
&lt;/h2&gt;

&lt;p&gt;Programmatic navigation occurs when a user is redirected as a result of an event that occurs on a route, such as clicking a button, an API request completing, e.tc. In v5, we could use the &lt;code&gt;useHistory&lt;/code&gt; hook to do something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useHistory&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useHistory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="c1"&gt;//This pushes the new route on top of the navigation stack&lt;/span&gt;
       &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/new-route&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

       &lt;span class="c1"&gt;//This replaces the current route with the new route in the navigation stack&lt;/span&gt;
       &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/new-route&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click Me to redirect to new route&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But in v6, &lt;code&gt;useHistory&lt;/code&gt; hook is replaced with &lt;code&gt;useNavigate&lt;/code&gt; hook, and we use it in different ways.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useNavigate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;navigate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useNavigate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="c1"&gt;//This pushes the new route on top of the navigation stack&lt;/span&gt;
       &lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/new-route&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

       &lt;span class="c1"&gt;//This replaces the current route with the new route in the navigation stack&lt;/span&gt;
       &lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/new-route&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click Me to redirect to new route&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One cool thing is that we can go forward and backward any number of times on the navigation stack. By using a positive number as a parameter to &lt;code&gt;navigate()&lt;/code&gt; above, the route moves that number of steps forward. And a negative number does the same thing backward&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Goes forward&lt;/span&gt;
&lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Goes forward twice&lt;/span&gt;
&lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Goes backward&lt;/span&gt;
&lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Goes backward three times&lt;/span&gt;
&lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-raw-prompt-endraw-component"&gt;
  &lt;/a&gt;
  The &lt;code&gt;Prompt&lt;/code&gt; Component
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;Prompt&lt;/code&gt; component in v5 prevents accidentally leaving a page if there are unsaved changes. But react-router team did not include it in v6, and there is no alternative for it. So if you need the feature, you either manually implement it or move back to v5.&lt;/p&gt;

&lt;p&gt;In addition to not including &lt;code&gt;Prompt&lt;/code&gt; in the current release, &lt;code&gt;useBlocker&lt;/code&gt; and &lt;code&gt;usePrompt&lt;/code&gt; also do not work. The react-router team although said in the official docs that they are currently working on adding it back to v6 at some point, but not for the first stable release of 6.x. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Let us highlight the changes we have gone through.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Switch component is replaced with Routes component.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Changes in how to place the rendered component of Route.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No more &lt;code&gt;exact&lt;/code&gt; prop in the &lt;code&gt;Route&lt;/code&gt; component.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;activeClassName&lt;/code&gt; and &lt;code&gt;activeStyle&lt;/code&gt; props have been removed from &lt;code&gt;NavLink&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can access the isActive state of a NavLink component through a function callback.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Redirect&lt;/code&gt; component has been replaced with &lt;code&gt;Navigate&lt;/code&gt; component.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A sleeker way to implement nested routes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In conclusion, if you think you are not ready to make the switch to v6 from v5 or any other version, you can always install a previous version using this.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install react-router-dom@[VERSION_NUMBER]&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;But then, you will be missing out on some goodies that came with v6 including but not limited to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enhanced path pattern matching algorithm.&lt;/li&gt;
&lt;li&gt;Bundle size reduced by 60% according to  &lt;a href="https://bundlephobia.com/"&gt;Bundlephobia&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I believe we were able to successfully make that switch to react-router v6 and stop using the Switch component (pun very much intended) 😌.&lt;/p&gt;

&lt;p&gt;Have a great coding experience 🙌.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Signing out,&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Steph Crown&lt;/strong&gt; ✌️&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Build an awesome website for free</title>
      <author>Tech Expert Academy</author>
      <pubDate>Tue, 11 Jan 2022 00:54:54 +0000</pubDate>
      <link>https://dev.to/teaberlin/build-an-awesome-website-for-free-59ho</link>
      <guid>https://dev.to/teaberlin/build-an-awesome-website-for-free-59ho</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-to-this-tutorial"&gt;
  &lt;/a&gt;
  Welcome to this tutorial!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://youtu.be/TRIys0HLJuU" title="Video Tutorial"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WkpZmzMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/youtube_cover_image.png" alt="Link to video version of tutorial" width="880" height="385"&gt;Full tutorial also available as video&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-a-github-page"&gt;
  &lt;/a&gt;
  Why a Github page?
&lt;/h3&gt;

&lt;p&gt;If you want to build a stunning website that is 100% free and 100% yours, you have come to the right place: Zero cost for domain, template and hosting. All you need is a free Github account, which you'll need anyway if you want to break into tech. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#examples-for-the-type-of-website"&gt;
  &lt;/a&gt;
  Examples for the type of website
&lt;/h3&gt;

&lt;p&gt;Here are two examples for the kind of website you'll be building: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://tea-berlin.github.io/"&gt;tea-berlin&lt;/a&gt; and &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://bruno-danelon.github.io/"&gt;bruno-danelon&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The website template comes from &lt;a href="https://github.com/jeffreytse/jekyll-theme-yat"&gt;jeffreytse&lt;/a&gt; and got slightly simplified by &lt;a href="https://github.com/datamaunz/jekyll-blog-template"&gt;datamaunz&lt;/a&gt; for the purpose of this tutorial.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-your-website"&gt;
  &lt;/a&gt;
  Features of your website
&lt;/h3&gt;

&lt;p&gt;This website will allow you to blog and to showcase who you are. Your visitors can toggle between light &amp;amp; dark mode and they can pick their preferred language for viewing your site. If you are missing your preferred language in the menu, no worries! The tutorial will show you how to further customise the options.&lt;/p&gt;

&lt;p&gt;Besides automatic translations, the site will archive your posts automatically by date. Furthermore, it will classify your posts through categories of your choice. In addition to that, you can use tags to make it easier for your users to find the right articles, but most amazingly, it looks absolutely stunning, is fast and 100% free. &lt;/p&gt;

&lt;p&gt;What are you waiting for?! Build your own website and show the world who you are.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-create-a-free-github-account"&gt;
  &lt;/a&gt;
  1. Create a free Github account
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GVv_sUX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/sign_up.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GVv_sUX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/sign_up.png" alt="Sign up" width="880" height="443"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, we have to create a Github account. Go to &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt; and hit the sign-up button in the upper right corner. Enter an email address, a password, and a username. As mentioned before, you will not have to pay for your website, not even for the domain, because Github provides you with a subdomain, which will be constructed from your username. This is why the choice of your username is kind of important. I will go with &lt;em&gt;tea-berlin&lt;/em&gt;. You should use yours. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qoaF_SzN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/Github_account_creation.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qoaF_SzN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/Github_account_creation.png" alt="Github account creation" width="880" height="463"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After being asked whether we want to receive product updates and announcements we'll have to solve a quick puzzle to verify that we are humans. We'll receive and enter a verification code, skip the personalisation, and: Done!&lt;/p&gt;

&lt;p&gt;Congratulations, you have a Github account!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-fork-the-template"&gt;
  &lt;/a&gt;
  2. Fork the template
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5-mxwtkS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/skip_introduction.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5-mxwtkS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/skip_introduction.png" alt="skip intro" width="880" height="443"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you can introduce yourself to those visiting your account. You should definitely do that! But for now we will skip it because we want to learn how to create our website. Click “Dismiss This”, open a new tab and go to &lt;a href="https://github.com/datamaunz/jekyll-blog-template"&gt;jekyll-blog-template&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HnOqLWlc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/fork_datamaunz_repo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HnOqLWlc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/fork_datamaunz_repo.png" alt="fork repo" width="880" height="438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This brings us automatically to the Github account of Datamaunz. More precisely, we are seeing the repository called &lt;em&gt;Jekyll blog template&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;It contains various folders and files. But no worries: In order to transfer all these files into our own Github account, we just have to go to the upper right corner and click on “Fork”.&lt;/p&gt;

&lt;p&gt;Now a fork is being created. This fork is a copy of the original repository that will appear in our own account.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-rename-the-repo"&gt;
  &lt;/a&gt;
  3. Rename the repo
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9X-V8pOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/go_to_settings_adter_forking.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9X-V8pOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/go_to_settings_adter_forking.png" alt="go to settings after forking" width="880" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we are now in our own Github account. More precisely, we are in our own repository called &lt;em&gt;Jekyll blog template&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To make this our website, we have to change the name of this repository. Go to settings. &lt;/p&gt;

&lt;p&gt;By convention, Github repositories that are named by the name of the Github account followed by &lt;em&gt;.github.io&lt;/em&gt; will be treated as websites by Github. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;username.github.io&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My username is &lt;em&gt;tea-berlin&lt;/em&gt;. I thus have to name my repo &lt;em&gt;tea-berlin.github.io&lt;/em&gt;. Apply this logic to your own username.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UqEXAlGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/rename_repo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UqEXAlGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/rename_repo.png" alt="rename repo" width="880" height="437"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Change the entry for &lt;em&gt;repository name&lt;/em&gt; accordingly and hit &lt;em&gt;rename&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If you have followed the Tutorial up to this point, your repository should now have the name that you have selected as username for your Github account and this name should be followed by &lt;em&gt;.github.io&lt;/em&gt;. This is also the address to your website. Open a new tab and enter the name of your repository. In my case, this is &lt;em&gt;tea-berlin.github.io&lt;/em&gt;. It might take a few minutes until the changes have propagated.&lt;/p&gt;

&lt;p&gt;And: BAEHM! We have our own website! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ooI-cPTf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/view_website_1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ooI-cPTf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/view_website_1.png" alt="view website 1" width="880" height="438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As promised, users can pick their favorite language to view your site (might not work in every browser but should work in Chrome) and toggle between light and dark mode. Later we will see how to customise the choices in this menu.&lt;/p&gt;

&lt;p&gt;Let’s go back to our repository and scroll down to the ReadMe instructions. It shows all the steps required to customise your page. You can follow the links to access the respective files. Note, you could also access the files directly via the file system above.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fKQ1ZHqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/readme_instructions.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fKQ1ZHqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/readme_instructions.png" alt="readme instructions" width="880" height="438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-thank-jeffreytse"&gt;
  &lt;/a&gt;
  4. Thank Jeffreytse
&lt;/h3&gt;

&lt;p&gt;First, let’s thank the creator of this template, Jeffreytse, by heading to &lt;a href="https://github.com/jeffreytse/jekyll-theme-yat"&gt;the original repo&lt;/a&gt;. This is the repository from where Datamaunz has forked its repository to prepare it for this tutorial. However, the actual work comes from Jeffreytse. You can show your appreciation by giving a star to the repo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WKIr0JhY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/star_for_jeffreytse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WKIr0JhY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/star_for_jeffreytse.png" alt="star for jeffreytse" width="880" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-customize-heading-and-subheading"&gt;
  &lt;/a&gt;
  5. Customize heading and subheading
&lt;/h3&gt;

&lt;p&gt;Now, let’s go back to our own repository and personalize the contents.&lt;/p&gt;

&lt;p&gt;In its current version, our website says &lt;em&gt;your awesome title&lt;/em&gt; and &lt;em&gt;your awesome subheading&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;To change the values for heading and subheading, go to _data/defaults.yml (by following the link in the ReadMe instructions or by opening the file via the file system in your repo). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VGrgraE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/defaults_yml.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VGrgraE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/defaults_yml.png" alt="defaults_yml file" width="880" height="433"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the little pencil icon. This will put the interface into editing mode. Note, this is not how experienced developers use Github. They would do the changes via an editor like VSCode and commit the changes to Github. You should definitely do that in the future as well. However, for our current purpose it is okay to use this graphical user interface (despite inefficiencies).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DBaa9PhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/hit_pencil_icon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DBaa9PhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/hit_pencil_icon.png" alt="click pencil icon for editing" width="880" height="435"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Having switched to editing mode, we can change the values for heading and subheading. Before the change, the file should contain the following entries:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;home&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;heading&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;your&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;awesome&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;title"&lt;/span&gt;
  &lt;span class="na"&gt;subheading&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;your&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;awesome&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;subheading"&lt;/span&gt;
  &lt;span class="na"&gt;banner&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;your&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;awesome&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;url"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I will change it as shown below but you should pick values that represent your website (and thus yourself, your project or your cause) best. Make sure not to mess up the syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;home&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;heading&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Tech&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Expert&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Academy"&lt;/span&gt;
  &lt;span class="na"&gt;subheading&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Land&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;tech&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;job&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;in&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;just&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;6&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;months"&lt;/span&gt;
  &lt;span class="na"&gt;banner&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;your&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;awesome&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;url"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, scroll down to the bottom of the page and smash the Commit button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qb_KHT5c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/Commit_button.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qb_KHT5c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/Commit_button.png" alt="commit changes" width="880" height="418"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations, you have committed your first changes! This is huge. Github is a version control system. Changes are documented in the form of such commits. This means, based on your history of commits, you can restore earlier versions of your repository. This comes in handy when you (or someone else) have messed up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-customize-menu-for-automatic-translations"&gt;
  &lt;/a&gt;
  6. Customize menu for automatic translations
&lt;/h3&gt;

&lt;p&gt;Let’s make some more changes to our website. Go back to your root repository and scroll down to the Readme file. &lt;/p&gt;

&lt;p&gt;The second change is about the menu for automated translations. You do not have to make any changes here if you are satisfied with the default options. In case you want to make changes, this is how you can do it.&lt;/p&gt;

&lt;p&gt;Go to &lt;em&gt;_data/translate_langs.yml&lt;/em&gt; (either by navigating your file system or by using the link in the ReadMe instructions).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QX5grgdo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/translate_lang.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QX5grgdo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/translate_lang.png" alt="translate_lang" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each language option is represented by one bullet point taking up three lines. One line for &lt;em&gt;language&lt;/em&gt;, one for &lt;em&gt;image&lt;/em&gt;, and one for &lt;em&gt;text&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Translate languges&lt;/span&gt;
&lt;span class="c1"&gt;# langs refer to https://cloud.google.com/translate/docs/languages&lt;/span&gt;

&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;en&lt;/span&gt;
  &lt;span class="na"&gt;img&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://cdn.countryflags.com/thumbs/united-states-of-america/flag-400.png&lt;/span&gt;
  &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;English&lt;/span&gt;

&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;fr&lt;/span&gt;
  &lt;span class="na"&gt;img&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://cdn.countryflags.com/thumbs/france/flag-400.png&lt;/span&gt;
  &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;French&lt;/span&gt;

&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;zh-CN&lt;/span&gt;
  &lt;span class="na"&gt;img&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://cdn.countryflags.com/thumbs/china/flag-400.png&lt;/span&gt;
  &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Chinese(Simple)&lt;/span&gt;

&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first bullet block represents the language that is being displayed as first option in the menu, the second as second etc. If you want to change the order in which the languages appear, just switch to editing mode (the pencil icon), cut out the bullet block that you want to move to a different place, and paste it to the desired position. &lt;/p&gt;

&lt;p&gt;To remove a language, just delete the respective bullet block.&lt;/p&gt;

&lt;p&gt;To add a new language, you need to provide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;lang:&lt;/em&gt; followed by an abbrevation of the language (the &lt;a href="https://cloud.google.com/translate/docs/languages"&gt;following languages and their abbreviations&lt;/a&gt; are supported&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;img:&lt;/em&gt; a link to a country flag image that will appear in the language menu (links to &lt;a href="https://www.countryflags.com/"&gt;country flags&lt;/a&gt; can be found here)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;text:&lt;/em&gt; the name of the language which will be used as label in the menu&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don't forget to hit the commit button at the bottom of the page to not lose your changes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-customize-the-banner-image"&gt;
  &lt;/a&gt;
  7. Customize the banner image
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#upload-new-image"&gt;
  &lt;/a&gt;
  Upload new image
&lt;/h4&gt;

&lt;p&gt;Go back to the root repository and head down to the Readme file. The third intervention concerns the banner image. The default image is great and you do not have to change it. In case you wanted to change the image, go to &lt;em&gt;assets/images/banners/&lt;/em&gt;. The &lt;em&gt;banners&lt;/em&gt; folder contains two files: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;datacamp_certificate_dummy.jpg and &lt;/li&gt;
&lt;li&gt;home.jpeg&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tb1fZA_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/banners_folder.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tb1fZA_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/banners_folder.png" alt="banners folder" width="880" height="439"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;home.jpeg is the image that is currently being used as your background banner. Again, no need to change the banner of your website. But if you wanted, you could drop another file into the banner folder. I will do that and add &lt;em&gt;balloon-image.jpg&lt;/em&gt;. You should pick whatever image you want. To do so, click &lt;em&gt;Add file&lt;/em&gt; and select &lt;em&gt;Upload files&lt;/em&gt;. Now you can drag and drop the image into the folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RPWLyzbc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/drop_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RPWLyzbc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/drop_image.png" alt="drop image" width="880" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scroll down and commit the changes. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#link-to-new-image"&gt;
  &lt;/a&gt;
  Link to new image
&lt;/h4&gt;

&lt;p&gt;The second intervention needed for changing the image requires us to make a change in &lt;em&gt;index.html&lt;/em&gt;. Open &lt;em&gt;index.html&lt;/em&gt; by following the link in the ReadMe instructions or by navigating your file system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HrjzYH8Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/index_html.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HrjzYH8Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/index_html.png" alt="index html" width="880" height="417"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The file contains an entry called banner. The value for this entry is the path to &lt;em&gt;home.jpeg&lt;/em&gt; that we have spotted in the banners folder. Change this path such that it points to the image that you want to use for your website. To do so, click the little pencil button to edit the file. Now replace &lt;em&gt;home.jpeg&lt;/em&gt; by the name of your new file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;---
# Feel free to add content and custom Front Matter to this file.
# To modify the layout, see https://jekyllrb.com/docs/themes/#overriding-theme-defaults

layout: home
title: Home
banner: "assets/images/banners/home.jpg"
---
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I will use balloon-image.jpg. You should use the image you have uploaded (or pass a url to an image that is stored somewhere else):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;---
# Feel free to add content and custom Front Matter to this file.
# To modify the layout, see https://jekyllrb.com/docs/themes/#overriding-theme-defaults

layout: home
title: Home
banner: "assets/images/banners/balloon-image.jpg"
---
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Scroll down and commit the changes. Done!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-further-customizations"&gt;
  &lt;/a&gt;
  8. Further customizations
&lt;/h3&gt;

&lt;p&gt;Head back to the root repository. And scroll down to the Readme instructions.&lt;/p&gt;

&lt;p&gt;This time, we need to edit some entries in a file called &lt;em&gt;_config.yml&lt;/em&gt;. Open the file and scroll down a bit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mp3duwHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/config_yml.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mp3duwHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/config_yml.png" alt="config_yml" width="880" height="691"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We want to change:  &lt;em&gt;Title&lt;/em&gt; (which will appear in the upper left corner of your website), &lt;em&gt;Email&lt;/em&gt;, &lt;em&gt;Author&lt;/em&gt; (name is being used on your blog posts), &lt;em&gt;Copyright&lt;/em&gt; (appears on the footer of your site), &lt;em&gt;Description&lt;/em&gt; (appears as description on, e.g., Google when showing your site), and potentially the favicon. You should pass what works best for you, I will make the following changes for my site (note that the code below only shows the entries without the majority of comments etc.):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Tech Expert Academy&lt;/span&gt;
&lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;berlin@techexpertacademy.com&lt;/span&gt;
&lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TEA&lt;/span&gt;
&lt;span class="na"&gt;copyright&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Unpublished&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Work&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;(cleft)&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;{currentYear}&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;{author}"&lt;/span&gt;
&lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;&amp;gt;-&lt;/span&gt; &lt;span class="c1"&gt;# this means to ignore newlines until "baseurl:"&lt;/span&gt;
  &lt;span class="s"&gt;We offer high quality courses that help you become a tech professional in record time. We also help you to find a job at a great company. You only pay tuition when you get hired.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Scroll down, commit the changes and: Done!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-customize-your-about-page"&gt;
  &lt;/a&gt;
  9. Customize your About page
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#markdown"&gt;
  &lt;/a&gt;
  Markdown
&lt;/h4&gt;

&lt;p&gt;Back to the root repository scrolling down to the ReadMe instructions. Only the customisation of the About page is left. We can do this by using Markdown syntax.&lt;/p&gt;

&lt;p&gt;Markdown is an easy to use language for creating formatted text. Trust me, if you are not using it already, you will be using it a lot in the future. It is a good investment of your time to get familiar with the basic syntax. There are plenty of good resources online. The Readme instructions link to a good &lt;a href="https://www.markdownguide.org/basic-syntax/"&gt;guide&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The syntax is straight forward. For example: to create different levels for headings you can use hashes in front of the line you want to treat as heading. One hash gives you the largest heading size. Two hashes will give you the second largest size etc. Just scroll a bit through the guide and you will see, that you can do most of the things you usually use for text formatting: Making text bold or italic, creating tables, inserting links, inserting images etc. The text of this tutorial is written in markdown.&lt;/p&gt;

&lt;p&gt;The best way to learn is practice! So, let’s get our hands dirty.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#aboutmd"&gt;
  &lt;/a&gt;
  About.md
&lt;/h4&gt;

&lt;p&gt;Follow the link to about.md (or open the file via your file system) and go to editing mode by clicking the little pencil icon.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;---
layout: about
title: About
---

## About

Hi, nice to meet you.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Currently, the file only says: About Hi nice to meet you. The entries on top of the text page indicate meta information. They are demarcated by three dashes at the top and the bottom. Inside of them we have two variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;layout&lt;/em&gt; refers to the layout used for the about page that is being defined in the &lt;em&gt;_layouts&lt;/em&gt; folder. Let's not touch it here and leave it as it is.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;title&lt;/em&gt; defines the title that appears on your website's about page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Everything that follows underneath this header can be formatted by using markdown syntax.&lt;/p&gt;

&lt;p&gt;Use the about page to tell the world about yourself, your project or your cause. For communication purposes, it is good practice to break down messages into: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Why?&lt;/em&gt;, &lt;/li&gt;
&lt;li&gt;
&lt;em&gt;How?&lt;/em&gt; and &lt;/li&gt;
&lt;li&gt;
&lt;em&gt;What?&lt;/em&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will be using these categories as headers by applying three hashes (but do what works best for you). Also, do not forget to tell visitors under Contacts how they can get in touch. This is how the file looks for me after editing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;---
layout: about
title: About
---

## Welcome to Tech Expert Academy

### Why

While companies are desperately looking for tech talent, many people are either unemployed or they work in unfulfilling jobs. We want to be the match maker between these two parties. 

### How

We partner with fast growing companies. By knowing their needs in the near future, we know how to best prepare our students to fill these roles. 

### What

At TEA students take a three months intensive training for careers such as Data Engineering, Cloud Solutions etc. They learn at their own pace and have a personal coach checking in with them each week. After the three months period is over, coaches and mentors help to land a job. The classes are free and will be paid back through income share agreements if the student successfully lands a job.

### Contact

You are interested? Check out our [website](https://techexpertacademy.com). If you like what we are doing, [send us](https://www.techexpertacademy.com/#contact-form-main) a link to your GitHub Page and we’ll get back to you soon. Follow us on [LinkedIn](https://de.linkedin.com/company/tech-expert-academy?trk=public_profile_topcard-current-company).
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And as always: Scroll down and commit the changes. Wonderful! We are almost there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#write-your-first-post"&gt;
  &lt;/a&gt;
  Write your first post
&lt;/h2&gt;

&lt;p&gt;Now, back to our root repository and down to our Readme instructions. The last step is about how to add blog posts. &lt;/p&gt;

&lt;p&gt;Follow the link to the &lt;em&gt;_posts&lt;/em&gt; folder or scroll up and open the _posts folder directly. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SViGmFl1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/posts_folder.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SViGmFl1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/posts_folder.png" alt="posts folder" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have already two posts in our folder. Look at their names: They follow the same scheme. First, we see a date (year-month-day) followed by a name and the markdown extension:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;year-month-day-postname.md&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You have to name your posts according to this convention. Otherwise, they will not be treated as posts. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip: If you want to work on posts before publishing on your site, add a character like &lt;em&gt;_&lt;/em&gt; in front of the date and it will not show up on your site. As soon as you want it to be published, remove the character.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's open &lt;em&gt;2021-12-25-my-second-post.md&lt;/em&gt;. When viewing it in editing mode it looks as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;---
layout: post
title: Introduction to Python
subtitle: Each post also has a subtitle
categories: Python
tags: [Python, intro, certificate]
---

## Introduction to Python

This post is meant to summarize some of the key concepts I have learned in the course *Introduction to Python*


![datacamp certification](https://tea-berlin.github.io/assets/images/banners/datacamp_certificate_dummy.jpg)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can tell, the file starts with a header demarcated by three dashes at top and bottom containing meta information. Every post you write needs to define these key value pairs.&lt;/p&gt;

&lt;p&gt;Let's copy this header. We will need it for our new post. &lt;/p&gt;

&lt;p&gt;Head back to the _posts folder. Click on &lt;em&gt;Add file&lt;/em&gt; and select &lt;em&gt;Create new file&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kj2-oT9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/add_file_post.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kj2-oT9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/add_file_post.png" alt="add new post to folder" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter a name by following the naming convention for posts.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;year-month-day-postname.md&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I will call mine:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;2022-01-03-my-first-post-this-year.md&lt;/em&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should take what works best for you. Let's paste the header at the top of the file and customize the key value pairs. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first entry is &lt;strong&gt;layout&lt;/strong&gt;. It defines which layout will be applied to this file when being rendered. This needs to be set to post. &lt;/li&gt;
&lt;li&gt;The second entry is &lt;strong&gt;title&lt;/strong&gt;. This title will be displayed on links to your post and on top of your post's page.&lt;/li&gt;
&lt;li&gt;The third entry is &lt;strong&gt;subtitle&lt;/strong&gt;, which will pe displayed underneath your title on the post's page. I will pass; "Quick summary";&lt;/li&gt;
&lt;li&gt;The fourth entry is &lt;strong&gt;categories&lt;/strong&gt;. If you want to use multiple categories, you can put the collection into square brackets. Order matters here (going from higher to lower categories from left to right). I will stick to one single category.&lt;/li&gt;
&lt;li&gt;The fifth entry is &lt;strong&gt;tags&lt;/strong&gt;. Put the tags that are relevant to your post into square brackets and separate them by commas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The actual content of the post goes below the header. You can use all the markdown magic you want. I will use an ordered list to summarize the steps of building this site. This is how my file looks after editing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;---
layout: post
title: How I've built my website
subtitle: quick summary
categories: Website
tags: [Github, website]
---

1. I created a GitHub account
2. I forked a repository from https://github.com/datamaunz
3. I renamed the forked repository tea-berlin.github.io
4. I edited the files as described in the README.md
5. Now I am writing my first post by following the advice that I got from the README file
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Scroll down and commit the changes. Done! You first post is going live! Note that it can take a few minutes until the post shows up on your site. If it takes suspiciously long, check the file name and the header (also the file needs to be inside of the &lt;em&gt;_posts&lt;/em&gt; folder).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-cleanup"&gt;
  &lt;/a&gt;
  Further Cleanup
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#delete-github-folder"&gt;
  &lt;/a&gt;
  Delete &lt;em&gt;.github&lt;/em&gt; folder
&lt;/h3&gt;

&lt;p&gt;Let's clean things up a bit further. You do not have to follow these steps but it does not hurt either.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z5NuWHX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/delete_dot_github_folder.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z5NuWHX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://tea-berlin.github.io/assets/images/post_images/website_tutorial/delete_dot_github_folder.png" alt="delete .github folder" width="880" height="439"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you see the &lt;em&gt;.github&lt;/em&gt; folder at the top of your repository? We don't need it. Open the &lt;em&gt;.github&lt;/em&gt; folder. In the upper right corner, you find a button showing &lt;em&gt;...&lt;/em&gt;&lt;br&gt;
Click the button and select &lt;em&gt;delete directory&lt;/em&gt;. Scroll down and commit the changes. &lt;/p&gt;

&lt;p&gt;Excellent!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#remove-footer-info"&gt;
  &lt;/a&gt;
  Remove footer info
&lt;/h3&gt;

&lt;p&gt;If you want to cut the information on the footer down to the copyright info, you can do the following. Go to _includes/views/footer.html and click on the little pencil icon to edit the page. &lt;/p&gt;

&lt;p&gt;Delete the lines 15, 16, 17, and 18 so that the following remains:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;footer&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"site-footer h-card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;data&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"u-url"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ "&lt;/span&gt;&lt;span class="err"&gt;/"&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="na"&gt;relative_url&lt;/span&gt; &lt;span class="err"&gt;}}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/data&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"site-footer-inner"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        {%- assign currentYear = 'now' | date: "%Y" -%}
        {%- assign copyright = site.copyright
            | replace: '{currentYear}', currentYear
            | replace: '{author}', site.author
            | replace: '(c)', '&lt;span class="ni"&gt;&amp;amp;copy;&lt;/span&gt;'
            | replace: '(p)', '℗'
            | replace: '(cleft)', '&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"copyleft"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;copy;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;'
        -%}
      &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;{{ copyright }}&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Scroll down and commit the changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#use-an-editor"&gt;
  &lt;/a&gt;
  Use an Editor
&lt;/h3&gt;

&lt;p&gt;Congratulations! You have finished the tutorial. Just wait a bit until the changes show on your website and you are done. We are curious to see what you are building. &lt;a href="//mailto:berlin@techexpertacademy.com"&gt;Send us&lt;/a&gt; a link to your website. &lt;/p&gt;

&lt;p&gt;The combination of a Jekyll blog and Github works best when editing is done via a proper editor. My preferred choice is VSCode. There are plenty of tutorials that you can use to flex your skills. The main idea here was to help you create a website to showcase yourself and your work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#become-a-student"&gt;
  &lt;/a&gt;
  Become a Student
&lt;/h3&gt;

&lt;p&gt;Building such a website is the first step to become a student at &lt;em&gt;Tech Expert Academy&lt;/em&gt;. If you want to study at TEA, send us a link to your website via &lt;a href="https://www.techexpertacademy.com/apply-now/"&gt;this form&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#become-a-coach"&gt;
  &lt;/a&gt;
  Become a Coach
&lt;/h3&gt;

&lt;p&gt;If you are an expert in the subjects listed on &lt;a href="https://www.techexpertacademy.com/#courses"&gt;our website&lt;/a&gt; and  if you are passionate about teaching, get in touch via &lt;a href="https://de.linkedin.com/company/tech-expert-academy?trk=public_profile_topcard-current-company"&gt;LinkedIn&lt;/a&gt; or &lt;a href="//mailto:berlin@techexpertacademy.com"&gt;email&lt;/a&gt;. We are growing and looking for talented coaches.&lt;/p&gt;

</description>
      <category>github</category>
      <category>website</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Build a CI Pipeline With GitHub Actions to Automate Tests.</title>
      <author>Thuwarakesh Murallie</author>
      <pubDate>Mon, 10 Jan 2022 23:42:54 +0000</pubDate>
      <link>https://dev.to/thuwarakesh/build-a-ci-pipeline-with-github-actions-to-automate-tests-2ndg</link>
      <guid>https://dev.to/thuwarakesh/build-a-ci-pipeline-with-github-actions-to-automate-tests-2ndg</guid>
      <description>&lt;p&gt;Test-driven development (TDD) and test automation are great ways to reduce bugs arising from subsequent changes.&lt;/p&gt;

&lt;p&gt;It's widespread to run tests inside the continuous integration (CI) pipeline. It takes away a ton of precious developer time from the repetitive testing tasks.&lt;/p&gt;

&lt;p&gt;A fantastic option we have to build CI pipelines is GitHub Actions. Using GitHub as the code repository, you can set triggers and run tasks in a workflow. These tasks automatically start whenever you push changes to the repository.&lt;/p&gt;

&lt;p&gt;Despite solving a complex problem, GitHub Actions are surprisingly straightforward to configure. In this short article, I've discussed,&lt;br&gt;
    - how you can set up a CI pipeline to run tests;&lt;br&gt;
    - how to customize even triggers;&lt;br&gt;
    - how to schedule tests in cycles, and;&lt;br&gt;
    - how to use environment variables in tests;&lt;/p&gt;

&lt;p&gt;Try it out, and let me know what your thoughts are. How can we make it better? What alternatives do we have? What are your practices in testing software before release?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://towardsdatascience.com/github-automated-testing-python-fdfe5aec9446?sk=5896e323396c3d1bbb4b603dce715cca"&gt;How to Run Python Tests on Every Commit Using GitHub Actions?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you enjoyed reading this post, &lt;strong&gt;&lt;em&gt;please share&lt;/em&gt;&lt;/strong&gt; it in your network. Would you also leave 50 claps in Medium to help the post reach more people?&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>devops</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Classic programming books ⌨️ 📚 available for free</title>
      <author>Andy Piper</author>
      <pubDate>Mon, 10 Jan 2022 23:18:21 +0000</pubDate>
      <link>https://dev.to/andypiper/classic-programming-books-available-for-free-2jg4</link>
      <guid>https://dev.to/andypiper/classic-programming-books-available-for-free-2jg4</guid>
      <description>&lt;p&gt;A few years ago, I wrote a blog post &lt;a href="https://andypiper.medium.com/21-years-in-tech-d762810663ec"&gt;reflecting on my time in tech&lt;/a&gt;, and mentioned in it that my introduction to programming was with BBC BASIC on an Acorn Electron, in the 1980s.&lt;/p&gt;

&lt;p&gt;Over the weekend, I &lt;a href="https://www.pcgamer.com/usbornes-1980s-range-of-childrens-coding-books-released-as-free-pdfs/"&gt;learned&lt;/a&gt; that the publisher Usborne, known for their educational books for children, have made all of their 1980s coding books &lt;a href="https://usborne.com/gb/books/computer-and-coding-books"&gt;available as free downloadable PDFs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I'm &lt;em&gt;really&lt;/em&gt; excited about this! The 8-bit platforms I grew up on are long gone, although those of us into the retro tech scene keep playing with them...&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zMbey8RX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/CWgsJFdWIAInsAP.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--dJpFPK7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1354624486960754689/6cFJFbv8_normal.jpg" alt="andypiper.xyz profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        andypiper.xyz
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/andypiper"&gt;@andypiper&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Additional &lt;a href="https://twitter.com/hashtag/Hackweek"&gt;#Hackweek&lt;/a&gt; project - @mdcin303 old C64 is now a working USB keyboard attached to my Mac 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:18 PM - 18 Dec 2015
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=677840282495381504" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=677840282495381504" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=677840282495381504" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;The books cover a whole range of topics, many of which are still very relevant today. One reason I've found languages like Python and, formerly, PHP so approachable is my foundation in BASIC. Even now, you can easily run emulators for the classic Spectrum, Commodore and BBC 8-bit computers of the past, and you can even run BASIC (and DOS) on today's microcontrollers &lt;a href="https://dev.to/andypiper/raspberry-pi-pico-getting-excited-about-the-smallest-things-km5"&gt;like the Raspberry Pi Pico&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;My particular favourites from the list of books available, are the listings books, &lt;em&gt;Computer Spy Games&lt;/em&gt; and &lt;em&gt;Weird Computer Games&lt;/em&gt; - I vividly remember those covers, and typing in and playing games like Micropuzzle and Robospy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9kp00N7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8dzst1zkvq8ayxgeqom.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9kp00N7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8dzst1zkvq8ayxgeqom.png" alt="Book covers of Computer Spy Games and Weird Computer Games" width="880" height="599"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BT7rYVUm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/itdl9ux48dh0dq6llwmu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BT7rYVUm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/itdl9ux48dh0dq6llwmu.png" alt="The first page of the listing for the game Micropuzzle, from the Weird Computer Games book" width="880" height="842"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just because these are from the 1980s and use BASIC, doesn't mean that the books are no longer interesting or useful. For me, it is partly about nostalgia; but, a lot has changed since I read them, and I'm interested in seeing how I would write a similar piece of code in a modern language that I use today. It turns out that my friend &lt;a href="https://twitter.com/calanais"&gt;Matthew White&lt;/a&gt; has already done this with one of the books, &lt;em&gt;Computer Spacegames&lt;/em&gt;, and he has posted a JavaScript re-interpretation on GitHub.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/filscentia"&gt;
        filscentia
      &lt;/a&gt; / &lt;a href="https://github.com/filscentia/spacegames"&gt;
        spacegames
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Tribute to the books that taught me programming - Usbourne's
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;It is also interesting to see what has NOT changed very much... the &lt;em&gt;Keyboards and Computer Music&lt;/em&gt; book has a section on MIDI, for example. The &lt;em&gt;Experiments with Computers&lt;/em&gt; book has a section on sensors (and soldering), which could be adapted to today's Arduino boards and other microcontrollers. Of course, you can &lt;a href="https://www.hackster.io/news/build-your-own-arduino-based-basic-computer-for-just-a-few-dollars-7f4fae398747"&gt;run BASIC on an Arduino&lt;/a&gt;, &lt;a href="https://hackaday.com/2011/08/28/basic-programming-on-an-arduino/"&gt;too&lt;/a&gt;. Also, check out &lt;a href="https://twitter.com/bbcmicrobot/"&gt;@BBCMicrobot&lt;/a&gt;, to run BASIC programs from a Tweet - or &lt;a href="https://www.bbcmicrobot.com/learn/index.html"&gt;learn to write BASIC&lt;/a&gt; on the web.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JN0_Broc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1319723533157629953/pu/img/gQR54nkGZlixkqkV.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--O7aSpOnF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1459364701456855041/8uVdG0kA_normal.jpg" alt="BBC Micro 🦉 Bot profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        BBC Micro 🦉 Bot
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @bbcmicrobot
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Amazing what’s possible in one tweet of code for a 1980s computer. We’re counting down the top tweets of BBC BASIC ever created 🏆&lt;br&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      09:08 AM - 08 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1468507735289335808" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1468507735289335808" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1468507735289335808" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;These books were part of my childhood and education (I'm self-taught in technology), and I'm so happy to find them all available to explore all over again. Maybe you will enjoy them, too! Usborne also have a &lt;a href="https://usborne.com/gb/books/browse-by-category/science-and-technology/computers-and-coding"&gt;current range of introductory programming books available&lt;/a&gt;. &lt;/p&gt;




&lt;p&gt;How did you learn to code? Any particular books that stand out in your memory? I'd love to talk about them, in the comments!&lt;/p&gt;




&lt;p&gt;Side-note: the books are PDFs hosted on Google Drive, and they are completely readable on the web, in Drive's built-in viewer... but for some reason, when I downloaded them to pull them into a collection in Apple Books, they rendered strangely in macOS Preview. In case you see something similar, I was successful in using the &lt;code&gt;repair-pdf&lt;/code&gt; tool &lt;a href="https://github.com/jfilter/pdf-scripts"&gt;in this GitHub repo&lt;/a&gt; to "fix" the PDFs, to a format that worked in Preview and Books.&lt;/p&gt;

</description>
      <category>basic</category>
      <category>books</category>
      <category>education</category>
      <category>history</category>
    </item>
    <item>
      <title>A short list of some helpful VS Code keyboard short cuts.</title>
      <author>Ben Perry</author>
      <pubDate>Mon, 10 Jan 2022 22:38:31 +0000</pubDate>
      <link>https://dev.to/bbperry/a-short-list-of-some-helpful-vs-code-keyboard-short-cuts-1ij5</link>
      <guid>https://dev.to/bbperry/a-short-list-of-some-helpful-vs-code-keyboard-short-cuts-1ij5</guid>
      <description>&lt;p&gt;I decided to write a quick post about helpful Visual Studio Code keyboard shortcuts. I learned some of these shortly after starting my journey into programming. Some of them I learned while doing some research for this blog post, which was my hope to motivate myself to learn more shortcuts. It's great how a little key binding can really boost your productivity and fun while coding. Many of these will be familiar, but they are techniques I wish I had known on day one!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#show-command-palette"&gt;
  &lt;/a&gt;
  Show Command Palette
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Mac&lt;/strong&gt;: &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;⌘&lt;/code&gt; + &lt;code&gt;P&lt;/code&gt; or &lt;code&gt;F1&lt;/code&gt;&lt;br&gt;
  &lt;strong&gt;Windows&lt;/strong&gt;: &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;P&lt;/code&gt; or &lt;code&gt;F1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command provides quick access to the Command Palette. Here you will have a list of all the default commands available and also for any extensions you have added. Try it out and stop reading here unless you want to see my favorites!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#toggle-line-comment"&gt;
  &lt;/a&gt;
  Toggle line comment
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Mac&lt;/strong&gt;: &lt;code&gt;⌘&lt;/code&gt; + &lt;code&gt;/&lt;/code&gt;&lt;br&gt;
  &lt;strong&gt;Windows&lt;/strong&gt;: &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;/&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;One of the first commands I learned that will automatically comment out (or uncomment) lines of code based on which file type you are editing. Select all lines you want comments toggled. It will also comment the line the cursor is on without selection.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-selection-to-next-find-match"&gt;
  &lt;/a&gt;
  Add selection to next Find match
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Mac&lt;/strong&gt;: &lt;code&gt;⌘&lt;/code&gt; + &lt;code&gt;D&lt;/code&gt; &lt;br&gt;
  &lt;strong&gt;Windows&lt;/strong&gt;: &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;D&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I find myself using this one a lot! Select a feature that you want to find duplicates of. Each time the command is entered it will continue to add selection and cursor to the next match. Very useful for editing repeating code like variables all at once!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#select-all-occurrences-of-current-selection"&gt;
  &lt;/a&gt;
  Select all occurrences of current selection
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Mac&lt;/strong&gt;: &lt;code&gt;⌘&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;L&lt;/code&gt;&lt;br&gt;
  &lt;strong&gt;Windows&lt;/strong&gt;: &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;L&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Similar to above except it selects all matching occurrences all at once instead of one by one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#toggle-sidebar-visibility"&gt;
  &lt;/a&gt;
  Toggle Sidebar visibility
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Mac&lt;/strong&gt;: &lt;code&gt;⌘&lt;/code&gt; + &lt;code&gt;B&lt;/code&gt;&lt;br&gt;
  &lt;strong&gt;Windows&lt;/strong&gt;: &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;B&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Quick command if you want to hide your sidebar display and have a larger view of your editing area.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zen-mode"&gt;
  &lt;/a&gt;
  Zen Mode
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Mac&lt;/strong&gt;: &lt;code&gt;⌘&lt;/code&gt; + &lt;code&gt;K&lt;/code&gt; then &lt;code&gt;Z&lt;/code&gt;&lt;br&gt;
  &lt;strong&gt;Windows&lt;/strong&gt;: &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;K&lt;/code&gt; then &lt;code&gt;Z&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Remove distractions and only display your code in full screen. hitting &lt;code&gt;esc&lt;/code&gt; + &lt;code&gt;esc&lt;/code&gt; exits.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-open-go-to-file"&gt;
  &lt;/a&gt;
  Quick Open, Go to File…
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Mac&lt;/strong&gt;: &lt;code&gt;⌘&lt;/code&gt; + &lt;code&gt;P&lt;/code&gt;&lt;br&gt;
  &lt;strong&gt;Windows&lt;/strong&gt;: &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;P&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Instead of searching through your file explorer this command opens up a search bar to quickly find the file your want to navigate to without having to use your mouse.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#navigate-editor-group-history"&gt;
  &lt;/a&gt;
  Navigate editor group history
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;macOS&lt;/strong&gt;: &lt;code&gt;control&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;tab&lt;/code&gt;&lt;br&gt;
  &lt;strong&gt;Windows&lt;/strong&gt;: &lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;tab&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Quickly navigate through files that you have tabs open for.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#access-keyboard-shortcuts"&gt;
  &lt;/a&gt;
  Access Keyboard Shortcuts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Mac&lt;/strong&gt;: ⌘K ⌘S&lt;br&gt;
  &lt;strong&gt;Windows&lt;/strong&gt;: &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;K&lt;/code&gt; then &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;S&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here you can see and search all the keyboard shortcuts, and also change or add new bindings.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrap-with-abbreviation"&gt;
  &lt;/a&gt;
  Wrap with Abbreviation
&lt;/h3&gt;

&lt;p&gt;Unbound by default&lt;/p&gt;

&lt;p&gt;This one is not bound by default but it seems like it could come in handy! In keyboard short cuts search &lt;code&gt;Emmet :Wrap with Abbreviation&lt;/code&gt;. I bound it to &lt;code&gt;⌥&lt;/code&gt; + &lt;code&gt;w&lt;/code&gt;. This will select the code block your cursor is on and you can wrap an HTML tag around the block, for example. Pretty neat!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#format-file-with-prettier-extension"&gt;
  &lt;/a&gt;
  Format File with Prettier extension
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Mac&lt;/strong&gt;: &lt;code&gt;option&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;F&lt;/code&gt;&lt;br&gt;
  &lt;strong&gt;Windows&lt;/strong&gt;: &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;Alt&lt;/code&gt; + &lt;code&gt;F&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I find using the Prettier extension very useful for formatting JavaScript and making it easier to read (pretty, if you will). As a beginner its nice to focus on writing code that works without having to worry as much about formatting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-additional-cursor"&gt;
  &lt;/a&gt;
  Add additional cursor
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Mac&lt;/strong&gt;: &lt;code&gt;option&lt;/code&gt; + &lt;code&gt;mouse click&lt;/code&gt;&lt;br&gt;
  &lt;strong&gt;Windows&lt;/strong&gt;: &lt;code&gt;Alt&lt;/code&gt; + &lt;code&gt;mouse click&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Adds as many additional cursors as you like to edit multiple lines at once!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pdfs-for-vscode-keyboard-shortcuts"&gt;
  &lt;/a&gt;
  PDFs for VSCode keyboard shortcuts
&lt;/h3&gt;

&lt;p&gt;This was just a short list of keyboard shortcuts that I have found handy. Here's are some links to some easy to read documents with more. Try some out, you might find a new favorite!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf"&gt;MacOS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf"&gt;Windows&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Using GitHub Actions</title>
      <author>Simon Foster</author>
      <pubDate>Mon, 10 Jan 2022 21:59:44 +0000</pubDate>
      <link>https://dev.to/funkysi1701/using-github-actions-3jo1</link>
      <guid>https://dev.to/funkysi1701/using-github-actions-3jo1</guid>
      <description>&lt;p&gt;I've been running my website on Azure Static Web Apps for a while and it is pretty cool.&lt;/p&gt;

&lt;p&gt;When you create a Static Web App on Azure you get asked for the github repo of your source code and even the branch to use.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HRYYH7n3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/off7ur2tgsla4smkrhhi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HRYYH7n3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/off7ur2tgsla4smkrhhi.png" alt="GitHub Repo for my Static Web App" width="734" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have selected this, you get asked for the type of code to deploy, mine is Blazor Web Assembly but you can use Angular, React or Vue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S7YIBvRJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ruhzjeujgl1yjxx5lng8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S7YIBvRJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ruhzjeujgl1yjxx5lng8.png" alt="GitHub Actions workflow creation" width="730" height="321"&gt;&lt;/a&gt;&lt;br&gt;
You now have three variables to fill in the location in your code of the Website, the location of your Azure Functions and the output location usually wwwroot. Once you have set these three you can preview the GitHub Actions file that will be created and added to your repository.&lt;/p&gt;

&lt;p&gt;I get something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - feature/tempbranch
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - feature/tempbranch

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' &amp;amp;&amp;amp; github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_&amp;lt;GENERATED_HOSTNAME&amp;gt; }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: "upload"
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: "Client" # App source code path
          api_location: "Api" # Api source code path - optional
          output_location: "wwwroot" # Built app content directory - optional
          ###### End of Repository/Build Configurations ######

  close_pull_request_job:
    if: github.event_name == 'pull_request' &amp;amp;&amp;amp; github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_&amp;lt;GENERATED_HOSTNAME&amp;gt; }}
          action: "close"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This github action will run when you create a Pull Request to the branch mentioned in the file, or if you push code into the branch. This code get added into the .github/workflows/ folder and is the location that all github action workflows live. &lt;/p&gt;

&lt;p&gt;I haven't done much with github actions, however I have used Azure DevOps quite a bit. Over on the Azure DevOps side I have created a pipeline that deploys to a Dev environment, then a Test environment and finally a production environment.&lt;/p&gt;

&lt;p&gt;Lets have a look at the workflow that I ended up with and with can break down how it all works. Note I am new to Github actions so if there is a better way of doing this do let me know.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: Azure Static Web Apps

on:
  push:
    branches:
      - main
      - develop
      - feature/*

jobs:
  dev:
    runs-on: ubuntu-latest
    environment: 
      name: Dev
    name: Dev
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_ORANGE_POND_09B18B903  }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: "upload"
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: "Blog" # App source code path
          api_location: "Blog.Func" # Api source code path - optional
          output_location: "wwwroot" # Built app content directory - optional
          ###### End of Repository/Build Configurations ######
  test:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: 
      name: Test
    name: Test
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_WITTY_DUNE_0A1A77903  }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: "upload"
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: "Blog" # App source code path
          api_location: "Blog.Func" # Api source code path - optional
          output_location: "wwwroot" # Built app content directory - optional
          ###### End of Repository/Build Configurations ######
  prod:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: 
      name: Prod
    name: Prod
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_BRAVE_ROCK_0AAC63D03 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: "upload"
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: "Blog" # App source code path
          api_location: "Blog.Func" # Api source code path - optional
          output_location: "wwwroot" # Built app content directory - optional
          ###### End of Repository/Build Configurations ######     
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first thing I did was create three Azure Static Web Apps, I am using the free tier so while this is trippling my costs it is all still free! Doing this created three github action workflow files, I deleted two and edited the third, but before I deleted them I made a note of the AZURE_STATIC_WEB_APPS_API_TOKEN. If you look in your settings -&amp;gt; secrets for your repo you will see secrets have been created, this is the secure token that github uses to update your static web app.&lt;/p&gt;

&lt;p&gt;While we are in settings we might as well look at environments. I created a Prod, Test and Dev environment that I was going to use in my github actions.&lt;/p&gt;

&lt;p&gt;Environments can have various rules setup on them. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Required reviewers - this is like an approver, a user specified here must aprove for the workflow to be deployed&lt;/li&gt;
&lt;li&gt;Wait time - I didn't use this, but it looks like a certain amount of time can be set to pause the deployment. (I assume to do some kind of manual check)&lt;/li&gt;
&lt;li&gt;Deployment Branch - specify what branch are allowed to be deployed to what environments. I specified develop, main and feature branches could be deployed to the Dev environment, develop and main could go on Test and main could go on Prod &lt;/li&gt;
&lt;li&gt;Environment secrets - I didn't use this as my secrets were already created, however it looks like your secrets can be associated with a specific environment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we have the static web apps setup and the environments lets look at the github action file.&lt;/p&gt;

&lt;p&gt;First of all I removed the PR stuff and just concentrated on pushes. I wanted my workflow to be.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Push to feature branch&lt;/li&gt;
&lt;li&gt;Deploys to Dev env&lt;/li&gt;
&lt;li&gt;PR feature branch to develop&lt;/li&gt;
&lt;li&gt;Once merged code gets pushed into develop&lt;/li&gt;
&lt;li&gt;Deploys to Test env&lt;/li&gt;
&lt;li&gt;PR develop to main&lt;/li&gt;
&lt;li&gt;Once merged code gets pushed into main&lt;/li&gt;
&lt;li&gt;Deploys to Prod env (after approval)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The approval on deploying to production I think is probably overkill, but I still have it setup like that for now.&lt;/p&gt;

&lt;p&gt;My gh action has three jobs defined as dev: test: and prod: they are all the same except they have the azure_static_web_apps_api_token that is correct for their environment. &lt;/p&gt;

&lt;p&gt;They also each have a environment defined eg&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;environment:
  name: Prod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly Test and Prod have an if test setup, if the test is false the job won't run. Importantly it won't fail it just won't run.&lt;/p&gt;

&lt;p&gt;For Prod this needs to only run on main branch so we have&lt;/p&gt;

&lt;p&gt;if: github.ref == 'refs/heads/main'&lt;/p&gt;

&lt;p&gt;For Test this needs to only run on develop so&lt;/p&gt;

&lt;p&gt;if: github.ref == 'refs/heads/develop'&lt;/p&gt;

&lt;p&gt;I could have a test for develop to only run on feature/* but I have allowed it to run everytime.&lt;/p&gt;

&lt;p&gt;There is loads more you can do with github actions, but hopefully this gives you a taste of some of the things you can do. I currently have a mix of Azure DevOps and github actions so I will be working on getting github actions to do more.&lt;/p&gt;

</description>
      <category>github</category>
      <category>devopspipeline</category>
    </item>
    <item>
      <title>VoIP vs Non - Advantages and disadvantages</title>
      <author>R Coder</author>
      <pubDate>Mon, 10 Jan 2022 21:52:22 +0000</pubDate>
      <link>https://dev.to/rcoderdotcom/voip-vs-non-advantages-and-disadvantages-4ilp</link>
      <guid>https://dev.to/rcoderdotcom/voip-vs-non-advantages-and-disadvantages-4ilp</guid>
      <description>&lt;p&gt;You've probably heard of the term Voice over Internet Protocol (VoIP) systems, and how they differ from traditional landlines.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vMBtVNcR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m49st8rxr1rgm1dl0h4f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vMBtVNcR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m49st8rxr1rgm1dl0h4f.png" alt="voip" width="880" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But if you're unsure, &lt;strong&gt;VoIP systems basically refer to technologies that allow voice and video communication via internet connection.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But here is where it gets complicated, it turns out that there are VoIP and Non VoIP phone numbers, I will try to explain this as best as possible as it is a bit confusing at the beginning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VoIP and Non VoIP belong to one category:&lt;/strong&gt; &lt;a href="https://www.majorphones.com/virtual-numbers-what-are-they/"&gt;Virtual Numbers&lt;/a&gt;, and they both have the same technology have in common.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But first of all. What are virtual phone numbers?&lt;/strong&gt; They are those that allow people to communicate through the internet, and using this valuable tool you can communicate with any number in the world and still be as cheap as calling from a conventional phone number (this is one of the main advantages of virtual phone numbers). Another advantage is that they are not tied to any physical location (sometimes they are), this means that they protect your privacy very well, however Non VoIP numbers have a greater advantage over VoIP.&lt;/p&gt;

&lt;p&gt;Now, Non VoIP phone numbers belong to the group of VoIP numbers but are not limited to any geographical location, and are not tied to any equipment, which means, calls can be made through computers, phones, tablets and everything you can think of.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But how do they work?&lt;/strong&gt; In the same way as &lt;a href="https://www.nextiva.com/blog/voip-number.html#:~:text=A%20VoIP%20number%2C%20also%20known,number%20accessible%20to%20the%20public."&gt;VoIP phone numbers&lt;/a&gt;, however if you receive a call or text message, any device that is linked to that phone number will ring and the recipient can use any of the devices to answer the message/call. This is a big plus.&lt;/p&gt;

&lt;p&gt;One of the clearest benefits is that we can affiliate our entire technical support team to multiple devices and they can all receive the information and respond to it in a much more efficient manner.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;However, VoIP numbers have a disadvantage here: 1 VoIP number = 1 purpose.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How are they configured?&lt;/strong&gt;&lt;br&gt;
Well, actually the configuration is very similar to VoIP numbers (Using SIP). In the case of companies like &lt;a href="https://www.twilio.com/"&gt;Twillio&lt;/a&gt;, you simply buy the phone number and use the language of your choice to connect their API to your development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What Is SIP?&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Session_Initiation_Protocol"&gt;The Session Initiation Protocol (SIP)&lt;/a&gt; is one underlying technology that makes VoIP possible. This is a text-based protocol similar to HTML. It's the most commonly used standard for setting up and controlling phone calls in most VoIP systems. You'll run across references to SIP in almost anything you do with these kinds of phone systems, especially when you're selecting any handset hardware you want to use.&lt;/p&gt;

&lt;p&gt;What makes SIP so popular is not only that it's deep and flexible, but also because it was purpose-built to engage in multimedia (meaning not just audio but also video and even text) communications over TCP/IP networks. For VoIP and Non-VoIP calls, SIP can set up calls using a number of IP-related protocols, including the Stream Control Transmission Protocol (SCTP), the Transmission Control Protocol (TCP), and the User Datagram Protocol (UDP), among others.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But it's not all pretty. There is a big problem with Non VoIP numbers.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The main one is that many people take advantage of this type of technology to perform Spam and this is really a problem because spam filters can identify and erroneously block incoming calls from companies that use non fixed VoIP phone numbers.&lt;/p&gt;

&lt;p&gt;Another problem to consider is the following: Since Non-VoIP numbers are not tied to a physical location then in case of an emergency of any kind, these agencies will not be able to track your location.&lt;/p&gt;

&lt;p&gt;However, depending on the project you are developing this can be a strong point, since if you use a proxy or &lt;a href="https://brightdata.com/blog/guest-post/residential-proxies-web-scraping#:~:text=24%2DOct%2D2019,also%20concealing%20your%20IP%20address."&gt;residential vpn&lt;/a&gt; then you will have almost absolute anonymity. Of course it also depends on other factors such as DNS, or the &lt;a href="https://en.wikipedia.org/wiki/WebRTC"&gt;WEBRTC protocol.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Ta9qtgJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55ogffmyufs466gwg2n7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Ta9qtgJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55ogffmyufs466gwg2n7.png" alt="webrtc" width="322" height="157"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another point against is that most of the Non-VoIP phone number providers do not have API to automate their services, compared to companies like Twillio, &lt;a href="https://www.vonage.com/"&gt;Vonage&lt;/a&gt;, &lt;a href="https://www.nextiva.com/"&gt;Nextiva&lt;/a&gt; among others.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But the Achilles heel of VoIP and &lt;a href="https://www.majorphones.com/"&gt;Non VoIP&lt;/a&gt; technologies in developing countries is the Internet.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lUDijCCV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0g898xo39rcgwcmjdgjy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUDijCCV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0g898xo39rcgwcmjdgjy.jpg" alt="internet" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most VoIP solutions will require stable and consistent internet connectivity at all your office locations. At the very least, your business phone system must have access to a business-class internet link, so discuss these needs with your company's internet service provider (ISP). This should be a dedicated link through a dedicated router if you expect your phone calls to sound as if they were coming from a business and not someone's home Skype connection. At a minimum, it's important to have a router that can create virtual LANs (VLANs) and also has the ability to encrypt your voice traffic. These days, you need end-to-end VoIP security for any call.&lt;/p&gt;

&lt;p&gt;For larger systems, and for systems where security is critical for things like being compliant to vertical regulatory needs, your current internet connection might not be adequate. The internet doesn't do quality of service &lt;a href="https://en.wikipedia.org/wiki/Quality_of_service"&gt;(QoS)&lt;/a&gt;, and bandwidth can be unpredictable. Network congestion can ruin a conference call, and activities such as DNS hijacking can put your business and data at risk.&lt;/p&gt;

&lt;p&gt;Well, in general you have an idea of the advantages and disadvantages of Non VoIP vs VoIP numbers&lt;/p&gt;

&lt;p&gt;See you in a future Post! Possibly about R Studio vs Matlab!&lt;/p&gt;

</description>
      <category>voip</category>
      <category>sip</category>
      <category>nonvoip</category>
      <category>virtualnumber</category>
    </item>
    <item>
      <title>What machine learning can learn from Ruby on Rails</title>
      <author>Isabella Tromba</author>
      <pubDate>Mon, 10 Jan 2022 21:47:52 +0000</pubDate>
      <link>https://dev.to/tangram/what-machine-learning-can-learn-from-ruby-on-rails-4epg</link>
      <guid>https://dev.to/tangram/what-machine-learning-can-learn-from-ruby-on-rails-4epg</guid>
      <description>&lt;p&gt;I wrote my first end-to-end functioning web application using Ruby on Rails in &lt;a href="https://stellar.mit.edu/S/course/6/sp13/6.170/index.html"&gt;a class at MIT (6.170)&lt;/a&gt; in 2013. There were things that Rails automatically handled for me that I didn’t even realize were hard to do. Running &lt;code&gt;rails new&lt;/code&gt; just set up a completely functioning application. I never had to consider all of the components I would need to string together. Database migrations, routing, run and deploy scripts, tests, handling static assets, and more worked out of the box and the documentation clearly described how to build every part of my application. In fact, I assumed that writing web applications should always be this easy because I had never tried to write one from scratch. I was the beginner benefiting from my own ignorance that DHH talks about in &lt;a href="https://rubyonrails.org/doctrine/"&gt;The Rails Doctrine&lt;/a&gt;!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But beyond the productivity gains for experts, conventions also lower the barriers of entry for beginners. There are so many conventions in Rails that a beginner doesn’t even need to know about, but can just benefit from in ignorance. It’s possible to create great applications without knowing why everything is the way it is.&lt;/p&gt;

&lt;p&gt;That’s not possible if your framework is merely a thick textbook and your new application a blank piece of paper. It takes immense effort to even figure out where and how to start. Half the battle of getting going is finding a thread to pull.&lt;/p&gt;

&lt;p&gt;- DHH, The Rails Doctrine&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A couple of years later, as a machine learning engineer at Slack, getting machine learning into production felt a lot more like "the framework as a thick textbook" and my application as "a blank piece of paper" that DHH talks about in the Rails Doctrine.&lt;/p&gt;

&lt;p&gt;To make things even worse, try googling “how to learn machine learning”. The steps involved start looking like the curriculum required to obtain a PhD in Statistics, Math, and Computer Science.&lt;/p&gt;

&lt;p&gt;The problems don’t end once you have successfully trained a model. You still have to figure out how to get your model into production. The code you wrote in your jupyter notebook needs to be translated into code that can be deployed. An entirely new job called “Machine Learning Engineer” was created just to solve this problem.&lt;/p&gt;

&lt;p&gt;In the Rails Doctrine, there is a section on “Value Integrated Systems”. DHH says that Rails is “A whole system that addresses an entire problem.”&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Rails can be used in many contexts, but its first love is the making of integrated systems: Majestic monoliths! A whole system that addresses an entire problem. This means Rails is concerned with everything from the front-end JavaScript needed to make live updates to how the database is migrated from one version to another in production.&lt;/p&gt;

&lt;p&gt;That’s a very broad scope, as we’ve discussed, but no broader than to be realistic to understand for a single person. Rails specifically seeks to equip generalist individuals to make these full systems. Its purpose is not to segregate specialists into small niches and then require whole teams of such in order to build anything of enduring value.&lt;/p&gt;

&lt;p&gt;- DHH, The Rails Doctrine&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One sentence in that section really stuck out to me: "Its [Rails'] purpose is not to segregate specialists into small niches and then require whole teams of such in order to build anything of enduring value". Today, this is exactly what companies are doing to get machine learning into production. They are required to assemble a team of specialists including Data Scientists, Machine Learning Engineers, Backend Engineers and Ops teams.&lt;/p&gt;

&lt;p&gt;It would be great if we had something like Ruby on Rails for machine learning: a single system that provides the tools you need to go from data to a deployed machine learning model.  Just as DHH says "rails specifically seeks to equip generalist individuals to make these full system", we need tools to equip generalist programmers, like front-end javascript engineers or back-end ruby programmers, to build full machine learning systems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-tangram"&gt;
  &lt;/a&gt;
  Introducing Tangram
&lt;/h2&gt;

&lt;p&gt;Tangram is an all-in-one automated machine learning framework that makes it easy to add machine learning to your applications. Predictions happens directly in your existing applications so there are no network requests and there is no need to set up a separate service to serve your models.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;tangram train&lt;/code&gt; to train a model from a CSV file on the command line.&lt;/li&gt;
&lt;li&gt;Make predictions with bindings for &lt;a href="https://rubygems.org/gems/tangram"&gt;Ruby&lt;/a&gt;, &lt;a href="https://pypi.org/project/tangram"&gt;Python&lt;/a&gt;, &lt;a href="https://pkg.go.dev/github.com/tangramdotdev/tangram-go"&gt;Golang&lt;/a&gt;, &lt;a href="https://hex.pm/packages/tangram"&gt;Elixir&lt;/a&gt;, &lt;a href="https://www.npmjs.com/package/@tangramdotdev/tangram"&gt;Javascript&lt;/a&gt;, &lt;a href="https://packagist.org/packages/tangram/tangram"&gt;PHP&lt;/a&gt;, or &lt;a href="https://lib.rs/tangram"&gt;Rust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;tangram app&lt;/code&gt; to start a web application where you can learn more about your models and monitor them in production.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check out the &lt;a href="https://rubygems.org/gems/tangram"&gt;Tangram Ruby Gem&lt;/a&gt;. We built it using Ruby FFI and the source is available on our &lt;a href="https://github.com/tangramdotdev/tangram/tree/main/languages/ruby"&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tangram is a new project and there is a lot of work ahead. We’d love to get your feedback. Check out the project on &lt;a href="https://github.com/tangramdotdev/tangram"&gt;GitHub&lt;/a&gt;, and let us know what you think! If you like what we are working on, &lt;a href="https://github.com/tangramdotdev/tangram"&gt;give us a star&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>ruby</category>
      <category>rails</category>
    </item>
  </channel>
</rss>
