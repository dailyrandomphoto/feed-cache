<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>HTML attributes that will reduce your CSS </title>
      <author>Stas Melnikov</author>
      <pubDate>Mon, 21 Jun 2021 15:29:17 +0000</pubDate>
      <link>https://dev.to/melnik909/html-attributes-that-will-reduce-your-css-4lag</link>
      <guid>https://dev.to/melnik909/html-attributes-that-will-reduce-your-css-4lag</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-type-attribute"&gt;
  &lt;/a&gt;
  The type attribute
&lt;/h2&gt;

&lt;p&gt;There is a practice to use extra classes when we create a custom checkbox and radio button. People just add classes such as checkbox or radio. Why isn't well? In this way, we increase the probability of using CSS duplication. For example, you have to duplicate the background-* property, i.e. background-position. &lt;/p&gt;

&lt;p&gt;That's not nice. I suggest fixing it.  We can create a single class where we define common CSS for checkboxes and radio buttons. For example, we define the background-position, background-size, etc. &lt;/p&gt;

&lt;p&gt;The next step is to define different properties. For example, to set the icons' sources using a few the background-image. At this point the main magic of my way is. &lt;/p&gt;

&lt;p&gt;We have to add different values to the type attribute of the input. When we need a checkbox we use the checkbox, when a radio button - the radio. So we can use the attribute selector to avoid extra classes. We can write checkboxes only styles using the [type="checkbox"] selector and the [type="radio"] selector for radio buttons. In this way, we avoid duplication CSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"checkbox__input"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"checkbox__text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;show all&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"radio__input"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"radio__text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;show all&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.checkbox__text&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("checkbox_unchecked.svg")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.checkbox__input&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.checkbox__text&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("checkbox_checked.svg")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.radio__text&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("radio_unchecked.svg")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.radio__input&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.radio__text&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("radio_checked.svg")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toggle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toggle__input"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toggle__text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;show all&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toggle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toggle__input"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toggle__text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;show all&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.toggle__text&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.toggle__input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"checkbox"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.toggle__text&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("checkbox_unchecked.svg")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.toggle__input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"checkbox"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.toggle__text&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("checkbox_checked.svg")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.toggle__input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"radio"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.toggle__text&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("radio_unchecked.svg")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.toggle__input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"radio"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.toggle__text&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("radio_checked.svg")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-hidden-attribute"&gt;
  &lt;/a&gt;
  The hidden attribute
&lt;/h2&gt;

&lt;p&gt;A lot of UI elements have a few states, i.e. showing and hiding. The popular method to create a hiding state is to use a separate class in which you define the display: none. So you get the 2 at-rule. &lt;/p&gt;

&lt;p&gt;I like to do things differently. I try to save my CSS short to avoid overriding properties. In this task I like to use the approach that is based on the hidden attribute and the :not() pseudo-class. &lt;/p&gt;

&lt;p&gt;The hidden attribute hides elements. It just adds the display: none to elements. So I can say, I want to add CSS to the element when it isn't hidden. And at this moment the :not() pseudo-class comes to help.&lt;/p&gt;

&lt;p&gt;I just write :not([hidden]) and I get what I want. And I don't need to add classes or remember about the selector's specificity. I get short CSS.&lt;/p&gt;

&lt;p&gt;The single minus is you need to remember the hidden attribute hide an element from users, keyboard, screen readers. It will not be accessible fully. So if you want to use my approach remember about this nuance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modal"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modal modal--active"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.modal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.modal--active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modal"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modal"&lt;/span&gt; &lt;span class="na"&gt;hidden&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.modal&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="nt"&gt;hidden&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; If you like these tips go to read others on my &lt;a href="https://www.linkedin.com/in/melnik909/"&gt;Linkedin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.S.&lt;/strong&gt; This post was written with the support of my patrons: Ashlea Gable, Ben Rinehart, Sergio Kagiema, Vlad Bazhanov, Spiridon Konofaos, Jesse Willard, Tanya Ten.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Naming (in code) - The ultimate guide and reference</title>
      <author>Spyros Argalias</author>
      <pubDate>Mon, 21 Jun 2021 15:04:27 +0000</pubDate>
      <link>https://dev.to/sargalias/naming-in-code-the-ultimate-guide-and-reference-1hhe</link>
      <guid>https://dev.to/sargalias/naming-in-code-the-ultimate-guide-and-reference-1hhe</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MsqQCfq5xNY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://programmingduck.com/articles/programming-principles"&gt;Programming principles&lt;/a&gt; tell us that naming in code is important. This article aims to be a complete learner's guide for naming in code. It also aims to be a reference about naming that you can refer to in the future if you need to.&lt;/p&gt;

&lt;p&gt;For certain things, such as naming methods, there are different naming conventions. We'll mention a few so that you're aware of how they work and the options you can choose from.&lt;/p&gt;

&lt;p&gt;Overall, we'll examine:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the motivation for wanting good names&lt;/li&gt;
&lt;li&gt;general naming tips for all code&lt;/li&gt;
&lt;li&gt;established naming conventions for specific things such as variables and classes&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#motivation-for-good-names"&gt;
  &lt;/a&gt;
  Motivation for good names
&lt;/h2&gt;

&lt;p&gt;The motivation for good names comes from clean code and programming principles. Code should be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;immediately obvious and easy to understand&lt;/li&gt;
&lt;li&gt;easy to change&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Being easy to understand helps because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;code that's easy to understand will be faster to understand. This means that you can work faster. You'll spend less time trying to understand old code and more time writing new code.&lt;/li&gt;
&lt;li&gt;code will be possible to understand. In comparison, if some code is difficult to understand, you may not understand it even after spending a long time reading it. Someone who's less experienced may have even worse luck. Additionally, you may misunderstand how the code works, especially if you're not fully paying attention that day. Misunderstanding code makes it very easy to create bugs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good names help with both cases.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-good-names-make-code-faster-to-understand"&gt;
  &lt;/a&gt;
  How good names make code faster to understand
&lt;/h3&gt;

&lt;p&gt;If something is well-named, then you don't need further details to understand it. This saves you time.&lt;/p&gt;

&lt;p&gt;For example, consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a function named &lt;code&gt;printHelloToTheScreen&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;a function named &lt;code&gt;multiplyBy2&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;a constant named &lt;code&gt;PI&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;a constant named &lt;code&gt;MAXIMUM_ALLOWED_LOGIN_ATTEMPTS&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;a static class or module named &lt;code&gt;Math&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;a variable named &lt;code&gt;circumference&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;a variable named &lt;code&gt;userInfo&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a codebase, you would have a pretty good idea of what those do just from the name.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-good-names-make-code-easier-to-understand"&gt;
  &lt;/a&gt;
  How good names make code easier to understand
&lt;/h3&gt;

&lt;p&gt;When reading code, you have to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;read (parse) what it does&lt;/li&gt;
&lt;li&gt;understand why it does it, or rather, understand what it's trying to do conceptually&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example, it's not enough to think "this code removes initial whitespace from the string, then it sends a network request". Instead, you have to understand "this code formats the username and then sends a password reset request".&lt;/p&gt;

&lt;p&gt;Here's a code example that's difficult to understand:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's the &lt;code&gt;8&lt;/code&gt; there for? What's &lt;code&gt;b&lt;/code&gt;? Why does it return a minimum of &lt;code&gt;1&lt;/code&gt;? What's the purpose of this function?&lt;/p&gt;

&lt;p&gt;If you're trying to do something such as change the area, you don't know if this function is relevant or not. Even if you suspect it is, you don't know what it does or why.&lt;/p&gt;

&lt;p&gt;Something like this would be much better:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;calculateRemainingArea&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reductionFactor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;remainingArea&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;area&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;AREA_REDUCTION_RESISTANCE&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;reductionFactor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;remainingArea&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MINIMUM_AREA&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, good names help, because &lt;strong&gt;they provide meaning&lt;/strong&gt;. They help you understand what the code does and why it does it.&lt;/p&gt;

&lt;p&gt;To get the benefit, all you have to do is give a good name to the thing.&lt;/p&gt;

&lt;p&gt;As another example, someone may not understand &lt;code&gt;PI * a ** 2&lt;/code&gt;. They may think "&lt;code&gt;PI&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;, power of 2... What the heck is that??". To make it easier, all you have to do is replace that line with &lt;code&gt;const circleArea = PI * radius ** 2&lt;/code&gt;. It helps a lot.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j-IkFGuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0dqm30mgtmw2sx6go4d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j-IkFGuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0dqm30mgtmw2sx6go4d.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-naming-tips-for-code"&gt;
  &lt;/a&gt;
  General naming tips for code
&lt;/h2&gt;

&lt;p&gt;In short, a good name is something that immediately tells you what something is or does. It's not surprising. It doesn't take effort to understand it. You understand it without thinking about it.&lt;/p&gt;

&lt;p&gt;A bad name is something that you read and you wonder "what's that", or "what does that do?". Something that requires you to think more.&lt;/p&gt;

&lt;p&gt;When writing names, they should be understandable by someone that's never seen this code before. They need to make sense, be consistent and be sufficiently descriptive.&lt;/p&gt;

&lt;p&gt;Here are some pointers to accomplish this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#have-clear-naming-conventions"&gt;
  &lt;/a&gt;
  Have clear naming conventions
&lt;/h3&gt;

&lt;p&gt;Your codebase should have clear conventions. This is probably the most important point in this article. If you're already following a convention, it's probably best to stick to it, even if an alternative may be more descriptive.&lt;/p&gt;

&lt;p&gt;Conventions apply consistency. &lt;a href="https://programmingduck.com/articles/programming-principles"&gt;Programming principles&lt;/a&gt; tell us that consistency is very important.&lt;/p&gt;

&lt;p&gt;It allows you to work faster. You can make certain assumptions about how the code works and what certain things mean. Additionally, when thinking of a name for something, the convention may already have a rule for it. This makes things easier.&lt;/p&gt;

&lt;p&gt;Also, not following conventions can cause mistakes. You may assume that a common convention is being followed in the codebase. If you're wrong, then you may have the wrong idea about how some code works. At that point, it's very easy to create bugs.&lt;/p&gt;

&lt;p&gt;Ideally, you should follow conventions that already exist in your programming language or framework. This makes things easier for new developers to the company. Some examples are the &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-guidelines"&gt;.NET naming guidelines&lt;/a&gt; and &lt;a href="https://github.com/airbnb/javascript"&gt;Airbnb JavaScript style guide&lt;/a&gt;. Otherwise, you can also create your own custom conventions for your project or company.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prefer-descriptive-names"&gt;
  &lt;/a&gt;
  Prefer descriptive names
&lt;/h3&gt;

&lt;p&gt;Always consider, will the next person who looks at this name understand it easily?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#use-full-words"&gt;
  &lt;/a&gt;
  Use full words
&lt;/h4&gt;

&lt;p&gt;Generally, full words are easier to understand. For example &lt;code&gt;calculateArea&lt;/code&gt; or &lt;code&gt;createWindow&lt;/code&gt;. Abbreviated words may be harder to understand. In general, avoid names like &lt;code&gt;calcArea&lt;/code&gt; or &lt;code&gt;cWin&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#avoid-very-short-variable-names"&gt;
  &lt;/a&gt;
  Avoid very short variable names
&lt;/h4&gt;

&lt;p&gt;In particular, avoid single-letter or very short variables, such as &lt;code&gt;d&lt;/code&gt;. It could mean anything: the &lt;code&gt;document&lt;/code&gt;, &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;date&lt;/code&gt;, or &lt;code&gt;days&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The exception to this is when the name is used in a very small scope and what it represents is immediately obvious. In this case, it's easy to look one or two lines up and see where it was defined. Here's a code example using the variable &lt;code&gt;e&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sendData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* sends a network request */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleFormSubmission&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;sendData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the variable &lt;code&gt;e&lt;/code&gt; represents the event object. We know this because the name &lt;code&gt;handleFormSubmission&lt;/code&gt; and the function signature represent an event handler. &lt;code&gt;e&lt;/code&gt; is only used one line under where it is defined, so it's still easy to work with.&lt;/p&gt;

&lt;p&gt;Nevertheless, I would still personally use &lt;code&gt;event&lt;/code&gt;. I consider readability more important than minor saving of keystrokes like that.&lt;/p&gt;

&lt;p&gt;Another acceptable example is using &lt;code&gt;i&lt;/code&gt; in for loops and such. That's a convention that everyone understands.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#acronyms"&gt;
  &lt;/a&gt;
  Acronyms
&lt;/h4&gt;

&lt;p&gt;If an acronym is very common, then it's okay to use it. Some examples are the acronyms HTML, UI, IO, OS, JSON, XML, HTTP.&lt;/p&gt;

&lt;p&gt;If an acronym is uncommon, then prefer the fully expanded name. If in doubt, you should probably use the full version.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conciseness-matters"&gt;
  &lt;/a&gt;
  Conciseness matters
&lt;/h3&gt;

&lt;p&gt;Names that are sufficiently descriptive come first. However, that doesn't mean that you need super long names.&lt;/p&gt;

&lt;p&gt;Super long names, such as a variable named &lt;code&gt;integerNumberOfEnginesInObject&lt;/code&gt; are difficult to work with. &lt;code&gt;engineCount&lt;/code&gt; would be sufficient.&lt;/p&gt;

&lt;p&gt;In general, if you can have the same clarity with a shorter name, use the shorter name.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consider-the-context"&gt;
  &lt;/a&gt;
  Consider the context
&lt;/h3&gt;

&lt;p&gt;The name of the surrounding context can provide useful clues for the purpose of something. This means that sometimes, you can get away with using shorter names.&lt;/p&gt;

&lt;p&gt;For example, if you have a class called &lt;code&gt;Users&lt;/code&gt;, then the method for creating a new user can be called &lt;code&gt;create&lt;/code&gt;. The usage of it would be something like &lt;code&gt;users.create()&lt;/code&gt; (where &lt;code&gt;users&lt;/code&gt; is an instance of &lt;code&gt;Users&lt;/code&gt;). That's sufficiently descriptive. You don't need to call the method &lt;code&gt;createUser&lt;/code&gt; in this case.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#casing"&gt;
  &lt;/a&gt;
  Casing
&lt;/h3&gt;

&lt;p&gt;The prevalent casings in programming (excluding HTML and CSS) are pascal case, camel case and snake case. The one you use depends on the conventions for your programming language or framework.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#general-format-of-each-casing"&gt;
  &lt;/a&gt;
  General format of each casing
&lt;/h4&gt;

&lt;p&gt;Snake casing is lower cased and uses underscores to separate words. For example &lt;code&gt;this_is_snake_case&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In pascal casing, every word begins with a capital letter. For example &lt;code&gt;ThisIsPascalCase&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Camel casing is similar to pascal casing, except that the first word begins with a lowercase letter. For example &lt;code&gt;thisIsCamelCase&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#casing-for-acronyms"&gt;
  &lt;/a&gt;
  Casing for acronyms
&lt;/h4&gt;

&lt;p&gt;For acronyms, the conventions vary.&lt;/p&gt;

&lt;p&gt;On the front end, it seems that acronyms are always fully capitalised, regardless of length. Some examples are &lt;code&gt;performance.toJSON()&lt;/code&gt;, &lt;code&gt;XMLDocument&lt;/code&gt;, &lt;code&gt;HTMLCollection&lt;/code&gt; and &lt;code&gt;DOMString&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, in some other languages, such as the .NET languages, the convention is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if an acronym is only two letters long, the second letter should have the same casing (upper or lower case) as the first one. For example, &lt;code&gt;UIInput&lt;/code&gt; (pascal case), &lt;code&gt;uiInput&lt;/code&gt; (camel case) and &lt;code&gt;fooUIInput&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;if an acronym is three letters or longer, only the first letter should be capitalised if necessary. For example &lt;code&gt;JsonFoo&lt;/code&gt; (pascal case), &lt;code&gt;jsonFoo&lt;/code&gt; (camel case).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#capitalisation-for-compound-words"&gt;
  &lt;/a&gt;
  Capitalisation for compound words
&lt;/h4&gt;

&lt;p&gt;It's a convention to treat compound words as one word in terms of capitalisation. For example, use &lt;code&gt;callback&lt;/code&gt; and &lt;code&gt;endpoint&lt;/code&gt; instead of &lt;code&gt;callBack&lt;/code&gt; and &lt;code&gt;endPoint&lt;/code&gt;. You can find a thorough list of common compound words, used in programming, on the &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions"&gt;.NET naming guidelines on capitalisation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prefer-semantic-naming"&gt;
  &lt;/a&gt;
  Prefer semantic naming
&lt;/h3&gt;

&lt;p&gt;Semantic naming means to name something after its purpose or meaning. In order of priority, this means:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;what the purpose of it is, or what it does&lt;/li&gt;
&lt;li&gt;how it does it&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As a bonus, it also results in code that is less likely to change in the future.&lt;/p&gt;

&lt;p&gt;When naming things, consider: what's the most important thing about the thing you're naming? What's the most suitable name for someone else to understand it conceptually?&lt;/p&gt;

&lt;p&gt;Usually, users care more about what something is doing, rather than how it's doing it. Although, sometimes, it's the "how" that's the most important.&lt;/p&gt;

&lt;p&gt;Here are some examples of semantic naming.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example-with-a-variable-name"&gt;
  &lt;/a&gt;
  Example with a variable name
&lt;/h4&gt;

&lt;p&gt;If you have a variable that holds a collection of users, the important part is that it contains users. Whether it's a list or a map is less important. Not to mention that your IDE and type declarations provide that information anyway.&lt;/p&gt;

&lt;p&gt;Therefore, the name:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;users&lt;/code&gt; would be suitable&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;userList&lt;/code&gt; is less preferable. The "list" part is less important than the &lt;code&gt;users&lt;/code&gt; part. Also, if you change the data structure in the future you'll have to update the variable name.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;userCollection&lt;/code&gt; is also less preferable, because the "collection" part is less important than the "user" part. However, at least you won't have to update the variable name if you change the data structure in the future.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#example-with-interfaces-and-implementations"&gt;
  &lt;/a&gt;
  Example with interfaces and implementations
&lt;/h4&gt;

&lt;p&gt;In OOP code, you tend to have interfaces with potentially multiple implementations. An interface may be called something semantic and generic, such as &lt;code&gt;Sorter&lt;/code&gt;, for a sorting algorithm. That's the significant thing about it, the fact that it sorts. The how isn't important at the interface level.&lt;/p&gt;

&lt;p&gt;The different implementations can be called after the sorting algorithm they implement. That's the important thing about them and the only thing that separates them from one another. It's the information a user of that specific class would want. For example &lt;code&gt;BubbleSort&lt;/code&gt;, &lt;code&gt;MergeSort&lt;/code&gt;, &lt;code&gt;Quicksort&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example-with-a-method-for-sorting"&gt;
  &lt;/a&gt;
  Example with a method for sorting
&lt;/h4&gt;

&lt;p&gt;Imagine that you have a class containing a collection of something. You also have a method for sorting it, say, alphabetically.&lt;/p&gt;

&lt;p&gt;If you only have one sorting method, then it would be preferable to name it &lt;code&gt;sort&lt;/code&gt;. A name such as &lt;code&gt;sortWithQuicksort&lt;/code&gt; or &lt;code&gt;quicksort&lt;/code&gt; would be unnecessary information that the user doesn't care about. If you think about it, the caller of the code wants to sort. They aren't particularly interested in the specific algorithm your class uses. (The only exception is if your class is an actual bottleneck to performance or something, but that's a different topic.)&lt;/p&gt;

&lt;p&gt;Additionally, in the future, you may change the sorting algorithm that the class uses to merge sort. In that case, the name &lt;code&gt;sortWithQuicksort&lt;/code&gt; wouldn't make sense any more.&lt;/p&gt;

&lt;p&gt;The solution is to name your public method &lt;code&gt;sort&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The fact that you're using quicksort is still important. Developers working on the implementation of the class would want to know that. Some options for that are to have a private method named &lt;code&gt;quicksort&lt;/code&gt;, or import and use a &lt;code&gt;quicksort&lt;/code&gt; function from somewhere else in the codebase.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pseudocode&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Users&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// the public method with a name that's useful to callers&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;Sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;_quicksort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// the private method with a name that's userful to someone working on this class&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;_quicksort&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* implementation of quicksort */&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#example-with-front-end-css"&gt;
  &lt;/a&gt;
  Example with front end CSS
&lt;/h4&gt;

&lt;p&gt;In front end CSS, there are a few approaches. The approach you choose decides what's important about the name of your class.&lt;/p&gt;

&lt;p&gt;When using the BEM naming convention, the important thing is the purpose of the element, not the styling. For example, you would use the CSS class &lt;code&gt;page-heading&lt;/code&gt; instead of &lt;code&gt;large-heading-red&lt;/code&gt;. That's because, tomorrow, the styling of the page heading may change. At that point, the non-semantic name won't make sense anymore, but the semantic name will.&lt;/p&gt;

&lt;p&gt;If you're using a UI component library, then the styling of the component is more important than the purpose of the component. For example &lt;code&gt;button-primary&lt;/code&gt; instead of &lt;code&gt;add-to-cart-button&lt;/code&gt;. That's because classes like &lt;code&gt;button-primary&lt;/code&gt; are the main ones you'll be working with throughout your code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-tips-from-uncle-bob"&gt;
  &lt;/a&gt;
  Other tips from Uncle Bob
&lt;/h3&gt;

&lt;p&gt;Some tips that are mentioned in &lt;a href="https://www.oreilly.com/library/view/clean-code-a/9780136083238/"&gt;Uncle Bob's book Clean Code&lt;/a&gt; are to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;make meaningful distinctions. Avoid variables that seem similar or the same, such as &lt;code&gt;accountInfo&lt;/code&gt; or &lt;code&gt;accountData&lt;/code&gt;. A user of that code won't be able to tell the difference.&lt;/li&gt;
&lt;li&gt;use pronounceable names. Names should be easy to read out loud. Some examples to avoid are names such as &lt;code&gt;genymdhms&lt;/code&gt; and &lt;code&gt;modymdhms&lt;/code&gt;. Better names would be &lt;code&gt;generationTimestamp&lt;/code&gt; and &lt;code&gt;modificationTimestamp&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;use searchable names. Names should be easy to search using your code editor. Essentially, avoid names that are one or two letters long, as searching for them will return too many matches.&lt;/li&gt;
&lt;li&gt;avoid using cute / offensive words. Avoid names such as &lt;code&gt;whack()&lt;/code&gt; and &lt;code&gt;seeYouLaterFiles()&lt;/code&gt;. Be professional and consistent.&lt;/li&gt;
&lt;li&gt;pick one word per concept. For example, don't mix the words "fetch", "get" and "retrieve" for the same kind of operation throughout your codebase. Pick one of them and use it consistently.&lt;/li&gt;
&lt;li&gt;avoid puns. Avoid using the same word for different concepts. For example, if in one class &lt;code&gt;add()&lt;/code&gt; adds two numbers, in a different class &lt;code&gt;add()&lt;/code&gt; shouldn't insert into a list.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#other-tips-from-the-net-naming-conventions"&gt;
  &lt;/a&gt;
  Other tips from the .NET naming conventions
&lt;/h3&gt;

&lt;p&gt;.NET makes some additional recommendations. Some of them are specifically for .NET languages. However, you may want to keep them in mind anyway.&lt;/p&gt;

&lt;p&gt;The recommendations are to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;prefer naturally readable names. For example, use &lt;code&gt;HorizontalAlignment&lt;/code&gt; instead of &lt;code&gt;AlignmentHorizontal&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;avoid using names that conflict with common keywords in other programming languages&lt;/li&gt;
&lt;li&gt;prefer semantic names rather than language specific names. For example, use &lt;code&gt;GetLength&lt;/code&gt; instead of &lt;code&gt;GetInt&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;prefer generic CLR type names instead of language-specific names. For example name a method &lt;code&gt;ToInt64&lt;/code&gt; instead of &lt;code&gt;ToLong&lt;/code&gt;. That's because methods like these may be used in other CLR-compatible languages where the data type &lt;code&gt;long&lt;/code&gt; doesn't exist. Therefore, that name won't make sense in those languages. However, &lt;code&gt;Int64&lt;/code&gt; exists and makes sense for all CLR languages.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vBLu-7Wa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9izke4x86sqotixwv2ah.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vBLu-7Wa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9izke4x86sqotixwv2ah.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#naming-conventions-for-specific-use-cases"&gt;
  &lt;/a&gt;
  Naming conventions for specific use cases
&lt;/h2&gt;

&lt;p&gt;Here are some common naming conventions for things such as variables, functions, classes, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h3&gt;

&lt;p&gt;Variables are just names or labels for values and objects. Some general conventions for them are that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;they should be nouns. For example &lt;code&gt;car&lt;/code&gt;, &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;userLocation&lt;/code&gt;, &lt;code&gt;student&lt;/code&gt;, &lt;code&gt;result&lt;/code&gt;, &lt;code&gt;area&lt;/code&gt;, &lt;code&gt;player&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;they generally use camel case or snake case, depending on your programming language&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The rules change a bit for constants and variables holding Boolean values.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#constants"&gt;
  &lt;/a&gt;
  Constants
&lt;/h4&gt;

&lt;p&gt;Some programming languages write constants fully capitalised and with snake case. This includes JavaScript, Python and Java. Some example constants are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Number.EPSILON&lt;/li&gt;
&lt;li&gt;Math.PI&lt;/li&gt;
&lt;li&gt;NUMBER_OF_LIVES&lt;/li&gt;
&lt;li&gt;MAX_ATTEMPTS_BEFORE_LOCKOUT&lt;/li&gt;
&lt;li&gt;SOME_SPECIAL_VALUE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here, "constant" refers to special values. These are values that don't depend on runtime. They could easily be placed in a configuration file, away from your application code.&lt;/p&gt;

&lt;p&gt;"Constant" doesn't refer to a normal local variable that just happens to be immutable. Those follow the same conventions as normal variables.&lt;/p&gt;

&lt;p&gt;Here are some examples of "constants" and "normal variables that just happen to be immutable":&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;final MAX_ATTEMPS_BEFORE_LOCKOUT = 5&lt;/code&gt; (this could be in a configuration file, it's a special constant)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;final float result = SomeClass.factorial(someNumber)&lt;/code&gt; (this is just a local variable that happens to be immutable. It varies at runtime depending on &lt;code&gt;someNumber&lt;/code&gt;. It can't be placed in a configuration file)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;const URL_ENDPOINT = '/ajax/foo'&lt;/code&gt; (this could be in a configuration file, it's a special constant)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;const filteredArray = array.filter(a =&amp;gt; !a)&lt;/code&gt; (this is just a local variable that happens to be immutable. It varies at runtime depending on &lt;code&gt;array&lt;/code&gt;. It can't be placed in a configuration file)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#booleans"&gt;
  &lt;/a&gt;
  Booleans
&lt;/h4&gt;

&lt;p&gt;For variables that have Boolean values, the convention is to phrase them as a question. Start them with a predicate such as "is", "has", "had" and "can". These clearly denote that the variable holds a Boolean.&lt;/p&gt;

&lt;p&gt;Some example Boolean variables are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;isValid&lt;/li&gt;
&lt;li&gt;isComplete&lt;/li&gt;
&lt;li&gt;isActive&lt;/li&gt;
&lt;li&gt;isDisabled&lt;/li&gt;
&lt;li&gt;isLoading&lt;/li&gt;
&lt;li&gt;hasRan&lt;/li&gt;
&lt;li&gt;hasArrived&lt;/li&gt;
&lt;li&gt;hasDescendants&lt;/li&gt;
&lt;li&gt;canTakeDamage&lt;/li&gt;
&lt;li&gt;canDrive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to being readable standalone, they read nicely in conditional statements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hasLoaded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;doSomethingElse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In comparison, if you don't use a predicate, you would use a name such as &lt;code&gt;complete&lt;/code&gt;. This is both a verb and an adjective. It can denote a number of things. It could be a function that you run to complete something, or a variable that holds things that have already completed, or a Boolean that states whether something has completed or not, or an event name. What it represents is more ambiguous, so prefer predicates instead.&lt;/p&gt;

&lt;p&gt;A verb like &lt;code&gt;completing&lt;/code&gt; is slightly better. It can't denote a function, because the "ing" in "completing" means that something is already happening. It's not something that you can start running now (like a function call). However, it can still be any of the other options. Overall, it's still preferable to use predicates.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h3&gt;

&lt;p&gt;Functions are units of code that do something. Conventions for function names are that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;they should be verbs&lt;/li&gt;
&lt;li&gt;they generally use camel case or snake case, depending on your programming language&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some example function names are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;createReport&lt;/li&gt;
&lt;li&gt;createTodo&lt;/li&gt;
&lt;li&gt;getX&lt;/li&gt;
&lt;li&gt;divide&lt;/li&gt;
&lt;li&gt;sendRequest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For functions that return a Boolean, a common convention is for them to start with a predicate. This is similar to variables that contain Boolean values.&lt;/p&gt;

&lt;p&gt;Some example names for functions that return Booleans are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;isValid&lt;/li&gt;
&lt;li&gt;hasSignedIn&lt;/li&gt;
&lt;li&gt;isSignedIn&lt;/li&gt;
&lt;li&gt;isFormatted&lt;/li&gt;
&lt;li&gt;canDrive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another convention I've seen is for "transformer" or "converter" functions. These are functions that convert from one thing to another. They usually begin with "to", followed by the type they're converting to.&lt;/p&gt;

&lt;p&gt;Some examples of transformer function names are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;toLowerCase&lt;/li&gt;
&lt;li&gt;toUpperCase&lt;/li&gt;
&lt;li&gt;toArray&lt;/li&gt;
&lt;li&gt;toString&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#classes"&gt;
  &lt;/a&gt;
  Classes
&lt;/h3&gt;

&lt;p&gt;Classes are units of code that contain methods and attributes.&lt;/p&gt;

&lt;p&gt;Some conventions for classes are that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;they use Pascal case&lt;/li&gt;
&lt;li&gt;they should be nouns (or noun phrases)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some example class names are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Observable&lt;/li&gt;
&lt;li&gt;Student&lt;/li&gt;
&lt;li&gt;Printer&lt;/li&gt;
&lt;li&gt;Player&lt;/li&gt;
&lt;li&gt;ImageSprite&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#general-property-names"&gt;
  &lt;/a&gt;
  General property names
&lt;/h4&gt;

&lt;p&gt;In general, attributes are named similarly to variables. Methods are named similarly to functions.&lt;/p&gt;

&lt;p&gt;However, as mentioned earlier, the name of the class provides some context.&lt;/p&gt;

&lt;p&gt;This means that you may be able to use a less specific name for a method / attribute than you would use for the equivalent function / variable.&lt;/p&gt;

&lt;p&gt;For example, inside a class &lt;code&gt;Users&lt;/code&gt;, you may have a method named &lt;code&gt;create&lt;/code&gt;. The usage of it would be something like &lt;code&gt;users.create()&lt;/code&gt; (where &lt;code&gt;users&lt;/code&gt; is an instance of &lt;code&gt;Users&lt;/code&gt;), which is sufficiently descriptive.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#casing-and-prefixing-for-properties"&gt;
  &lt;/a&gt;
  Casing and prefixing for properties
&lt;/h4&gt;

&lt;p&gt;In terms of casing and prefixes, different languages and frameworks have different conventions.&lt;/p&gt;

&lt;p&gt;For example, the &lt;a href="https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html"&gt;Java naming conventions&lt;/a&gt; mention that methods and attributes should be camel cased.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP 8 Python naming convention&lt;/a&gt; also mentions camel casing. However, it adds that private properties should be prefixed with an underscore. For example (&lt;code&gt;_privateProperty&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions"&gt;C# coding conventions&lt;/a&gt; seem the strictest. They state that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;public properties should be pascal cased (for example &lt;code&gt;PublicMethod&lt;/code&gt; or &lt;code&gt;PublicVariable&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;private or internal properties should be prefixed with underscore and be camel cased (for example &lt;code&gt;private void _privateMethod&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;private or internal static properties should be prefixed with &lt;code&gt;s_&lt;/code&gt; and be camel cased (for example &lt;code&gt;private static foo s_workerQueue&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;private or internal thread properties should be prefixed with &lt;code&gt;t_&lt;/code&gt; and be camel cased (for example &lt;code&gt;private static foo t_timeSpan&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If, for whatever reason, you were creating your own convention, I would personally recommend:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pascal casing for methods and camel casing for attributes (this is the convention used in the Unity game engine). The reason for this is be to differentiate between Boolean attributes (such as &lt;code&gt;isValid&lt;/code&gt;) and methods that return Booleans (such as &lt;code&gt;IsValid(data)&lt;/code&gt;). As a second choice, I would use camel case for methods.&lt;/li&gt;
&lt;li&gt;underscore prefix for non-public properties&lt;/li&gt;
&lt;li&gt;possibly (not sure yet) the &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt; prefixes from C# for the relevant things. As the &lt;a href="https://www.python.org/dev/peps/pep-0020/"&gt;Zen of Python&lt;/a&gt; says "Namespaces are one honking great idea -- let's do more of those!" (I consider prefixes to have a similar effect)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#interfaces"&gt;
  &lt;/a&gt;
  Interfaces
&lt;/h3&gt;

&lt;p&gt;Names for interfaces are similar to class names. They use pascal case and are usually nouns. Sometimes they can be named with an adjective, for example "Readable".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.oreilly.com/library/view/clean-code-a/9780136083238/"&gt;In the book Clean Code&lt;/a&gt;, Uncle Bob recommends avoiding the &lt;code&gt;I&lt;/code&gt; prefix for interfaces. The &lt;a href="https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html"&gt;Java naming conventions&lt;/a&gt; recommend the same. For example &lt;code&gt;interface Foo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The C# coding conventions recommend prefixing interfaces with I. For example &lt;code&gt;interface IFoo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Personally, I have a minor preference for avoiding the prefix. That's because, as a user of the code, I'm not particularly interested on whether I'm working with an interface or a class.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enums"&gt;
  &lt;/a&gt;
  Enums
&lt;/h3&gt;

&lt;p&gt;The Java convention is to treat enums like classes with constants. This means to name the enum type with pascal case and the fields fully uppercase.&lt;/p&gt;

&lt;p&gt;C# also treats them the same as classes. This means to name both the enum type and the fields using pascal case.&lt;/p&gt;

&lt;p&gt;Personally, I prefer the Java convention because it differentiates between constants and other values.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-event-handlers-messaging-systems-and-commands"&gt;
  &lt;/a&gt;
  Events, event handlers, messaging systems and commands
&lt;/h3&gt;

&lt;p&gt;There are a few things to consider regarding events and their relevant functions.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#event-names"&gt;
  &lt;/a&gt;
  Event names
&lt;/h4&gt;

&lt;p&gt;Event names:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;refer to an action&lt;/li&gt;
&lt;li&gt;are normally named using verbs. For example "downloaded", "loaded", "deleted", "damaged", "moved".&lt;/li&gt;
&lt;li&gt;generally use present tense for events that fire before an action starts. For example, before submitting a password reset request, you might fire an event named "passwordResetRequestSubmitting".&lt;/li&gt;
&lt;li&gt;generally use past tense for events that fire after an action completes. For example, after submitting a password reset request, you might fire an event named "passwordResetRequestSubmitted".&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my experience, these conventions are common across many languages. However, there isn't much official documentation for them. One exception is with &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/names-of-type-members"&gt;.NET, where they formally state these guidelines&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the actual name of the event, you can use whatever makes sense to you. If your event is created in a class, the class name may provide sufficient context. For example, if you have a class &lt;code&gt;Shape&lt;/code&gt;, you may have an event named &lt;code&gt;areaChanged&lt;/code&gt;. The usage would be something like &lt;code&gt;myShape.areaChanged += someHandler&lt;/code&gt; or &lt;code&gt;myShape.areaChanged.subscribe(someHandler)&lt;/code&gt;. The event name "areaChanged" is sufficiently descriptive in this case.&lt;/p&gt;

&lt;p&gt;In terms of casing, follow the convention in your programming language. C# uses pascal casing for public members (including events). Most other languages use camel casing.&lt;/p&gt;

&lt;p&gt;Some example event names are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fileDownloading / fileDownloaded&lt;/li&gt;
&lt;li&gt;userRegistering / userRegistered&lt;/li&gt;
&lt;li&gt;uiElementXUpdating / uiElementXUpdated&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#event-handlers"&gt;
  &lt;/a&gt;
  Event handlers
&lt;/h4&gt;

&lt;p&gt;For event handler functions, there are a few conventions. In front end, &lt;a href="https://reactjs.org/docs/handling-events.html"&gt;React tends to use the prefix "handle"&lt;/a&gt;. C# recommends the suffix "EventHandler". Other languages may have other conventions.&lt;/p&gt;

&lt;p&gt;Some example names of event handler functions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;handleUserSubscribed / userSubscribedHandler / UserSubscribedEventHandler&lt;/li&gt;
&lt;li&gt;handleFileDownloaded / fileDownloadedHandler / FileDownloadedEventHandler&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My personal preference is to use the "handle" prefix. This keeps the function a verb, which is the convention for functions.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#on-functions"&gt;
  &lt;/a&gt;
  "On" functions
&lt;/h4&gt;

&lt;p&gt;Functions that exist solely to raise events tend to have the name &lt;code&gt;on&amp;lt;EventName&amp;gt;&lt;/code&gt;. For example "onAreaChanged".&lt;/p&gt;

&lt;p&gt;One case for using these is in classes that may be derived.&lt;/p&gt;

&lt;p&gt;Here's a C# example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;event&lt;/span&gt; &lt;span class="n"&gt;EventHandler&lt;/span&gt; &lt;span class="n"&gt;FileDownloaded&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnFileDownloaded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;EventHandler&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FileDownloaded&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nf"&gt;FileDownloaded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;OnFileDownloaded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EventArgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we have a method named &lt;code&gt;OnFileDownloaded&lt;/code&gt; whose only purpose is to raise the event.&lt;/p&gt;

&lt;p&gt;This convention may work a bit differently in front end, but it still follows the general idea. For example, in React, you can name props something like "onClick" or "onSomeEvent". Event handler functions that you define inside a component can use the "handle" prefix.&lt;/p&gt;

&lt;p&gt;Here's a React example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ParentComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleButtonClicked&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* do something */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ChildComponent&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleButtonClicked&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ChildComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;clicked&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, each component creates event handler functions prefixed with "handle". The child component has the prop named "onClick". In the child component, the &lt;code&gt;handleClick&lt;/code&gt; function calls the &lt;code&gt;onClick&lt;/code&gt; prop.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#more-global-message-names"&gt;
  &lt;/a&gt;
  More global message names
&lt;/h4&gt;

&lt;p&gt;PubSub (message bus) and analytics have similarities to local events, but they are more global. They span a much larger area of the codebase. The can even span multiple applications (as might be the case for analytics).&lt;/p&gt;

&lt;p&gt;With these, it's important to use more specific names, otherwise you won't know what they refer to.&lt;/p&gt;

&lt;p&gt;A good way to do this is to use namespaces and prefixes, along with specified delimiters.&lt;/p&gt;

&lt;p&gt;For example, with PubSub event names, you can have a namespace for the relevant area of the codebase. The format of the event name can be &lt;code&gt;&amp;lt;areaOfCodebase&amp;gt;/&amp;lt;eventName&amp;gt;&lt;/code&gt;. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ui/themeChanged&lt;/li&gt;
&lt;li&gt;ui/fontSizeChanged&lt;/li&gt;
&lt;li&gt;player/damaged&lt;/li&gt;
&lt;li&gt;player/poweredUp&lt;/li&gt;
&lt;li&gt;user/registering&lt;/li&gt;
&lt;li&gt;user/registered&lt;/li&gt;
&lt;li&gt;user/deleted&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, as explained on &lt;a href="https://davidwells.io/blog/clean-analytics"&gt;clean analytics by David Wells&lt;/a&gt;, for analytics you could use a format like &lt;code&gt;&amp;lt;Source&amp;gt;:&amp;lt;object&amp;gt;_&amp;lt;actionName&amp;gt;&lt;/code&gt;. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;site:newsletter_subscribed&lt;/li&gt;
&lt;li&gt;app:site_deployed&lt;/li&gt;
&lt;li&gt;cli:user_login&lt;/li&gt;
&lt;li&gt;api:site_created&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are just examples. In your own codebase, you can use as many namespaces as you want. The namespaces can be anything.&lt;/p&gt;

&lt;p&gt;Likewise, the delimiter(s) can be anything you want. Some examples are "/", "::", ":", "_", or even no delimiter.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#commands"&gt;
  &lt;/a&gt;
  Commands
&lt;/h4&gt;

&lt;p&gt;Commands are  written similarly to functions. They are verbs in an imperative mood. They are also used in PubSub. The notes about namespaces and delimiters, mentioned above, apply to them.&lt;/p&gt;

&lt;p&gt;Commands also usually expect a response. In other words, a command such as "CreateUser" will have a response message such as "CreateUserResult", "CreateUserSucceeded" or even "UserCreatedNotification". Overall, I'm not aware of strong conventions for these, so you can probably use whatever you like.&lt;/p&gt;

&lt;p&gt;My personal preference for response names comes from &lt;a href="https://jimmybogard.com/message-naming-conventions/"&gt;Jimmy Bogard's post on message naming conventions&lt;/a&gt;. I generally append "Result", "Reply" or "Response" to the original command name.&lt;/p&gt;

&lt;p&gt;Some example formats for command names and their namespaces are &lt;code&gt;&amp;lt;Verb&amp;gt;&amp;lt;Subject&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;subject&amp;gt;/&amp;lt;verb&amp;gt;&lt;/code&gt;. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Possible commands are "RegisterUser" or "user/register". Possible responses are "registerUserResponse" or "user/register_result"&lt;/li&gt;
&lt;li&gt;Possible commands are "DamagePlayer", "player/damage". Possible responses are "DamagePlayerResponse", "player/damage_result"&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#file-names"&gt;
  &lt;/a&gt;
  File names
&lt;/h3&gt;

&lt;p&gt;For file names, you need to consider conventions for casing, as well as what to name the file based on the code it contains.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#file-name-casing-conventions-and-delimiters"&gt;
  &lt;/a&gt;
  File name casing conventions and delimiters
&lt;/h4&gt;

&lt;p&gt;For file naming, there are different conventions depending on the language, framework and style guide you follow.&lt;/p&gt;

&lt;p&gt;Many conventions recommend file names that are all lower case. Words can be separated with either hyphens (-) or underscores (_). For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;in HTML, the convention is all lower case, with hyphens as separators. Underscores are far less common. One reason for this is because the HTML file name may reflect in the URL (especially with older servers). Underscores in URLs are far less common than hyphens.&lt;/li&gt;
&lt;li&gt;in CSS, the convention is all lower case with hyphens or underscores as separators&lt;/li&gt;
&lt;li&gt;In Python, PEP 8 recommends file names to be all lower case, with underscores as separators&lt;/li&gt;
&lt;li&gt;the Google JavaScript style guide recommends file names to be all lower case, with underscores or hyphens as separators&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Between hyphens and underscores, you can use either. Both are acceptable. In general, I prefer to use hyphens to be consistent with my CSS classes (which conventionally use hyphens) and for the reasons mentioned for the HTML. However, if you commonly use snake case in your programming language, or if you don't write HTML and CSS, it might feel more consistent to use underscores instead of hyphens.&lt;/p&gt;

&lt;p&gt;Some example file names are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;index.html, index.css, index.js&lt;/li&gt;
&lt;li&gt;third-party-analytics.js&lt;/li&gt;
&lt;li&gt;enemy-mover.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Along with that, there are other conventions that recommend camel or pascal case for your files. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C# and Java recommend naming your file the same as the main thing in your file. This means using pascal case, same as your classes and interfaces.&lt;/li&gt;
&lt;li&gt;the AirBnB JavaScript style guide recommends naming your file the same thing as your default export. Again, this means using camel or pascal case, at least for your JavaScript files.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://reactjs.org/docs/faq-structure.html"&gt;React takes it a step further and recommends naming all of your files consistently in each folder&lt;/a&gt;. For example:

&lt;ul&gt;
&lt;li&gt;MyComponent.js&lt;/li&gt;
&lt;li&gt;MyComponent.css&lt;/li&gt;
&lt;li&gt;MyComponent.test.js (test files tend to have the special extension .test.js)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So which should you choose? First, consider if one of the conventions is more common than the others for your programming language or framework. That's the natural choice. Otherwise, you can do whatever you like. My personal recommendation is to choose the naming convention that best matches the code in your files. For example, when working on the front end, the convention is for everything in your HTML and CSS to be lower case with hyphens as separators. Therefore, you might want to use that as the naming convention.&lt;/p&gt;

&lt;p&gt;As another example, when working on React applications that use CSS modules, you might prefer to write CSS using pascal case and underscores. This makes it easier to use your CSS in your JavaScript, for example &lt;code&gt;styles.Foo_bar&lt;/code&gt; (where &lt;code&gt;Foo_bar&lt;/code&gt; is your CSS class), as hyphens aren't allowed in JavaScript. In this case, it may feel more natural to name your files using pascal case.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#choosing-a-file-name-based-on-the-code-it-contains"&gt;
  &lt;/a&gt;
  Choosing a file name based on the code it contains
&lt;/h4&gt;

&lt;p&gt;In general, you want to name your file based on its purpose.&lt;/p&gt;

&lt;p&gt;This is supported by the C# naming conventions and Java naming conventions. They state that your file name should be the same as the main thing you define in your file. For example, if you define a class Foo, your file name should be Foo.cs or Foo.java.&lt;/p&gt;

&lt;p&gt;The AirBnB JavaScript style guide also agrees with this. It states that your file should be named after your default export. Whether or not you use default exports is a separate matter. But the point is the same. It means to name it after the purpose, or the most important thing in your file. Normally (but not always) that's thing that you would &lt;code&gt;export default&lt;/code&gt;, if you were using export default.&lt;/p&gt;

&lt;p&gt;One exception is if your default export is named "main", "setup" or something similar. It doesn't make sense for a file to be called "main", especially if many files have a similar default export. In that case, consider what the purpose of the file is. An alternative is to consider what the equivalent OOP code would be.&lt;/p&gt;

&lt;p&gt;For example, consider that you have a class that deals with carousel functionality. Your OOP code would probably be a class named "Carousel". In comparison, if you write it using functions, it might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleChangeToNextSlide&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// code to change to next slide when user clicks the relevant button&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// find DOM elements that are supposed to be carousels&lt;/span&gt;
  &lt;span class="c1"&gt;// set up event listeners on those elements&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the equivalent OOP code, the code in &lt;code&gt;main&lt;/code&gt; would be in the constructor of the class &lt;code&gt;Carousel&lt;/code&gt;. In this case, my recommendation would be to name the file &lt;code&gt;carousel&lt;/code&gt;. That's its true purpose. Alternatively, you could also change &lt;code&gt;main&lt;/code&gt; to &lt;code&gt;setupCarousel&lt;/code&gt; or something and name the file after that.&lt;/p&gt;

&lt;p&gt;As for some other cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If your file defines multiple classes: Well, most style guides would tell you to avoid files with multiple classes. Consider whether you can separate each class into its own file. Although, if you only have one public class, then that's fine. Name the file after the one public class, not the private ones.&lt;/li&gt;
&lt;li&gt;If you use functions instead of classes, there might be some cases where none of the functions would suitable to export default. Again, you need to consider what the purpose of the file is. For example, if you have some functions that are used in your test files, then perhaps "test-utilities" would be a good name. Alternatively, you can consider what the equivalent OOP code would be. You would probably have a static class with static methods. Name your file after the name of that static class.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#package-names-and-namespaces"&gt;
  &lt;/a&gt;
  Package names and namespaces
&lt;/h3&gt;

&lt;p&gt;In practice, many packages don't follow naming conventions at all. That's because a developer can upload a package with whatever name they want. There usually aren't many checks.&lt;/p&gt;

&lt;p&gt;However, there are naming conventions for packages and for different package repositories.&lt;/p&gt;

&lt;p&gt;Java and &lt;a href="https://search.maven.org/"&gt;Maven&lt;/a&gt; use the format of &lt;code&gt;&amp;lt;groupID&amp;gt;&amp;lt;artifactID&amp;gt;&lt;/code&gt;. The group ID part is generally a reversed domain name. For example, if your domain is example.com, the group ID would be "com.example". It can have subgroups (additional namespaces). For example "com.example.plugins". The artifactID is the name of the jar. For example "junit" or "spring-web". In general, artifact IDs tend to be fully lower case with hyphens to separate words.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/"&gt;NPM (node package manager)&lt;/a&gt; tends to use direct package names, such as "react-dom", or prefixed with a namespace or company name, such as "&lt;a class="mentioned-user" href="https://dev.to/babel"&gt;@babel&lt;/a&gt;
/preset-env". They tend to be fully lower case with hyphens to separate words.&lt;/p&gt;

&lt;p&gt;With &lt;a href="https://www.nuget.org/"&gt;NuGet&lt;/a&gt; (package repository for .NET), the number of namespaces vary, just like with Maven and subgroups. There are many packages with a single name, such as "Moq". There are also many packages of the format &lt;code&gt;&amp;lt;CompanyName&amp;gt;.&amp;lt;Package&amp;gt;&lt;/code&gt;, such as "AWSSDK.Core". There are also packages with many namespaces, such as "Microsoft.Extensions.FileProviders.Abstractions". If you want to follow the example of the packages released by Microsoft, then use pascal case, optionally a company prefix and as many namespaces as you need.&lt;/p&gt;

&lt;p&gt;Namespaces (in code) seem to follow similar concepts and conventions to packages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-tips"&gt;
  &lt;/a&gt;
  Final tips
&lt;/h2&gt;

&lt;p&gt;Remember that naming is hard.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are only two hard things in Computer Science: cache invalidation and naming things. - Phil Karlton&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, spending some time to come up with a reasonable name is usually worth it.&lt;/p&gt;

&lt;p&gt;Also, as always, be pragmatic. It's okay to break these conventions once in a while. They are only here to help you make good and consistent decisions most of the time. For example, it's okay if you feel that adding the data structure to the name will help, such as &lt;code&gt;userList&lt;/code&gt;. It's up to you to decide what's best for your project.&lt;/p&gt;

&lt;p&gt;In addition, you probably can't spend an unreasonable amount of time coming up with good names. So, sometimes, if you've already spent too long, you might need to use the best name you've come up with so far and move on.&lt;/p&gt;

&lt;p&gt;Overall, the most important thing from this article is that you understand the principles behind naming. In particular, that names should make the code easy to understand. If you understand that, then you'll be fine. You'll be able to come up with your own solutions and conventions even in unfamiliar situations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final notes
&lt;/h2&gt;

&lt;p&gt;So that's it for the article. I hope that you found it useful.&lt;/p&gt;

&lt;p&gt;If you've encountered any awful names in code you've worked on, please leave a comment with them!&lt;/p&gt;

&lt;p&gt;Also, if you want to discuss anything, disagree with anything, or have any feedback in general, please leave a comment below.&lt;/p&gt;

&lt;p&gt;Alright, see you next time :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#image-credits"&gt;
  &lt;/a&gt;
  Image credits
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Cover photo (modified) - Photo by Paul Stollery on Unsplash&lt;/li&gt;
&lt;li&gt;Clear Bulb Beside White Notepad on White Surface - Photo by Burak Kebapci on Pexels&lt;/li&gt;
&lt;li&gt;Green leaf with white card - Photo by Helena Hertz on Unsplash&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>programming</category>
      <category>learning</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Dockerfile: Best practices for building an image</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Mon, 21 Jun 2021 15:01:04 +0000</pubDate>
      <link>https://dev.to/ankit01oss/dockerfile-best-practices-for-building-an-image-4lc6</link>
      <guid>https://dev.to/ankit01oss/dockerfile-best-practices-for-building-an-image-4lc6</guid>
      <description>&lt;p&gt;Hi there,&lt;/p&gt;

&lt;p&gt;This is Ankit, your friendly DevOps content curator. I read a lot of articles about DevOps, distributed systems, performance monitoring, etc., and then share key takeaways from those articles so that you can stay updated and learn a few things quickly.🙂&lt;/p&gt;

&lt;p&gt;I read this article on best practices for building a docker image. A Docker image serves as a template to build Docker containers. It also acts as a starting point when using Docker.&lt;/p&gt;

&lt;p&gt;Link to the full article👇&lt;br&gt;
&lt;a href="https://medium.com/swlh/dockerfile-best-practices-for-building-an-image-6120e512b1fa"&gt;Dockerfile: Best practices for building an image&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#summary-of-best-practices-for-building-docker-images"&gt;
  &lt;/a&gt;
  Summary of best practices for building Docker images
&lt;/h2&gt;

&lt;p&gt;Below is the list of best practices to follow while building Docker images:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-os-base-image"&gt;
  &lt;/a&gt;
  1. OS base image
&lt;/h3&gt;

&lt;p&gt;OS base image size can have a lot of impact on image sizes and security vulnerabilities. You should choose minimal Docker images like Alpine(~5 MB) compared to the most downloaded base image like ubuntu(~188 MB)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-base-images"&gt;
  &lt;/a&gt;
  2. Base images
&lt;/h3&gt;

&lt;p&gt;Each base image should have a specific goal and should be as generic as possible to ensure re-usability.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-docker-users-with-minimal-privileges"&gt;
  &lt;/a&gt;
  3. Docker users with minimal privileges
&lt;/h3&gt;

&lt;p&gt;Docker users should only have the privileges that they need. For e.g. the ROOT user should not be used for starting the container.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-leverage-dockerignore"&gt;
  &lt;/a&gt;
  4. Leverage Dockerignore
&lt;/h3&gt;

&lt;p&gt;Dockerignore can be used for keeping your Docker images as lean as possible. You can create a file named .dockerignore in your root folder and use it to exclude files and directories that are not needed to run the app.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#5-be-specific-with-and-or-copy"&gt;
  &lt;/a&gt;
  5. Be specific with AND or COPY
&lt;/h3&gt;

&lt;p&gt;While using &lt;code&gt;AND&lt;/code&gt; or &lt;code&gt;COPY&lt;/code&gt;, be specific with the folder or files you want. It is an easy way to optimize image size.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#6-specific-tag-instead-of-fixed-tag"&gt;
  &lt;/a&gt;
  6. Specific tag instead of fixed tag
&lt;/h3&gt;

&lt;p&gt;Docker tags convey useful information about specific image versions/variants. Avoid using fixed tags like 'latest' as it makes it hard to track which version of the image is running and hard to roll back.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#7-image-life-cycle-management"&gt;
  &lt;/a&gt;
  7. Image life cycle management
&lt;/h3&gt;

&lt;p&gt;A security breach can happen in case you are running a deprecated version of an image. Hence, it's necessary to put in place a proper image life cycle management.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#8-sensitive-information"&gt;
  &lt;/a&gt;
  8. Sensitive information
&lt;/h3&gt;

&lt;p&gt;Environment variables are not a good way to manage secrets as they are not encrypted. Solutions like Hashicorp vault can be used for managing secrets.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#9-multistage-builds"&gt;
  &lt;/a&gt;
  9. Multi-stage builds
&lt;/h3&gt;

&lt;p&gt;With multi-stage builds, you use multiple &lt;code&gt;FROM&lt;/code&gt; statements in your Dockerfile. Using multi-stage builds, you can selectively copy artifacts from one stage to another, leaving behind everything you don’t want in the final image.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#10-combine-commands"&gt;
  &lt;/a&gt;
  10. Combine commands
&lt;/h3&gt;

&lt;p&gt;As each command in a Dockerfile adds one layer to the image, one way to reduce image size is by combining commands. For example, multiple RUN commands can be combined into a single RUN statement.&lt;/p&gt;



&lt;p&gt;I hope you enjoyed this summary and learned something new. I will be coming up with more such notes soon.&lt;/p&gt;

&lt;p&gt;Please give me a follow if you liked it 🙌&lt;/p&gt;



&lt;p&gt;Currently building &lt;a href="https://bit.ly/35G7QXU"&gt;SigNoz&lt;/a&gt; - an open-source APM &amp;amp; observability tool 💙&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/SigNoz"&gt;
        SigNoz
      &lt;/a&gt; / &lt;a href="https://github.com/SigNoz/signoz"&gt;
        signoz
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      SigNoz helps developers monitor their applications &amp;amp; troubleshoot problems, an open-source alternative to DataDog, NewRelic, etc. 🔥 🖥
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667"&gt;&lt;img src="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667" alt="SigNoz-logo" width="240"&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;p&gt;Monitor your applications and troubleshoot problems in your deployed applications, an open-source alternative to DataDog, New Relic, etc.&lt;/p&gt;
&lt;p&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;img alt="License" src="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;img alt="Downloads" src="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;img alt="GitHub issues" src="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;/a&gt; 
    &lt;a href="https://twitter.com/intent/tweet?text=Monitor%20your%20applications%20and%20troubleshoot%20problems%20with%20SigNoz,%20an%20open-source%20alternative%20to%20DataDog,%20NewRelic.&amp;amp;url=https://signoz.io/&amp;amp;via=SigNozHQ&amp;amp;hashtags=opensource,signoz,observability" rel="nofollow"&gt; 
        &lt;img alt="tweet" src="https://camo.githubusercontent.com/90bc908826728c0e4261acfff5619fd732c7be2b2a00624fce6363c9a3623c90/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f687474702f736869656c64732e696f2e7376673f7374796c653d736f6369616c"&gt; &lt;/a&gt; 
&lt;/p&gt;

&lt;p&gt;SigNoz helps developers monitor applications and troubleshoot problems in their deployed applications. SigNoz uses distributed tracing to gain visibility into your software stack.&lt;/p&gt;

&lt;p&gt;👉 You can see metrics like p99 latency, error rates for your services, external API calls and individual end points.&lt;/p&gt;

&lt;p&gt;👉 You can find the root cause of the problem by going to the exact traces which are causing the problem and see detailed flamegraphs of individual request traces.&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/863718997bae95953d22cbd6c1001d4ec23695aad4244d7de596660f33833496/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343033322f7369676e6f7a2d696d616765732f73637265656e7a792d313631383930343031333732395f636c737376792e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/863718997bae95953d22cbd6c1001d4ec23695aad4244d7de596660f33833496/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343033322f7369676e6f7a2d696d616765732f73637265656e7a792d313631383930343031333732395f636c737376792e706e67" alt="SigNoz Feature"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
👇 Features:&lt;/h3&gt;


&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error, tags/annotations.&lt;/li&gt;
&lt;li&gt;Aggregate metrics on filtered traces. Eg, you can get error…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;br&gt;
  &lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/SigNoz/signoz"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
      <category>devops</category>
      <category>docker</category>
      <category>cloud</category>
      <category>kubernetes</category>
    </item>
    <item>
      <title>3 React concepts I wish I knew when I started</title>
      <author>Ruben Gabrielyan</author>
      <pubDate>Mon, 21 Jun 2021 14:51:01 +0000</pubDate>
      <link>https://dev.to/rubengabrielian/3-react-concepts-i-wish-i-knew-when-i-started-4bim</link>
      <guid>https://dev.to/rubengabrielian/3-react-concepts-i-wish-i-knew-when-i-started-4bim</guid>
      <description>&lt;p&gt;When I stumbled upon React, I barely had any JS knowledge. I had been told by my peers and the internet, of course, that some JavaScript knowledge would be necessary to start with React JS, but, I took the chance. Belonging to the kind of people that “learn by doing” , I went on to explore the JavaScript world and JSX that comes with React.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#this-is-for-beginners-and-people-who-are-the-same-kind"&gt;
  &lt;/a&gt;
  This is for beginners and people who are the same kind.
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function App() {
  console.log("app")
  const [state, toggle] = useState(true);
  return (
    &amp;lt;div&amp;gt;
    &amp;lt;h2&amp;gt;{`${state}`}&amp;lt;/h2&amp;gt;
    &amp;lt;button onClick={() =&amp;gt; { toggle(!state) }}&amp;gt;Toggle&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
 )
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I had a heading and a button to toggle it’s content. I also had a console.log inside the function to log a message every time state was changed and a re render was triggered.&lt;br&gt;
I expected a single log on each button click. But I noticed every time the button was clicked, there were two logs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xmclfpi3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqs208f505zcyn0uugsy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xmclfpi3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqs208f505zcyn0uugsy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I moved on without being bothered by this behaviour.&lt;br&gt;
Later, when I noticed the same behaviour in something more complex , it bugged me. That’s when I realised that this behaviour was only visible in development and not in production. I searched online and found that, it was due to Strict Mode. I noticed that in index.js, my app was wrapped within .&lt;br&gt;
Quoting from the ReactJS documentation itself:  “Strict mode can’t automatically detect side effects for you, but it can help you spot them by making them a little more deterministic. This is done by intentionally double-invoking the following functions: Class component constructor, render, and shouldComponentUpdate methods.”&lt;/p&gt;

&lt;p&gt;If you’re using create-react-app , you may notice that your app is wrapped in  in index.js.&lt;br&gt;
So, this was the issue. This is why I had two logs on every render. I wish I had known this. To read more about Strict Mode check &lt;a href="https://reactjs.org/docs/strict-mode.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Keys&lt;/strong&gt;&lt;br&gt;
When rendering multiple components, we usually map over lists like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const numbers = [1, 2, 3, 4, 5];
const listItems = numbers.map((number) =&amp;gt;
  &amp;lt;li key={number.toString()}&amp;gt;    {number}
  &amp;lt;/li&amp;gt;
);
ReactDOM.render(
  &amp;lt;ul&amp;gt;{listItems}&amp;lt;/ul&amp;gt;,  document.getElementById('root')
);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;React uses keys to optimise performance. Read more about why keys are necessary, &lt;a href="https://reactjs.org/docs/reconciliation.html#component-elements-of-the-same-type"&gt;here&lt;/a&gt; .&lt;br&gt;
From the official docs: “Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity.”&lt;br&gt;
Now one obvious idea that would come to mind: we could use the array index as the key. But wait, think again, because it is not the recommended approach.&lt;br&gt;
Think about what would happen if the list is prepended, since React only relies on the keys to decide if the DOM should be updated. Read about this &lt;a href="https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318"&gt;here&lt;/a&gt; . The article demonstrates the problem using a very good example of text inputs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Stale state&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The problem is, in some cases you don’t have the latest state at your disposal.&lt;br&gt;
This one, I had to struggle a lot to get my head around. For someone who had no idea about closures and why they were important in the context of React, I had to read a lot about the “behind-the-scenes” of React.&lt;br&gt;
Consider this piece of code,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function App() {

    const [state, toggle] = useState(0);

    useEffect(()=&amp;gt;{

    setInterval(()=&amp;gt;{
      console.log(`state ${state}`);
    },3000)

},[])
    return (
       &amp;lt;div&amp;gt;
       &amp;lt;h2&amp;gt;{`${state}`}&amp;lt;/h2&amp;gt;
       &amp;lt;button onClick={() =&amp;gt; { toggle(state+1) }}&amp;gt;Increase&amp;lt;/button&amp;gt;
       &amp;lt;/div&amp;gt;
)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On clicking the button and updating the state, there is no change in the logs. The logs show the initial state which is 0. Look at the GIF below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NhLdZM1G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vp4ffffwy2tewlq4wyj5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NhLdZM1G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vp4ffffwy2tewlq4wyj5.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The answer to ‘why’ , lies not in React but JavaScript itself. It is related to something known as closures. Read about closures &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures"&gt;here&lt;/a&gt; .&lt;br&gt;
This is not a huge problem here, but imagine an event listener being attached to an object, in useEffect and getting stale state inside it. Check out &lt;a href="https://stackoverflow.com/questions/55154186/react-hooks-usestateuseeffectevent-gives-stale-state/55156813#55156813"&gt;this&lt;/a&gt; SO answer which shows the proper way to use event listeners in useEffect.&lt;br&gt;
It’s important to know that having fundamental JS knowledge should be given higher priority than having framework or library specific knowledge. Because, regardless of what library you use , you still have to write JS code and deal with JS related concerns. It’s important not to limit yourself to a specific framework/library and it’s possible only by having a strong JS base.&lt;br&gt;
Never underestimate the knowledge you’re gonna get just by looking at documentations, especially when they’re as good as React’s.&lt;br&gt;
&lt;strong&gt;Thank you for reading !&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Arquitetura Event Driven, quando da errado</title>
      <author>Leonardo Lemos</author>
      <pubDate>Mon, 21 Jun 2021 14:15:40 +0000</pubDate>
      <link>https://dev.to/convenia/arquitetura-event-driven-quando-da-errado-1bjf</link>
      <guid>https://dev.to/convenia/arquitetura-event-driven-quando-da-errado-1bjf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introdu%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Introdução
&lt;/h2&gt;

&lt;p&gt;No &lt;a href="https://dev.to/convenia/event-driven-com-laravel-pigeon-2753"&gt;post anterior&lt;/a&gt; expliquei um pouco como funciona uma arquitetura orientada a eventos e como implementamos essa arquitetura na &lt;a href="https://convenia.com.br/"&gt;Convenia&lt;/a&gt;. Comentei um pouco sobre o nosso tratamento de erros e hoje pretendo me aprofundar mais nesse assunto.&lt;/p&gt;

&lt;p&gt;Assim como no post anterior gostaria de enfatizar que as escolhas de arquitetura e stack fazem sentido para o nosso tamanho e previsão de crescimento. Possivelmente para você não faça sentido fazer tudo da mesma forma como fazemos uma vez que cada projeto é único com as suas particularidades, mesmo assim é provável que você consiga tirar algo de bom desse post.&lt;/p&gt;

&lt;p&gt;Nesse post as palavras "mensagem" e "evento" representam a mesma coisa mas em contextos diferentes, a grosso modo "mensagem" é o nome dado a informação em transito através de um &lt;a href="https://en.wikipedia.org/wiki/Message_broker"&gt;message broker&lt;/a&gt; e evento é o nome dado para a mensagem em um contexto "orientado a eventos", "listener" é o nome dado ao processo responsável por "ouvir" eventos. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#como-os-servi%C3%A7os-se-comunicam"&gt;
  &lt;/a&gt;
  Como os serviços se comunicam?
&lt;/h2&gt;

&lt;p&gt;A seguir vamos analisar um exemplo simples utilizando o &lt;a href="https://convenia.github.io/Pigeon/#/"&gt;Pigeon&lt;/a&gt; bem parecido com o do post anterior:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Pigeon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'employee.created'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Scooby Doo'&lt;/span&gt; 
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No exemplo acima estamos emitindo o evento &lt;code&gt;employee.created&lt;/code&gt; que tem como body o nome do colaborador, para ouvir esse evento em outro serviço com o Pigeon temos esse código:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Pigeon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;events&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'employee.created'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;ResolverContract&lt;/span&gt; &lt;span class="nv"&gt;$resolver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//doing nice things&lt;/span&gt;

            &lt;span class="nv"&gt;$resolver&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;ack&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Throwable&lt;/span&gt; &lt;span class="nv"&gt;$exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$resolver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//send to sentry&lt;/span&gt;

            &lt;span class="nv"&gt;$resolver&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O código acima faz algumas coisas&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Configura o Pigeon para ouvir o evento &lt;code&gt;employee.created&lt;/code&gt; em outro serviço, com a chamada &lt;code&gt;Pigeon::events('employee.created')&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Define um callback para "lidar" com o evento passando uma &lt;a href="https://www.php.net/manual/en/class.closure.php"&gt;Closure&lt;/a&gt; através do método &lt;code&gt;-&amp;gt;callback()&lt;/code&gt;, essa Closure será executada cada vez que o evento &lt;code&gt;employee.created&lt;/code&gt; for "ouvido".&lt;/li&gt;
&lt;li&gt;Define um fallback através do método &lt;code&gt;-&amp;gt;fallback()&lt;/code&gt;, essa closure será executada sempre que acontecer uma exception dentro do callback.&lt;/li&gt;
&lt;li&gt;O método &lt;code&gt;-&amp;gt;consume()&lt;/code&gt; começa a consumir a fila de fato.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;O Pigeon utiliza &lt;a href="https://www.rabbitmq.com/"&gt;RabbitMQ&lt;/a&gt; para intermediar a comunicação entre os dois serviços, se tentarmos mostrar isso em um diagrama teremos o seguinte:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MNpEEqgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/enp81dxveq6e8ryrhogi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MNpEEqgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/enp81dxveq6e8ryrhogi.png" alt="diagrama de evento comsumido com sucesso"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No momento em que o serviço lê a mensagem do RabbitMQ a mensagem fica em um estado "unacked", isso significa que o Rabbit está esperando a confirmação dessa mensagem por parte de quem a leu. O RabbitMQ não entregará essa mensagem a mais ninguem até receber a confirmação de que algo deu certo ou a confirmação de que algo deu errado(rejeição) com a mensagem. No passo 4 retratado no diagrama acima fazemos uma confirmação na mensagem para o RabbitMQ saber que ela foi processada corretamente, apenas depois de receber essa confirmação o RabbitMQ remove a mensagem da fila.&lt;/p&gt;

&lt;p&gt;O diagrama acima mostra um caminho muito feliz mas vamos imaginar que logo após ler a mensagem, o serviço ouvinte "morre" devido a algum problema de hardware antes de confirmar a mensagem:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BY5o3fIv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vy0kfc9l5s1o45agjdnu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BY5o3fIv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vy0kfc9l5s1o45agjdnu.png" alt="diagrama mostrando erro fatal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;De forma similar ao exemplo anterior, após a leitura da mensagem o Rabbit coloca a mensagem no estado "unacked", ao processar a mensagem um erro muito inesperado acontece e o Listener(processo) morre no passo 3, nesse momento o Rabbit sabe que deve voltar a mensagem para o estado de "ready", assim outro listener pode tentar processar essa mesma mensagem, isso é possível porque os listeners mantém uma conexão aberta com o Rabbit e quando o processo do listener morre a conexão com o Rabbit é "cortada", nesse momento ele sabe que deve "liberar" todas as mensagens que aquele listener leu mas não confirmou.&lt;/p&gt;

&lt;p&gt;Até o momento mostramos fluxos saudáveis e falhas de terceiros que podem acontecer esporadicamente mas e quando nosso próprio código que consome a mensagem está quebrado? E quando a própria mensagem está quebrada?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dead-letter-exchange-para-o-resgate"&gt;
  &lt;/a&gt;
  Dead Letter Exchange para o Resgate
&lt;/h2&gt;

&lt;p&gt;Vamos tentar imaginar a seguinte situação onde o código do nosso próprio listener está quebrado:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Pigeon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;events&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'employee.created'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;ResolverContract&lt;/span&gt; &lt;span class="nv"&gt;$resolver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;doesNotExists&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nv"&gt;$resolver&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;ack&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No código acima repare a chamada para a função &lt;code&gt;doesNotExists()&lt;/code&gt;, como o próprio nome já diz essa função não existe e quando esse listener tentar consumir uma mensagem ele vai entrar no fluxo retratado na imagem 2. O grande problema é que normalmente utilizamos algum recurso  como o &lt;a href="http://supervisord.org/"&gt;supervisord&lt;/a&gt; para "reviver" os processos que morrem e quando esse listener "voltar a vida" ele vai entrar no fluxo da imagem 2 novamente entrando em um looping.&lt;/p&gt;

&lt;p&gt;Temos uma mensagem sendo consumida em looping, ela será consumida corretamente apenas se o código do listener for corrigido, isso causa vários problemas como mostrado no &lt;a href="https://dev.to/convenia/event-driven-com-laravel-pigeon-2753"&gt;post anterior&lt;/a&gt;. O RabbitMQ, não por acaso, tem um recurso chamado &lt;a href="https://www.rabbitmq.com/dlx.html"&gt;dead letter exchange&lt;/a&gt; que serve para esse tipo de situação e com esse recurso a mensagem pode ser enviada em uma exchange separada para ser tratada posteriormente, como mostra o fluxo a seguir:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D9h6NXqG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvyzooaniyh4rmofcane.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D9h6NXqG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvyzooaniyh4rmofcane.png" alt="diagrama mostrando fluxo de um erro previsível"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para esse fluxo acontecer precisamos "rejeitar" explicitamente a mensagem através do método &lt;code&gt;fallback&lt;/code&gt; mostrado no inicio do artigo e retratado novamente a seguir:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Throwable&lt;/span&gt; &lt;span class="nv"&gt;$exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$resolver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//send to sentry&lt;/span&gt;

    &lt;span class="nv"&gt;$resolver&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No código acima a chamada &lt;code&gt;$resolver-&amp;gt;reject(false);&lt;/code&gt; é a chamada que rejeita explicitamente a mensagem, caso você não defina um fallback, o Pigeon tem um fallback padrão que rejeitará a mensagem caso a env &lt;code&gt;PIGEON_ON_FAILURE&lt;/code&gt; esteja presente com o valor &lt;code&gt;reject&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#letterthief"&gt;
  &lt;/a&gt;
  LetterThief
&lt;/h2&gt;

&lt;p&gt;Após rejeitar a mensagem, ela irá para uma dead letter exchange de onde podemos armazenar essa mensagem problemática em uma fila, avaliar mais tarde ou dar um tratamento digno para ela ali mesmo. No caso da &lt;a href="//convenia.com.br"&gt;Convenia&lt;/a&gt; desenvolvemos um serviço chamado "LetterThief" que é responsável por gerenciar as mensagens que foram rejeitadas e avisar o time quando ocorre uma rejeição:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x-b22DSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9mroe7jjke7gvdr2yh9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x-b22DSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9mroe7jjke7gvdr2yh9.png" alt="listagem de mensagens rejeitadas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Acima está retratada a listagem das mensagens rejeitadas, nesse serviço conseguimos filtrar as mensagens pela suas propriedades, Toda rejeição ocorre em uma fila e exchange específicas e em um certo momento. Os filtros são capazes de trazer rejeições que ocorreram em uma determinada fila ou em um determinado momento.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3P08znRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8fajcrbdbyot6ahqf7k3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3P08znRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8fajcrbdbyot6ahqf7k3.png" alt="página de detalhes da mensagem rejeitada"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ná página de detalhes da mensagem rejeitada temos todas as informações da mensagem, sabemos de que serviço ela veio, sabemos qual foi o listener que a rejeitou e o mais importante, temos o &lt;code&gt;correlation_id&lt;/code&gt; que será utilizado para confrontar o erro com as exceptions que cairem no &lt;a href="https://sentry.io"&gt;sentry&lt;/a&gt;. Com essas informações sabemos exatamente o porque uma mensagem foi rejeitada e o envio para o sentry é feito pelo listener logo antes de rejeitar a mensagem:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ya9GLFDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1lkiqj224y43bx97o0d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ya9GLFDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1lkiqj224y43bx97o0d.png" alt="mensagem de erro no sentry"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="/storage/convenia-event-driven-quando-da-errado/sentry-tags.png" class="article-body-image-wrapper"&gt;&lt;img src="/storage/convenia-event-driven-quando-da-errado/sentry-tags.png" alt="sentry-tags.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As imagens acima mostram um erro real que ocorreu no ambiente de produção e a parte de tags contendo o &lt;code&gt;correlation_id&lt;/code&gt;, infelizmente não posso mostrar a exception com mais detalhes para não expor dados sensíveis :/&lt;/p&gt;

&lt;p&gt;Legal, o serviço traz bastante visibilidade para os erros que ocorreram mas como os desenvolvedores são avisados sobre o ocorrido? O LetterThief tem uma integração com o slack assim toda a equipe é notificada quando um erro ocorre e pode agir imediatamente para resolver o problema.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IKV77NXD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/763qcx7uuf9kd7hkr64r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IKV77NXD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/763qcx7uuf9kd7hkr64r.png" alt="notificação no slack enviada pelo letter thief"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Na imagem acima vemos a notificação que chega no slack, ela contém a fila onde ocorreu o problema e o link para a mensagem no serviço do LetterThief, dessa forma o desenvolvedor responsável já sabe que deve corrigir o problema o quanto antes.&lt;/p&gt;

&lt;p&gt;Você deve estar se perguntando o que acontece com a mensagem após a correção do problema já que muito provavelmente ela deveria causar algum efeito no sistema mas acabou não causando devido ao erro ocorrido, após resolver o erro o desenvolvedor tem a capacidade de reenviar a mensagem através do LetterThief.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qW0CVNRu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77ir3me8wi8jztgg1e8o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qW0CVNRu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77ir3me8wi8jztgg1e8o.png" alt="modal de confirmação para reenviar a mensagem"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Na imagem acima é possível ver o botão "TRY MESSAGE AGAIN" que resulta nessa confirmação que está sendo exibida, após a confirmação, a mensagem será reenviada diretamente para a fila de onde o erro foi causado, dessa forma o processamento deve ocorrer normalmente.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cuidados-adicionais"&gt;
  &lt;/a&gt;
  Cuidados adicionais
&lt;/h2&gt;

&lt;p&gt;Você deve estar se deparando com algumas questões após ter chego até aqui, a verdade é que para tudo isso funcionar corretamente temos que ter alguns cuidados que são garantidos em um fluxo rígido de &lt;a href="https://www.youtube.com/watch?v=_7W9pqWPyfc"&gt;code review&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Os listeners devem ser &lt;a href="https://developer.mozilla.org/pt-BR/docs/Glossary/Idempotent"&gt;idempotentes&lt;/a&gt;, como pode ocorrer um erro durante o processamento, no caso de uma criação no banco de dados por exemplo, não podem haver registros duplicados, devemos fazer a opção por uma função de &lt;code&gt;upsert&lt;/code&gt; ao invés de um &lt;code&gt;create&lt;/code&gt;, isso vai evitar que dois registros sejam criados quando a mensagem for reenviada, lembrando que a mensagem pode ser reenviada mais de uma vez.&lt;/li&gt;
&lt;li&gt;O listener deve obrigatoriamente enviar a mensagem para o sentry e logo em seguida rejeitar a mensagem no fallback, muita lógica não é bem vinda aqui pois não podem haver falhas dentro do fallback, isso causaria a devolução da mansagem para a fila e o problema de reprocessamento infinito apresentado no inicio do post.&lt;/li&gt;
&lt;li&gt;Devemos ser cuidadosos ao avaliar datas dentro do listener, não devemos nunca avaliar o momento em que a mensagem chega no listener, sempre devemos avaliar a data em que o evento foi emitido, isso chega obrigatoriamente com todo o evento, dessa forma evitamos de processar uma data errada devido ao delay da mensagem.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h2&gt;

&lt;p&gt;Toda arquitetura distribuída tem uma complexidade mais elevada, observabilidade e tratamento de erros são pautas de muitas talks e donos da preocupação de várias equipes. Sem dúvidas em uma arquitetura orientada a eventos precisamos de uma forma de lidar com erros no processamento de mensagens assíncronas. No caso específico da Convenia a melhor saída foi fazer nosso próprio serviço que atende exatamente ao que precisamos. Existem outras opções de message broker como &lt;a href="https://kafka.apache.org/"&gt;kafka&lt;/a&gt; que podem trazer soluções já prontas para esse problema, o que te economizará o trabalho de desenvolver e manter a solução, de qualquer forma é muito importante ter uma solução similar a essa para auxiliar a equipe no dia a dia.&lt;/p&gt;

&lt;p&gt;O LetterThief foi desenvolvido com a premissa da segurança em relação a perda de mensagens, se reparar cuidadosamente vai ver que utilizando o LetterThief é impossível perder uma mensagem no meio do caminho, ou ela foi processada corretamente ou foi parar no LetterThief, caso o desenvolvedor do listener tenha sido muito transgressor ao implementar o listener, a mensagem voltará para a fila, independente da opção que adotarmos acho essa premissa de "nunca perder a mensagem" importante para se levar em consideração.&lt;/p&gt;

</description>
      <category>php</category>
      <category>laravel</category>
      <category>microservices</category>
      <category>pigeon</category>
    </item>
    <item>
      <title>Codecov supply chain attack - Step by step breakdown</title>
      <author>mackenziejj</author>
      <pubDate>Mon, 21 Jun 2021 14:06:23 +0000</pubDate>
      <link>https://dev.to/mackenziejj/codecov-supply-chain-attack-step-by-step-breakdown-4a2e</link>
      <guid>https://dev.to/mackenziejj/codecov-supply-chain-attack-step-by-step-breakdown-4a2e</guid>
      <description>&lt;p&gt;Codecov recently had a significant breach as attackers were able to put a backdoor into Codecov to get access to customers' sensitive data. This article reviews exactly what happened, how attackers gained access, how they used sensitive information and of course, what to do if you were affected. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h1&gt;

&lt;p&gt;This breach was done by very sophisticated attackers who exploited a mistake in how Codecov built docker images. They used this to modify a script which allowed them to send the environment variables from the CI of Codecov customers to a remote server. While the attackers could have conducted multiple attacks from there, we can see based on other disclosures that one path they did take was accessing private git repositories from the git credentials in the CI environment, then exploiting secrets and data within. This shows the importance of keeping your git repositories clean and ensuring we don’t use production credentials in our CI environment where possible. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-codecov"&gt;
  &lt;/a&gt;
  What is Codecov?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gMs7MBJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/Nwzlrsscb3LzjzdxyuRO00chE4PU2XfP0Txrf8bXcdmGRBTFjsOyjK0V-Sz5nUQXU4i82zyD_33d8S9kvsY_CoO-HKDwbbUkqKJ9Af_tiqntU_gK0yo2XIV73rFfXmVS3ZdvTJ32" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gMs7MBJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/Nwzlrsscb3LzjzdxyuRO00chE4PU2XfP0Txrf8bXcdmGRBTFjsOyjK0V-Sz5nUQXU4i82zyD_33d8S9kvsY_CoO-HKDwbbUkqKJ9Af_tiqntU_gK0yo2XIV73rFfXmVS3ZdvTJ32"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Codecov is a code coverage tool, essentially that means they check to see how much of your application is being tested. When we're building modern applications and we're using continuous integration (CI) and continuous deployment (CD) we want to make sure that we have automated tests in place so when we release a new feature, we can be confident that it works as intended and that it hasn't unintentionally broken any features within the application. &lt;/p&gt;

&lt;p&gt;Now obviously we want to be able to test every line of code during this process, every function and every feature,  but this requires quite mature testing automation and Codecov can help develop that because it lets you know what lines of code aren't being tested in your CI environment. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-happened-quick-timeline-of-events"&gt;
  &lt;/a&gt;
  What happened - quick timeline of events
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6u01f2Rf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/jyo-uLA4KvbP_ZwUFmo02Yra8b69GNNvkzl7Z-juEqzQmxVfx1OowQcYGg1poJQROCpYJuyoiwqhfX4wPrbBsD7Um93lShPUdhXlgZ1TKHJjOscI13mxQcKu8IEsNN_Yg8vyFqVC" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6u01f2Rf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/jyo-uLA4KvbP_ZwUFmo02Yra8b69GNNvkzl7Z-juEqzQmxVfx1OowQcYGg1poJQROCpYJuyoiwqhfX4wPrbBsD7Um93lShPUdhXlgZ1TKHJjOscI13mxQcKu8IEsNN_Yg8vyFqVC" alt="Codecov timeline"&gt;&lt;/a&gt;&lt;br&gt;
On January 31st 2021 malicious actors were able to update the bash uploader script in Codecov, they did this by leveraging credentials they were able to export from a docker image (more on this later). &lt;/p&gt;

&lt;p&gt;Between January 31st and April 1st the attackers were able to squat inside Codecov and extract all of the environment variables of Codecov's customers&lt;/p&gt;

&lt;p&gt;On April 1st it was actually one of Codecov's customers that noticed that the bash uploader had a different hash value to what was published on their website indicating that something was wrong. &lt;/p&gt;

&lt;p&gt;Codecov investigated and were able to fix the issue on April 15th after some thorough investigations, Codecov then announced that they had been breached to the public and notified their customers.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://about.codecov.io/security-update/"&gt;https://about.codecov.io/security-update/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;So what does this all mean and how does it affect Codecov users and why is this type of attack a concerning trend for other CI tools? &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-is-this-type-of-attack-significant"&gt;
  &lt;/a&gt;
  Why is this type of attack Significant?
&lt;/h1&gt;

&lt;p&gt;This type of attack is called a supply chain attack, this is because Codecov sits in your software supply line. And just like a supply chain in the physical world, each part of the chain deals with lots of different goods from multiple different customers. When attackers penetrate a chain in the supply line, they can breach multiple organizations. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0uxC0AjM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/zKOgXf91Zc2H_O3_NsM0Cd3EX__mM4Z0rnD9za7mLrLo4pwoAcgzrzL0R3-U_y7FlGdw0jTqJyHGnSdHob73ZIK8o502SAOm7wRsJL63rjr6ojy9gDWQFhvGps1-4WFi6pSopFOx" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0uxC0AjM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/zKOgXf91Zc2H_O3_NsM0Cd3EX__mM4Z0rnD9za7mLrLo4pwoAcgzrzL0R3-U_y7FlGdw0jTqJyHGnSdHob73ZIK8o502SAOm7wRsJL63rjr6ojy9gDWQFhvGps1-4WFi6pSopFOx" alt="Supply chain attack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the example above of an oversimplified modern software supply chain we can follow the different stages of a typical supply chain. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We create or modify our code&lt;/li&gt;
&lt;li&gt;Commit and push this code into our repositories&lt;/li&gt;
&lt;li&gt;New code goes to CI environment

&lt;ul&gt;
&lt;li&gt;The applications is compiled&lt;/li&gt;
&lt;li&gt;We run tests on the application &lt;/li&gt;
&lt;li&gt;We produce reports on how our app performs &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code moves to CD pipeline 

&lt;ul&gt;
&lt;li&gt;Final changes reviewed&lt;/li&gt;
&lt;li&gt;Staging application deployed &lt;/li&gt;
&lt;li&gt;Production application deployed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's focus on the CI environment. We can do alot of powerful automation in this stage to test our application. But how we build applications has changed and we now rely on multiple external services; Databases, Payment systems, Cloud infrastructure……. All these components need to be accessed by the tools within the CI environment so they can build and test the application. For this reason, the CI environment needs to have access to the secrets or credentials that grant access to these systems. Hopefully, if we build a secure CI environment we are using staging infrastructure which is less critical. But it is still very common for production credentials to be used and most importantly, it is highly likely that the CI environment will have access to the git repository, which is known to contain a trove of sensitive information. &lt;/p&gt;

&lt;p&gt;So by attacking Codecov the attackers now have access to all the credentials within the CI environment for ALL Codecov customers. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-the-attackers-breached-codecov"&gt;
  &lt;/a&gt;
  How the attackers breached Codecov
&lt;/h1&gt;

&lt;p&gt;Now we understand why a supply chain attack can be extremely impactful, let's discuss the steps how the attackers were able to breach Codecov. &lt;/p&gt;

&lt;p&gt;The attackers exploited an error in how Codecov created their docker images. This process actually allowed the attackers to extract a credential from the Docker image, this credential allowed them to be able to modify their Bash uploader script. A bash script is just a set of instructions similar to what you would write within your bash or terminal, but written out in a programmatic way. They added a single line of code to this bash, which was an additional step to send all the environment variables from the CI to an attacker's remote server. Essentially taking the sensitive information that makes your application run, and giving it to the bad guy. This single line of code was, if I can say so, beautifully executed and hidden on line 525 of a 1800+ line document. Without knowing it’s there it would be extremely difficult to find.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8vtlyama--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/U8yt3fnCs1BpWPRhA1JpBQ-L2M47U753t_-YIiQNJPLQdbCYZzsGrFw7l52J4x9ZhH7op3j_m8PjV8pQzTCqm_AYg9yP-GymAhp5CiI961L_iex_g5QJOuSj8pTUkfP15KEpX9A4" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8vtlyama--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/U8yt3fnCs1BpWPRhA1JpBQ-L2M47U753t_-YIiQNJPLQdbCYZzsGrFw7l52J4x9ZhH7op3j_m8PjV8pQzTCqm_AYg9yP-GymAhp5CiI961L_iex_g5QJOuSj8pTUkfP15KEpX9A4"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://gist.github.com/davidrans/ca6e9ffa5865983d9f6aa00b7a4a1d10"&gt;View the entire compromised bash uploader script&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#who-was-affected-by-this"&gt;
  &lt;/a&gt;
  Who was affected by this?
&lt;/h1&gt;

&lt;p&gt;Codecov has 23 000 customers/users, anyone that was using the compromised version of Codecov between January 31st and April 1st would have been affected. Large organizations such as  Twilio, Hashicorp, Rapid7, Confluent  have released their own statements about how this has affected them.  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-did-the-attackers-do"&gt;
  &lt;/a&gt;
  What did the attackers do?#
&lt;/h1&gt;

&lt;p&gt;Because there are so many potential victims, we cannot be sure on all the ways the attackers leveraged the sensitive information they stole. However from the public disclosures we can get an idea. A good example is Twilio. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1a35M0uf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/GZeutWG1B53htQuJHKnJiIbiSPAqdsL37vHGvSgm1iYkvEG4B0eLUx5oRl32m8vZDEholL8JhkuuymI9BmrWAFJvWiA57tBJAcRATPwGL1zqAtslrrYMX7Vha_OcfwXHpAlDGkAi" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1a35M0uf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/GZeutWG1B53htQuJHKnJiIbiSPAqdsL37vHGvSgm1iYkvEG4B0eLUx5oRl32m8vZDEholL8JhkuuymI9BmrWAFJvWiA57tBJAcRATPwGL1zqAtslrrYMX7Vha_OcfwXHpAlDGkAi" alt="Example Codecov attack path"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On April 22, 7 days after public announcement of the breach, GitHub had noticed suspicious activity relating to the Codecov breach and private repositories had been cloned with some Twilio user tokens exposed within these repositories. &lt;/p&gt;

&lt;p&gt;While this example is very small in the scale of the breach, it clearly shows one attack path the attackers took. &lt;br&gt;
Compromise Codecov&lt;br&gt;
Use stolen git credentials from bash uploader&lt;br&gt;
Access private repositories using stolen git credentials&lt;br&gt;
Scan repositories for sensitive information and secrets &lt;br&gt;
Exploit secrets &lt;/p&gt;

&lt;p&gt;This clearly shows that private git repositories were a clear target by the attackers. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-should-you-do-if-you-have-been-affected"&gt;
  &lt;/a&gt;
  What should you do if you have been affected?
&lt;/h2&gt;

&lt;p&gt;If you were using code carved between January 31st and April 1st then it's very important that you take action now. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#revoke-secrets"&gt;
  &lt;/a&gt;
  Revoke secrets
&lt;/h2&gt;

&lt;p&gt;The first thing that you should do is rotate all your credentials, this means all the credentials your CI environment has access to, even if they are not used in production environments as these can still be used to move laterally. But it also means to revoke access to any credentials that were stored with git repositories or other remote data stores that the CI environment had access to. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-logs"&gt;
  &lt;/a&gt;
  Check logs
&lt;/h2&gt;

&lt;p&gt;The next thing is we want to analyze our logs to make sure that we can see any suspicious activity, this will give an indication whether or not the attackers have penetrated into your systems. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scan-git-repositories"&gt;
  &lt;/a&gt;
  Scan git repositories
&lt;/h2&gt;

&lt;p&gt;You should now agree it is very important to make sure our git systems are clean and free of sensitive information. These can be hidden deep in the git history of a project making them very difficult to find. This is why it is important to use detection tools to do this. &lt;br&gt;
GitGuardian has a free version of their detection system which will quickly uncover any secrets, you can sign up &lt;a href="https://dashboard.gitguardian.com"&gt;here&lt;/a&gt;. If you have private shared repositories within an organization then these can only be scanned with the enterprise version. There is however a hack to do this for free. You can sign up for the 30 day free trial and use the time to audit your git history without needing to pay for the tool (but don’t tell anyone). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-two-way-authentication-for-machines"&gt;
  &lt;/a&gt;
  Add two way authentication for machines
&lt;/h2&gt;

&lt;p&gt;The final step you may choose to take is adding two way authentication for machines accessing secrets. This means that you can grant access to your systems within your CI environment while adding another encryption and authentication step so attackers cannot use these even if they get exposed. This is a great step and fantastic products like Hashicorp vault exist that can do this. Bear in mind, these are often very complicated tools that are costly and complicated to install (even if the underlying tool is open-source). But this will ensure that in the event of an attack like this you are covered. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#is-codecov-safe"&gt;
  &lt;/a&gt;
  Is Codecov safe?
&lt;/h1&gt;

&lt;p&gt;This is an uncomfortable question often, but I will provide my thoughts on this. &lt;br&gt;
Firstly it is impossible to reduce the risk of the breach to 0. New vulnerabilities and exploits are discovered every day so there is always a risk that tools within your supply chain will be compromised. The attack on Codecov was clearly conducted by sophisticated attackers and while they were able to exploit a mistake, it was not a trivial exploit. &lt;/p&gt;

&lt;p&gt;The other consideration is communication, Codecov were very upfront about the breach and have continued to provide new information. This is a good indication. &lt;/p&gt;

&lt;p&gt;While I believe we need to be critical of tools we introduce into our supply chain, we can be certain Codecov have fixed the underlying problem and would have conducted a serious security audit following the breach. &lt;/p&gt;

&lt;p&gt;The final comment on this falls back to the customers of Codecov. Of course we expect our vendors to take security measures seriously, but we also need to take responsibility for our own security. This means making sure we don’t use production credentials in our CI environment, ensuring our git repositories are clean and having response plans in place. If we can do this then we can &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h2&gt;

&lt;p&gt;Hopefully you found this article useful in understanding how this attack was conducted and If you have any questions, comments or want to request a breach review, reach out on Twitter to me at @advocatemack or use the hashtag #askmack. &lt;/p&gt;

</description>
      <category>security</category>
      <category>appsec</category>
      <category>devops</category>
      <category>hacking</category>
    </item>
    <item>
      <title>Introduction to TypeScript</title>
      <author>Ponikar</author>
      <pubDate>Mon, 21 Jun 2021 14:04:00 +0000</pubDate>
      <link>https://dev.to/ponikar/introduction-to-typescript-1acj</link>
      <guid>https://dev.to/ponikar/introduction-to-typescript-1acj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hello there, This is Darshan Ponikar and today we are going to talk about switching from JavaScript to TypeScript! &lt;/p&gt;

&lt;p&gt;So get ready to resolve all your doubts you are having with TypeScript!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-typescript"&gt;
  &lt;/a&gt;
  Why TypeScript?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/gd09Y2Ptu7gsiPVUrv/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/gd09Y2Ptu7gsiPVUrv/giphy.gif" alt="Typescript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am assuming that you are totally unaware of TypeScript. TypeScript, As name suggest it is a Type checking language!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TypeScript is not a brand new language! TypeScript is a super-set of JavaScript, which means you can still use the same syntax you have used in JavaScript! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before I tell you directly how does things work in TypeScript &lt;strong&gt;Let's talk about our favourite language JavaScript.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JavaScript is a &lt;strong&gt;Runtime Language!&lt;/strong&gt; That's means everything happens at runtime. We &lt;strong&gt;cannot compile JavaScript&lt;/strong&gt; like Java, C++, C.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//app.js

let num = 3 
console.log(typeof num) // this will print number
num = "I am String" 
console.log(typeof num) // this will print string 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So you can declare variable &lt;strong&gt;assigned number&lt;/strong&gt; to it and you can even &lt;strong&gt;assigned string to that same variable&lt;/strong&gt;. If you are coming from Java or C++, You will probably wonder JavaScript is weird. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But sometimes this weirdness can driving you crazy?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/9nUtl7JLuXeg/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/9nUtl7JLuXeg/giphy.gif" alt="JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are working with &lt;strong&gt;large scale web application&lt;/strong&gt;, I am assuming you are using React!&lt;/p&gt;

&lt;p&gt;Lots of &lt;strong&gt;Components&lt;/strong&gt;, Lots of &lt;strong&gt;Props&lt;/strong&gt; passing through Child Components, Helpers functions to make API calls and a lots of things are going on in that Project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sometimes you probably have ended up spending hours behind the undefined error, Silly mistakes (Datatype mismatch).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;i.e In a React App, A Component must accept string value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
// app.jsx
// this is valid
&amp;lt;Component name="Darshan!" /&amp;gt; 

// this is invalid but JavaScript won't show any error
&amp;lt;Component name={123} /&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;JavaScript will not complaint if you have passed number value instead of string. It will print that value on browser. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;But this is totally wrong. A name must have string datatype.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So how do we proceed further?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#level-up-with-typescript"&gt;
  &lt;/a&gt;
  Level up with TypeScript
&lt;/h3&gt;

&lt;p&gt;Here TypeScript come into the Picture!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TypeScript is use to make enterprise level web applications, which is powered by Microsoft! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unlike JavaScript &lt;strong&gt;your code can be compiled before you run them on a browser.&lt;/strong&gt; So you can solve any potential silly mistake and save your time!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TypeScript allow you to narrow down the type of the variable.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// app.ts
// Narrowed down type to string
let name:string = "Darshan" 

// This will show you the error
name = 123 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We fully type our variable name to string.&lt;/p&gt;

&lt;p&gt;If you are writing your code in VSCode editor this will probably show you the error! Something like you ** cannot assign number value to string.**&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You don't have to explicitly define type every time. TypeScript can implicitly define type based on right hand side value.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.ts
const name = "I am String"

// This will still show you the error!
name = 8923 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The example you have seen above is &lt;strong&gt;inference type binding.&lt;/strong&gt;&lt;br&gt;
There are other type binding ways &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;inference&lt;/li&gt;
&lt;li&gt;interface &lt;/li&gt;
&lt;li&gt;type&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can read more in the documentation!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#things-to-remember-while-working-with-typescript"&gt;
  &lt;/a&gt;
  Things to remember while working with TypeScript!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;TypeScript is &lt;strong&gt;Compile time Language.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You &lt;strong&gt;cannot run TypeScript on Browser directly.&lt;/strong&gt; You need &lt;strong&gt;babel compiler that convert your TypeScript to JavaScript code.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can also &lt;strong&gt;create your own Type!&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To narrowed down your props/state you &lt;strong&gt;need to know the particular type.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You need to &lt;strong&gt;configure project before you start writing code in TypeScript.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So this is how TypeScript can &lt;strong&gt;speed up you development and save more time.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ready to play with TypeScript? Checkout &lt;strong&gt;TypeScript playground!&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.typescriptlang.org/play"&gt;TypeScript Playground&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading the blog. If you liked it, Let me know your thoughts in comment box, What did you like most?&lt;/p&gt;

&lt;p&gt;If you think there is mistake or you want to add up something, Please do share your thoughts in comment box.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ZfK4cXKJTTay1Ava29/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ZfK4cXKJTTay1Ava29/giphy.gif" alt="TypeScript is fun"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>Get User Current Location Using HTML5 Geolocation API ← JavaScript</title>
      <author>Raja Tamil</author>
      <pubDate>Mon, 21 Jun 2021 13:58:06 +0000</pubDate>
      <link>https://dev.to/hirajatamil/get-user-current-location-using-html5-geolocation-api-javascript-3icm</link>
      <guid>https://dev.to/hirajatamil/get-user-current-location-using-html5-geolocation-api-javascript-3icm</guid>
      <description>&lt;p&gt;If you’re building a location-based application like a food delivery app etc, it’s obvious that your app will need to get the user’s current location.&lt;/p&gt;

&lt;p&gt;At the end of this tutorial, you will have a simple application built similar to the animation below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JeOwX4-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://softauthor.com/wp-content/uploads/2019/09/get-a-users-location-with-javascript-geoloacation-geocoding.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JeOwX4-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://softauthor.com/wp-content/uploads/2019/09/get-a-users-location-with-javascript-geoloacation-geocoding.gif" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To build that, I will first show you how to get the current user’s location in the form of latitude and longitude coordinates using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API"&gt;HTML5 Geolocation API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then, you’re going to learn how to convert the latitude and longitude coordinates into an actual human-readable address using &lt;a href="https://developers.google.com/maps/documentation/geocoding/start?utm_source=google&amp;amp;utm_medium=cpc&amp;amp;utm_campaign=FY18-Q2-global-demandgen-paidsearchonnetworkhouseads-cs-maps_contactsal_saf&amp;amp;utm_content=text-ad-none-none-DEV_c-CRE_315916117661-ADGP_Hybrid%20%7C%20AW%20SEM%20%7C%20SKWS%20~%20Geocoding%20API-KWID_43700039136946174-kwd-301485311002-userloc_9001132&amp;amp;utm_term=KW_geocoding%20api-ST_geocoding%20api&amp;amp;gclid=CjwKCAjwtuLrBRAlEiwAPVcZBml4y3UmIPwTUmSL8UGW4koHaRz8WsAniJTJIOizAhgvmINLn5M59BoCvRIQAvD_BwE"&gt;Geocoding API&lt;/a&gt; from Google.&lt;/p&gt;

&lt;p&gt;Finally, I will show you how to add &lt;a href="https://developers.google.com/maps/documentation/places/web-service/autocomplete"&gt;Autocomplete API&lt;/a&gt;, which will let users enter their addresses manually when Geolocation API Locator permission was denied or is not supported.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#infographics"&gt;
  &lt;/a&gt;
  Infographics
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VWn4y1C0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2019/09/Get-A-Users-Location-with-Javascript.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VWn4y1C0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2019/09/Get-A-Users-Location-with-Javascript.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://softauthor.com/get-user-current-location-html5-geolocation-api-javascript/#setting-up-the-project"&gt;Setting Up The Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://softauthor.com/get-user-current-location-html5-geolocation-api-javascript/#get-latitude-longitude-using-geolocation-api"&gt;Get Latitude &amp;amp; Longitude Using Geolocation API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://softauthor.com/get-user-current-location-html5-geolocation-api-javascript/#obtain-the-google-maps-api-Key"&gt;Obtain the API Key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://softauthor.com/get-user-current-location-html5-geolocation-api-javascript/#enable-geocoding-api"&gt;Enable Geocoding API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://softauthor.com/get-user-current-location-html5-geolocation-api-javascript/#ajax-http-request-to-geocoding-api"&gt;AJAX HTTP Request To Geocoding API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://softauthor.com/get-user-current-location-html5-geolocation-api-javascript/#show-user-address-to-the-input-field"&gt;Show User Address To The Input Field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://softauthor.com/get-user-current-location-html5-geolocation-api-javascript/#enter-address-manually-via-places-autocomplete-api"&gt;Enter Address Manually Via AutoComplete API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-1-setting-up-the-project"&gt;
  &lt;/a&gt;
  STEP #1: Setting Up The Project
&lt;/h3&gt;

&lt;p&gt;I have a simple project setup that has two files &lt;strong&gt;index.html&lt;/strong&gt; and &lt;strong&gt;app.js&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.0/semantic.min.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Your code here --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://maps.googleapis.com/maps/api/js?key=*********&amp;amp;libraries=places"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, I have linked to &lt;a href="https://semantic-ui.com"&gt;semantic-ui&lt;/a&gt; which will help me save some time on the UI side.&lt;/p&gt;

&lt;p&gt;At the bottom of the page after the &lt;strong&gt;body&lt;/strong&gt; tag, add Maps API source link and make sure to add your own API Key in there.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// All your code goes here&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-get-latitude-amp-longitude-using-geolocation-api"&gt;
  &lt;/a&gt;
  STEP #2: Get Latitude &amp;amp; Longitude Using Geolocation API
&lt;/h3&gt;

&lt;p&gt;Using the HTML5 Browser Geolocation API, your app will be able to obtain a user’s location in the form of latitude and longitude coordinates upon being granted the permission.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Some older browsers may not support Geolocation API and you can check the browser compatibility &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API#browser_compatibility"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To get the coordinates, all you have to do is to invoke &lt;strong&gt;getCurrentPosition()&lt;/strong&gt; method on the &lt;strong&gt;geolocation&lt;/strong&gt; object. This method will take a few arguments. In this case, I have two callback functions as arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geolocation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCurrentPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Locator was denied. :(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When running the code above, the user will be prompted, asking permission to access his/her location.&lt;/p&gt;

&lt;p&gt;If the user gives permission, the first callback function will have the &lt;strong&gt;position&lt;/strong&gt; object in which you can find latitude and longitude along with other meta information.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8g9scBhT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2019/09/html5-geolocation-api-notification-message.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8g9scBhT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2019/09/html5-geolocation-api-notification-message.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the user denies sharing his/her location, you can capture it inside the error callback function.&lt;/p&gt;

&lt;p&gt;Pretty straight forward and simple! 📍&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The other option to get the user’s location would be to use &lt;a href="https://developers.google.com/maps/documentation/geolocation/overview"&gt;Google GeoLocation API&lt;/a&gt;, in case you want to explore it.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, I need to create an API Key from Google in order to use Geocoding API which will convert geographic coordinates into a human-readable address.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-obtain-the-api-key"&gt;
  &lt;/a&gt;
  STEP #3: Obtain the API Key
&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=ASiEw-eakWM"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DR-HkH1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://img.youtube.com/vi/ASiEw-eakWM/0.jpg" alt="IMAGE ALT TEXT HERE"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Log in to &lt;a href="https://accounts.google.com/signin/v2/identifier?service=cloudconsole&amp;amp;passive=1209600&amp;amp;osid=1&amp;amp;continue=https%3A%2F%2Fconsole.cloud.google.com%2Fgoogle%2Fmaps-apis%2Foverview&amp;amp;followup=https%3A%2F%2Fconsole.cloud.google.com%2Fgoogle%2Fmaps-apis%2Foverview&amp;amp;flowName=GlifWebSignIn&amp;amp;flowEntry=ServiceLogin"&gt;Google Cloud Platform&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JO59MXly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2019/08/google-cloud-platform-console.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JO59MXly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2019/08/google-cloud-platform-console.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Then, go to &lt;strong&gt;Select a project ▾&lt;/strong&gt; drop-down menu, which will open up a dialog box with your existing projects if any. Choose the one that you want to obtain an API key from.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kFok7YrG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2019/08/select-a-project-google-places-api.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kFok7YrG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2019/08/select-a-project-google-places-api.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Otherwise, create a new project by clicking the NEW PROJECT button at the top right of the dialog box.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jYW3yNXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2019/08/create-a-new-project-google-cloud-platform.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jYW3yNXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2019/08/create-a-new-project-google-cloud-platform.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once the project is selected, go to the Navigation Menu button at the top left of the page, choose &lt;strong&gt;APIs &amp;amp; Services&lt;/strong&gt; → &lt;strong&gt;Credentials&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y8cO-5pO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2019/08/apiservices-credentials.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y8cO-5pO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2019/08/apiservices-credentials.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select &lt;strong&gt;Create Credentials&lt;/strong&gt; → &lt;strong&gt;API Key&lt;/strong&gt;, which will open up a dialog box with your API Key. 🔑&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That is it, you have it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-enable-geocoding-api"&gt;
  &lt;/a&gt;
  STEP #4: Enable Geocoding API
&lt;/h3&gt;

&lt;p&gt;In your Google Cloud Platform Console, go to &lt;strong&gt;APIs &amp;amp; Services&lt;/strong&gt; → &lt;strong&gt;Dashboard&lt;/strong&gt; → &lt;strong&gt;Enable APIs &amp;amp; Services&lt;/strong&gt; at the top and choose Maps JavaScript API from the API Library.&lt;/p&gt;

&lt;p&gt;This will open up the Map JavaScript API page and &lt;strong&gt;Enable&lt;/strong&gt; it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dd5VbL5I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2019/08/enable-maps-javascript-api.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dd5VbL5I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2019/08/enable-maps-javascript-api.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, scroll down to &lt;strong&gt;More Solutions&lt;/strong&gt; to explore and choose &lt;strong&gt;Geocoding API **→ **Enable&lt;/strong&gt; it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y_6pcd1_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2019/09/google-enable-geocoding-api.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y_6pcd1_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2019/09/google-enable-geocoding-api.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-ajax-http-request-to-geocoding-api"&gt;
  &lt;/a&gt;
  STEP #5: AJAX HTTP Request To Geocoding API
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developers.google.com/maps/documentation/geocoding/start?utm_source=google&amp;amp;utm_medium=cpc&amp;amp;utm_campaign=FY18-Q2-global-demandgen-paidsearchonnetworkhouseads-cs-maps_contactsal_saf&amp;amp;utm_content=text-ad-none-none-DEV_c-CRE_315916117661-ADGP_Hybrid%20%7C%20AW%20SEM%20%7C%20SKWS%20~%20Geocoding%20API-KWID_43700039136946174-aud-581578347266%3Akwd-301485311002-userloc_1002367&amp;amp;utm_term=KW_geocoding%20api-ST_geocoding%20api&amp;amp;gclid=EAIaIQobChMI1vGgmKLG5AIVEhgMCh2e7wf9EAAYASAAEgImSPD_BwE"&gt;Geocoding API&lt;/a&gt; will convert an actual human-readable address to geographic coordinates.&lt;/p&gt;

&lt;p&gt;However, what I want is &lt;a href="https://developers.google.com/maps/documentation/geocoding/start?utm_source=google&amp;amp;utm_medium=cpc&amp;amp;utm_campaign=FY18-Q2-global-demandgen-paidsearchonnetworkhouseads-cs-maps_contactsal_saf&amp;amp;utm_content=text-ad-none-none-DEV_c-CRE_315916117661-ADGP_Hybrid%20%7C%20AW%20SEM%20%7C%20SKWS%20~%20Geocoding%20API-KWID_43700039136946174-aud-581578347266%3Akwd-301485311002-userloc_1002367&amp;amp;utm_term=KW_geocoding%20api-ST_geocoding%20api&amp;amp;gclid=EAIaIQobChMI1vGgmKLG5AIVEhgMCh2e7wf9EAAYASAAEgImSPD_BwE"&gt;Reverse Geocoding&lt;/a&gt; which is the process of converting geographic coordinates into an actual human-readable address.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://softauthor.com/get-user-current-location-html5-geolocation-api-javascript/#enter-address-manually-via-places-autocomplete-api"&gt;Continue Reading...&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>html</category>
    </item>
    <item>
      <title>Your first Elixir Project (Part 1)</title>
      <author>Adam Davis</author>
      <pubDate>Mon, 21 Jun 2021 13:47:32 +0000</pubDate>
      <link>https://dev.to/brewinstallbuzzwords/your-first-elixir-project-part-1-4f6i</link>
      <guid>https://dev.to/brewinstallbuzzwords/your-first-elixir-project-part-1-4f6i</guid>
      <description>&lt;p&gt;Let's write some Elixir!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-before-we-start"&gt;
  &lt;/a&gt;
  But before we start...
&lt;/h2&gt;

&lt;p&gt;This tutorial series is designed to introduce developers to the Elixir programming language and get them up-and-running with a simple project.&lt;/p&gt;

&lt;p&gt;If this is the first you've heard of Elixir, start with &lt;a href="https://www.brewinstallbuzzwords.com/posts/learn-elixir-with-me/"&gt;my post that gives an overview of the language&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This post assumes that you've already worked through &lt;a href="https://dev.to/posts/elixir-hands-on-tutorial-pt-00"&gt;part 0 of this tutorial series&lt;/a&gt;, which includes instructions for installing Elixir and creating the template project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-the-template-project"&gt;
  &lt;/a&gt;
  Running the template project
&lt;/h2&gt;

&lt;p&gt;Open a new terminal window and run the command &lt;code&gt;iex&lt;/code&gt;. Now, you should be in the elixir REPL environment.&lt;/p&gt;

&lt;p&gt;However, just because you're in the Elixir REPL doesn't automatically mean that you can run your code. &lt;code&gt;iex(1)&amp;gt; UnitConverter.hello()&lt;/code&gt; gives an error.&lt;/p&gt;

&lt;p&gt;Because Elixir is a compiled language, the function will be undefined until we compile it. For compiling, we have a couple options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To compile a single file, run &lt;code&gt;c&lt;/code&gt; followed by a string for the file path: &lt;code&gt;c "lib/unit_converter.ex"&lt;/code&gt;. After making changes to the code, you would then re-compile the module by running &lt;code&gt;r&lt;/code&gt; followed by the name of the module: &lt;code&gt;r UnitConverter&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Alternatively, if you are working within a project, you can open an iex shell with &lt;code&gt;iex -S mix&lt;/code&gt; at the project's root directory. This will compile all modules in the project, allowing you to recompile all of them at once with the &lt;code&gt;recompile&lt;/code&gt; command. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While method 1 works just fine, I recommend using method 2 as I find it to be more convenient.&lt;/p&gt;

&lt;p&gt;After compiling your code with either of the two methods, run &lt;code&gt;UnitConverter.hello()&lt;/code&gt; again in iex. If all went well, you should see &lt;code&gt;:world&lt;/code&gt; printed as the result.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The value has a colon at the beginning because it uses the atom data type. We're not going to go over the details of elixir's data types in this post, but &lt;a href="https://elixir-lang.org/getting-started/basic-types.html#atoms"&gt;here's the relevant documentation&lt;/a&gt; if you want to learn more.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here's a recap of what just happened:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The file &lt;code&gt;lib/unit_converter.ex&lt;/code&gt; has a module called &lt;code&gt;UnitConverter&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;You compiled that module and accessed it using &lt;code&gt;iex&lt;/code&gt;, which is the REPL environment for elixir&lt;/li&gt;
&lt;li&gt;You ran the &lt;code&gt;hello&lt;/code&gt; function in the &lt;code&gt;UnitConverter&lt;/code&gt; module using dot notation&lt;/li&gt;
&lt;li&gt;That function returned the value &lt;code&gt;:world&lt;/code&gt;, which caused that value to be printed to the terminal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;"But wait," you might be saying to yourself. "How did that value get returned? I don't see a &lt;code&gt;return&lt;/code&gt; statement!"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And you'd be right, there is no return statement. That's because, in elixir, functions automatically return the value of their last statement.&lt;/p&gt;

&lt;p&gt;If you want to test that principle out for yourself, try adding another value before or after &lt;code&gt;:hello&lt;/code&gt; and see what happens (don't forget to recompile before running the code again).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="ss"&gt;:world&lt;/span&gt;
  &lt;span class="ss"&gt;:worlds&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# returns :worlds&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="ss"&gt;:world&lt;/span&gt;
  &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# returns 10&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="s2"&gt;"there"&lt;/span&gt;
  &lt;span class="ss"&gt;:world&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# returns :world&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#writing-some-code"&gt;
  &lt;/a&gt;
  Writing some code
&lt;/h2&gt;

&lt;p&gt;Now that we're a bit more acquainted with how to compile and run elixir code, let's start writing some.&lt;/p&gt;

&lt;p&gt;Throughout this tutorial, we're going to be writing functions that convert between units of measurement.&lt;/p&gt;

&lt;p&gt;For our first function, we'll convert kilograms to grams:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;kilograms_to_grams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All this function does is multiply its input parameter &lt;code&gt;x&lt;/code&gt; by 1000 and return that value.&lt;/p&gt;

&lt;p&gt;Here's some things to note about this function:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;def&lt;/code&gt; lets elixir know that you're writing a function&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;do&lt;/code&gt; signifies the end of the function header and the beginning of the function body&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;end&lt;/code&gt; tells elixir you've reached the end of the code block&lt;/li&gt;
&lt;li&gt;The common convention is to use snake case for elixir function names, meaning everything is lowercase and there are underscores between each word&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now let's run this function.&lt;/p&gt;

&lt;p&gt;You should still have &lt;code&gt;iex&lt;/code&gt; open from earlier. If you don't, just run &lt;code&gt;iex -S mix&lt;/code&gt;. Save your code and run &lt;code&gt;recompile&lt;/code&gt; in &lt;code&gt;iex&lt;/code&gt;. Then run &lt;code&gt;UnitConverter.kilograms_to_grams(10)&lt;/code&gt;. If everything worked, you should see the output &lt;code&gt;10000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🔥 hot tip 🔥&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you're tired of typing &lt;code&gt;UnitConverter&lt;/code&gt; before every function call, you can run &lt;code&gt;import UnitConverter&lt;/code&gt; in &lt;code&gt;iex&lt;/code&gt; to call them without prefixing the module name. More information can be found &lt;a href="https://elixir-lang.org/getting-started/alias-require-and-import.html"&gt;on this page of the documentation&lt;/a&gt;. You only need to import a module once. If you run &lt;code&gt;recompile&lt;/code&gt;, the updated code will be imported.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#time-to-test"&gt;
  &lt;/a&gt;
  Time to test 🎊
&lt;/h2&gt;

&lt;p&gt;Now that we've verified our function works for at least some values, it's time to write some unit tests so we can cover edge cases and ensure that the function continues to work after we make more changes.&lt;/p&gt;

&lt;p&gt;In your text editor, open the file &lt;code&gt;test/unit_converter_tests.exs&lt;/code&gt;. This is where test cases are written.&lt;/p&gt;

&lt;p&gt;You should see an existing test for the &lt;code&gt;hello&lt;/code&gt; function that was included in the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="s2"&gt;"greets the world"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="no"&gt;UnitConverter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:world&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break this test down:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tests blocks start with the &lt;code&gt;test&lt;/code&gt; keyword&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"greets the world"&lt;/code&gt; is the name of test, which is used to provide helpful logging about which tests passed&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;assert&lt;/code&gt; is a function that causes the test to fail if its argument evaluates to &lt;code&gt;false&lt;/code&gt;. Note that this function does not require parentheses&lt;/li&gt;
&lt;li&gt;All that's really going on here is that our test is verifying whether the value returned by &lt;code&gt;UnitConverter.hello()&lt;/code&gt; is equal to &lt;code&gt;:world&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we've gone over what this test does, let's actually run it!&lt;/p&gt;

&lt;p&gt;Open a new terminal window and run the command &lt;code&gt;mix test&lt;/code&gt;. If you haven't changed the &lt;code&gt;hello&lt;/code&gt; function, then you should get a successful result that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;

&lt;span class="no"&gt;Finished&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;0.06&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;doctest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;failures&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's try writing a test for the function we wrote above. From earlier, we know that we want  &lt;code&gt;UnitConverter.kilograms_to_gram(10)&lt;/code&gt; to return &lt;code&gt;10000&lt;/code&gt; so we'll start there.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="s2"&gt;"converts kilograms to grams"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="no"&gt;UnitConverter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kilograms_to_grams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, run the test using &lt;code&gt;mix test&lt;/code&gt; and you should see a successful result that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="no"&gt;Finished&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;0.06&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;doctest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;failures&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before we add more functionality, let's write some more test cases to ensure our function works for other situations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="s2"&gt;"converts kilograms to grams"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="no"&gt;UnitConverter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kilograms_to_grams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;
  &lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="no"&gt;UnitConverter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kilograms_to_grams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="no"&gt;UnitConverter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kilograms_to_grams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1500&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="s2"&gt;"kilograms to grams handles invalid input"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="no"&gt;UnitConverter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kilograms_to_grams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"hello there"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"invalid input"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="no"&gt;UnitConverter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kilograms_to_grams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"invalid input"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="no"&gt;UnitConverter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kilograms_to_grams&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"invalid input"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="no"&gt;UnitConverter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kilograms_to_grams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:invalid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"invalid input"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's a few things going on in the updated test, so let's break it down:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We added two new cases with the &lt;code&gt;"converts kilograms to grams"&lt;/code&gt; test. These cases cover zero and decimal inputs.&lt;/li&gt;
&lt;li&gt;Next we created the test &lt;code&gt;"kilograms to grams handles invalid input"&lt;/code&gt; which, as the name implies, has cases for different invalid inputs.&lt;/li&gt;
&lt;li&gt;The value &lt;code&gt;{:error, "invalid input"}&lt;/code&gt; probably looks unfamiliar. In elixir, the common convention for errors is that a &lt;a href="https://hexdocs.pm/elixir/1.12/Tuple.html"&gt;tuple&lt;/a&gt; is returned. The first value in the tuple is &lt;code&gt;:error&lt;/code&gt;, and the second value is a message that explains the error.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we run the tests again with &lt;code&gt;mix test&lt;/code&gt;, we can see that we haven't handled everything we need to handle:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;kilograms&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;grams&lt;/span&gt; &lt;span class="n"&gt;handles&lt;/span&gt; &lt;span class="n"&gt;invalid&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;UnitConverterTest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;unit_converter_test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;exs:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;
     &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ArithmeticError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;bad&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;arithmetic&lt;/span&gt; &lt;span class="ss"&gt;expression:&lt;/span&gt; &lt;span class="s2"&gt;"hello there"&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
     &lt;span class="ss"&gt;code:&lt;/span&gt; &lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="no"&gt;UnitConverter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kilograms_to_grams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"hello there"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"invalid input"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="ss"&gt;stacktrace:&lt;/span&gt;
       &lt;span class="ss"&gt;:erlang&lt;/span&gt;&lt;span class="o"&gt;.*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"hello there"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unit_converter&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;unit_converter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;UnitConverter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kilograms_to_grams&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
       &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;unit_converter_test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;exs:&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="no"&gt;Finished&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;doctest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;failure&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From this output, we can see that we get an &lt;code&gt;ArithmeticError&lt;/code&gt; when we try to call &lt;code&gt;kilograms_to_grams("hello there")&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you take a look back at that function in &lt;code&gt;lib/unit_converter.ex&lt;/code&gt; you can see that we're using the &lt;code&gt;*&lt;/code&gt; operator, which does not accept strings as an argument.&lt;/p&gt;

&lt;p&gt;To ensure we only allow numbers to reach that point, we can check the type of the value in an if statement, using the &lt;code&gt;is_number&lt;/code&gt; function. (For more information, see the docs &lt;a href="https://hexdocs.pm/elixir/Kernel.html#is_number/1"&gt;here&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;kilograms_to_grams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"invalid input"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's run the tests again and see what we get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;kilograms&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;grams&lt;/span&gt; &lt;span class="n"&gt;handles&lt;/span&gt; &lt;span class="n"&gt;invalid&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;UnitConverterTest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;unit_converter_test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;exs:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;
     &lt;span class="no"&gt;Assertion&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt;
     &lt;span class="ss"&gt;code:&lt;/span&gt;  &lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="no"&gt;UnitConverter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kilograms_to_grams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"invalid input"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="ss"&gt;left:&lt;/span&gt;  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;
     &lt;span class="ss"&gt;right:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"invalid input"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="ss"&gt;stacktrace:&lt;/span&gt;
       &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;unit_converter_test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;exs:&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="no"&gt;Finished&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;0.08&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;doctest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;failure&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The test are still failing, but we get a different failure now. Progress!&lt;/p&gt;

&lt;p&gt;The problem now is that we aren't checking to see if the input is non-negative. To fix this, we can add &lt;code&gt;and x &amp;gt;= 0&lt;/code&gt; to our condition in the &lt;code&gt;if&lt;/code&gt; statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;kilograms_to_grams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"invalid input"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run the tests again, they should all pass!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="o"&gt;....&lt;/span&gt;

&lt;span class="no"&gt;Finished&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;0.09&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;doctest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;failures&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#you-did-it"&gt;
  &lt;/a&gt;
  You did it!
&lt;/h2&gt;

&lt;p&gt;You've now written your first elixir function and passed your unit tests! If you'd like to continue working on this project, I'll be releasing a part 2 where you will...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn how to use the pipe operator!&lt;/li&gt;
&lt;li&gt;Use type guards to separate validation from functionality!&lt;/li&gt;
&lt;li&gt;Perform basic pattern matching!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make sure you don't miss out, &lt;a href="https://dev.to/brewinstallbuzzwords"&gt;follow me on DEV&lt;/a&gt; or &lt;a href="https://mailchi.mp/89dc077154c7/brewinstallbuzzwords"&gt;subscribe to my monthly newsletter&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-content"&gt;
  &lt;/a&gt;
  More content
&lt;/h2&gt;

&lt;p&gt;If you liked this, you might also like some of my other posts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/brewinstallbuzzwords/changing-emoji-skin-tones-programmatically-4667"&gt;Changing Emoji Skin Tones Programmatically&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/brewinstallbuzzwords/i-made-my-first-svg-animation-29j3"&gt;I made my first svg animation!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/brewinstallbuzzwords/5-tips-for-publishing-your-first-npm-package-3e4a"&gt;5 tips for publishing your first npm package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/brewinstallbuzzwords/4-hugo-beginner-mistakes-90h"&gt;4 Hugo Beginner Mistakes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/brewinstallbuzzwords/introducing-meme-type-a-translator-for-internet-speak-i6a"&gt;Introducing meme-type: A translator for internet speak&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>elixir</category>
      <category>functional</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Your first Elixir Project (Part 0)</title>
      <author>Adam Davis</author>
      <pubDate>Mon, 21 Jun 2021 13:46:35 +0000</pubDate>
      <link>https://dev.to/brewinstallbuzzwords/your-first-elixir-project-part-0-1686</link>
      <guid>https://dev.to/brewinstallbuzzwords/your-first-elixir-project-part-0-1686</guid>
      <description>&lt;p&gt;Have you heard of Elixir, the incredibly scalable functional programming language that developers love, but haven't gotten around to trying it out?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If this is the first you've heard of the language, &lt;a href="https://www.brewinstallbuzzwords.com/posts/learn-elixir-with-me/"&gt;check out my previous post&lt;/a&gt; where I give an overview of elixir.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I'm writing this tutorial series as a way to introduce other developers to the language and get them up-and-running with a simple project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;In this post, you will...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install Elixir&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;mix&lt;/code&gt; to create a project template&lt;/li&gt;
&lt;li&gt;Understand the basic structure of an elixir project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After following all parts of this tutorial, you will have created a project that can convert between different units of measurement.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;The first thing we need to do is install elixir. If you use a package manager, the process is as simple as running a command.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;homebrew —&amp;gt; &lt;code&gt;brew install elixir&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;alpine linux —&amp;gt; &lt;code&gt;apk add elixir&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;chocolatey —&amp;gt; &lt;code&gt;cinst elixir&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your package manager isn't listed here or you run into trouble, &lt;a href="https://elixir-lang.org/install.html"&gt;click here for the official installation instructions&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-project-template"&gt;
  &lt;/a&gt;
  Creating the project template
&lt;/h2&gt;

&lt;p&gt;When writing code in elixir you'll make frequent use of the build automation tool &lt;code&gt;mix&lt;/code&gt;, which you should have access to after installing elixir.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open your terminal and navigate to the directory you'd like to work in.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;mix new unit_converter&lt;/code&gt; (You can think of this like &lt;code&gt;npm init&lt;/code&gt; or &lt;code&gt;create-react-app&lt;/code&gt; or &lt;code&gt;ng new&lt;/code&gt;. This command creates the basic scaffolding for you to build a project in elixir)&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;ls&lt;/code&gt;. You should now see the &lt;code&gt;unit_converter&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;Open the &lt;code&gt;unit_converter&lt;/code&gt; directory in your favorite code editor. If you use vscode, you can do this by running &lt;code&gt;code unit_converter&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The structure of your project should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── .formatter.exs
├── .gitignore
├── README.md
├── lib
|  └── unit_converter.ex
├── mix.exs
└── test
   ├── test_helper.exs
   └── unit_converter_test.exs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's take a tour of the files that were generated...&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to jump straight into writing code, you can skip to the next part of this tutorial for now and come back here if you have questions later on&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;lib/unit_converter.ex&lt;/code&gt; —&amp;gt; This file contains your &lt;code&gt;UnitConverter&lt;/code&gt; module and is where we will be writing most of our code for this tutorial. If you open it up, you should see an autogenerated hello world function.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;README.md&lt;/code&gt; —&amp;gt; A markdown file for writing documentation. When you share code with others (through GitHub or other means) this is usually the first file that people will see.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mix.exs&lt;/code&gt; —&amp;gt; This file defines information about your project (such as the project name and the elixir version). It also includes other information such as your list of dependencies. Think of it like the &lt;code&gt;package.json&lt;/code&gt; file in a node project.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.gitignore&lt;/code&gt; —&amp;gt; Provides git with a list of files and directories that should not be tracked. If you take a peek at this file, you can see the names of files and directories that might be generated later on (elixir provides some helpful comments for each file or directory being ignored)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;test/test_helper.exs&lt;/code&gt; —&amp;gt; When testing your code with ExUnit, this file is run before your tests are executed. The autogenerated file just starts ExUnit, but for more complex testing workflows you can add more code to this file.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;test/unit_converter_test.exs&lt;/code&gt; —&amp;gt; This is where your test cases for the &lt;code&gt;UnitConverter&lt;/code&gt; module will live. There should be an autogenerated test case for the hello world function in this file. As we write code in this tutorial, we will be adding test cases for other functions.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.formatter.exs&lt;/code&gt; —&amp;gt; This file allows you to configure the auto-formatting of your code. We will take advantage of the auto-formatting in this tutorial, but we probably won't be making any modifications to this file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#onward"&gt;
  &lt;/a&gt;
  Onward!
&lt;/h2&gt;

&lt;p&gt;Now that you have your project template and understand it's structure, it's time to move on to part 1 of this tutorial and start writing some code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-content"&gt;
  &lt;/a&gt;
  More content
&lt;/h2&gt;

&lt;p&gt;If you liked this, consider &lt;a href="https://mailchi.mp/89dc077154c7/brewinstallbuzzwords"&gt;subscribing to my newsletter&lt;/a&gt; or reading one of my other posts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/brewinstallbuzzwords/changing-emoji-skin-tones-programmatically-4667"&gt;Changing Emoji Skin Tones Programmatically&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/brewinstallbuzzwords/i-made-my-first-svg-animation-29j3"&gt;I made my first svg animation!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/brewinstallbuzzwords/5-tips-for-publishing-your-first-npm-package-3e4a"&gt;5 tips for publishing your first npm package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/brewinstallbuzzwords/4-hugo-beginner-mistakes-90h"&gt;4 Hugo Beginner Mistakes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/brewinstallbuzzwords/introducing-meme-type-a-translator-for-internet-speak-i6a"&gt;Introducing meme-type: A translator for internet speak&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>elixir</category>
      <category>functional</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Image Slider Using HTML, CSS, and javaScript</title>
      <author>Foolish Developer</author>
      <pubDate>Mon, 21 Jun 2021 13:38:18 +0000</pubDate>
      <link>https://dev.to/code_mystery/image-slider-using-html-css-and-javascript-5dfn</link>
      <guid>https://dev.to/code_mystery/image-slider-using-html-css-and-javascript-5dfn</guid>
      <description>&lt;p&gt;In this article you are going to learn how to create image slider using HTML, CSS and JavaScript programming code. I have designed &lt;a href="https://www.foolishdeveloper.com/2021/06/how-to-create-image-slider-using-html.html"&gt;many more types of image sliders&lt;/a&gt; before. Hope you like this design like other designs. &lt;/p&gt;

&lt;p&gt;This type of slide is used on the homepage or image gallery of various websites. Basically a web developer uses jQuery or different types of plugins to create these. &lt;br&gt;
If you want to create an image slider with HTML, CSS and JavaScript only without any jQuery or plugin then this article will definitely help you. For this you need to have an idea about basic HTML, CSS and JavaScript then you can understand the following programming codes.&lt;/p&gt;

&lt;p&gt;If you can &lt;a href="https://www.foolishdeveloper.com/2021/06/create-image-slider-using-html-css-and.html"&gt;watch the live demo&lt;/a&gt; then you will understand how this slider works. In this case I used three images and used a white border around this slider. In this case I have used two buttons to change the images. I used JavaScript programming code to activate these buttons.&lt;/p&gt;

&lt;p&gt;To create an image slider, you first need to &lt;code&gt;create an HTML and CSS file&lt;/code&gt;. Then attach that CSS file to the HTML file[&lt;code&gt;&amp;lt;link rel="stylesheet" href="css.css"&amp;gt;&lt;/code&gt;].&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-1-create-the-basic-layout-of-the-image-slider"&gt;
  &lt;/a&gt;
  Step 1: Create the basic layout of the image slider
&lt;/h3&gt;

&lt;p&gt;Copy the HTML programming code below and then paste it into your HTML file. Here I have used the CSS code below which was originally used to design the background and to give this slider a shape. &lt;br&gt;
You can see below I have used the &lt;code&gt;width:600px&lt;/code&gt; and &lt;code&gt;height 400px&lt;/code&gt;. If you want to increase or decrease the size of this slider, you can increase or decrease that amount.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"carousel-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!--Add Add Preview and Next buttons--&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!--Add Image--&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;58&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="nc"&gt;.carousel-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--snstBMJy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjbvlj657tlfjcm7plah.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--snstBMJy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjbvlj657tlfjcm7plah.jpg" alt="Create the basic layout of the image slider"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-add-preview-and-next-buttons"&gt;
  &lt;/a&gt;
  Step 2: Add Preview and Next buttons
&lt;/h3&gt;

&lt;p&gt;I have used two buttons here as you saw in the demo above. I used the following HTML programming code to make these two buttons. Below I have added some amount of CSS code which was originally used to design this button. &lt;/p&gt;

&lt;p&gt;In this case you will see that the &lt;code&gt;font-size is 25 px&lt;/code&gt;. If you want to increase the size of this button then of course you can increase this amount. In this case I have used &lt;code&gt;position:absolute&lt;/code&gt; which means the two buttons in the slider will be fixed in the same position.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navigation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"prev nav-btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="na"&gt;div&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"next nav-btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.navigation&lt;/span&gt; &lt;span class="nc"&gt;.prev&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.navigation&lt;/span&gt; &lt;span class="nc"&gt;.next&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.navigation&lt;/span&gt; &lt;span class="nc"&gt;.nav-btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.55&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.navigation&lt;/span&gt; &lt;span class="nc"&gt;.nav-btn&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XiWgyMWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lqqrx9sp4fr2vmf09ycg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XiWgyMWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lqqrx9sp4fr2vmf09ycg.jpg" alt="Add Preview and Next buttons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-add-the-required-images-and-text-in-the-slider"&gt;
  &lt;/a&gt;
  Step 3: Add the required images and text in the slider
&lt;/h3&gt;

&lt;p&gt;I added the images with this image slider using the HTML code below and added some amount of description along with it. There are &lt;code&gt;different descriptions for each image&lt;/code&gt;. The description will change as you change the images.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"carousel"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://wallpapercave.com/wp/wp3473585.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"mountain"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"caption"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Image 1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://i.pinimg.com/originals/cd/7b/5c/cd7b5c8d4687b5c98a445127926a56e2.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"beach"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"caption"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Image 2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://i.ytimg.com/vi/-3N6fCzgXuc/maxresdefault.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"cityscape"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"caption"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Image 3&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;      
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have also added CSS code below which has been used to design some of these images. In this case you will see that I have used a border around the image for which I have used &lt;code&gt;border:8px solid white&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="nc"&gt;.carousel&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0.3s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.carousel&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0.3s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2l0gcPnj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3ml5x7xqi5if61mdjl5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2l0gcPnj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3ml5x7xqi5if61mdjl5.jpg" alt="Add the required images and text in the slider"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As I said above I have used it here instead of adding the description. I have given a separate description for each image. I have already added these descriptions and now we will design that description.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.caption&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;103%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SCKrsvJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkxyfvxblnnf8lvva4kx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SCKrsvJ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkxyfvxblnnf8lvva4kx.jpg" alt="design that description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-activate-the-two-buttons-using-javascript-code"&gt;
  &lt;/a&gt;
  Step 4: Activate the two buttons using JavaScript code
&lt;/h3&gt;

&lt;p&gt;So far we have only designed this slider, now we will activate the buttons here. After activating the button, we can change the images as we wish. Of course, you need to know the basic JavaScript programming code for this, then you can understand the following JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.prev&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;images&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.carousel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;totalImages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;nextImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;nextImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prev&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;nextImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;totalImages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;totalImages&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BwG1LmdK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mysfu8cyaxvslao8otm9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BwG1LmdK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mysfu8cyaxvslao8otm9.jpg" alt="Activate the two buttons using JavaScript code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you have learned from this tutorial how I created this image slider using html, css and javascript. If you have any problems, you can definitely comment. You can watch the live demo or &lt;a href="https://www.foolishdeveloper.com/2021/06/create-image-slider-using-html-css-and.html"&gt;download the required source code&lt;/a&gt; if you want. &lt;code&gt;You must comment on how you like this design&lt;/code&gt;.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Javascript Questions </title>
      <author>Esraa</author>
      <pubDate>Mon, 21 Jun 2021 13:05:48 +0000</pubDate>
      <link>https://dev.to/esraarefaat/javascript-questions-11n8</link>
      <guid>https://dev.to/esraarefaat/javascript-questions-11n8</guid>
      <description>&lt;p&gt;💡 for (var i = 0; i &amp;lt; 3; i++) &lt;br&gt;
      {&lt;br&gt;
    setTimeout(() =&amp;gt; &lt;br&gt;
    console.log(i), 1);&lt;br&gt;
      }&lt;/p&gt;

&lt;p&gt;for (let i = 0; i &amp;lt; 3; i++) {&lt;br&gt;
  setTimeout(() =&amp;gt; console.log(i), 1);&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;A: 0 1 2 and 0 1 2&lt;br&gt;
B: 0 1 2 and 3 3 3&lt;br&gt;
C: 3 3 3 and 0 1 2&lt;/p&gt;

&lt;p&gt;Answer: C&lt;br&gt;
Because of the event queue in JavaScript, the setTimeout callback function is called after the loop has been executed. Since the variable i in the first loop was declared using the var keyword, this value was global. During the loop, we incremented the value of i by 1 each time, using the unary operator ++. By the time the setTimeout callback function was invoked, i was equal to 3 in the first example.&lt;/p&gt;

&lt;p&gt;In the second loop, the variable i was declared using the let keyword: variables declared with the let (and const) keyword are block-scoped (a block is anything between { }). During each iteration, i will have a new value, and each value is scoped inside the loop.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>intermediate</category>
    </item>
  </channel>
</rss>
