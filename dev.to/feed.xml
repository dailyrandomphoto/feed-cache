<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Let's build a web radio player from scratch üåêüìª</title>
      <author>Pascal Thormeier</author>
      <pubDate>Wed, 25 Aug 2021 21:09:04 +0000</pubDate>
      <link>https://dev.to/thormeier/let-s-build-a-web-radio-player-from-scratch-2poo</link>
      <guid>https://dev.to/thormeier/let-s-build-a-web-radio-player-from-scratch-2poo</guid>
      <description>&lt;p&gt;&lt;strong&gt;Video killed the radio star, internet killed the video star, and with this tutorial I'm going to show you how to come full circle!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You might know that I like to &lt;a href="https://dev.to/thormeier/let-s-build-an-actual-working-guitar-with-javascript-bfb"&gt;combine my love for music with coding&lt;/a&gt;, so instead of building full-blown instruments, today I'll focus on a way to transport music: radio!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wait-radio-is-still-a-thing"&gt;
  &lt;/a&gt;
  Wait, radio is still a thing?
&lt;/h2&gt;

&lt;p&gt;Indeed! Streaming services detach the listeners from the moderators, editors and the artists. In a radio stream, moderators can actually engage with listeners: think, interviews with artists with questions from the crowd or quiz shows!&lt;/p&gt;

&lt;p&gt;Radio stations have more advantages over your average streaming service:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Editorial content&lt;/li&gt;
&lt;li&gt;Shows on various topics&lt;/li&gt;
&lt;li&gt;Local news&lt;/li&gt;
&lt;li&gt;Ability to randomly discover a new catchy song every now and then&lt;/li&gt;
&lt;li&gt;Not having to care about what to listen to next&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A lot of people still listen to radio stations today, but they often don't use those clunky old extra-made machines anymore. Like for most tasks, listeners today use a computer and, more specifically, a browser.&lt;/p&gt;

&lt;p&gt;While this post does not cover how to set up your own stream (that one's for another time), I will show you how to present  a stream to your listeners in an accessible and visually appealing way!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#no-stream-ok-but-how-do-we-test-the-interface-then"&gt;
  &lt;/a&gt;
  No stream, ok - but how do we test the interface, then?
&lt;/h2&gt;

&lt;p&gt;Excellent question. There's a lot of radio stations out there that can be used to test the player.&lt;/p&gt;

&lt;p&gt;So step 1 is to find a stream and ideally an API endpoint that gives us the currently playing song. A popular search engine‚Ñ¢ will yield a ton of different stations to test with, so I select one that I personally like.&lt;/p&gt;

&lt;p&gt;With the stream ready, let's talk about the design next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-will-this-thing-look-like"&gt;
  &lt;/a&gt;
  What will this thing look like?
&lt;/h2&gt;

&lt;p&gt;There's a myriad of options. It could run in a popup, sit in a navigation, a side bar or a top bar that scrolls with the content. Let's look at a few examples of radio players on the web.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rock-antenne-hamburg"&gt;
  &lt;/a&gt;
  Rock Antenne Hamburg
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ajUKPNra--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmq8en5lhnogag8z57p1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ajUKPNra--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmq8en5lhnogag8z57p1.png" alt='Player of "Rock Antenne Hamburg". It contains some album covers, a play button with only an icon and the currently playing track.'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first example, the player of "Rock Antenne Hamburg", is a good example for how visual clues (the album covers, the text "Jetzt l√§uft", translating to "Now playing") can greatly enhance the user experience of a radio player. The focus seems to be on the music, which is exactly what I want.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wacken-radio"&gt;
  &lt;/a&gt;
  Wacken Radio
&lt;/h3&gt;

&lt;p&gt;The next example I want to look at, is Wacken Radio, the dedicated radio station for the Wacken Open Air festival:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OY8Cth4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqrqviw9fr5tly34mtc0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OY8Cth4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqrqviw9fr5tly34mtc0.png" alt="Wacken Radio player. It covers the entire screen and has a large play button in the center of the screen. A grey bar at the bottom contains controls, such as volume, mute and another play/pause button."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first impression is that the player is covering the entire screen, whereas in reality, the player itself is only the grey bar at the bottom. There's actually more content on the page (news, upcoming songs, etc.) that is revealed when scrolling. The grey bar is sticky and stays at the bottom of the view port. That's a similar pattern to other websites that have their player sticking to the top of the screen.&lt;/p&gt;

&lt;p&gt;Similar to Rock Antenne Hamburg, there's a label for the currently playing song and an album cover. Since the stream I'm using doesn't offer album covers, that's not really an option, though.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-possible-design"&gt;
  &lt;/a&gt;
  A possible design
&lt;/h3&gt;

&lt;p&gt;I will probably go with something simple. There's no website I could really put this example into, so I'll make it more or less standalone.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hD2l4yTZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9du8lhx7x3sbaquvf8w0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hD2l4yTZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9du8lhx7x3sbaquvf8w0.png" alt='A draft player design. A play button takes up about one fourth of the player on the left, the right consists of a label, the title of the current song, a mute/unmute button and a slider. The currently playing song reads "Rick Astley - Never gonna..."'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The slider on the bottom right will be used to control the volume. The mute/unmute button will have an icon roughly indicating the current volume. A click on it will toggle the volume to 0 and back to the last setting again.&lt;/p&gt;

&lt;p&gt;The color scheme will be one that's apparently (at least from what I can tell) popular with radio stations that play jazz a lot: Yellow, black and white. If someone knows why they tend to use yellow a lot, please leave a comment!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-html-part"&gt;
  &lt;/a&gt;
  The HTML part
&lt;/h2&gt;

&lt;p&gt;First, I need to set things up a bit. I create an empty CSS file, an empty JS file and an HTML file called &lt;code&gt;player.html&lt;/code&gt;. I'm planning to use &lt;a href="https://fontawesome.com"&gt;Fontawesome&lt;/a&gt; for the icons, so I include a CDN version of that as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- player.html --&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"//fonts.googleapis.com/css?family=Open+Sans"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://pro.fontawesome.com/releases/v5.10.0/css/all.css"&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p"&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"player.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"radio-player"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Player goes here --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"player.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, I add a div for the player and an audio element for stream.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"radio-player"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;audio&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"visually-hidden"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"stream"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- More stuff here --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/audio&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I now add the controls right underneath the audio element. I also add some containers to later add the layout with flexbox.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"player-controls"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"play-pause"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button play-pause-button"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Play/pause"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-play"&lt;/span&gt; &lt;span class="na"&gt;aria-hidden&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"volume-and-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"currently-playing"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Currently playing"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"currently-playing-label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Now playing on Some Radio Station&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"currently-playing-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Listen to Some Radio Station&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"volume-controls"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"mute"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button mute-button"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Mute/unmute"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-volume-down"&lt;/span&gt; &lt;span class="na"&gt;aria-hidden&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"range"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"volume"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"volume"&lt;/span&gt; &lt;span class="na"&gt;min=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;step=&lt;/span&gt;&lt;span class="s"&gt;"0.05"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"0.2"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Volume"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far so good! Now for the styling.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-it-look-nice"&gt;
  &lt;/a&gt;
  Making it look nice
&lt;/h2&gt;

&lt;p&gt;As a first step, I want to make the buttons look decent. I also give the entire player some margin so it's not stuck to the corner of the viewport.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.radio-player&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;vertical-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#F59E0B&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.play-pause-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.mute-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lqkGtDSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04ca3es7id0uzyxwgnm5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lqkGtDSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04ca3es7id0uzyxwgnm5.png" alt="Player elements, the buttons are styled, the rest is not."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, I align the elements with flexbox to give the entire thing the structure I want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.player-controls&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.currently-playing&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.volume-controls&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n6u9He85--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18svzfuxs8jo9bpb52zv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n6u9He85--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18svzfuxs8jo9bpb52zv.png" alt="Structured player controls"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Getting somewhere! Then I play around with font size and font weight a little to give the title more visual weight:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.currently-playing-label&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.currently-playing-title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;22px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cx38XKVZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfpyzouvox6awn1a1985.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cx38XKVZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfpyzouvox6awn1a1985.png" alt="Better visual weight for the song title and the label"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next comes the fun part: Styling the &lt;code&gt;&amp;lt;input type="range"&amp;gt;&lt;/code&gt; for the volume. &lt;/p&gt;

&lt;p&gt;I reset some of the styles using &lt;code&gt;appearance&lt;/code&gt; and start styling it according to the rough design:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.volume&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* This will help with styling the thumb */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JAM95Atq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6u0yt517bec74rn09wf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JAM95Atq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6u0yt517bec74rn09wf.png" alt="Range input, halfway styled. The thumb still looks like it's standard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's a problem when styling the thumb, though: I need to use non-standard features. This means vendor prefixes. I'll use a box shadow to color the left part of the thumb differently than the right.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"range"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-slider-thumb&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ew-resize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#F59E0B&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-400px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;390px&lt;/span&gt; &lt;span class="m"&gt;#FDE68A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"range"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;::-moz-range-thumb&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* same as above */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"range"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;::-ms-thumb&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* same as above */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"range"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;-4px&lt;/span&gt; &lt;span class="m"&gt;#F59E0B&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks a lot more like the design:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p-ONG6sd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xb55cfi4b2fy1kkj5zsq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p-ONG6sd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xb55cfi4b2fy1kkj5zsq.png" alt="Fully styled player"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-the-functionality"&gt;
  &lt;/a&gt;
  Adding the functionality
&lt;/h2&gt;

&lt;p&gt;Now I can wire up the buttons with the stream. I start by collecting all the DOM elements I need and initialize a few variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;audio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#stream&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;playPauseButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[name="play-pause"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;playPauseButtonIcon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;playPauseButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;i.fas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;volumeControl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[name="volume"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentlyPlaying&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.currently-playing-title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;volumeButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[name="mute"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;volumeButtonIcon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;volumeButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;i.fas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isPlaying&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fetchInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentVolume&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;

&lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;volume&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentVolume&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function to fetch and apply the currently playing song depends a lot on how the endpoint used structures the info. In my example, I assume a simple JSON object with a single key in the form of &lt;code&gt;{ currentSong: "..." }&lt;/code&gt;. I use &lt;code&gt;fetch&lt;/code&gt; to get the info.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Fetches the currently playing
 * @returns {Promise&amp;lt;any&amp;gt;}
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchCurrentlyPlaying&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;currentlyPlaying&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentSong&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next function I add is to adjust the icon of the mute button to reflect the current volume. If the volume drops to &lt;code&gt;0&lt;/code&gt;, it should show a muted icon, the higher the volume, the more "sound waves the speaker emits". At least figuratively.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Adjusts the icon of the "mute" button based on the given volume.
 * @param volume
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;adjustVolumeIcon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;volume&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;volumeButtonIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fa-volume-off&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;volumeButtonIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fa-volume-down&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;volumeButtonIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fa-volume-up&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;volumeButtonIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fa-volume-mute&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;volume&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.75&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;volumeButtonIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fa-volume-up&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;volume&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.75&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;volume&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;volumeButtonIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fa-volume-down&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;volume&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;volume&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;volumeButtonIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fa-volume-off&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;volume&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;volumeButtonIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fa-volume-mute&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now for the functionality of the mute button and the volume control. I want it to remember where the volume was last when muting and unmuting. That way, the user can quickly mute and later unmute the stream without having to adjust the volume again. I hook this up with the volume control and the &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;s volume:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;volumeControl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;volume&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;volumeControl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;volume&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentVolume&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;volume&lt;/span&gt;
  &lt;span class="nx"&gt;currentVolume&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;volume&lt;/span&gt;

  &lt;span class="nx"&gt;adjustVolumeIcon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;volume&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;volumeButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;volume&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;adjustVolumeIcon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;volume&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="nx"&gt;volumeControl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;adjustVolumeIcon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentVolume&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;volume&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentVolume&lt;/span&gt;
    &lt;span class="nx"&gt;volumeControl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentVolume&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last step is the play/pause button. When starting the stream, I set an interval to fetch the currently playing song every 3 seconds. Enough time to be almost real time, but not too much, so it doesn't cause too many unnecessary requests. I also switch out the icon.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;playPauseButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isPlaying&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pause&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;playPauseButtonIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fa-pause&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;playPauseButtonIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fa-play&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetchInterval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;currentlyPlaying&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Listen to Some Radio Station&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;playPauseButtonIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fa-play&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;playPauseButtonIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fa-pause&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;fetchCurrentlyPlaying&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;fetchInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetchCurrentlyPlaying&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;isPlaying&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isPlaying&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aaand we're done! Let's see the functionality in action:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fI3gMdiU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/061zzqwyhw65wknjvs6y.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fI3gMdiU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/061zzqwyhw65wknjvs6y.gif" alt="Radio player in cation, showing all the controls and how they work."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;I hope you enjoyed reading this article as much as I enjoyed writing it! If so, leave a&lt;/em&gt; ‚ù§Ô∏è &lt;em&gt;or a&lt;/em&gt; ü¶Ñ&lt;em&gt;! I write tech articles in my free time and like to drink coffee every once in a while.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to support my efforts,&lt;/em&gt; &lt;a href="http://buymeacoffee.com/pthormeier"&gt;&lt;em&gt;please consider buying me a coffee&lt;/em&gt; ‚òï&lt;/a&gt; &lt;em&gt;or&lt;/em&gt; &lt;a href="https://twitter.com/pthormeier"&gt;&lt;em&gt;following me on Twitter&lt;/em&gt; üê¶&lt;/a&gt;&lt;em&gt;!&lt;/em&gt; &lt;em&gt;You can also support me and my writing directly via &lt;a href="https://www.paypal.me/pthormeier"&gt;Paypal&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://buymeacoffee.com/pthormeier"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc4mYYLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x55hp6jopwyy161d8e2u.png" alt="Buy me a coffee button"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>Welcome Thread - v139</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 25 Aug 2021 21:04:07 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v139-9d6</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v139-9d6</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QRq7Z16c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/8UGGp7rQvfhe63HrFq/giphy.gif%3Fcid%3Decf05e4706pyve6wjcdjzye8s29u2tq6zxp2t9318mcbeb44%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QRq7Z16c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/8UGGp7rQvfhe63HrFq/giphy.gif%3Fcid%3Decf05e4706pyve6wjcdjzye8s29u2tq6zxp2t9318mcbeb44%26rid%3Dgiphy.gif%26ct%3Dg" alt="Happy Pok√©mon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. üëã &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>How to make realtime APIs with NodeJS and ReactJS using Socket.io</title>
      <author>Omar Diaaeldine Elwakeel</author>
      <pubDate>Wed, 25 Aug 2021 20:32:25 +0000</pubDate>
      <link>https://dev.to/omardiaa48/how-to-make-realtime-apis-with-nodejs-and-reactjs-using-socket-io-6ja</link>
      <guid>https://dev.to/omardiaa48/how-to-make-realtime-apis-with-nodejs-and-reactjs-using-socket-io-6ja</guid>
      <description>&lt;p&gt;We all love design patterns, and we all wonder when it's best to use them, I'm going to use one of them to apply one business case that you might stumble upon in work. The pattern I'm talking about is "&lt;a href="https://dev.to/jamesrweb/the-publisher-subscriber-pattern-pb"&gt;Publisher Subscriber&lt;/a&gt;".&lt;/p&gt;

&lt;p&gt;Today I'm going to make a &lt;strong&gt;realtime API&lt;/strong&gt; that updates all the connected clients to it whenever and actions takes place on the db, so a super admin user using a dashboard can instantly know if other admins have signed in or out without refreshing the page every couple of seconds, other case is instantly knowing that an order is received on the platform you are working on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#this-tutorial-im-going-to-use"&gt;
  &lt;/a&gt;
  This tutorial, I'm going to use:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;NodeJS with Express for server side logic&lt;/li&gt;
&lt;li&gt;ReactJS to build a simple client app&lt;/li&gt;
&lt;li&gt;Socket.io for realtime connection between both sides&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#to-follow-along-you-can-write-the-code-step-by-step-as-ill-cover-most-of-it-or-you-can-clone-the-two-repos"&gt;
  &lt;/a&gt;
  To follow along, you can write the code step by step as I'll cover most of it, or you can clone the two repos:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/omar-diaa-48/real-time-API-server"&gt;server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/omar-diaa-48/real-time-API-client"&gt;client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First lets setup our server we start by initializing the folder structure&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then we add the packages we use, in this tutorial I'm going to use ES6 syntax in the backend so we need babel to bundle our code, beside some other libraries we will use later on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm add nodemon dotenv  babel-loader 
@babel/preset-env @babel/node @babel/core -D
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;these are devDependencies, that's why we use -D flag because we dont need them for more than development.&lt;/p&gt;

&lt;p&gt;1.nodemon for hot running &lt;br&gt;
2.dotenv for .env configuration&lt;br&gt;
3.babel stuff for bundling &lt;/p&gt;

&lt;p&gt;now for the heavy lifters&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm add express mongoose socket.io
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1.express to setup our server&lt;br&gt;
2.mongoose to connect to our mongodb &lt;br&gt;
3.socket.io the one responsible for the realtime connection&lt;/p&gt;

&lt;p&gt;now that was a bit boring, let's write some Javascript&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import express from 'express'
import dotenv from 'dotenv'

dotenv.config()

const app = express()


app.get('/', (req,res)=&amp;gt;{
   res.send('Hello')
})

const PORT = process.env.PORT || 5000;

app.listen(PORT, () =&amp;gt; {
  console.log(`Server up and running on port ${PORT}`);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;before running this code you have to setup some configuration&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.env&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PORT=5000
MONGO_DB_URL=mongodb://localhost:27017
MONGO_DB_DBNAME=store
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;.babelrc&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "presets": [
    "@babel/preset-env"
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;....
  "scripts": {
    "start": "babel-node index.js",
    "dev": "nodemon --exec babel-node index.js"
  },
....
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now when you type &lt;code&gt;npm run dev&lt;/code&gt;, you will find the server up and running and if you type in your browser &lt;code&gt;http://localhost:5000&lt;/code&gt; you will get the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KjjsAep1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdysy1ucisb952fbvptv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KjjsAep1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdysy1ucisb952fbvptv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;now let's make three folders and adjust our code as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3tOuqxBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ujk2bazt40uihht45x6.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3tOuqxBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ujk2bazt40uihht45x6.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;then for better environment variables handling&lt;br&gt;
&lt;code&gt;config/variables.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import dotenv from 'dotenv'
dotenv.config()

const DB_URL = `${process.env.MONGO_DB_URL}/${process.env.MONGO_DB_DBNAME}`;
const PORT = process.env.PORT;

export {
  DB_URL,
  PORT
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;initialize and connect to database&lt;br&gt;
&lt;code&gt;config/db.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {DB_URL} from '../config/variables'

mongoose.connect(DB_URL, {
  useNewUrlParser:true,
  useUnifiedTopology:true
}, () =&amp;gt; {
  console.log(DB_URL);
  console.log(`DB up and running`);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;order model&lt;br&gt;
&lt;code&gt;models/order.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import mongoose, {Schema} from 'mongoose'

const schema = new Schema({
  customer:{
    type:String,
    required:true
  },
  price:{
    type:Number,
    required:true
  },
  address:{
    type:String,
    required:true
  }
}, {
  timestamps:true
}) 

const Order = mongoose.model('order', schema)

export default Order;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;order controller&lt;br&gt;
&lt;code&gt;controllers/order.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import express from 'express'
import Order from '../models/order'
import {io} from '../index' 

const router = express.Router()

router.get('/', async (req, res) =&amp;gt; {
  try {
    const orders = await Order.find()
    res.send(orders)
  } catch (error) {
    res.send(error)
  }
})

router.post('/', async (req, res) =&amp;gt; {
  try {
    const order = new Order(req.body)
    await order.save()
    res.status(201).send(order)
  } catch (error) {
    res.send(error)
  }
})

export default router
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now the important part &lt;br&gt;
&lt;code&gt;index.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import express from 'express'
import {PORT} from './config/variables'
import cors from 'cors'
import http from 'http'
// import { Server } from 'socket.io';
import socketIO from 'socket.io';
// import './config/sockets'
import './config/db'

import orderRouter from './controllers/order'

const app = express()
const server = http.createServer(app)
const io = socketIO(server, {
  transports:['polling'],
  cors:{
    cors: {
      origin: "http://localhost:3000"
    }
  }
})

io.on('connection', (socket) =&amp;gt; {
  console.log('A user is connected');

  socket.on('message', (message) =&amp;gt; {
    console.log(`message from ${socket.id} : ${message}`);
  })

  socket.on('disconnect', () =&amp;gt; {
    console.log(`socket ${socket.id} disconnected`);
  })
})

export {io};


app.use(express.json())
app.use(cors())
app.use('/orders', orderRouter)

app.get('/', (req,res) =&amp;gt; {
  res.send('Hello')
})

server.listen(PORT, () =&amp;gt; {
  console.log(`Server up and running on port ${PORT}`);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#let-me-explain-what-happened-here"&gt;
  &lt;/a&gt;
  let me explain what happened here
&lt;/h2&gt;

&lt;p&gt;the way we configure the server will differ when using socket.io because it deals with the server instance itself so&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const server = http.createServer(app)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then we wrap it with io, allow some cors which will be the client side after a short while on port 3000&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const io = socketIO(server, {
  transports:['polling'],
  cors:{
    cors: {
      origin: "http://localhost:3000"
    }
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;configuring io and exporting it to be used in the order controller&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;io.on('connection', (socket) =&amp;gt; {
  console.log('A user is connected');

  socket.on('message', (message) =&amp;gt; {
    console.log(`message from ${socket.id} : ${message}`);
  })

  socket.on('disconnect', () =&amp;gt; {
    console.log(`socket ${socket.id} disconnected`);
  })
})

export {io};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then we go the order controller and change the code to&lt;br&gt;
&lt;code&gt;controllers/order.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.post('/', async (req, res) =&amp;gt; {
  try {
    const order = new Order(req.body)
    await order.save()
    const orders = await Order.find()
    io.emit('order-added', orders)
    res.status(201).send(order)
  } catch (error) {
    res.send(error)
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which means that whenever someone will add an order, it will be posted to all clients connected the socket, so will be updated instantly with the orders array in the db&lt;/p&gt;

&lt;p&gt;Now we can go to the client side and consume this API, we use &lt;code&gt;create-react-app&lt;/code&gt; because we don't need a complex app we just need to demonstrate the behavior&lt;/p&gt;

&lt;p&gt;here, I made a simple ui components called Orders, for the code you can easily find it in the repo, but I'm interested in this part&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const [orders, setOrders] = useState([])

  useEffect(() =&amp;gt; {
    const getOrders = async () =&amp;gt; {
      const response = await axios.get('http://localhost:5000/orders')
      const ordersData = response.data;
      setOrders(ordersData)
    } 

    getOrders()
  }, [])

  useEffect(() =&amp;gt; {
    const socket = io('ws://localhost:5000')

    socket.on('connnection', () =&amp;gt; {
      console.log('connected to server');
    })

    socket.on('order-added', (newOrders) =&amp;gt; {
      setOrders(newOrders)
    })

    socket.on('message', (message) =&amp;gt; {
      console.log(message);
    })

    socket.on('disconnect', () =&amp;gt; {
      console.log('Socket disconnecting');
    })

  }, [])

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;first we have the state which is an empty array initially&lt;/p&gt;

&lt;p&gt;the first useEffect call is a call to the get orders endpoint we have just made to get all orders and then we populate the view with it&lt;/p&gt;

&lt;p&gt;the second useEffect call, we connect using &lt;code&gt;socket.io-client&lt;/code&gt; which we will install on the client side using &lt;code&gt;npm i socket.io-client&lt;/code&gt;, then we specify that on &lt;em&gt;order-added&lt;/em&gt; event from the socket we will have the orders being sent with the event and set it to be the new array, so whenever a new order is added we will be notified with the new array of orders in the db.&lt;/p&gt;

&lt;p&gt;to test it, I opened the browser on port 3000 to open my react app then used postman to make a post to my server on port 5000 to add an order and viola my react-app updated instantly&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gTlb83CU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyer42z499frld7ozqhg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gTlb83CU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyer42z499frld7ozqhg.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That was my first post, I hope you liked it.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to create a Vue.js 2 / Bootstrap 4 project with Vite</title>
      <author>Giannis Koutsaftakis</author>
      <pubDate>Wed, 25 Aug 2021 20:19:59 +0000</pubDate>
      <link>https://dev.to/kouts/how-to-create-a-vue-js-2-bootstrap-4-project-with-vite-54f1</link>
      <guid>https://dev.to/kouts/how-to-create-a-vue-js-2-bootstrap-4-project-with-vite-54f1</guid>
      <description>&lt;p&gt;&lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt; is a lightning-fast dev environment and a pre-configured bundler into one. While it was first created to facilitate Vue.js 3 development, it can also be used for React, Svelte, Vanilla JS, and Vue.js 2.&lt;/p&gt;

&lt;p&gt;There are plenty of tutorials for using Vite with Vue.js 3 and a lot of ready-made starter templates as well. We will be focusing on &lt;strong&gt;Vue.js 2&lt;/strong&gt; and see how we can create a base for a new project that: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Uses Bootstrap 4.6 CSS for layout and styling&lt;/li&gt;
&lt;li&gt;Uses vue-router for client-side routing&lt;/li&gt;
&lt;li&gt;Supports global SCSS variables inside Vue components&lt;/li&gt;
&lt;li&gt;Is IE11 compatible&lt;/li&gt;
&lt;li&gt;Removes unused CSS rules from the production bundle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Let's get right to it then!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-new-vite-project"&gt;
  &lt;/a&gt;
  Create a new Vite project
&lt;/h2&gt;

&lt;p&gt;Although Vite contains many template presets out-of-the-box, it doesn't have one for Vue.js 2. We'll use the &lt;code&gt;vanilla&lt;/code&gt; preset and then add the necessary plugins for Vue.js 2 development on top.&lt;/p&gt;

&lt;p&gt;Navigate to your projects' directory and run:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Make sure you replace &lt;code&gt;my-vue-app&lt;/code&gt; with your project's name.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;npm 6.x&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init vite@latest my-vue-app &lt;span class="nt"&gt;--template&lt;/span&gt; vanilla
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;npm 7+ (extra double-dash is needed)&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init vite@latest my-vue-app &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;--template&lt;/span&gt; vanilla
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#install-plugins-needed-for-development"&gt;
  &lt;/a&gt;
  Install plugins needed for development
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-D&lt;/span&gt; vite-plugin-vue2 @vitejs/plugin-legacy vite-plugin-html vue-template-compiler sass@~1.32.13 postcss @fullhuman/postcss-purgecss autoprefixer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;vite-plugin-vue2&lt;/strong&gt; - Vue.js 2 plugin for Vite&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;@vitejs/plugin-legacy&lt;/strong&gt; - Support for legacy browsers (IE11)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;vite-plugin-html&lt;/strong&gt; - Minification and EJS template-based functionality for &lt;code&gt;index.html&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;vue-template-compiler&lt;/strong&gt; - Pre-compiles Vue.js 2 templates into render functions&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;sass&lt;/strong&gt; - Pre-processor for SCSS, we need version 1.32 to avoid a &lt;a href="https://github.com/twbs/bootstrap/issues/34051"&gt;SASS deprecation warning&lt;/a&gt; that affects Bootstrap 4&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;postcss&lt;/strong&gt; - Transforms styles with JS plugins &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;@fullhuman/postcss-purgecss&lt;/strong&gt; - PostCSS plugin that removes unused selectors from our CSS&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;autoprefixer&lt;/strong&gt; - PostCSS plugin that adds vendor prefixes to CSS rules, also needed by Bootstrap&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#install-dependencies"&gt;
  &lt;/a&gt;
  Install Dependencies
&lt;/h3&gt;

&lt;p&gt;Install Vue.js, Vue Router, and Bootstrap&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i vue vue-router bootstrap@4.6.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;We are using Bootstrap 4 since we want our project to be compatible with IE11&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#setup-file-structure"&gt;
  &lt;/a&gt;
  Setup file structure
&lt;/h2&gt;

&lt;p&gt;It's time to adjust our project's structure so that it resembles that of a &lt;code&gt;vue-cli&lt;/code&gt; project.&lt;/p&gt;

&lt;p&gt;Remove &lt;code&gt;style.css&lt;/code&gt; and move &lt;code&gt;main.js&lt;/code&gt; out of the root folder and inside the &lt;code&gt;src&lt;/code&gt; folder. Then create the following file/folder structure. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Don't worry about the files' contents for now, as we are going to fill them up as we go, just create empty files making sure they are named correctly.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚îú‚îÄ‚îÄ src
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ components
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ &amp;lt;-- store your project's components here
‚îÇ   ‚îÇ 
‚îÇ   ‚îú‚îÄ‚îÄ router
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.js
‚îÇ   ‚îÇ 
‚îÇ   ‚îú‚îÄ‚îÄ scss
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ app.scss
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ variables.scss
‚îÇ   ‚îÇ 
‚îÇ   ‚îú‚îÄ‚îÄ views
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ About.vue
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Home.vue
‚îÇ   ‚îÇ 
‚îÇ   ‚îú‚îÄ‚îÄ App.vue
‚îÇ   ‚îî‚îÄ‚îÄ main.js
‚îÇ
‚îú‚îÄ‚îÄ favicon.svg
‚îú‚îÄ‚îÄ index.html
‚îú‚îÄ‚îÄ postcss.config.js
‚îî‚îÄ‚îÄ vite.config.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#indexhtml-mainjs-and-appvue"&gt;
  &lt;/a&gt;
  index.html, main.js, and App.vue
&lt;/h2&gt;

&lt;p&gt;Vite uses &lt;code&gt;index.html&lt;/code&gt; as the entry point of the application, We'll replace the contents of &lt;code&gt;index.html&lt;/code&gt; with the markup below. Notice the EJS style variables &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; as we're going to set them in &lt;code&gt;vite.config.js&lt;/code&gt; next.&lt;/p&gt;

&lt;p&gt;We include &lt;code&gt;src/main.js&lt;/code&gt; as the only &lt;code&gt;script&lt;/code&gt; tag and Vite will resolve our JS source code.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1, shrink-to-fit=no"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;%- description %&amp;gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/svg+xml"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"favicon.svg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="na"&gt;-&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;We're sorry but &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="na"&gt;-&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; doesn't work properly without JavaScript enabled. Please enable it to continue.&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/src/main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;src/main.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;$mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;src/App.vue&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav nav-pills container pt-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;router-link&lt;/span&gt; &lt;span class="na"&gt;to=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="na"&gt;exact&lt;/span&gt; &lt;span class="na"&gt;exact-active-class=&lt;/span&gt;&lt;span class="s"&gt;"active"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          Home
        &lt;span class="nt"&gt;&amp;lt;/router-link&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;router-link&lt;/span&gt; &lt;span class="na"&gt;to=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          About
        &lt;span class="nt"&gt;&amp;lt;/router-link&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;router-view&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/scss/app.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#vite-config"&gt;
  &lt;/a&gt;
  Vite config
&lt;/h2&gt;

&lt;p&gt;The config file for Vite resides in the project's root. Here we're initializing the plugins for Vue.js 2 and IE11 compatibility as well as setting the title and description for our project.&lt;/p&gt;

&lt;p&gt;We're also setting an alias of &lt;code&gt;@&lt;/code&gt; for the &lt;code&gt;src&lt;/code&gt; folder and injecting SCSS variables globally so that they are accessible from inside Vue components. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;vite.config.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;minifyHtml&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;injectHtml&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vite-plugin-html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;legacy&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@vitejs/plugin-legacy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createVuePlugin&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vite-plugin-vue2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;createVuePlugin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="nx"&gt;minifyHtml&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="nx"&gt;injectHtml&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;injectData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ProjectName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A single page application created using Vue.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="nx"&gt;legacy&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ie &amp;gt;= 11&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;additionalLegacyPolyfills&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;regenerator-runtime/runtime&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;~bootstrap&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bootstrap&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;css&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;preprocessorOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;scss&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;additionalData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`@import "./src/scss/variables";`&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#purgecss"&gt;
  &lt;/a&gt;
  PurgeCSS
&lt;/h2&gt;

&lt;p&gt;Bootstrap contains a lot of classes, but since we usually use a small set of the framework a lot of unused styles will be included in our CSS file. Let's configure &lt;a href="https://purgecss.com/"&gt;PurgeCSS&lt;/a&gt; so that unnecessary styles will be stripped out of the final build.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;postcss.config.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;IN_PRODUCTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;production&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;autoprefixer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;IN_PRODUCTION&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
      &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@fullhuman/postcss-purgecss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)({&lt;/span&gt;
        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./**/*.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/**/*.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="nx"&gt;defaultExtractor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;contentWithoutStyleBlocks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&amp;lt;style&lt;/span&gt;&lt;span class="se"&gt;[^]&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;&amp;lt;&lt;/span&gt;&lt;span class="se"&gt;\/&lt;/span&gt;&lt;span class="sr"&gt;style&amp;gt;/gi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;contentWithoutStyleBlocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;A-Za-z0-9-_&lt;/span&gt;&lt;span class="se"&gt;/&lt;/span&gt;&lt;span class="sr"&gt;:&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;A-Za-z0-9-_&lt;/span&gt;&lt;span class="se"&gt;/]&lt;/span&gt;&lt;span class="sr"&gt;+/g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;whitelist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
        &lt;span class="na"&gt;whitelistPatterns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="sr"&gt;/-&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;leave|enter|appear&lt;/span&gt;&lt;span class="se"&gt;)(&lt;/span&gt;&lt;span class="sr"&gt;|-&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;to|from|active&lt;/span&gt;&lt;span class="se"&gt;))&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;(?!(&lt;/span&gt;&lt;span class="sr"&gt;|.*&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;:&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;cursor-move&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;.+-move$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="sr"&gt;/^router-link&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;|-exact&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;-active$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="sr"&gt;/data-v-.*/&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bootstrap-scss"&gt;
  &lt;/a&gt;
  Bootstrap SCSS
&lt;/h2&gt;

&lt;p&gt;Our app's SCSS is located in &lt;code&gt;scss/app.scss&lt;/code&gt; file. Here we include all Bootstrap SCSS except &lt;code&gt;functions&lt;/code&gt;, &lt;code&gt;variables&lt;/code&gt;, and &lt;code&gt;mixins&lt;/code&gt;, as these will go inside &lt;code&gt;scss/variables.scss&lt;/code&gt; so that we can use them inside our Vue.js components without explicitly importing them.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scss/app.scss&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Bootstrap source files (except functions, variables, mixins)&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/root"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/reboot"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/type"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/images"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/code"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/grid"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/tables"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/forms"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/buttons"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/transitions"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/dropdown"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/button-group"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/input-group"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/custom-forms"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/nav"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/navbar"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/card"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/breadcrumb"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/pagination"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/badge"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/jumbotron"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/alert"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/progress"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/media"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/list-group"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/close"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/toasts"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/modal"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/tooltip"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/popover"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/carousel"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/spinners"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/utilities"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/print"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Other application-wide SCSS rules here...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our &lt;code&gt;variables.scss&lt;/code&gt; contains overrides of Bootstrap SCSS variables as well as our own.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scss/variables.scss&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#42b983&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$body-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#304455&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="mh"&gt;#73abfe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$gray-100&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#f6f6f6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$text-muted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#4e6e8e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$gray-900&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#273849&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$dark&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#273849&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/functions"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/variables"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/mixins"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$navbar-dark-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$white&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;.7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#routing-and-views"&gt;
  &lt;/a&gt;
  Routing and Views
&lt;/h2&gt;

&lt;p&gt;Finally, let's set up our routing and the contents of our two sample views &lt;code&gt;Home&lt;/code&gt; and &lt;code&gt;About&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/router/index.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;VueRouter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue-router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/views/Home.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;VueRouter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;About&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// route level code-splitting&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/views/About.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;VueRouter&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;linkActiveClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;routes&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;src/views/Home.vue&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;This is the home page&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;src/views/About.vue&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;This is the about page&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#develop-and-build"&gt;
  &lt;/a&gt;
  Develop and Build
&lt;/h2&gt;

&lt;p&gt;In order to start developing we run the command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will start the dev server on &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For bundling our app for production we use the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create all the build assets inside the &lt;code&gt;dist&lt;/code&gt; folder ready for us to deploy anywhere we like.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finally&lt;/strong&gt;&lt;br&gt;
If you found this how-to useful, make sure you check out &lt;a href="https://github.com/kouts/vue-vite-starter-template"&gt;vue-vite-starter-template&lt;/a&gt;, which also includes ESLint, Prettier, semantic-release, Jest for testing, and more...&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>vue</category>
      <category>vite</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to use Flutter Hooks</title>
      <author>Matt Angelosanto</author>
      <pubDate>Wed, 25 Aug 2021 20:13:21 +0000</pubDate>
      <link>https://dev.to/logrocket/how-to-use-flutter-hooks-28hi</link>
      <guid>https://dev.to/logrocket/how-to-use-flutter-hooks-28hi</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/chidumennamdi/"&gt;Chidume Nnamdi&lt;/a&gt;&lt;/strong&gt; ‚úèÔ∏è&lt;/p&gt;

&lt;p&gt;Hooks, meet Flutter. Inspired by React Hooks and Dan Abramov's piece, &lt;em&gt;Making sense of React Hooks&lt;/em&gt;, the developers at Dash Overflow decided to bring Hooks into Flutter.&lt;/p&gt;

&lt;p&gt;Flutter widgets behave similarly to React components, as many of the lifecycles in a React component are present in a Flutter widget. According to the creators on their GitHub page:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hooks are a new kind of object that manages Widget life-cycles. They exist for one reason: increase the code-sharing between widgets by removing duplicates.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;flutter_hooks&lt;/code&gt; library provides a robust and clean way to manage a widget's lifecycle by increasing code-sharing between widgets and reducing duplicates in code.&lt;/p&gt;

&lt;p&gt;The built-in Flutter Hooks include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;useEffect&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;useState&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;useMemoized&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;useRef&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;useCallback&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;useContext&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;useValueChanged&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post, we‚Äôll focus on three of these Hooks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The &lt;code&gt;useState&lt;/code&gt; Hook manages local states in apps&lt;/li&gt;
&lt;li&gt;  The &lt;code&gt;useEffect&lt;/code&gt; Hook fetches data from a server and sets the fetch to the local state&lt;/li&gt;
&lt;li&gt;  The &lt;code&gt;useMemoized&lt;/code&gt; Hook memoizes heavy functions to achieve optimal performance in an app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We‚Äôll also learn how to create and use custom Hooks from &lt;code&gt;flutter_hooks&lt;/code&gt; as well.&lt;/p&gt;

&lt;p&gt;Now, let's see how we can install the &lt;code&gt;flutter_hooks&lt;/code&gt; library below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-the-raw-flutterhooks-endraw-library"&gt;
  &lt;/a&gt;
  Installing the &lt;code&gt;flutter_hooks&lt;/code&gt; library
&lt;/h2&gt;

&lt;p&gt;To use Flutter Hooks from the &lt;code&gt;flutter_hooks&lt;/code&gt; library, we must install it by running the following command in a terminal inside a Flutter project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;flutter&lt;/span&gt; &lt;span class="n"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;flutter_hooks&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This adds &lt;code&gt;flutter_hooks: VERSION_NUMER_HERE&lt;/code&gt; in the &lt;code&gt;pubspec.yaml&lt;/code&gt; file in the &lt;code&gt;dependencies&lt;/code&gt; section.&lt;/p&gt;

&lt;p&gt;Also, we can add &lt;code&gt;flutter_hooks&lt;/code&gt; into the &lt;code&gt;dependencies&lt;/code&gt; section in the &lt;code&gt;pubspec.yaml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="nl"&gt;dependencies:&lt;/span&gt;
  &lt;span class="nl"&gt;flutter:&lt;/span&gt;
    &lt;span class="nl"&gt;sdk:&lt;/span&gt; &lt;span class="n"&gt;flutter&lt;/span&gt;
  &lt;span class="nl"&gt;flutter_hooks:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After saving the file, Flutter installs the dependency. Next, import the &lt;code&gt;flutter_hooks&lt;/code&gt; library:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter_hooks/flutter_hooks.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are good to go!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-usestate-endraw-hook"&gt;
  &lt;/a&gt;
  The &lt;code&gt;useState&lt;/code&gt; Hook
&lt;/h2&gt;

&lt;p&gt;Just like &lt;code&gt;useState&lt;/code&gt; in React, &lt;code&gt;useState&lt;/code&gt; in Flutter helps us create and manage state in a widget.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;useState&lt;/code&gt; Hook is called with the state we want to manage locally in a widget. This state passes to the &lt;code&gt;useState&lt;/code&gt; Hook as a parameter. This state is the initial state because it can change during the lifetime of the widget:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;0&lt;/code&gt; passes to &lt;code&gt;useState&lt;/code&gt; and becomes the initial state.&lt;/p&gt;

&lt;p&gt;Now, let's see how we can use it in a widget. We must first &lt;a href="https://blog.logrocket.com/flutter-state-management-methods/"&gt;convert Flutter's &lt;code&gt;counter&lt;/code&gt; example&lt;/a&gt; to use &lt;code&gt;useState&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is Flutter's original &lt;code&gt;counter&lt;/code&gt; example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyHomePage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatefulWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;MyHomePage&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;_MyHomePageState&lt;/span&gt; &lt;span class="n"&gt;createState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_MyHomePageState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_MyHomePageState&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyHomePage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;_counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;_incrementCounter&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;setState&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;_counter&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
    &lt;span class="o"&gt;});&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;appBar:&lt;/span&gt; &lt;span class="n"&gt;AppBar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;mainAxisAlignment:&lt;/span&gt; &lt;span class="n"&gt;MainAxisAlignment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[&lt;/span&gt;
            &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="s"&gt;'You have pushed the button this many times:'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;$_counter&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;style:&lt;/span&gt; &lt;span class="n"&gt;Theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;textTheme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;headline4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;],&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;floatingActionButton:&lt;/span&gt; &lt;span class="n"&gt;FloatingActionButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="n"&gt;_incrementCounter&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;tooltip:&lt;/span&gt; &lt;span class="s"&gt;'Increment'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Icon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Icons&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;// This trailing comma makes auto-formatting nicer for build methods.&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that using the &lt;code&gt;StatefulWidget&lt;/code&gt; makes maintaining state locally in a widget complex at times. We must also introduce another class that extends a &lt;code&gt;State&lt;/code&gt; class, creating two classes for a &lt;code&gt;StatefulWidget&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, with Hooks, we only use one class to maintain our code, making it easier to maintain than &lt;code&gt;StatefulWidget&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Below is the Hook equivalent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyHomePage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;HookWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;MyHomePage&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;_counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;appBar:&lt;/span&gt; &lt;span class="n"&gt;AppBar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;mainAxisAlignment:&lt;/span&gt; &lt;span class="n"&gt;MainAxisAlignment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[&lt;/span&gt;
            &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="s"&gt;'You have pushed the button this many times:'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;$_counter&lt;/span&gt;&lt;span class="s"&gt;.value'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;style:&lt;/span&gt; &lt;span class="n"&gt;Theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;textTheme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;headline4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;],&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;floatingActionButton:&lt;/span&gt; &lt;span class="n"&gt;FloatingActionButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;++,&lt;/span&gt;
        &lt;span class="nl"&gt;tooltip:&lt;/span&gt; &lt;span class="s"&gt;'Increment'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Icon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Icons&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;// This trailing comma makes auto-formatting nicer for build methods.&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Hook example is shorter than its contemporary. Before using Flutter Hooks in a widget, however, the widget must extend &lt;code&gt;HookWidget&lt;/code&gt;, which is provided by the &lt;code&gt;flutter_hooks&lt;/code&gt; library.&lt;/p&gt;

&lt;p&gt;By calling &lt;code&gt;useState&lt;/code&gt; in the &lt;code&gt;build&lt;/code&gt; method with &lt;code&gt;0&lt;/code&gt;, we store the returned value in &lt;code&gt;_counter&lt;/code&gt;. This &lt;code&gt;_counter&lt;/code&gt; is an instance of &lt;code&gt;ValueNotifier&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The state is now stored at the &lt;code&gt;.value&lt;/code&gt; property of the &lt;code&gt;ValueNotifier&lt;/code&gt;. So, the value of the &lt;code&gt;_counter&lt;/code&gt; state is stored at &lt;code&gt;_counter.value&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;useState&lt;/code&gt; subscribes to the state in the &lt;code&gt;.value&lt;/code&gt; property and when the value at &lt;code&gt;.value&lt;/code&gt; is modified, the &lt;code&gt;useState&lt;/code&gt; Hook rebuilds the widget to display the new value.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;FloatingActionButton&lt;/code&gt;, the &lt;code&gt;_counter.value&lt;/code&gt; increments if the button is pressed. This makes the state increase by &lt;code&gt;1&lt;/code&gt;, and &lt;code&gt;useState&lt;/code&gt; rebuilds the &lt;code&gt;MyHomePage&lt;/code&gt; widget to display the new value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-useeffect-endraw-hook"&gt;
  &lt;/a&gt;
  The &lt;code&gt;useEffect&lt;/code&gt; Hook
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;useEffect&lt;/code&gt; Hook in Flutter is the same as React's &lt;code&gt;useEffect&lt;/code&gt; Hook. The Hook takes a function callback as a parameter and runs side effects in a widget:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;useEffect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// side effects code here.&lt;/span&gt;
    &lt;span class="c1"&gt;//subscription to a stream, opening a WebSocket connection, or performing HTTP requests&lt;/span&gt;
&lt;span class="o"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Side effects can include a stream subscription, opening a WebSocket connection, or performing HTTP requests. They‚Äôre also done inside the Hook, so we can cancel them when a widget is disposed of.&lt;/p&gt;

&lt;p&gt;The function callback must return a function and is called when the widget is disposed of. We can then cancel subscriptions or other cleanups in that function before the widget is removed from the UI and widget tree. Other cleanups include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Unsubscribing from a stream&lt;/li&gt;
&lt;li&gt;  Canceling polling&lt;/li&gt;
&lt;li&gt;  Clearing timeouts&lt;/li&gt;
&lt;li&gt;  Canceling active HTTP connections&lt;/li&gt;
&lt;li&gt;  Canceling WebSockets connections&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This prevents open connections ‚Äî such as HTTP, WebSocket connections, open streams, and open subscriptions ‚Äî in the widget from sticking around after the widget that opened them is destroyed and no longer in the widget tree:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;useEffect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// side effects code here.&lt;/span&gt;
    &lt;span class="c1"&gt;// - Unsubscribing from a stream.&lt;/span&gt;
    &lt;span class="c1"&gt;// - Cancelling polling&lt;/span&gt;
    &lt;span class="c1"&gt;// - Clearing timeouts&lt;/span&gt;
    &lt;span class="c1"&gt;// - Cancelling active HTTP connections.&lt;/span&gt;
    &lt;span class="c1"&gt;// - Cancelling WebSockets conncetions.&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// clean up code&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function callback in &lt;code&gt;useEffect&lt;/code&gt; is called synchronously, meaning it‚Äôs called every time the widget renders or rerenders.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-keys-endraw-argument-for-raw-useeffect-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;keys&lt;/code&gt; argument for &lt;code&gt;useEffect&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This Hook also has an optional second argument named &lt;code&gt;keys&lt;/code&gt;. The &lt;code&gt;keys&lt;/code&gt; argument is a list of values that determine whether the function callback in the &lt;code&gt;useEffect&lt;/code&gt; Hook will be called or not.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;useEffect&lt;/code&gt; compares the current values of &lt;code&gt;keys&lt;/code&gt; against its previous values. If the values are different, &lt;code&gt;useEffect&lt;/code&gt; runs the function callback. If only one value in &lt;code&gt;keys&lt;/code&gt; remains the same, the function callback is not called:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;useEffect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// side effects code here.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// clean up code&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;},&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-raw-usememoized-endraw-hook"&gt;
  &lt;/a&gt;
  The &lt;code&gt;useMemoized&lt;/code&gt; Hook
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;useMemoized&lt;/code&gt; Hook is like &lt;code&gt;useMemo&lt;/code&gt; in React: it memoizes/caches the instance of complex objects created from a builder function.&lt;/p&gt;

&lt;p&gt;This function passes to the &lt;code&gt;useMemoized&lt;/code&gt; Hook, then &lt;code&gt;useMemoized&lt;/code&gt; calls and stores the result of the function. If a widget rerendering the function is not called, &lt;code&gt;useMemoized&lt;/code&gt; is called and its previous result returns.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-keys-endraw-argument-for-raw-usememoized-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;keys&lt;/code&gt; argument for &lt;code&gt;useMemoized&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Similar to &lt;code&gt;useEffect&lt;/code&gt;, the &lt;code&gt;useMemoized&lt;/code&gt; Hook has a second optional argument called the &lt;code&gt;keys&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;useMemoized&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;{},&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;code&gt;keys&lt;/code&gt; argument is a list of dependencies, which determine whether the function passed to &lt;code&gt;useMemoized&lt;/code&gt; executes when the widget rerenders.&lt;/p&gt;

&lt;p&gt;When a widget rebuilds, &lt;code&gt;useMemoized&lt;/code&gt; checks its &lt;code&gt;keys&lt;/code&gt; to see whether the previous values changed. If at least one value changed, the function callback in the &lt;code&gt;useMemoized&lt;/code&gt; Hook will be called, and the &lt;code&gt;result&lt;/code&gt; renders the function call result.&lt;/p&gt;

&lt;p&gt;If none of the values changed since they were last checked, &lt;code&gt;useMemoized&lt;/code&gt; skips calling the function and uses its last value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-hooks"&gt;
  &lt;/a&gt;
  Custom Hooks
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;flutter_hooks&lt;/code&gt; enables us to create our own custom Hooks through two methods: a function or class.&lt;/p&gt;

&lt;p&gt;When creating custom Hooks, there are two rules to follow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Using &lt;code&gt;use&lt;/code&gt; as a prefix tells developers that the function is a Hook, not a normal function&lt;/li&gt;
&lt;li&gt;  Do not render Hooks conditionally, only render the Hook‚Äôs result conditionally&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using the function and class methods, we will create a custom Hook that prints a value with its debug value, just like React‚Äôs &lt;code&gt;useDebugValue&lt;/code&gt; Hook.&lt;/p&gt;

&lt;p&gt;Let‚Äôs begin with the function method.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#function-method"&gt;
  &lt;/a&gt;
  Function method
&lt;/h3&gt;

&lt;p&gt;To begin with the function method, we must create a method using any of the built-in Hooks inside it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;ValueNotifier&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;useDebugValue&lt;/span&gt;&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;initialState&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;&lt;span class="n"&gt;debugLabel&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initialState&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debugLabel&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;": "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;initialState&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, using the built-in &lt;code&gt;useState&lt;/code&gt; Hook holds the state in the function and prints the state‚Äôs &lt;code&gt;debugLabel&lt;/code&gt; and value.&lt;/p&gt;

&lt;p&gt;We can then return the &lt;code&gt;state&lt;/code&gt;. So, using &lt;code&gt;debugLabel&lt;/code&gt;, the state‚Äôs label prints in the console when the widget is mounted to the widget tree for the first time and when modifying the state value.&lt;/p&gt;

&lt;p&gt;Next, let‚Äôs see how to use the &lt;code&gt;useDebugValue&lt;/code&gt; Hook we created to print the &lt;code&gt;debutLabel&lt;/code&gt; string and corresponding state when mounting and rebuilding the widget:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;useDebugValue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Counter"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;useDebugValue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Score"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Counter: 0&lt;/span&gt;
&lt;span class="c1"&gt;// Score: 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#class-method"&gt;
  &lt;/a&gt;
  Class method
&lt;/h3&gt;

&lt;p&gt;Now, let's use a class to recreate the &lt;code&gt;useDebugValue&lt;/code&gt; custom Hook. This is done by creating a class that &lt;code&gt;extends&lt;/code&gt; a &lt;code&gt;Hook&lt;/code&gt; class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;ValueNotifier&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;useDebugValue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;initialData&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debugLabel&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_StateHook&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;initialData:&lt;/span&gt; &lt;span class="n"&gt;initialData&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debugLabel&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_StateHook&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Hook&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ValueNotifier&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;_StateHook&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;initialData&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;debugLabel&lt;/span&gt;&lt;span class="o"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;debugLabel&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;initialData&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;_StateHookState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;createState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_StateHookState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_StateHookState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;HookState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ValueNotifier&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;_StateHook&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;late&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ValueNotifier&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;hook&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;initialData&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="na"&gt;addListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_listener&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;dispose&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dispose&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;ValueNotifier&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;debugLabel&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;": "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_state&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;_listener&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;setState&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;{});&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, we have the &lt;code&gt;useDebugValue&lt;/code&gt; function, which is our custom Hook. It accepts arguments, such as the &lt;code&gt;initialData&lt;/code&gt; initial state value the Hook manages, and the state‚Äôs label, &lt;code&gt;debugLabel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;_StateHook&lt;/code&gt; class is where our Hook logic is written. When the &lt;code&gt;use&lt;/code&gt; function is called and passed in the &lt;code&gt;_StateHook&lt;/code&gt; class instance, it registers the &lt;code&gt;_StateHook&lt;/code&gt; class to the Flutter runtime. We can then call &lt;code&gt;useDebugLabel&lt;/code&gt; as a Hook.&lt;/p&gt;

&lt;p&gt;So, whenever creating a Hook using the class method, the class must extend a Hook class. You can also use &lt;code&gt;Hook.use()&lt;/code&gt; in place of &lt;code&gt;use()&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;flutter_hooks&lt;/code&gt; brought a major change in how we build Flutter widgets by helping reduce the size of a codebase to a considerably smaller size.&lt;/p&gt;

&lt;p&gt;As we have seen, &lt;code&gt;flutter_hooks&lt;/code&gt; enables developers to do away with widgets like &lt;code&gt;StatefulWidget&lt;/code&gt;, allowing them to write clean and maintainable code that‚Äôs easy to share and test.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#logrocket-full-visibility-into-your-web-apps"&gt;
  &lt;/a&gt;
  &lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt;: Full visibility into your web apps
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; is a frontend application monitoring solution that lets you replay problems as if they happened in your own browser. Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay the session to quickly understand what went wrong. It works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and ngrx/store.&lt;/p&gt;

&lt;p&gt;In addition to logging Redux actions and state, LogRocket records console logs, JavaScript errors, stacktraces, network requests/responses with headers + bodies, browser metadata, and custom logs. It also instruments the DOM to record the HTML and CSS on the page, recreating pixel-perfect videos of even the most complex single-page apps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;Try it for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>mobile</category>
    </item>
    <item>
      <title>How I learned coding as a dummy without a laptop</title>
      <author>Elijah Trillionz</author>
      <pubDate>Wed, 25 Aug 2021 19:39:40 +0000</pubDate>
      <link>https://dev.to/elijahtrillionz/how-i-learned-coding-as-a-dummy-without-a-laptop-568o</link>
      <guid>https://dev.to/elijahtrillionz/how-i-learned-coding-as-a-dummy-without-a-laptop-568o</guid>
      <description>&lt;p&gt;For the past couple of weeks, I have been going out to program in public, and since then I have met with a lot of programmers. I have met professionals and beginners. It has been a great experience for me. But the beginners I have met always complained about getting stuck while learning either HTML, CSS, and JavaScript.&lt;/p&gt;

&lt;p&gt;This is very popular in web development. Getting stuck while learning web development languages especially JavaScript. That is why I am making this article to share my experience on how I learned programming on my own without a mentor, and without reading too many blog articles or watch too many YouTube videos. Truth is, I never got stuck, you wanna know why? This article is for that.&lt;/p&gt;

&lt;p&gt;"It's not possible for you not to get stuck, except you must have paid for the best courses and used the best tools", so some may think. But that's the opposite of my reality. I didn't pay for any courses I used &lt;a href="https://w3schools.com"&gt;&lt;strong&gt;w3schools&lt;/strong&gt;&lt;/a&gt; to get started and guess what? I never had a laptop when I started learning. And it's not that I was a guru or something. When I started I didn't even know programming was a thing, I used to call it networking :).&lt;/p&gt;

&lt;p&gt;These are the interesting things I am going to be talking about&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What inspired me to learn to code&lt;/li&gt;
&lt;li&gt;The roadmap I took without knowing there was a roadmap&lt;/li&gt;
&lt;li&gt;How I started learning to code without a laptop&lt;/li&gt;
&lt;li&gt;Why I couldn't get stuck in JavaScript&lt;/li&gt;
&lt;li&gt;What kept my inspiration alive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before you jump right in, it might interest you to know that &lt;a href="https://www.pntra.com/t/TUJGR0lLR0JHSUtNTkhCR0ZISk1N"&gt;Codecademy&lt;/a&gt; has one of the best online platforms to learn to code for free. &lt;a href="https://www.pntra.com/t/TUJGR0lLR0JHSUtNTkhCR0ZISk1N"&gt;Start your journey&lt;/a&gt; today with a great resource.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-inspired-me-to-learn-to-code"&gt;
  &lt;/a&gt;
  What Inspired me to learn to code
&lt;/h3&gt;

&lt;p&gt;About two to three years ago, I wanted to rebuild the app that was popularly used in my church. Because of that, in early 2019, when I got an android phone, I started making research. It's funny how I started researching web development (I called it creating websites from scratch back then) when I wanted to build a mobile app. I clearly didn't know what I was doing, but something was leading me to the right path.&lt;/p&gt;

&lt;p&gt;Do you know why I had to start typing creating a website from scratch on Google? Because I was first misled to WordPress, and I almost wasted months on WordPress before discovering that WordPress isn't what I wanted. Though I liked WordPress, I mean I admired it, but it wasn't for what I wanted, so I walked away.&lt;/p&gt;

&lt;p&gt;Finally, I stumbled into w3schools HTML tutorial. I looked at the introduction page, I also saw the things HTML and CSS could do from a youtube video! So I was interested in learning them. So building a mobile app is what inspired, pushed me to learn to code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-roadmap-i-took"&gt;
  &lt;/a&gt;
  The roadmap I took
&lt;/h3&gt;

&lt;p&gt;When I checked out some other tutorials in w3schools, I discovered some other languages that I could use to build a complete website, like JavaScript and PHP. From that point on, I wanted to dump HTML and jump right into PHP. Because, back then the introduction page of PHP tutorial (in w3schools) referred to some big apps that were using PHP (like Facebook, and WordPress).&lt;/p&gt;

&lt;p&gt;So there I was thinking PHP was the only thing Facebook used. I mean I wanted to build an app like Facebook, so it would be a step in the right direction if I used what they are using. Then I saw in w3schools, that I need to be familiar with JavaScript before learning PHP.&lt;/p&gt;

&lt;p&gt;I was like cool. I will learn JavaScript and then PHP. When I got to the JavaScript section, they said you need to know HTML and CSS before learning JavaScript. So I went back to HTML again.&lt;/p&gt;

&lt;p&gt;You see, that was how I had my own roadmap (HTML =&amp;gt; CSS =&amp;gt; JavaScript =&amp;gt; PHP =&amp;gt; Like Facebook app), thanks to w3schools tutorial's prerequisites. I almost didn't follow my roadmap though.&lt;/p&gt;

&lt;p&gt;I remember when I was done with HTML, I started CSS, three days into CSS, I stopped CSS. I got interested in Python, so I started learning Python. It wasn't up to a day something pushed my head away from Python back to CSS because I felt like I was being a failure, giving up on CSS so easily.&lt;/p&gt;

&lt;p&gt;A reminder that &lt;a href="https://www.pntra.com/t/TUJGR0lLR0JHSUtNTkhCR0ZISk1N"&gt;Codecademy&lt;/a&gt; is one of the best free platforms for learning to code. They have a tool that will give you a roadmap based on what interests you the most. You don't wanna end up like me who had no idea where He was going.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-i-started-learning-to-code-without-a-laptop"&gt;
  &lt;/a&gt;
  How I started learning to code without a laptop
&lt;/h3&gt;

&lt;p&gt;As essential as a laptop can be, it is not a prerequisite to start learning to code, especially web development languages. You may say "well you can learn quite alright, but you won't be able to build projects and stuff." Hmmm. That is so wrong, I have seen projects (like portfolios) that were built with mobile devices.&lt;/p&gt;

&lt;p&gt;There are wonderful apps on mobile app stores that act as a code editor for languages like HTML, CSS, and JavaScript. So if you have just a phone and you want to learn to program, these are the things I did and how I did them:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-i-planned-my-study-time"&gt;
  &lt;/a&gt;
  1. I planned my study time:
&lt;/h4&gt;

&lt;p&gt;This is a very important and difficult aspect. It is easy to plan a time to study, but it is difficult to stay consistent with it. I made up my mind that I was going to cover at least two sub-topics (using w3schools) of a language daily.&lt;/p&gt;

&lt;p&gt;Truth is, I wasn't always consistent with it. There were days I wouldn't even study at all, I mean if this is you it's fine, I have been there. People run and fall most times, but the point is how quickly can you recognize that you fell and that you have to get up.&lt;/p&gt;

&lt;p&gt;Set out a time for studying, and try to make sure that you do it daily. And remember if you should miss a day or two or more for some reason, you should always get back to your routine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is a tip&lt;/strong&gt;: Don't abandon your study for too long, else when you come back you may struggle with relating the things you are about to learn with those you already learned. Because chances are you won't even remember most of the things you already learned.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-had-a-notebook-for-jotting"&gt;
  &lt;/a&gt;
  2. Had a notebook for jotting:
&lt;/h4&gt;

&lt;p&gt;Not having a notebook to jot down points while learning is a great way to get stuck and remain stuck. This is one of the things I am proud I started from the very beginning. Every subtopic, explanation, sometimes code were jotted down in my notebook.&lt;/p&gt;

&lt;p&gt;It is from this notebook of mine that I used in generating 70 questions for HTML, and more for CSS and JavaScript. These questions will be out on a web app I built for developers soon.&lt;/p&gt;

&lt;p&gt;Most times when I forget something while coding, I always find myself going to my notebook first. There are wonderful documentations and write up on different programming languages. But nothing is as good as what you wrote for yourself, because you would easily understand it.&lt;/p&gt;

&lt;p&gt;One other beautiful thing about jotting down is how it makes you meditate on what you just read. So when you read something, you jot down the points, and as you do so your mind will reiterate what you just read. This can help you remember easily.&lt;/p&gt;

&lt;p&gt;So you want to learn HTML? Get a book for HTML, jot down the points. Do the same for the other languages. I hope in the future I will write an article on some of the important things you should jot down in different languages and also show you the irrelevant ones to ignore.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-revised-daily"&gt;
  &lt;/a&gt;
  3. Revised daily:
&lt;/h4&gt;

&lt;p&gt;Just as I studied daily (or try to study daily), I also revised my daily. This is where practice comes in. At this point, I don't need to go to the website again, I simply use my notebook.&lt;/p&gt;

&lt;p&gt;When I revise, I don't necessarily read my notebook as though am reading a novel. When a read a point, I put that point into code. I further explain it to myself in code.&lt;/p&gt;

&lt;p&gt;It is said that one of the best ways to learn more or understand better is to teach. I practiced this.&lt;/p&gt;

&lt;p&gt;Though I didn't have an audience to teach, I had me to teach. I would teach myself over and over both in code and on a whiteboard. You may not have to do it like mine, you may have an audience, teach them, try to make them understand. Your audience can be your pet, your audience can be your Twitter followers, or on a blog.&lt;/p&gt;

&lt;p&gt;Practicing in code is very important. If the course or tutorial shows you just one code. Try recreating that code and then do more. The more you do it, the more it becomes clearer and the more it will stick with you.&lt;/p&gt;

&lt;p&gt;There are mobile apps you can use to achieve this, my favorite for HTML, CSS, and JavaScript was TrebEdit because of its organization.&lt;/p&gt;

&lt;p&gt;It organizes your code very well, that's why I mostly used it for building mini projects (not just for practicing a concept) like Calculator, To-Do, etc.&lt;/p&gt;

&lt;p&gt;While if you simply want to try out a concept or code snippet, there are also apps for that. With platforms like &lt;a href="https://www.pntra.com/t/TUJGR0lLR0JHSUtNTkhCR0ZISk1N"&gt;Codecademy&lt;/a&gt; or &lt;a href="https://w3schools.com"&gt;w3schools&lt;/a&gt;, you can do so on the website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-i-could-not-get-stuck-in-javascript"&gt;
  &lt;/a&gt;
  Why I could not get stuck in JavaScript.
&lt;/h3&gt;

&lt;p&gt;The reason has been clearly stated above. You don't need a mentor to learn to program by yourself.&lt;/p&gt;

&lt;p&gt;You can convert the things I have shared with you into simple rules for learning programming. It would work any time and with any language. So what are these rules? I will quickly reiterate all that was said.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Plan a study time for each day and try to be consistent at it.&lt;/li&gt;
&lt;li&gt;Have a notebook for jotting down points.&lt;/li&gt;
&lt;li&gt;Explain what you have studied to yourself or an audience.&lt;/li&gt;
&lt;li&gt;Put in code what you have studied, it worked? Make another example. It didn't work? Try again.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are not things I learned from a blog post or someone, this is my experience. These are the things I did, that worked for me. So you shouldn't say "it is easier said than done" if someone already did it, why can't you?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Just a quick tip&lt;/strong&gt;: Don't try to study everything at once. Don't try to impress a friend by pushing yourself to learn HTML in one week. It's not worth it.&lt;/p&gt;

&lt;p&gt;Take your time, everyone is not the same, just because someone learned JavaScript in 2 months doesn't mean you who are in your fourth month in JavaScript is a failure. As long as you know you are doing what is right. Keep at it.&lt;/p&gt;

&lt;p&gt;Now, you may say, it's not possible to not get stuck while learning JavaScript (or maybe any other languages), well if that's what you believe, I'm afraid it's going to keep working for you.&lt;/p&gt;

&lt;p&gt;Before learning JavaScript, I didn't know getting stuck was a thing in programming so I couldn't believe it, because I didn't know about it. So not knowing about it made me not believe in it which in turn helped me to not get stuck.&lt;/p&gt;

&lt;p&gt;This is why you should be careful about the things you read or hear (in blog posts or youtube videos), and be careful about the things you believe from what you read or heard. These things can either destroy you or develop you.&lt;/p&gt;

&lt;p&gt;So if you believe in getting stuck while learning, and then get stuck, using a platform like &lt;a href="https://www.pntra.com/t/TUJGR0lLR0JHSUtNTkhCR0ZISk1N"&gt;Codecademy&lt;/a&gt; is of great importance. With Codecademy you can get unstuck with hints, already asked questions in the forum relating to what you are stuck with, you can also get unstuck with an actual and similar example.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-kept-my-inspiration-alive"&gt;
  &lt;/a&gt;
  What kept my inspiration alive
&lt;/h3&gt;

&lt;p&gt;This question has been asked severally by beginners. How do I stay motivated? This depends. For me, it is honestly not what inspired me to learn to code that kept me inspired.&lt;/p&gt;

&lt;p&gt;Coding was interesting to me, so I wanted to learn more to be able to do more. One of the ways I stayed inspired was by looking forward to making a project. I am not talking about complex and big projects, it was always mini projects like calculators, To-do, etc.&lt;/p&gt;

&lt;p&gt;When I was unable to do some of these projects, I'd go on to study and practice more. Another approach I used was playing with exercises. &lt;a href="https://w3resource.com"&gt;W3resource&lt;/a&gt; was my favorite (it's still my favorite).&lt;/p&gt;

&lt;p&gt;I'd go there to get simple exercises that relate to what I have studied and then try them out. When I don't get it, I'd always go back to study more.&lt;/p&gt;

&lt;p&gt;Some projects and exercises required what I haven't studied, so I'd always say to the project or exercise, "when I study more, I will come back to you," that way, I was always eager to learn more. These were the simple things that kept me going.&lt;/p&gt;

&lt;p&gt;Because I understand how important exercises were to me, I have created a web application for that purpose. This article is not about it, but I just want to let you know it would launched soon. It is a very interactive way to keep practicing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick Tip:&lt;/strong&gt; Using &lt;a href="https://www.pntra.com/t/TUJGR0lLR0JHSUtNTkhCR0ZISk1N"&gt;Codecademy pro&lt;/a&gt;, you can practice with projects that are related to the module (or sub-topic) that you've studied. As a free user, you will also have access to exercises related to that sub-topic. &lt;a href="https://www.pntra.com/t/TUJGR0lLR0JHSUtNTkhCR0ZISk1N"&gt;Try it&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;These aren't things to sweeten or anger your heart. This is reality and it is very simple to work by. As I said, it's not something someone motivated me with, and then without trying it am telling you to do it. It is something someone has been doing, my experience. So if you want to chose to do this, am saying it is easy.&lt;/p&gt;

&lt;p&gt;If you don't have a laptop, you can start learning with a smartphone. If you don't have a smartphone, hmmm, may God be with you. I mean you should have a smartphone, they are pretty easy to get these days.&lt;/p&gt;

&lt;p&gt;Alright, that's it for today. Thank you for reading. If you find this article useful, please give it a like and share as well. Also, let me know of your experience in the comment section.&lt;/p&gt;

&lt;p&gt;Ahhh lastly, there is a &lt;a href="https://hackathon.qubators.org/vote.php"&gt;Hackathon (Qubators Hackathon)&lt;/a&gt; that I participated in, if you don't mind I'd like to demand a vote from you. Simply &lt;a href="https://hackathon.qubators.org/vote.php"&gt;click here&lt;/a&gt;, search for Team MaGoner (number 32) and click vote. Thank you in advance.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Get started with Python type hints</title>
      <author>Otmane Riad</author>
      <pubDate>Wed, 25 Aug 2021 19:18:14 +0000</pubDate>
      <link>https://dev.to/nexteventideas/get-started-with-python-type-hints-b2o</link>
      <guid>https://dev.to/nexteventideas/get-started-with-python-type-hints-b2o</guid>
      <description>&lt;p&gt;Python is best thought of as a ‚Äúdynamic, but strongly typed‚Äù language. Types aren‚Äôt associated with the names for things, but with the things themselves.&lt;/p&gt;

&lt;p&gt;This makes Python flexible and convenient for developers, because you don‚Äôt have to rigorously define and track variable types if you‚Äôre just throwing together a quick-and-dirty script. But for bigger projects, especially libraries used by third parties, it helps to know which object types are associated with which variables.&lt;/p&gt;

&lt;p&gt;For some time now, Python has had the ability to ‚Äúannotate‚Äù names with type information, in one form or another. With Python 3.5, type hints officially became part of the language (PEP 484). Using a linter or code-checking tool, developers can check the consistency of variables and their types across a code base, and perform static analyses of code that would previously have been difficult or impossible. All this is done ahead of time, before the code runs.&lt;/p&gt;

&lt;p&gt;In this article we‚Äôll explore some basic examples of Python type hinting. But first we‚Äôll clear up a common misunderstanding about what it is and isn‚Äôt used for.&lt;/p&gt;

&lt;p&gt;Read More: &lt;a href="https://hitechnoloy.ca/get-started-with-python-type-hints/"&gt;https://hitechnoloy.ca/get-started-with-python-type-hints/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>codereview</category>
    </item>
    <item>
      <title>How we organize our software development process</title>
      <author>Mage</author>
      <pubDate>Wed, 25 Aug 2021 19:05:58 +0000</pubDate>
      <link>https://dev.to/mage_ai/how-we-organize-our-software-development-process-1lb8</link>
      <guid>https://dev.to/mage_ai/how-we-organize-our-software-development-process-1lb8</guid>
      <description>&lt;p&gt;&lt;b&gt;TLDR&lt;/b&gt;&lt;br&gt;
&lt;/p&gt;
&lt;ul&gt;

&lt;li&gt;We used Scrum at our previous startup and at Airbnb, with a few tweaks.&lt;/li&gt;




&lt;li&gt;We currently use a hybrid of Scrum and Kanban at Mage (AI application development tool), with a few tweaks.&lt;/li&gt;




&lt;li&gt;Craft your process to maximize your team‚Äôs autonomy, collaboration, and adaptability; thus, increasing your team‚Äôs effectiveness.&lt;/li&gt;


&lt;p&gt;&lt;b&gt;What is it?&lt;/b&gt;&lt;br&gt;
According to Wikipedia, ‚Äúa software development process is the process of dividing software development work into distinct phases to improve design, product management, and project management‚Äù.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Why should anyone care?&lt;/b&gt;&lt;br&gt;
A good process helps your team be more effective in delivering value to customers by empowering your team to be autonomous (make decisions on their own), collaborative (sum is greater than the parts), and adaptive (ship relevant products that customers need).&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Our process in the past&lt;/b&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LMo4wEhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aae9l1fijipppnaz0zjd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LMo4wEhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aae9l1fijipppnaz0zjd.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Courtesy of Airbnb&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At OnMyBlock (our previous startup) and at Airbnb, we used Scrum (with a few tweaks) as our software development process.&lt;/p&gt;

&lt;p&gt;Every 2 weeks, our team would get together to review all the work that was done in the previous sprint (a time-boxed window usually 2‚Äì4 weeks long) and then plan for the upcoming sprint. This meeting is typically called sprint review and sprint planning.&lt;/p&gt;

&lt;p&gt;Here is how we conducted the sprint review and planning:&lt;/p&gt;


&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Before the meeting, the scrum master (a single person responsible for project managing the stories during a sprint) would ping everyone to make sure they updated all their stories (aka tasks) in our project management software.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At the start of the meeting, each person goes around and shares what they shipped, what work they couldn‚Äôt finish, and explain why they couldn‚Äôt accomplish the unfinished work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then, the scrum master leads the team in discussion on which upcoming epics (aka features) are most urgent and important.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Everyone independently plans what they will deliver by the end of the next sprint, choosing from a list of prioritized epics. Each person is allotted a fixed number of story points. If you are allotted 13 story points (we used Fibonacci numbers to scale our story points), you can only commit to stories that have a total sum of 13 story points. Story points are values assigned to a story (aka tasks) that attempt to provide a sense of how difficult it will be to accomplish that story.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After everyone is done planning, each person goes around and shares what they are committing to delivering in the upcoming sprint.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AOnraYEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d44x0fzgtyjvxxlh35pu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AOnraYEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d44x0fzgtyjvxxlh35pu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Sprint schedule&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are usually ‚Äústand-ups‚Äù in Scrum, which are short daily meetings for the team to update each other. Our team felt daily stand-ups were too frequent and unproductive so we cut it down to 3 per week except we have 2 per week on the weeks where we have sprint review and planning. Our stand-ups follow the typical agenda where each person goes around and shares what they did yesterday, what they are working on today, and if they have any blockers to their current story (aka task).&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Pros of how we did Scrum&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Engineers had more ownership of the features they were responsible for and this resulted in better performance reviews because we were assessed on which projects we led and delivered end-to-end.&lt;/p&gt;

&lt;p&gt;There was clear accountability because if someone commits to work that they didn‚Äôt finish, they would be responsible for explaining why they couldn‚Äôt finish it by the deadline.&lt;/p&gt;

&lt;p&gt;Less knowledge was required to accomplish tasks because an engineer can fill up their sprint with tasks that were related to their area of expertise; such as backend, frontend, data, ML, different services, specific languages, etc.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Cons of how we did Scrum&lt;/b&gt;&lt;br&gt;
Estimating the difficulty of stories was rarely accurate, which led to frequent over estimating and underestimating of the work.&lt;/p&gt;

&lt;p&gt;When we pre-assign ourselves stories, we typically chose stories that belonged to an epic we were responsible for. Many of us ended up working in silos, which decreased collaboration during the implementation phase of projects (we had a lot of collaboration during the design phase).&lt;/p&gt;

&lt;p&gt;Entire features shipped slower because the concentration of effort was spread out across multiple epics at once.&lt;/p&gt;

&lt;p&gt;It was difficult for our team to quickly adapt and change course mid sprint since we planned 2 weeks in advance.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;The process today&lt;/b&gt;&lt;br&gt;
At our current company, Mage (AI application development tool), we use a hybrid of Scrum and Kanban with a few tweaks. The tool we use to manage this is called Airtable.&lt;/p&gt;

&lt;p&gt;Once a week, we hold a meeting called ‚ÄúMage Force‚Äù where we review all the features we shipped last week and then prioritize the features we need to deliver in the upcoming release. Before we start the meeting, we hold a trust activity where the goal is to build trust amongst ourselves and to build each other up (one of our core virtues of ‚Äúgive people power-ups‚Äù). In contrast to having a 2 week sprint, we have 1 week release cycles where we ship as much product as possible that our customers need.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XlxOy-CT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qteyutddq754qjzev85u.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XlxOy-CT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qteyutddq754qjzev85u.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Magic&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here is how we plan our release cycle:&lt;/p&gt;

&lt;p&gt;We make sure that every epic (aka features) are attributed to a key result or a specific customer use case. That way, we are making sure to deliver as much value to our customers as possible.&lt;/p&gt;

&lt;p&gt;Each epic is given a deadline ship date that corresponds to when a customer will use it.&lt;/p&gt;

&lt;p&gt;Each epic is broken down into stories (aka tasks), which can be worked on in parallel&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7vwod1kd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4yhizl40wnkjps01zd3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7vwod1kd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4yhizl40wnkjps01zd3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;A story&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The order in which stories are worked on is based on the related epic‚Äôs deadline and whether or not there are downstream dependent stories&lt;/p&gt;

&lt;p&gt;A story in the same epic with a lower priority means it depends on another story within the same epic to be completed first&lt;/p&gt;

&lt;p&gt;Each person who creates a story during planning will fill in as much detail in the notes to give any future engineer context on why the story exists, the requirements of the story, and any additional knowledge that will be helpful in completing the story.&lt;/p&gt;

&lt;p&gt;When we decide which epic must be shipped for the next release, we change all the stories for that epic to ‚ÄúNot started‚Äù; which will then make it appear on our Kanban board.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5IXlYJHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9xndhxoicqv3xh011ej.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5IXlYJHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9xndhxoicqv3xh011ej.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Kanban board&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Stories are not pre-assigned. When someone has no stories ‚ÄúIn progress‚Äù, they will take the highest priority story that has ‚ÄúNot started‚Äù, move it to ‚ÄúIn progress‚Äù, and assign it to themselves.&lt;/p&gt;

&lt;p&gt;Each story moves through the following stages on the Kanban board: Not started, In progress, Review (e.g. review pull request), QA (merged into master and need to manually test on staging), Complete (new change is on production).&lt;/p&gt;

&lt;p&gt;Once a story is finished, the DRI (directly responsible individual) moves it to ‚ÄúReview‚Äù, creates a pull request on GitHub, and associates it to the story for someone else to review.&lt;/p&gt;

&lt;p&gt;Once the code is reviewed, approved, and merged into the master branch, the DRI moves the story to ‚ÄúQA‚Äù where they must now manually test their changes on the staging environment.&lt;/p&gt;

&lt;p&gt;After the new changes are verified on staging, the DRI deploys the code to production and moves the story to ‚ÄúComplete‚Äù.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hyPIYui2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zakfi90hu5bptnvnjbjq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hyPIYui2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zakfi90hu5bptnvnjbjq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Hybrid schedule&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We have stand-ups (daily meetings in Scrum) 4 times a week, skipping the day we have ‚ÄúMage Force‚Äù. Our stand-up meetings are called ‚ÄúMission Briefings‚Äù. Each person goes around and shares what they learned yesterday and what their plan of attack is for crushing their story today. With this format, we maximize learnings (one of our core virtues of ‚Äúalways be leveling up‚Äù) instead of simply reporting tasks (which can be done by looking at the Kanban board).&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Pros of our hybrid approach&lt;/b&gt;&lt;br&gt;
There is a lot more collaboration at the implementation phase because people are able to work on the same epic together at the same time.&lt;/p&gt;

&lt;p&gt;Working closer together is more fun and exciting, leading to higher team morale and solidarity.&lt;/p&gt;

&lt;p&gt;We ship new features on a daily basis, helping us make customers happier and win more new business.&lt;/p&gt;

&lt;p&gt;Everyone works across multiple codebases and is responsible for many areas of the product. This increases the speed in which we ship new features because everyone is capable of working across the entire tech stack, unblocking themselves if needed.&lt;/p&gt;

&lt;p&gt;We are able to adapt rapidly and change our focus as customer needs change or more urgent features arise unexpectedly.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Cons of our hybrid approach&lt;/b&gt;&lt;br&gt;
Because stories are not pre-assigned, individuals on the team are required to understand multiple code bases and technologies in order to effectively complete stories.&lt;/p&gt;

&lt;p&gt;There is less accountability at the individual level because each person is not committing to being responsible for delivering a set of stories. Instead, the entire team is committing to the work. If something doesn‚Äôt get done, who is responsible? We have yet to solve for this.&lt;/p&gt;

&lt;p&gt;Since everyone on the team works together to ship as much customer value as fast as possible, there can be a lack of ‚Äúownership‚Äù of projects. At Airbnb, engineers were awarded for having ownership of projects and therefore ownership of projects was desired by individuals. The system in place rewarded that desire and behavior.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Conclusion&lt;/b&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NBqCgUql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/em1ym6vjmammf3bt3gah.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NBqCgUql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/em1ym6vjmammf3bt3gah.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Teamwork makes the dream work&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Structure your software development process to maximize your team‚Äôs autonomy (make decisions on their own), collaboration (sum is greater than the parts), and adaptability (ship relevant products that customers need).&lt;/p&gt;

&lt;p&gt;A hybrid of Scrum and Kanban, with a few tweaks, works great for Mage at this stage because we are prioritizing speed and focus through deeper collaboration.&lt;/p&gt;

&lt;p&gt;As we grow and evolve our process, we need to keep in mind how we deal with individual ‚Äúownership‚Äù of projects and the increasing need for specialization.&lt;/p&gt;

</description>
      <category>engineering</category>
      <category>productdevelopment</category>
      <category>development</category>
      <category>startup</category>
    </item>
    <item>
      <title>Landing-Page Became A Project Of It's Own!</title>
      <author>Ayan S</author>
      <pubDate>Wed, 25 Aug 2021 18:34:44 +0000</pubDate>
      <link>https://dev.to/madebyayan/my-landing-page-turned-into-a-project-of-it-s-own-what-do-you-think-5763</link>
      <guid>https://dev.to/madebyayan/my-landing-page-turned-into-a-project-of-it-s-own-what-do-you-think-5763</guid>
      <description>&lt;p&gt;Hey everyone,&lt;/p&gt;

&lt;p&gt;Having built the initial version of my productivity tool, Slate, I started working on it's landing page.&lt;/p&gt;

&lt;p&gt;At first it was going to be a generic landing page like I've used on my previous product, but then I decided to play around a little and experiment with how I can make it stand out and give it a distinct feel that is more memorable.&lt;/p&gt;

&lt;p&gt;Turns out, if you experiment too much on designing the landing pages then they turn into a whole separate project of their own!&lt;/p&gt;

&lt;p&gt;So finally, after working on designing it for over a couple of weeks, I just launched the new landing page which you can check out here: &lt;a href="https://slate.madebyayan.com"&gt;slate.madebyayan.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's built using ThreeJS for for the 3D aspects while the other things are layered on top and below of the 3D canvas using HTML and CSS to provide a fluid design.&lt;/p&gt;

&lt;p&gt;Would love to know what you think of this new and distinctive look and how you feel it compares with the design of my previous landing pages.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>ux</category>
      <category>javascript</category>
      <category>threejs</category>
    </item>
    <item>
      <title>Interactive CLI prompts in Go</title>
      <author>Petr Razumov</author>
      <pubDate>Wed, 25 Aug 2021 18:24:42 +0000</pubDate>
      <link>https://dev.to/tidalmigrations/interactive-cli-prompts-in-go-3bj9</link>
      <guid>https://dev.to/tidalmigrations/interactive-cli-prompts-in-go-3bj9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tidal-migrations-cli-applications"&gt;
  &lt;/a&gt;
  Tidal Migrations üíì CLI applications
&lt;/h2&gt;

&lt;p&gt;Do you like CLI applications? We love them! At Tidal Migrations we use full-featured GUI IDEs and editors like VS Code and Emacs but also &lt;code&gt;vim&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt; running in our terminals. Every day we use &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;awk&lt;/code&gt;, &lt;code&gt;sed&lt;/code&gt; and lots of other CLI tools and apps for work and fun. Also, we like to develop &lt;a href="https://get.tidal.sh/"&gt;CLI apps&lt;/a&gt; and with this post, we're going to show you how to implement different interactive prompts for your CLI apps written in Go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#passing-data-to-cli-apps"&gt;
  &lt;/a&gt;
  Passing data to CLI apps
&lt;/h2&gt;

&lt;p&gt;Oftentimes CLI applications don't just work by themselves, but some process or operation is required on the information or data.&lt;/p&gt;

&lt;p&gt;There are different ways to pass data to command line applications. Using flags, environment variables, file names as CLI arguments or reading from standard input is quite common and is pretty easy to implement using just the &lt;a href="https://pkg.go.dev/std"&gt;standard Go library&lt;/a&gt;. Using interactive prompts can &lt;em&gt;spice up&lt;/em&gt; your CLI application and improve the overall UX.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-implement-text-input-prompt"&gt;
  &lt;/a&gt;
  How to implement text input prompt
&lt;/h2&gt;

&lt;p&gt;The basic text input prompt is easy to implement. Just read from standard input until the &lt;a href="https://en.wikipedia.org/wiki/Newline"&gt;new line character&lt;/a&gt; (&lt;code&gt;\n&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"bufio"&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"os"&lt;/span&gt;
    &lt;span class="s"&gt;"strings"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// StringPrompt asks for a string value using the label&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;StringPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bufio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Stdin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TrimSpace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;StringPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"What is your name?"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, %s!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag_asciinema"&gt;
  
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-implement-password-input-prompt"&gt;
  &lt;/a&gt;
  How to implement password input prompt
&lt;/h2&gt;

&lt;p&gt;Password prompts are similar to text input prompts, except the user's typed input should be hidden:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"os"&lt;/span&gt;
    &lt;span class="s"&gt;"syscall"&lt;/span&gt;

    &lt;span class="s"&gt;"golang.org/x/term"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// PasswordPrompt asks for a string value using the label.&lt;/span&gt;
&lt;span class="c"&gt;// The entered value will not be displayed on the screen&lt;/span&gt;
&lt;span class="c"&gt;// while typing.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;PasswordPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;syscall&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Stdin&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;PasswordPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"What is your password?"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Oh, I see! Your password is %q&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag_asciinema"&gt;
  
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-implement-yesno-prompt"&gt;
  &lt;/a&gt;
  How to implement Yes/No prompt
&lt;/h2&gt;

&lt;p&gt;For Yes/No prompts we're going to create an infinite loop to keep asking until the user answers yes or no:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"bufio"&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"os"&lt;/span&gt;
    &lt;span class="s"&gt;"strings"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// YesNoPrompt asks yes/no questions using the label.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;YesNoPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;choices&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"Y/n"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;choices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"y/N"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bufio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Stdin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"%s (%s) "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TrimSpace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToLower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"y"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"yes"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"n"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"no"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;YesNoPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Dev.to is awesome!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Agree!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Huh?"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag_asciinema"&gt;
  
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-implement-interactive-checkboxes"&gt;
  &lt;/a&gt;
  How to implement interactive checkboxes
&lt;/h2&gt;

&lt;p&gt;To create an interactive multi-select prompt we're going to use an awesome &lt;a href="https://github.com/AlecAivazis/survey"&gt;&lt;code&gt;survey&lt;/code&gt;&lt;/a&gt; package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"strings"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/AlecAivazis/survey/v2"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;Checkboxes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;prompt&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;survey&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MultiSelect&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;survey&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AskOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;answers&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Checkboxes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"Which are your favourite programming languages?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"C"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Python"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Java"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"C++"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"C#"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Visual Basic"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"JavaScript"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"PHP"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Assembly Language"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"SQL"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Groovy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Classic Visual Basic"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Fortran"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"R"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Ruby"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Swift"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"MATLAB"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Go"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Prolog"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Perl"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;", "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Oh, I see! You like"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag_asciinema"&gt;
  
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#caveats-and-workarounds"&gt;
  &lt;/a&gt;
  Caveats and workarounds
&lt;/h2&gt;

&lt;p&gt;If you pipe some input data to your interactive CLI app, the prompts will read that data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Petr"&lt;/span&gt; | go run main.go
&lt;span class="go"&gt;What is your name? Hello, Petr!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Sometimes such behavior is acceptable, but sometimes not. To check if the terminal is interactive let's use &lt;a href="https://pkg.go.dev/golang.org/x/term#IsTerminal"&gt;&lt;code&gt;term.IsTerminal&lt;/code&gt;&lt;/a&gt; function:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"syscall"&lt;/span&gt;

    &lt;span class="s"&gt;"golang.org/x/term"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsTerminal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;syscall&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Stdin&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Terminal is interactive! You're good to use prompts!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Terminal is not interactive! Consider using flags or environment variables!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello"&lt;/span&gt; | go run main.go
&lt;span class="go"&gt;Terminal is not interactive! Consider using flags or environment variables!

&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;go run main.go
&lt;span class="go"&gt;Terminal is interactive! You're good to use prompts!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#libraries"&gt;
  &lt;/a&gt;
  Libraries
&lt;/h2&gt;

&lt;p&gt;As you can see, it's pretty easy to implement basic interactive prompts, but for complex ones it's better to use some Go packages from the community:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/AlecAivazis"&gt;
        AlecAivazis
      &lt;/a&gt; / &lt;a href="https://github.com/AlecAivazis/survey"&gt;
        survey
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A golang library for building interactive and accessible prompts with full support for windows and posix terminals.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Survey&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/AlecAivazis/survey" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/eb6d98e0784128b77cbe56b5541f1f332bba00d886d4840d5992ead181d3708d/68747470733a2f2f7472617669732d63692e6f72672f416c6563416976617a69732f7375727665792e7376673f6272616e63683d66656174757265253246707265747479" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://pkg.go.dev/github.com/AlecAivazis/survey/v2" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/934f1b06800f63c17406b9a1e490b563402a3ebee33d9586ad188275db5610fc/687474703a2f2f696d672e736869656c64732e696f2f62616467652f676f646f632d7265666572656e63652d3532373242342e737667" alt="GoDoc"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A library for building interactive and accessible prompts on terminals supporting ANSI escape sequences.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/fd7c6e39ecf076e5da86a26ecfaa92d4e2ec3b56effe53bb804ed5cd7bb5f895/68747470733a2f2f7468756d62732e6766796361742e636f6d2f56696c6c61696e6f757347726163696f75734b6f75707265792d73697a655f726573747269637465642e676966"&gt;&lt;img width="550" src="https://camo.githubusercontent.com/fd7c6e39ecf076e5da86a26ecfaa92d4e2ec3b56effe53bb804ed5cd7bb5f895/68747470733a2f2f7468756d62732e6766796361742e636f6d2f56696c6c61696e6f757347726163696f75734b6f75707265792d73697a655f726573747269637465642e676966"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-go position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;package&lt;/span&gt; main
&lt;span class="pl-k"&gt;import&lt;/span&gt; (
    &lt;span class="pl-s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="pl-s"&gt;"github.com/AlecAivazis/survey/v2"&lt;/span&gt;
)

&lt;span class="pl-c"&gt;// the questions to ask&lt;/span&gt;
&lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-s1"&gt;qs&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; []&lt;span class="pl-c1"&gt;*&lt;/span&gt;survey.&lt;span class="pl-smi"&gt;Question&lt;/span&gt;{
    {
        &lt;span class="pl-c1"&gt;Name&lt;/span&gt;:     &lt;span class="pl-s"&gt;"name"&lt;/span&gt;,
        &lt;span class="pl-c1"&gt;Prompt&lt;/span&gt;:   &lt;span class="pl-c1"&gt;&amp;amp;&lt;/span&gt;survey.&lt;span class="pl-smi"&gt;Input&lt;/span&gt;{&lt;span class="pl-c1"&gt;Message&lt;/span&gt;: &lt;span class="pl-s"&gt;"What is your name?"&lt;/span&gt;},
        &lt;span class="pl-c1"&gt;Validate&lt;/span&gt;: &lt;span class="pl-s1"&gt;survey&lt;/span&gt;.&lt;span class="pl-c1"&gt;Required&lt;/span&gt;,
        &lt;span class="pl-c1"&gt;Transform&lt;/span&gt;: &lt;span class="pl-s1"&gt;survey&lt;/span&gt;.&lt;span class="pl-c1"&gt;Title&lt;/span&gt;,
    },
    {
        &lt;span class="pl-c1"&gt;Name&lt;/span&gt;: &lt;span class="pl-s"&gt;"color"&lt;/span&gt;,
        &lt;span class="pl-c1"&gt;Prompt&lt;/span&gt;: &lt;span class="pl-c1"&gt;&amp;amp;&lt;/span&gt;survey.&lt;span class="pl-smi"&gt;Select&lt;/span&gt;{
            &lt;span class="pl-c1"&gt;Message&lt;/span&gt;: &lt;span class="pl-s"&gt;"Choose a color:"&lt;/span&gt;,
            &lt;span class="pl-c1"&gt;Options&lt;/span&gt;: []&lt;span class="pl-smi"&gt;string&lt;/span&gt;{&lt;span class="pl-s"&gt;"red"&lt;/span&gt;, &lt;span class="pl-s"&gt;"blue"&lt;/span&gt;, &lt;span class="pl-s"&gt;"green"&lt;/span&gt;},
            &lt;span class="pl-c1"&gt;Default&lt;/span&gt;: &lt;span class="pl-s"&gt;"red"&lt;/span&gt;,
        },
    },
    {
        &lt;span class="pl-c1"&gt;Name&lt;/span&gt;: &lt;span class="pl-s"&gt;"age"&lt;/span&gt;,
        &lt;span class="pl-c1"&gt;Prompt&lt;/span&gt;:   &lt;span class="pl-c1"&gt;&amp;amp;&lt;/span&gt;survey.&lt;span class="pl-smi"&gt;Input&lt;/span&gt;{&lt;span class="pl-c1"&gt;Message&lt;/span&gt;: &lt;span class="pl-s"&gt;"How old are you?"&lt;/span&gt;},
    },
}

&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;main&lt;/span&gt;() {
    &lt;span class="pl-c"&gt;// the answers will be written to this struct&lt;/span&gt;
    &lt;span class="pl-s1"&gt;answers&lt;/span&gt; &lt;span class="pl-c1"&gt;:=&lt;/span&gt; &lt;span class="pl-k"&gt;struct&lt;/span&gt; {
        &lt;span class="pl-c1"&gt;Name&lt;/span&gt;          &lt;span class="pl-smi"&gt;string&lt;/span&gt;                  &lt;span class="pl-c"&gt;// survey will match the question and field names&lt;/span&gt;
        &lt;span class="pl-c1"&gt;FavoriteColor&lt;/span&gt; &lt;span class="pl-smi"&gt;string&lt;/span&gt;&lt;/pre&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/AlecAivazis/survey"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Songmu"&gt;
        Songmu
      &lt;/a&gt; / &lt;a href="https://github.com/Songmu/prompter"&gt;
        prompter
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      golang utility for easy prompting
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
prompter&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/Songmu/prompter/actions?workflow=test"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A0JRD3l1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Songmu/prompter/workflows/test/badge.svg%3Fbranch%3Dmain" alt="Test Status"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/Songmu/prompter" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5214fc5bfc5656e9ec52f9882a89daea96ea2e7defd94fb377bdd7e0b82a91fc/68747470733a2f2f636f6465636f762e696f2f67682f536f6e676d752f70726f6d707465722f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage Status"&gt;&lt;/a&gt;
&lt;a href="https://github.com/Songmu/prompter/blob/main/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/bdb5463fb1a2526f1d2a9067443266c4420c86d22c70c48961bbe5513b9d49b2/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e7376673f7374796c653d666c61742d737175617265" alt="MIT License"&gt;&lt;/a&gt;
&lt;a href="http://pkg.go.dev/github.com/Songmu/prompter" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/133af499a6fcf88dec48a37bd3a36df66cabf87063cf12780b4933efb01d7318/68747470733a2f2f706b672e676f2e6465762f62616467652f6769746875622e636f6d2f536f6e676d752f70726f6d70746572" alt="GoDev"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Description&lt;/h2&gt;
&lt;p&gt;utility for easy prompting in Golang&lt;/p&gt;
&lt;h2&gt;
Synopsis&lt;/h2&gt;
&lt;div class="highlight highlight-source-go position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-s1"&gt;twitterID&lt;/span&gt; &lt;span class="pl-c1"&gt;:=&lt;/span&gt; &lt;span class="pl-s1"&gt;prompter&lt;/span&gt;.&lt;span class="pl-en"&gt;Prompt&lt;/span&gt;(&lt;span class="pl-s"&gt;"Enter your twitter ID"&lt;/span&gt;, &lt;span class="pl-s"&gt;""&lt;/span&gt;)
&lt;span class="pl-s1"&gt;lang&lt;/span&gt; &lt;span class="pl-c1"&gt;:=&lt;/span&gt; &lt;span class="pl-s1"&gt;prompter&lt;/span&gt;.&lt;span class="pl-en"&gt;Choose&lt;/span&gt;(&lt;span class="pl-s"&gt;"Which language do you like the most?"&lt;/span&gt;, []&lt;span class="pl-smi"&gt;string&lt;/span&gt;{&lt;span class="pl-s"&gt;"Perl"&lt;/span&gt;, &lt;span class="pl-s"&gt;"Golang"&lt;/span&gt;, &lt;span class="pl-s"&gt;"Scala"&lt;/span&gt;, &lt;span class="pl-s"&gt;"Ruby"&lt;/span&gt;}, &lt;span class="pl-s"&gt;"Perl"&lt;/span&gt;)
&lt;span class="pl-s1"&gt;passwd&lt;/span&gt; &lt;span class="pl-c1"&gt;:=&lt;/span&gt; &lt;span class="pl-s1"&gt;prompter&lt;/span&gt;.&lt;span class="pl-en"&gt;Password&lt;/span&gt;(&lt;span class="pl-s"&gt;"Enter your password"&lt;/span&gt;)
&lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-s1"&gt;likeSushi&lt;/span&gt; &lt;span class="pl-smi"&gt;bool&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;prompter&lt;/span&gt;.&lt;span class="pl-en"&gt;YN&lt;/span&gt;(&lt;span class="pl-s"&gt;"Do you like sushi?"&lt;/span&gt;, &lt;span class="pl-c1"&gt;true&lt;/span&gt;)
&lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-s1"&gt;likeBeer&lt;/span&gt; &lt;span class="pl-smi"&gt;bool&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;prompter&lt;/span&gt;.&lt;span class="pl-en"&gt;YesNo&lt;/span&gt;(&lt;span class="pl-s"&gt;"Do you like beer?"&lt;/span&gt;, &lt;span class="pl-c1"&gt;false&lt;/span&gt;)&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Easy to use&lt;/li&gt;
&lt;li&gt;Care non-interactive (not a tty) environment
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Default&lt;/code&gt; is used and the process is not blocked&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No howeyc/gopass (which uses cgo) dependency
&lt;ul&gt;
&lt;li&gt;cross build friendly&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Customizable prompt setting by using &lt;code&gt;&amp;amp;prompter.Prompter{}&lt;/code&gt; directly&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/Songmu/prompter/blob/main/LICENSE"&gt;MIT&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Author&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/Songmu"&gt;Songmu&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Songmu/prompter"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/manifoldco"&gt;
        manifoldco
      &lt;/a&gt; / &lt;a href="https://github.com/manifoldco/promptui"&gt;
        promptui
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Interactive prompt for command-line applications
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
promptui&lt;/h1&gt;
&lt;p&gt;Interactive prompt for command-line applications.&lt;/p&gt;
&lt;p&gt;We built Promptui because we wanted to make it easy and fun to explore cloud
services with &lt;a href="https://github.com/manifoldco/manifold-cli"&gt;manifold cli&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/manifoldco/promptui./CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt; |
&lt;a href="https://github.com/manifoldco/promptui./.github/CONTRIBUTING.md"&gt;Contribution Guidelines&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/manifoldco/promptui/releases"&gt;&lt;img src="https://camo.githubusercontent.com/f88e2e116592ef0d56d059dda9d5d3804f41991e5bdd5b6ad2bede16158f28cc/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7461672f6d616e69666f6c64636f2f70726f6d707475692e7376673f6c6162656c3d6c6174657374" alt="GitHub release"&gt;&lt;/a&gt;
&lt;a href="https://godoc.org/github.com/manifoldco/promptui" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1e10a4fe371e6faf506d055891ac0d18d6cfa14f54d27737c4fcfdee550fd81e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f676f646f632d7265666572656e63652d626c75652e737667" alt="GoDoc"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/manifoldco/promptui" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0b6c9b32cb7f62950a8c4d962c761c5eee83394a7a597705f0b694664b6da39f/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6d616e69666f6c64636f2f70726f6d707475692f6d61737465722e737667" alt="Travis"&gt;&lt;/a&gt;
&lt;a href="https://goreportcard.com/report/github.com/manifoldco/promptui" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/87ba6eb23483b5af40a4531e7d2aa6811fbf8471fb74c9c7d84731d424025c3c/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f6d616e69666f6c64636f2f70726f6d70747569" alt="Go Report Card"&gt;&lt;/a&gt;
&lt;a href="https://github.com/manifoldco/promptui./LICENSE.md"&gt;&lt;img src="https://camo.githubusercontent.com/44c92aa855b3a4b0b5c6f84818afb96ab66b53a102115f5167a396a3f0ff8f3a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4253442d626c75652e737667" alt="License"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Overview&lt;/h2&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/cb2f8d2976387f7eb629a7c561181d1870b39991f80c913cf15e37d2cb7c6a06/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f78554e6461304e67623571736f674c7342692f67697068792e676966"&gt;&lt;img src="https://camo.githubusercontent.com/cb2f8d2976387f7eb629a7c561181d1870b39991f80c913cf15e37d2cb7c6a06/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f78554e6461304e67623571736f674c7342692f67697068792e676966" alt="promptui"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Promptui is a library providing a simple interface to create command-line
prompts for go. It can be easily integrated into
&lt;a href="https://github.com/spf13/cobra"&gt;spf13/cobra&lt;/a&gt;
&lt;a href="https://github.com/urfave/cli"&gt;urfave/cli&lt;/a&gt; or any cli go application.&lt;/p&gt;
&lt;p&gt;Promptui has two main input modes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Prompt&lt;/code&gt; provides a single line for user input. Prompt supports
optional live validation, confirmation and masking the input.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Select&lt;/code&gt; provides a list of options to choose from. Select supports
pagination, search, detailed view and custom templates.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a full list of options check &lt;a href="https://godoc.org/github.com/manifoldco/promptui" rel="nofollow"&gt;GoDoc&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Basic Usage&lt;/h2&gt;
&lt;h3&gt;
Prompt&lt;/h3&gt;
&lt;div class="highlight highlight-source-go position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;package&lt;/span&gt; main
&lt;span class="pl-k"&gt;import&lt;/span&gt; (
    &lt;span class="pl-s"&gt;"errors"&lt;/span&gt;
    &lt;span class="pl-s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="pl-s"&gt;"strconv"&lt;/span&gt;

    &lt;span class="pl-s"&gt;"github.com/manifoldco/promptui"&lt;/span&gt;
)

&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;main&lt;/span&gt;() {
    &lt;span class="pl-s1"&gt;validate&lt;/span&gt; &lt;span class="pl-c1"&gt;:=&lt;/span&gt; &lt;span class="pl-k"&gt;func&lt;/span&gt;(&lt;span class="pl-s1"&gt;input&lt;/span&gt; &lt;span class="pl-smi"&gt;string&lt;/span&gt;) &lt;span class="pl-smi"&gt;error&lt;/span&gt; {
        &lt;span class="pl-s1"&gt;_&lt;/span&gt;, &lt;span class="pl-s1"&gt;err&lt;/span&gt; &lt;span class="pl-c1"&gt;:=&lt;/span&gt; &lt;span class="pl-s1"&gt;strconv&lt;/span&gt;.&lt;span class="pl-en"&gt;ParseFloat&lt;/span&gt;(&lt;span class="pl-s1"&gt;input&lt;/span&gt;, &lt;span class="pl-c1"&gt;64&lt;/span&gt;)
        &lt;span class="pl-k"&gt;if&lt;/span&gt;&lt;/pre&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/manifoldco/promptui"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's it! We hope you liked it! Code examples are available on &lt;a href="https://github.com/tidalmigrations/interactive-cli-prompts"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you're interested in CLI applications development in Go and we ‚Äî &lt;a href="https://tidalmigrations.com/"&gt;Tidal Migrations&lt;/a&gt; ‚Äî are hiring! Please check our &lt;a href="https://tidalmigrations.com/careers/"&gt;Careers&lt;/a&gt; page!&lt;/p&gt;

&lt;p&gt;Long live the command line!&lt;/p&gt;

</description>
      <category>go</category>
      <category>cli</category>
    </item>
    <item>
      <title>Let me introduce you to Inertia.js, something you didn't know you were missing</title>
      <author>Kars van Iersel</author>
      <pubDate>Wed, 25 Aug 2021 18:24:39 +0000</pubDate>
      <link>https://dev.to/karsvaniersel/let-me-introduce-you-to-inertia-js-something-you-didn-t-know-you-were-missing-3d1</link>
      <guid>https://dev.to/karsvaniersel/let-me-introduce-you-to-inertia-js-something-you-didn-t-know-you-were-missing-3d1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Roughly a year ago I had to make a very large scale application and I couldn't decide on a backend framework. However, I knew I wanted to use Vue.js as my front-end. So I began my long quest the ideal framework for my backend. I had doubts between Node.js and Laravel, and I couldn't really decide. I had almost no experience with Node.js or Laravel. The only back-end language I had experience with was vanilla PHP.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enter Inertia.js&lt;/strong&gt;, all of the sudden I found  &lt;a href="https://inertiajs.com/"&gt;Inertia.js&lt;/a&gt; . A Laraval package created by  &lt;a href="https://twitter.com/reinink"&gt;Jonathan Reinink&lt;/a&gt;. Inertia.js allowed me to develop my large scale app using Vue and Laravel in one codebase. Which I really liked cause I hated to idea of having two GitHub repositories, one for the front-end and one for the back-end.&lt;/p&gt;

&lt;p&gt;Now, remember I had almost no experience with Laravel and now I also had to learn Inertia.js on top of it in order to develop my entire application. And trust me, the deadline was though. But boy oh boy Inertia.js was such a pleasure to develop with. Learning Laravel was a breeze, applying Inertia.js was a breeze and I finished the project much faster than I initially anticipated. &lt;/p&gt;

&lt;p&gt;For your understanding the project had some of the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reservation system for clients&lt;/li&gt;
&lt;li&gt;Admin system to handle reservations (create, cancel, refund etc)&lt;/li&gt;
&lt;li&gt;Payment processing&lt;/li&gt;
&lt;li&gt;Date scheduling&lt;/li&gt;
&lt;li&gt;Different type of products&lt;/li&gt;
&lt;li&gt;Upselling items&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oh and the site is getting used by over a 1000 people &lt;strong&gt;per day&lt;/strong&gt;. So I had to create a solid app that wouldn't crash and burn.&lt;/p&gt;

&lt;p&gt;My experience with Inertia.js, Laravel and Vue.js was such a delight that I wanted to share this with you. Cause I feel like Inertia.js is not getting the attention it deserves. I honestly believe that a front-end developer, who needs basic CRUD back-end functionality, can develop some incredibly SaaS applications using this tech stack. And if you are more experienced with Laravel you can really make anything you can think of with the power of Vue combined.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-inertiajs"&gt;
  &lt;/a&gt;
  What is Inertia.js?
&lt;/h2&gt;

&lt;p&gt;Inertia.js is a package built for Laravel allowing people to develop single-page applications without building an API, using either Vue.js, React or Svelte for their front-end. According to their website Inertia.js is the new approach to building classic server-driven web apps, they call it the modern monolith.&lt;/p&gt;

&lt;p&gt;So Inertia allows you to create client-side rendered apps, using React, Vue or Svelte by leveraging existing server-side frameworks. In my case Laravel, it can also work with Rails.&lt;/p&gt;

&lt;p&gt;Inertia doesn't use client-side routing and it also doesn't require an API to be developed. You only need to develop the controllers and page views like you would normally do with Laravel. &lt;/p&gt;

&lt;p&gt;So this means you can just write Laravel code and render on the client without having to output everything with an API and inherit everything in your SPA. Inertia streamlines this process by delivering straight from server-side to client-side. Saving &lt;strong&gt;a lot&lt;/strong&gt; of time&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#not-a-framework"&gt;
  &lt;/a&gt;
  Not a framework
&lt;/h3&gt;

&lt;p&gt;It is important to note that Inertia itself is not &lt;em&gt;another&lt;/em&gt; framework. It doesn't replace your existing server-side or client-side frameworks. It is designed to work with both. It is like the middleman connecting the two together. &lt;/p&gt;

&lt;p&gt;They currently work with the following front-end frameworks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vue&lt;/li&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Svelte&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And with the following back-end frameworks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Laravel&lt;/li&gt;
&lt;li&gt;Rails&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#should-you-use-inertiajs"&gt;
  &lt;/a&gt;
  Should you use Inertia.js?
&lt;/h2&gt;

&lt;p&gt;Inertia is designed for developers and larger development teams who usually build server-side applications using Laravel or Rails. So developers who are used to creating controllers, that get data from a database using ORM and render views. &lt;/p&gt;

&lt;p&gt;Typically with Laravel you would use blade templates to render your server-side rendered vies. But this becomes a bit harder if you want to swap it out with a JavaScript based SPA framework, such as Vue or React. Normally you would just start by creating an API and combining the two using said API.&lt;/p&gt;

&lt;p&gt;This means creating either a GraphQL or REST API. Creating Auth functionality for that API. Client-side state management. Having your code split up in two repositories (one for front-end and one for back-end). This means you now also need two hosting packages to host each platform on. &lt;/p&gt;

&lt;p&gt;You can already clearly see how much more work is involved the moment you want to use a modern client-side framework. Inertia removes all this extra hassle and complexity.&lt;/p&gt;

&lt;p&gt;Inertia works almost the same as you normally render your views, getting data from the database and rendering it in your view. Inertia brilliantly makes the pages render in JavaScript components instead. This means you have the full power of your Vue or React front-end code while delivering everything from the server without having to build an entire API.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-i-started-using-inertiajs"&gt;
  &lt;/a&gt;
  Why I started using Inertia.js
&lt;/h3&gt;

&lt;p&gt;The main reason why I started using Inertia was because I hated the idea of having my code split up in two repositories. Also I &lt;strong&gt;really&lt;/strong&gt; wanted to work with Vue.js for my front-end. &lt;/p&gt;

&lt;p&gt;I didn't have the time to develop my own API and then handle all the logic on both sides. I wanted one project that did all the work for me. I didn't want to have to handle authorization with Vue.js cause I find it very annoying and a time waster to set up. I mean, handeling authorization using Laravel (PHP) is so much easier. I don't want to reinvent the wheel by using Vue. I want to write code and deliver my project quickly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-inertiajs-works"&gt;
  &lt;/a&gt;
  How Inertia.js works
&lt;/h2&gt;

&lt;p&gt;Inertia allows you to build apps just you would regularly do with a server-side framework. It uses the framework's existing routing, controllers middleware, authentication and more functionalities.&lt;/p&gt;

&lt;p&gt;The only thing that Inertia adds, or changes rather, is your view layer, the way you render your front-end. Instead of using your regular server-side rendering, such a blade template, the views are passed to JavaScript components. This means you can keep writing your server-side code, like Laravel, like you regularly would, in combination with state of art front-end frameworks, such as React and Vue.&lt;/p&gt;

&lt;p&gt;If you are interested in the more technical background as in how this actually works, you can read that in the  &lt;a href="https://inertiajs.com/how-it-works"&gt;Inertia documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-experience-with-using-inertiajs"&gt;
  &lt;/a&gt;
  My experience with using Inertia.js
&lt;/h2&gt;

&lt;p&gt;Coming from a more front-end heavy background I was bit overwhelmed with using Laravel and to create my SaaS application. However since I was able to use Inertia, I was able to apply all the knowledge I had from Vue. This meant I only had to learn some Laravel specific items. Everything front-end related was nothing new. &lt;/p&gt;

&lt;p&gt;If I had to this with Blade templating it would've been a nightmare for me! And I wouldn't be able to have finished my project on time and with great success.&lt;/p&gt;

&lt;p&gt;So far I've been using Inertia for all my projects. It really made me switch my tech stack towards:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Laravel&lt;/li&gt;
&lt;li&gt;Inertia&lt;/li&gt;
&lt;li&gt;Vue&lt;/li&gt;
&lt;li&gt;TailwindCSS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oh btw before I forgot to mention, if you are afraid that Inertia won't work with Vue 2 or Vue 3. Don't worry, it works with both. Actually it doesn't matter what version you use cause Inertia doesn't affect Vue all that much. It just passes the data in a really clever way.&lt;/p&gt;

&lt;p&gt;And for the past 6 months using this tech stack I have been literally amazed with the amount of code I can produce, and the quality of it. Honestly, having an idea for something and being able to turn it into an MVP within weeks (often just a good weekend), is a lot of fun!&lt;/p&gt;

&lt;p&gt;Another great thing is that Inertia recently launched their SSR feature (server-side rendering) for their Github sponsors. Which takes this entire tech stack to the next level . Because the biggest problem with SPA's is that they don't rank well in Google due their JavaScript heavy nature. But now with Inertia you are also able to server-side render all of your pages, and rank better in Google. Of course there might be causes where you don't actually want SSR. For me it brings a lot of new interesting things to the table.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you are working with Laravel already it highly recommend you checking out Inertia. Actually I recommend everybody trying out Inertia. It really combines the best of both worlds. One of the best back-end frameworks there is combined with the most popular front-end frameworks out there.&lt;/p&gt;

&lt;p&gt;The learning curve is not that high, just a building a basic CRUD application with Laravel + Vue can probably be achieved within 1 day if you are a bit familiar with how MVP frameworks work. &lt;/p&gt;

&lt;p&gt;Take it from me, I barely touched Laravel and never heard of Inertia before and I was able to build a very large and complex application in a matter of weeks. &lt;/p&gt;

&lt;p&gt;If you have questions feel free to reach out to me! I'm happy to help. On that note, there is also an  &lt;a href="https://discord.com/invite/inertiajs"&gt;Inertia discord server&lt;/a&gt; . They are pretty active and so far I've had plenty of help over there. So thanks for anybody who's in that channel!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#noteworthy-links"&gt;
  &lt;/a&gt;
  Noteworthy links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://inertiajs.com/"&gt;Inertia website&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://laravel.com/"&gt;Laravel website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://laracasts.com/series/laravel-8-from-scratch/episodes/1"&gt;Laracasts: Laravel 8 from scratch course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>vue</category>
      <category>laravel</category>
      <category>programming</category>
    </item>
    <item>
      <title>things to regret about node js today</title>
      <author>vishwasnarayanre</author>
      <pubDate>Wed, 25 Aug 2021 18:23:14 +0000</pubDate>
      <link>https://dev.to/vishwasnarayan5/things-to-regret-about-node-js-2ech</link>
      <guid>https://dev.to/vishwasnarayan5/things-to-regret-about-node-js-2ech</guid>
      <description>&lt;p&gt;You have only started using Node agin in the past 6 months, because when RAYAN DAHL created Node, your goal was mainly to program event-driven HTTP servers, and Go is a better language for building faster servers. &lt;/p&gt;

&lt;p&gt;But he thinks JavaScript is good. Dynamic languages ‚Äã‚Äãmay not be suitable for building servers that you want to control everything, but they are the right tool for prototyping, such as scientific computing. JavaScript is the best dynamic language. &lt;/p&gt;

&lt;p&gt;Your Node problem is almost related to the way you manage user code. Mainly because it focuses on event I/O, the module system is essentially an afterthought.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#failed-to-fulfill-the-promise"&gt;
  &lt;/a&gt;
  failed to fulfill the promise
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It is possible that the unified use of promises in Node will speed up the delivery of standardization and async/await. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The node program can access all system calls, such as writing to disk and accessing the network. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#build-system"&gt;
  &lt;/a&gt;
  Build System
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If you are writing a module link to a C library, you will use GYP to compile the C library and link it to Node. &lt;/li&gt;
&lt;li&gt;Chrome used to use GYB, but now Node is the only GYP user. &lt;/li&gt;
&lt;li&gt;Funky interface, which is a Python adaptation of JSON. The node has several unnecessary complex wrappers. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#packagejson"&gt;
  &lt;/a&gt;
  package.json
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Includes &lt;code&gt;NPM&lt;/code&gt; in Node, making NPM a standard for Node distribution. Centralized repository (privately controlled) of 
modules. &lt;/li&gt;
&lt;li&gt;require ("sommodule") is not specific: package.json, local node_modules folder, NPM database. &lt;/li&gt;
&lt;li&gt;promotes the concept of "module" to an unnecessary abstraction of file directories. It does not exist on the network. &lt;/li&gt;
&lt;li&gt;includes unnecessary information such as licenses, repositories. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#nodemodules"&gt;
  &lt;/a&gt;
  node_modules
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The analysis algorithm for module is extremely complicated. &lt;/li&gt;
&lt;li&gt;Vendoredbydefault is kind, but $NODE_PATH will work. &lt;/li&gt;
&lt;li&gt;There is a deviation from the browser. &lt;/li&gt;
&lt;li&gt;does not need to be extended. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#is-unnecessarily-unclear"&gt;
  &lt;/a&gt;
  is unnecessarily unclear.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;is not the way browsers work. &lt;/li&gt;
&lt;li&gt;The module loader must guess. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#indexjs"&gt;
  &lt;/a&gt;
  index.js
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It unnecessarily complicates the module loading system. &lt;/li&gt;
&lt;li&gt;is especially unnecessary after package.json which needs to be supported. &lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#deno"&gt;
  &lt;/a&gt;
  Deno
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#httpsgithubcomrydeno"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/ry/deno"&gt;https://github.com/ry/deno&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;By default, the script should run without write access to the network or file system. &lt;/li&gt;
&lt;li&gt;Users can choose to access via the following signs: 

&lt;ul&gt;
&lt;li&gt;allownet &lt;/li&gt;
&lt;li&gt;allowwrite &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;It is not allowed to bind any native functions to V8. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-typescript-compiler-is-built-into-the-executable-file"&gt;
  &lt;/a&gt;
  The TypeScript compiler is built into the executable file.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;TypeScript is beautiful. &lt;/li&gt;
&lt;li&gt;finally delivered a practical and optional type language. &lt;/li&gt;
&lt;li&gt;enables code to grow seamlessly from fast hackers to large, well-structured machines. &lt;/li&gt;
&lt;li&gt;Normal JS should work too.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-simplified-module-system-does-not-support-node-modules"&gt;
  &lt;/a&gt;
  The simplified module system does not support node modules.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The import is just a relative or absolute URL. &lt;/li&gt;
&lt;li&gt;The import must provide an extension. &lt;/li&gt;
&lt;li&gt;remote URLs are fetched and cached indefinitely on the first load. &lt;/li&gt;
&lt;li&gt;can be sold by specifying a non-default cache directory. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#other"&gt;
  &lt;/a&gt;
  Other
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Only submit an executable file with the fewest links. &lt;/li&gt;
&lt;li&gt;Start the runtime by compiling the node module with parcel into a package. &lt;/li&gt;
&lt;li&gt;Always died immediately because of a promise that was not fulfilled. &lt;/li&gt;
&lt;li&gt;supports top-level wait. &lt;/li&gt;
&lt;li&gt;browser compatible (&lt;code&gt;window&lt;/code&gt; is not &lt;code&gt;global&lt;/code&gt;) 
#node #deno #javascript&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>programming</category>
      <category>computerscience</category>
    </item>
  </channel>
</rss>
