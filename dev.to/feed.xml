<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>TypeScript Interfaces: A Quick Guide to Help You Get Started</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 12 Jul 2021 08:22:24 +0000</pubDate>
      <link>https://dev.to/alexdevero/typescript-interfaces-a-quick-guide-to-help-you-get-started-55p6</link>
      <guid>https://dev.to/alexdevero/typescript-interfaces-a-quick-guide-to-help-you-get-started-55p6</guid>
      <description>&lt;p&gt;TypeScript brings many useful improvements to JavaScript language. One of them is static typing system that can help you write type safe code. Interfaces are part of this typing system. This tutorial will help you understand what TypeScript interfaces are and how to use them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-objects-and-black-swans"&gt;
  &lt;/a&gt;
  JavaScript, objects and black swans
&lt;/h2&gt;

&lt;p&gt;In JavaScript, and elsewhere as well, objects are one of the most popular ways to group related data together and pass them around. The problem is, there is no way in JavaScript to specify how certain object should look like. There is no way to say what properties should object have or what their values should be.&lt;/p&gt;

&lt;p&gt;This makes it easy to create code that is prone to errors. For example, to create an object and forget to add some property. Then, when it comes the time to finally use that object, you code will fail and program will crash. Reason? Your program expected specific property that is that is missing.&lt;/p&gt;

&lt;p&gt;The problem might not be a missing property. It might be that the type of a value of some property is different from what your program expected. The result is often the same. Code fails and program crashes. One may argue that this is not likely to happen. Well, earthquakes and floods are also not likely to happen.&lt;/p&gt;

&lt;p&gt;The thing is, nobody cares about probability when these events, these &lt;a href="https://en.wikipedia.org/wiki/Black_Swan_theory"&gt;black swans&lt;/a&gt;, occur. Your users will not care that wrong type or missing property is not likely to happen when the app they are using crashes. If only there was a way to avoid this. Maybe, TypeScript can help you here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typescript-interfaces-made-simple"&gt;
  &lt;/a&gt;
  TypeScript interfaces made simple
&lt;/h2&gt;

&lt;p&gt;The main feature of TypeScript is its powerful type system. This type system allows you to quickly specify &lt;a href="https://blog.alexdevero.com/javascript-basics-data-types-pt1/"&gt;primitive data types&lt;/a&gt; for variables. These simple types are only one part of this type systems. TypeScript also allows you to do this with objects. With the help of TypeScript, you can define shape of any objects.&lt;/p&gt;

&lt;p&gt;Shape of an object specifies what properties a given object contains. This also includes their types, what types should values of these properties be. In TypeScript, you can specify this shape via interface. TypeScript interfaces are abstract types. Interfaces tell the compiler two important things.&lt;/p&gt;

&lt;p&gt;First, interfaces tell what properties a given object could have or must have. This means that when some property is optional, TypeScript will know that these properties are not required and will not require you to define them. Second, interfaces specify the types of these properties, types of their values.&lt;/p&gt;

&lt;p&gt;With this information, TypeScript can warn you when you accidentally define some object property and use a wrong type. TypeScript will know what type is expected to be used for each object property. If you use different type, TypeScript will tell you about the mismatch, where it happened and also how to fix it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-an-interface"&gt;
  &lt;/a&gt;
  Creating an interface
&lt;/h2&gt;

&lt;p&gt;When you want to create a new interface, you do it by using the &lt;code&gt;interface&lt;/code&gt; keyword. This keyword is followed by the name of the interface add curly brackets. These brackets contain the shape of an object, its properties and types. You specify these properties and types as key:value pairs.&lt;/p&gt;

&lt;p&gt;This is very similar to creating new &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer"&gt;object literal&lt;/a&gt;. However, there are some differences. First, there is no equal sign between the name of the interface and curly brackets. Second, those key:value pairs are separated by semicolons. Below are examples of simple TypeScript interfaces.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an empty interface:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;EmptyObject&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="c1"&gt;// Create interface Cat:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Cat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;hairColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create interface Car:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;manufacturer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;numberOfWheels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create interface User:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;isActive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;guest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Cat&lt;/code&gt; interface defines an object that has five properties: &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;age&lt;/code&gt;, &lt;code&gt;hairColor&lt;/code&gt;, &lt;code&gt;weight&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;. All these properties are required. Values of &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;hairColor&lt;/code&gt; must be strings. The rest must be numbers. The &lt;code&gt;Car&lt;/code&gt; interface defines an object that has four properties: &lt;code&gt;model&lt;/code&gt;, &lt;code&gt;manufacturer&lt;/code&gt;, &lt;code&gt;numberOfWheels&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;These properties are also all required. Value of &lt;code&gt;numberOfWheels&lt;/code&gt; must be a number. The rest must be strings. Lastly, the &lt;code&gt;User&lt;/code&gt; interface defines an object that has again five properties: &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;isActive&lt;/code&gt; and &lt;code&gt;role&lt;/code&gt;. Values of the first three must be strings.&lt;/p&gt;

&lt;p&gt;The value of &lt;code&gt;isActive&lt;/code&gt; property must be a boolean, either true or false. The value of &lt;code&gt;role&lt;/code&gt; is more concrete. It says that the value must be one of these three strings: &lt;code&gt;'admin'&lt;/code&gt;, &lt;code&gt;'user'&lt;/code&gt; or &lt;code&gt;'guest'&lt;/code&gt;. If you use any other string, TypeScript will warn you that the value you use is wrong, even though the type is the same.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implicit-interfaces"&gt;
  &lt;/a&gt;
  Implicit interfaces
&lt;/h3&gt;

&lt;p&gt;TypeScript interfaces don't have to be created only by you, explicitly. TypeScript will also create interfaces on its own when you define an object. TypeScript will look at the properties of that object and values of these properties. Then, it will infer specific types using type inference.&lt;/p&gt;

&lt;p&gt;The result will be implicit interface that matches the object you've just created. This also applies if you create empty object, without any properties. TypeScript will simply create an empty interface. This can later cause troubles when you try to add properties because TypeScript will expect the object to be, and remain, empty.&lt;/p&gt;

&lt;p&gt;A simple way to avoid this is by defining interfaces by yourself, explicitly. If you create an empty object also create an interface for it. This interface will not specify the current shape of the object, but the shape of it in the future. This will tell TypeScript which properties and types to expect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-interfaces"&gt;
  &lt;/a&gt;
  Using interfaces
&lt;/h2&gt;

&lt;p&gt;When you create an interface you also have to tell TypeScript for which object you intend to use it. Doing so is easy. When you assign an object to a variable you can specify its interface by adding colons and the name of the interface between the variable name and equal sign.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an interface User:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;guest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;logUserData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Use interface to annotate an object:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userJoe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;some_secret_password123645&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;joe@user.co&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;logUserData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This also applies elsewhere. If you want to use an interface for an object used as a function parameter you use the same approach. You specify the parameter, then add colons, and then you specify the interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an interface User:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;guest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;logUserData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create a function with "user" parameter&lt;/span&gt;
&lt;span class="c1"&gt;// and annotate the "user" parameter with "User" interface.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUserEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implementing-interfaces-with-classes"&gt;
  &lt;/a&gt;
  Implementing interfaces with classes
&lt;/h2&gt;

&lt;p&gt;TypeScript also allows you to use interface with &lt;a href="https://blog.alexdevero.com/get-started-with-javascript-classes/"&gt;JavaScript classes&lt;/a&gt;. With classes, though, the implementation is slightly different. You still specify the interface after the name, class name in this case. However, you don't put colons between the name of the class and the interface.&lt;/p&gt;

&lt;p&gt;What you do instead is basically replacing those colons with &lt;code&gt;implements&lt;/code&gt; keyword. This will tell TypeScript that a given class should use an interface that follows after this keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create interface Person:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Define some class properties&lt;/span&gt;
  &lt;span class="c1"&gt;// of type string and number:&lt;/span&gt;
  &lt;span class="nl"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// Define class method that returns a string:&lt;/span&gt;
  &lt;span class="nl"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Annotate class "Female" with "Person" interface:&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Female&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Define required public properties:&lt;/span&gt;
  &lt;span class="nl"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
  &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="c1"&gt;// Create constructor and assign existing properties:&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Define required class method:&lt;/span&gt;
  &lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello, my name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#specifying-optional-properties"&gt;
  &lt;/a&gt;
  Specifying optional properties
&lt;/h2&gt;

&lt;p&gt;Until now, all examples we were using used only required properties. This will work for many cases. However, it can happen that you may not need some properties in a given object every time. One thing you can do is to create a new interface, without optional properties. Then, you can switch between these interfaces as you need.&lt;/p&gt;

&lt;p&gt;This will work, but it will also lead to duplicates and more code to maintain. There is another thing you can do. You can take the original interface and mark the optional properties as optional. You achieve this by placing a question mark (&lt;code&gt;?&lt;/code&gt;) between the property name and the colons.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an interface with optional properties:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;middleName&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;= This property will be optional&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doherty&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;middleName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Stevens&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will also work because "middleName"&lt;/span&gt;
&lt;span class="c1"&gt;// property is not required:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;William&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Connors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will not work because "lastName"&lt;/span&gt;
&lt;span class="c1"&gt;// property is required but missing:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;middleName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;O&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;Conor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Property 'lastName' is missing in type '{ firstName: string; middleName: string; }' but required in type 'Person'.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#specifying-readonly-properties"&gt;
  &lt;/a&gt;
  Specifying read-only properties
&lt;/h2&gt;

&lt;p&gt;When you create an object you may want to prevent some properties from being changed. You can specify this intent also via TypeScript interfaces. You achieve this by placing the &lt;code&gt;readonly&lt;/code&gt; keyword before the property name. This will tell TypeScript that the property that follows is a read-only property.&lt;/p&gt;

&lt;p&gt;If you use the interface to annotate some object, you will be able to set the value for the read-only property only during initialization. If you try to change the property value later, TypeScript compiler will throw an error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create interface with read-only property:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;= This property will be read-only&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Annotate object "userFrank" with "User" interface:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userFrank&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;frankie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;123456782&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;frankie@frank.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Try to change value of "username" property:&lt;/span&gt;
&lt;span class="nx"&gt;userFrank&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;frankman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Try to change value of "email" property:&lt;/span&gt;
&lt;span class="nx"&gt;userFrank&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;frankman@frank.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Cannot assign to 'email' because it is a read-only property.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#interfaces-for-functions"&gt;
  &lt;/a&gt;
  Interfaces for functions
&lt;/h2&gt;

&lt;p&gt;Objects, including classes, are not the only things that can use interfaces. You can also use TypeScript interfaces to annotate functions. You can do this by giving the interface a call signature. This means that you will specify only the parameter list and return type of the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create interface for multiply function:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;MultiplyFunc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Specify only parameters and return type:&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Annotate the "multiply" function&lt;/span&gt;
&lt;span class="c1"&gt;// with "MultiplyFunc" interface:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MultiplyFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Note:&lt;/span&gt;
&lt;span class="c1"&gt;// Thanks to MultiplyFunc interface TypeScript&lt;/span&gt;
&lt;span class="c1"&gt;// will know that "a" and "b" in "multiply" function&lt;/span&gt;
&lt;span class="c1"&gt;// are numbers so you don't have to type them explicitly.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One thing about interfaces and functions. Name of parameters in an interface doesn't have to match the name of parameters in the actual function. You can use one name for interface parameter and another for the function declaration. TypeScript will connect parameters with their types correctly using their order.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;MyFunc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Specify only parameters and return type:&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Annotate the "multiply" function&lt;/span&gt;
&lt;span class="c1"&gt;// with "MultiplyFunc" interface:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MyFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`a is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, b is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, c is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// TypeScript will correctly infer "a" to be number,&lt;/span&gt;
&lt;span class="c1"&gt;// "b" to be string and "c" to be boolean.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#extending-interfaces"&gt;
  &lt;/a&gt;
  Extending interfaces
&lt;/h2&gt;

&lt;p&gt;One useful thing is that interfaces allow extending, just like JavaScript classes. Let's say you have an existing interface. You also have an object, but this object contains more properties than the interface specifies. One thing you can do is to change the interface to fit this object.&lt;/p&gt;

&lt;p&gt;The problem is that this will influence all objects using that interface. Another thing is creating new interface, duplicating the old one and adding new properties. This will bloat your code with duplicates. Luckily, there is the third option. You can create new interface and extend it with the original.&lt;/p&gt;

&lt;p&gt;This way, the new interface will inherit all properties defined in the original interface. Best part? You will not have to copy a single line of code. You can extend interface by using the &lt;code&gt;extends&lt;/code&gt; keyword. This keyword allows you to extend one interface with just one interface as well as with multiple.&lt;/p&gt;

&lt;p&gt;When you want to extend interface with multiple interfaces you separate them with commas. The &lt;code&gt;extends&lt;/code&gt; keyword goes between the first interface, the one you are extending, and the second, the one you are extending with.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create "Person" interface:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create "Male" interface that extends "Person" interface:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Male&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Basically translates to:&lt;/span&gt;
&lt;span class="c1"&gt;// interface Male {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: string;&lt;/span&gt;
&lt;span class="c1"&gt;//   gender: 'Male';&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// Create "Female" interface that also extends "Person" interface:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Female&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Basically translates to:&lt;/span&gt;
&lt;span class="c1"&gt;// interface Female {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: string;&lt;/span&gt;
&lt;span class="c1"&gt;//   gender: 'Female';&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// Create "Boy" interface that extends "Person" and "Male" interfaces:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Boy&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Male&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Basically translates to:&lt;/span&gt;
&lt;span class="c1"&gt;// interface Boy {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: string;&lt;/span&gt;
&lt;span class="c1"&gt;//   gender: 'Male';&lt;/span&gt;
&lt;span class="c1"&gt;//   age: number;&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// Create "Girl" interface that extends "Person" and "Female" interfaces:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Girl&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Female&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Basically translates to:&lt;/span&gt;
&lt;span class="c1"&gt;// interface Girl {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: string;&lt;/span&gt;
&lt;span class="c1"&gt;//   gender: 'Female';&lt;/span&gt;
&lt;span class="c1"&gt;//   age: number;&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stanley&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Stanley&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;david&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Male&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;David&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sarah&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Female&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sarah&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;andreas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Boy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Andreas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;victoria&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Girl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Victoria&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-generic-interfaces"&gt;
  &lt;/a&gt;
  Creating generic interfaces
&lt;/h2&gt;

&lt;p&gt;One more thing. TypeScript also allows to create something called "generic interfaces". These interfaces allow you to specify type of a property based on one or more parameters you provide the interface with when you use it. You can specify these parameters using angle brackets (&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;) like in the example below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create interface for UserData:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;UserData&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create a generic interface:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ApiResponse&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create function to fetch API&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Use ApiResponse "interface" and pass&lt;/span&gt;
  &lt;span class="c1"&gt;// the "UserData" interface as argument (for T argument):&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ApiResponse&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserData&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/some_api_endpoint&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// The "ApiResponse&amp;lt;UserData&amp;gt;" basically translates to:&lt;/span&gt;
  &lt;span class="c1"&gt;// interface ApiResponse&amp;lt;T&amp;gt; {&lt;/span&gt;
  &lt;span class="c1"&gt;//   date: Date;&lt;/span&gt;
  &lt;span class="c1"&gt;//   code: number;&lt;/span&gt;
  &lt;span class="c1"&gt;//   payload: UserData[];&lt;/span&gt;

  &lt;span class="c1"&gt;//   Or:&lt;/span&gt;
  &lt;span class="c1"&gt;//   payload: [name: string; email: string;]&lt;/span&gt;
  &lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-typescript-interfaces"&gt;
  &lt;/a&gt;
  Conclusion: TypeScript interfaces
&lt;/h2&gt;

&lt;p&gt;TypeScript interfaces provide an easy way to annotate your objects, including classes, and also functions. This can help you write safer and more maintainable code. I hope that this tutorial helped you understand and learn about what interfaces are and how to use them in your code.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>A quick introduction to Next.js</title>
      <author>Menard Maranan</author>
      <pubDate>Mon, 12 Jul 2021 08:22:20 +0000</pubDate>
      <link>https://dev.to/menard_codes/a-quick-introduction-to-next-js-k9c</link>
      <guid>https://dev.to/menard_codes/a-quick-introduction-to-next-js-k9c</guid>
      <description>&lt;p&gt;Next.js, a React framework that leveled up the game of React from just front-end to &lt;strong&gt;Fullstack&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you haven't developed with Next.js yet, lemme tell you that you should be. Why? Because you can do hella lot things here more than a plain 'ol React App (you'll later see why).&lt;/p&gt;

&lt;p&gt;But to give you a hint, Next.js allows you to build a website or webapp in different ways. You can: serve statically generated files like HTML in a CDN, in-demand or per-request server-side rendering of HTML, and heck, you can even build an API with Next.js! Can you imagine building an API within React?&lt;/p&gt;

&lt;p&gt;But anyways, let's take a quick look on Next.js as a Fullstack framework.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nextjs-as-a-fullstack-solution"&gt;
  &lt;/a&gt;
  Next.js as a FullStack solution
&lt;/h2&gt;

&lt;p&gt;Unlike React.js, which is pure front end, Next.js is fullstack.&lt;/p&gt;

&lt;p&gt;Just like what I said on the introduction, you can build websites using 3 different approaches in web development: serve static files, send server generated sites, or even build an API.&lt;/p&gt;

&lt;p&gt;But how do you know which approach to use at what scenario?&lt;/p&gt;

&lt;p&gt;My tip (and Next.js documentation tip):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Static Site&lt;/strong&gt; - If a page on your site is not always changing. Meaning, it's the same regardless of who requested it or at what time (i.e. about page, or log in page, or sign up page, etc.). That also means the page can be generated on build time and cached on a CDN, which is the fastest way for our website to be served and the cheapest to host (you can even host it for free, like in GitHub pages).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Server Side Rendering&lt;/strong&gt; - If a page often change, or always change, or if it depends the user requesting it, (i.e. user account, news feed, etc.), then that is when you use Server Side rendering.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;API&lt;/strong&gt; - This is not actually specified by Next.js Documentation as alternative approach, but if you're client side app needs to query the database, then do that in the backend and expose this endpoint for the client. This might be used by client side rendered page. But you can also do other backend services like send POST request to save a data on the database and again, expose this endpoint. You can define your API with a syntax almost similar to an express API.&lt;/p&gt;

&lt;p&gt;Among the choices, Next.js Documentation stressed out to choose static site whenever possible, given it's speed and being low-cost. SSR is slower than static ones because it runs on a server and can be expensive.&lt;/p&gt;

&lt;p&gt;But whatever approach you want or need in your app, Next.js have a support for that.&lt;/p&gt;

&lt;p&gt;Before we move to the next part, let me point out that Next.js is not an 'end all be all' solution, because for example, Next.js have no native support to things like Real Time Video Chat. But no worries, Next.js is a JAMstack solution. The 'A' in JAMstack is API, and we can use a third-party API as a solution for such needs (an example would be Agora).&lt;/p&gt;

&lt;p&gt;Ok, but how do we compare Next.js with React besides Next being fullstack?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nextjs-vs-react"&gt;
  &lt;/a&gt;
  Next.js vs React
&lt;/h2&gt;

&lt;p&gt;A question I have when I started learning Next.js is "Is Next.js another wild javascript module released in the JavacSript Jungle?"&lt;/p&gt;

&lt;p&gt;Turns out the answer is both yes and no.&lt;/p&gt;

&lt;p&gt;In fact, Next.js is not actually different from React, because Next.js is a &lt;strong&gt;React framework&lt;/strong&gt; and yeah, it's like coming from the lineage of React.&lt;/p&gt;

&lt;p&gt;The additional features of Next.js to React are what makes it cool and popular among JavaScript folks.&lt;/p&gt;

&lt;p&gt;First off, Next.js deals with the common problems in a React App, like SEO and optimization. Additional to that are the in-built support for things like routing and css (including Sass).&lt;/p&gt;

&lt;p&gt;So yeah, those are just some things to mention about the pros of Next.js.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-next-app"&gt;
  &lt;/a&gt;
  Create Next App
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cpOhq06e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mv76gtwsyaevk0zc4snu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cpOhq06e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mv76gtwsyaevk0zc4snu.png" alt="Next js folder structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before I forget to mention, starting a brand new Next.js app is quite similar to React which can be done by firing an &lt;code&gt;npx create-next-app &amp;lt;app-name&amp;gt;&lt;/code&gt; on your terminal, just like the good 'ol React. Again, instead of &lt;code&gt;create-react-app&lt;/code&gt;, you see it's &lt;code&gt;create-next-app&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So yeah, this will create a folder named after the one you specified and build the Next.js folder structure, install it's dependencies, and add some boilerplate code (again, just like React, but tailored in the needs of a Next App).&lt;/p&gt;

&lt;p&gt;You can try that out yourself and check the &lt;a href="https://nextjs.org/docs"&gt;Documentation&lt;/a&gt; if you're feeling lost.&lt;/p&gt;

&lt;p&gt;Next.js seems quite good right? But...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-you-ditch-react-for-nextjs"&gt;
  &lt;/a&gt;
  Should you ditch React for Next.js?
&lt;/h2&gt;

&lt;p&gt;Woah, that's a strong question!&lt;/p&gt;

&lt;p&gt;My takes on this would be bias, but I think, not completely (because hey, you're still using react). Before thinking about fully adopting Next.js, you have to consider that it's still a growing market, and if you're a typical dev, you hold a job (or wants to, like me, I'm available for a position if you want to reach out...😏), the job market is again on the side of React. The reasons are up to you, but Next.js is still a pretty darn choice for new and future projects.&lt;/p&gt;

&lt;p&gt;But personally, I believe Next.js is the future of React and Web Development itself. We're on the advent of yet another revolution in tech, the JAMstack, and Next.js is in perfect position for this event. And if you have an upcoming project, consider Next.js, and discover the advantages it will present you. Or maybe you're just starting out, take my word for it, try Next.js.&lt;/p&gt;

&lt;p&gt;To be honest, I myself adopted Next.js and I haven't used &lt;code&gt;create-react-app&lt;/code&gt; for a while now, and so far, I have no doubt with my choice.&lt;/p&gt;

&lt;p&gt;But whatever your condition was, your choice depends on you (but I still recommend Next.js, because come on! Why should I write this if that's not the point right? Just kidding...... Try Next.js)&lt;/p&gt;

&lt;p&gt;Hopefully this article helped you to get up to speed with 'What the heck is Next.js'.&lt;/p&gt;

&lt;p&gt;If you want further readings, you can check out their &lt;a href="https://nextjs.org/docs"&gt;Documentation&lt;/a&gt; or follow me up here where I'll be posting more Next.js blogs.&lt;/p&gt;

&lt;p&gt;Btw, Follow me on &lt;a href="https://twitter.com/menard_codes"&gt;Twitter!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Lớp học làm nhân bánh mì mở quán kinh doanh mùa dịch

</title>
      <author>TuyensinhDongdo24h</author>
      <pubDate>Mon, 12 Jul 2021 07:48:31 +0000</pubDate>
      <link>https://dev.to/tuyensinhdongdo24h/l-p-h-c-lam-nhan-banh-mi-m-quan-kinh-doanh-mua-d-ch-4kgh</link>
      <guid>https://dev.to/tuyensinhdongdo24h/l-p-h-c-lam-nhan-banh-mi-m-quan-kinh-doanh-mua-d-ch-4kgh</guid>
      <description>&lt;p&gt;Lớp học mở cửa hàng bánh mì bí quyết kinh doanh, học làm nhân bánh mì kinh doanh ở Hà Nội. Mở quán bánh mì kinh doanh với khóa học làm các loại nhân bánh mì và nước sốt như nhân Pate, xá xíu, chả nướng, bò sốt tiêu đen….. Bán hàng online trong mùa dịch siêu lợi nhuận Tư vấn mở quán  học viên được lựa chọn đăng ký học 1 thầy 1 trò hoặc lớp ghép lớp khóa học làm nhân bánh mì và nước sốt =&amp;gt; Bạn xem ngay Khóa học làm nhân bánh mì mở cửa hàng của trung tâm Học Món việt. Liên hệ/Zalo: 0989 434 130. lớp học làm nhân bánh mì, học làm nhân bánh mì, khóa học làm nhân bánh mì, &lt;br&gt;
Mở tiệm bánh mì bí quyết kinh doanh thành công&lt;br&gt;
=&amp;gt; Xem ngay &lt;a href="http://tuyensinhdongdo24h.edu.vn/lop-hoc-lam-nhan-banh-mi-de-mo-tiem-banh-mi-kinh-doanh/"&gt;http://tuyensinhdongdo24h.edu.vn/lop-hoc-lam-nhan-banh-mi-de-mo-tiem-banh-mi-kinh-doanh/&lt;/a&gt;&lt;br&gt;
Bạn Hà Huy Thắng (Bắc giang) và bạn Nguyễn Ngọc Thịnh (Đông anh) tìm đến trung tâm Học Món Việt để học làm các loại nhân và nước sốt bánh mì. Do cửa hàng của 2 bạn đều gần chỗ đông học sinh, sinh viên, sẵn kinh doanh cafe và trà sữa nên 2 bạn định mở rộng mô hình kinh doanh của mình.&lt;br&gt;
“Tôi rất hài lòng về chương trình học làm nhân bánh mì và các loại nước sốt tại trường. Ở đây, thầy Tuyên đã hướng dẫn cho tôi tận tình và chu đáo. Cũng biết được thêm các loại nhân bánh để kinh doanh hiệu quả” Đó là chia sẻ của Bạn Thắng và bạn Thịnh.&lt;br&gt;
Việc kinh doanh mô hình trà sữa, café kết hợp với bánh mỳ đang rất thịnh hành và hút khách hiện nay. Bởi nhu cầu thưởng thức bánh mì với nước sốt đa dạng, đậm đà các loại nhân bánh mì có hương vị đặc trưng đang được thực khách rất ưa chuộng.&lt;br&gt;
Với khóa học nhân bánh mỳ học viên sẽ được hướng dẫn đầy đủ từ khâu chọn nguyên vật liệu, sơ chế nguyên vật liệu đến cách tẩm ướp điều chỉnh sao cho miếng thịt thơm ngon mang hương vị đặc trưng riêng.&lt;br&gt;
=&amp;gt; Xem thêm Khóa học nhân bánh mì để biết thông tin lớp học, học phí, thời gian học&lt;br&gt;
Lớp học làm nhân bánh mì ở Hà Nội&lt;br&gt;&lt;br&gt;
Với chương trình học theo hình thức kinh doanh truyền nghề  các bạn sẽ được chọn các loại nhân đăng ký học bao gồm: &lt;br&gt;
• Trứng ốp la&lt;br&gt;
• Patê&lt;br&gt;
• Heo nướng&lt;br&gt;
• Bò nướng&lt;br&gt;
• Heo quay&lt;br&gt;
• Bò nướng phômai&lt;br&gt;
• Thịt nướng • Gà xé&lt;br&gt;
• Xíu mại&lt;br&gt;
• Xá xíu&lt;br&gt;
• Chả cá&lt;br&gt;
• Thịt viên&lt;br&gt;
• Bò Kho&lt;br&gt;
• Bò bít tết&lt;/p&gt;

&lt;p&gt;Để học hết tất cả các loại nhân này phải mất 5-7 buổi học. Nhưng đối với các lớp kinh doanh mở quán thì sẽ hướng dẫn các bạn chọn các loại nhân phù hợp với từng bạn. Thường 1 khóa học 3 buổi các bạn sẽ học được 4-5 loại nhân kèm với các loại sốt tương ứng, và không thể thiếu được là các loại dưa góp làm cho món bành mì kẹp thêm phần hấp dẫn.&lt;br&gt;
Ngoài ra, bạn cũng có thể chọn thêm các món mà các bạn trẻ hiện nay hay ăn như bánh mì chảo, Burger Bò, gà, heo, hải sản… Nếu bạn lựa chọn kinh doanh các món này cũng là những món thu lợi nhuận cao nhưng phải đầu tư nhiều hơn từ dụng cụ, đến bàn ghế…&lt;br&gt;
Nắm bắt được điều đó Trung tâm Học Món việt đã mở lớp học làm nhân bánh mì dành cho:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mọi đối tượng có nhu cầu học để biết làm các loại nước sốt cũng như nhân bánh mì&lt;/li&gt;
&lt;li&gt;Mọi đối tượng muốn học để kinh doanh hay để mở quán bánh mì.&lt;/li&gt;
&lt;li&gt;Mọi đối tượng muốn nâng cao tay nghề.
=&amp;gt; Xem thêm Học trung cấp nấu ăn tại Hà Nội để biết thêm chương trình trung cấp của trường.
Trung tâm Học Món Việt với khóa học nhân bánh mì và các loại sốt
Trung tâm Học Món Việt mở khóa học nhân bánh mì ở Hà Nội cho mọi đối tượng từ mở quán kinh doanh , đến nâng cao tay nghề trong kinh doanh.&lt;/li&gt;
&lt;li&gt;Giảng viên đứng lớp là những người đã có nhiều năm kinh nghiệm trong việc giảng dạy cũng như am hiểu về bánh mì, các loại nhân bánh mì, các loại nước sốt bánh mì. Không chỉ học lý thuyết, các học viên được thực hành ngay trên lớp cùng giảng viên của trường.&lt;/li&gt;
&lt;li&gt;Trang thiết bị cơ sở vật chất đầy đủ, tạo điều kiện cho học viên khóa học tốt nhất. &lt;/li&gt;
&lt;li&gt;Tư vấn hỗ trợ giải đáp thắc mắc của học viên, cũng như hỗ trợ học viên trong việc lên menu mở quán kinh doanh.
Hy vọng với những chia sẻ trên đã giúp bạn sơ lược hình dung về chương trình học của trường, để biết thêm thông tin và tư vấn thêm về chương trình học các bạn liên hệ:
  TRƯỜNG TC CN VÀ QT ĐÔNG ĐÔ- TRUNG TÂM HỌC MÓN VIỆT
ĐỊA CHỈ:  Nhà E21, ngõ 68, phố Trung Kính, Yên Hòa, Cầu Giấy, Hà Nội.
LIÊN HỆ:  Ms Hồng: 0989 434 130 – 0948 079 040
Zalo: 0989 434 130 
Đăng ký tư vấn các khóa học chứng chỉ của trường tại &lt;a href="http://tinyurl.com/dk-chungchi"&gt;http://tinyurl.com/dk-chungchi&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>lophoclamnhanbanh</category>
      <category>khoahocnhanbanh</category>
    </item>
    <item>
      <title>
Lớp học trung cấp Thư viện thiết bị trường học cấp tốc
</title>
      <author>TuyensinhDongdo24h</author>
      <pubDate>Mon, 12 Jul 2021 07:42:23 +0000</pubDate>
      <link>https://dev.to/tuyensinhdongdo24h/l-p-h-c-trung-c-p-th-vi-n-thi-t-b-tr-ng-h-c-c-p-t-c-3ej9</link>
      <guid>https://dev.to/tuyensinhdongdo24h/l-p-h-c-trung-c-p-th-vi-n-thi-t-b-tr-ng-h-c-c-p-t-c-3ej9</guid>
      <description>&lt;p&gt;Đào tạo và cấp nhanh bằng THÔNG TIN THƯ VIỆN – THIẾT BỊ TRƯỜNG HỌC tại Hà Nội. Cấp nhanh CHỨNG CHỈ THÔNG TIN THƯ VIỆN Liên hệ/Zalo: 0989 434 130 (cô Hồng). Dùng để thi công chức xét biên chế ngành quản lý thông tin thư viện, thiết bị trường học =&amp;gt; Xem ngay Trung cấp THƯ VIỆN - THIẾT BỊ học cấp tốc tại Hà Nội  Sinh viên ở xa có chỗ ở ký túc xá miễn phí cuối tuần. Học trung cấp thư viện, học trung cấp thiết bị, học thiết bị trường học, học thư viện tại hà nội&lt;br&gt;
Bạn đang tìm lớp trung cấp thông tin thư viện thiết bị học nhanh thi công chức, bạn cần biết:&lt;br&gt;
– Hiện tại  nhu cầu tuyển dụng cán bộ thư viện thiết bị tại các trường là rất cao, vì hầu hết thường là các cán bộ ngành khác kiêm nhiệm làm công tác quản lý thư viện, quản lý thiết bị trường học.&lt;br&gt;
– Sở nội vụ quy định với mỗi cán bộ thư viện thiết bị ở trường học trình độ tổi thiểu là tốt nghiệp trung cấp trở lên, ở một số tỉnh thành thì chỉ yêu cầu có chứng chỉ thư viện , thiết bị thí nghiệm.&lt;br&gt;
– Có nhiều trưởng tuyển sinh trung cấp thông tin thư viện – thiết bị trường học nhưng để tìm trường học vừa đào tạo nhanh vừa đảm bảo chất lượng, sinh viên có thể vừa đi học vừa đi làm thì rất ít trường đáp ứng được.&lt;br&gt;
=&amp;gt; Đọc thêm bài viết Thông tin tuyển sinh lớp thư viện thiết bị cấp tốc 7 tháng để biết được lịch học và thời gian học&lt;br&gt;
Trường TC CN &amp;amp; QT Đông Đô là nơi đào tạo trung cấp thư viện thiết bị trường học có tiếng tại HN.&lt;br&gt;
– Là 1 trong các trường trực thuộc Sở giáo dục và đào tạo Hà Nội, đào tạo chất lượng, uy tín được xếp hạng tốt trong các trường trung cấp chuyên nghiệp&lt;br&gt;
– Trường thường xuyên mở các lớp chuyên đề thực tế cho sinh viên, để sinh viên không những được học lý thuyết còn được thực hành, khi ra trường không còn bỡ ngỡ.&lt;br&gt;
=&amp;gt;  Xem thêm bài viết Thông tin ngành học trung cấp thư viện  thiết bị để biết thêm môn học ngành học &lt;a href="http://tuyensinhdongdo24h.edu.vn/trung-cap-thong-tin-thu-vien-thiet-bi/"&gt;http://tuyensinhdongdo24h.edu.vn/trung-cap-thong-tin-thu-vien-thiet-bi/&lt;/a&gt;&lt;br&gt;
Trường tuyển sinh đối tượng học trung cấp thư viện thiết bị đáp ứng các yêu cầu sau:&lt;br&gt;
– Học sinh có bằng TC, CĐ,ĐH hoặc sơ cấp nghề của 1 ngành khác thì học hệ 1 năm (học 8-10 tháng)&lt;br&gt;
– Học sinh học hết THPT, hoặc có bằng bổ túc THPT học hệ 2 năm (15 tháng)&lt;br&gt;
– Học sinh tốt nghiệp THCS học hệ 3 năm (25 tháng).&lt;br&gt;
Link đăng ký học, tìm hiểu thông tin: &lt;a href="http://tinyurl.com/dang-ky-online68"&gt;http://tinyurl.com/dang-ky-online68&lt;/a&gt;&lt;br&gt;
Hồ sơ xét vào lớp học trung cấp thư viện thiết bị cần phải chuẩn bị:&lt;br&gt;
– Bản sao Bằng tốt nghiệp Phổ thông hoặc Bằng TC, CĐ, ĐH (nếu có)&lt;br&gt;
– Bản sao Bảng điểm hoặc Học bạ phổ thông (có công chứng)&lt;br&gt;
–  Bản sao Giấy khai sinh&lt;br&gt;
–  Ảnh 3×4: 3 chiếc&lt;br&gt;
–  Bản sao CMTND&lt;br&gt;
Địa chỉ tiếp nhận hồ sơ và học tập trường Trung Cấp Công nghệ và Quản Trị Đông Đô:&lt;br&gt;
Số 6 (ngõ 97), Phạm Ngọc Thạch, Kim Liên, Đống Đa, HN&lt;br&gt;
Mọi chi tiết liên hệ: 0989 434 130 -0948 079 040 (cô Hồng)&lt;br&gt;
Zalo: 0989 434 130/ Mail: &lt;a href="mailto:hongbt79@gmail.com"&gt;hongbt79@gmail.com&lt;/a&gt;&lt;br&gt;
 CẢM ƠN CÁC BẠN ĐÃ ĐỌC THÔNG TIN!&lt;/p&gt;

</description>
      <category>trungcathuwuvien</category>
      <category>thongtinthuvien</category>
      <category>thietbitruonghoc</category>
    </item>
    <item>
      <title>Jira Zendesk Integration: Sync Jira Issues and Zendesk Tickets</title>
      <author>Teja Bhutada</author>
      <pubDate>Mon, 12 Jul 2021 07:20:46 +0000</pubDate>
      <link>https://dev.to/bhutadateja/jira-zendesk-integration-sync-jira-issues-and-zendesk-tickets-1cjn</link>
      <guid>https://dev.to/bhutadateja/jira-zendesk-integration-sync-jira-issues-and-zendesk-tickets-1cjn</guid>
      <description>&lt;p&gt;Choosing the right software is one of those critical decisions that impacts your business. Now getting the software to interact and automating workflows can increase that impact and ensure your organization is headed the right way.&lt;/p&gt;

&lt;p&gt;Today, I’ll discuss integrating Jira and Zendesk, showing you how tickets and issues can be shared between your teams seamlessly, letting information propagate from team to team and helping everyone work effectively.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-integrate-jira-and-zendesk"&gt;
  &lt;/a&gt;
  Why Integrate Jira and Zendesk
&lt;/h2&gt;

&lt;p&gt;It’s common for teams to store data on different systems. There’s often a large amount of overlap between the data, so syncing it benefits the teams and their collaboration.&lt;/p&gt;

&lt;p&gt;Sharing data manually is slow and error prone. An automated system will do it regularly and quickly. It can also log what it does and record any errors.&lt;/p&gt;

&lt;p&gt;A common use case for a Jira Zendesk sync is where a company uses Jira for development and Zendesk for customer service. Many of the issues raised by users will end up as tickets for developers.&lt;/p&gt;

&lt;p&gt;Such integration lets these Zendesk tickets move to Jira automatically. With the right software integration solution, you can decide how you want to send them while allowing users to flag some of them or to set specific conditions for transfer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-set-up-a-jira-zendesk-integration-in-6-steps"&gt;
  &lt;/a&gt;
  How to Set up a Jira Zendesk Integration in 6 Steps
&lt;/h2&gt;

&lt;p&gt;I am going to use a software integration solution called &lt;a href="https://exalate.com"&gt;Exalate&lt;/a&gt;. Here’s how to set the integration up in a few simple steps. &lt;/p&gt;

&lt;p&gt;First, you’ll install Exalate on both sides and then connect them. After that, there are a couple of optional steps to get things working exactly how you want. Then you’re ready to go!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-install-exalate-on-jira"&gt;
  &lt;/a&gt;
  Step 1 - Install Exalate on Jira
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4PjGRT4f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o82xpw5vj1febj67o8l0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4PjGRT4f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o82xpw5vj1febj67o8l0.png" alt="exalate for jira"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Jira, click the top right user icon and select ‘Atlassian Marketplace’. Enter ‘Exalate’ in the search field and press return. ‘Exalate Jira Issue Sync &amp;amp; More’ will appear as the top entry.&lt;/p&gt;

&lt;p&gt;Click the blue button to choose a plan and install Exalate. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-install-exalate-on-zendesk"&gt;
  &lt;/a&gt;
  Step 2 - Install Exalate on Zendesk
&lt;/h3&gt;

&lt;p&gt;Now you’ll install Exalate on Zendesk. You can read more about it in the documentation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nww9e25f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dotuq72sx02t6o98lhi2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nww9e25f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dotuq72sx02t6o98lhi2.png" alt="exalate for zendesk"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Zendesk, click the cog in the left hand menu, then click ‘Marketplace’ in the ‘Apps’ section. Type ‘Exalate’ in the search field, then click ‘Exalate’ when its icon appears.&lt;/p&gt;

&lt;p&gt;Click the install button, then select your account on the popup. Click ‘install’ again. A config screen will appear. You can change the details if you like, before clicking ‘Install’ again.&lt;/p&gt;

&lt;p&gt;Exalate will appear in Zendesk’s left-hand menu. Click it, then click ‘Allow’ to give it access to your data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-create-a-connection-between-your-instances"&gt;
  &lt;/a&gt;
  Step 3 - Create a Connection Between Your Instances
&lt;/h3&gt;

&lt;p&gt;You can do the next steps from either side. I’ll use Zendesk here. Click the Exalate icon in the left side menu, then click ‘Connections’. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3CeRlBtZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oowgvk7o922e95zxj3wk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3CeRlBtZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oowgvk7o922e95zxj3wk.png" alt="jira zendesk integration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the connections screen, click the ‘Initiate Connection’ button. Paste the address of your Jira instance into the ‘Destination instance URL’ field. Exalate will now check your Jira instance to make sure it is installed there too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DeetikAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/au13bskq5c2ddq0vuj2h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DeetikAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/au13bskq5c2ddq0vuj2h.png" alt="initiate a jira zendesk sync"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then it will present you with several options.&lt;/p&gt;

&lt;p&gt;The basic more (Free Plan) lets you create connections with everything configured automatically. That’s a great way to test Exalate out. The more advanced plans offer a visual and a scripting mode. These let you choose what is shared, and the conditions under which sharing takes place. &lt;/p&gt;

&lt;p&gt;In visual mode, you can do this using an intuitive, easy-to-use interface. And in scripting mode, you use code. Visual mode is easier, but scripting mode lets you add more advanced rules.&lt;/p&gt;

&lt;p&gt;I’ll use the basic mode for now, but will discuss the others briefly in the next steps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QCMz8awx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2xhxrd922vijfw6b8c2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QCMz8awx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2xhxrd922vijfw6b8c2.png" alt="exalate free plan"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you choose ‘basic’ and click next, Exalate will ask if you have admin access to the other side of the connection. If so, you’ll be sent there to activate it. You need to pick a project for the connection to work with. Exalate will use that project’s data.&lt;/p&gt;

&lt;p&gt;If not, you’ll generate a code, which you can paste into Jira manually. You do that by going to the connection screen in Jira, clicking ‘Accept Invitation’ and following the steps that appear on-screen.&lt;/p&gt;

&lt;p&gt;You can also optionally enter an issue to sync to test the connection is working.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-configure-your-connection-to-share-the-right-data"&gt;
  &lt;/a&gt;
  Step 4 - Configure Your Connection to Share the Right Data
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oPOBPNEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cn9gnip8vdx429m6ferj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oPOBPNEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cn9gnip8vdx429m6ferj.png" alt="configure jira zendesk sync"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you click the ‘edit connection’ button in the connections list, then the rules tab on the next screen, you can see how fields are synced. In visual mode, you can change these mappings, remove what you don’t want and add any others.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qdYnGX4s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppn2i16tgf54d47ihqw3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qdYnGX4s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppn2i16tgf54d47ihqw3.png" alt="jira zendesk sync rules"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In script mode, you can create more complex rules. Programmers will appreciate the additional power this provides. &lt;/p&gt;

&lt;p&gt;If you look at the existing rules, you’ll get an idea of how it works. Lines of code assign attributes from one side of the connection to the other.&lt;/p&gt;

&lt;p&gt;If you don’t want an attribute synced, you can comment that line out. You can also match different attributes. Perhaps you want to add the priority to the notes, and set it yourself on the other side. &lt;/p&gt;

&lt;p&gt;The outgoing rules essentially provide the other side of the connection with equivalent attributes. The incoming sync picks out a few attributes to use when creating new issues, based on the information it receives.&lt;/p&gt;

&lt;p&gt;You can add items here, and, again, change anything you like. You could set the assignee to a specific person by adding this line:&lt;/p&gt;

&lt;p&gt;Issue.assignee = “Peter”&lt;/p&gt;

&lt;p&gt;You could also combine items, or use more advanced code to make decisions based on other attributes. The assignee could depend on the priority for example.&lt;/p&gt;

&lt;p&gt;With script rules, you can get very specific and get the connection to do exactly what you want. So don’t be afraid to experiment! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-create-automated-synchronization-triggers"&gt;
  &lt;/a&gt;
  Step 5 - Create Automated Synchronization Triggers
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_9nUhsqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r5rxu42up08db6jteyth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_9nUhsqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r5rxu42up08db6jteyth.png" alt="sync triggers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the ‘Create Trigger’ button on the ‘Triggers’ page and you can set a rule for syncing items. You can select the type of entity and the connection the trigger applies to. In the ‘if’ section you enter rules in Zendesk search syntax to pick out the tickets you want to share. &lt;/p&gt;

&lt;p&gt;Set the ‘Active’ switch, then click ‘Create’ and your trigger will be ready. You can also add notes to help you keep track of things.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-start-syncing-issues-and-tickets"&gt;
  &lt;/a&gt;
  Step 6 - Start Syncing Issues and Tickets
&lt;/h3&gt;

&lt;p&gt;Now that your instances are connected and sharing data, feel free to revisit the previous steps to refine your connection’s behaviour. You can add further connections, rules, and triggers and get Exalate doing more and more work for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Integrating platforms can multiply the benefits you get from them, and level up your business. And as you’ve learned today, it is very easy to do. A little work setting things up can save you a lot of time.&lt;/p&gt;

&lt;p&gt;Exalate lets you share data reliably, while maintaining your teams’ autonomy. It is flexible enough to make changes and share the data you want, when you want. &lt;/p&gt;

&lt;p&gt;As well as Jira and Zendesk, it works with several other platforms such as Azure DevOps, Github, and ServiceNow. &lt;a href="https://exalate.com/integrations"&gt;Take a look&lt;/a&gt; and see how it will work for you.&lt;/p&gt;

</description>
      <category>jira</category>
      <category>zendesk</category>
      <category>integration</category>
    </item>
    <item>
      <title>I made a WhatsApp bot to solve Math problems</title>
      <author>Amey Bhavsar</author>
      <pubDate>Mon, 12 Jul 2021 07:20:32 +0000</pubDate>
      <link>https://dev.to/ameybhavsar/i-made-a-whatsapp-bot-to-solve-math-problems-6ab</link>
      <guid>https://dev.to/ameybhavsar/i-made-a-whatsapp-bot-to-solve-math-problems-6ab</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dzddc83R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aytpl9th2h7uae77fhho.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dzddc83R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aytpl9th2h7uae77fhho.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am fascinated by chatbots. They can carry out any task automatically for you and can be invoked at a single command. I found bots on Discord and was intrigued to make one for WhatsApp. But, WhatsApp doesn't share its official API with everyone. Fortunately, many workarounds exist using WhatsApp Web. I used &lt;a href="https://github.com/pedroslopez/whatsapp-web.js"&gt;&lt;code&gt;whatsapp-web.js&lt;/code&gt;&lt;/a&gt; to ease authentication and messaging controls. It provides a simple WhatsApp Web client built using Node &amp;amp; Puppeteer.&lt;/p&gt;

&lt;p&gt;Using this bot, you can add more functionality and automate anything you'd like. Maybe you want to monitor your servers or get random memes. I found WolframAlpha's computational intelligence fascinating and hence decided to integrate its API with WhatsApp messaging.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#heres-the-github-code-repository-you-can-get-setup-the-bot-and-start-playing-with-it-directly"&gt;
  &lt;/a&gt;
  Here's the Github code repository. You can get setup the bot and start playing with it directly.
&lt;/h5&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ameybhavsar24"&gt;
        ameybhavsar24
      &lt;/a&gt; / &lt;a href="https://github.com/ameybhavsar24/ww-wra"&gt;
        ww-wra
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Whatsapp Web bot to query and get results to and from WolframAlpha API
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;And if like creating things from scratch, let's not waste any time and get started building the bot! 😄&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#start-a-new-npm-project-in-your-favourite-project-directory"&gt;
  &lt;/a&gt;
  Start a new NPM project in your favourite project directory
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#install-whatsapp-web-packages"&gt;
  &lt;/a&gt;
  Install Whatsapp Web packages.
&lt;/h3&gt;

&lt;p&gt;We need &lt;code&gt;whatsapp-web.js&lt;/code&gt; for WhatsApp client and &lt;code&gt;qrcode-terminal&lt;/code&gt; to parse the auth information into visible QR code.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm i whatsapp-web.js qrcode-terminal
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#boilerplate-code-to-get-started"&gt;
  &lt;/a&gt;
  Boilerplate code to get started.
&lt;/h3&gt;

&lt;p&gt;Create a new file &lt;code&gt;index.js&lt;/code&gt; and add the following code.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;qrcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;qrcode-terminal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;whatsapp-web.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// open whatsapp web in a headless browser (no gui)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;puppeteerOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;headless&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--no-sandbox&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// initialize client object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;puppeteer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;puppeteerOptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// prints QR code to console when received&lt;/span&gt;
&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;qr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;qr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;qrcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;qr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;small&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ready&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Client is ready!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// listen for new messages&lt;/span&gt;
&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message_create&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;messageBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;messageBody&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;messageBody&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;!ping&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pong&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will initialize a client instance. We pass &lt;code&gt;puppeteerOptions&lt;/code&gt; to &lt;code&gt;client&lt;/code&gt; to disable a GUI. &lt;br&gt;
Notice the &lt;code&gt;message_create&lt;/code&gt; event. The client listens for any new messages. Right now, we will listen to only &lt;code&gt;!ping&lt;/code&gt; and respond with &lt;code&gt;pong&lt;/code&gt;.&lt;br&gt;
Add the following start script to &lt;code&gt;package.json&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node index.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Start the node app with&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--esa49oeE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9g4boi8ktwumv4m2m43.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--esa49oeE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9g4boi8ktwumv4m2m43.png" alt="Screenshot from 2021-07-12 12-47-45"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should see a QR code displayed in the terminal. Scan this QR code with the WhatsApp Web option in the WhatsApp menu.&lt;br&gt;
Once scanned successfully, you should see a message &lt;strong&gt;Client is ready!&lt;/strong&gt; in the console. &lt;br&gt;
If you send &lt;em&gt;!ping&lt;/em&gt; in any direct or group chat, the bot should reply with &lt;em&gt;pong&lt;/em&gt;. If the bot is running with the same account as yours, it will reply as you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: WhatsApp only allows web use from a single session. If already web sessions are active (for e.g.: on a browser), they will automatically become inactive.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sWmmyd2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nsw6rg59z9sixus7tgl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sWmmyd2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nsw6rg59z9sixus7tgl.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#responding-to-math-problems"&gt;
  &lt;/a&gt;
  Responding to Math problems
&lt;/h3&gt;

&lt;p&gt;To solve Math problems, we are going to use the &lt;a href="https://products.wolframalpha.com/api/"&gt;Wolfram|Alpha API&lt;/a&gt;.&lt;br&gt;
Sign up for a free account and create a new app on the &lt;a href="https://developer.wolframalpha.com/portal/myapps/"&gt;Developer Portal&lt;/a&gt; by clicking on &lt;strong&gt;Get an App ID&lt;/strong&gt; button.&lt;br&gt;
Give your app a cool name and description.&lt;br&gt;
Remember to note the App ID. You can always check it again by clicking the &lt;strong&gt;Edit&lt;/strong&gt; link on the app card.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XdqIXM6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rc7e4sjb8gpcnmh6ihyq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XdqIXM6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rc7e4sjb8gpcnmh6ihyq.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Create a new file called &lt;code&gt;.env&lt;/code&gt; and paste the &lt;code&gt;APPID&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;APPID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;App ID from Wolfram|Alpha API here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To use this variable in our code, we can use the dotenv package. To install &lt;code&gt;dotenv&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, initialize dotenv by adding this line at the top of &lt;code&gt;index.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Wolfram|Alpha provides official modules to call its functions. Download &lt;a href="https://products.wolframalpha.com/api/libraries/javascript/WolframAlphaAPI.js.html"&gt;WolframAlphaAPI.js&lt;/a&gt; to your project directory. We can then require it and initialize the instance as follows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;whatsapp-web.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;APPID&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WolframAlphaAPI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./WolframAlphaAPI.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;wraAPI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;WolframAlphaAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;appid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;invokeKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;!b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;puppeteerOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here, we are getting the &lt;code&gt;appid&lt;/code&gt; from process and then initializing WolframAlphaAPI instance &lt;code&gt;wraAPI&lt;/code&gt; which will later handle all functions.&lt;br&gt;
Also, it's a good idea to have invoke keys (basically strings with which messages are prefixed) so the bot can differentiate between normal messages and commands.&lt;/p&gt;

&lt;p&gt;Try running &lt;code&gt;npm start&lt;/code&gt; to make sure no errors are present. You should still see a QR code and after authenticating any new messages should be logged.&lt;/p&gt;

&lt;p&gt;If you find any errors and need help, feel free to comment them and I'll definately take a look!&lt;/p&gt;

&lt;p&gt;Ok, it's been a long way and we are almost done.&lt;/p&gt;

&lt;p&gt;Let's handle bot commands and add reply functionality.&lt;br&gt;
Edit &lt;code&gt;index.js&lt;/code&gt; to handle message.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message_create&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;messageBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;messageBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;invokeKey&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;messageHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// receive all bot commands and reply accordingly&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;messageHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// get message body and trim invokeKey&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;invokeKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Querying result for &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;handleImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wraAPI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Before you run &lt;code&gt;npm start&lt;/code&gt; again, wait a sec! We also need to define the logic for handling image responses in &lt;code&gt;handleImage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here's how we can do that:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i parse-data-url
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, add the following to &lt;code&gt;index.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parseDataUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;parse-data-url&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MessageMedia&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;whatsapp-web.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wraAPI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Image request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// send the rest of the message to Wolfram|Alpha API&lt;/span&gt;
    &lt;span class="nx"&gt;wraAPI&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSimple&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseDataUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MessageMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parsed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contentType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parsed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#and-were-done"&gt;
  &lt;/a&gt;
  And ... we're done!
&lt;/h4&gt;

&lt;p&gt;Yep, really. That was it. &lt;br&gt;
Start the node app again with &lt;code&gt;npm start&lt;/code&gt;. Once you have authenticated, try this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hJQg90Pw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azm1fjo4qi6p18hzeomi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hJQg90Pw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azm1fjo4qi6p18hzeomi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the bot should reply with the correct image output.&lt;br&gt;
Give yourself a pat on the back for finishing this project!&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#find-the-complete-code-for-this-project-on-github-if-you-find-it-interesting-do-star-the-repository"&gt;
  &lt;/a&gt;
  Find the complete code for this project on Github. If you find it interesting, do star the repository.
&lt;/h5&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ameybhavsar24"&gt;
        ameybhavsar24
      &lt;/a&gt; / &lt;a href="https://github.com/ameybhavsar24/ww-wra"&gt;
        ww-wra
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Whatsapp Web bot to query and get results to and from WolframAlpha API
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I created another WhatsApp bot with Google search, random jokes, compliments and anime quotes! Check out &lt;a href="https://github.com/ameybhavsar24/ww-wra-goog"&gt;ameybhavsar24/ww-wra-goog&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next
&lt;/h3&gt;

&lt;p&gt;Now you have a way to programmatically reply to Whatsapp messages. What you can create with it is limitless. I recommend you to check out following ideas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lots of &lt;a href="https://products.wolframalpha.com/api/"&gt;prebuilt WolframAlpha APIs&lt;/a&gt;. You can get text &amp;amp; audio responses as well as steps for a problem. You can even use their Conversational API to build a bot with back-and-forth dialog.&lt;/li&gt;
&lt;li&gt;Google search responses &lt;/li&gt;
&lt;li&gt;Random joke or roast (remember when you need the perfect comeback on a group debate, you're covered now xD)&lt;/li&gt;
&lt;li&gt;Or anything else you find cool.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Right now, you need to scan the QR code for every run but the session can be stored in a JSON file to resume it again. Read more on &lt;a href="https://waguide.pedroslopez.me/features/resuming-sessions"&gt;Resuming Sessions - whatsapp-web.js guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you for reading this tutorial to the very end! I'm happy you were able to build your own WhatsApp bot. &lt;br&gt;
If you faced any errors, feel free to comment on them. Also, your feedback on improving this post is welcome.&lt;/p&gt;

&lt;p&gt;Author: &lt;a class="mentioned-user" href="https://dev.to/ameybhavsar"&gt;@ameybhavsar&lt;/a&gt;
&lt;br&gt;
Github: &lt;a href="https://github.com/ameybhavsar24"&gt;https://github.com/ameybhavsar24&lt;/a&gt;&lt;/p&gt;

</description>
      <category>bot</category>
      <category>node</category>
      <category>api</category>
      <category>wolframalpha</category>
    </item>
    <item>
      <title>AWS open source news and updates #75</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 12 Jul 2021 07:04:49 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-75-4abj</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-75-4abj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#12th-july-2021-instalment-75"&gt;
  &lt;/a&gt;
  12th July, 2021 - Instalment #75
&lt;/h2&gt;

&lt;p&gt;Newsletter #75.&lt;/p&gt;

&lt;p&gt;This week we have a bumper edition, due to the fact I did not publish last week and it looks like everyone has been very busy. We have new open source projects include a light weight Java client, a tool to help you manage your AWS resources and some sample applications to help you get started with location based services, Bottlerocket and algorithmic trading. We have a new workshop on GraphQL as well as the usual round up of community and AWS blog posts, featuring lots of great content for machine and data scientists, container and devops specialists as well as developer tools and IoT. We have posts on Apache Airflow, Apache Kafka, Apache Spark, Apache Flink, Spring Boot, AWS Data Wrangler, Bottlerocket, Kubernetes, Drupal, RabbitMQ, Suricata, MySQL, Redis and many more.&lt;/p&gt;

&lt;p&gt;I have introduced a [hands on] tag so you can see which posts have code or are walk throughs where you can end up (hopefully) with the same result as the blog post they came from!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feedback&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you read this newsletter, I would love to hear what you think so I can improve it. Please &lt;a href="https://eventbox.dev/survey/CHG06PE"&gt;complete this very short survey&lt;/a&gt; (will take you less than 60 seconds) and you may get an AWS $25 credit voucher. Thank you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes: Pratik Bhavsar, Damon Cortesi, Vu Dao, Dave Moten, Adam McQuistan, Sheldon Hull, Jens Schmidt Hansen, Steve Sklar, Kyle Neideck, Oliver Steffmann, Fernando Rocha Silva, Panna Shetty, Talia Nassi, Sam Mokhtari, Mitesh Patel, Joseph Morais, Jobin George, Roberto Luna Rojas, Shawn Wang, Asaf Porat Stoler, Itay Maoz, Yehonatan Yulazari, Maish Saidel-Keesing, Amar Mehta, Royal O’Brien, Amit Chowdhury, Saurabh Shrivastava, Michael DeRan, Chris Friedline, Netsanet Gebremadhin, Jenna Lang, Lee Pang, Nick Ragusa, Dirk Michel, Zach Gardner, Rashed Talukder, Jae M. Kim, Eddie Pick, Scott Perry, Mony Kiem, Frenil Randeria, Ripunjaya Pattnaik, Sean McArthur, Ugur Kira, Jeremy Cowan, Steve Borrelli, Rob Clark, Manabu McCloskey, Vikrant Kahlir, Nima Kaviani, Sai Sharanya Nalla, Kartik Kannapur, Narayana Vemburaj, Anjani Reddy, Shivkumar Rajendran, Ananth Vaidyanathan, and Prem Nambi.&lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-from-open-source-projects"&gt;
  &lt;/a&gt;
  Latest from open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;aws-lightweight-client-java&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/ps"&gt;aws-lightweight-client-java&lt;/a&gt; if you are looking for a really  lightweight java client for the AWS API, then Dave Moten has you covered with this project. This standalone artefact (about 57K) that performs authentication (signing requests with AWS Signature Version 4) and helps you build requests against the AWS API. It includes nice concise builders, a lightweight inbuilt xml parser (to parse responses), and useful convenience methods. Perfect for those situations this is important (Mobile and functions for example)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;serverless-transformers-on-aws-lambda&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/py"&gt;serverless-transformers-on-aws-lambda&lt;/a&gt; Pratik Bhavsar shared his latest open source project late last week, which looks very interesting. It provides a serverless way to run your machine learning transformers. A &lt;a href="https://en.wikipedia.org/wiki/Transformer_(machine_learning_model)"&gt;transformer&lt;/a&gt; is a deep learning model that adopts the mechanism of attention, differentially weighing the significance of each part of the input data. It is used primarily in the field of natural language processing (NLP)[1] and in computer vision (CV)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;bottlerocket-ecs-updater-cdk&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/pt"&gt;bottlerocket-ecs-updater-cdk&lt;/a&gt; this project from Adam Keller provides an example of a bottlerocket deployment to Amazon ECS with the updater built as a construct. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;collie-cli&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/pk"&gt;collie-cli&lt;/a&gt; is a new open source project from meshcloud that allows you to manage your AWS resources through a single view. View your tenants, tags, costs, users, access rights and more through a single common model. Check it out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h2fOPPay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/meshcloud/collie-cli/blob/develop/.github/collie-demo.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h2fOPPay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/meshcloud/collie-cli/blob/develop/.github/collie-demo.gif%3Fraw%3Dtrue" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;amazon-location-service-musterpoint-tracker-ios&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/p2"&gt;amazon-location-service-musterpoint-tracker-ios&lt;/a&gt; this project helps you build a sample mobile application that show cases how to integrate both location based services as well as geofencing using the recently launched Amazon Location Service. You can dive deeper and follow along with the blog post that accompanies this project, &lt;a href="https://aws-oss.beachgeek.co.uk/p3"&gt;Create an iOS tracker application with Amazon Location Service and AWS Amplify &lt;/a&gt; from Fernando Rocha Silva and Panna Shetty.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G_gqL31---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/0a57cb53ba59c46fc4b692527a38a87c78d84028/2021/06/24/architecture-updated.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G_gqL31---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/0a57cb53ba59c46fc4b692527a38a87c78d84028/2021/06/24/architecture-updated.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;algorithmic-trading&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/ov"&gt;algorithmic-trading&lt;/a&gt; this project is a hands on workshop where you will learn how to load and store financial data to build and backtest algorithmic trading strategies that use technical indicators and advanced machine learning models. You can read more about this project via the blog post from Oliver Steffmann, &lt;a href="https://aws-oss.beachgeek.co.uk/ou"&gt;Building algorithmic trading strategies with Amazon SageMaker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q3TQiR5---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/algorithmic-trading/blob/master/assets/chart.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q3TQiR5---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/algorithmic-trading/blob/master/assets/chart.png%3Fraw%3Dtrue" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#community-open-source-posts"&gt;
  &lt;/a&gt;
  Community open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Apache Airflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/px"&gt;Building and Testing a new Apache Airflow Plugin&lt;/a&gt; Damon Cortesi has put together this great blog post that tells you everything you need to know about contributing an operator to Apache Airflow, sharing his experience during the work he did on a new EMR on EKS plugin to Apache Airflow. Great stuff.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Data Wrangler&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you work with data on AWS, then there is a good chance you will find the open source project &lt;a href="https://aws-oss.beachgeek.co.uk/pp"&gt;AWS Data Wrangler&lt;/a&gt; something you need to know more about. Not to be confused with SageMaker Data Wrangler, AWS Data Wrangler extends the capabilities of Pandas to AWS by connecting data frames to AWS data-related services. Last week it was included in ThoughtWorks Technology Radar under Trial (to find out more about this, I highly recommend you read about and subscribe to the &lt;a href="https://aws-oss.beachgeek.co.uk/po"&gt;ThoughtWorks Technology Radar&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Check out what they said, but I think this is a great summary:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We've used AWS Data Wrangler in production and like that it lets you focus on writing transformations without spending too much time on the connectivity to AWS data services.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;AWS Greengrass&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I loved this post from Kyle Neideck, &lt;a href="https://aws-oss.beachgeek.co.uk/pj"&gt;Cloud-printing for Restaurants with AWS IoT Greengrass&lt;/a&gt; which really appealed to the inner device hacker/maker in me. In this post Kyle shows you how he build a new open source project that enables restaurants to connect customers to the kitchen. Really well worth reading this project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WeV9EUWk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1225/1%2AH7-sLIPEJpZlWZD9bHn7TQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WeV9EUWk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1225/1%2AH7-sLIPEJpZlWZD9bHn7TQ.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spring Boot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/ph"&gt;How to Create an AWS ALB and ASG&lt;/a&gt; in this post you will learn how you can take your Spring Boot application and then configure a load balancer and an auto scaling group that will allow you to scale up and down your application in response to demand. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;KinD&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon EKS-Distro was launched during re:Invent, and is a distribution of Kubernetes that can be run in a number of different environments, including your own. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/pg"&gt;Using KinD to run EKS-D&lt;/a&gt; Jeremy Cowan takes a look at how you can use Kubernetes in Docker (KinD) to run EKS-D clusters on your local machine. [hands on] &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cdk8s&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another great post from Vu Dao, this week he writes about using cdk8s (an open-source software development framework for defining Kubernetes applications and reusable abstractions using familiar programming languages - a la AWS CDK), to deploy an AWS Load Balancer for your Kubernetes application in the post &lt;a href="https://aws-oss.beachgeek.co.uk/pu"&gt;Create AWS Load Balancer Controller Ingress With CDK8S&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Terraform&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are a user of Terraform and have wanted to deploy an Amazon EMR cluster that can consume data from other AWS accounts (Cross Account S3 bucket access for example), then you need to read this blog post from Adam McQuistan, &lt;a href="https://aws-oss.beachgeek.co.uk/pf"&gt;How To Provision AWS EMR Cluster with Cross Account S3 Bucket Access Using Terraform&lt;/a&gt; [hands on]&lt;/p&gt;

&lt;p&gt;I also enjoyed reading another Terraform post from Steve Sklar, &lt;a href="https://aws-oss.beachgeek.co.uk/pi"&gt;Running Scheduled Jobs in AWS Using Terraform&lt;/a&gt; where he shows you how you can use Terraform to automate the provisioning of a solution based on AWS Fargate, and outlines why he choose Fargate over a number of other technologies within AWS that allow you to schedule jobs. Nice post. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leapp&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have featured Leapp in previous newsletter posts, and have it running on my mac when I need to connect to various AWS instances. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/pe"&gt;Simplify Aws Developer Security With Leapp&lt;/a&gt; Sheldon Hull shares his experience in using it so far. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/pd"&gt;Install pg_cron on AWS RDS&lt;/a&gt; Jens Schmidt Hansen has put together this short guide on upgrading your PostgreSQL database on Amazon RDS to support scheduling jobs using pg_cron. pg_cron is a simple cron-based job scheduler for PostgreSQL (9.5 or higher) that runs inside the database as an extension. It uses the same syntax as regular cron, but it allows you to schedule PostgreSQL commands directly from the database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#workshops"&gt;
  &lt;/a&gt;
  Workshops
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;GraphQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a new workshop that will help you get hands on with GraphQL, building a fully functioning application for a fast-paced sports event called the GraphQL Real-time Race.&lt;/p&gt;

&lt;p&gt;Start your engines &lt;a href="https://aws-oss.beachgeek.co.uk/pc"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-and-amazon-open-source-posts"&gt;
  &lt;/a&gt;
  AWS and Amazon open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Open 3D Engine&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Big news last week for game developers and enthusiasts, as we announced the open sourcing of a new project Open 3D Engine (O3DE) a AAA-capable, cross-platform open source game engine. In the post, &lt;a href="https://aws-oss.beachgeek.co.uk/oy"&gt;Built for Builders: The Story of AWS and Open 3D Engine – Developer Preview&lt;/a&gt; Amar Mehta and Royal O’Brien share the open source journey, the differences from its Lumberyard ancestor, take a look at the key features of this project and share what is coming up next.As the authors conclude:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Our hope is that this open-source effort provides a game and simulation development platform that anyone can leverage to quickly build even more amazing games and real-time simulations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qMCGzbq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/91032ad7bbcb6cf72875e8e8207dcfba80173f7c/2021/07/01/O3DE-002.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qMCGzbq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/91032ad7bbcb6cf72875e8e8207dcfba80173f7c/2021/07/01/O3DE-002.jpg" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS IoT C-SDK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://aws-oss.beachgeek.co.uk/p6"&gt;How being open led to greater customer value with the AWS IoT Device SDK for Embedded C&lt;/a&gt;, Rashed Talukder writes how adopting and collaborating with leading open source projects helped developers make the AWS IoT C-SDK more trustworthy and flexible, while increasing ease of use. A great post when considering what you can apply when thinking about your own particular use case.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;curl&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Curl is one of those foundational libraries that we take for granted, but that influences our lives online. Following from a Webinar that discussed memory safety and the internet, Sean McArthur shares some of the key talking points from that webinar, which you can check out in the post &lt;a href="https://aws-oss.beachgeek.co.uk/pa"&gt;How using hyper in curl can help make the internet safer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VS Code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nick Ragusa has put together probably my most favourite blog post this week in , &lt;a href="https://aws-oss.beachgeek.co.uk/p4"&gt;Field Notes: Use AWS Cloud9 to Power Your Visual Studio Code IDE&lt;/a&gt;. In this blog post and walkthrough, he shows you how you can combine the power of AWS Cloud9 together with VS Code (which is also my day to day development tool) to overcome challenges such as disk space or CPU exhaustion. Very nice post. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--em6hr84i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2021/06/30/Visual-Studio-Ref-Architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--em6hr84i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2021/06/30/Visual-Studio-Ref-Architecture.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Flink&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/os"&gt;Get started with Flink SQL APIs in Amazon Kinesis Data Analytics Studio&lt;/a&gt; in this blog post, Sam Mokhtari and Mitesh Patel demonstrate different query patterns you can use to get insight from streaming data using Apache Flink SQL APIs. The post provides you with examples of Flink SQL queries that you can run within Kinesis Data Analytics Studio, so you can experiment for your self. [hands on]&lt;/p&gt;

&lt;p&gt;We also had this two part post, Build and optimise real-time stream processing pipeline with Amazon Kinesis Data Analytics for Apache Flink,&lt;a href="https://aws-oss.beachgeek.co.uk/p1"&gt;Part1&lt;/a&gt; &lt;a href="https://aws-oss.beachgeek.co.uk/p0"&gt;Part 2&lt;/a&gt; from Amit Chowdhury and Saurabh Shrivastava who show you how you can build a reliable, scalable, and highly available streaming application based on Apache Flink and Kinesis Data Analytics. They use the telemetry data of a taxi fleet in New York City in real time to optimise fleet operation. Whilst part one focused on getting this setup, part two dive deep into the things you need to look to ensure the health and performance of the Amazon Kinesis Data Analytics for Apache Flink application. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YiNkESYd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/06/29/bdb1482-1-image015.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YiNkESYd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/06/29/bdb1482-1-image015.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Kafka&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Joseph Morais, AWS Evangelist over at Confluent, in collaboration with Jobin George and Roberto Luna Rojas from AWS have put together this post, &lt;a href="https://aws-oss.beachgeek.co.uk/ot"&gt;Low Latency Real-Time Cache Updates with Amazon ElastiCache for Redis and Confluent Cloud Kafka&lt;/a&gt; that shows you how you can power a logistics and inventory system with microsecond read performance powered Redis and Apache Kafka (powered by Confluent Cloud) [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f3oR2tKX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/77de68daecd823babbb58edb1c8e14d7106e83bb/2021/06/29/Confluent-ElastiCache-Redis-4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f3oR2tKX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/77de68daecd823babbb58edb1c8e14d7106e83bb/2021/06/29/Confluent-ElastiCache-Redis-4.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MySQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;MySQL binlog replication is a popular feature serving multiple use cases, including offloading transactional work from a source database, replicating changes to a separate dedicated system to run analytics, and streaming data into other systems. In the post, &lt;a href="https://aws-oss.beachgeek.co.uk/p7"&gt;Introducing binlog I/O cache in Amazon Aurora MySQL to improve binlog performance&lt;/a&gt; Jae M. Kim shows you show performance improvements of the new binlog I/O cache introduced in the Aurora MySQL 2.10 release and explores its related monitoring metrics and status variables.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KVEZQ40E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/06/23/dbblog-1727_01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KVEZQ40E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/06/23/dbblog-1727_01.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this post &lt;a href="https://aws-oss.beachgeek.co.uk/ow"&gt;Reduce cost and boost throughput with Global Datastore for Amazon ElastiCache for Redis&lt;/a&gt; Shawn Wang, Asaf Porat Stoler, Itay Maoz, and Yehonatan Yulazari show you how you can use Redis (specifically some features available in Amazon ElastiCache for Redis) to reduce latency of data access for better geo-local performance, thanks to improvements made from Redis 6 that resulted in significant throughput improvements. Read on to find out more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7d6e3yuS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/06/25/dbblog1424-01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7d6e3yuS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/06/25/dbblog1424-01.png" alt="bench"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In another Redis post, Dirk Michel from MYCOM OSI together with Zach Gardner from AWS share the story of how they moved from self-managed Redis to using Amazon ElastiCache for Redis, including the benefits achieved, the migration journey, and the architectures involved. Read more in &lt;a href="https://aws-oss.beachgeek.co.uk/p5"&gt;MYCOM OSI Service Impact Engine migration to Amazon ElastiCache for Redis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J6ihVnPR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/06/30/dbblog1656-03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J6ihVnPR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/06/30/dbblog1656-03.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nextflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Genome Analysis Toolkit (GATK), is a BSD open source genomic analysis toolkit developed by the Data Sciences Platform team at the Broad Institute, that provides tools for genomic variant discover and genotyping. The blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/oz"&gt;Running GATK workflows on AWS: a user-friendly solution&lt;/a&gt; that was co-authored by Michael DeRan, Chris Friedline, Netsanet Gebremadhin at Diamond Age Data Science and Jenna Lang and Lee Pang from AWS, shows you how you can simplify how you run this on AWS using Nextflow, an open source bioinformatics workflow manager that enables the development of portable and reproducible workflows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---SDwGn9B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/c5b76da3e608d34edb07244cd9b875ee86906328/2021/06/24/Architecture-B-Workflow-infrastructure-using-FSx-for-Lustre-storage-deployed-with-Nextflow-Tower.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---SDwGn9B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/c5b76da3e608d34edb07244cd9b875ee86906328/2021/06/24/Architecture-B-Workflow-infrastructure-using-FSx-for-Lustre-storage-deployed-with-Nextflow-Tower.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The post links to a GitHub repository where you can find the resources you need to dive deeper. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RabbitMQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;RabbitMQ is an open-source message broker to which applications connect in order to transfer a message or messages between services. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/or"&gt;Using Amazon MQ for RabbitMQ as an event source for Lambda&lt;/a&gt; Talia Nassi shows you how to set up a RabbitMQ broker and networking configuration, and how to create a Lambda function that is invoked by messages from Amazon MQ RabbitMQ queues. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hugging Face&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hugging Face Transformers is a popular open-source project that I have written about in previous editions of this newsletter, and makes it super easy to use a variety of pre-trained, natural language processing (NLP) models for a wide variety of use cases. In the blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/p8"&gt;Hosting Hugging Face models on AWS Lambda for serverless inference&lt;/a&gt; Eddie Pick and Scott Perry have put together this solution that automatically provisions container image-based Lambda functions that perform ML inference using pre-trained Hugging Face models. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kbmod8Oq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2021/06/28/architecture-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kbmod8Oq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2021/06/28/architecture-1.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To add to that, Sai Sharanya Nalla and Kartik Kannapur put this post together last week, &lt;a href="https://aws-oss.beachgeek.co.uk/pq"&gt;Announcing managed inference for Hugging Face models in Amazon SageMaker&lt;/a&gt; where they discuss different methods to create a SageMaker endpoint for a Hugging Face model.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bottlerocket&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bottlerocket OS in an open source project that was built to provide a secure foundation for hosts running containers, minimising operational overhead to manage them at scale. In the blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/ox"&gt;Getting started with Bottlerocket and Amazon ECS&lt;/a&gt; Maish Saidel-Keesing walks you through how you can use Amazon ECS and Bottlerocket together to run your applications in a safe and secure manner.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JfP4g3S1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/07/06/image-2021-07-06T104447.977.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JfP4g3S1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/07/06/image-2021-07-06T104447.977.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We also had Narayana Vemburaj and Anjani Reddy post &lt;a href="https://aws-oss.beachgeek.co.uk/pv"&gt;Persistent Storage using EFS for EKS on Bottlerocket&lt;/a&gt; showing you how you can set up persistent storage with Amazon Elastic Kubernetes Service (Amazon EKS) clusters running on Bottlerocket OS with Amazon Elastic File System (Amazon EFS).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FByyNxsb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/07/02/EFS-Persistent-Diagram-19May.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FByyNxsb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/07/02/EFS-Persistent-Diagram-19May.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fluentd&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fluentd is a popular open source project for streaming logs from Kubernetes pods to different backends aggregators like CloudWatch. It is often used with the kubernetes_metadata filter, a plugin for Fluentd that enriches the logs with basic metadata such as the pod’s namespace, UUIDs, labels, and annotations. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/pb"&gt;Fluentd considerations and actions required at scale in Amazon EKS&lt;/a&gt;, Ugur Kira and Jeremy Cowan analyze the impact the plug-in has on the Kubernetes API and recommend how to optimally configure Fluentd and the kubernetes_metadata plug-in in large clusters. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XU4tCZsR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/06/22/image4-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XU4tCZsR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/06/22/image4-1.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenTelemetry&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Alolita Sharma and Nizar Tyrewalla announced the latest release of AWS Distro for OpenTelemetry, which you can read about in the post &lt;a href="https://aws-oss.beachgeek.co.uk/pr"&gt;AWS Distro for OpenTelemetry (ADOT) 0.11.0 is now available&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spinnaker&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Steve Borrelli and Rob Clark from Upbound, and Manabu McCloskey, Vikrant Kahlir, and Nima Kaviani from AWS collaborated on this post, &lt;a href="https://aws-oss.beachgeek.co.uk/pn"&gt;Declarative provisioning of AWS resources with Spinnaker and Crossplane&lt;/a&gt;. The post looks at the setup and configuration required for Spinnaker and Crossplane to work together. Crossplane is an open source project that allows teams to manage cloud resources in a Kubernetes-native way, which means you can provision and manage Amazon Simple Storage Service (Amazon S3) buckets, VPCs, databases, and Lambda functions in the same way you manage Pods, Ingresses, and StatefulSets. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Suricata&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Suricata is open-source network threat detection engine is capable of real-time intrusion detection (IDS), that also provides inline intrusion prevention (IPS), network security monitoring (NSM), and offline packet capture processing. AWS Network Firewall uses Suricata and in the blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/p9"&gt;Integrate AWS Network Firewall with your ISV Firewall Rulesets&lt;/a&gt; you can read from Mony Kiem, Frenil Randeria, and Ripunjaya Pattnaik how to operate a hybrid architecture using the same firewall and IPS rules for both your on-premises and cloud networks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ZohXua7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2021/06/23/Fig1-Firewall.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ZohXua7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2021/06/23/Fig1-Firewall.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Drupal&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/pw"&gt;Deploy serverless Drupal applications using AWS Fargate and Amazon EFS&lt;/a&gt; in this post, Shivkumar Rajendran, Ananth Vaidyanathan, and Prem Nambi show you how to build a highly available, cost-effective, scalable Drupal-based website on AWS Cloud. The architecture uses serverless compute, serverless storage, and a serverless database, with no infrastructure to manage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GV7OijvH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/e1822db470e60d090affd0956d743cb0e7cdf113/2021/07/08/Deploy-serverless-Drupal-using-AWS-Fargate-and-Amazon-EFS-architecture-diagram.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GV7OijvH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/e1822db470e60d090affd0956d743cb0e7cdf113/2021/07/08/Deploy-serverless-Drupal-using-AWS-Fargate-and-Amazon-EFS-architecture-diagram.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;RabbitMQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can now use the consistent hash exchange type on your Amazon MQ for RabbitMQ brokers. This exchange type uses consistent hashing to uniformly distribute messages across queues. Consistent hash exchanges are useful in applications like transaction processing to maintain the order of dependent messages while scaling up the number of consumers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS ParallelCluster&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS ParallelCluster is a fully supported and maintained open source cluster management tool that makes it easy for scientists, researchers, and IT administrators to deploy and manage High Performance Computing (HPC) clusters in the AWS cloud. HPC clusters are collections of tightly coupled compute, storage, and networking resources that enable customers to run large scale scientific and engineering workloads. Significant feature enhancements to this latest release of AWS ParallelCluster 2.11 include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for Ubuntu 20.04 Operating System - Customers can now choose Ubuntu 20.04 as their base operating system of choice to run their clusters for both x86 and Arm architectures&lt;/li&gt;
&lt;li&gt;FSx for Lustre in isolated subnets - Customers can now set up and mount an Amazon FSx for Lustre file system in AWS ParallelCluster without requiring public internet access. This gives customers an additional option for how they can help keep their HPC environments secure and isolated inside of AWS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Bottlerocket&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Announced last week was the General Availability of the Amazon ECS optimised Bottlerocket Amazon Machine Image (AMI). Bottlerocket is an open source Linux-based Operating System (OS) that is purpose-built to run containers. &lt;/p&gt;

&lt;p&gt;Bottlerocket only includes essential software that are required to run containers, helping customers significantly reduce the attack surface and impact of vulnerabilities. Bottlerocket’s root filesystem is read-only, backed by dm-verity. The kernel blocks all direct writes, and behind the scenes will detect any modification as corruption and reboot the host. It also comes with Security-Enhanced Linux (SELinux) policies enabled in enforcing mode for additional isolation. In addition to these security enhancements, updates to Bottlerocket are applied and rolled back in an atomic manner, reducing update complexity and failures.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS Client VPN now supports SAML based federated authentication for opening a VPN connection from a Linux Desktop Operating system (Ubuntu 64bit 18.04 and 20.04 LTS). The Linux Desktop client has feature parity with the existing Windows and macOS Desktop clients.&lt;/p&gt;

&lt;p&gt;AWS Client VPN allows you to choose from AWS VPN Desktop Client or OpenVPN-based clients, giving your employees the option to use the device of their choice.&lt;/p&gt;

&lt;p&gt;AWS Client VPN Desktop Clients are available free of charge, and can be downloaded &lt;a href="https://aws-oss.beachgeek.co.uk/oq"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Kafka&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS Lambda functions that are triggered from self-managed Apache Kafka topics can now access usernames and passwords secured by AWS Secrets Manager using SASL/PLAIN, a simple username/password authentication mechanism that is typically used with TLS for encryption to implement secure authentication. This is in addition to SASL/SCRAM, which is already supported on Lambda. To get started, customers who select Apache Kafka as the event source for their Lambda function can choose SASL/PLAIN as their authentication mechanism, and select their credentials from Secrets Manager on the AWS Management Console, AWS CLI or AWS SDK for Lambda.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MariaDB&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Relational Database Service (Amazon RDS) for MariaDB now supports MariaDB minor versions 10.2.37, 10.3.28, 10.4.18, and 10.5.9. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Developing Secure Open Source Software (OSS)&lt;/strong&gt; [FREE Event]&lt;br&gt;
&lt;strong&gt;July 20th, 9:30 – 11:00am PDT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;David Wheeler, Director of Open Source Supply Chain Security at The Linux Foundation will discuss steps you can take to develop more secure OSS and evaluate OSS for security.&lt;/p&gt;

&lt;p&gt;Read more and &lt;a href="https://aws-oss.beachgeek.co.uk/pm"&gt;register here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ML Dev Day Live Workshop&lt;/strong&gt; [FREE Event]&lt;br&gt;
&lt;strong&gt;July 21st 9:00am PDT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Learn how to build highly scalable and reliable pipelines for analytics using open source technologies such as Apache Spark, Delta Lake and open source machine learning frameworks such as TensorFlow, XGBoost, scikit-learn and MLFlow.&lt;/p&gt;

&lt;p&gt;Read more and &lt;a href="https://aws-oss.beachgeek.co.uk/pl"&gt;register here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud Native Day&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;23rd September, Bern Switzerland&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What is this, an in person event returning? A stellar line up including our own Michael Hausenblas, an event looking at CNCF projects and the future of IT. Find out more and to view prices/register, by clicking &lt;a href="https://cloudnativeday.ch/en/#speakers"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on [@AWSOpen](&lt;a href="https://twitter.com/AWSOpen"&gt;https://twitter.com/AWSOpen&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>RequestAnimationFrame in JavaScript</title>
      <author>Suprabha</author>
      <pubDate>Mon, 12 Jul 2021 06:58:25 +0000</pubDate>
      <link>https://dev.to/suprabhasupi/requestanimationframe-in-javascript-n12</link>
      <guid>https://dev.to/suprabhasupi/requestanimationframe-in-javascript-n12</guid>
      <description>&lt;p&gt;&lt;span&gt;U&lt;/span&gt;sing the native requestAnimationFrame method we can make our browser repeat something very quickly forever. It calls itself to paint the next frame.&lt;/p&gt;

&lt;p&gt;📝 Note: Your callback routine must itself call &lt;strong&gt;requestAnimationFrame()&lt;/strong&gt; again if you want to animate another frame at the next repaint. requestAnimationFrame() is 1 shot.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;requestAnimationFrame&lt;/strong&gt; takes one argument, only callback.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;u&gt;Syntax:&lt;/u&gt;&lt;/b&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;callback&lt;/strong&gt;: The function to call when it's time to update your animation for the next repaint.&lt;/p&gt;

&lt;p&gt;Animations with &lt;strong&gt;requestAnimationFrame&lt;/strong&gt; are non-blocking, which means if you make subsequent calls to &lt;strong&gt;requestAnimationFrame&lt;/strong&gt;, the resulting animations will all occur at  same time.&lt;/p&gt;

&lt;p&gt;The goal is &lt;strong&gt;60 frame per second(fps)&lt;/strong&gt; to appear smooth animation.&lt;/p&gt;

&lt;p&gt;So we do like this 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// animation code&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But now we have &lt;strong&gt;requestAnimationFrame&lt;/strong&gt;, which is more better and optimized:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Animations will be so smooth as its optimized&lt;/li&gt;
&lt;li&gt;Animations in inactive tabs will stop, allowing the CPU to chill&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's see how can we create the above snippet using requestAnimationFrame&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;smoothAnimation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// animtion&lt;/span&gt;
    &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;smoothAnimation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;smoothAnimation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-can-you-start-and-stop-animation"&gt;
  &lt;/a&gt;
  How can you start and stop animation ⏲️
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;requestAnimationFrame&lt;/strong&gt; returns an ID you can use to cancel it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;reqAnimationId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;smoothAnimation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// animtion&lt;/span&gt;
    &lt;span class="nx"&gt;reqAnimationId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;smoothAnimation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// to start&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;reqAnimationId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;smoothAnimation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// to end&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;cancelAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reqAnimationId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;reqAnimationId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reqAnimationId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Checkout the &lt;strong&gt;codepen&lt;/strong&gt; here for more details:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/suprabhasupi/embed/dyWpBJd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference 🧐
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame"&gt;MDN Docs of requestAnimationFrame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/"&gt;requestAnimationFrame by paulirish&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#summary-%E2%88%91"&gt;
  &lt;/a&gt;
  Summary ∑
&lt;/h2&gt;

&lt;p&gt;If you do any animation on browser and wanted it to be optimised, then would highly recommend to use requestAnimationFrame web API.&lt;/p&gt;

&lt;p&gt;Thanks for reading the article ❤️&lt;br&gt;
I hope you love the article.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/suprabhasupi"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDe0OdcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/4t25pJE.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
        🌟 &lt;a href="https://twitter.com/suprabhasupi"&gt; Twitter&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        👩🏻‍💻 &lt;a href="https://www.suprabha.me/"&gt; suprabha.me&lt;/a&gt;
      &lt;/td&gt;
&lt;td&gt;
        🌟 &lt;a href="https://www.instagram.com/suprabhasupi/"&gt; Instagram&lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>10 Steps To Secure Your Cloud</title>
      <author>Aditya Gaur</author>
      <pubDate>Mon, 12 Jul 2021 06:19:40 +0000</pubDate>
      <link>https://dev.to/aws-builders/10-steps-to-secure-your-cloud-2mhn</link>
      <guid>https://dev.to/aws-builders/10-steps-to-secure-your-cloud-2mhn</guid>
      <description>&lt;p&gt;In the realm of cloud computing, security is something that possesses duality. Duality in the sense, for example, for some incumbents, security must have been the need that made them adopt cloud whereas for some people it might be a concern hence they are still hesitant to step into the cloud. But what’s the reality? Is the cloud really unsecure or is it more secure?&lt;/p&gt;

&lt;p&gt;Actually, it’s nothing like that. In simple words, security is a shared responsibility in the world of cloud computing. You must have heard the term ‘Shared Responsibility Model’, if not then you can search about it on the web. On a very high level, it clearly states that maintaining the security of cloud is a responsibility of the cloud service provider while maintaining security in the cloud is a responsibility of the customer. And if we dig deep into it there are different perimeters defined for different services across different service models in different cloud platforms.&lt;/p&gt;

&lt;p&gt;Let me break it down for you in simple words to just have a gist of it. Suppose you’ve put your jewellery in a bank locker and the bank has given you a password for the locker. Now it’s the responsibility of the bank to take care of your things. The bank will ensure that the physical security, proper access management, authorization, etc are in place or not. You’ve just shared your responsibilities with your bank. If it hasn’t been like this then you’d have to take care of all the things on your own. i.e., you’d have to keep your jewellery at your home and then protect it. Now after putting it into the locker, the only thing that you’ve to take care of is the password that they’ve given to you. It’s nearly impossible for someone to gain access to your stuff even if she or he has your password but still, we shouldn’t share our passwords with anyone.&lt;/p&gt;

&lt;p&gt;Now I hope you’ve got a basic understanding of the shared responsibility model. Let’s come back to the cloud. In cloud, you don’t have to worry about the things that cloud service providers are required to take care of. You just have to take care of the things which are on your platter. But the problem is security is not getting enough attention. Also, there’s a blurry line between the shared responsibilities. In this article, I’ve tried to list out some generic steps that would help to maintain security in the cloud. I’ve taken AWS for the sake examples but the principles are almost the same across all the clouds.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get familiar with your account and don’t miss out leveraging existing security features&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to protect your cloud, you got to be familiar with your account, as it’s a door to your cloud. It happens quite often that we forget to implement or enable the security features that the Cloud Service Providers provide to us.&lt;/p&gt;

&lt;p&gt;For example, you can find the best practices and security alerts in your IAM dashboard in AWS. So, it’s not something that should be ignored, instead if implemented all those things will enhance your security.&lt;/p&gt;

&lt;p&gt;Service(s): AWS IAM&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enhance your authentication&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, you’ve protected your door but what about the lock? Yes, I’m talking about the authentication. Organizations with their workload on cloud ought to have a strong authentication mechanism. Enhance your authentication with Multi-Factor Authentication. And in that too, avoid using security questions or text messages. Use of genuine Authenticator Applications is recommended. Hardware MFA Devices can be used as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/iam/features/mfa/"&gt;https://aws.amazon.com/iam/features/mfa/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Service(s): AWS IAM&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Say no to hard-coded secrets and transmission of unencrypted sensitive information&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes programmers leave access keys exposed in the plain format in code that can become a risk of compromise. And it might happen that due to some security misconfiguration, that some sensitive information in transit is unprotected. Hence, we should avoid hard-coded secrets and we must encrypt all of our sensitive data in transit.&lt;/p&gt;

&lt;p&gt;For example, you can use your IAM Credentials to authenticate into your RDS instance instead of the traditional authentication methods.&lt;/p&gt;

&lt;p&gt;Click the link given below to know more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/users-connect-rds-iam/"&gt;https://aws.amazon.com/premiumsupport/knowledge-center/users-connect-rds-iam/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And to encrypt the data in transit, AWS Certificate Manager can be used.&lt;/p&gt;

&lt;p&gt;Also, you can even encrypt a connection to a DB Instance.&lt;/p&gt;

&lt;p&gt;Click the link given below to know more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html"&gt;https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Service(s): AWS Certificate Manager&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implement proper access controls&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Grant access to the users in your organization on the basis of least privilege or need to know basis. Define proper segregation between workloads &amp;amp; networks and use tags wherever possible. Through these practices, it’d be easy to manage your resources and keep them secure.&lt;/p&gt;

&lt;p&gt;Service(s): AWS IAM&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Protect your storage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AWS S3 uses buckets to store date inside. You can even use these buckets to host data on your website(s). And for that you’d have to allow the public access to the bucket. Now in some cases, you might have your sensitive information residing in the same bucket for which you’ve allowed the public access. This can compromise your data. So, it’s very important to disable the public access for your sensitive objects or buckets. Same goes with the CORS configuration, use it as per your requirements. Also, do not forget to implement encryption for your data at rest. There are many ways to encrypt your data in S3.&lt;/p&gt;

&lt;p&gt;Click the link given below to know more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingEncryption.html"&gt;https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingEncryption.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Service(s): Amazon S3, AWS KMS&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Centralize your logs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Logs are very necessary to keep an eye on your workloads. They can have many applications, but in security perspective it’s very important to have the logs of critical actions, operations, access attempts to your critical resources etc. Maintaining logs is one side of a coin, the other side is to review them and fetch out the relevant information. At the same time, consolidating your logs from multiple sources at a single place makes the reviewing process much easier.&lt;/p&gt;

&lt;p&gt;In AWS, Always store the access logs of your S3 bucket in a different bucket, otherwise it’ll create an infinite series of events that can cause trouble.&lt;/p&gt;

&lt;p&gt;Service(s): AWS CloudTrail, AWS CloudWatch, Amazon S3&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Review and Validate your , Roles, Security Groups &amp;amp; NACLs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As discussed above, it’s good to have a proper access control for your organization. But it should be a consistent effort. It might happen that the admin forgot to revoke access granted to someone for a limited period of time, or to delete the access keys that are no longer in use. There can be many such cases, hence it’s important to keep reviewing &amp;amp; validating your Roles, Security Groups &amp;amp; NACLs.&lt;/p&gt;

&lt;p&gt;Service(s): AWS IAM, Amazon EC2, Amazon VPC&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be proactive with security findings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CSPs offer many services that will help you to keep your cloud secure, like Amazon Macie, Amazon Inspector in AWS &amp;amp; Azure Security Center in Azure, etc. Do leverage these services as they offer quite flexible and efficient features over the other third-party tools available in the market.&lt;/p&gt;

&lt;p&gt;Along with that, it’s very important to take actions on the security findings these tools show, otherwise they won’t be of any good.&lt;/p&gt;

&lt;p&gt;Service(s):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/products/security/"&gt;https://aws.amazon.com/products/security/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don’t forget to rotate your keys&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’ve protected the door, the lock but what about the keys? It’s always a good practice to keep rotating your keys i.e., changing your keys. You can also automate the process to rotate your keys at regular period of intervals. And in fact, a lot of compliance standards demands the same thing.&lt;/p&gt;

&lt;p&gt;Services: AWS KMS, AWS IAM&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make security a habit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even after implementing all the required security services and incorporating the best practices, you just can’t sit idle, as I mentioned security is a consistent effort. So, it’s always good to make security a habit. It can be a burden sometimes, but it’s always worth the risk, depending upon your risk appetite. So, whenever performing any operation whether it’s a tiny one like deploying an virtual instance or huge like migrating your entire workload to cloud, keep security in mind.&lt;/p&gt;

&lt;p&gt;Stay safe, Stay Secure!&lt;/p&gt;

&lt;p&gt;Thank you! :)&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>security</category>
    </item>
    <item>
      <title>Implement your own Promises in JavaScript</title>
      <author>Shubham Khatri</author>
      <pubDate>Mon, 12 Jul 2021 06:18:42 +0000</pubDate>
      <link>https://dev.to/skhatri/implement-your-own-promises-in-javascript-45cg</link>
      <guid>https://dev.to/skhatri/implement-your-own-promises-in-javascript-45cg</guid>
      <description>&lt;p&gt;Promises are one of the most fundamental concepts in JavaScript that all of us have used many times in our applications but can we implement our own Promise API? &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Don’t worry it is not as complicated as it looks&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;In this post, we will implement a basic Promise API ourselves.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-promise"&gt;
  &lt;/a&gt;
  What is a Promise?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;&lt;strong&gt;Promise&lt;/strong&gt;&lt;/a&gt; object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It can be in one of the three states:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;PENDING, initial state when an operation is in progress&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FULFILLED, define that the operation was successful&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;REJECTED, denotes a failure in an operation&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: A promise is said to be &lt;strong&gt;settled&lt;/strong&gt; when it is either fulfilled or rejected. (we are going to use this term a lot in this article)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#how-do-you-use-a-promise"&gt;
  &lt;/a&gt;
  How do you use a Promise?
&lt;/h3&gt;

&lt;p&gt;Let’s first look at its skeleton for implementing promises, essentially the input it takes, and the methods it exposes.&lt;/p&gt;

&lt;p&gt;It has a constructor function that takes a callback, and methods like then, catch, and finally.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="cm"&gt;/*
     Your code logic goes here and you call  resolve(value)
     or reject(error) to resolve or reject the promise
   */&lt;/span&gt; 
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// Code logic on success of an operation&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Code logic on failure of an operation&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Code logic to be executed after completion of operation&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#1-defining-the-skeleton"&gt;
  &lt;/a&gt;
  1. Defining the skeleton
&lt;/h2&gt;

&lt;p&gt;We start by defining our Promise class &lt;strong&gt;MyPromise&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#following-properties-are-defined-in-the-constructor"&gt;
  &lt;/a&gt;
  Following properties are defined in the constructor:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;state&lt;/code&gt;: can be either be &lt;code&gt;PENDING&lt;/code&gt;, &lt;code&gt;FULFILLED&lt;/code&gt; or &lt;code&gt;REJECTED&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;handlers&lt;/code&gt;: stores callbacks of then, catch, finally methods. &lt;em&gt;(Handlers will only be executed when a promise is settled.)&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;value&lt;/code&gt; : resolve or rejected value.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: A promise is executed as soon as it is created, which means our promise callback function will be called inside the constructor with &lt;code&gt;reject&lt;/code&gt;and &lt;code&gt;resolve&lt;/code&gt;methods passed as parameters to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;STATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;PENDING&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PENDING&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;FULFILLED&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FULFILLED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;REJECTED&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;REJECTED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyPromise&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Initial state of Promise is empty&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;STATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PENDING&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handlers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
      &lt;span class="c1"&gt;// Invoke callback by passing the _resolve and the _reject function of our class&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_reject&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;_resolve&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="nx"&gt;_reject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onFail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onFail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-resolve-and-reject-method-implementation"&gt;
  &lt;/a&gt;
  2. _resolve() and _reject() method implementation
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;_resolve()&lt;/code&gt;or &lt;code&gt;_reject()&lt;/code&gt; set the &lt;code&gt;state&lt;/code&gt; of promise to &lt;code&gt;FULFILLED&lt;/code&gt; or &lt;code&gt;REJECTED&lt;/code&gt; respectively, updates the &lt;code&gt;value&lt;/code&gt; property and executes the attached handlers.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Nothing happens if we try to call &lt;code&gt;_resolve()&lt;/code&gt; or &lt;code&gt;_reject()&lt;/code&gt; on an already settled Promise.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;_resolve&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;STATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FULFILLED&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;_reject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;STATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REJECTED&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;updateResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This is to make the processing async&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="cm"&gt;/*
        Process the promise if it is still in a pending state. 
        An already rejected or resolved promise is not processed
      */&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;STATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PENDING&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="c1"&gt;// check is value is also a promise&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isThenable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_reject&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="c1"&gt;// execute handlers if already attached&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;executeHandlers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wondering what is &lt;code&gt;isThenable(value)&lt;/code&gt; in the above code?&lt;/p&gt;

&lt;p&gt;Well for a case where a Promise is resolved/rejected with another promise, we have to wait for it to complete and then process our current Promise.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#isthenable-function-implementation"&gt;
  &lt;/a&gt;
  isThenable() function implementation
&lt;/h3&gt;

&lt;p&gt;An &lt;code&gt;isThenable&lt;/code&gt;function checks if value is an instance of &lt;code&gt;MyPromise&lt;/code&gt; or it is an object containing a &lt;code&gt;then&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isThenable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;MyPromise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// or&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isThenable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-then-method-implementation"&gt;
  &lt;/a&gt;
  3. then() method implementation
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;then()&lt;/code&gt; method takes two arguments as callbacks &lt;code&gt;onSuccess&lt;/code&gt; and &lt;code&gt;onFail&lt;/code&gt;. &lt;code&gt;onSuccess&lt;/code&gt; is called if Promise was fulfilled and &lt;code&gt;onFail&lt;/code&gt; is called if Promise was rejected.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;“Remember that Promises can be chained”.&lt;/strong&gt;&lt;br&gt;
The essence of &lt;strong&gt;Promise chaining&lt;/strong&gt; is that the &lt;code&gt;then()&lt;/code&gt; method returns a &lt;strong&gt;new Promise object&lt;/strong&gt;. That is how promises can be chained. This is especially useful in scenarios where we need to execute two or more asynchronous operations back to back, where each subsequent operation starts when the previous operation succeeds, with the result from the previous step.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Callbacks passed to &lt;code&gt;then()&lt;/code&gt; are stored in &lt;code&gt;handlers&lt;/code&gt; array using &lt;code&gt;addHandlers&lt;/code&gt; function. A handler is an object &lt;code&gt;{onSuccess, onFail}&lt;/code&gt; which will be executed when a promise is settled.&lt;/p&gt;

&lt;p&gt;Our implementation of &lt;code&gt;then()&lt;/code&gt; looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onFail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MyPromise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rej&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHandlers&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// if no onSuccess provided, resolve the value for the next promise chain&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;rej&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;onFail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// if no onFail provided, reject the value for the next promise chain&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;onFail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;rej&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onFail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;rej&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;addHandlers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;executeHandlers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;executeHandlers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Don't execute handlers if promise is not yet fulfilled or rejected&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;STATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PENDING&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// We have multiple handlers because add them for .finally block too&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;STATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FULFILLED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onFail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="c1"&gt;// After processing all handlers, we reset it to empty.&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handlers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-catch-method-implementation"&gt;
  &lt;/a&gt;
  4. catch() method implementation
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;catch()&lt;/code&gt; is implemented using &lt;code&gt;then()&lt;/code&gt;. We call &lt;code&gt;then()&lt;/code&gt; method with the &lt;code&gt;onSuccess&lt;/code&gt; callback as &lt;code&gt;null&lt;/code&gt; and pass &lt;code&gt;onFail&lt;/code&gt; callback as second argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
    &lt;span class="cm"&gt;/*
        Since then method take the second function as onFail, 
        we can leverage it while implementing catch
    */&lt;/span&gt;
    &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onFail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onFail&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-finally-method-implementation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. finally() method implementation&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Before we start implementing the &lt;code&gt;finally()&lt;/code&gt; method, let us understand its behaviour first &lt;em&gt;(Took me sometime to understand it myself)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;From MDN docs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;finally()&lt;/code&gt; method returns a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;. When the promise is settled, i.e either fulfilled or rejected, the specified callback function is executed. This provides a way for code to be run whether the promise was fulfilled successfully or rejected once the &lt;code&gt;Promise&lt;/code&gt; has been dealt with.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;finally()&lt;/code&gt; method is very similar to calling &lt;code&gt;.then(onFinally, onFinally)&lt;/code&gt; however there are a couple of differences:&lt;/p&gt;

&lt;p&gt;When creating a function inline, you can pass it once, instead of being forced to either declare it twice, or create a variable for it&lt;/p&gt;

&lt;p&gt;Unlike &lt;code&gt;Promise.resolve(2).then(() =&amp;gt; {}, () =&amp;gt; {})&lt;/code&gt; (which will be resolved with &lt;code&gt;undefined&lt;/code&gt;), &lt;code&gt;Promise.resolve(2).finally(() =&amp;gt; {})&lt;/code&gt; will be resolved with &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Similarly, unlike &lt;code&gt;Promise.reject(3).then(() =&amp;gt; {}, () =&amp;gt; {})&lt;/code&gt; (which will be fulfilled with &lt;code&gt;undefined&lt;/code&gt;), &lt;code&gt;Promise.reject(3).finally(() =&amp;gt; {})&lt;/code&gt; will be rejected with &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;finally()&lt;/code&gt; method returns a Promise which will be settled with previous &lt;code&gt;fulfilled&lt;/code&gt; or &lt;code&gt;rejected&lt;/code&gt; value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;// Finally block returns a promise which fails or succeedes with the previous promise resove value&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MyPromise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rej&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;wasRejected&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="nx"&gt;wasRejected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
           &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
           &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
         &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="nx"&gt;wasRejected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
           &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
           &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
         &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="c1"&gt;// If the callback didn't have any error we resolve/reject the promise based on promise state&lt;/span&gt;
           &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;wasRejected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt; 
           &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;rej&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check out the full code implementation in the codepen below:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mayank_shubham/embed/abpEVJK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;We emulated the basic implementation of Promises. There is a lot more to it than &lt;code&gt;then()&lt;/code&gt;, &lt;code&gt;catch()&lt;/code&gt;, &lt;code&gt;finally()&lt;/code&gt; methods which are the instance methods. There are static methods as well which I will try to cover in my future posts.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed the article.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Thank you for reading...&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have any suggestions or questions, please feel free to comment or &lt;a href="https://twitter.com/mayank_shubham"&gt;DM me on Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Kubernetes in simple words: explained by Eric Swildens</title>
      <author>nimbella</author>
      <pubDate>Mon, 12 Jul 2021 06:14:00 +0000</pubDate>
      <link>https://dev.to/nimbella/kubernetes-in-simple-words-explained-by-eric-swildens-52j</link>
      <guid>https://dev.to/nimbella/kubernetes-in-simple-words-explained-by-eric-swildens-52j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#find-the-answers-to-the-most-commonly-asked-questions-related-to-kubernetes-k8s-explained-simply"&gt;
  &lt;/a&gt;
  Find the answers to the most commonly asked questions related to Kubernetes (k8s) explained simply.
&lt;/h2&gt;

&lt;p&gt;In this blog post, Eric Swildens, Co-founder and Chief Architect at Nimbella, will explain Kubernetes and answer the most commonly asked questions in simple words that can be easily understood by junior developers, DevOps specialists, and even non-tech professionals.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#questions-that-have-been-answered-in-this-blog-post"&gt;
  &lt;/a&gt;
  Questions that have been answered in this blog post
&lt;/h2&gt;

&lt;p&gt;If you want to know what is Kubernetes and why is it so trendy, check out the next most common FAQ’s we have answered here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Kubernetes in simple words, using real-life examples.&lt;/li&gt;
&lt;li&gt;How is Kubernetes different from Docker?&lt;/li&gt;
&lt;li&gt;What are Kubernetes clusters?&lt;/li&gt;
&lt;li&gt;What are some benefits of using Kubernetes?&lt;/li&gt;
&lt;li&gt;What are some products built on top of Kubernetes?&lt;/li&gt;
&lt;li&gt;What are some good ways of learning Kubernetes?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#first-and-most-important-what-is-kubernetes"&gt;
  &lt;/a&gt;
  First and most important: what is Kubernetes?
&lt;/h3&gt;

&lt;p&gt;Let us explain it in very simple words:&lt;/p&gt;

&lt;p&gt;Kubernetes is a system that manages containers (containerized applications) where a container could be explained as a lightweight virtual machine. To build an application you need to build a bunch of containers and then use Kubernetes to manage those containers. This sounds like something very difficult and time-consuming, but the advantage is that &lt;strong&gt;Kubernetes can create and scale containers automatically and manage storage among all the containers.&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BzxAlLBv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gx7vkq2g6hhsu1hfpwln.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BzxAlLBv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gx7vkq2g6hhsu1hfpwln.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Source &lt;a href="https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/"&gt;Kubernetes.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Suppose you are trying to build a company. You need multiple departments to run the company: CFO, call center, engineering team, marketing, sales, etc. Think of them as different kinds of containers. So Kubernetes has a file which has the description of all the containers and how they work together: sales work with marketing and marketing work with engineering and this is how everybody talks to each other. Then you tell Kubernetes to execute it, hire all “containers” and if one of them fails it will restart it and redo it.&lt;br&gt;
That's a simple explanation of what Kubernetes is.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To get a broader picture about Kubernetes and get more information we suggest some resources to read and watch:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Latest Cloud Native Foundation surveys &lt;a href="https://github.com/cncf/surveys"&gt;https://github.com/cncf/surveys&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Google Cloud Tech Video: &lt;a href="https://youtu.be/cC46cg5FFAM"&gt;https://youtu.be/cC46cg5FFAM&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#kubernetes-and-docker-how-do-they-work-together"&gt;
  &lt;/a&gt;
  Kubernetes and Docker: how do they work together
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#what-is-docker"&gt;
  &lt;/a&gt;
  What is Docker?
&lt;/h4&gt;

&lt;p&gt;Docker is a container engine that is used to create containers. Let’s make it even more simple: &lt;em&gt;Docker is a type of container and Kubernetes manages (deploys) Docker Containers or other types of containers.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For example, you built a web search application and you have a container that contains a web server. When visitors connect to your website, they connect to the web server in the container to get content. Let’s say a lot of visitors start connecting to your web server.&lt;/p&gt;

&lt;p&gt;Kubernetes can identify the increased traffic and &lt;strong&gt;&lt;em&gt;create another container containing another web server&lt;/em&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Kubernetes can restart a container as it fails, kills a container if it doesn't work, can do rollouts, put more containers and manage the &lt;a href="https://www.aquasec.com/cloud-native-academy/kubernetes-101/kubernetes-networking/"&gt;networking for containers&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-kubernetes-cluster"&gt;
  &lt;/a&gt;
  What is a Kubernetes cluster?
&lt;/h3&gt;

&lt;p&gt;A Kubernetes system with a full set of Kubernetes components is called a &lt;strong&gt;cluster&lt;/strong&gt;. The cluster can run on actual physical machines (such as PCs or laptops) or as virtual machines. If you just have one machine and it’s running a full Kubernetes system then that is your Kubernetes cluster, and if you have two machines that are running the Kubernetes, those two machines host your Kubernetes cluster. The cluster can run on any combination of virtual and physical machines.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-benefits-of-using-kubernetes"&gt;
  &lt;/a&gt;
  What are the benefits of using Kubernetes?
&lt;/h3&gt;

&lt;p&gt;If you need just one container for your application there is no benefit of using Kubernetes. For example, if you have one employee in a company, there is no reason to have a company. You can just have that one employee work on his own and that's exactly similar to Kubernetes. So if you are a company and you have sales, engineering, and all the other departments, then you need to hire people and you also need &lt;strong&gt;&lt;em&gt;to manage&lt;/em&gt;&lt;/strong&gt; them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#kubernetes-allows-you-to-manage-multiple-containers-scale-up-scale-down-and-restart-them"&gt;
  &lt;/a&gt;
  &lt;em&gt;Kubernetes allows you to manage multiple containers, scale up, scale down and restart them.&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;Here are some of the benefits that Kubernetes offers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Kubernetes does load balancing when there is too much traffic.&lt;/li&gt;
&lt;li&gt;Kubernetes helps you do some storage stuff with a disc.&lt;/li&gt;
&lt;li&gt;Kubernetes eliminates many of the manual processes involved in deploying and scaling containerized applications and standardizes them.&lt;/li&gt;
&lt;li&gt;Kubernetes orchestration allows you to build application services that span multiple containers, schedule containers across a cluster, scale those containers, and manage their health over time.&lt;/li&gt;
&lt;li&gt;Kubernetes &lt;a href="https://medium.com/velotio-perspectives/demystifying-high-availability-in-kubernetes-using-kubeadm-3d83ed8c458b"&gt;High-Availability&lt;/a&gt; is another benefit because if something fails, it will replace it and restart over.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#reallife-examples-of-kubernetes-in-more-detail"&gt;
  &lt;/a&gt;
  Real-life examples of Kubernetes in more detail
&lt;/h3&gt;

&lt;p&gt;When you are developing an application, you need&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a database&lt;/li&gt;
&lt;li&gt;a specialized server that you develop&lt;/li&gt;
&lt;li&gt;a web server to look at the webpage.&lt;/li&gt;
&lt;li&gt;a machine to run everything.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The first problem&lt;/strong&gt; arrives when your traffic starts drastically growing. If it runs on a physical machine then the solution would be &lt;strong&gt;to get another machine&lt;/strong&gt;, install the operating system on it and put all the stuff on it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The second problem&lt;/strong&gt; that you possibly need to solve - &lt;strong&gt;load balancing&lt;/strong&gt;. The solution would be to get a load balancer.&lt;br&gt;
Imagine that now we are getting more traffic so &lt;strong&gt;we fire up four more machines&lt;/strong&gt;. If you manage that manually &lt;strong&gt;then you have to do a lot of work&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So this is where Kubernetes comes in:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You install Kubernetes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You describe processes and applications and:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if you have four machines it uses all four machines.&lt;/li&gt;
&lt;li&gt;If you have 16 machines, it uses all 16 machines.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you need another Kubernetes cluster, you shall have a description of how to deploy on Kubernetes and it would deploy it on the other cluster.&lt;/p&gt;

&lt;p&gt;So Kubernetes allows you to create &lt;strong&gt;&lt;em&gt;scalable&lt;/em&gt;&lt;/strong&gt; web applications and use all sorts of different resources that are composed of different components.&lt;/p&gt;

&lt;p&gt;So as a business case, you want to standardize how your application is deployed and developed and this is the way of describing all the services and processes that you need. Then you use a scalable system called - Kubernetes.&lt;/p&gt;

&lt;p&gt;To give you an idea of how big these things can get and answer the next question:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-some-worldwide-famous-products-built-on-top-of-kubernetes"&gt;
  &lt;/a&gt;
  What are some worldwide famous products built on top of Kubernetes?
&lt;/h3&gt;

&lt;p&gt;Some well-known applications that are currently using Kubernetes are the following.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#netflix"&gt;
  &lt;/a&gt;
  Netflix
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Let’s take the example of Netflix.&lt;/strong&gt; Netflix &lt;a href="https://netflixtechblog.com/titus-the-netflix-container-management-platform-is-now-open-source-f868c9fb5436"&gt;launches half a million containers and 200k clusters per day&lt;/a&gt;. It has grown from thousands of containers launched per week to three million launched per week. It hosts thousands of applications globally over these machines and they are deployed on virtual machines. Imagine having to manage all this manually 🤒🤒🤒. So such a size of workload is usually managed on Kubernetes.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#spotify"&gt;
  &lt;/a&gt;
  Spotify
&lt;/h4&gt;

&lt;p&gt;The next example is Spotify, a well-known audio streaming and media services provider with over 200 million users worldwide. The biggest service currently running on Kubernetes takes about 10 million requests per second as an aggregate service and benefits greatly from autoscaling, &lt;a href="https://kubernetes.io/case-studies/spotify/"&gt;says Site Reliability Engineer James Wen.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Plus, he adds, "Before, teams would have to wait for an hour to create a new service and get an operational host to run it in production, but with Kubernetes, they can do that on the order of seconds and minutes." In addition, with Kubernetes's bin-packing and multi-tenancy capabilities, CPU utilization has improved on average two- to threefold.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#adidas"&gt;
  &lt;/a&gt;
  Adidas
&lt;/h4&gt;

&lt;p&gt;Another example is Adidas. Currently, &lt;a href="https://kubernetes.io/case-studies/adidas/"&gt;100% of the Adidas e-commerce sites&lt;/a&gt; are running on Kubernetes. With 4,000 pods, 200 nodes, and 80,000 builds per month, Adidas is now running 40% of its most critical, impactful systems on its cloud-native platform.&lt;/p&gt;

&lt;p&gt;They drastically speed up the load time and releases went from every 4-6 weeks to 3-4 times a day. With Kubernetes, they solved the problem of getting quick access to all developer tools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#kubernetes-made-easy-has-a-name-nimbella"&gt;
  &lt;/a&gt;
  Kubernetes made easy has a name: Nimbella
&lt;/h2&gt;

&lt;p&gt;However, Kubernetes is a bit complex: &lt;strong&gt;if you are a developer and you want to run some code in Kubernetes, you have to figure out the&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://kubernetes.io/"&gt;orchestration&lt;/a&gt;&lt;/strong&gt; &lt;strong&gt;and learn more.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In such a case Nimbella could offer &lt;a href="https://nimbella.com/blog/simplifying-kubernetes-for-developers"&gt;ease of development&lt;/a&gt;, so that means you get the benefits of Kubernetes without the hassle of having to go in-depth into it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xBHSG5z6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xgc3inqlii8mbm5ssmm0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xBHSG5z6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xgc3inqlii8mbm5ssmm0.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's the way Nimbella works and what &lt;a href="https://nimbella.com/blog/what-is-nimbella-and-what-does-it-offer"&gt;Nimbella offers&lt;/a&gt;. That's called scale to zero. In Kubernetes, that's not true. You have all these containers and even if nothing is going early-stage on, containers are still taking up resources.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nimbella Serverless Platform offers: Here's the code, use our&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://docs.nimbella.com/install/"&gt;CLI&lt;/a&gt;&lt;/strong&gt; &lt;strong&gt;and run it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If ten people have to run it, then make a bunch of containers so &lt;em&gt;there is enough to run them all&lt;/em&gt;. And once they are done, &lt;em&gt;get rid of the containers&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;And the last question for this blog:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-some-good-ways-of-learning-kubernetes"&gt;
  &lt;/a&gt;
  What are some good ways of learning Kubernetes?
&lt;/h3&gt;

&lt;p&gt;YouTube videos are one of the best ways. There are many tutorials and videos available.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We recommend some channels and specific videos:&lt;/strong&gt;&lt;br&gt;
Google Cloud Tech Youtube channel:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/cC46cg5FFAM"&gt;What is Kubernetes?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/_2fiMli8p3E"&gt;How to run containers on Kubernetes&lt;/a&gt;
TechWorld with Nana Youtube channel:&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/X48VuDVv0do"&gt;Kubernetes tutorial for beginners (4 hours crash course)&lt;/a&gt;
IBM Cloud Youtube channel:&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/aSrqRSk43lY"&gt;Kubernetes Explained&lt;/a&gt;
Then you can use Kubernetes on Google and Amazon. They all have Kubernetes clusters. Use those clusters and get started instead of deploying your own Kubernetes cluster, which can be a lot of work.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#over-to-you-kubernetes-is-hard-but-worth-the-pain"&gt;
  &lt;/a&gt;
  Over to you: Kubernetes is hard - but worth the pain
&lt;/h2&gt;

&lt;p&gt;In conclusion, we would like to share some highlights from the &lt;a href="https://www.cncf.io/wp-content/uploads/2020/11/CNCF_Survey_Report_2020.pdf"&gt;CNFC 2020 Survey&lt;/a&gt; and the perspective of Kubernetes to grow.&lt;/p&gt;

&lt;p&gt;The survey cities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The use of containers in production has increased to 92%, up from 84% last year, and up 300% from our first survey in 2016.&lt;/li&gt;
&lt;li&gt;Kubernetes use in production has increased to 83%, up from 78% last year.&lt;/li&gt;
&lt;li&gt;There has been a 50% increase in the use of all CNCF projects since last year’s survey.&lt;/li&gt;
&lt;li&gt;Usage of cloud-native tools:&lt;/li&gt;
&lt;li&gt;82% of respondents use CI/CD pipelines in production.&lt;/li&gt;
&lt;li&gt;30% of respondents use serverless technologies in production.&lt;/li&gt;
&lt;li&gt;27% of respondents use a service mesh in production, a 50% increase over last year.&lt;/li&gt;
&lt;li&gt;55% of respondents use stateful applications in containers in production.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The trend and quick adoption of Kubernetes by enterprises is growing yearly and widely adopted by DevOps engineers, cloud architects, backend developers, DevOps management, full-stack developers, and other tech specialists.&lt;/p&gt;

&lt;p&gt;If you’re looking for a scalable cloud solution then you should surely consider Kubernetes.&lt;/p&gt;

&lt;p&gt;To ease the development of Kubernetes we offer &lt;a href="https://nimbella.com/platform"&gt;Nimbella serverless platform&lt;/a&gt; that is available on prem, private, hybrid, and public cloud.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;This interview has been taken by Yulia Aslamova.&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Head of Marketing and User Acquisition at Nimbella&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://nimbella.com/blog/kubernetes-in-simple-words-explained-by-eric-swildens"&gt;This blog&lt;/a&gt; was initially published on &lt;a href="https://nimbella.com/blog"&gt;Nimbella&lt;/a&gt;. Keep an eye out for this space and follow us on &lt;a href="https://twitter.com/"&gt;Twitter&lt;/a&gt; for the latest updates.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>serverless</category>
      <category>docker</category>
      <category>nimbella</category>
    </item>
    <item>
      <title>What to Learn to get started with Android App Development?</title>
      <author>ROHIT KUMAR</author>
      <pubDate>Mon, 12 Jul 2021 06:13:44 +0000</pubDate>
      <link>https://dev.to/rohitk570/what-to-learn-to-get-started-with-android-app-development-19il</link>
      <guid>https://dev.to/rohitk570/what-to-learn-to-get-started-with-android-app-development-19il</guid>
      <description>&lt;p&gt;Yes!🤔 This question might confuses every beginners whenever they are thinking of to start a new journey here.&lt;br&gt;
So, if you’re one of those enthusiasts here's my article to help you getting started with android app development.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#choose-a-platform"&gt;
  &lt;/a&gt;
  Choose a Platform
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Mobile development&lt;/strong&gt; is a broad field and therefore this means there are multiple ways to develop an application i.e this question has more than one  answers. Basically the whole mobile development community works on two fronts, one is &lt;code&gt;Native development&lt;/code&gt; and &lt;code&gt;Cross-Platform development&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--68-q2kNH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owomu9wqymea5nb8uzxg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--68-q2kNH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owomu9wqymea5nb8uzxg.jpeg" alt="mobile logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Android development -&amp;gt; using Kotlin and Java&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;IOS development -&amp;gt; using Objective C and Swift&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cross-Platform -&amp;gt; using Flutter,Ionic,Xamarin,React-Native,etc&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;First two points is an example  for Native&lt;/em&gt; and the &lt;em&gt;Third one for Hybrid&lt;/em&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;By &lt;strong&gt;Native Development&lt;/strong&gt; it means that is built for one specific platform. Hence written in languages compatible with the platform  For instance, native Android app run on Android OS only Whereas native iOS apps run on iOS only.&lt;br&gt;
 With &lt;strong&gt;Cross-platform Development&lt;/strong&gt; one's can write code once and run on different platforms. Hence specialized tools are taken into service, can run on both iOS and Android platforms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For someone new to mobile development, its better to learn native first then move to cross-platform technologies( if you want to ), &lt;br&gt;
As of now better hybrid technologies are &lt;a href="https://reactnative.dev/"&gt;&lt;em&gt;React-Native&lt;/em&gt;&lt;/a&gt; and &lt;a href="https://flutter.dev/"&gt;&lt;em&gt;Flutter&lt;/em&gt;&lt;/a&gt; and to my understanding that to be good in these  we need a pretty strong understanding on native mobile development.&lt;/p&gt;

&lt;p&gt;So, keep this &lt;em&gt;Native vs Cross-Platform&lt;/em&gt; for some others day topic&lt;br&gt;
However this blog is focused in &lt;code&gt;Native way of Android development&lt;/code&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learn-a-language"&gt;
  &lt;/a&gt;
  Learn a LANGUAGE
&lt;/h1&gt;

&lt;p&gt;For the languages, you can develop android apps either by using &lt;a href="https://kotlinlang.org/"&gt;Kotlin&lt;/a&gt; or &lt;a href="https://www.oracle.com/in/java/"&gt;Java&lt;/a&gt;, Hence another confusing part for beginners.&lt;br&gt;
You need to learn basic of any programming language before getting started with android such as OOPS and other such underlying concepts&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OhaZgE7p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5h2clwv0ahkwbpmxqdt8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OhaZgE7p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5h2clwv0ahkwbpmxqdt8.png" alt="kotlin n java"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1java"&gt;
  &lt;/a&gt;
  1.JAVA
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Java was the &lt;em&gt;first official&lt;/em&gt; programming language that is 
    used to develop android apps. &lt;/li&gt;
&lt;li&gt;The support community and user base is more in Java its older than Kotlin. &lt;/li&gt;
&lt;li&gt;Android is the framework written in Java, so to code android android application you need to learn java and make yourself familiar with the syntax &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2kotlin"&gt;
  &lt;/a&gt;
  2.KOTLIN
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; Launched by JetBrains, who created  IntelliJ IDE and it too runs on JVM &lt;/li&gt;
&lt;li&gt;Google in May 2017 announced Kotlin as the official language of Android App Development&lt;/li&gt;
&lt;li&gt;Kotlin made android app development much easy as the length of the code had decreased than Java , and other such features &lt;/li&gt;
&lt;li&gt;For a android developer  Kotlin should be the language of choice nowadays&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;As time is changing the companies are shifting to Kotlin. Hence its most preferred since it offers a lot as compared to Java. Google also offers a lot of support to Kotlin, like many new Jetpack APIs and features will be offered first in Kotlin.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BUT&lt;/strong&gt; for &lt;em&gt;beginners in android with no experience with any line of codes&lt;/em&gt; or any other programming language first learn Android development in&lt;code&gt;Java&lt;/code&gt;, then switch to &lt;code&gt;Kotlin&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#3xmlextensible-markup-language"&gt;
  &lt;/a&gt;
  3.XML(Extensible Markup Language)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;XML is important used to design &lt;strong&gt;&lt;code&gt;UI&lt;/code&gt;/&lt;code&gt;UX&lt;/code&gt;&lt;/strong&gt; of an app its, presentation, layouts,etc&lt;/li&gt;
&lt;li&gt;Since its markup language its work is to describes data and introducing elements like &lt;em&gt;sets&lt;/em&gt; the layout of things like &lt;code&gt;buttons&lt;/code&gt; and &lt;code&gt;images&lt;/code&gt;, and &lt;em&gt;defines&lt;/em&gt; the &lt;code&gt;font&lt;/code&gt;, &lt;code&gt;color&lt;/code&gt;, and any &lt;code&gt;text&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;To recap, XML describes the views in layout, and Java/Kotlin tells them how to behave.&lt;br&gt;
Its not needed to learn in depth beforehand you can learn along the way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#android-sdk"&gt;
  &lt;/a&gt;
  ANDROID SDK
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Android SDK stands for &lt;strong&gt;Android Software Development Kit&lt;/strong&gt; which is developed by Google for Android Platform.&lt;/li&gt;
&lt;li&gt;Android SDK is a collection of libraries and Software Development tools helps to create android Apps easily.&lt;/li&gt;
&lt;li&gt;Its includes necessary utilities to help Android developers calling different APIs developed by Google both for controlling the device's functions and for integrating services&lt;/li&gt;
&lt;li&gt;Component of the Android SDK such as &lt;code&gt;Gradle&lt;/code&gt;,&lt;code&gt;emulator&lt;/code&gt;,&lt;code&gt;build tool&lt;/code&gt;,&lt;code&gt;platform tool&lt;/code&gt; ,etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#using-an-ide-android-studio"&gt;
  &lt;/a&gt;
  Using an IDE &lt;a href="https://developer.android.com/studio/"&gt;Android Studio&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;There are many IDE available for development,but &lt;br&gt;
It’s unquestionably the best IDE &lt;strong&gt;(Integrated Development Environment)&lt;/strong&gt; for Android&lt;br&gt;
Android Studio is a must have for both the beginner and experienced Android developer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SAd-NWaw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r5ub249ljmg54sz7wzuw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SAd-NWaw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r5ub249ljmg54sz7wzuw.jpg" alt="Aandroidst"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Built on top of IntelliJ IDE,developed by Google for android application development.&lt;/li&gt;
&lt;li&gt;Google on 16th May 2013 announced as a official IDE for Android app development.&lt;/li&gt;
&lt;li&gt;Its comes with great out-of-the-box support for many of the most common Android SDKs.&lt;/li&gt;
&lt;li&gt;It has advanced tools like &lt;code&gt;memory monitors&lt;/code&gt;,&lt;code&gt;CPU monitors&lt;/code&gt;,&lt;code&gt;Code debuggers&lt;/code&gt;,&lt;code&gt;Code completion&lt;/code&gt;,&lt;code&gt;etc&lt;/code&gt; helping developers make sure their code will maintain high performance on a mobile device.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#start-with-android"&gt;
  &lt;/a&gt;
  Start with android
&lt;/h1&gt;

&lt;p&gt;After just understanding the basics of the above listed ,it is now time to  get your hand dirty. Hence just install Android Studio and start developing an app, As Practice together along with  theory is one of the best ways of learning.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--61FTzO0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1qfkzudltb6flwf7q5g.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--61FTzO0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1qfkzudltb6flwf7q5g.jpeg" alt="A"&gt;&lt;/a&gt;&lt;br&gt;
 One of the important skill as an android developer is of reading and searching for answer ,For development Android provides the most important and incredible documentation:-&lt;br&gt;
&lt;a href="https://developer.android.com/guide"&gt;&lt;em&gt;Android Documentation&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You won’t understand and remember everything for the first time, ones has to browse this sites millions time and each time you will become one step better version  from your previous&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here's the link of bunch of resources you can go through &lt;br&gt;
1.&lt;a href="https://developer.android.com/courses/android-basics-kotlin/course"&gt;Android basics in Kotlin&lt;/a&gt;-Free course by Google , you'll learn the basics of building Android apps with the Kotlin.&lt;br&gt;
2.&lt;a href="https://www.udacity.com/course/developing-android-apps-with-kotlin--ud9012"&gt;Developing Android Apps with Kotlin&lt;/a&gt; - Its an Udacity course by &lt;br&gt;
  Google.&lt;br&gt;
3.&lt;a href="https://www.udacity.com/course/android-basics-user-interface--ud834"&gt;Android Basics: User Interface&lt;/a&gt; -Learn the basics of Android and Java programming this courses doesn't require any prior knowledge in coding. One with no experience with &lt;em&gt;any lines of code&lt;/em&gt; can also &lt;strong&gt;start here&lt;/strong&gt; &lt;br&gt;
4.&lt;a href="https://developer.android.com/courses/fundamentals-training/toc-v2"&gt;Android codelabs&lt;/a&gt; - Its practical codelabs course by Google,finds a lot of helpful examples.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#something-more"&gt;
  &lt;/a&gt;
  SOMETHING MORE
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;NOW&lt;/strong&gt; ,this section is once you have started Android development and getting familiar, too with some Techincal terms&lt;br&gt;
List of some important terms which you will find along the way -&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1understand-material-designs"&gt;
  &lt;/a&gt;
  1.Understand Material Designs
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pJ548mDI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvnzvj2gud3dt3mc1c2b.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pJ548mDI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvnzvj2gud3dt3mc1c2b.jpg" alt="materialxt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Google has released a set of forward-thinking interface guidelines and standards called Material Design, to help build consistent and high quality app UI and give  aesthetic  look .&lt;/li&gt;
&lt;li&gt;These standards include tips for how to layer various elements on the screen and use specific styles and highlights the best practices for we can use
&lt;/li&gt;
&lt;li&gt;Try to feel it. Be the material. Think like material. Behave like material. You shouldn’t miss this point while getting started with Android.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2gradle-build"&gt;
  &lt;/a&gt;
  2.Gradle build
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vsSKbi9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tbveku0tal7apqhqwvn0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vsSKbi9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tbveku0tal7apqhqwvn0.jpg" alt="Alt Tfradleext"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gradle is another build system that takes the best features from other build systems and combines them into one.&lt;/li&gt;
&lt;li&gt;“Build.gradle” are scripts where one can automate the tasks.&lt;/li&gt;
&lt;li&gt;For example, the simple task to copy some files from one directory to another can be performed by Gradle build script before the actual build process happens.&lt;/li&gt;
&lt;li&gt;Every Android project needs a gradle for generating an apk from the .java and .xml files in the project.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3learn-version-control"&gt;
  &lt;/a&gt;
  3.Learn Version Control
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yUzgyD5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtag2a5avtvs918qxlth.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUzgyD5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtag2a5avtvs918qxlth.jpeg" alt="gitext"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are multiple Version Control Systems available but &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt; is the most common one these days.&lt;/li&gt;
&lt;li&gt;These are tools that enables you to keep your code and also track your progress.&lt;/li&gt;
&lt;li&gt;Resource for learning &lt;a href="https://www.udacity.com/course/version-control-with-git--ud123"&gt;Version Control with Git&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Showcasing your project you can learn and build the portfolio on github &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; &lt;strong&gt;AND&lt;/strong&gt; there is many more&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;like for &lt;em&gt;Database connectivity&lt;/em&gt; &lt;a href="https://firebase.google.com/"&gt;Firebase&lt;/a&gt; is there
&lt;/li&gt;
&lt;li&gt;you’ll likely want to interact with many other services through &lt;em&gt;APIs&lt;/em&gt; &lt;a href="https://developer.android.com/jetpack/"&gt;Jetpack libraries&lt;/a&gt; are  there.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;This list don't ends here ,&lt;br&gt;
 When one picks up a career in tech they commit themselves to lifelong learning, and &lt;strong&gt;&lt;em&gt;one thing for sure you will love it&lt;/em&gt;&lt;/strong&gt; , as these technologies there only to help you and make your app developing process easier.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#now-here-providing-the-flowchart"&gt;
  &lt;/a&gt;
  Now here providing the flowchart-
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FllHNA4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dlzdpzl3parf2y5doqk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FllHNA4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dlzdpzl3parf2y5doqk.png" alt="roadmap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember to not be exhausted by the list, just learn the basics and start working on some project, rest of the learnings will come along the way. Good luck!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Reference -

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://generalassemb.ly/blog/7-essential-skills-you-need-to-be-an-android-developer/"&gt;Essential Skill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://roadmap.sh/android"&gt;Compelete roadmap&lt;/a&gt; , here you will find resources link of other important part in android &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Personal Tips&lt;/em&gt;&lt;/strong&gt; -If you want to start then, one of the best habits is that start reading articles regarding the application development.&lt;/p&gt;

&lt;p&gt;Now we came to an end of the article&lt;br&gt;
I hope you found this article valuable. If yes do let me know in the comments 😊&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  THANK YOU!
&lt;/h2&gt;

</description>
      <category>beginners</category>
      <category>android</category>
      <category>kotlin</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
