<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Toggle dark/light mode by clapping your hands</title>
      <author>Charlie Gerard</author>
      <pubDate>Wed, 14 Apr 2021 16:39:17 +0000</pubDate>
      <link>https://dev.to/devdevcharlie/toggle-dark-light-mode-by-clapping-your-hands-li7</link>
      <guid>https://dev.to/devdevcharlie/toggle-dark-light-mode-by-clapping-your-hands-li7</guid>
      <description>&lt;p&gt;&lt;em&gt;Post originally published on &lt;a href="https://charliegerard.dev"&gt;my blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A few days ago, we released dark mode in beta on the &lt;a href="https://app.netlify.com/"&gt;Netlify app&lt;/a&gt;. While we're still iterating on it, it is currently only available via &lt;a href="https://app.netlify.com/user/labs"&gt;Netlify labs&lt;/a&gt; and then under the user's settings.&lt;/p&gt;

&lt;p&gt;Even though it is not that many clicks to get there, it felt like too many to me and while waiting to have it easily accessible in the nav, I wondered... Wouldn't it be fun to be able to toggle it by clapping your hands, just like some home automation devices?&lt;/p&gt;

&lt;p&gt;So I spent a part of the weekend looking into how to build it, and ended up with a &lt;strong&gt;Chrome extension using TensorFlow.js and a model trained with samples of me clapping my hands, that toggles dark mode on/off!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is the result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b61oJpKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g0st1jix05tu4xtap385.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b61oJpKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g0st1jix05tu4xtap385.gif" alt="Clapping hands to toggle dark mode and then again to toggle light mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FUN!!! ğŸ˜ƒ Or at least, to me...&lt;/p&gt;

&lt;p&gt;So, here is how I went about it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#training-the-model"&gt;
  &lt;/a&gt;
  Training the model
&lt;/h2&gt;

&lt;p&gt;First, I trained the model to make sure detecting sounds of clapping hands would work. To make it way easier and faster, I used the &lt;a href="https://teachablemachine.withgoogle.com/"&gt;Teachable machine&lt;/a&gt; platform, and more specifically, started an &lt;a href="https://teachablemachine.withgoogle.com/train/audio"&gt;audio project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yfSMo5OZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hijoioam964ee6g0qdse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yfSMo5OZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hijoioam964ee6g0qdse.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first section is to record what your current background sounds like. Then, you can create multiple "classes" to record samples of sounds for activities you would like to use in your project, in this case, clapping hands.&lt;/p&gt;

&lt;p&gt;In general, I record samples for a few more classes, if I know that I'm gonna use this model in an environment where there will be more kinds of sounds.&lt;/p&gt;

&lt;p&gt;For example, I also recorded samples of speech so the model would be able to recognise what speech "looks like" and not mistake it for clapping hands.&lt;/p&gt;

&lt;p&gt;Once you're done recording your samples, you can move on to training your model, preview that it works as expected and export it to use it in your code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-chrome-extension"&gt;
  &lt;/a&gt;
  Building the Chrome extension
&lt;/h2&gt;

&lt;p&gt;I'm not gonna go into too much detail about how to build a Chrome extension because there are a lot of different options, but here's what I did for mine.&lt;/p&gt;

&lt;p&gt;You need at least a &lt;code&gt;manifest.json&lt;/code&gt; file that will contain details about your extension.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dark mode clap extension&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Toggle dark mode by clapping your hands!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;manifest_version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;permissions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;storage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;activeTab&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;action&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default_icon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;16&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/images/dark_mode16.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;32&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/images/dark_mode32.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;48&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/images/dark_mode48.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;128&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/images/dark_mode128.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;icons&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;16&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/images/dark_mode16.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;32&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/images/dark_mode32.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;48&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/images/dark_mode48.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;128&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/images/dark_mode128.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content_scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;matches&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://app.netlify.com/*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;all_frames&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The most important parts for this project is the permissions and content scripts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#content-script"&gt;
  &lt;/a&gt;
  Content script
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developer.chrome.com/docs/extensions/mv2/content_scripts/"&gt;Content scripts&lt;/a&gt; are files that run in the context of web pages, so they have access to the pages the browser is currently visiting.&lt;/p&gt;

&lt;p&gt;Depending on your configs in the &lt;code&gt;manifest.json&lt;/code&gt; file, this would trigger on any tab or only specific tabs. As I added the parameter &lt;code&gt;"matches": ["https://app.netlify.com/*"],&lt;/code&gt;, this only triggers when I'm on the Netlify app.&lt;/p&gt;

&lt;p&gt;Then, I can start triggering the code dedicated to the sound detection.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-tensorflowjs-to-detect-sounds"&gt;
  &lt;/a&gt;
  Setting up TensorFlow.js to detect sounds
&lt;/h2&gt;

&lt;p&gt;When working with TensorFlow.js, I usually export the model as a file on my machine, but this time I decided to use the other option and upload it to Google Cloud. This way, it's accessible via a URL.&lt;/p&gt;

&lt;p&gt;For the code sample, an example is provided on Teachable machine when you export your model but basically, you need to start by creating your model:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SPEECH_MODEL_TFHUB_URL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//URL of your model uploaded on Google Cloud.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;recognizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createModel&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createModel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkpointURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;model.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;metadataURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;metadata.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// model metadata&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;recognizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;speechCommands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;BROWSER_FFT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;checkpointURL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;metadataURL&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;recognizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ensureModelLoaded&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;recognizer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And once it's done, you can start the live prediction:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;classLabels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;recognizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wordLabels&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// An array containing the classes trained. In my case ['Background noise', 'Clap', 'Speech']&lt;/span&gt;

&lt;span class="nx"&gt;recognizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// will be an array of floating-point numbers between 0 and 1 representing the probability for each class&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;predictionIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// get the max value in the array because it represents the highest probability&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prediction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;classLabels&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;predictionIndex&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// Look for this value in the array of trained classes&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prediction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;includeSpectrogram&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;probabilityThreshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;invokeCallbackOnNoiseAndUnknown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;overlapFactor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If everything works well, when this code runs, it should log either "Background noise", "Clap" or "Speech" based on what is predicted from live audio data.&lt;/p&gt;

&lt;p&gt;Now, to toggle Netlify's dark mode, I replaced the &lt;code&gt;console.log&lt;/code&gt; statement with some small logic. The way dark mode is currently implemented is by adding a &lt;code&gt;tw-dark&lt;/code&gt; class on the body.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prediction&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Clap&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tw-dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tw-dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nf-theme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tw-dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nf-theme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I also update the value in localStorage so it is persisted.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-the-extension"&gt;
  &lt;/a&gt;
  Install the extension
&lt;/h2&gt;

&lt;p&gt;To be able to test that this code works, you have to install the extension in your browser.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Before doing so, you might have to bundle your extension, depending on what tools you used.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To install it, the steps to follow are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Visit &lt;code&gt;chrome://extensions&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Toggle &lt;code&gt;Developer mode&lt;/code&gt; located at the top right of the page&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;Load unpacked&lt;/code&gt; and select the folder with your bundled extension&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CifXQIAM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja9acud37hhus4m6e7ja.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CifXQIAM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja9acud37hhus4m6e7ja.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If all goes well, you should visit whatever page you want to run your extension on and it should ask for microphone permission to be able to detect live audio, and start predicting!&lt;/p&gt;

&lt;p&gt;--&lt;/p&gt;

&lt;p&gt;That's it! Overall, this project wasn't even really about toggling dark mode but I've wanted to learn about using TensorFlow.js in a Chrome extension for a while so this seemed like the perfect opportunity! ğŸ˜ƒ&lt;/p&gt;

&lt;p&gt;If you want to check out the code, &lt;a href="https://github.com/charliegerard/dark-mode-clap-extension"&gt;here's the repo&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;I can now tick that off my never-ending list. âœ…&lt;/p&gt;

</description>
      <category>tensorflowjs</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>JavaScript Basic Concepts that are important in React</title>
      <author>Kiran Raj R</author>
      <pubDate>Wed, 14 Apr 2021 16:31:31 +0000</pubDate>
      <link>https://dev.to/kiranrajvjd/javascript-basic-concepts-that-are-important-in-react-3icn</link>
      <guid>https://dev.to/kiranrajvjd/javascript-basic-concepts-that-are-important-in-react-3icn</guid>
      <description>&lt;p&gt;When I start learning React I was baffled by some of the codes blocks, I don't understand how the code works or how the output was generated. So I begin to dig into react ecosystem to understand the concepts and I found myself in no man's land, I was lost and frustrated. The reason, I was not thorough in my JavaScript(still not) basics. I skipped some topics believing that I fully understand the working. Due to the lack of knowledge in JavaScript basics I fell into many awkward situations not knowing how to solve certain problem or what method I should use, I lost too much time, and I don't want anyone to have the same experience as mine. So I like you to study at least the following topics in JavaScript before you jump into React. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://dev.to/kiranrajvjd/javascript-classes-part-1-3l6b"&gt;Classes&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kiranrajvjd/javascript-modules-5ad5"&gt;Modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kiranrajvjd/javascript-rest-and-spread-fk5"&gt;Rest, spread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kiranrajvjd/javascript-destructuring-4dpb"&gt;Destructuring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kiranrajvjd/javascript-higher-order-functions-3gi1"&gt;Higher order functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kiranrajvjd/javascript-arrow-functions-5aa2"&gt;Arrow functions&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This list is not the ultimate list, just the few topic I found most important. All topic are important but try to understand at least the following which will definitely help you. I have linked post that I write about the topic, it may help you. Some of the topics are not completing as I am trying to learn more about those topic and will be updated. I would be happy if you point out my mistakes which will help me to learn better. If you have any resources please feel free to share. Let's learn together :) Happy coding :)&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>25 Awesome Fonts From Google Fonts</title>
      <author>Kiran Raj R</author>
      <pubDate>Wed, 14 Apr 2021 16:17:24 +0000</pubDate>
      <link>https://dev.to/kiranrajvjd/25-awesome-fonts-from-google-fonts-40im</link>
      <guid>https://dev.to/kiranrajvjd/25-awesome-fonts-from-google-fonts-40im</guid>
      <description>&lt;p&gt;Here I list 25 awesome fonts from google fonts, these are my favourite fonts that I used in various projects. Take a look at it and comment your favourite fonts. If you have any other suggestions please comment it, so that in future projects I can use those fonts.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Alegreya"&gt;Alegreya&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Vollkorn"&gt;Vollkorn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Poppins"&gt;Poppins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Titillium+Web"&gt;Titillium Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Roboto"&gt;Roboto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Ubuntu"&gt;Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Varela"&gt;Varela&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Crimson+Text"&gt;Crimson Text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/BioRhyme"&gt;BioRhyme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Karla"&gt;Karla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Lato"&gt;Lato&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Playfair+Display"&gt;Playfair Display&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Montserrat"&gt;Montserrat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Rubik"&gt;Rubik&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Cardo"&gt;Cardo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Nunito"&gt;Nunito&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Oxygen"&gt;Oxygen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Merriweather"&gt;Merriweather&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Exo+2"&gt;Exo 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Amaranth"&gt;Amaranth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Josefin+Slab"&gt;Josefin Slab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Arvo"&gt;Arvo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Lora"&gt;Lora&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Quicksand"&gt;Quicksand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/specimen/Cairo"&gt;Cairo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>webdev</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Welcome Thread - v120</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 14 Apr 2021 16:06:43 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v120-5d66</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v120-5d66</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/QAsHga1AB6dIGUsui6/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/QAsHga1AB6dIGUsui6/giphy.gif" alt="Bugs Bunny"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. ğŸ‘‹ &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>Cloud Native CI/CD with Tekton - Building Custom Tasks</title>
      <author>Martin Heinz</author>
      <pubDate>Wed, 14 Apr 2021 15:48:37 +0000</pubDate>
      <link>https://dev.to/martinheinz/cloud-native-ci-cd-with-tekton-building-custom-tasks-14am</link>
      <guid>https://dev.to/martinheinz/cloud-native-ci-cd-with-tekton-building-custom-tasks-14am</guid>
      <description>&lt;p&gt;In this article we will pick up where we left off in the &lt;a href="https://dev.to/martinheinz/cloud-native-ci-cd-with-tekton-laying-the-foundation-13n4"&gt;previous article&lt;/a&gt; in which we deployed our Tekton Pipelines environment and we will explore in detail how to find, build and customize Tekton Tasks to create all the necessary building blocks for our pipelines. On top of that, we will also look at how to maintain and test our newly built Tasks, while using all the best practices for creating reusable, testable, well-structured and simple tasks.&lt;/p&gt;

&lt;p&gt;If you haven't do so yet, then go checkout the previous article to get your Tekton development environment up and running, so you can follow along with the examples in this one.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: All the the code and resources used in this article are available in &lt;a href="https://github.com/MartinHeinz/tekton-kickstarter"&gt;&lt;code&gt;tekton-kickstarter&lt;/code&gt; repository&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-tasks"&gt;
  &lt;/a&gt;
  What Are Tasks?
&lt;/h2&gt;

&lt;p&gt;Tekton &lt;em&gt;Tasks&lt;/em&gt; are the basic building blocks of Pipelines. Task is a sequence of steps that performs some particular, well... task. Each of the steps in a Task is a container inside Task's Pod. Isolating this kind of sequence for related steps into single reusable Task provides Tekton with a lot of versatility and flexibility. They can be as simple as running single &lt;code&gt;echo&lt;/code&gt; command or as complex as Docker build followed push to registry finished by image digest output.&lt;/p&gt;

&lt;p&gt;Apart from Tasks, &lt;em&gt;ClusterTasks&lt;/em&gt; are also available. They're not much different from basic Tasks as they're just a cluster-scoped Tasks. These are useful for general purpose Tasks that perform basic operations such as cloning repository or running &lt;code&gt;kubectl&lt;/code&gt; commands. Using ClusterTasks helps avoid duplication of code and helps with reusability. Be mindful of modifications to ClusterTasks though, as any changes to them might impact many other pipelines in all the other namespaces in your cluster.&lt;/p&gt;

&lt;p&gt;When we want to execute a Task or ClusterTask we create &lt;em&gt;TaskRun&lt;/em&gt;. In programming terms you could also think of a Task as a class and TaskRun as it's instance.&lt;/p&gt;

&lt;p&gt;If the above explanation isn't clear enough, then little example might help. Here's the simplest possible Task we can create:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# echo.yaml&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tekton.dev/v1beta1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Task&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;hello&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu&lt;/span&gt;
    &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo 'Hello world!'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This simple Task called &lt;code&gt;echo&lt;/code&gt; really does just that - it runs a &lt;code&gt;ubuntu&lt;/code&gt; container and inject script into it that executes &lt;code&gt;echo 'Hello world!'&lt;/code&gt;. Now that we have a task, we can also run it, or in other words create TaskRun. We can create a YAML file for that and apply it or we can also use &lt;code&gt;tkn&lt;/code&gt; CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ &lt;span class="nv"&gt;$ &lt;/span&gt;tkn task start &lt;span class="nt"&gt;--filename&lt;/span&gt; echo.yaml 
TaskRun started: echo-run-jqn9l

In order to track the TaskRun progress run:
tkn taskrun logs echo-run-jqn9l &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; default

~ &lt;span class="nv"&gt;$ &lt;/span&gt;tkn taskrun logs echo-run-jqn9l &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; default
&lt;span class="o"&gt;[&lt;/span&gt;hello] + &lt;span class="nb"&gt;echo &lt;/span&gt;Hello world!
&lt;span class="o"&gt;[&lt;/span&gt;hello] Hello world!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it's simple as that! We've run our first Task, so let's now move onto something a bit more useful and explore what Tasks are already out there...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-reinvent-a-wheel"&gt;
  &lt;/a&gt;
  Don't Reinvent a Wheel
&lt;/h2&gt;

&lt;p&gt;This article is about creating and customizing Tekton Tasks, but let's not try to reinvent a wheel here. Instead let's use what Tekton community already created. The main source for existing Tasks that are ready to be used is &lt;em&gt;Tekton Catalog&lt;/em&gt;. It's a repository of reliable, curated Tasks reviewed by Tekton maintainers. In addition to Tekton Catalog repository you can also use &lt;a href="https://hub.tekton.dev/"&gt;Tekton Hub&lt;/a&gt; which lists all the same Tasks as the catalog but in a bit easier to navigate view. It also lists rating of each Task, which might be a helpful indicator of quality.&lt;/p&gt;

&lt;p&gt;In this catalog, you should be able to find all the basic stuff like Tasks for fetching repository (&lt;code&gt;git-clone&lt;/code&gt;), building and pushing Docker images (&lt;code&gt;kaniko&lt;/code&gt; or &lt;code&gt;buildah&lt;/code&gt;) or sending Slack notifications (&lt;code&gt;send-to-webhook-slack&lt;/code&gt;). So, before you decide to build custom Tasks try checking the catalog for existing solutions to common problems.&lt;/p&gt;

&lt;p&gt;If you browsed through the Tekton catalog or Tekton hub, you probably noticed that installation of each Task is just a single &lt;code&gt;kubectl apply -f ...&lt;/code&gt;. That's easy enough but if you rely on many of these Tasks and want to track them in version control without copy-pasting all of their YAMLs, then you can use convenient script in &lt;a href="https://github.com/MartinHeinz/tekton-kickstarter"&gt;&lt;code&gt;tekton-kickstarter&lt;/code&gt; repository&lt;/a&gt; which will take list of remote YAML URLs, such as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# catalog.yaml&lt;/span&gt;
&lt;span class="na"&gt;git-clone&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;https://raw.githubusercontent.com/tektoncd/catalog/master/task/git-clone/0.2/git-clone.yaml'&lt;/span&gt;
&lt;span class="na"&gt;send-to-webhook-slack&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;https://raw.githubusercontent.com/tektoncd/catalog/master/task/send-to-webhook-slack/0.1/send-to-webhook-slack.yaml'&lt;/span&gt;
&lt;span class="na"&gt;skopeo-copy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;https://raw.githubusercontent.com/tektoncd/catalog/master/task/skopeo-copy/0.1/skopeo-copy.yaml'&lt;/span&gt;
&lt;span class="na"&gt;buildid&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;https://raw.githubusercontent.com/tektoncd/catalog/master/task/generate-build-id/0.1/generate-build-id.yaml'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And with invocation of &lt;code&gt;make catalog&lt;/code&gt;, apply them to your cluster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#layout"&gt;
  &lt;/a&gt;
  Layout
&lt;/h2&gt;

&lt;p&gt;Before we start making custom tasks, it's a good idea to decide on layout which would make them easy to navigate, test and deploy. We can take a bit of an inspiration from Tekton Catalog repository and use the following directory structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
â”œâ”€â”€ tasks                      - Custom or remotely retrieved Tasks and ClusterTasks
â”‚Â Â  â”œâ”€â”€ catalog.yaml           - List of Tasks retrieved from remote registries (e.g. Tekton catalog)
â”‚Â Â  â””â”€â”€ task-name              - Some custom Task
|     â”œâ”€â”€ task-name.yaml       - File containing Task or ClusterTask
|     â””â”€â”€ tests                - Directory with files for testing
|         â”œâ”€â”€ resources.yaml   - Resources required for testing, e.g. PVC, Deployment
|         â””â”€â”€ run.yaml         - TaskRun(s) that performs the test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We store all the tasks in single directory called &lt;code&gt;tasks&lt;/code&gt;. In there we create one directory for each Task, which will contain one YAML file containing the Task itself and one more directory (&lt;code&gt;tests&lt;/code&gt;) with resources required for testing. Those would be TaskRun(s) in &lt;code&gt;run.yaml&lt;/code&gt; and any additional resources needed to perform the test inside &lt;code&gt;resources.yaml&lt;/code&gt;. Those could be - for example - PVC for Task performing DB backup or Deployment for task that performs application scaling.&lt;/p&gt;

&lt;p&gt;One more file shown in the structure above which we mentioned already in previous section is the &lt;code&gt;catalog.yaml&lt;/code&gt;, which holds list of task that are to be installed from remote sources.&lt;/p&gt;

&lt;p&gt;For convenience (if using &lt;code&gt;tekton-kickstarter&lt;/code&gt;) all of these can be installed with one command, which is &lt;code&gt;make deploy-tasks&lt;/code&gt; which traverses &lt;code&gt;tasks&lt;/code&gt; directory and applies all the Tasks to your cluster while omitting all the testing resources.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-custom-ones"&gt;
  &lt;/a&gt;
  Building Custom Ones
&lt;/h2&gt;

&lt;p&gt;If you can't find appropriate Task for the the job in the catalog, then it's time to write your own. In the beginning of the article I showed very simple "Hello world." example, but Tekton Tasks can get much more complex, so let's go over all the configuration options and features that we can leverage.&lt;/p&gt;

&lt;p&gt;Let's start simple and introduce the basics that we will need in pretty much any Task that we build. Those are Task parameters and scripts for Task steps:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# https://github.com/MartinHeinz/tekton-kickstarter/blob/master/tasks/deploy/deploy.yaml&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tekton.dev/v1beta1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ClusterTask&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;deploy&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;name&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment name.&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;namespace&lt;/span&gt;
      &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;default&lt;/span&gt;
  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rollout&lt;/span&gt;
      &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;bitnami/kubectl:1.20.2'&lt;/span&gt;
      &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;#!/usr/bin/env bash&lt;/span&gt;
        &lt;span class="s"&gt;set -xe&lt;/span&gt;
        &lt;span class="s"&gt;kubectl rollout restart deployment/$(params.name) -n $(params.namespace)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the above &lt;code&gt;deploy&lt;/code&gt; Task we can perform simple rollout of Kubernetes Deployment, by supplying it with name of the Deployment in &lt;code&gt;name&lt;/code&gt; parameter and optionally &lt;code&gt;namespace&lt;/code&gt; in which it resides. These parameters that we pass to the Task are then used in &lt;code&gt;script&lt;/code&gt; section where they're expanded before the script is executed. To tell Tekton to expand the parameter we use the &lt;code&gt;$(params.name)&lt;/code&gt; notation. This can be also used in other parts of spec, not just in the script.&lt;/p&gt;

&lt;p&gt;Now, let's take a closer look at the &lt;code&gt;script&lt;/code&gt; section - we begin it with &lt;em&gt;shebang&lt;/em&gt; to make sure that we will be using &lt;code&gt;bash&lt;/code&gt;. However, that doesn't mean that you always have to use &lt;code&gt;bash&lt;/code&gt;, same way you could use for example Python with &lt;code&gt;#!/usr/bin/env python&lt;/code&gt;, it all depend on your preference and on what's available in the image being used. After shebang we also use &lt;code&gt;set -xe&lt;/code&gt; which tells the script to echo each command being executed - you don't have to do this, but it can be very helpful during debugging.&lt;/p&gt;

&lt;p&gt;Alternatively, if you don't need whole script, but just a single command, then you can replace &lt;code&gt;script&lt;/code&gt; section with &lt;code&gt;command&lt;/code&gt;. This is how it would like like for simple Task that performs application health check using &lt;code&gt;kubectl wait&lt;/code&gt; (&lt;em&gt;note: omitting obvious/non-relevant parts of Task body for remaining examples&lt;/em&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# https://github.com/MartinHeinz/tekton-kickstarter/blob/master/tasks/healthcheck/healthcheck.yaml&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;wait&lt;/span&gt;
      &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;bitnami/kubectl:1.20.2'&lt;/span&gt;
      &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;kubectl&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;wait&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;--for=condition=available&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;--timeout=600s&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;deployment/$(params.name)&lt;/span&gt; 
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;-n&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;$(params.namespace)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This works the same way as with &lt;code&gt;command&lt;/code&gt; directive in pods and so it can get verbose and hard to read if you have many arguments as in the example above. For this reason I prefer to use &lt;code&gt;script&lt;/code&gt; for almost everything, as it's more readable and easier to update/change.&lt;/p&gt;

&lt;p&gt;Another common thing that you might need in your Tasks is some kind of a storage where you can write data that can be used by subsequent steps in the Task or by other Tasks in the pipeline. The most common use case for this would be a place to &lt;a href="https://github.com/tektoncd/catalog/tree/master/task/git-clone/0.2"&gt;fetch git repo&lt;/a&gt;. This kind of a storage is called &lt;code&gt;workspace&lt;/code&gt; in Tekton and the following example shows a Tasks that mounts and clears the storage using &lt;code&gt;rmdir&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# https://github.com/MartinHeinz/tekton-kickstarter/blob/master/tasks/clean/clean.yaml&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;path&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Path to directory being deleted.&lt;/span&gt;
      &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;.'&lt;/span&gt;
  &lt;span class="na"&gt;workspaces&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;source&lt;/span&gt;
      &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/workspace&lt;/span&gt;
  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rmdir&lt;/span&gt;
      &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;#!/usr/bin/env bash&lt;/span&gt;
        &lt;span class="s"&gt;set -xe&lt;/span&gt;
        &lt;span class="s"&gt;rm -rf "$(workspaces.source.path)/$(params.path)"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above &lt;code&gt;clean&lt;/code&gt; Task includes &lt;code&gt;workspace&lt;/code&gt; section that defines name of the workspace and path where it should be mounted. To make it easier to update the &lt;code&gt;mountPath&lt;/code&gt;, Tekton provides variable in a format &lt;code&gt;$(workspaces.ws-name.path)&lt;/code&gt; which can be used in scripts to reference the path.&lt;/p&gt;

&lt;p&gt;So, defining the workspace is pretty simple, but the disk backing the workspace won't appear out of thin air. Therefore, when we execute Task that asks for a workspace, we also need to create PVC for it. The TaskRun with creation of needed PVC for the above Task would look like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# https://github.com/MartinHeinz/tekton-kickstarter/blob/master/tasks/clean/tests/run.yaml&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tekton.dev/v1beta1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TaskRun&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;clean&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;default&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;path&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;somedir'&lt;/span&gt;
  &lt;span class="na"&gt;taskRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;clean&lt;/span&gt;        &lt;span class="c1"&gt;# Reference to the task&lt;/span&gt;
    &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ClusterTask&lt;/span&gt;  &lt;span class="c1"&gt;# In case of ClusterTask we need to explicitly specify `kind`&lt;/span&gt;
  &lt;span class="na"&gt;workspaces&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;source&lt;/span&gt;
      &lt;span class="na"&gt;volumeClaimTemplate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# PVC created this way will be cleaned-up after TaskRun/PipelineRun completes!&lt;/span&gt;
        &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;accessModes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;ReadWriteOnce&lt;/span&gt;
          &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;requests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;storage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;1Gi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Workspaces are very generic and therefore can be also used not just to store some ephemeral data during Task/Pipeline run, but also as a long term storage like in the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# https://github.com/MartinHeinz/tekton-kickstarter/blob/master/tasks/pg-dump/pg-dump.yaml&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tekton.dev/v1beta1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ClusterTask&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pg-dump&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;HOST&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;DATABASE&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;DEST&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
  &lt;span class="na"&gt;workspaces&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backup&lt;/span&gt;
      &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/backup&lt;/span&gt;
  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pg-dump&lt;/span&gt;
      &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;postgres:13.2-alpine'&lt;/span&gt;
      &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;USERNAME&lt;/span&gt;
          &lt;span class="na"&gt;valueFrom&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;secretKeyRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres-config&lt;/span&gt;
              &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_USER&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PASSWORD&lt;/span&gt;
          &lt;span class="na"&gt;valueFrom&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;secretKeyRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres-config&lt;/span&gt;
              &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_PASSWORD&lt;/span&gt;
      &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;#!/usr/bin/env sh&lt;/span&gt;
        &lt;span class="s"&gt;set -xe&lt;/span&gt;
        &lt;span class="s"&gt;PGPASSWORD="$PASSWORD" pg_dump -h $(params.HOST) -Fc -U $USERNAME $(params.DATABASE) &amp;gt; $(workspaces.backup.path)/$(params.DEST)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This Task can perform a PostgreSQL database backup using &lt;code&gt;pg_dump&lt;/code&gt; utility. In this example, the script grabs the database data from host and DB specified in parameters and streams it into workspaces which is backed by PVC.&lt;/p&gt;

&lt;p&gt;Another feature that I sneaked into this example that you will encounter quite often is ability to inject environment variables from &lt;em&gt;ConfigMaps&lt;/em&gt; or &lt;em&gt;Secrets&lt;/em&gt;. This is done in &lt;code&gt;env&lt;/code&gt; section. This works exactly the same way as with Pods, so you can refer to that part of an API for this.&lt;/p&gt;

&lt;p&gt;Back to the main topic of this example - PVC for database backup - considering that we want this data to be persistent, we cannot use PVC created using &lt;code&gt;volumeClaimTemplate&lt;/code&gt; as shown previously as that would get cleaned up after Task finishes, so instead we need to create the PVC separately and pass it to Task this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# https://github.com/MartinHeinz/tekton-kickstarter/tree/master/tasks/pg-dump/tests&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PersistentVolumeClaim&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres-backup&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;requests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;storage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;1Gi&lt;/span&gt;
  &lt;span class="na"&gt;volumeMode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Filesystem&lt;/span&gt;
  &lt;span class="na"&gt;accessModes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;ReadWriteOnce&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tekton.dev/v1beta1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TaskRun&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pg-dump&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;taskRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pg-dump&lt;/span&gt;
    &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ClusterTask&lt;/span&gt;
  &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;HOST&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;postgres.default.svc.cluster.local'&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;DATABASE&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;DEST&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;test.bak'&lt;/span&gt;
  &lt;span class="na"&gt;workspaces&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backup&lt;/span&gt;
      &lt;span class="na"&gt;persistentVolumeClaim&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;claimName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres-backup&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we use &lt;code&gt;persistentVolumeClaim&lt;/code&gt; instead of &lt;code&gt;volumeClaimTemplate&lt;/code&gt; and we specify name of existing PVC which is also defined in the above snippet. This example also assumes that there's a PostgreSQL database running at specified host - for full code including PostgreSQL deployment checkout files &lt;a href="https://github.com/MartinHeinz/tekton-kickstarter/tree/master/tasks/pg-dump/tests"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Similarly to injection of environment variables, we can also use workspaces to inject whole ConfigMaps or Secrets (or some keys in them) as a file. This can be useful for example when you want whole &lt;code&gt;.pem&lt;/code&gt; certificate from Secret in the Task or as a config file that maps GitHub repository to application name as in following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# https://github.com/MartinHeinz/tekton-kickstarter/blob/master/misc/config.yaml&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ConfigMap&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;repo-app-mapping&lt;/span&gt;
&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;repo-app-mapping.yaml&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
    &lt;span class="s"&gt;'git@github.com:kelseyhightower/nocode.git': 'nocode'&lt;/span&gt;
    &lt;span class="s"&gt;'git@github.com:MartinHeinz/blog-frontend.git': 'blog-backend'&lt;/span&gt;
    &lt;span class="s"&gt;'git@github.com:MartinHeinz/game-server-operator.git': 'game-server-operator'&lt;/span&gt;
    &lt;span class="s"&gt;'git@github.com:MartinHeinz/python-project-blueprint.git': 'sample-python-app'&lt;/span&gt;
&lt;span class="s"&gt;---&lt;/span&gt;
&lt;span class="c1"&gt;# https://github.com/MartinHeinz/tekton-kickstarter/blob/master/tasks/get-application-name/get-application-name.yaml&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tekton.dev/v1beta1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ClusterTask&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;get-application-name&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;repository-url&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mapping-file&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;get-application-name&lt;/span&gt;
      &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mikefarah/yq&lt;/span&gt;
      &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;#!/usr/bin/env sh&lt;/span&gt;
        &lt;span class="s"&gt;set -xe&lt;/span&gt;
        &lt;span class="s"&gt;yq e '."$(params.repository-url)"' /config/$(params.mapping-file) | tr -d '\012\015' &amp;gt; /tekton/results/application-name&lt;/span&gt;
  &lt;span class="na"&gt;results&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;application-name&lt;/span&gt;  &lt;span class="c1"&gt;# Can be accessed by other Tasks with $(tasks.get-application-name.results.application-name)&lt;/span&gt;
  &lt;span class="na"&gt;workspaces&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config&lt;/span&gt;
      &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/config&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This Task takes repository URL and uses it to look up matching application name in the file which is part of the above shown ConfigMap. This is done using &lt;code&gt;yq&lt;/code&gt; utility followed by output to a file in special directory called &lt;code&gt;/tekton/results/...&lt;/code&gt;. This directory stores &lt;code&gt;results&lt;/code&gt; of Tasks which is a feature (and YAML section) we haven't mentioned yet.&lt;/p&gt;

&lt;p&gt;Task results are small pieces of data that Task can output, which then can be used by subsequent Tasks. To use these, one has to specify the name of the result variable in &lt;code&gt;results&lt;/code&gt; section and then write something to &lt;code&gt;/tekton/results/result-var-name&lt;/code&gt;. Also, as you surely noticed in the above script, we strip newline from the result using &lt;code&gt;tr&lt;/code&gt; before writing it into the file, that's because the result should be simple output - ideally just single word - and not a big chunk of text. If you decide to write something longer (with multiple lines) to the result, you might end-up losing part of the value or seeing only empty string if you don't strip the newline character.&lt;/p&gt;

&lt;p&gt;To then use Task - such as this one - that uses workspace from ConfigMap, we have to specify the config map in &lt;code&gt;workspaces&lt;/code&gt; section in the following way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Full example at https://github.com/MartinHeinz/tekton-kickstarter/blob/master/tasks/get-application-name/tests/run.yaml&lt;/span&gt;
  &lt;span class="na"&gt;workspaces&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config&lt;/span&gt;
      &lt;span class="na"&gt;configmap&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;repo-app-mapping&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Final thing I want to show here is the usage of sidecar containers. These are not so common, but can be useful when you need to run some service (which your Task depends on) for the duration of Task execution. One such service can be Docker daemon sidecar with exposed socket. To demonstrate this we can create a Task that performs Docker image efficiency analysis using tool called &lt;a href="https://github.com/wagoodman/dive"&gt;Dive&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# https://github.com/MartinHeinz/tekton-kickstarter/blob/master/tasks/dive/dive.yaml&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tekton.dev/v1beta1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ClusterTask&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dive&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;IMAGE&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Name (reference) of the image to analyze.&lt;/span&gt;
  &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;wagoodman/dive:latest'&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dive&lt;/span&gt;
      &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CI&lt;/span&gt;
          &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;true'&lt;/span&gt;
      &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;dive&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;$(params.IMAGE)&lt;/span&gt;
      &lt;span class="na"&gt;volumeMounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/var/run/&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dind-socket&lt;/span&gt;
  &lt;span class="na"&gt;sidecars&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;docker:18.05-dind'&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;server&lt;/span&gt;
      &lt;span class="na"&gt;securityContext&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;privileged&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;volumeMounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/var/lib/docker&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dind-storage&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/var/run/&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dind-socket&lt;/span&gt;
  &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dind-storage&lt;/span&gt;
      &lt;span class="na"&gt;emptyDir&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{}&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dind-socket&lt;/span&gt;
      &lt;span class="na"&gt;emptyDir&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see here, the &lt;code&gt;sidecars&lt;/code&gt; section is pretty much the same as definition of any container in Pod spec. In addition to the usual stuff we've seen in previous examples, here we also specify &lt;code&gt;volumes&lt;/code&gt; which are shared between sidecar and container in Tasks steps - in this case one of them being Docker storage in &lt;code&gt;dind-socket&lt;/code&gt; which Dive container attaches to.&lt;/p&gt;

&lt;p&gt;This covers most of the features of Tekton Tasks, but one thing I didn't mention so far and you will surely run into when reading Tekton docs is &lt;a href="https://github.com/tektoncd/pipeline/blob/main/docs/resources.md"&gt;&lt;em&gt;PipelineResource&lt;/em&gt;&lt;/a&gt; object, which can be used as Tasks input or output - for example GitHub sources as input or Docker image as output. So, why haven't I mentioned it yet? Well, PipelineResource is part of Tekton that I prefer to not use for a couple of reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's still in &lt;em&gt;alpha&lt;/em&gt; unlike all the other resource types we used so far&lt;/li&gt;
&lt;li&gt;There are very few PipelineResources. It's mostly just Git, Pull request and Image resources.&lt;/li&gt;
&lt;li&gt;It's hard to troubleshoot them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you need more reason not to use them (for now), then take a look at docs section &lt;a href="https://github.com/tektoncd/pipeline/blob/main/docs/resources.md#why-arent-pipelineresources-in-beta"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In all these examples that we went over, we've seen a lot of YAML sections, options and features which shows how flexible Tekton is, this however makes it's API spec - naturally - very complex. &lt;code&gt;kubectl explain&lt;/code&gt; unfortunately doesn't help with exploring API, but API spec is available in &lt;a href="https://github.com/tektoncd/pipeline/blob/master/docs/api-spec.md"&gt;docs&lt;/a&gt; but is lacking at best. So, in case you have trouble finding what can you put in which part of YAML, then your best bet is to rely on fields listed at the beginning of &lt;a href="https://github.com/tektoncd/pipeline/blob/master/docs/tasks.md#configuring-a-task"&gt;Tasks doc&lt;/a&gt; or on examples &lt;a href="https://github.com/tektoncd/pipeline/tree/master/examples/v1beta1"&gt;here&lt;/a&gt;, but make sure you're on right branch for your version of Tekton, otherwise you might spend long hours debugging why your seemingly correct Task cannot be validated by Tekton controller.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-and-testing"&gt;
  &lt;/a&gt;
  Running and Testing
&lt;/h2&gt;

&lt;p&gt;So far, we mostly just talked about Tasks and not much was said about TaskRuns. That's because - in my opinion - individual TaskRuns are best suited for testing and not really for running the Tasks regularly. For that you should use pipelines which will a topic of next article.&lt;/p&gt;

&lt;p&gt;Speaking of testing - when we're done implementing the Task, then it's time to run some tests. For straightforward and easy testing, I recommend using the layout mentioned earlier in the article. Using it should help you encapsulate the Task in a way that allows you to test it independently of any resources outside of it's directory.&lt;/p&gt;

&lt;p&gt;To then perform the actual test it's enough to apply resources/dependencies in &lt;code&gt;.../tests/resources.yaml&lt;/code&gt; (if any) and then apply the actual test(s) inside &lt;code&gt;.../tests/run.yaml&lt;/code&gt;. The tests really are just set of TaskRuns that use your custom Task, so for this basic testing approach there's no need for any setup/teardown or additional scripts - just &lt;code&gt;kubectl apply -f resources.yaml&lt;/code&gt; and &lt;code&gt;kubectl apply -f run.yaml&lt;/code&gt;. Examples of simple tests can be found each Task's directory in &lt;a href="https://github.com/MartinHeinz/tekton-kickstarter/tree/master/tasks"&gt;tekton-kickstarter&lt;/a&gt; or in Tekton Catalog repository.&lt;/p&gt;

&lt;p&gt;In general though, for any particular Task in repositories of both of these projects, you can run the following commands to perform the test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; tests/resources.yaml  &lt;span class="c"&gt;# Deploy dependencies&lt;/span&gt;
kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; tests/run.yaml        &lt;span class="c"&gt;# Start tests&lt;/span&gt;
kubectl get &lt;span class="nb"&gt;tr&lt;/span&gt;  &lt;span class="c"&gt;# List the TaskRuns (tests)&lt;/span&gt;
NAME           SUCCEEDED   REASON      STARTTIME   COMPLETIONTIME
some-taskrun   True        Succeeded   106s        4s

tkn &lt;span class="nb"&gt;tr &lt;/span&gt;logs some-taskrun  &lt;span class="c"&gt;# View logs from TaskRun&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For me personally - when it comes to testing Tasks - it's sufficient to use the above basic testing approach for validation and ad-hoc testing. If you however end-up creating large number of custom Tasks and want to go all out, then you can adopt the approach in Tekton catalog and leverage testing scripts in it's repository. If you decide to go that route and strictly follow the layout and testing, you might also want to try contributing the Tasks to the Tekton Catalog, so that whole community can benefit from more high quality Tasks. ğŸ˜‰&lt;/p&gt;

&lt;p&gt;As for the scripts that you'll need for this - you'll need to include &lt;a href="https://github.com/tektoncd/catalog/tree/master/test"&gt;&lt;code&gt;test&lt;/code&gt; directory&lt;/a&gt; as well as &lt;em&gt;Go&lt;/em&gt; dependencies (&lt;code&gt;vendor&lt;/code&gt; directory) from Tekton Catalog in your code and then follow E2E testing guide in docs &lt;a href="https://github.com/tektoncd/catalog/blob/master/CONTRIBUTING.md#end-to-end-testing"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Regardless of whether you choose basic or "all-out" approach for your testing though, try to make sure that you test more than just happy paths in the Tasks and Pipelines, otherwise you might end-up seeing a lot of bugs when they get deployed &lt;em&gt;"in the wild"&lt;/em&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#best-practices"&gt;
  &lt;/a&gt;
  Best Practices
&lt;/h2&gt;

&lt;p&gt;After you have implemented and tested your custom Tasks, it's a good idea to go back and make sure your Tasks are following the best development practices, which will make them more reusable and maintainable in a long run.&lt;/p&gt;

&lt;p&gt;The simplest thing that you can do that will also give the most benefit - is to use &lt;code&gt;yamllint&lt;/code&gt; - a linter for YAML files. This tip doesn't apply only to Tekton Tasks, but rather to all YAML files as they can get tricky to get right with all the indentation, but it's especially important with Task definitions can get very long and complex, with many levels of indentation, so keeping them readable and validated can save you some unnecessary debugging as well as help you in keeping them more maintainable. You can find a custom &lt;a href="https://github.com/MartinHeinz/tekton-kickstarter/blob/master/.yamllint"&gt;&lt;code&gt;.yamlint&lt;/code&gt; config&lt;/a&gt; in my repository which I like to use, but you should customize it to suit your code style and formatting. Just make sure you run &lt;code&gt;yamllint&lt;/code&gt; from time to time (ideally in CI/CD) to keep things linted and validated.&lt;/p&gt;

&lt;p&gt;As for the actual Tekton best practices - I could give you a huge list, but it would be mostly just things recommended by Tekton maintainers, so instead of copy-pasting it here, I will just point you to the relevant resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tektoncd/catalog/blob/master/recommendations.md"&gt;Task Authoring Recommendations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tektoncd/community/blob/main/design-principles.md"&gt;Tekton Design Principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tektoncd/catalog/blob/master/CONTRIBUTING.md#guidelines"&gt;Tekton Contributing Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;In this article we saw how flexible and versatile Tekton is and with this flexibility also comes complexity of building or testing Tasks. Therefore, it's very much preferable to use existing Tasks created by community, rather then try to reinvent a wheel yourself. If there's however no suitable Task available and you have to build your own, make sure you write tests for your Tasks and follow best practices mentioned above to keep your Tasks maintainable and reliable.&lt;/p&gt;

&lt;p&gt;After this article we should have enough experience as well as bunch of individual custom Tasks which we can use to start composing our pipelines. And that's exactly what we're going to do in the next article in these series, where we will explore how to build fully-featured pipelines to build, deploy, test your applications and much more.&lt;/p&gt;

&lt;p&gt;Also if you haven't done so yet, make sure you checkout &lt;a href="https://github.com/MartinHeinz/tekton-kickstarter"&gt;tekton-kickstarter repository&lt;/a&gt; where you can find all the Tasks and examples from this article as well as the pipelines you will see in the next one. ğŸ˜‰&lt;/p&gt;

</description>
      <category>devops</category>
      <category>cicd</category>
      <category>kubernetes</category>
      <category>linux</category>
    </item>
    <item>
      <title>Free Code tutorials and where to find them.</title>
      <author>Chris Jarvis</author>
      <pubDate>Wed, 14 Apr 2021 15:37:13 +0000</pubDate>
      <link>https://dev.to/jarvisscript/free-code-tutorials-and-where-to-find-them-591l</link>
      <guid>https://dev.to/jarvisscript/free-code-tutorials-and-where-to-find-them-591l</guid>
      <description>&lt;p&gt;It's April and one of the code sites is offering free use of it's content for the month. So I decided to make a list of some of the free code tutorial sites. This is not a full list but just some of the places I've used to learn. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.pluralsight.com/"&gt;Plurasight&lt;/a&gt; is free for the month. Why free? to get people to use their site and hopefully sign up for subscriptions. There is some great content here. This week I'm learning React by building a game. Earlier I watched some Accessibility videos. It didn't have hands on on exercises but the videos are good references.&lt;/p&gt;

&lt;p&gt;Check out #freeApril, while it lasts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.codecademy.com/"&gt;Codecademy&lt;/a&gt; has a free tier and a PRO tier. I have used Codecademy several times in my software journey. Most recently for React lessons. It's good to use different sources to learn. The different views points might fill in gaps others left or explain something in a way that "clicks" better with you. &lt;br&gt;
Codecademy has nice interactive lessons that helps debug you code. You can set your own goals and earn badges. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://wesbos.com/courses/"&gt;Wes Bos&lt;/a&gt; also has free and paid courses. His free courses cover JavaScript, CSS, and markdown. JavaScript30 is a 30 day challenge of vanilla JavaScript. Mastering Markdown is a good primer for using markdown. I picked up a few tips for it for this blog. He has Grid and Flexbox lessons as well. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/"&gt;FreeCodeCamp&lt;/a&gt; is always free. I built some python games using their videos. But those were videos FreeCodeCamp Shared on YouTube. I have not used their full certification site. I just wanted to build something and a duckduckgo search sent me to YouTube. Which leads us to YouTube.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/results?search_query=javascript"&gt;YouTube&lt;/a&gt; There's some great content on here as well. Many developers have their own channels. So search and see who you can find. It's not interactive like some of the other tutorials but there are videos where you can code along and build what they build.&lt;/p&gt;

&lt;p&gt;That's my quick list of free tutorial sites. Use different sites to get different looks at a language. After you build a few things test your knowledge on some code challenge sites. Which sounds like a good topic for another post.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Â¿CÃ³mo limpiar los archivos Temporales en Windows 10?</title>
      <author>Francisco</author>
      <pubDate>Wed, 14 Apr 2021 15:00:53 +0000</pubDate>
      <link>https://dev.to/franciscode/como-limpiar-los-archivos-temporales-en-windows-10-2197</link>
      <guid>https://dev.to/franciscode/como-limpiar-los-archivos-temporales-en-windows-10-2197</guid>
      <description>&lt;h1&gt;
  &lt;a href="#tempcleaner"&gt;
  &lt;/a&gt;
  TempCleaner
&lt;/h1&gt;

&lt;p&gt;En esta guÃ­a te mostrarÃ© como limpiar tu PC y borrar tus archivos temporales de distintas maneras.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Antes de Comenzar, aclaro, que esta guÃ­a esta hecha para el sistema operativo &lt;strong&gt;Windows 10&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#requerimientos"&gt;
  &lt;/a&gt;
  Requerimientos
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Tener un sistema operativo Windows 10&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#m%C3%A9todo-1"&gt;
  &lt;/a&gt;
  MÃ©todo 1
&lt;/h2&gt;

&lt;p&gt;Lo que deberemos hacer en este mÃ©todo es tener encendido nuestro Dispositivo (NÃ³tese que es algo obvio) y utilizar la combinaciÃ³n de teclas &lt;strong&gt;Windows + R&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Esto nos abrira una pestaÃ±a asÃ­:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uROdiI0e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77551844/114279465-d17a5700-9a02-11eb-905f-6e6ff38561eb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uROdiI0e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77551844/114279465-d17a5700-9a02-11eb-905f-6e6ff38561eb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Consiguiente a esto escribiremos en el cuadro de diÃ¡logo lo siguiente:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;%TEMP%&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Nos quedara algo como lo siguiente&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3bX740h7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77551844/114281129-a5fb6a80-9a0a-11eb-8159-237236aec254.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3bX740h7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77551844/114281129-a5fb6a80-9a0a-11eb-8159-237236aec254.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Despues de esto deberemos darle en "Aceptar" o simplemente presionar la tecla Enter.&lt;/p&gt;

&lt;p&gt;Nos Abrira una carpeta con bastantes archivos&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pt595h83--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77551844/114281161-cb887400-9a0a-11eb-8661-ce62b027b30f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pt595h83--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77551844/114281161-cb887400-9a0a-11eb-8661-ce62b027b30f.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nota: Si tienes pocos archivos o ninguno, es porque esta limpia la carpeta.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Despues de estar adentro, seleccionaremos todos los archivos de la carpeta&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ieNXCBNM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77551844/114281210-16a28700-9a0b-11eb-8301-be797dc0e882.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ieNXCBNM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77551844/114281210-16a28700-9a0b-11eb-8301-be797dc0e882.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Le daremos click derecho&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bBwyQ9o---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77551844/114281229-3043ce80-9a0b-11eb-9f41-851188d3bcf3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bBwyQ9o---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77551844/114281229-3043ce80-9a0b-11eb-9f41-851188d3bcf3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Y por Ãºltimo le daremos al boton de Eliminar&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vhxwxXOL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77551844/114281309-a0525480-9a0b-11eb-90b3-47d0bb2e0d23.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vhxwxXOL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77551844/114281309-a0525480-9a0b-11eb-90b3-47d0bb2e0d23.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nota: Puede que hayan algunos archivos que no se hayan borrado, esto es normal ya que algunos podrÃ­an ser parte de procesos del sistema.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#m%C3%A9todo-2"&gt;
  &lt;/a&gt;
  MÃ©todo 2
&lt;/h2&gt;

&lt;p&gt;Para este metodo utilizaremos un archivo creado por mÃ­ que limpia los archivos temporales automaticamente al ejecutarse.&lt;/p&gt;

&lt;p&gt;Obviamente debes tenerlo descargado, a continuaciÃ³n dos maneras de descargarlo.&lt;/p&gt;

&lt;p&gt;1.- Descargandolo por Mediafire&lt;/p&gt;

&lt;p&gt;Este paso es bastante sencillo, simplemente da click &lt;a href="https://www.mediafire.com/file/s0iglajgu4s6wis/Temporary+Cleanser.bat/file"&gt;aquÃ­&lt;/a&gt;&lt;br&gt;
El archivo simplemente pesa 756 bytes, lo cual es la nada misma.&lt;/p&gt;

&lt;p&gt;2.- Clonando el repositorio&lt;/p&gt;

&lt;p&gt;Para este paso deberas tener instalado Git.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nota: Si no sabes como instalarlo, aqui te dejo un &lt;a href="https://medium.com/laboratoria-how-to/c%C3%B3mo-instalar-git-368c78187b51#:~:text=Para%20empezar%2C%20entra%20a%20la,bot%C3%B3n%20de%20Downloads%20for%20Windows.&amp;amp;text=Una%20vez%20descargada%2C%20dale%20click,cual%20debemos%20responder%20que%20s%C3%AD."&gt;tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Primero nos dirigiremos al escritorio con:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd desktop&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Y luego clonaremos el repositorio con:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git clone https://github.com/FrancisCode13/TempCleaner&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ahora tendremos el repositorio en nuestro escritorio&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IWIRNPqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77551844/114281625-5b2f2200-9a0d-11eb-84a9-b37960cb265b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IWIRNPqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77551844/114281625-5b2f2200-9a0d-11eb-84a9-b37960cb265b.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Consiguiente a esto, entraremos en la carpeta, y podremos observar 2 archivos (La aplicaciÃ³n y este archivo que estas leeyendo y la carpeta de git) , Ignoraremos por completo el Readme y la carpeta de Git y Abriremos el archivo .bat&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e1VSAba5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77551844/114281646-8b76c080-9a0d-11eb-9a61-e2e4770b855b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e1VSAba5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77551844/114281646-8b76c080-9a0d-11eb-9a61-e2e4770b855b.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nos abrira el Simbolo del Sistema con lo siguiente:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TmzPbheX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77551844/114731000-5de08e80-9d0f-11eb-8b89-fb6225f673c3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TmzPbheX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77551844/114731000-5de08e80-9d0f-11eb-8b89-fb6225f673c3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cabe aclarar que tanto en el Temp como en el Prefetch hay archivos temporales, una vez aclaro esto continuemos&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ahora simplemente escribiremos&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1&lt;/code&gt; y le daremos a la tecla Enter&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cFOHYjcC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77551844/114731363-b0ba4600-9d0f-11eb-8524-974bc4036a65.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cFOHYjcC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77551844/114731363-b0ba4600-9d0f-11eb-8524-974bc4036a65.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nos aparecera algo como lo siguiente:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z8-4yfXz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77551844/114731429-be6fcb80-9d0f-11eb-8e22-caf0dca2c1dd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z8-4yfXz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77551844/114731429-be6fcb80-9d0f-11eb-8e22-caf0dca2c1dd.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aunque no se demuestre el archivo Batch a logrado exitosamente la tarea, para asegurarnos comprobemos la carpeta Temp&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N7_xz84N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77551844/114731713-f6770e80-9d0f-11eb-878c-9af08b150c72.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N7_xz84N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/77551844/114731713-f6770e80-9d0f-11eb-878c-9af08b150c72.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Podemos notar que hay algunos archivos, esto no es ningÃºn error, ya que algunos archivos no se borran ya que son propios del sistema.&lt;/p&gt;

&lt;p&gt;Gracias por ver esta GuÃ­a :)&lt;/p&gt;

</description>
      <category>systems</category>
      <category>techtalks</category>
    </item>
    <item>
      <title>3 inspirational Podcasts for Entrepreneurs on Youtube</title>
      <author>ArjunPatel33</author>
      <pubDate>Wed, 14 Apr 2021 15:00:33 +0000</pubDate>
      <link>https://dev.to/arjunpatel/3-inspirational-podcasts-for-entrepreneurs-on-youtube-ea6</link>
      <guid>https://dev.to/arjunpatel/3-inspirational-podcasts-for-entrepreneurs-on-youtube-ea6</guid>
      <description>&lt;p&gt;Do you know what is the second most used search engine after Google? That's YouTube for you! With tens of thousands of videos uploading every hour on YouTube, there is so much content on the platform that would be incomprehensible for a human mind. From sports to science, to cooking tips, and much much more, this video streaming platform is extremely helpful for people who know how to use it to their own advantage.&lt;/p&gt;

&lt;p&gt;Now when I say for their own advantage, it is to learn something. YouTube is flooded with so much good and quality content that you wouldn't even find this many options anywhere (for free of course!). Many YouTubers are constantly adding content based on their area of interest and the skill they want to target. Each video is completely free and the only requirement that you need to access this pool of good content is a Google+ account. That's it.&lt;/p&gt;

&lt;p&gt;For entrepreneurs, YouTube is a great place to gain knowledge of the current business trend and what skill they need to have in this competing marketplace. Most people don't understand the usefulness of YouTube and often waste its potential in watching irrelevant content. If you ask anyone at the top of their field how they achieved success in business, you will find a common pattern of constant hard work, struggle, dedication, and most importantly, self-education.&lt;/p&gt;

&lt;p&gt;Books, audio, blog posts, and experience are usually enough for a self-taught entrepreneur to gain valuable insights. However, using YouTube to watch fellow successful entrepreneurs share their stories has its own distinct value. The only issue with this approach is how to search for good podcasts on YouTube?&lt;/p&gt;

&lt;p&gt;Fortunately for you, we have done the hard work of finding the 3 best YouTube podcasts for entrepreneurs. Follow these podcasts to increase your knowledge in the ever-changing business world.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Startup&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;In this last season of the series, &lt;a href="https://www.youtube.com/channel/UCZXXR3M79-jjoTKrFz9BiyQ"&gt;Startup&lt;/a&gt; is Gimlet Mediaâ€™s CEO Alex Blumbergâ€™s take on the successes and pitfalls of running his media company. Having sold to Spotify earlier this year, this final season looks at the intersection of art and money and how one values each.&lt;/p&gt;

&lt;p&gt;That value changes, you find out, when you have your employeesâ€™ fates in your hands.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I0NeJvnS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cq12qkopn0yi9qsw6ksb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I0NeJvnS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cq12qkopn0yi9qsw6ksb.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Becoming Great&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://great.com/erik/"&gt;Erik Bergman&lt;/a&gt; is very popular in the marketing world, he made more than $50 million before he even turned 30. With his Casino affiliate Catena Media he took the world by storm and took it to the stock exchange with a valuation of more than $200 million.&lt;/p&gt;

&lt;p&gt;In 2017 Erik left his business to start great.com. Itâ€™s also an Online Casino Affiliate company but with the goal of giving away 100% of its profit to prevent the climate change crisis! What a nice guy.&lt;/p&gt;

&lt;p&gt;His &lt;a href="https://great.com/becoming-great/"&gt;Becoming Great&lt;/a&gt; podcast is one of the better ones on the internet, where he is a co-host along with Emil Ekvardt who is a professional poker player who made over $1 million before the age of 25.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3hhm3sgP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31edjrqm3aod64t69pss.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3hhm3sgP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31edjrqm3aod64t69pss.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Start With This&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.nightvalepresents.com/startwiththis"&gt;Start With This&lt;/a&gt; is not just a regular podcast, it also serves as a creative playground. Overall, the show is designed to encourage listeners to think about, talk about, and make art.&lt;/p&gt;

&lt;p&gt;The hosts, Jeffrey Cranor and Joseph Fink (creators of Welcome to Night Vale) focus on a topic in each episode and end it with two assignments â€” something to create and something to consume.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h1btSuYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tavw3poaa5x8ty446y5s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h1btSuYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tavw3poaa5x8ty446y5s.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>youtube</category>
      <category>podcast</category>
      <category>top5</category>
      <category>entrepreneurs</category>
    </item>
    <item>
      <title>Talk Notes: 'Talmudic Gems For Rails Developers' (RailsConf 2021)</title>
      <author>Sylwia Vargas</author>
      <pubDate>Wed, 14 Apr 2021 14:49:24 +0000</pubDate>
      <link>https://dev.to/sylwiavargas/talk-notes-talmudic-gems-for-rails-developers-railsconf-2021-3a9n</link>
      <guid>https://dev.to/sylwiavargas/talk-notes-talmudic-gems-for-rails-developers-railsconf-2021-3a9n</guid>
      <description>&lt;p&gt;âœ¨ &lt;strong&gt;What is this post about&lt;/strong&gt;: As a part of my professional growth, I make time to watch conference talks on Ruby, Rails, JS, React, tech writing, and tech trivia. Previously, I'd just watch them but now I will take and publish notes for future reference. This talk was a part of RailsConf 2021 that I'm participating in at the time of writing. &lt;/p&gt;

&lt;p&gt;âœ¨ &lt;strong&gt;Talk:&lt;/strong&gt; 'Talmudic Gems For Rails Developers' by &lt;a href="https://twitter.com/yechielk"&gt;Yechiel Kalmenson&lt;/a&gt;, or &lt;a class="mentioned-user" href="https://dev.to/yechielk"&gt;@yechielk&lt;/a&gt;
 &lt;/p&gt;

&lt;p&gt;âœ¨ &lt;strong&gt;One-paragraph summary&lt;/strong&gt;: Am I my colleagueâ€™s keeper? To what extent are we responsible for the consequences of our code? More than two thousand years ago conversations on central questions of human ethics were enshrined in one of the primary ancient wisdom texts, the Talmud.&lt;/p&gt;

&lt;p&gt;âœ¨ &lt;strong&gt;Impression&lt;/strong&gt;:  I absolutely LOVED this talk and I will reference it often moving forward. I loved how Yechiel was calm and funny and smart and knowledgeable, how the talk was well-organized, and how much I have learned from it ğŸ’•&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#intro"&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#parallels-between-talmudic-studies-and-programming"&gt;Parallels between Talmudic studies and programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#read-more"&gt;Read more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Talmud&lt;/strong&gt;: a written record of the conversations between ancient Jewish sages; it's a living document; you can put yourself in between the debates; 
&amp;gt; "it's like an ancient twitter thread" ğŸ˜‚&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#parallels-between-talmudic-studies-and-programming"&gt;
  &lt;/a&gt;
  Parallels between Talmudic studies and programming
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;similarities for starters:

&lt;ul&gt;
&lt;li&gt;teasing out the abstraction from a specific example&lt;/li&gt;
&lt;li&gt;highly analytical with a strong creative component&lt;/li&gt;
&lt;li&gt;require prolonged concentration ("being in the zone")&lt;/li&gt;
&lt;li&gt;similarities in method&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;How to grow ourselves&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"Appoint For Yourself A Mentor, And Acquire For Yourself A Companion" &lt;a href="https://www.sefaria.org/Pirkei_Avot.1.6?lang=bi&amp;amp;with=all&amp;amp;lang2=en"&gt;Avot 1:6&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;We all owe our knowledge to books and courses -- we all depend on others to be where we are (and to provide a sanity check)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;How do we find a mentor&lt;/strong&gt;: Yechiel's relationships started more organically, someone he knew and reached out for feedback or for advice&lt;/li&gt;
&lt;li&gt;"One who is timid cannot learn, nor can an impatient person teach" &lt;a href="https://www.sefaria.org/Pirkei_Avot.2.5?lang=bi&amp;amp;with=all&amp;amp;lang2=en"&gt;Avot 2:5&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;do ask if you have a question! approach people!&lt;/li&gt;
&lt;li&gt;surround yourself with people who are like yourself; do pair-program with others;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;chavruta&lt;/strong&gt;: a way of studying Talmud between two people who bounce ideas off each other (just like pair-programming), helping each other grow and teaching each other; &lt;a href="https://www.chabad.org/library/article_cdo/aid/1144871/jewish/Chavruta-Learning-Torah-in-Pairs.htm"&gt;see here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;"Do Not Separate Yourself From The Community" &lt;a href="https://www.sefaria.org/Pirkei_Avot.2.4?lang=bi&amp;amp;with=all&amp;amp;lang2=en"&gt;Avot 2:4&lt;/a&gt;: participate in events, share resources, talk, be active&lt;/li&gt;
&lt;li&gt;consistency: Yechiel does not condone #100DaysOfCode, &lt;a href="https://blog.yechiel.me/100days0fcode-c32a5a1e1ef1?gi=960d195b7af8"&gt;he wanted to rename it to #86DaysOfCode&lt;/a&gt;, which leaves one day for mental health to not burn out; &lt;/li&gt;
&lt;li&gt;"One who reviews their studies one hundred times is not comparable to one who reviews their studies one hundred and one times" &lt;a href="https://www.sefaria.org/Chagigah.9b.10?lang=bi&amp;amp;with=all&amp;amp;lang2=en"&gt;Chagigah 9b&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;"When I did the #100DaysOfCode challenge, where I really noticed the growth was not on the 100th day when I sat down and coding was natural. I didn't have to force myself. By doing something over and over and over again, you build habits, you make it a part of you and that's where the true growth happens"&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;How to grow our team&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mentor others: paying it forward, helping others, investments; but&lt;/li&gt;
&lt;li&gt;"I have learned much from my teachers.. but from my students, I have learned more than from all of them" &lt;a href="https://www.sefaria.org/Taanit.7a.12?lang=bi&amp;amp;with=all&amp;amp;lang2=en"&gt;Ta'anit 7a&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;"If you only know Aleph, teach Aleph!" The Lubavitcher Rebbe -&amp;gt; find someone who doesn't know Aleph and teach them Aleph&lt;/li&gt;
&lt;li&gt;If you can't mentor others, blog it out! There's no reason not to!&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;How to grow the world around us&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we are all in it together&lt;/li&gt;
&lt;li&gt;"Just-World Fallacy": we assume that if someone is down the luck, we assume that they deserve it&lt;/li&gt;
&lt;li&gt;"Error messages" are your friends, they tell you what's broken and what you can fix&lt;/li&gt;
&lt;li&gt;"In programming, you spend the majority of your time with things being broken. Hell, if it worked  you'd be done programming" Steve Klabnik&lt;/li&gt;
&lt;li&gt;MINASWAN - Matz Is Nice, And So Are We&lt;/li&gt;
&lt;li&gt;A nice shout-out to Ben Greenberg ( &lt;a class="mentioned-user" href="https://dev.to/bengreenberg"&gt;@bengreenberg&lt;/a&gt;
 ) and Ariel Caplan ( &lt;a class="mentioned-user" href="https://dev.to/amcaplan"&gt;@amcaplan&lt;/a&gt;
 ) for inclusive PRs to Rails repo&lt;/li&gt;
&lt;li&gt;CHECK OUT &lt;a href="https://www.sefaria.org/Bava_Batra.10a.2?lang=bi&amp;amp;with=all&amp;amp;lang2=en"&gt;THIS WONDERFUL STORY ABOUT DRILLING A WHOLE UNDER ONE'S SEAT ON A BOAT&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;"It is not your duty to finish the work, but neither are you at liberty to neglect it" &lt;a href="https://www.sefaria.org/Pirkei_Avot.2.16?lang=bi&amp;amp;with=all&amp;amp;lang2=en"&gt;Avot 2:16&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#read-more"&gt;
  &lt;/a&gt;
  Read more
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://torahandtech.dev/"&gt;Torah &amp;amp;&amp;amp; Tech&lt;/a&gt; - Yechiel's and Ben Greenberg's newsletter that I love dearly&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chabad.org/library/article_cdo/aid/1144871/jewish/Chavruta-Learning-Torah-in-Pairs.htm"&gt;chvruta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://blog.yechiel.me/100days0fcode-c32a5a1e1ef1?gi=960d195b7af8"&gt;Introducing #86DaysOfCode&lt;/a&gt; by Yechiel&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>rails</category>
      <category>techtalks</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Wireworld! Svelte Edition </title>
      <author>Nathan Kallman</author>
      <pubDate>Wed, 14 Apr 2021 14:49:02 +0000</pubDate>
      <link>https://dev.to/kallmanation/wireworld-svelte-edition-1lgj</link>
      <guid>https://dev.to/kallmanation/wireworld-svelte-edition-1lgj</guid>
      <description>&lt;p&gt;This is Wireworld! Sorry, you don't know what a Wireworld is? How dare you not intimately know something I learned a few minutes ago!&lt;/p&gt;

&lt;p&gt;A Wireworld is similar to the famous &lt;a href="https://playgameoflife.com"&gt;Game of Life&lt;/a&gt;. An infinite world of square cells, each in a distinct, finite state. But unlike boring life that has only two states: alive and dead; Wireworld has four! That's like... twice as good?&lt;/p&gt;

&lt;p&gt;A Wireworld cell could either be: nothing, a conductor (wire), an electron tail, or an electron head. An electron head always becomes an electron tail which always becomes a wire, while a wire will stay a wire unless exactly one or two neighbors are an electron head, in which case it will follow suit (and nothing continues to be nothing).&lt;/p&gt;

&lt;p&gt;You can see those rules in action in the animation above. You can also play with those rules over here: &lt;a href="https://wireworld.klmntn.com"&gt;wireworld.klmntn.com&lt;/a&gt; (warning, it's only somewhat useable on mobile)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-making-of"&gt;
  &lt;/a&gt;
  The Making Of
&lt;/h1&gt;

&lt;p&gt;Every three months, &lt;a href="https://root.engineering"&gt;Root&lt;/a&gt; sets aside three days (called "hack days") for all its engineers to work on something of their choice. This time around I wanted to have some fun and also learn a little about &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt; (Root mostly uses React &amp;amp; React Native). So I chose to make a browser-based Wireworld using Svelte!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/kallmanation"&gt;
        kallmanation
      &lt;/a&gt; / &lt;a href="https://github.com/kallmanation/wireworld"&gt;
        wireworld
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A Wireworld (duh)
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Wireworld&lt;/h1&gt;
&lt;p&gt;A &lt;a href="https://en.wikipedia.org/wiki/Wireworld" rel="nofollow"&gt;Wireworld&lt;/a&gt; is a &lt;a href="https://en.wikipedia.org/wiki/Cellular_automaton" rel="nofollow"&gt;cellular automaton&lt;/a&gt; (like Conway's Game of Life) with four states:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;wire&lt;/li&gt;
&lt;li&gt;electron head&lt;/li&gt;
&lt;li&gt;electron tail&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These four states transition by the following rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;null -&amp;gt; null&lt;/li&gt;
&lt;li&gt;tail -&amp;gt; wire&lt;/li&gt;
&lt;li&gt;head -&amp;gt; tail&lt;/li&gt;
&lt;li&gt;wire -&amp;gt; head (iff exactly 1 or 2 &lt;a href="https://en.wikipedia.org/wiki/Moore_neighborhood" rel="nofollow"&gt;neighbors&lt;/a&gt; are an electron head)&lt;/li&gt;
&lt;li&gt;wire -&amp;gt; wire (otherwise)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Wireworlds are Turing-complete and are interesting in that they can so closely mirror digital transistor behavior with such simple rules.&lt;/p&gt;
&lt;p&gt;This is an implementation of a Wireworld and can be found at &lt;a href="https://wireworld.klmntn.com" rel="nofollow"&gt;wireworld.klmntn.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/kallmanation/wireworld"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#decisions-decisions-decisions"&gt;
  &lt;/a&gt;
  Decisions, Decisions, Decisions
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#framework"&gt;
  &lt;/a&gt;
  Framework
&lt;/h3&gt;

&lt;p&gt;How did I settle on Svelte? I'm already working in React and Vue and have worked a little with Ember long ago (I've even played with the now abandoned &lt;a href="https://github.com/intercellular/cell"&gt;Cell.js&lt;/a&gt;). Angular seems to be a different flavor of the React/Vue/Ember gang. Svelte though looks to have some novel ideas that I wanted to expose myself to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#graphics"&gt;
  &lt;/a&gt;
  Graphics
&lt;/h3&gt;

&lt;p&gt;There's really only three options for displaying anything on web:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;HTML + CSS&lt;/li&gt;
&lt;li&gt;SVG (+ light CSS)&lt;/li&gt;
&lt;li&gt;Canvas&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The nature of a Wireworld's rendering requirements makes HTML + CSS a no-go. Canvas honestly might be the most appropriate as it can be optimized for high-frequency re-rendering. But future things I'd like to build would work well in SVG and I've already played with Canvas in the past, so I wanted to learn about graphics in SVG!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#world-loop"&gt;
  &lt;/a&gt;
  World Loop
&lt;/h3&gt;

&lt;p&gt;At the base of the simulation, something will need to decide what the next state should be based on the current state. This could be done in a procedural way with a switch / ifs or functional way or object-oriented. I've &lt;a href="https://dev.to/kallmanation/oop-vs-fp-a-comparison-using-unconditional-fizzbuzz-29i0"&gt;written about the similarities and differences before&lt;/a&gt;. I chose an object-oriented approach where each cell will be an object that responds to &lt;code&gt;nextState&lt;/code&gt;; call &lt;code&gt;nextState&lt;/code&gt; on all the cells and the world's next state has been found.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-learned"&gt;
  &lt;/a&gt;
  What I Learned
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#svg-just-works"&gt;
  &lt;/a&gt;
  SVG Just Works
&lt;/h3&gt;

&lt;p&gt;And by this I mean two things. First, SVG does not present a lot to learn above and beyond HTML + CSS (compared to the whole drawing API of a Canvas). I just put SVG tags right into Svelte components and, &lt;em&gt;bang,&lt;/em&gt; graphics.&lt;/p&gt;

&lt;p&gt;Second, SVG solves some of my biggest pains of drawing on Canvas. On Canvas, everything needs to be constantly erased and redrawn and if I ever want to move my viewport I'll need to do all the math to scale and translate my graphics (or learn and use another library to do it for me). With SVG, one &lt;code&gt;viewBox&lt;/code&gt; attribute on the top &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; tag handles all the scaling and translations (written by people who know a lot more about graphics than I do &lt;em&gt;and&lt;/em&gt; offloaded to the browser so no JS needs spend time on those calculations).&lt;/p&gt;

&lt;p&gt;Unless you have a very high paced game or some 3D graphics to render, I would recommend going down the SVG road.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#svelte-stores-are-great"&gt;
  &lt;/a&gt;
  Svelte Stores are Great
&lt;/h3&gt;

&lt;p&gt;I've always heard that Svelte is good because it compiles down to vanilla JavaScript not needing virtual DOM, making it faster. But the state management available with Svelte's stores is fantastic (suck it Redux). The derived stores open even more possibilities. But by far my favorite are the custom stores: I absolutely love the patterns that opens up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-state-of-capturing-input-sucks"&gt;
  &lt;/a&gt;
  The State of Capturing Input Sucks
&lt;/h3&gt;

&lt;p&gt;I had no idea how bad listening for things like key presses and dragging events are today. Given how nice and fairly standard a lot of the APIs across browsers and platforms have become, I was shocked at how rough this space is. I think if I had to do this again, this will be one area where I defer to a library (like &lt;a href="https://hammerjs.github.io"&gt;hammer.js&lt;/a&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#svelte-seems-to-be-lacking-tutorials"&gt;
  &lt;/a&gt;
  Svelte Seems to be Lacking Tutorials
&lt;/h3&gt;

&lt;p&gt;There's plenty of &lt;em&gt;examples&lt;/em&gt; over on the &lt;a href="https://svelte.dev/repl/hello-world"&gt;REPL&lt;/a&gt; site. But those examples have next to no explanation on how they work; nearly every search I tried led me to one of those examples, so it was a bit of work piecing the things together, looking at docs, and doing experiments to get things working.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wireworlds-like-to-light-on-fire"&gt;
  &lt;/a&gt;
  Wireworlds Like to Light On Fire
&lt;/h3&gt;

&lt;p&gt;Very often a misplaced wire or extra spark will cause my whole creation to devolve into closely packed electrons shooting every which way. This happens shockingly easily and I think makes a wonderful allegory to why our real computers are so hard to make and keep working correctly.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#things-to-make-and-do-in-a-wireworld"&gt;
  &lt;/a&gt;
  Things To Make and Do in a Wireworld
&lt;/h1&gt;

&lt;p&gt;If you just want to go play with it now: &lt;a href="https://wireworld.klmntn.com"&gt;wireworld.klmntn.com&lt;/a&gt;. First, go check out the few &lt;a href="https://wireworld.klmntn.com/examples"&gt;examples&lt;/a&gt; already included. A main building block in Wireworlds is the "transistor":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V7jxXRmO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wt99farh3a23fag0if55.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V7jxXRmO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wt99farh3a23fag0if55.gif" alt="Animation of a Wireworld Transistor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like a real &lt;a href="http://www.cburch.com/logisim/docs/2.7/en/html/libs/wiring/transist.html"&gt;P-type&lt;/a&gt; transistor; our Wireworld transistor allows the signal to pass when nothing is on the gate, but blocks the signal when the gate is "on" (it even looks like a transistor diagram).&lt;/p&gt;

&lt;p&gt;The next piece used in most designs is a signal generator:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1S4mPF5C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q0fdceai6gpcwnfvfbv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1S4mPF5C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q0fdceai6gpcwnfvfbv.gif" alt="Animation of a Signal Generator in a Wireworld"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Any loop of any shape with an electron moving around it can continuously emit electrons at a regular interval.&lt;/p&gt;

&lt;p&gt;And go have fun! Export your creations and comment below.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>svelte</category>
      <category>cellularautomaton</category>
    </item>
    <item>
      <title>JavaScript Interview Question #32: 0.1 + 0.1 + 0.1 === 0.3</title>
      <author>Coderslang: Become a Software Engineer</author>
      <pubDate>Wed, 14 Apr 2021 14:47:43 +0000</pubDate>
      <link>https://dev.to/coderslang/javascript-interview-question-32-0-1-0-1-0-1-0-3-4ebn</link>
      <guid>https://dev.to/coderslang/javascript-interview-question-32-0-1-0-1-0-1-0-3-4ebn</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rEpre1Ql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-32.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rEpre1Ql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-32.png" alt="js-test-32"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What will be logged to the console?&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;At a first glance, the answer is &lt;code&gt;true&lt;/code&gt; as &lt;code&gt;0.1 + 0.1 + 0.1&lt;/code&gt; is obviously equal to &lt;code&gt;0.3&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;But thatâ€™s only before we get into the details of how the numbers are represented in JavaScript.&lt;/p&gt;

&lt;p&gt;If you try to execute the statement &lt;code&gt;console.log(0.1 + 0.2)&lt;/code&gt; in JS, youâ€™ll get a number &lt;code&gt;0.30000000000000004&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This happens because in JavaScript and quite a few other programming languages some decimal numbers can't be represented exactly as they are.&lt;/p&gt;

&lt;p&gt;For example &lt;code&gt;0.1&lt;/code&gt; in binary will result in an endless fraction, the same way as &lt;code&gt;1/3&lt;/code&gt; becomes &lt;code&gt;0.333(3)&lt;/code&gt; in the decimal number system.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;ANSWER&lt;/strong&gt;: &lt;code&gt;false&lt;/code&gt; will be logged to the console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://js.coderslang.com/sign-in"&gt;Learn Full-Stack JavaScript&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Why you should stop z-index:9999</title>
      <author>FÃ¡bio Borges</author>
      <pubDate>Wed, 14 Apr 2021 14:41:50 +0000</pubDate>
      <link>https://dev.to/fborges42/why-you-should-stop-z-index-9999-56mj</link>
      <guid>https://dev.to/fborges42/why-you-should-stop-z-index-9999-56mj</guid>
      <description>&lt;p&gt;Sometimes you just need to handle your custom modal depth, or maybe you had to deal with sticky positioning. We've all been there and there are better ways of achieving this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dleiL3Pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3omvlqlc6coydg3mqksi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dleiL3Pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3omvlqlc6coydg3mqksi.png" alt="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3omvlqlc6coydg3mqksi.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h1&gt;

&lt;p&gt;So I guess you went too far with it, and now you don't actually know what's the difference between &lt;code&gt;z-index:549&lt;/code&gt; and &lt;code&gt;z-index:329&lt;/code&gt;. And why the heck is this table button &lt;code&gt;z-index:9999&lt;/code&gt;? &lt;em&gt;It's ruining my modal!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I won't get too much on the problem side, I guess if you're here you probably know what's happening, and you just need a better approach so let me try and show you different ways of fixing this.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#solutions"&gt;
  &lt;/a&gt;
  Solutions
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ny0Na9JQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4swppfp215qfmuwtc1y4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ny0Na9JQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4swppfp215qfmuwtc1y4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's say, for the sake of simplicity, that we have 3 levels of depth: &lt;strong&gt;base&lt;/strong&gt;, &lt;strong&gt;footer&lt;/strong&gt;, and &lt;strong&gt;modal&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-css-var-approach-kiss"&gt;
  &lt;/a&gt;
  The CSS var approach (&lt;a href="https://en.wikipedia.org/wiki/KISS_principle"&gt;KISS&lt;/a&gt;)
&lt;/h2&gt;

&lt;p&gt;Here we just store those 3 index, so we can use them later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--footer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--modal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then we can just fetch anywhere in the project like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.table&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;var(--base);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.modal&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;var(--modal)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might need to use CSS vars to be able to manipulate them in JavaScript but in this scenario it's not clear what's inside those variables, and they will be easily lost between many others you might have, maybe a preprocessor could help.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;More on the 100 range gaps next.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-a-preprocessor-sass"&gt;
  &lt;/a&gt;
  Using a preprocessor (&lt;a href="https://sass-lang.com/"&gt;SASS&lt;/a&gt;)
&lt;/h2&gt;

&lt;p&gt;Same idea here but maybe a bit more organized. The idea here is to store those default values inside the &lt;code&gt;$zindex&lt;/code&gt; variable that we can access and manage it better.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="nv"&gt;$zindex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="na"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To fetch the values we can use &lt;a href="https://sass-lang.com/documentation/values/maps"&gt;maps&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="nc"&gt;.modal&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;map-get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$zindex&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.footer&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;map-get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$zindex&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#but-why-the-heck-are-we-gapping-100-values"&gt;
  &lt;/a&gt;
  But why the heck are we gapping 100 values?
&lt;/h2&gt;

&lt;p&gt;Sometimes you might even see it in 1000 range gaps, but the main reason for this is just in case you need to add something in between and since &lt;code&gt;z-index&lt;/code&gt; can't handle decimal numbers you're safer doing it this way.&lt;br&gt;
&lt;em&gt;Even if you don't add 99 extra items between depth.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-funky-with-it"&gt;
  &lt;/a&gt;
  Getting funky with it
&lt;/h2&gt;

&lt;p&gt;Unless you're doing a tiny project you'll probably need to deal with a lot of deeper depth levels, but that's not a problem.&lt;/p&gt;

&lt;p&gt;Since we have default values for all the depths lets think in a scenario where you might have the need to have way more management over a modal. Here's what we can do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="nv"&gt;$zindex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="na"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="na"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;210&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;220&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;230&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;),&lt;/span&gt;
&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="nc"&gt;.modal&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;map-get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$zindex&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;

  &lt;span class="nc"&gt;.modal__btn--close&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;map-get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$zindex&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;modal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;...&lt;/span&gt; 
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;There's a lot more ways of handling &lt;code&gt;z-index&lt;/code&gt; you just need to get creative and keep things organized. It's pretty clear we can all do a better job with it. &lt;/p&gt;

&lt;p&gt;Do you have a different or easier way of doing it? Let others know on the comments!&lt;/p&gt;

&lt;p&gt;I hope this could help someone out. Cheers, see you soon!&lt;/p&gt;

&lt;p&gt;Special thanks to &lt;a href="https://unsplash.com/@didsss"&gt;https://unsplash.com/@didsss&lt;/a&gt; for the header image :)&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
