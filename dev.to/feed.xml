<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Level up with The Relicans at FutureStack</title>
      <author>Mia Moore</author>
      <pubDate>Tue, 04 May 2021 21:18:28 +0000</pubDate>
      <link>https://dev.to/newrelic/level-up-with-the-relicans-at-futurestack-139i</link>
      <guid>https://dev.to/newrelic/level-up-with-the-relicans-at-futurestack-139i</guid>
      <description>&lt;p&gt;I am excited to personally invite you to &lt;a href="https://bit.ly/futurestack-dev"&gt;FutureStack 2021&lt;/a&gt;! This will be our first year at the conference as &lt;a href="https://developer.newrelic.com/relicans"&gt;The Relicans&lt;/a&gt;, and we can’t wait to see you there.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uSZwI9VKBms"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-keynotes-12-handson-workshops-50-sessions"&gt;
  &lt;/a&gt;
  3 keynotes, 12 hands-on workshops, 50 sessions
&lt;/h2&gt;

&lt;p&gt;FutureStack 2021 is a free, online conference where New Relic is bringing together Data Nerds to learn, share, and get inspired about observability — while we have fun!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here's what to expect:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3 Keynotes and on-demand recordings to watch anytime.&lt;/li&gt;
&lt;li&gt;12 Workshops with hands-on demos.&lt;/li&gt;
&lt;li&gt;50 Sessions led by Data Nerds like you and me.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also choose from four different learning tracks, whether you have a particular focus or want to start with the basics, we’ve got you covered with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Extending New Relic One&lt;/strong&gt; to connect technology to business performance&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Getting Data In&lt;/strong&gt; to instrument everything and send data to the Telemetry Data Platform&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;AI/ML-Powered Observability&lt;/strong&gt; to wrangle complexity with AIOps&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Modern Architectures&lt;/strong&gt; from containers to serverless apps&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-relicans-welcome-you-to-nerd-island"&gt;
  &lt;/a&gt;
  The Relicans welcome you to Nerd Island
&lt;/h2&gt;

&lt;p&gt;In addition to the tracks mentioned above, there will be several side tracks, including Networking, FutureHack, Relax and Mingle Active, Swag Stack and — our personal favorite — the &lt;strong&gt;Nerd Island&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The Nerd Island is where you can come to hang out with us from &lt;a href="https://developers.newrelic.com/relicans"&gt;The Relicans&lt;/a&gt;. We will play Minecraft, live stream, write code together, and share talks from our team. We're especially excited to welcome special guests &lt;a href="https://twitter.com/kelseyhightower"&gt;Kelsey Hightower&lt;/a&gt;, &lt;a href="https://twitter.com/waxpancake"&gt;Andy Baio&lt;/a&gt;, and &lt;a href="https://twitter.com/samaaron"&gt;Sam Aaron&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is a spoiler, just for you:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On the Nerd Island and &lt;em&gt;on the Nerd Island ONLY&lt;/em&gt;, you can be one of the first users of &lt;a href="https://skittish.com/"&gt;Skittish&lt;/a&gt;, an interactive, playful virtual event space! Inside Skittish, you can be a cute animal, explore Nerd Island, connect with friends (that also happen to be cute animals) via voice chat, and watch some great talks.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/N5ZPQ_Sfmhs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sign-up-and-join-us"&gt;
  &lt;/a&gt;
  Sign up and join us!
&lt;/h2&gt;

&lt;p&gt;FutureStack is May 25-27, 2021, and you can save your spot now. &lt;a href="https://bit.ly/futurestack-dev"&gt;Just click here to sign up&lt;/a&gt;, and you will be all set! Until then, keep an eye out as we share more about upcoming sessions and surprises we have planned for FutureStack.&lt;/p&gt;

&lt;p&gt;We can't wait to see you at FutureStack! &lt;/p&gt;

</description>
      <category>monitoring</category>
      <category>observability</category>
      <category>microservices</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Ditch For... Loops - How to Use ES6 Array Methods to Loop Over An Array</title>
      <author>Kingsley Ubah</author>
      <pubDate>Tue, 04 May 2021 21:06:21 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/ditch-for-loops-how-to-use-es6-array-methods-to-loop-over-an-array-1jnh</link>
      <guid>https://dev.to/ubahthebuilder/ditch-for-loops-how-to-use-es6-array-methods-to-loop-over-an-array-1jnh</guid>
      <description>&lt;p&gt;Do you remember something like this?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The number is &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For those of you completely new to using JavaScript, let’s break down that code spippet fellas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All that statement is saying is that – “i is initially equals to zero. For as long as i is less than five, run the code inside the code block (i.e update the ‘text’ variable) and increment i by one (signified with the ++).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This used to be the standard way of looping through an array of items. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Used to.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EmcaScript 2016 (ES6)&lt;/strong&gt; came with a set of utility methods for looping through an array. For those of you wondering, EmcaScript is a general-purpose programming language, standardised by Ecma International according to the document ECMA-262.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I like to think of EmcaScript as a new, modern and improved way of writing JavaScript.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;N/B: If you’re looking for a more in-depth guide on ES6 syntax, I’ll recommend  &lt;a href="https://gumroad.com/a/834147443"&gt;HTML To React By Sleepless Yogi&lt;/a&gt; . It’s really good!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These array iterators includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Array.map()&lt;/li&gt;
&lt;li&gt;Array.find()&lt;/li&gt;
&lt;li&gt;Array.filter()&lt;/li&gt;
&lt;li&gt;Array.forEach()&lt;/li&gt;
&lt;li&gt;Array.every()&lt;/li&gt;
&lt;li&gt;Array.some()&lt;/li&gt;
&lt;li&gt;Array.sort()&lt;/li&gt;
&lt;li&gt;Array.reduce()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To properly understand how these methods work, we have to first understand two concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The size of an array&lt;/li&gt;
&lt;li&gt;The shape of an array&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;backend engineer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lara&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ux designer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;kingsley&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;developer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;manager&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chris&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;developer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
javascript&lt;/p&gt;

&lt;p&gt;There are two thing to note about this array:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It has a size of five items (objects),&lt;/li&gt;
&lt;li&gt;Each item has a shape: a name and position.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these in mind, all of the array iterator methods has it’s own behaviour:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;
  &lt;a href="#map"&gt;
  &lt;/a&gt;
  map()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Behaviour: Changes the shape, but not the size,&lt;/li&gt;
&lt;li&gt;Example: Get just the name of everyone on the team.
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;//Result: ['jack', 'lara', 'kingsley', 'mark', 'chris']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sort"&gt;
  &lt;/a&gt;
  sort()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Behaviour: Changes neither the size nor the shape, but changes the order.&lt;/li&gt;
&lt;li&gt;Example: Get the team members in alphabetical order.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//Result: [{name: 'chris', position: 'developer'}, {name: 'jack' ...}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#filter"&gt;
  &lt;/a&gt;
  filter()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Behaviour: Changes the size, but not the shape.&lt;/li&gt;
&lt;li&gt;Example: Get only the developers.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;developer&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Result: [{name: 'kingsley', position: 'developer'}, {name: 'chris', position:'developer'}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#find"&gt;
  &lt;/a&gt;
  find()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Behavior: Changes the size to exactly one, but not the shape. It Does not return an array. &lt;/li&gt;
&lt;li&gt;Example: Get the manager.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Result: {name: 'justin', position: 'manager'}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;N/B: If there were two managers present, find() will only return the first&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#foreach"&gt;
  &lt;/a&gt;
  forEach()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Behaviour: Uses the shape, but returns nothing.&lt;/li&gt;
&lt;li&gt;Example: Give all members a bonus!
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Function&lt;/span&gt; &lt;span class="nx"&gt;sendBonus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//code for bonus goes here\&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;sendBonus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;//Result: Jack gets a bonus! Lara get a bonus!… (but no return value).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reduce"&gt;
  &lt;/a&gt;
  reduce()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Action: Changes the size and the shape to pretty much anything
you want.&lt;/li&gt;
&lt;li&gt;Example: Get the unique team positions.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uniquePos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;uniquePos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uniquePos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;uniquePos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;uniquePos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
 &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="c1"&gt;// Result: [‘backend engineer’, ‘ux designer’, ‘developer’, ‘manager’]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A bit confused, let’s break down this code guys.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The essence of this all is to get every unique postion of each member. Duplicate positions (developer) will be picked once.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The first parameter taken by the reduce method is the ‘collectedValue’from the last iteration. When the iteration is just starting, then the reduce() second argument ([] in our case) will be used. For every iteration, the collected or total value is added the current item.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In our case, when iteration just starts, the initial value [] wraps the current item in the array. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The conditional checks to see if the total value (the array at this point in the loop) includes the position of the current member. If it does, the position is ignored and the CollectedValue is returned as it was. If not, the position of the current member is added to the array (with the spread operator).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#every"&gt;
  &lt;/a&gt;
  every()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Behavior: Changes neither the size nor the shape. Returns a Boolean: true if all items meet a condition, false if any doesn’t.&lt;/li&gt;
&lt;li&gt;Example: Check if all items are objects.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;member&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Results: True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#some"&gt;
  &lt;/a&gt;
  some()
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Behavior: Changes neither the size nor the shape. Returns a Boolean: true if any of the items meet a condition, false if all doesn’t.&lt;/li&gt;
&lt;li&gt;Example: Check if any of the items is number.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;member&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Result: False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s it. I hope you learnt something from these brothers and sisters. If you did, consider buying me my favourite fruit:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/ubahthebuilder"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc5Aqnyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520pineapple%26emoji%3D%25F0%259F%258D%258D%26slug%3Dubahthebuilder%26button_colour%3De0b51a%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will really appreciate it.&lt;/p&gt;

&lt;p&gt;Thank you and see you soon.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Awesome Illustrations Resources</title>
      <author>rafaelvieirab</author>
      <pubDate>Tue, 04 May 2021 20:59:43 +0000</pubDate>
      <link>https://dev.to/rafaelvieirab/awesome-illustrations-resources-5346</link>
      <guid>https://dev.to/rafaelvieirab/awesome-illustrations-resources-5346</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://undraw.co/illustrations"&gt;Undraw&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.drawkit.io/"&gt;Draw Kit&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://iconscout.com/illustration-pack/indian-doodle"&gt;Indian Doodle&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.karthiksrinivas.in/poke"&gt;Poke&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.opendoodles.com/"&gt;open Doodles&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://lukaszadam.com/illustrations"&gt;Lukaszadam&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://iradesign.io/"&gt;IRA Design&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://mixkit.co/free-stock-art/"&gt;Mixkit&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://2.flexiple.com/scale/all-illustrations"&gt;Scale&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://sleekbundle.com/product/pulse-illustration-kit/"&gt;Pulse&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://geeme.vercel.app/"&gt;Gee Me&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://absurd.design/#slide-6"&gt;Absurd&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://thenounproject.com/"&gt;The Noun project&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://fresh-folk.com/"&gt;Fresh-folk&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.rawpixel.com/search/illustration?sort=curated&amp;amp;page=1"&gt;Rawpixel&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://webpixels.io/illustrations"&gt;Webpixels : Eye Pop&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://delesign.com/free-designs/graphics/"&gt;Delesign&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.manypixels.co/gallery?ref=lapaninja"&gt;Manypixels&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://icons8.com/illustrations"&gt;Icon8&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://humaaans.com/"&gt;Humaans&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://lab.streamlinehq.com/"&gt;Streamline&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://lucid.pixsellz.io/"&gt;Lucid&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ui8.net/"&gt;Ui8&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://control.rocks/"&gt;Control.Rocks&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://niceillustrations.com/free-illustrations/"&gt;Niceillustrations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.pixeltrue.com/packs"&gt;Pixel True&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://isometric.online/"&gt;Isometric&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://storyset.com/"&gt;Story Set&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.openpeeps.com/"&gt;Open Peeps&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.blackillustrations.com/"&gt;Black illustrations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://freeillustrations.xyz/"&gt;Free Illustrations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://illlustrations.co/"&gt;Illlustrations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.getillustrations.com/illustration-packs"&gt;Getillustrations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.freepik.com/"&gt;FreePik&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.vecteezy.com/"&gt;Vecteezy&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.freevector.com/"&gt;FreeVector&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://all-free-download.com/"&gt;All Free Download&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.vectorstock.com/"&gt;VectorSock&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://stubborn.fun/"&gt;Stubborn&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://blush.design/"&gt;Blush&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://usesmash.com/"&gt;UseMash&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.glazestock.com/"&gt;Glazestock&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.vectorportal.com/"&gt;VectorPortal&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Trivia or Job Interview?</title>
      <author>Stephan Meijer</author>
      <pubDate>Tue, 04 May 2021 20:38:38 +0000</pubDate>
      <link>https://dev.to/smeijer/trivia-or-job-interview-4mpj</link>
      <guid>https://dev.to/smeijer/trivia-or-job-interview-4mpj</guid>
      <description>&lt;p&gt;I've built multiple SaaS, and some are used by multinationals. Yet, I fail miserably at tricky interview questions. In this article, I'm going to show you a few recent questions I got, and share my thoughts.&lt;/p&gt;

&lt;p&gt;In case you haven't seen any of my work. In the last 12 months, I've launched &lt;a href="https://testing-playground.com"&gt;testing-playground.com&lt;/a&gt;, &lt;a href="https://updrafts.app"&gt;updrafts.app&lt;/a&gt;, &lt;a href="https://rake.red"&gt;rake.red&lt;/a&gt; and a bunch of &lt;a href="https://meijer.ws/open-source"&gt;open source projects&lt;/a&gt;. I like to believe that I know what I'm talking about.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#question-1"&gt;
  &lt;/a&gt;
  Question 1
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Here is a simple design of a navbar menu, we are struggling to stick the &lt;code&gt;login&lt;/code&gt; button to the right edge of the &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; (borders are added for a better understanding).&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QYkssloY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/felxzv89t6jhfx4m498x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QYkssloY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/felxzv89t6jhfx4m498x.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Products&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Log in&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.4rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.4rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Options - Single Choice&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a:last-of-type { margin-left: auto; }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a:last-of-type { margin-left: 100%; }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a:last-of-type { float: right; }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a:last-child { margin-left: auto; }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nav:last-child { float: right; }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#my-thoughts"&gt;
  &lt;/a&gt;
  My thoughts
&lt;/h2&gt;

&lt;p&gt;The interview existed of 12 questions, that had to be answered within 16 minutes. That sounds doable, until you meet the trick questions.&lt;/p&gt;

&lt;p&gt;Have you thought about the question? I think that &lt;code&gt;a:last-child { margin-left: auto; }&lt;/code&gt; is the correct answer. But &lt;code&gt;a:last-of-type { margin-left: auto; }&lt;/code&gt; works as well. As this is an automated interview, I can only hope that I choose whatever the interviewer prefers. As &lt;code&gt;a:last-of-type&lt;/code&gt; is listed first, this is easy to get tricked by. Time is limited, so when the candidate is confident that an option works, they are going to choose that, and move on to the next question.&lt;/p&gt;

&lt;p&gt;I usually tend to group the left and right options, and add a &lt;code&gt;justify-content: space-between&lt;/code&gt;. Why is that not an option? Is that wrong? Can we talk about it?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#question-2"&gt;
  &lt;/a&gt;
  Question 2
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;raiseError&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MyError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What is the return type of this function in TypeScript?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Options - Single Choice&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;MyError&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;void&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;null&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;never&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#my-thoughts"&gt;
  &lt;/a&gt;
  My thoughts
&lt;/h2&gt;

&lt;p&gt;The clock was ticking, and I chose &lt;code&gt;void&lt;/code&gt;. As that's how I would annotate this function. Makes sense, right? Think again! The return type of this function isn't &lt;code&gt;void&lt;/code&gt;, it's &lt;code&gt;never&lt;/code&gt;. As it's impossible for this function to return.&lt;/p&gt;

&lt;p&gt;To make it return &lt;code&gt;void&lt;/code&gt;, the throwing should be conditional. (wrapped with an &lt;code&gt;if&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;I believe this question is wrong because it doesn't say much about your TypeScript experience. I mean, how many dedicated throw functions do you have in your codebase? Most functions are constructed in a way that they have a return path. Either with a value, undefined, or void.&lt;/p&gt;

&lt;p&gt;And when you do come across this edge case in your day job, how hard would it be to place your cursor at the function, and wait for that pretty tool-tip to appear, telling you the exact return type?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#question-3"&gt;
  &lt;/a&gt;
  Question 3
&lt;/h1&gt;

&lt;p&gt;Which HTTP methods are idempotent?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Options - Multiple Choice&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All of them are idempotent as it is a stateless protocol&lt;/li&gt;
&lt;li&gt;None of the HTTP methods are idempotent.&lt;/li&gt;
&lt;li&gt;All of them except for POST, CONNECT and sometimes PATCH.&lt;/li&gt;
&lt;li&gt;All of them except for POST, OPTIONS and TRACE.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#my-thoughts"&gt;
  &lt;/a&gt;
  My thoughts
&lt;/h2&gt;

&lt;p&gt;First of all, this was a test for a &lt;code&gt;frontend developer&lt;/code&gt; position. Are frontend developers really expected to know if certain HTTP methods are idempotent or not? Isn't that for the API developers to know? I really did not know the answer to this question.&lt;/p&gt;

&lt;p&gt;After the test, I found out that the HTTP spec does have this specified, while I assumed that it was for the API spec (like &lt;code&gt;open-api&lt;/code&gt;) to decide.&lt;/p&gt;

&lt;p&gt;Anyways, I guessed that &lt;code&gt;all of them&lt;/code&gt; are idempotent, as HTTP doesn't hold state. My database does. But according to &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Idempotent#technical_knowledge"&gt;MDN&lt;/a&gt;, it should have been &lt;code&gt;all of them except for POST, OPTIONS, and TRACE&lt;/code&gt;. Today I learned.&lt;/p&gt;

&lt;p&gt;Now the question is, what if I make my &lt;code&gt;POST&lt;/code&gt; handler &lt;code&gt;idempotent&lt;/code&gt;? Doesn't this question depend a tiny bit on the API that we're talking about?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#question-4"&gt;
  &lt;/a&gt;
  Question 4
&lt;/h1&gt;

&lt;p&gt;Which of the following browser actions/events are triggered by changing the CSS property &lt;code&gt;opacity&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Options - Multiple Choice&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Layout operations performed&lt;/li&gt;
&lt;li&gt;Painting/Rasterizing&lt;/li&gt;
&lt;li&gt;Page composited together&lt;/li&gt;
&lt;li&gt;None of the above&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#my-thoughts"&gt;
  &lt;/a&gt;
  My thoughts
&lt;/h2&gt;

&lt;p&gt;Seriously? For what would we need this? I guess that the browser does a &lt;code&gt;repaint&lt;/code&gt;, so that excludes the last option. &lt;code&gt;Opacity&lt;/code&gt; doesn't change the layout, so there wouldn't be any &lt;code&gt;layout operations&lt;/code&gt;. But what about &lt;code&gt;Page composited together&lt;/code&gt;? I don't know. I really don't. Does that make me a bad developer? &lt;/p&gt;

&lt;p&gt;Let's move on. Do you still want that opacity on your navbar?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#trick-questions"&gt;
  &lt;/a&gt;
  Trick Questions
&lt;/h1&gt;

&lt;p&gt;There were six more weird technical questions that made more or less sense than the four above. But they all had one thing in common. It felt like they were trying to trick me, and it are questions that I don't need to know to be able to develop solid applications.&lt;/p&gt;

&lt;p&gt;When I would need to know it, I'm able to open my browser, and find the right answer in a matter of minutes. I'm a developer, but I suck at trivia.&lt;/p&gt;

&lt;p&gt;Two more questions to wrap this up? Remember... your time is ticking:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question 11&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;How would you explain a complicated technical problem to a colleague having none to very little technical understanding?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Write answer here...&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Question 12&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;How would you go about getting a buy-in for your project from multiple stakeholders at work?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Write answer here...&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I don't know what you want me to say. Do you have more details? Can I get another coffee and 30 minutes of your time? Let's talk about it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#my-score"&gt;
  &lt;/a&gt;
  My score
&lt;/h1&gt;

&lt;p&gt;The "nice" thing about this automated test, is that you'll get your score right away. I had a total score of 47%. I suck at React, HTTP, Communication, well, basically in every area.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZPeKKBA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekbriyjxvp2lyoutk8vr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZPeKKBA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekbriyjxvp2lyoutk8vr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As expected, a few hours after my submission, I got the following mail. A little surprised that that part wasn't automated as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hi Stephan,&lt;/p&gt;

&lt;p&gt;Thanks for doing the skills test! It was a tough decision as we've had so many great applications, but we've decided to move forward with other candidates. &lt;strong&gt;Really looking for folks who've got more experience with javascript.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, this really was a motivational experience &lt;em&gt;(not)&lt;/em&gt;. Do you know the saying &lt;em&gt;"You've dodged a bullet?"&lt;/em&gt;. That's how I came to think about this kind of interview tests. &lt;/p&gt;

&lt;p&gt;As I also operate on the hiring side, this provides me valuable insights into how the industry works. But if any recruiting person is reading this, please stop it. You're hiring developers specialized in interviews. Not in creating awesome software.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>interview</category>
    </item>
    <item>
      <title>Awesome CSS Animation Resources</title>
      <author>rafaelvieirab</author>
      <pubDate>Tue, 04 May 2021 20:34:10 +0000</pubDate>
      <link>https://dev.to/rafaelvieirab/awesome-css-animation-resources-l3f</link>
      <guid>https://dev.to/rafaelvieirab/awesome-css-animation-resources-l3f</guid>
      <description>&lt;p&gt;Here is the list of awesome CSS animation resources which will help you to animate components quickly and easily.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://animista.net/play/basic"&gt;Animista&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://animate.style/"&gt;Animate.CSS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://gibbok.github.io/animatelo/"&gt;Animatelo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://all-animation.github.io/"&gt;All Animation CSS3&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://elrumordelaluz.github.io/csshake/"&gt;CSShake&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://cssanimation.io/"&gt;CSSAnimation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ianlunn.github.io/Hover/"&gt;Hover.CSS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://tilomitra.github.io/infinite/"&gt;Infinite&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://shakrmedia.github.io/tuesday/"&gt;It's Tuesday&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.minimamente.com/project/magic/"&gt;Magic&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://webkul.github.io/micron/"&gt;Micron&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://zurb.com/playground/motion-ui"&gt;Motion UI&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://tholman.com/obnoxious/"&gt;Obnoxious&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dwarcher.github.io/reboundgen/examples/"&gt;Redoundgen&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://minimamente.com/example/rocket/"&gt;Rocket&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://kristofferandreasen.github.io/wickedCSS/#"&gt;Wicked CSS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What Does It Mean To Deliver Software At The #SpeedOfLife?</title>
      <author>Nikema</author>
      <pubDate>Tue, 04 May 2021 20:21:02 +0000</pubDate>
      <link>https://dev.to/armory/what-does-it-mean-to-deliver-software-at-the-speedoflife-j6n</link>
      <guid>https://dev.to/armory/what-does-it-mean-to-deliver-software-at-the-speedoflife-j6n</guid>
      <description>&lt;p&gt;In this blog post, I’m excited to announce the #SpeedOfLife campaign that I will be leading for the month of May. I’m looking forward to getting to know more of the awesome people who make up our DevOps community.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-speedoflife"&gt;
  &lt;/a&gt;
  What is #SpeedOfLife?
&lt;/h2&gt;

&lt;p&gt;"#SpeedOfLife" is a social campaign meant to highlight users and experts in the field of software development and delivery. More specifically, I will be posting snippets of my conversations with the community in the form of weekly blog posts, social media messages, and a video live stream every Friday this month.&lt;/p&gt;

&lt;p&gt;It is now more than ever essential for enterprise-scale companies to deliver software products and services with safety, resiliency, and velocity. At Armory we are proud to enable developers to work and ship at the speed of life. What are you proudest of in your line of work? What does work at the speed of life mean to you? I want to know! I’m listening and my goal this month is to amplify community voices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-can-i-get-involved"&gt;
  &lt;/a&gt;
  How Can I Get Involved?
&lt;/h3&gt;

&lt;p&gt;I’m so glad you asked.&lt;/p&gt;

&lt;p&gt;Starting today, I’ll be sending out messages asking for participation. If you are eager to contribute now without a personal invitation I have a handy link that you can follow where you can &lt;a href="https://airtable.com/shr8yp4bwHeGz9dkX"&gt;submit your contribution&lt;/a&gt; on your own time. Alternatively, if you want to reach out to me (Nikema) directly, I will be thrilled to hear your story. Hit me up at [nikema.prophet at armory.io]!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#join-me-tell-me-your-stories"&gt;
  &lt;/a&gt;
  Join Me, Tell Me Your Stories
&lt;/h3&gt;

&lt;p&gt;I’ve already spoken with our CEO, DROdio and he shared some customer stories that truly exemplify #SpeedOfLife. I can’t wait to share that with you, and it’s coming soon. More importantly, I can’t wait to hear your stories and get them out there.&lt;/p&gt;

&lt;p&gt;Join me, it’s easy I promise 😀. You don’t have to use your voice or get on camera to participate. See the &lt;a href="https://airtable.com/shr8yp4bwHeGz9dkX"&gt;contribution form&lt;/a&gt; for a text-based response option.&lt;/p&gt;

</description>
      <category>speedoflife</category>
      <category>devops</category>
      <category>community</category>
      <category>stories</category>
    </item>
    <item>
      <title>When to use aria-labels in your HTML</title>
      <author>Salma Alam-Naylor</author>
      <pubDate>Tue, 04 May 2021 20:05:51 +0000</pubDate>
      <link>https://dev.to/whitep4nth3r/when-to-use-aria-labels-in-your-html-18ph</link>
      <guid>https://dev.to/whitep4nth3r/when-to-use-aria-labels-in-your-html-18ph</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;It's common to display multiple links with the same text on a web page — such as 'read more' in a list of blog posts. To improve the web page experience for people who use screen readers and accessibility tools, add an aria-label to the anchor element with text that differentiates the content of the onward links.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Check the results in Chromium Dev Tools &amp;gt; Accessibility. Voila!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_y30bl---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ry3wiavgxu3bekj9o8sd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_y30bl---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ry3wiavgxu3bekj9o8sd.png" alt="A screenshot of my website, showing how aria labels enrich the context of the HTML in the accessibility tree in Chromium dev tools."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#checking-for-accessibility"&gt;
  &lt;/a&gt;
  Checking for accessibility
&lt;/h2&gt;

&lt;p&gt;In a previous post, &lt;a href="https://whitep4nth3r.com/blog/how-to-make-your-code-blocks-accessible-on-your-website"&gt;How to make your code blocks accessible on your website&lt;/a&gt;, I listed many of the tools I use to check accessibility on my websites as part of my workflow, including &lt;a href="https://chrome.google.com/webstore/detail/axe-web-accessibility-tes/lhdoppojpmngadmnindnejefpokejbdd"&gt;axe Dev Tools&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here's a section of my website home page that displays a list of recent blog posts. Observe six links with the text 'read more', below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cgrkFVRH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05ozem4yywbbj4ffcyaz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cgrkFVRH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05ozem4yywbbj4ffcyaz.png" alt="A screenshot of my website showing my recent post list, with six links using the text 'read more'."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code for each 'read more' link (without an aria-label) might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://whitep4nth3r.com/blog/how-to-make-your-code-blocks-accessible-on-your-website"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Read more&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we scan the code above with &lt;strong&gt;axe&lt;/strong&gt;, we receive the following warning:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ensure that links with the same accessible name serve a similar purpose&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_QxL8HzC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsxz8b5vquc5oabhr5sf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_QxL8HzC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsxz8b5vquc5oabhr5sf.png" alt="alt=&amp;quot;A screenshot of my website and Axe Dev Tools console, showing the issue description 'Ensure that links with the same accessible name serve a similar purpose', as all of the links have the text 'Read more'.&amp;quot;"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use the accessibility tree in Chromium Dev Tools to check how screen readers and assistive technologies understand your web page. Find the accessibility tab far to the right of the styles tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lQYJBrFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijnfa6pxwmt41c6v78d0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lQYJBrFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijnfa6pxwmt41c6v78d0.png" alt="A screenshot of my website showing the accessibility tree in Chromium dev tools, where a link is described with the text 'Read more'. This is the same for all links in that section."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you were using a screen reader to select the link to a specific blog post, and all the information you had was the text 'read more' — six times over — you'd be pretty frustrated! So how do we fix it?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-arialabels-to-provide-descriptive-information"&gt;
  &lt;/a&gt;
  Add aria-labels to provide descriptive information
&lt;/h2&gt;

&lt;p&gt;I always recommend to use a variety of tools to check accessibility on your website, and also to use your judgement. Here's what Axe suggests to check in the above example:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check that links have the same purpose, or are intentionally ambiguous&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I checked, and I confirmed. These links do &lt;strong&gt;not&lt;/strong&gt; have the same purpose — they link to different blog posts or onward journeys. Here's where the power of aria-labels comes into play.&lt;/p&gt;

&lt;p&gt;Here's the same anchor link with an aria-label attribute added:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://whitep4nth3r.com/blog/how-to-make-your-code-blocks-accessible-on-your-website"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Read How to make your code blocks accessible on your website"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Read more&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we re-scan the page with &lt;strong&gt;axe&lt;/strong&gt; with the aria-labels in place, everything looks good! We also see that the links have distinct titles in the accessibility tree, allowing screen readers and assistive technologies to read out a more descriptive link when the element is in focus.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IiN7kXA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ic9ktk9av79yi7wm7t93.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IiN7kXA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ic9ktk9av79yi7wm7t93.png" alt="A screenshot of my website, showing that when adding aria-labels to the links, the accessibility tree has better context of the onward journey."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-web-dev-accessibility-tools-to-help-you-build-better-websites"&gt;
  &lt;/a&gt;
  7 web dev accessibility tools to help you build better websites
&lt;/h2&gt;

&lt;p&gt;To learn more about the different accessibility tools I use on a daily basis, check out my very first YouTube video — 7 web dev accessibility tools to help you build better websites.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VjbYTdR-NYE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Make accessibility part of your web dev workflow from the moment you write that first line of code, and you'll automatically create better and more inclusive experiences for everyone as you build stuff, learn things, and love what you do.&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Developer Guide: How To Integrate Push Notifications in Angular</title>
      <author>onesignaldevs</author>
      <pubDate>Tue, 04 May 2021 20:02:52 +0000</pubDate>
      <link>https://dev.to/onesignal/developer-guide-how-to-integrate-push-notifications-in-angular-3cmh</link>
      <guid>https://dev.to/onesignal/developer-guide-how-to-integrate-push-notifications-in-angular-3cmh</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Z4_Q05v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/integrating-push-notifications-in-angular--3-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Z4_Q05v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/integrating-push-notifications-in-angular--3-.png" alt="Developer Guide: How To Integrate Push Notifications in Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s no secret that push notifications can help you engage and retain app users. In this tutorial, we'll show you how to integrate with OneSignal in order to leverage push notifications in your Angular app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onesignal-amp-your-browsers-push-api"&gt;
  &lt;/a&gt;
  OneSignal &amp;amp; Your Browser's Push API
&lt;/h2&gt;

&lt;p&gt;The browser's push API gives web applications the ability to receive messages from a server whether or not the web app is in the foreground or currently loaded on a user agent. This lets you deliver asynchronous notifications and updates to users who opt-in, resulting in better engagement with timely new content.&lt;/p&gt;

&lt;p&gt;This tutorial will cover how to integrate OneSignal Push Notifications into your app using our typical setup process. Part one of this guide covers the OneSignal setup process. Part two of this guide covers how to integrate with Angular using a basic setup method. Part three covers  an advanced setup method you can implement after completing the basic setup. The advanced setup will unlock even more message customization and automation opportunities for your website or app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#guide-overview"&gt;
  &lt;/a&gt;
  Guide Overview
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#part-1-set-up-your-onesignal-account"&gt;Part 1: Set Up Your OneSignal Account&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#web-configuration"&gt;Web Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#part-2-quick-push-notification-setup-in-angular"&gt;Part 2: Quick Push Notification Setup In Angular&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#allow-web-push-notifications"&gt;Allow Web Push Notifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#send-web-push-notifications"&gt;Send Web Push Notifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#part-3-advanced-push-notification-setup-in-angular"&gt;Part 3: Advanced Push Notification Setup In Angular&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This tutorial requires some basic knowledge of Angular. I'm using &lt;strong&gt;Angular 11.2&lt;/strong&gt; and &lt;strong&gt;NodeJS version 14.0&lt;/strong&gt;. If you don't have Angular, create a new Angular project using the Angular CLI.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Additional Angular Setup Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/OneSignal/OneSignal-Angular-Sample"&gt;Quick Angular Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OneSignal/OneSignal-Angular-Sample/tree/FINAL-CODE"&gt;Advanced Angular Setup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#part-1-set-up-your-onesignal-account"&gt;
  &lt;/a&gt;
  Part 1: Set Up Your OneSignal Account
&lt;/h2&gt;

&lt;p&gt;To begin, &lt;a href="https://app.onesignal.com/login"&gt;login&lt;/a&gt; to your OneSignal account or &lt;a href="https://app.onesignal.com/signup"&gt;create a free account&lt;/a&gt;. Then, click on the blue button entitled &lt;strong&gt;&lt;em&gt;New App/Website&lt;/em&gt;&lt;/strong&gt; to configure your OneSignal account to fit your app or website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z5HYVXWC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/set-up-onesignal-account-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z5HYVXWC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/set-up-onesignal-account-1.png" alt="Developer Guide: How To Integrate Push Notifications in Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Insert the name of your app or website. Select &lt;strong&gt;&lt;em&gt;Web Push&lt;/em&gt;&lt;/strong&gt; as your platform.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w5zSe_wb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/set-up-onesignal-account-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w5zSe_wb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/set-up-onesignal-account-2.png" alt="Developer Guide: How To Integrate Push Notifications in Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the blue button entitled, &lt;strong&gt;&lt;em&gt;Next: Configure Your Platform&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-configuration"&gt;
  &lt;/a&gt;
  Web Configuration
&lt;/h3&gt;

&lt;p&gt;Under &lt;strong&gt;&lt;em&gt;Choose Integration&lt;/em&gt;&lt;/strong&gt; , select the &lt;strong&gt;&lt;em&gt;Typical Site&lt;/em&gt;&lt;/strong&gt; option.&lt;/p&gt;

&lt;p&gt;In the _ &lt;strong&gt;Site Setup&lt;/strong&gt; _ section, enter your chosen web configuration. In my case, the configuration looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wlcfcFgN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/web-configuration.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wlcfcFgN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/web-configuration.png" alt="Developer Guide: How To Integrate Push Notifications in Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice for testing purposes I’m entering my localhost URL (&lt;a href="http://localhost:4401"&gt;http://localhost:4401&lt;/a&gt;). If you are doing the same, make sure you click on the &lt;strong&gt;&lt;em&gt;LOCAL TESTING&lt;/em&gt;&lt;/strong&gt; option. This will ensure to treat HTTP localhost as HTTPS for testing.&lt;/p&gt;

&lt;p&gt;Under _ &lt;strong&gt;Permission Prompt Setup&lt;/strong&gt; &lt;em&gt;, you will see three vertical blue dots under the _ &lt;strong&gt;Actions&lt;/strong&gt; _ header on the far right side of the screen. Click on the blue dots and select **_Edit&lt;/em&gt;** from the drop-down menu.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B4yWp407--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/push-slide-prompt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B4yWp407--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/push-slide-prompt.png" alt="Developer Guide: How To Integrate Push Notifications in Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A window will open with the configuration of our &lt;a href="https://documentation.onesignal.com/docs/slide-prompt"&gt;push notification Slide Prompt&lt;/a&gt;. Confirm that &lt;strong&gt;&lt;em&gt;Auto-prompt&lt;/em&gt;&lt;/strong&gt; is enabled (toggled to the right).&lt;/p&gt;

&lt;p&gt;Under _ &lt;strong&gt;Show When&lt;/strong&gt; &lt;em&gt;, you can change the second increment to alter how long your slide prompt will delay after a user visits your page. You can leave it as it is, or you can reduce the seconds so that your prompt appears sooner. Once you've input your chosen delay increment, click the grey **_Done&lt;/em&gt;** button located at the bottom right corner of the window.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GG0yBEYL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/permission-prompt-editor.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GG0yBEYL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/permission-prompt-editor.png" alt="Developer Guide: How To Integrate Push Notifications in Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After clicking _ &lt;strong&gt;Done&lt;/strong&gt; _, scroll down to the bottom of the page and click _ &lt;strong&gt;Save&lt;/strong&gt; _ to save your auto-prompt selections.&lt;/p&gt;

&lt;p&gt;You will be redirected to a different page with an important step: Downloading the SDK files. Click &lt;strong&gt;&lt;em&gt;DOWNLOAD ONESIGNAL SDK FILES&lt;/em&gt;&lt;/strong&gt; and save them on your computer to retrieve later.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jteQv92E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/camBSeQ9tHXO4YNeskPnOwxqhOf4Al3R9ZeHqnR-ryefOMVtuHwBlpMD-YwW87HrUPqqQK1xOYcGra_DAIm_66LDwweVTzCLPPXKSzKTYbMjCWz2bo6Vo6jpIRXjlOvsQOPBYi59" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jteQv92E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/camBSeQ9tHXO4YNeskPnOwxqhOf4Al3R9ZeHqnR-ryefOMVtuHwBlpMD-YwW87HrUPqqQK1xOYcGra_DAIm_66LDwweVTzCLPPXKSzKTYbMjCWz2bo6Vo6jpIRXjlOvsQOPBYi59" alt="Developer Guide: How To Integrate Push Notifications in Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Under the section entitled &lt;strong&gt;&lt;em&gt;Add Code to Site&lt;/em&gt;&lt;/strong&gt; , you will see a grey button that allows you to copy the code snippet. Click the grey _ &lt;strong&gt;COPY CODE&lt;/strong&gt; _ button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P24OognR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/wfoLe_2cwZy3VvZqDa-c6p4zodUslzT_wcqtLoopYLkEb2oX_EMMG7ryEmhFdPvogOcPE8iviYIAn8OZY7V_Q7cdYjQzl8hXki-jKzPc4LBlXIOdRQgw-s_WGanprjOr9Slngyq4" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P24OognR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/wfoLe_2cwZy3VvZqDa-c6p4zodUslzT_wcqtLoopYLkEb2oX_EMMG7ryEmhFdPvogOcPE8iviYIAn8OZY7V_Q7cdYjQzl8hXki-jKzPc4LBlXIOdRQgw-s_WGanprjOr9Slngyq4" alt="Developer Guide: How To Integrate Push Notifications in Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-2-quick-push-notification-setup-in-angular"&gt;
  &lt;/a&gt;
  Part 2: Quick Push Notification Setup In Angular
&lt;/h2&gt;

&lt;p&gt;In your Angular project folder, navigate to the &lt;strong&gt;index.html&lt;/strong&gt; file. Inside of the &lt;code&gt;head&lt;/code&gt; HTML tag, paste the code you previously copied from the OneSignal page.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://cdn.onesignal.com/sdks/OneSignalSDK.js" async=""&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
window.OneSignal = window.OneSignal || [];
    OneSignal.push(function() {
        OneSignal.init({
            appId: "YOUR-APP-ID",
        });
    });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, locate the SDK files you downloaded on your computer and insert them inside of the &lt;strong&gt;&lt;em&gt;src&lt;/em&gt;&lt;/strong&gt; folder of your Angular app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H7yufA2p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/EO6rXfmDwh5ijF5FF-MrOLF2Moz6Q7d7d1TyGvMyEavXrQ2cueDzxHhosN-XkVZo1DUYjc7Mz3AY8dtFhY7Qq6x0goNHOJKsnqGOTz2WBClktHYSuI2B05NORRvn3XsPL98JavFv" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H7yufA2p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/EO6rXfmDwh5ijF5FF-MrOLF2Moz6Q7d7d1TyGvMyEavXrQ2cueDzxHhosN-XkVZo1DUYjc7Mz3AY8dtFhY7Qq6x0goNHOJKsnqGOTz2WBClktHYSuI2B05NORRvn3XsPL98JavFv" alt="Developer Guide: How To Integrate Push Notifications in Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After you have inserted the SDK files into your Angular project, you'll need to make Angular aware of those SDK files. To do so, open the &lt;strong&gt;&lt;em&gt;angular.json&lt;/em&gt;&lt;/strong&gt; file and locate the &lt;strong&gt;architecture property&lt;/strong&gt;. Inside of that property, you will see another property called assets, at the bottom of this property, add the location of the OneSignal SDKs.&lt;/p&gt;

&lt;p&gt;Your &lt;strong&gt;&lt;em&gt;angular.json&lt;/em&gt;&lt;/strong&gt; should look like this:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"assets": [
              "src/favicon.ico",
              "src/assets",
              "src/OneSignalSDKUpdaterWorker.js",
              "src/OneSignalSDKWorker.js",
            ],
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#allow-web-push-notifications"&gt;
  &lt;/a&gt;
  Allow Web Push Notifications
&lt;/h3&gt;

&lt;p&gt;Run the Angular app and visit your website. You should see the following prompt appear after your chosen time delay interval:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sJhl_0zB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/TXNNxMqU5B8lYe9XA4cdyfBmcYrCCCXazha8u94T4acvHiWc_xL6TtCEEPxLuFHH2dBSKbcj2kSiAOugtp5hyzOHWSlB-vw8Ijp8zkiRnZSreBz6O2a9UcWL7AcsnxR6m9pVNfFw" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sJhl_0zB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/TXNNxMqU5B8lYe9XA4cdyfBmcYrCCCXazha8u94T4acvHiWc_xL6TtCEEPxLuFHH2dBSKbcj2kSiAOugtp5hyzOHWSlB-vw8Ijp8zkiRnZSreBz6O2a9UcWL7AcsnxR6m9pVNfFw" alt="Developer Guide: How To Integrate Push Notifications in Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the blue &lt;strong&gt;&lt;em&gt;Allow&lt;/em&gt;&lt;/strong&gt; button to enable push notifications on your browser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#send-web-push-notifications"&gt;
  &lt;/a&gt;
  Send Web Push Notifications
&lt;/h3&gt;

&lt;p&gt;It’s time to send your first web push notification! To do so, login to your OneSignal account and navigate to the &lt;strong&gt;&lt;em&gt;Dashboard&lt;/em&gt;&lt;/strong&gt; tab. On the dashboard page, click on the blue button that says &lt;strong&gt;&lt;em&gt;New Push&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---4Q6dMxv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/global-outcomes.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---4Q6dMxv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/global-outcomes.png" alt="Developer Guide: How To Integrate Push Notifications in Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will be redirected to a new window that will allow you to customize your push notification. Under &lt;strong&gt;&lt;em&gt;Audience&lt;/em&gt;&lt;/strong&gt; , make sure that _ &lt;strong&gt;Send to Subscribed Users&lt;/strong&gt; _ is selected. Then, create your message by adding your message title, content, and an image. Because this is the first notification your subscribers will receive, you may choose to craft a simple welcome message to confirm that they've been subscribed and reinforce the value that notifications will provide.&lt;/p&gt;

&lt;p&gt;Under the &lt;strong&gt;&lt;em&gt;Delivery Schedule&lt;/em&gt;&lt;/strong&gt; section, select _ &lt;strong&gt;Immediately&lt;/strong&gt; _ and &lt;strong&gt;&lt;em&gt;Send to everyone at the same time&lt;/em&gt;&lt;/strong&gt; to send to all your current web push subscribers. If you have just finished setting up your OneSignal account, chances are you're the first and only subscriber. If your app or website is heavily trafficked and other users have already opted in to receive push notifications, you may want to select &lt;strong&gt;&lt;em&gt;Send to particular segment(s)&lt;/em&gt;&lt;/strong&gt; to test your message out on a specific audience. When you're ready to send your message, click on the blue _ &lt;strong&gt;Review and Send&lt;/strong&gt; _ button at the bottom of the screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y1i1D86P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/new-push.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y1i1D86P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://onesignal.com/blog/content/images/2021/05/new-push.png" alt="Developer Guide: How To Integrate Push Notifications in Angular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A small popup will appear for you to review your message. Once you are satisfied, click on the blue _ &lt;strong&gt;Send Message&lt;/strong&gt; _ button. You should receive a web push notification on your device! 🚀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-3-advanced-push-notification-setup-in-angular"&gt;
  &lt;/a&gt;
  Part 3: Advanced Push Notification Setup In Angular
&lt;/h2&gt;

&lt;p&gt;If you want the ability to use OneSignal across your entire Angular app, complete these advanced push notification setup steps after completing the quick push notification setup.&lt;/p&gt;

&lt;p&gt;Inside of your &lt;strong&gt;&lt;em&gt;index.html&lt;/em&gt;&lt;/strong&gt; file, remove the following code:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
window.OneSignal = window.OneSignal || [];
    OneSignal.push(function() {
        OneSignal.init({
            appId: "YOUR-APP-ID",
        });
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In your root folder, create a new file called &lt;strong&gt;&lt;em&gt;globals.ts&lt;/em&gt;&lt;/strong&gt;. In this file, you will insert the following code:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export{}
declare global {
    interface Window {
        OneSignal: any;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above will allow you to make use of the &lt;code&gt;window.OneSignal&lt;/code&gt; object without triggering any TS and compiler errors. Now that you have the &lt;strong&gt;&lt;em&gt;globals.ts&lt;/em&gt;&lt;/strong&gt; file created, import it into your &lt;strong&gt;&lt;em&gt;polyfills.ts&lt;/em&gt;&lt;/strong&gt; file.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import 'globals';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it's time to create your OneSignal service inside of your Angular app. I have created one using the Angular CLI. The name of my service file is &lt;strong&gt;&lt;em&gt;one-signal.service.ts&lt;/em&gt;&lt;/strong&gt;. After creating the service, you will create an &lt;code&gt;onLoad()&lt;/code&gt; method that will ensure that the SDK script we added inside of the &lt;strong&gt;&lt;em&gt;index.html&lt;/em&gt;&lt;/strong&gt; has been loaded since it's an async operation.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async onLoad(): Promise&amp;lt;any&amp;gt; {
    window.OneSignal = window.OneSignal || [];
    return new Promise((resolve) =&amp;gt; {
        window.OneSignal.push(function() {
            resolve(window.OneSignal);
        });
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the OneSignal service, create a new method called &lt;code&gt;onInit()&lt;/code&gt;. Inside of the method you will call the &lt;code&gt;onLoad()&lt;/code&gt; and you will &lt;a href="https://documentation.onesignal.com/docs/web-push-sdk#initialization"&gt;initialize OneSignal&lt;/a&gt;.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;onInit():void {
    this.onLoad().then((OneSignal)=&amp;gt;{
        OneSignal.init({
            appId: "YOUR-APP-ID",
        });
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, open your &lt;strong&gt;&lt;em&gt;app.component.ts&lt;/em&gt;&lt;/strong&gt; file and inject the OneSignal services you just created. Inside of the &lt;code&gt;gOnInit()&lt;/code&gt;, call the &lt;code&gt;onInit()&lt;/code&gt; method from your OneSignal service. Your file will look like this:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Component, OnInit } from '@angular/core';
import { OneSignalService } from './one-signal.service';

@Component({
selector: 'app-root',
templateUrl: './app.component.html',
styleUrls: ['./app.component.scss']
})

export class AppComponent implements OnInit {
    title = 'OneSignal-Angular';

    constructor(private os: OneSignalService){}

    ngOnInit() {
        this.os.onInit();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you can keep expanding your code to make use of different features of the OneSignal SDK across your Angular app. To learn more about the Web Push SDK visit our web push &lt;a href="https://documentation.onesignal.com/docs/web-push-sdk"&gt;SDK documentation&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>angular</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Associations</title>
      <author>lycho33</author>
      <pubDate>Tue, 04 May 2021 19:58:31 +0000</pubDate>
      <link>https://dev.to/lycho33/associations-26m2</link>
      <guid>https://dev.to/lycho33/associations-26m2</guid>
      <description>&lt;p&gt;After learning Ruby on Rails, I learnt that associations was the most crucial aspect, without it...nothing works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#original-project"&gt;
  &lt;/a&gt;
  Original Project
&lt;/h3&gt;

&lt;p&gt;The first project I created was supposed to be website where the user could be a student or mentor. If the user was a mentor, the mentor could create lessons but if the user was as student, the student would complete lessons. Simple? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EbozOeht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3mzud6cy2hn552fxaa8.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EbozOeht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3mzud6cy2hn552fxaa8.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For an idea I thought was so simple, turned out to be far too complicated for me to handle. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#problem-1"&gt;
  &lt;/a&gt;
  Problem 1
&lt;/h4&gt;

&lt;p&gt;It was unnecessary to have 2 separate models for Students and Mentors. &lt;/p&gt;

&lt;p&gt;So I decided to combine them into Users. But this did not work because I was bypassing Separation of Concerns. A User model was supposed to only deal with login/signout/logout. Instead I created a separated model called Role so the User could choose it's role as either a mentor or student&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#next-problem"&gt;
  &lt;/a&gt;
  Next Problem
&lt;/h4&gt;

&lt;p&gt;I wanted to create a many-to-many association but I had to combine my Student/Mentor model. By doing so I would have to create custom associations so that the Roles model could have a has_many association for Mentor and Student. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0eWRBb0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/isl7qgpjctr39lktqrh0.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0eWRBb0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/isl7qgpjctr39lktqrh0.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This would not have been a problem but this would have taken a lot longer to understand and figure out. The project had to be completed in a week. What's worse was that I did not know how to use these custom associations in my controllers. Additionally, my primary/foreign keys were not working (due to my lack of understanding) which made my nested resources break and my routes not be designed correctly. &lt;/p&gt;

&lt;p&gt;So... I decided to SCRAP this project&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-new-project"&gt;
  &lt;/a&gt;
  THE NEW PROJECT
&lt;/h3&gt;

&lt;p&gt;The new project ended up being a website about an international violin competition called the Menuhin Competition 2021. This website would allow users to upload ongoing performances and blog about it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lkpKDAqw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8olz1xpuhkrpwn22hlp.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lkpKDAqw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8olz1xpuhkrpwn22hlp.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The benefit of these associations is that I can have a many-to-many association. &lt;/p&gt;

&lt;p&gt;For example: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Users has many performances they can upload but each uploaded performance belongs to a user&lt;/li&gt;
&lt;li&gt;A user can comment on any uploaded performance. Because comments is the joins table, user has many performances through comments. 
-A user can post a blog. So each blog belongs to a user but a user can post many blogs. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For me, this new project ended up have far simpler associations that I could comprehend. But I still hope as I continue to try deepen my understanding on associations that I can come back to the original project and try complete it. For now, I learnt the hard way how important associations are. &lt;/p&gt;

</description>
      <category>rails</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Programming at my day job</title>
      <author>Lucas Kelly</author>
      <pubDate>Tue, 04 May 2021 19:49:03 +0000</pubDate>
      <link>https://dev.to/lucaskelly113/programming-at-my-day-job-1nie</link>
      <guid>https://dev.to/lucaskelly113/programming-at-my-day-job-1nie</guid>
      <description>&lt;p&gt;When you read the title of this post, you may think “what’s your day job? Isn’t that what you are supposed to do?”&lt;/p&gt;

&lt;p&gt;The answer is I’m a trading assistant for a financial planning and investment office. And no, my job is not programming related at all. At least it wasn’t meant to be...&lt;/p&gt;

&lt;p&gt;I’ve been at my job for almost 4 years now and have done much more than what I was originally hired to do. But since I began to learn how to program about 6 months ago, I have been able to save my employer probably a few hundred dollars at least by editing code on our server based Client Relationship Manager (CRM) myself. I literally just worked on the program today and saved probably at least $90 in fees that it would have cost to contact the company we usually work with to make changes. &lt;/p&gt;

&lt;p&gt;I’m posting about this because it gives me hope that although I am not in a tech related job at the moment, it definitely is where I see myself in a couple years. &lt;/p&gt;

&lt;p&gt;Talk to you all soon!&lt;/p&gt;

</description>
      <category>codenewbie</category>
    </item>
    <item>
      <title>I created a UI design every day of April</title>
      <author>Roshan</author>
      <pubDate>Tue, 04 May 2021 19:27:20 +0000</pubDate>
      <link>https://dev.to/roshan6399/i-created-a-ui-design-every-day-of-april-4g67</link>
      <guid>https://dev.to/roshan6399/i-created-a-ui-design-every-day-of-april-4g67</guid>
      <description>&lt;p&gt;Hi! I’m a software developer with a passion for UX design, and I spend my free time after work learning more about this interesting field. But sometimes it gets difficult to work on your hobbies and side projects. Long periods of lethargy and creative slowdowns are things I face often. There are times when I am full of energy and can come up with crazy ideas to design, but when the time comes to sit down and put in the work, it does not always go that well. Especially since the COVID lockdowns started, this mental block grew further. This wasn’t a good thing, so I set out to do something about it. A month later, I completed my goal of making a design every single day. This is an article about the journey and the lessons I learnt along the way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#staring-at-the-empty-canvas"&gt;
  &lt;/a&gt;
  Staring at the empty canvas
&lt;/h2&gt;

&lt;p&gt;An idea is only as good as its execution. There might be a lot of reasons why those ideas don’t get transformed into tangible work. Tiredness, lots of other things to do, feeling uninspired, illness, all of these reasons and more can justify a forgotten empty canvas, but it does not change the unpleasant feeling of guilt when you look at it. This is how I felt about my design work I had done so far. Although I had been occasionally taking up design projects from my friends, I felt like my personal growth in this field was inadequate. I struggled with consistency and motivation. I wanted to do something about it, so I decided to challenge myself to consistently create a design project and put it up online daily. I dug up a list I wrote two years ago of some app ideas I wanted to design, added a few ideas more, and finally put it to good use.&lt;br&gt;
The goal of this 30 day challenge was to help me build consistency, so no matter what circumstances I find myself in, I can try to push myself to complete the goal for the day. In terms of design, my goal was to explore Figma a little more, and to include a bit of variety and try out different things — mobile apps mostly, but also including web and desktop. The goal was to create a shot that captured the essence of the idea, detailed just enough to make sense, but not further than that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-exciting-first-day"&gt;
  &lt;/a&gt;
  An exciting first day
&lt;/h2&gt;

&lt;p&gt;Feeling excited about the first day of this challenge, I bought a new 0.9mm mechanical pencil (I love mechanical pencils) and brought out my papers to begin drawing wireframes for my first idea. The first design challenge was to create an alarm clock app. I started drawing a few mobile screens, and filled the layout with components. Once the sketch was good enough to make sense, I started designing it in Figma. After a couple of hours, I had the main alarm screen ready, but it did not feel right. I did a few modifications, but the outcome was the same. I felt like the design was not good enough, and this feeling stalled me further. I knew I had to move on and realize that it is impractical to expect the first attempt to match the expectation in my head. I set up a frame for presentation and uploaded my first Dribbble shot of the month.&lt;/p&gt;

&lt;p&gt;Lesson learnt: &lt;strong&gt;You just have to get started. It may not be pretty, but eventually you will get there.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z7VDfaLJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/roshanrahman/newportfolio/blob/master/assets/images/alarm.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z7VDfaLJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/roshanrahman/newportfolio/blob/master/assets/images/alarm.png%3Fraw%3Dtrue" alt="Alarm clock app — Prompt for day 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pizza-time"&gt;
  &lt;/a&gt;
  Pizza time
&lt;/h2&gt;

&lt;p&gt;The second day’s prompt was to make a food ordering or menu app for a pizzeria, with focus on customization. The idea of an interactive experience of pizza topping customization had been on my mind for a long time, so I was pretty excited to finally take a stab at it. I started with the wireframes, and this time the layout felt too dense. My first draft was very list heavy and looked more like a food delivery app, the focus on the pizza customization wasn’t there. I started again and this time I wanted to make it as minimalist as possible, put the pizza in the spotlight, and reduce the density of the UI elements. The layout looked good to go, but I felt a bit hesitant when it came to implementing it. It’s weird, but I hesitated to make use of images, especially those that did not come from Unsplash or other royalty free image sites. However, there was no way I could create my own images, it would be too much work, and it made no sense to focus on the source of the images, especially when the purpose was to just give visual tangibility to the idea. With that barrier aside, I collected a few images of some delicious looking pizzas and some toppings, and came up with a design that I was happy with.&lt;/p&gt;

&lt;p&gt;Lesson learnt: &lt;strong&gt;Focus on the problem at hand, if needed use tools to help you get there, it does always not have to be from scratch.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pkhrpmKZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/roshanrahman/newportfolio/blob/master/assets/images/pizza.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pkhrpmKZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/roshanrahman/newportfolio/blob/master/assets/images/pizza.png%3Fraw%3Dtrue" alt="A Pizza Ordering App — Prompt for Day 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#picking-up-the-pace"&gt;
  &lt;/a&gt;
  Picking up the pace
&lt;/h2&gt;

&lt;p&gt;The design of the next day came out great, the prompt was interesting and the screens came out pretty good. I liked how the colors and the shadow and stroke effects worked together. A few designs after that also came out nice and I was satisfied with the quality of them. I also started getting feedback from my friends about the design posts I was now uploading every day. This was a good feeling and boosted my overall confidence about this design project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NMaLl4ZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/roshanrahman/newportfolio/blob/master/assets/images/movie.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NMaLl4ZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/roshanrahman/newportfolio/blob/master/assets/images/movie.png%3Fraw%3Dtrue" alt="An app that suggests what movie to watch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-bump-in-the-road"&gt;
  &lt;/a&gt;
  A bump in the road
&lt;/h2&gt;

&lt;p&gt;I got stuck on a prompt that involved making map based navigation, similar to Uber. While the rough sketches made sense to me, I was finding it difficult to visually construct it with the right fonts and colors. None of the visual styles looked appealing, and eventually I ended up with a design that looked sparse and not very appealing, but I uploaded it anyway. Throughout the challenge, there were a few designs that were difficult to crack, but these were necessary failures, as they helped me identify what I was weak at. This was a benefit I had because of the variety in the prompts, they were not always similar. I tried making a desktop web site and it sucked too, it was also sparse. &lt;strong&gt;Knowing what you’re good at gives you a boost in confidence, and it tells you to move away to go learn new things. Knowing what you lack simply sharpens that direction and helps you locate the areas you need to work upon.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b8jZQSRH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/roshanrahman/newportfolio/blob/master/assets/images/carpool.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b8jZQSRH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/roshanrahman/newportfolio/blob/master/assets/images/carpool.png%3Fraw%3Dtrue" alt="I did not like how this car pooling app turned out"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-peoples-feedback"&gt;
  &lt;/a&gt;
  Getting people’s feedback
&lt;/h2&gt;

&lt;p&gt;I would regularly share posts with my friends and get feedback on how the final product looked like. This feedback was very useful to me, as it helped me scrutinize the design without involving my personal biases. Sometimes, the designs I expected to fail turned out to be quite well liked by them, and sometimes they pointed out flaws in the design that I was unable to see myself. Also, my developer friends also took great interest in some of the design ideas and wanted to implement them into a full app, and I was delighted to see such enthusiasm. But what do you do when you are at the drawing board and don’t know where to start? You do some research and talk to people, of course!&lt;/p&gt;

&lt;p&gt;For some of the design prompts, I did not adequately grasp the requirements, and I needed to make sure that the design is closer to what real users might expect. For such designs, I called up a few friends and asked them questions about the design idea and their experiences with the current means of solving the problem. For example, I had to design an app that helped people build their resume, and I wanted to experiment with something that was user friendly and most accessible to its audience. I talked to my friend and we discussed the experiences we had in college, the first time we created our resumes. We talked about how some of our classmates were struggling with setting up the layout of the resume. This talk sparked the idea of a mobile app (A.I powered and all that stuff) that users could interact with via conversations and simple forms, that can generate resumes based on template layouts, and can maintain them without the user needing to open the document and meddle with the layout. An excellent programmer friend helped me with a prompt about training for competitive programming.&lt;/p&gt;

&lt;p&gt;Lesson learnt: &lt;strong&gt;Share ideas with people, listen to what they have to say, creativity does not have to be a solo effort.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Ys0ucBP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/roshanrahman/newportfolio/blob/master/assets/images/resume.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Ys0ucBP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/roshanrahman/newportfolio/blob/master/assets/images/resume.png%3Fraw%3Dtrue" alt="An app that intelligently builds resumes&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rainy-days"&gt;
  &lt;/a&gt;
  Rainy days
&lt;/h2&gt;

&lt;p&gt;Obstacles and inconveniences are a steady part of life, they will come and go. During this project, there were a few inconveniences and temptations that had me thinking of procrastinating. A few issues amidst the glum situation of the pandemic brought down my energy to its knees, and I had no motivation to do anything. My laptop had an overheating issue, and would spike up to high temperatures and shut itself down at unexpected times. I had set up a temperature widget to closely monitor the temperatures but the shutdowns randomly happened anyway. (So grateful for Figma for this reason — it’s cloud based and syncs everything automatically) I used to design late at night, often too late, and these shutdowns meant I had to spare 30–40 minutes more for the laptop to cool down. It was quite frustrating but I did not give in to the temptation to postpone the design, I went ahead and completed the design before it could overheat again. Similarly, when there were other things that were much more exciting than this, the temptation to focus exclusively on those was also there. I had bought a new computer free of these overheating issues, and during that time I had to resist the urge to play Grand Theft Auto V on it instead of using the time to complete the day’s design.&lt;/p&gt;

&lt;p&gt;This may sound trivial to some people, and it is fair to say that it could have been much worse, but these are the things that added friction to my progress, especially at a time when my self-discipline was low. The fact that I was able to complete the goal for the day regardless of how the day had been has given me a great sense of accomplishment, and it has made me realize that I can push through these challenges and achieve the things I want to do.&lt;/p&gt;

&lt;p&gt;That brings me to the final lesson: &lt;strong&gt;Push yourself to do difficult things, if you know they are good for you. It will be worth it when you look back and see the distance you’ve covered.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QDBYahLV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/roshanrahman/newportfolio/blob/master/assets/images/music.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QDBYahLV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/roshanrahman/newportfolio/blob/master/assets/images/music.png%3Fraw%3Dtrue" alt="A music player app with the visual style of Windows Vista"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outcomes-of-this-challenge"&gt;
  &lt;/a&gt;
  Outcomes of this challenge
&lt;/h2&gt;

&lt;p&gt;I’ve created 30 design shots because of this challenge, some of which are good 😛 It helped me come out of a low energy rut and trained my discipline. I know what I am capable of, and I know the difficulties I can face. On the design side of things, I learnt my strengths and weaknesses, I got more hands-on experience with Figma, and I realized how long things take to develop. While putting out a visual shot takes only a few hours, some ideas need more work than that and need more time in the oven. This challenge did not feel like I’m punishing myself, it was easy sometimes, and sometimes very hard. But ultimately, it was a celebration of my abilities.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FAv4Xu-b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/roshanrahman/newportfolio/blob/master/assets/images/budget.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FAv4Xu-b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/roshanrahman/newportfolio/blob/master/assets/images/budget.gif%3Fraw%3Dtrue" alt="This smooth Figma prototype for a budget tracking app was fun to make!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A lot of my friends helped me by supporting me throughout this short project and giving me feedback. I cannot end this article without especially crediting the kind and artistically talented person who consistently was always there to listen to my ideas, offer design suggestions, and most importantly give me support when I needed it. This project is also a testament to the importance of surrounding yourself with people who can help you grow.&lt;/p&gt;

&lt;p&gt;I hope you found this article interesting. I wanted to share my journey with you, and I hope it helps you get started on your personal goals. It always sucks in the beginning, but if you push through the hard part of things, you will succeed and you will learn so much. Stay safe, and Godspeed! 🚀&lt;/p&gt;

&lt;p&gt;You can find all my designs on my &lt;a href="https://dribbble.com/roshan6399"&gt;Dribbble profile&lt;/a&gt; or on my &lt;a href="https://twitter.com/roshan6399"&gt;Twitter&lt;/a&gt;. I’d love to hear what you have to say.&lt;/p&gt;

</description>
      <category>ux</category>
      <category>design</category>
      <category>ui</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Secret input in python, Get input secretly and in a personalized way!</title>
      <author>Matin Najafi</author>
      <pubDate>Tue, 04 May 2021 19:12:07 +0000</pubDate>
      <link>https://dev.to/matin/secret-input-in-python-get-input-secretly-and-in-a-personalized-way-30ab</link>
      <guid>https://dev.to/matin/secret-input-in-python-get-input-secretly-and-in-a-personalized-way-30ab</guid>
      <description>&lt;p&gt;In the Python programming language, we use the input () command to get input from the user, which we all know. But sometimes we want to get the input so that the user actually enters it, but it can not be displayed in command prompt! In these cases, we use the local ‘’getpass‘’ library.&lt;br&gt;
Now we want to write a secret input function together that performs the getpass operation, but makes the appearance of the program more beautiful and hides the entries with a star or the custom display. (Like a password entry in html)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7yztu8PD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk0q25hmtd5bnpt4q34c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7yztu8PD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk0q25hmtd5bnpt4q34c.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we are not allowed to perform an operation when receiving a simple input in Python, let’s use pynput and get the input of the user keyboard&lt;br&gt;
In this short article, I want to make the code of this class available to you, but before that, I will give you a brief description.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works?
&lt;/h2&gt;

&lt;p&gt;This class receives your input with pynput and performs the simulation completely with a few simple terms and prints.&lt;br&gt;
The function of this function is such that the user input is received using pynput, but because pynput receives the user input in any place and we only want to receive the input that the user enters in the console, a function to receive the active window in the form of cross We write -platform and using this function, we put the condition in on_press that the inputs are received only in the console.&lt;br&gt;
To display the stars and any other costume characters as input, we must print it with a blank end. But it is not possible to print them using print ()! So we do this using the sys module and the sys.stdout command and print the expressions. Click to read a little about sys.stdout printing.&lt;br&gt;
Until now, inputs are received and a star or any other character is printed while typing! Now we want to make sure that if the character was wrong and we hit backspace, that character will be deleted from the console.&lt;br&gt;
If we pay attention, the inputs that are sent in on_press have a value called char that we can receive the value. But for keys such as Inter, backspace, arrow keys, etc., it is not like this and it is raised. So we bet that if the key entered is equal to pynput.keyboard.Key.backspace, the backup operation will be performed and a return will be made so that the continuation of the function code does not work. Now how to clear the input from the console? Just print the phrase ‘\b \b’ using sys.stdout. To be precise, each \b reverses the input once, but the character is not deleted after that. So we put a space after that to replace the input with a space after that and the character is removed from the user’s view and we go back again with \b once as if there was a backspace in the input once.&lt;br&gt;
Note that if you want to get the show to the user as desired, the user may give a multi-digit show. So multiply the phrase ‘\b \b’ by the number of show characters so that there is no problem.&lt;br&gt;
Done! So far we can type and delete the typed phrase. Be a little careful. If we hit too much backspace, the custom printed prompt will also be deleted. To prevent this, we create a numeric variable called on_char and set its value to 0. For each on_press we add a number to this variable. But we bet on backspace that if this variable is less than or equal to 0, it will retry and the function will not run. This way we can prevent this problem.&lt;br&gt;
So far we have made a show entry! Now we want to receive the user inputs and save them in a variable so that when the user enters the enter key, those saved inputs will be returned. Simply create a self.value in our &lt;strong&gt;init&lt;/strong&gt; class and put the key.char in each on_press, which is equivalent to the user input string character, and in the case of backspace, by converting the self.value to a list, and popping the last character And convert self.value to string again using join, delete the last letters.&lt;br&gt;
Note that for this section, put a try and except because it is possible to enter separation keys that do not have a value of char, so if except, do a simple return.&lt;br&gt;
For when the user enters the enter key, because we turned on the listener by join method and we can not simply stop the listener, so we start the listener in a fan and on_press in the same function. We put that function privately in &lt;strong&gt;init&lt;/strong&gt; so that the user can not use it.&lt;br&gt;
The problem with pynput is that when we press the Enter key, once the phrases we have typed so far are pasted and entered! To prevent this, if the user enters enter, we put an empty getpass.getpass to take this input imperceptibly!&lt;br&gt;
Almost done! Now call the function exactly below &lt;strong&gt;init&lt;/strong&gt; and then return the self.value value in &lt;strong&gt;str&lt;/strong&gt;. For added security, you can delete variables other than self.value with del. The codes of this useful class are available here:&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h1&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


</description>
      <category>python</category>
      <category>input</category>
      <category>secret</category>
      <category>trick</category>
    </item>
  </channel>
</rss>
