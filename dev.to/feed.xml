<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How To Enable Real-Time Merge Conflict Detection in WebStorm</title>
      <author>Fred</author>
      <pubDate>Thu, 16 Sep 2021 14:30:10 +0000</pubDate>
      <link>https://dev.to/gitlive/how-to-enable-real-time-merge-conflict-detection-in-webstorm-59mk</link>
      <guid>https://dev.to/gitlive/how-to-enable-real-time-merge-conflict-detection-in-webstorm-59mk</guid>
      <description>&lt;p&gt;Ah, the dreaded &lt;em&gt;resolve conflicts&lt;/em&gt; popup. You've finished crafting the perfect code, just a quick merge in of master (ahem, &lt;em&gt;main&lt;/em&gt;) before you submit your PR, and then... üí•&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KnrfzObL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631105453895/YWXZ2S8AY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnrfzObL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631105453895/YWXZ2S8AY.png" alt="img-1-scaled.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If only there was an early warning system for merge conflicts so you could be better prepared or even avoid the conflicts in the first place I hear you say? Well if you are a WebStorm user today is your lucky day!&lt;/p&gt;

&lt;p&gt;Firstly, you'll need to install and set up &lt;a href="https://plugins.jetbrains.com/plugin/11955-gitlive"&gt;GitLive&lt;/a&gt;. Then if you right click the gutter on WebStorm, you will see the option to ‚ÄúShow Other's Changes‚Äù.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7SvJwkz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631105494603/8m0GvqeVw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7SvJwkz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631105494603/8m0GvqeVw.png" alt="img-2-scaled.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will be disabled if the file open in the editor is not from git or there are no other changes to it from contributors working on other branches (aka you are safe from conflicts). If it's enabled there will be one or more change indicators in the gutter of the editor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BhIL0-RW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631109508311/p5BwXJ3fc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BhIL0-RW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631109508311/p5BwXJ3fc.png" alt="img-3.3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These will show you where your teammates have made changes compared to your version of the file and even update in real-time as you and your teammates are editing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--szMZgrkP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631105477371/nVpMNFsi2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--szMZgrkP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631105477371/nVpMNFsi2.png" alt="key indicators-dark.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you've made a conflicting change you will see the bright red conflict indicator. These conflicts can be uncommitted local changes you have not pushed yet or existing changes on your branch that conflict with your teammates‚Äô changes.&lt;/p&gt;

&lt;p&gt;Click your teammate‚Äôs icon in the gutter to see the diff between your version and theirs, the branch the offending changes are from, and the issue connected to that branch if there is one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VpTCcUgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631109501287/HjovOjeE8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VpTCcUgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631109501287/HjovOjeE8.png" alt="img-5.3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From this popup you can also cherry-pick your teammate‚Äôs change directly from their local version of the file. For simple conflicts this can be a quick way to resolve them as identical changes on different branches will merge cleanly.&lt;/p&gt;

&lt;p&gt;Unfortunately, it's not always possible to resolve a conflict straight away but with the early warning, you'll be better prepared, avoiding any nasty surprises at merge time!&lt;/p&gt;

&lt;p&gt;Check out &lt;a href="https://blog.git.live/gitlive-11.0-Real-time-merge-conflict-detection"&gt;this blog post&lt;/a&gt; or the &lt;a href="https://docs.git.live/docs/mergeconflicts/"&gt;GitLive docs&lt;/a&gt; if you want to learn more.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>git</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Notion receiver data Immunizations from Nodejs</title>
      <author>Thinh Nguyen</author>
      <pubDate>Thu, 16 Sep 2021 14:17:42 +0000</pubDate>
      <link>https://dev.to/qt91/notion-receiver-data-immunizations-from-nodejs-4e07</link>
      <guid>https://dev.to/qt91/notion-receiver-data-immunizations-from-nodejs-4e07</guid>
      <description>&lt;p&gt;Today we will learning send data to Notion by API&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-new-project"&gt;
  &lt;/a&gt;
  Setup new project
&lt;/h2&gt;

&lt;p&gt;At here I use "Express application generator" for fastest setup new project&lt;/p&gt;

&lt;p&gt;Steps:&lt;/p&gt;

&lt;p&gt;1/ Install express-generator&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; express-generator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2/ New project with name &lt;strong&gt;InjectionRegistrationNotion&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;express &lt;span class="k"&gt;**&lt;/span&gt;&lt;span class="nt"&gt;--view&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ejs&lt;span class="k"&gt;**&lt;/span&gt; &lt;span class="k"&gt;**&lt;/span&gt;InjectionRegistrationNotion&lt;span class="k"&gt;**&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---8D56G1t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8km73cbb62dr4281zxe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---8D56G1t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8km73cbb62dr4281zxe.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;InjectionRegistrationNotion
npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cAyRNawZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/izmbw7s3zgda5hbyalcy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cAyRNawZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/izmbw7s3zgda5hbyalcy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3/ Start server and get ready for write code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start // &lt;span class="k"&gt;for &lt;/span&gt;start server this project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Access to localhost:3000&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sYKOqRYK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zonqcjzl7da702g6xitm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sYKOqRYK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zonqcjzl7da702g6xitm.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! Everything ready for next step&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-make-a-form-injection-registration"&gt;
  &lt;/a&gt;
  Let's make a Form Injection Registration
&lt;/h2&gt;

&lt;p&gt;For write User Interface, I used &lt;strong&gt;ejs engine&lt;/strong&gt; because it friendly with HTML native&lt;/p&gt;

&lt;p&gt;Let's make a Form Injection Registration&lt;/p&gt;

&lt;p&gt;At file &lt;strong&gt;index.jes&lt;/strong&gt; in &lt;strong&gt;views&lt;/strong&gt; folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;&lt;span class="nb"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &amp;lt;title&amp;gt;&amp;lt;%&lt;span class="o"&gt;=&lt;/span&gt; title %&amp;gt;&amp;lt;/title&amp;gt;
  &amp;lt;&lt;span class="nb"&gt;link &lt;/span&gt;&lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700"&lt;/span&gt; &lt;span class="nv"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"stylesheet"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &amp;lt;&lt;span class="nb"&gt;link &lt;/span&gt;&lt;span class="nv"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"stylesheet"&lt;/span&gt; &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"https://use.fontawesome.com/releases/v5.5.0/css/all.css"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &amp;lt;&lt;span class="nb"&gt;link &lt;/span&gt;&lt;span class="nv"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"stylesheet"&lt;/span&gt; &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"./stylesheets/style.css"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"testbox"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &amp;lt;form &lt;span class="nv"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt; &lt;span class="nv"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"post"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;div &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"banner"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &amp;lt;h1&amp;gt;&amp;lt;%&lt;span class="o"&gt;=&lt;/span&gt; title %&amp;gt;&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"item"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &amp;lt;p&amp;gt;Name&amp;lt;/p&amp;gt;
      &amp;lt;div &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"name-item"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &amp;lt;input &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"text"&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;/&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"item"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &amp;lt;p&amp;gt;Email&amp;lt;/p&amp;gt;
      &amp;lt;input &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"text"&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"email"&lt;/span&gt;/&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"item"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &amp;lt;p&amp;gt;Phone&amp;lt;/p&amp;gt;
      &amp;lt;input &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"text"&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"phone"&lt;/span&gt;/&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"item"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &amp;lt;p&amp;gt;Address&amp;lt;/p&amp;gt;
      &amp;lt;input &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"text"&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"address"&lt;/span&gt;/&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"question"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &amp;lt;p&amp;gt;Gender&amp;lt;/p&amp;gt;
      &amp;lt;div &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"question-answer"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &amp;lt;div&amp;gt;
          &amp;lt;input &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"radio"&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"0"&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"radio_2"&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sex"&lt;/span&gt;/&amp;gt;
          &amp;lt;label &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"radio_2"&lt;/span&gt; &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"radio"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&amp;lt;span&amp;gt;Female&amp;lt;/span&amp;gt;&amp;lt;/label&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;input &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"radio"&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"1"&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"radio_1"&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sex"&lt;/span&gt;/&amp;gt;
          &amp;lt;label &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"radio_1"&lt;/span&gt; &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"radio"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&amp;lt;span&amp;gt;Male&amp;lt;/span&amp;gt;&amp;lt;/label&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"item"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &amp;lt;p&amp;gt;Note&amp;lt;/p&amp;gt;
      &amp;lt;textarea &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"note"&lt;/span&gt; &lt;span class="nv"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"3"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&amp;lt;/textarea&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"btn-block"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &amp;lt;button &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"submit"&lt;/span&gt; &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;Send&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/form&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At file "public/stylesheets/style.css"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;html, body &lt;span class="o"&gt;{&lt;/span&gt;
    min-height: 100%&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

body, div, form, input, &lt;span class="k"&gt;select&lt;/span&gt;, textarea, p &lt;span class="o"&gt;{&lt;/span&gt;
    padding: 0&lt;span class="p"&gt;;&lt;/span&gt;
    margin: 0&lt;span class="p"&gt;;&lt;/span&gt;
    outline: none&lt;span class="p"&gt;;&lt;/span&gt;
    font-family: Roboto, Arial, sans-serif&lt;span class="p"&gt;;&lt;/span&gt;
    font-size: 14px&lt;span class="p"&gt;;&lt;/span&gt;
    color: &lt;span class="c"&gt;#666;&lt;/span&gt;
    line-height: 22px&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

h1 &lt;span class="o"&gt;{&lt;/span&gt;
    position: absolute&lt;span class="p"&gt;;&lt;/span&gt;
    margin: 0&lt;span class="p"&gt;;&lt;/span&gt;
    font-size: 36px&lt;span class="p"&gt;;&lt;/span&gt;
    color: &lt;span class="c"&gt;#fff;&lt;/span&gt;
    z-index: 2&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

.testbox &lt;span class="o"&gt;{&lt;/span&gt;
    display: flex&lt;span class="p"&gt;;&lt;/span&gt;
    justify-content: center&lt;span class="p"&gt;;&lt;/span&gt;
    align-items: center&lt;span class="p"&gt;;&lt;/span&gt;
    height: inherit&lt;span class="p"&gt;;&lt;/span&gt;
    padding: 20px&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

form &lt;span class="o"&gt;{&lt;/span&gt;
    width: 100%&lt;span class="p"&gt;;&lt;/span&gt;
    padding: 20px&lt;span class="p"&gt;;&lt;/span&gt;
    border-radius: 6px&lt;span class="p"&gt;;&lt;/span&gt;
    background: &lt;span class="c"&gt;#fff;&lt;/span&gt;
    box-shadow: 0 0 20px 0 &lt;span class="c"&gt;#333;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

.banner &lt;span class="o"&gt;{&lt;/span&gt;
    position: relative&lt;span class="p"&gt;;&lt;/span&gt;
    height: 210px&lt;span class="p"&gt;;&lt;/span&gt;
    background-size: cover&lt;span class="p"&gt;;&lt;/span&gt;
    display: flex&lt;span class="p"&gt;;&lt;/span&gt;
    justify-content: center&lt;span class="p"&gt;;&lt;/span&gt;
    align-items: center&lt;span class="p"&gt;;&lt;/span&gt;
    text-align: center&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

.banner::after &lt;span class="o"&gt;{&lt;/span&gt;
    content: &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    background-color: rgba&lt;span class="o"&gt;(&lt;/span&gt;0, 0, 0, 0.4&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    position: absolute&lt;span class="p"&gt;;&lt;/span&gt;
    width: 100%&lt;span class="p"&gt;;&lt;/span&gt;
    height: 100%&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

input, textarea, &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    margin-bottom: 10px&lt;span class="p"&gt;;&lt;/span&gt;
    border: 1px solid &lt;span class="c"&gt;#ccc;&lt;/span&gt;
    border-radius: 3px&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

input &lt;span class="o"&gt;{&lt;/span&gt;
    width: calc&lt;span class="o"&gt;(&lt;/span&gt;100% - 10px&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    padding: 5px&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    width: 100%&lt;span class="p"&gt;;&lt;/span&gt;
    padding: 7px 0&lt;span class="p"&gt;;&lt;/span&gt;
    background: transparent&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

textarea &lt;span class="o"&gt;{&lt;/span&gt;
    width: calc&lt;span class="o"&gt;(&lt;/span&gt;100% - 12px&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    padding: 5px&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

.item:hover p, .item:hover i, .question:hover p, .question label:hover, input:hover::placeholder &lt;span class="o"&gt;{&lt;/span&gt;
    color: &lt;span class="c"&gt;#333;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

.item input:hover, .item &lt;span class="k"&gt;select&lt;/span&gt;:hover, .item textarea:hover &lt;span class="o"&gt;{&lt;/span&gt;
    border: 1px solid transparent&lt;span class="p"&gt;;&lt;/span&gt;
    box-shadow: 0 0 6px 0 &lt;span class="c"&gt;#333;&lt;/span&gt;
    color: &lt;span class="c"&gt;#333;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

.item &lt;span class="o"&gt;{&lt;/span&gt;
    position: relative&lt;span class="p"&gt;;&lt;/span&gt;
    margin: 10px 0&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

input[type&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"date"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;::-webkit-inner-spin-button &lt;span class="o"&gt;{&lt;/span&gt;
    display: none&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

.item i, input[type&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"date"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;::-webkit-calendar-picker-indicator &lt;span class="o"&gt;{&lt;/span&gt;
    position: absolute&lt;span class="p"&gt;;&lt;/span&gt;
    font-size: 20px&lt;span class="p"&gt;;&lt;/span&gt;
    color: &lt;span class="c"&gt;#a9a9a9;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

.item i &lt;span class="o"&gt;{&lt;/span&gt;
    right: 1%&lt;span class="p"&gt;;&lt;/span&gt;
    top: 30px&lt;span class="p"&gt;;&lt;/span&gt;
    z-index: 1&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"date"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;::-webkit-calendar-picker-indicator &lt;span class="o"&gt;{&lt;/span&gt;
    right: 0&lt;span class="p"&gt;;&lt;/span&gt;
    z-index: 2&lt;span class="p"&gt;;&lt;/span&gt;
    opacity: 0&lt;span class="p"&gt;;&lt;/span&gt;
    cursor: pointer&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

input[type&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"time"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;::-webkit-inner-spin-button &lt;span class="o"&gt;{&lt;/span&gt;
    margin: 2px 22px 0 0&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

input[type&lt;span class="o"&gt;=&lt;/span&gt;radio], input.other &lt;span class="o"&gt;{&lt;/span&gt;
    display: none&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

label.radio &lt;span class="o"&gt;{&lt;/span&gt;
    position: relative&lt;span class="p"&gt;;&lt;/span&gt;
    display: inline-block&lt;span class="p"&gt;;&lt;/span&gt;
    margin: 5px 20px 10px 0&lt;span class="p"&gt;;&lt;/span&gt;
    cursor: pointer&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

.question span &lt;span class="o"&gt;{&lt;/span&gt;
    margin-left: 30px&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

label.radio:before &lt;span class="o"&gt;{&lt;/span&gt;
    content: &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    position: absolute&lt;span class="p"&gt;;&lt;/span&gt;
    top: 2px&lt;span class="p"&gt;;&lt;/span&gt;
    left: 0&lt;span class="p"&gt;;&lt;/span&gt;
    width: 15px&lt;span class="p"&gt;;&lt;/span&gt;
    height: 15px&lt;span class="p"&gt;;&lt;/span&gt;
    border-radius: 50%&lt;span class="p"&gt;;&lt;/span&gt;
    border: 2px solid &lt;span class="c"&gt;#ccc;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;#radio_5:checked ~ input.other {&lt;/span&gt;
    display: block&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

input[type&lt;span class="o"&gt;=&lt;/span&gt;radio]:checked + label.radio:before &lt;span class="o"&gt;{&lt;/span&gt;
    border: 2px solid &lt;span class="c"&gt;#444;&lt;/span&gt;
    background: &lt;span class="c"&gt;#444;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

label.radio:after &lt;span class="o"&gt;{&lt;/span&gt;
    content: &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    position: absolute&lt;span class="p"&gt;;&lt;/span&gt;
    top: 7px&lt;span class="p"&gt;;&lt;/span&gt;
    left: 5px&lt;span class="p"&gt;;&lt;/span&gt;
    width: 7px&lt;span class="p"&gt;;&lt;/span&gt;
    height: 4px&lt;span class="p"&gt;;&lt;/span&gt;
    border: 3px solid &lt;span class="c"&gt;#fff;&lt;/span&gt;
    border-top: none&lt;span class="p"&gt;;&lt;/span&gt;
    border-right: none&lt;span class="p"&gt;;&lt;/span&gt;
    transform: rotate&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;-45deg&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    opacity: 0&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

input[type&lt;span class="o"&gt;=&lt;/span&gt;radio]:checked + label:after &lt;span class="o"&gt;{&lt;/span&gt;
    opacity: 1&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

.btn-block &lt;span class="o"&gt;{&lt;/span&gt;
    margin-top: 10px&lt;span class="p"&gt;;&lt;/span&gt;
    text-align: center&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

button &lt;span class="o"&gt;{&lt;/span&gt;
    width: 150px&lt;span class="p"&gt;;&lt;/span&gt;
    padding: 10px&lt;span class="p"&gt;;&lt;/span&gt;
    border: none&lt;span class="p"&gt;;&lt;/span&gt;
    border-radius: 5px&lt;span class="p"&gt;;&lt;/span&gt;
    background: &lt;span class="c"&gt;#444;&lt;/span&gt;
    font-size: 16px&lt;span class="p"&gt;;&lt;/span&gt;
    color: &lt;span class="c"&gt;#fff;&lt;/span&gt;
    cursor: pointer&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

button:hover &lt;span class="o"&gt;{&lt;/span&gt;
    background: &lt;span class="c"&gt;#666;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, We can check UI will be update in browser&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U6yRvHK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3u6tu0d25rvy36fppb0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U6yRvHK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3u6tu0d25rvy36fppb0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#process-server-side-with-api-notion"&gt;
  &lt;/a&gt;
  Process Server Side With API Notion
&lt;/h2&gt;

&lt;p&gt;Because this is a small example. So I will write all code in "routes/index.js" for everyone easy follow&lt;/p&gt;

&lt;p&gt;We need to make a new router for handle when Form submit&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;router.post&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;, async &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;req, res, next&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
//To be get parameter before Form submit and send data to server. We can use
const &lt;span class="o"&gt;{&lt;/span&gt;name, email, phone, address, sex, note&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; req.body&lt;span class="p"&gt;;&lt;/span&gt;
//Just &lt;span class="k"&gt;for &lt;/span&gt;debug
console.table&lt;span class="o"&gt;({&lt;/span&gt;name, email, phone, address, sex, note&lt;span class="o"&gt;})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
//Redirect to form when before submit
res.redirect&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can check data before submit&lt;/p&gt;

&lt;p&gt;In web&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iRRGEyp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws2jlv3pqdmzwbmma3a3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iRRGEyp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws2jlv3pqdmzwbmma3a3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In terminal be for click to "button Send"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NXr_MkPk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcd0ezqrwrxfhihtraz4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NXr_MkPk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcd0ezqrwrxfhihtraz4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we have done for get data from Form submit to Server, The next step we will send this data to Notion&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#send-data-to-notion-by-api"&gt;
  &lt;/a&gt;
  Send data to Notion by API
&lt;/h2&gt;

&lt;p&gt;First step we can install package "&lt;a href="https://www.npmjs.com/package/@notionhq/client"&gt;@notionhq/client&lt;/a&gt;"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i @notionhq/client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OngZqkuO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz1qha49v8uxnal4ky3e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OngZqkuO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz1qha49v8uxnal4ky3e.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Register to use the package&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;//Required package
const &lt;span class="o"&gt;{&lt;/span&gt;Client&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; require&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"@notionhq/client"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
//Setup config
const notion &lt;span class="o"&gt;=&lt;/span&gt; new Client&lt;span class="o"&gt;({&lt;/span&gt;
    auth: process.env.NOTION_TOKEN,
&lt;span class="o"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Send data to Notion by API&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;await notion.pages.create&lt;span class="o"&gt;({&lt;/span&gt;
        parent: &lt;span class="o"&gt;{&lt;/span&gt;
            database_id: process.env.NOTION_DATABASE_ID,
        &lt;span class="o"&gt;}&lt;/span&gt;,
        properties: &lt;span class="o"&gt;{&lt;/span&gt;
            Name: &lt;span class="o"&gt;{&lt;/span&gt;
                title: &lt;span class="o"&gt;[&lt;/span&gt;
                    &lt;span class="o"&gt;{&lt;/span&gt;
                        text: &lt;span class="o"&gt;{&lt;/span&gt;
                            content: name,
                        &lt;span class="o"&gt;}&lt;/span&gt;,
                    &lt;span class="o"&gt;}&lt;/span&gt;,
                &lt;span class="o"&gt;]&lt;/span&gt;,
            &lt;span class="o"&gt;}&lt;/span&gt;,
            Email: &lt;span class="o"&gt;{&lt;/span&gt;
                email: email,
            &lt;span class="o"&gt;}&lt;/span&gt;,
            PhoneNumber: &lt;span class="o"&gt;{&lt;/span&gt;
                rich_text: &lt;span class="o"&gt;[&lt;/span&gt;
                    &lt;span class="o"&gt;{&lt;/span&gt;
                        text: &lt;span class="o"&gt;{&lt;/span&gt;
                            content: phone,
                        &lt;span class="o"&gt;}&lt;/span&gt;,
                    &lt;span class="o"&gt;}&lt;/span&gt;,
                &lt;span class="o"&gt;]&lt;/span&gt;,
            &lt;span class="o"&gt;}&lt;/span&gt;,
            Address: &lt;span class="o"&gt;{&lt;/span&gt;
                rich_text: &lt;span class="o"&gt;[&lt;/span&gt;
                    &lt;span class="o"&gt;{&lt;/span&gt;
                        text: &lt;span class="o"&gt;{&lt;/span&gt;
                            content: address,
                        &lt;span class="o"&gt;}&lt;/span&gt;,
                    &lt;span class="o"&gt;}&lt;/span&gt;,
                &lt;span class="o"&gt;]&lt;/span&gt;,
            &lt;span class="o"&gt;}&lt;/span&gt;,
            Gender: &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;select&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
                    name: gender
                &lt;span class="o"&gt;}&lt;/span&gt;,
            &lt;span class="o"&gt;}&lt;/span&gt;,
            Note: &lt;span class="o"&gt;{&lt;/span&gt;
                rich_text: &lt;span class="o"&gt;[&lt;/span&gt;
                    &lt;span class="o"&gt;{&lt;/span&gt;
                        text: &lt;span class="o"&gt;{&lt;/span&gt;
                            content: note,
                        &lt;span class="o"&gt;}&lt;/span&gt;,
                    &lt;span class="o"&gt;}&lt;/span&gt;,
                &lt;span class="o"&gt;]&lt;/span&gt;,
            &lt;span class="o"&gt;}&lt;/span&gt;,
        &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Setup file .env&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;NOTION_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;secret_heBrP3242423424322iHM8UzmjnALYvJ4WoeLA
&lt;span class="nv"&gt;NOTION_DATABASE_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ccfe5824942343224aa20ec85e1c2f7e
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We wrote the code&lt;/p&gt;

&lt;p&gt;Access to link &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt; and fill data click button "Send"&lt;/p&gt;

&lt;p&gt;Result &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CMw9WNuZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dfuy5llo6tnddo9x86x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CMw9WNuZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dfuy5llo6tnddo9x86x.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git-repository"&gt;
  &lt;/a&gt;
  Git repository
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/qt91/InjectionRegistrationNotion"&gt;https://github.com/qt91/InjectionRegistrationNotion&lt;/a&gt;&lt;/p&gt;

</description>
      <category>notion</category>
      <category>node</category>
      <category>express</category>
      <category>api</category>
    </item>
    <item>
      <title>Handling Forms in ReactJS the right way</title>
      <author>Abhishek Agrawal</author>
      <pubDate>Thu, 16 Sep 2021 13:37:36 +0000</pubDate>
      <link>https://dev.to/fazer1929/handling-forms-in-reactjs-the-right-way-3glp</link>
      <guid>https://dev.to/fazer1929/handling-forms-in-reactjs-the-right-way-3glp</guid>
      <description>&lt;p&gt;Hello everyone, recently I came across a new way to handle React forms, maybe its something you know, maybe you've been doing this for years and think I am an Idiot for not knowing this earlier, but it is what it is so let's go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-react-forms-the-old-way"&gt;
  &lt;/a&gt;
  Using react forms the old way
&lt;/h2&gt;

&lt;p&gt;Let's consider a simple signup form that contains only 3 fields namely username, email, and password. Here's how I used to use forms earlier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SignUp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleEmailChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handlePasswordChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;setPassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleUsernameChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;setUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleUsernameChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleEmailChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handlePasswordChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Maybe you think wtf is this guy and why is the code is so bad. There's only one thing I can say to you, &lt;strong&gt;sorry&lt;/strong&gt;. To the other people who think there's nothing wrong with the code, prepare to get your mind blown.&lt;/p&gt;

&lt;p&gt;Let's look at the problems with the code first- &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Its a lot of state variables for handling a form, especially if you think about bigger forms with 10s of fields.&lt;/li&gt;
&lt;li&gt;The handleChange functions are totally redundant and can be easily refactored.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, now let's look at the amazing code to handle forms -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SignUp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFormData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newFormData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="nx"&gt;setFormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newFormData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Beautiful code, Right? Well, when I found it I thought it was amazing and worth sharing.&lt;br&gt;
But before you leave, &lt;strong&gt;make sure that the &lt;code&gt;formData&lt;/code&gt;'s keys are same as the input's &lt;code&gt;name&lt;/code&gt;, else you're code won't work properly&lt;/strong&gt;.&lt;/p&gt;




&lt;p&gt;That's pretty much it.&lt;br&gt;
Thank you for reading. Bye &lt;/p&gt;

</description>
      <category>react</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>forms</category>
    </item>
    <item>
      <title>Meet The Tanukis: Michael Friedrich</title>
      <author>Pj Metz</author>
      <pubDate>Thu, 16 Sep 2021 13:24:05 +0000</pubDate>
      <link>https://dev.to/metzinaround/meet-the-tanukis-michael-friedrich-3dkj</link>
      <guid>https://dev.to/metzinaround/meet-the-tanukis-michael-friedrich-3dkj</guid>
      <description>&lt;p&gt;Meet the Tanukis is a stream about the amazing Team members at GitLab. Each episode focuses on a team member discussing issues in tech that are important to them. This episode features Michael Friedrich, Senior Developer Evangelist&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/388JTsYAh9g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Links: &lt;br&gt;
&lt;a href="https://everyonecancontribute.com/"&gt;Everyone can Contribute Cafe!&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.google.com/presentation/d/1ydGggxiD7U1UcwVdr2Rz3ERl0UU19wsAeRmct5tcUN0/edit?usp=sharing"&gt;Michael's presentation at 55:04&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.google.com/presentation/d/1HnciJEQ8dDiHMaq1APg5WXA4mvcYQd9fdtvHicf-JyU/edit#slide=id.gdb238ed7ab_1_1"&gt;Michael's OSS journey&lt;/a&gt;&lt;br&gt;
&lt;a href="https://about.gitlab.com/blog/2021/07/19/teams-gitpod-integration-gitlab-speed-up-development/"&gt;GitPod&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://about.gitlab.com/solutions/education/join"&gt;Free Licenses for Education/Research Institutions!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>community</category>
      <category>gitlab</category>
      <category>techtalks</category>
      <category>devops</category>
    </item>
    <item>
      <title>Running React Native everywhere: Yarn Workspaces monorepo</title>
      <author>Matteo Mazzarolo</author>
      <pubDate>Thu, 16 Sep 2021 13:14:00 +0000</pubDate>
      <link>https://dev.to/mmazzarolo/running-react-native-everywhere-yarn-workspaces-monorepo-3j5g</link>
      <guid>https://dev.to/mmazzarolo/running-react-native-everywhere-yarn-workspaces-monorepo-3j5g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;First part of the &lt;a href="https://dev.to/mmazzarolo/running-react-native-everywhere-4gpp"&gt;"Running React Native everywhere"&lt;/a&gt; series.&lt;br&gt;&lt;br&gt;
In this post, we'll lay the foundation for running multiple React Native apps within a single codebase.&lt;/p&gt;

&lt;p&gt;Highlights:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using a monorepo to support multiple platforms with React Native&lt;/li&gt;
&lt;li&gt;What are Yarn Workspaces &lt;code&gt;nohoist&lt;/code&gt;'s benefits&lt;/li&gt;
&lt;li&gt;Bootstrapping a minimal Yarn Workspaces setup&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#multiplatform-support"&gt;
  &lt;/a&gt;
  Multi-platform support
&lt;/h2&gt;

&lt;p&gt;Running React Native on multiple platforms is not a new thing. We've been able to run React Native on the web, macOS, and Windows for quite a while now.&lt;br&gt;&lt;br&gt;
The most common and straightforward way to support different platforms with a single React Native codebase is to store all the configuration files required to run the app on all platforms in a single project directory.&lt;/p&gt;

&lt;p&gt;For example, if you're planning to support Android, iOS, Windows, and macOS, by following the &lt;a href="https://microsoft.github.io/react-native-windows/docs/getting-started"&gt;React Native for Windows + macOS&lt;/a&gt; documentation, you'll end up with a project that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
‚îî‚îÄ‚îÄ &amp;lt;project-root&amp;gt;/
    ‚îú‚îÄ‚îÄ android/
    ‚îú‚îÄ‚îÄ ios/
    ‚îú‚îÄ‚îÄ macos/
    ‚îú‚îÄ‚îÄ src/
    ‚îú‚îÄ‚îÄ windows/
    ‚îú‚îÄ‚îÄ app.json
    ‚îú‚îÄ‚îÄ babel.config.js
    ‚îú‚îÄ‚îÄ index.js
    ‚îú‚îÄ‚îÄ metro.config.js
    ‚îî‚îÄ‚îÄ package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This structure &lt;strong&gt;can&lt;/strong&gt; work perfectly fine for most use cases.&lt;/p&gt;

&lt;p&gt;...but, from my personal experience, it has a few drawbacks that get exponentially worse the more your codebase grows.&lt;/p&gt;

&lt;p&gt;First and foremost: &lt;strong&gt;you're forced to use the same version of React Native on every platform you support&lt;/strong&gt;.&lt;br&gt;&lt;br&gt;
Therefore, you won't be able to update React Native until all platforms are ready to support it.&lt;br&gt;&lt;br&gt;
Even though this limitation may not seem like an issue at first, it might get you stuck on older versions of React Native if even a single platform is not compatible with the latest versions.&lt;br&gt;&lt;br&gt;
Let's look at a real case example: as of today (Sep 2021), the latest stable version for React Native for macOS supports only React Native &lt;code&gt;0.63.4&lt;/code&gt; (released in Oct 2020).&lt;br&gt;&lt;br&gt;
Assuming we're planning to support both Android/iOS and macOS, we won't be able to update React Native in our project until React Native for macOS supports it. And we'd be stuck on an (almost) 1-year-old version of React Native even on Android/iOS.&lt;br&gt;&lt;br&gt;
&lt;em&gt;P.S.: To be clear, I'm not criticizing React Native for macOS's release cycle. It's just the first example of versions gap that comes to my mind.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Second, &lt;strong&gt;sharing code with other projects&lt;/strong&gt; (e.g., backend code, web apps) &lt;strong&gt;may get complicated&lt;/strong&gt;.&lt;br&gt;&lt;br&gt;
Out-of-the-box, &lt;a href="https://facebook.github.io/metro/"&gt;React Native's metro bundler&lt;/a&gt; cannot reference code outside of the project's root directory. You &lt;em&gt;can&lt;/em&gt; configure it to do so (and we'll do it as well later on). Still, once you do it, you'll also need to ensure dependencies resolution works correctly (to avoid loading two different versions of the same library, for example); which might not be as easy as it may sound.&lt;/p&gt;

&lt;p&gt;Last, because you're supporting multiple platforms in a single directory, &lt;strong&gt;it's easy to end up with confusing indirections and branches in platform-specific files&lt;/strong&gt;.&lt;br&gt;&lt;br&gt;
This may be just a "me" thing, but I find it hard to navigate around configuration files of projects that support multiple platforms. At first glance, it may look like all platforms use the same configuration files. But once you dig a bit deeper, you realize that each platform requires some ad-hoc tweaks to the configuration files (for Metro, Babel, Webpack, etc.).&lt;br&gt;&lt;br&gt;
Want an example from a codebase I wrote?&lt;br&gt;&lt;br&gt;
Check out &lt;a href="https://github.com/mmazzarolo/ordinary-puzzles-app"&gt;Ordinary Puzzles&lt;/a&gt;, which is a mobile, web, and Electron app.&lt;br&gt;&lt;br&gt;
It's not easy to understand what files are used by which platform (e.g., what platform build phase is using &lt;code&gt;babel.config.js&lt;/code&gt;?)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#a-possible-answer-to-these-issues-yarn-workspaces-monorepo"&gt;
  &lt;/a&gt;
  A possible answer to these issues: Yarn Workspaces monorepo
&lt;/h2&gt;

&lt;p&gt;A possible way to solve these issues that I've been using with success for a while now (and the one we'll use in this guide) is structuring the project as a &lt;a href="https://classic.yarnpkg.com/en/docs/workspaces/"&gt;Yarn Workspaces&lt;/a&gt; monorepo, keeping platform-specific code in different packages.&lt;/p&gt;

&lt;p&gt;Yarn Workspaces (and monorepos in general) is a way to allow multiple apps to coexist in the same repository and cross-reference each other, easing the overhead of repository management and allowing a higher degree of collaboration among teams.&lt;br&gt;&lt;br&gt;
Each app is known as "package", and has its own &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Thanks to Yarn Workspaces, &lt;strong&gt;we can go from a single app that runs on different platforms&lt;/strong&gt; to &lt;strong&gt;multiple apps that share common JavaScript code&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
‚îî‚îÄ‚îÄ &amp;lt;project-root&amp;gt;/
    &lt;span class="c"&gt;# JavaScript code of the app (shared between all apps)&lt;/span&gt;
    ‚îú‚îÄ‚îÄ app/
    ‚îÇ   ‚îú‚îÄ‚îÄ src/
    ‚îÇ   ‚îî‚îÄ‚îÄ package.json
    &lt;span class="c"&gt;# macOS app configuration files and native code&lt;/span&gt;
    ‚îú‚îÄ‚îÄ macos/
    ‚îÇ   ‚îú‚îÄ‚îÄ macos/
    ‚îÇ   ‚îú‚îÄ‚îÄ app.json
    ‚îÇ   ‚îú‚îÄ‚îÄ babel.config.js
    ‚îÇ   ‚îú‚îÄ‚îÄ index.js
    ‚îÇ   ‚îú‚îÄ‚îÄ metro.config.js
    ‚îÇ   ‚îî‚îÄ‚îÄ package.json
    &lt;span class="c"&gt;# Android/iOS app configuration files and native code&lt;/span&gt;
    ‚îú‚îÄ‚îÄ mobile/
    ‚îÇ   ‚îú‚îÄ‚îÄ android/
    ‚îÇ   ‚îú‚îÄ‚îÄ ios/
    ‚îÇ   ‚îú‚îÄ‚îÄ app.json
    ‚îÇ   ‚îú‚îÄ‚îÄ babel.config.js
    ‚îÇ   ‚îú‚îÄ‚îÄ index.js
    ‚îÇ   ‚îú‚îÄ‚îÄ metro.config.js
    ‚îÇ   ‚îî‚îÄ‚îÄ package.json
    &lt;span class="c"&gt;# Windows app configuration files and native code&lt;/span&gt;
    ‚îî‚îÄ‚îÄ windows/
        ‚îú‚îÄ‚îÄ windows/
        ‚îú‚îÄ‚îÄ app.json
        ‚îú‚îÄ‚îÄ babel.config.js
        ‚îú‚îÄ‚îÄ index.js
        ‚îú‚îÄ‚îÄ metro.config.js
        ‚îî‚îÄ‚îÄ package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To me, this structure perfectly suits &lt;strong&gt;React Native's "Learn once, write anywhere" headline&lt;/strong&gt;.&lt;br&gt;&lt;br&gt;
By using a single project structure, it's easy to forget that we're not developing a "single" app: we're developing different apps (Android, iOS, web, etc.) that run the same JavaScript code.&lt;br&gt;&lt;br&gt;
The difference between a monolithic approach and monorepo, is that in the former, all apps are forced to use the same dependency versions. In the latter, you're free to use different dependency versions on each app.&lt;/p&gt;

&lt;p&gt;This "freedom" comes as a double-edged sword.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Suppose you decide to use two different versions of React Native. In that case, the shared JavaScript code must support both versions&lt;/strong&gt;: you can't simply run the current version of React Native on a platform and a two year old version of it on another and expect the shared JavaScript code to just work. Even if React Native is steadily becoming more "stable" you still need to take into account breaking changes.&lt;/p&gt;

&lt;p&gt;That said, as we'll see later on, between platform-specific file names (&lt;code&gt;index.ios.js&lt;/code&gt;, &lt;code&gt;index.web.js&lt;/code&gt;, etc.) and being able to isolate platform-specific JavaScript code in packages, supporting different dependency versions might be easier than you expect.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#yarns-nohoist"&gt;
  &lt;/a&gt;
  Yarn's nohoist
&lt;/h2&gt;

&lt;p&gt;A crucial part of our monorepo setup is &lt;a href="https://classic.yarnpkg.com/blog/2018/02/15/nohoist/"&gt;Yarn's &lt;code&gt;nohoist&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To reduce redundancy, most package managers employ some kind of hoisting scheme to extract and flatten all dependent modules, as much as possible, into a centralized location.&lt;br&gt;
Yarn Workspaces store the flattened dependencies in a &lt;code&gt;node_modules&lt;/code&gt; directory in the project root and makes it accessible to the workspace packages by symlinking the libraries in the packages' &lt;code&gt;node_module&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;While it might appear that we can access all modules from the project‚Äôs root &lt;code&gt;node_modules&lt;/code&gt;, the reality is that build processes sometimes aren't able to traverse symlinks.&lt;br&gt;
This problem is especially prominent in React Native apps, where both the &lt;a href="https://github.com/facebook/metro/issues/1"&gt;metro bundler&lt;/a&gt; and the native code can't follow symlinks.&lt;/p&gt;

&lt;p&gt;A common way to solve this issue in React Native monorepos, is to configure the metro bundler and the native layer to use the project's root &lt;code&gt;node_modules&lt;/code&gt; directory instead of the package's one.&lt;br&gt;
While this approach ensures you gain all the benefits of the hoisting process, it introduces a few complexities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each time you update React Native (or a library that requires native linking), you must also update (or at least keep in sync) the native code with the root project's &lt;code&gt;node_modules&lt;/code&gt; directory. To me, this process has always seemed error-prone, because you're dealing with multiple languages and build-tools.&lt;/li&gt;
&lt;li&gt;Suppose your packages need different versions of React Native (or of a library that requires native linking). In that case, you can't ensure React Native will be installed in a specific location (unless you give up the hoisting mechanism) ‚Äî adding even more complexities to the table.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For these reasons, we'll use a different approach: &lt;strong&gt;&lt;a href="https://classic.yarnpkg.com/blog/2018/02/15/nohoist/"&gt;Yarn's &lt;code&gt;nohoist&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Yarn's &lt;code&gt;nohoist&lt;/code&gt; is a setting that disables the selected modules from being hoisted to the project root.&lt;/strong&gt; They are placed in the actual (child) project instead, just like in a standalone, non-workspaces, project.&lt;/p&gt;

&lt;p&gt;Of course, this comes with drawbacks. The most obvious one is that nohoist modules could be duplicated in multiple locations, denying the benefit of hoisting mentioned above. Therefore, we'll keep nohoist scope as small and explicit as possible, targeting only problematic libraries.&lt;/p&gt;

&lt;p&gt;Thanks to nohoist, we can avoid making changes to the native code, and we can keep the monorepo configuration in the JavaScript land. This means we can even extract common metro and webpack settings in a workspace package to share them easily across the entire project.&lt;/p&gt;

&lt;p&gt;And, even more importantly, different platforms can use different versions of React Native (and native libraries), favoring incremental updates instead of migrating the entire project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please notice that I'm focusing on Yarn Workspaces just because it's the tool I'm most familiar with. You can achieve similar results with &lt;a href="https://pnpm.io/"&gt;pnpm&lt;/a&gt; and &lt;a href="https://nx.dev/"&gt;nx&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#creating-our-monorepo"&gt;
  &lt;/a&gt;
  Creating our monorepo
&lt;/h2&gt;

&lt;p&gt;Enough with the theory! Let's start the setup of our monorepo.&lt;/p&gt;

&lt;p&gt;First of all, ensure &lt;a href="https://classic.yarnpkg.com/lang/en/"&gt;Yarn 1 (classic)&lt;/a&gt; is installed.&lt;/p&gt;

&lt;p&gt;Then, initialize a new &lt;code&gt;my-app&lt;/code&gt; project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Create the project dir and cd into it.&lt;/span&gt;
&lt;span class="nb"&gt;mkdir &lt;/span&gt;my-app &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;my-app

&lt;span class="c"&gt;# Initialize git.&lt;/span&gt;
git init
npx gitignore node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add this &lt;code&gt;package.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"my-app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"private"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"workspaces"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"packages"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"packages/*"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"reset"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"find . -type dir -name node_modules | xargs rm -rf &amp;amp;&amp;amp; rm -rf yarn.lock"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;workspaces.packages&lt;/code&gt; setting tells Yarn that each package (e.g., &lt;code&gt;mobile&lt;/code&gt;, &lt;code&gt;macos&lt;/code&gt;, etc.) will live in &lt;code&gt;&amp;lt;root&amp;gt;/packages/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;reset&lt;/code&gt; script deletes all the &lt;code&gt;node_modules&lt;/code&gt; directories in the project (recursively) and the root &lt;code&gt;yarn.lock&lt;/code&gt; file. It may come in handy during the initial phase of the setup if we mistakenly install dependencies that should be nohoisted before adding them to &lt;code&gt;nohoist&lt;/code&gt; :)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create an empty &lt;code&gt;packages&lt;/code&gt; directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;packages
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, the most important part: add a &lt;code&gt;nohoist&lt;/code&gt; section to your &lt;code&gt;package.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"my-app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"private"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"workspaces"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"packages"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"packages/*"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"nohoist"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"**/react"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"**/react-dom"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"**/react-native"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"reset"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"find . -type dir -name node_modules | xargs rm -rf &amp;amp;&amp;amp; rm -rf yarn.lock"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;code&gt;nohoist&lt;/code&gt; section will tell Yarn that the listed dependencies (specified as &lt;a href="https://github.com/isaacs/minimatch"&gt;glob patterns&lt;/a&gt;) should be installed in the &lt;code&gt;node_modules&lt;/code&gt; directory of each package instead of the root project's one.&lt;br&gt;&lt;br&gt;
For now, I just added &lt;code&gt;react&lt;/code&gt;, &lt;code&gt;react-dom&lt;/code&gt;, and &lt;code&gt;react-native&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;react-native&lt;/code&gt; because the native code requires/expects it to be installed at the package level.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt; because once we start supporting the React Native for Web, it will be easy to get into a state where the app crashes because &lt;a href="https://github.com/facebook/react/issues/13991"&gt;different versions of React are loaded on the page&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Spoiler: we'll have to come back and update this list every time we notice a dependency doesn't work well when hoisted.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We're done, for now!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h2&gt;

&lt;p&gt;In the next step, we'll add support for Android and iOS to our monorepo and learn how to configure the metro bundler dynamically based on the &lt;code&gt;nohoist&lt;/code&gt; list.&lt;/p&gt;

&lt;p&gt;Stay tuned!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/mmazzarolo/running-react-native-everywhere-4gpp"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Monorepo setup (‚òú you're here)&lt;/li&gt;
&lt;li&gt;Android &amp;amp; iOS (üöß WIP)&lt;/li&gt;
&lt;li&gt;The web (üöß WIP)&lt;/li&gt;
&lt;li&gt;Electron (üöß WIP)&lt;/li&gt;
&lt;li&gt;Chrome extension (üöß WIP)&lt;/li&gt;
&lt;li&gt;macOS (üöß WIP)&lt;/li&gt;
&lt;li&gt;Windows (üöß WIP)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://mmazzarolo.com/blog/2021-09-12-running-react-native-everywhere-monorepo/"&gt;mmazzarolo.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>aws app mesh in 5 steps</title>
      <author>Constantin</author>
      <pubDate>Thu, 16 Sep 2021 12:50:05 +0000</pubDate>
      <link>https://dev.to/jaecktec/aws-app-mesh-in-5-steps-1bmc</link>
      <guid>https://dev.to/jaecktec/aws-app-mesh-in-5-steps-1bmc</guid>
      <description>&lt;h3&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  note:
&lt;/h3&gt;

&lt;p&gt;if you want to skip reading and just want to see the finished code visit my &lt;a href="https://github.com/jaecktec/aws-cdk-appmesh-example/tree/final"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  prerequisites:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;docker installed&lt;/li&gt;
&lt;li&gt;node and npm installed&lt;/li&gt;
&lt;li&gt;AWS account&lt;/li&gt;
&lt;li&gt;a few spare bucks (AWS is not for free)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#whats-fargate"&gt;
  &lt;/a&gt;
  what's fargate
&lt;/h3&gt;

&lt;p&gt;I'm not copy-pasting the marketing description here. What is interesting in the end is how it affects your day-to-day job. &lt;br&gt;
The most important features are: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;host your Docker images at ease&lt;/li&gt;
&lt;li&gt;utilize AWS cloud-native features &lt;/li&gt;
&lt;li&gt;don't waste time in managing EC2 instances &lt;/li&gt;
&lt;li&gt;quick deployment and advanced rollout features when using &lt;a href="https://aws.amazon.com/de/codedeploy/"&gt;aws-code-deploy&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#what-does-a-service-mesh-for-you"&gt;
  &lt;/a&gt;
  what does a service mesh for you:
&lt;/h3&gt;

&lt;p&gt;A service mesh helps you with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;service discovery (routing between Microservices), &lt;/li&gt;
&lt;li&gt;streamlined logging and tracing between Microservices&lt;/li&gt;
&lt;li&gt;help with resilience by routing traffic away from failed instances (usually you'd implement this with a load balancer). &lt;/li&gt;
&lt;li&gt;enables you to easily implement features like canary deployments and blue/green testing&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#how-does-it-do-that"&gt;
  &lt;/a&gt;
  how does it do that?
&lt;/h3&gt;

&lt;p&gt;These features are archived by deploying a managed proxy alongside your application which intercepts traffic from and to your application. The proxy takes care of fetching the mesh configuration, routing the requests, and registering your instance to the mesh. The deployment is often referred to as 'sidecar' since you have one proxy per service instance. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-is-it-supposed-to-work-in-amazon"&gt;
  &lt;/a&gt;
  how is it supposed to work in amazon
&lt;/h3&gt;

&lt;p&gt;Amazon supports Service-Meshes by giving you access to a managed &lt;a href="https://www.envoyproxy.io/"&gt;envoy-proxy&lt;/a&gt; hosting.&lt;br&gt;&lt;br&gt;
What you need to do: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you deploy an envoy proxy as a side-car image next to your application container. &lt;/li&gt;
&lt;li&gt;you utilize the fargate-proxy config and reroute traffic to the envoy-proxy&lt;/li&gt;
&lt;li&gt;you define virtual services/gateways/routes to stitch your mesh together
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#terminology-in-aws"&gt;
  &lt;/a&gt;
  terminology in AWS
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;virtual node:&lt;/strong&gt; represents a compute instance like a fargate container&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;virtual service:&lt;/strong&gt; represents a logical group (1..n) of nodes&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;virtual route:&lt;/strong&gt; uses parameter (HTTP/GRPC) to route traffic to specific nodes/services&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;virtual gateway:&lt;/strong&gt; specifies an incoming or outgoing gateway from app-mesh&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AWS Showcase: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X_OSgqyu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1.awsstatic.com/diagrams/image%2520%289%29.c86b0113dde0d2dbdc99a1ffad59805d86b5cb82.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X_OSgqyu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1.awsstatic.com/diagrams/image%2520%289%29.c86b0113dde0d2dbdc99a1ffad59805d86b5cb82.png" alt="Aws showcase"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  resources
&lt;/h3&gt;

&lt;p&gt;some great resources I used to build my service mesh are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.redhat.com/en/topics/microservices/what-is-a-service-mesh"&gt;What's a service mesh?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/qM4uf9l5lus"&gt;AWS Cloud Containers Conference - Deep Dive on Configuring AWS App Mesh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#step-1-preparation"&gt;
  &lt;/a&gt;
  Step 1, preparation.
&lt;/h2&gt;

&lt;p&gt;I've prepared two microservices with a small react app that polls two endpoints. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--leRSO2D3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7tkxtb17402noiyvevz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--leRSO2D3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7tkxtb17402noiyvevz.png" alt="BFF Architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;let's clone the GitHub repository&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone git@github.com:jaecktec/aws-cdk-appmesh-example.git
cd aws-cdk-appmesh-example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quick walkthrough:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#infrastructure-folder"&gt;
  &lt;/a&gt;
  infrastructure folder
&lt;/h3&gt;

&lt;p&gt;contains AWS CDK infrastructure such as: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fargate cluster, services and task-defs&lt;/li&gt;
&lt;li&gt;private DNS namespace&lt;/li&gt;
&lt;li&gt;ALB
used to host a small web app that accesses a non-exposed microservice through a gateway. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#services"&gt;
  &lt;/a&gt;
  services
&lt;/h3&gt;

&lt;p&gt;contains some microservices alongside Dockerfiles&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#servicescolortellerbackend"&gt;
  &lt;/a&gt;
  services/color-teller-backend
&lt;/h3&gt;

&lt;p&gt;rudimentary expressjs service which returns the environment variable 'COLOR' on [GET]/color and 200 on [GET]/health&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#servicescolortellerclient"&gt;
  &lt;/a&gt;
  services/color-teller-client
&lt;/h3&gt;

&lt;p&gt;small react-app whith polls /gateway/color/color and /version and a expressjs services that exposes two endpoints, one /gateway/color/* which is a http-proxy to an endpoint defined in an env-variable called &lt;code&gt;COLOR_BACKEND&lt;/code&gt; + a version endpoint which returns the env-variable called &lt;code&gt;VERSION&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-your-prerequisites"&gt;
  &lt;/a&gt;
  test your prerequisites
&lt;/h3&gt;

&lt;p&gt;open the infrastructure folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd infrastructure
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i
npx cdk deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this might take a few seconds, once you're asked to confirm, confirm by entering &lt;code&gt;y&lt;/code&gt; and hit enter.&lt;/p&gt;

&lt;p&gt;once everything got deployed you should see an HTTP address, open this in the browser. If everything worked you should see a &lt;code&gt;Color Teller&lt;/code&gt; showing &lt;code&gt;vanilla red&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--04bXqgeZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eeaw8kt0evraloq6oslv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--04bXqgeZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eeaw8kt0evraloq6oslv.png" alt="Sample image of deployed app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;to not hit conflicts, let's clean up:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx cdk destroy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Feel free to browse through the code but please don't judge me on the microservices, they were hacked together in a local coffee shop (not ‚≠êÔ∏èü™£, I'm not that wealthy)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-create-mesh"&gt;
  &lt;/a&gt;
  Step 1: create mesh
&lt;/h3&gt;

&lt;p&gt;In our first step, we will create our &lt;code&gt;Mesh&lt;/code&gt; and modify &lt;code&gt;createService&lt;/code&gt; to accept and use the mesh. &lt;/p&gt;

&lt;p&gt;before the first &lt;code&gt;createService&lt;/code&gt; call add&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mesh = new Mesh(this, 'mesh');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this will create an app-mesh for us&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-create-a-virtual-node"&gt;
  &lt;/a&gt;
  Step 2: create a virtual node
&lt;/h3&gt;

&lt;p&gt;now modify the signature of &lt;code&gt;createService&lt;/code&gt; to accept a &lt;code&gt;Mesh&lt;/code&gt; and return a &lt;code&gt;VirtualNode&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ...
private createService(
  id: string,
  cluster: Cluster,
  image: ContainerImage,
  namespace: PrivateDnsNamespace,
  mesh: Mesh,
  envOverwrite: { [key: string]: string } = {},
): {
  service: FargateService,
  port: number,
  privateDnsName: string,
  node: VirtualNode,
} {
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now inside the &lt;code&gt;createService&lt;/code&gt; function we can create our VirtualNode and return it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const bgNode = new VirtualNode(this, `${id}-virtual-node`, {
  mesh,
  virtualNodeName: `${id}-virtual-node`,
  accessLog: AccessLog.fromFilePath('/dev/stdout'),
  serviceDiscovery: ServiceDiscovery.cloudMap(service.cloudMapService!),
  listeners: [VirtualNodeListener.http({
    port: appPort,
    healthCheck: HealthCheck.http({
      path: 'health', // no forward slash, this makes them appear in x-ray later on... this took me 3 hours to figure out (‚ïØ¬∞‚ñ°¬∞)‚ïØÔ∏µ ‚îª‚îÅ‚îª
    }),
  })],
});

return {
  service,
  port: appPort,
  privateDnsName: `${id}.${namespace.namespaceName}`,
  node: bgNode
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-attach-an-envoysidecar-image"&gt;
  &lt;/a&gt;
  Step 3: attach an envoy-sidecar image
&lt;/h3&gt;

&lt;p&gt;in addition we need to add a new containerDefinition for the envoy-proxy. AWS provides the envoi-proxy image under region-specific paths, however, I chose to use the global image.&lt;br&gt;
A thing that is easy to miss: We need to add the managed policy &lt;code&gt;AWSAppMeshEnvoyAccess&lt;/code&gt; to the taskRole&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const virtualNodeName = `${id}-virtual-node`;
const envoyContainer = taskDef.addContainer('envoy', {
  image: ContainerImage.fromRegistry('public.ecr.aws/appmesh/aws-appmesh-envoy:v1.19.1.0-prod'),
  essential: true,
  environment: {
    'APPMESH_RESOURCE_ARN': `arn:aws:appmesh:${Aws.REGION}:${Aws.ACCOUNT_ID}:mesh/${mesh.meshName}/virtualNode/${virtualNodeName}`,
  },
  healthCheck: {
    command: [
      'CMD-SHELL',
      'curl -s http://localhost:9901/server_info | grep state | grep -q LIVE',
    ],
    interval: Duration.seconds(5),
    timeout: Duration.seconds(2),
    startPeriod: Duration.seconds(10),
    retries: 3,
  },
  user: '1337', // important later for the proxy config
  logging: new AwsLogDriver({
    streamPrefix: `${id}/envoy/`,
  }),
});
taskDef.taskRole.addManagedPolicy(
  ManagedPolicy.fromAwsManagedPolicyName('AWSAppMeshEnvoyAccess'),
);
envoyContainer.addUlimits({ name: UlimitName.NOFILE, hardLimit: 15000, softLimit: 15000 });
appContainer.addContainerDependencies({
  container: envoyContainer,
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now we have our envoy-sidecar deployed. However, the traffic needs to be routed through the proxy so it can do its job. For that, we will add a &lt;code&gt;proxyConfiguration&lt;/code&gt; to the &lt;code&gt;TaskDef&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;proxyConfiguration: new AppMeshProxyConfiguration({
  containerName: 'envoy',
  properties: {
    ignoredUID: 1337, // user from envoy-container
    appPorts: [ appPort ],
    proxyIngressPort: 15000,
    proxyEgressPort: 15001,
    egressIgnoredIPs: [ '169.254.170.2', '169.254.169.254' ],
  },
}),
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-create-virtual-service"&gt;
  &lt;/a&gt;
  Step 4: create virtual service
&lt;/h3&gt;

&lt;p&gt;In this step, we will create our virtual service and add some routing. &lt;em&gt;we could not have the router however, it enables you easily modify it to tinker around with routing&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;private createVirtualService(
  serviceName: string,
  mesh: Mesh,
  backendNode: VirtualNode,
  namespace: PrivateDnsNamespace,
): VirtualService {
  const router = new VirtualRouter(this, `${serviceName}-virtual-router`, {
    mesh,
    listeners: [VirtualRouterListener.http(3000)],
  });

  router.addRoute('default', {
    routeSpec: RouteSpec.http({
      weightedTargets: [{
        weight: 1,
        virtualNode: backendNode,
      }],
    }),
  });

  const service = new VirtualService(this, serviceName, {
    virtualServiceProvider: VirtualServiceProvider.virtualRouter(router),
    virtualServiceName: `${serviceName}.${namespace.namespaceName}`,
  });
  // https://docs.aws.amazon.com/app-mesh/latest/userguide/troubleshoot-connectivity.html#ts-connectivity-dns-resolution-virtual-service
  new Service(this, `${serviceName}-dummy-service`, {
    namespace,
    name: serviceName,
    dnsRecordType: DnsRecordType.A,
    description: 'The dummy for App Mesh',
  }).registerIpInstance('dummy-instance', { ipv4: '10.10.10.10' });

  return service;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and call the method right after creating the &lt;code&gt;createService&lt;/code&gt; invocation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// [...]
const backendVService = this.createVirtualService('color-service', mesh, backendNode, namespace);
// [...]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now our service will be available (from a meshified node) under the DNS name &lt;code&gt;color-service.service.local&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;next step we also need to update the environment variable in our gateway service so it knows where to find our color-backend:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;COLOR_BACKEND: `http://${backendVService.virtualServiceName}:${backendPort}`,
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and we need to tell the virtual node of the gateway service that we require to access the service&lt;br&gt;
(you also need to name the node attribute from the creteService function)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// [...]
const { service: clientFGService, port: appPort, node: clientNode } = this.createService(
      'client-1',
// [...]
clientNode.addBackend(Backend.virtualService(backendVService));
// [...]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now let's deploy the stack and check our result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx cdk deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The routing will be taken care of by app-mesh. Theoretically, we're done however, the ALB still directly routs the traffic to one of the microservices, so technically it is exposed (and we don't get normalized metrics for it). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-create-an-ingress-gateway"&gt;
  &lt;/a&gt;
  Step 5: create an ingress gateway
&lt;/h3&gt;

&lt;p&gt;In this step, we will deploy an envoy-proxy as the ingress gateway. We just need to deploy envoy-proxy as the main container, expose the application port (8080) and configure it as a &lt;code&gt;VirtualGateway&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;These are a lot of steps that are just a tutorial of deploying an app as a fargate-container. &lt;br&gt;
Important here is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;taskRole needs managed policy &lt;code&gt;AWSAppMeshEnvoyAccess&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;app port is 8080 however, the health check port is 9901. That means, we need to explicitly allow communication on 9901 between ALB and the APP&lt;/li&gt;
&lt;li&gt;health url is /server_info (for ALB)
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;private createIngressService(
  cluster: Cluster,
  listener: ApplicationListener,
  mesh: Mesh,
): {
  gateway: VirtualGateway,
  fgService: FargateService,
} {
  const port = 8080;
  const gateway = new VirtualGateway(this, 'virtual-gateway', {
    mesh,
    listeners: [VirtualGatewayListener.http({ port })],
  });

  const taskDef = new FargateTaskDefinition(this, 'ingress-fargate-task-def', {
    memoryLimitMiB: 512,
  });

  const container = taskDef.addContainer('ingress-app', {
    // most up-to-date envoy image at the point of writing the article
    image: ContainerImage.fromRegistry('public.ecr.aws/appmesh/aws-appmesh-envoy:v1.19.1.0-prod'),
    logging: new AwsLogDriver({ streamPrefix: 'ingress-app-' }),
    portMappings: [
      { containerPort: port },
      { containerPort: 9901 }, // for health check
    ],
    healthCheck: {
      // health check from Documentation
      command: ['CMD-SHELL', 'curl -s http://localhost:9901/server_info | grep state | grep -q LIVE || exit 1'],
      interval: Duration.seconds(5),
      timeout: Duration.seconds(2),
      startPeriod: Duration.seconds(10),
      retries: 3,
    },
    environment: {
      APPMESH_VIRTUAL_NODE_NAME: `mesh/${mesh.meshName}/virtualGateway/${gateway.virtualGatewayName}`, // important, otherwhise envoiy can't fetch the config
      AWS_REGION: Aws.REGION,
    },
    memoryLimitMiB: 320, // limit examples from the official docs
    cpu: 208, // limit examples from the official docs
  });
  // limit examples from the official docs
  container.addUlimits({
    name: UlimitName.NOFILE,
    hardLimit: 1024000,
    softLimit: 1024000,
  });
  const service = new FargateService(this, 'ingress-service', {
    cluster,
    assignPublicIp: true, // for public vpc
    minHealthyPercent: 0, // for zero downtime rolling deployment set desiredcount=2 and minHealty = 50
    desiredCount: 1,
    taskDefinition: taskDef,
    vpcSubnets: { subnetType: SubnetType.PUBLIC },
    securityGroups: [new SecurityGroup(this, 'ingress-default-sg', {
      securityGroupName: 'ingress-fargate-service',
      vpc: cluster.vpc,
    })],
  });
  listener.addTargets('ingress-gateway-target', {
    port,
    protocol: ApplicationProtocol.HTTP,
    healthCheck: {
      protocol: ELBProtocol.HTTP,
      interval: Duration.seconds(10),
      // health port from aws-envoy docs
      port: '9901',
      // health check path from aws-envoy docs
      path: '/server_info',
    },
    targets: [service],
    deregistrationDelay: Duration.seconds(0), // not needed, just speeds up the deployment for this example
  });

  // required so the ALB can reach the health-check endpoint
  service.connections.allowFrom(listener, Port.tcp(9901));
  // required so the service can fetch the documentation
  taskDef.taskRole.addManagedPolicy(ManagedPolicy.fromAwsManagedPolicyName('AWSAppMeshEnvoyAccess'));

  return {gateway, fgService: service};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Lastly, we just need to remove the ALB ListenerTarget pointing to our clientService. The call of the function &lt;code&gt;createIngressService&lt;/code&gt; will attach a ListenerTarget pointing to our gateway. &lt;/p&gt;

&lt;p&gt;for this we quickly create a virtual service for our clientService as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const clientVService = this.createVirtualService('client-service', mesh, clientNode, namespace);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;create the ingress service with our previously created method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const {gateway: virtualGateway, fgService: virtualGatewayFGService} = this.createIngressService(cluster, listener, mesh);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and point the VirtualGateway to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const clientVRouter = new VirtualRouter(this, 'client-virtual-router', {
  mesh,
  listeners: [VirtualRouterListener.http(3000)],
});

clientVRouter.addRoute('default', {
  routeSpec: RouteSpec.http({
    weightedTargets: [{
      weight: 1,
      virtualNode: clientNode,
    }],
  }),
});

virtualGateway.addGatewayRoute('web-route', {
  routeSpec: GatewayRouteSpec.http({
    routeTarget: clientVService,
    match: {
      path: HttpGatewayRoutePathMatch.startsWith('/'),
    },
  }),
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#bonus-awsxray"&gt;
  &lt;/a&gt;
  Bonus - AWS-X-Ray:
&lt;/h3&gt;

&lt;p&gt;using x-ray is very easy, we only need to deploy an x-ray sidecar image and enable envoy x-ray:&lt;/p&gt;

&lt;p&gt;First, let's modify both &lt;code&gt;createService&lt;/code&gt; and &lt;code&gt;createIngressService&lt;/code&gt; to deploy the x-ray sidecar image and grant XRay policies to the taskRole&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;taskDef.addContainer(`${id}-xray`, {
  image: ContainerImage.fromRegistry('public.ecr.aws/xray/aws-xray-daemon:latest'),
  essential: false,
  memoryReservationMiB: 256,
  environment: {
    AWS_REGION: Aws.REGION,
  },
  user: '1337', // X-Ray traffic should not go through Envoy proxy
  logging: new AwsLogDriver({
    streamPrefix: id + '-xray-',
  }),
  portMappings: [ {
    containerPort: 2000,
    protocol: Protocol.UDP,
  } ],
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;taskDef.addContainer(`ingress-xray`, {
  image: ContainerImage.fromRegistry('public.ecr.aws/xray/aws-xray-daemon:latest'),
  essential: false,
  memoryReservationMiB: 256,
  environment: {
    AWS_REGION: Aws.REGION,
  },
  user: '1337', // X-Ray traffic should not go through Envoy proxy
  logging: new AwsLogDriver({
    streamPrefix: 'ingress-xray-',
  }),
  portMappings: [ {
    containerPort: 2000,
    protocol: Protocol.UDP,
  } ],
});
taskDef.taskRole.addManagedPolicy(
  ManagedPolicy.fromAwsManagedPolicyName('AWSXRayDaemonWriteAccess'),
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(note: only that the id property got replaced by a constant)&lt;/p&gt;

&lt;p&gt;now we need to enable x-ray on all the envoy containers by adding the env var &lt;code&gt;'ENABLE_ENVOY_XRAY_TRACING': '1'&lt;/code&gt; to the envoy-sidecar image (right underneath &lt;code&gt;APPMESH_RESOURCE_ARN&lt;/code&gt;) &lt;/p&gt;

&lt;p&gt;Finally, let's run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx cdk deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the website and wait a minute. &lt;br&gt;
Now let's go to the &lt;a href="https://eu-west-1.console.aws.amazon.com/xray/home"&gt;x-ray console&lt;/a&gt; and check the results:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iIUg15iI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pues3ztoa50bu4682xjh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iIUg15iI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pues3ztoa50bu4682xjh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next
&lt;/h2&gt;

&lt;p&gt;Now that you have your mesh configured: What can you do with it?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first"&gt;
  &lt;/a&gt;
  First:
&lt;/h3&gt;

&lt;p&gt;You could deploy multiple instances (virtual nodes / fg services) and play around with the routing. &lt;br&gt;
For example, you can route by cookie or play around with the weights and see what happens. &lt;/p&gt;

&lt;p&gt;second: I intentionally put everything into one file, so it's easy to browse and to understand, but it screams for a refactoring :) &lt;/p&gt;

&lt;p&gt;third: &lt;br&gt;
if you want to access a 3rd party API you can also add monitoring for that by providing a virtual service. I haven't tested this, however &lt;a href="https://aws.amazon.com/blogs/containers/service-connectivity-inside-and-outside-the-mesh-using-aws-app-mesh-ecs-fargate/"&gt;the docs mention it&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>aws</category>
      <category>iac</category>
      <category>typescript</category>
      <category>cloud</category>
    </item>
    <item>
      <title>17 Essential REST API Interview Questions</title>
      <author>hrishikesh1990</author>
      <pubDate>Thu, 16 Sep 2021 12:07:59 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/17-essential-rest-api-interview-questions-7cg</link>
      <guid>https://dev.to/hrishikesh1990/17-essential-rest-api-interview-questions-7cg</guid>
      <description>&lt;p&gt;Hello, fellow developers, based on the response I got from my previous posts I have compiled another list of essential RestAPI interview questions that I felt every developer should know.&lt;/p&gt;

&lt;p&gt;Do drop your thoughts in the comments section below. Also, feel free to comment in case you find any content to be incorrect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-what-are-restful-web-services-also-mention-their-features"&gt;
  &lt;/a&gt;
  1. What are RESTful web services? Also mention their features.
&lt;/h2&gt;

&lt;p&gt;Services that allow REST architecture are called RESTful web services. REST or Representational State Transfer uses the HTTP web protocol.&lt;/p&gt;

&lt;p&gt;Some major features of REST architecture are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Services are lightweight and hence can be easily maintained&lt;/li&gt;
&lt;li&gt;Supports communication across applications developed in other languages&lt;/li&gt;
&lt;li&gt;Testing RESTful web services is quite easy&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-what-is-the-concept-of-statelessness-in-rest"&gt;
  &lt;/a&gt;
  2. What is the concept of statelessness in REST?
&lt;/h2&gt;

&lt;p&gt;The REST architecture is called stateless as it does not store any state related to the client session on the server. Essentially session states are entirely kept on the client side. This is effectively called Statelessness.&lt;/p&gt;

&lt;p&gt;It ensures that the server cannot take undue advantage of any stored data. However, since no data is stored, each request from the client to the server must contain all the necessary information about the request.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-what-are-the-advantages-and-disadvantages-of-statelessness-in-rest-apis"&gt;
  &lt;/a&gt;
  3. What are the advantages and disadvantages of Statelessness in REST APIs?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Advantages of statelessness:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Statelessness allows scaling of the APIs to millions of concurrent users as it does not have any session-related dependencies and can be deployed on any server&lt;/li&gt;
&lt;li&gt;The server knows "where" each client is in the application as all the necessary information is sent with each request&lt;/li&gt;
&lt;li&gt;Statelessness makes REST APIs simpler as it removes all complexity involving server-side synchronization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages of Statelessness:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A lot of additional information must be sent along with each request for the client&lt;/li&gt;
&lt;li&gt;This repeated data transfer may decrease network performance
Being stateless also reduces the server-side control over the application‚Äôs behavior&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-explain-addressing-in-restful-web-service"&gt;
  &lt;/a&gt;
  4. Explain ‚ÄòAddressing‚Äô in RESTful WEB service.
&lt;/h2&gt;

&lt;p&gt;The process of locating resources on a server is called addressing. In RESTful web services, these resources are addressed using a URL. These addresses could either refer to a single or even multiple resources.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;protocol&amp;gt;&lt;/span&gt;://&lt;span class="nt"&gt;&amp;lt;application-name&amp;gt;&lt;/span&gt;/&lt;span class="nt"&gt;&amp;lt;type-of-resource&amp;gt;&lt;/span&gt;/&lt;span class="nt"&gt;&amp;lt;id-of-resource&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-what-are-options-in-rest-apis"&gt;
  &lt;/a&gt;
  5. What are "Options" in REST APIs?
&lt;/h2&gt;

&lt;p&gt;Options is an HTTP method that fetches all the various HTTPS options/operations that are supported. This helps the client decide which operations can be used.&lt;/p&gt;

&lt;p&gt;REST Option methods are also used for Cross-origin Resource Sharing (CORS).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-what-are-http-status-codes"&gt;
  &lt;/a&gt;
  6. What are HTTP status codes?
&lt;/h2&gt;

&lt;p&gt;HTTP status codes are a common REST API interview question. These Status codes are divided into five categories with multiple codes under them. The most commonly used codes under each category are listed below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Format - "1XX" - Used to represent transfer protocol level informational responses&lt;/li&gt;
&lt;li&gt;Format - "2XX" - Used to represent successful responses

&lt;ul&gt;
&lt;li&gt;"200" (OK) - Represents that the request was successfully carried out&lt;/li&gt;
&lt;li&gt;"201" (CREATED) - Represents the successful creation of a resource&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Format - "3XX" - Used to represent redirects&lt;/li&gt;
&lt;li&gt;Format - "4XX" - Used to represent client-side errors

&lt;ul&gt;
&lt;li&gt;"400" (BAD REQUEST) - Represents errors or missing data
&lt;/li&gt;
&lt;li&gt;"401" (FORBIDDEN) - Represents that the user does not have necessary access&lt;/li&gt;
&lt;li&gt;"404" (NOT FOUND) - Represents that the resource method is not available&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Format - "5XX" - Used to represent server-side errors

&lt;ul&gt;
&lt;li&gt;"500" (INTERNAL SERVER ERROR) - Represents that the server threw some exceptions&lt;/li&gt;
&lt;li&gt;"502" (BAD GATEWAY) - Represents that the server could not get a response from another server&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#7-list-the-various-http-methods-supported-by-rest"&gt;
  &lt;/a&gt;
  7. List the various HTTP methods supported by REST
&lt;/h2&gt;

&lt;p&gt;The various HTTP methods supported by REST are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GET - This method fetches the resource at the requested URL&lt;/li&gt;
&lt;li&gt;POST - This method submits a new resource to the server&lt;/li&gt;
&lt;li&gt;PUT - This method updates an existing resource that's already on the server&lt;/li&gt;
&lt;li&gt;DELETE - This method deletes a resource from the server&lt;/li&gt;
&lt;li&gt;OPTION - This method fetches the list of supported HTTP methods&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#8-what-is-messaging-in-restful-web-services"&gt;
  &lt;/a&gt;
  8. What is messaging in RESTful web services?
&lt;/h2&gt;

&lt;p&gt;In REST web services, the client sends messages to the server and the server responds using HTTP requests. The process or technique in which any form of communication takes place is called Messaging.&lt;/p&gt;

&lt;p&gt;These messages contain message data, metadata, and all the other relevant data about the message.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-what-are-idempotent-methods"&gt;
  &lt;/a&gt;
  9. What are Idempotent methods?
&lt;/h2&gt;

&lt;p&gt;Idempotent methods are methods that return the same outcome irrespective of how many times the same request has been made.&lt;/p&gt;

&lt;p&gt;These methods are important as there are common instances where the client-side might send out duplicate requests. Hence it is important to use Idempotent methods to avoid such errors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-what-are-payloads-in-restful-web-services"&gt;
  &lt;/a&gt;
  10. What are payloads in RESTFul web services?
&lt;/h2&gt;

&lt;p&gt;Payload refers to the request data present in the body part of every HTTP request message. However, the payload is not the same as request parameters and can only be passed through the POST method.&lt;/p&gt;

&lt;p&gt;Payloads do not have size restrictions, however, more data would consume more bandwidth and take more time to transfer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-what-do-you-mean-by-caching"&gt;
  &lt;/a&gt;
  11. What do you mean by caching?
&lt;/h2&gt;

&lt;p&gt;The process of storing server response so that it can be used whenever required is called caching. This reduces the need to generate the same response again, increasing performance and server load time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-can-you-give-examples-of-tools-that-can-be-used-to-develop-or-test-restful-web-services"&gt;
  &lt;/a&gt;
  12. Can you give examples of tools that can be used to develop or test RESTful web services?
&lt;/h2&gt;

&lt;p&gt;Some example of tools used to develop and test RESTful APIs are:&lt;/p&gt;

&lt;p&gt;Spring REST web service using MVC&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jersey API&lt;/li&gt;
&lt;li&gt;CXF&lt;/li&gt;
&lt;li&gt;Axis&lt;/li&gt;
&lt;li&gt;Restlet&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#13-what-are-cachecontrol-headers"&gt;
  &lt;/a&gt;
  13. What are cache-control headers?
&lt;/h2&gt;

&lt;p&gt;Cache-control headers help attain caching ability and are also used to control caching.&lt;/p&gt;

&lt;p&gt;The most commonly used cache-control headers are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Public - Resources marked as public can be cached by any component between the client and the server.&lt;/li&gt;
&lt;li&gt;Private - These resources are marked private and can only be cached by the client.&lt;/li&gt;
&lt;li&gt;No-Store - In this third type, browsers aren‚Äôt allowed to cache a response and the data must be always pulled from the client. This type of cache control is used for sensitive data like bank details or passwords.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#14-what-is-postman-why-is-it-used"&gt;
  &lt;/a&gt;
  14. What is Postman? Why is it used?
&lt;/h2&gt;

&lt;p&gt;Postman is a popular tool that is used to develop and test API workflows. It has been adopted widely as it helps manage each step of the API lifecycle facilitating development.&lt;/p&gt;

&lt;p&gt;Postman provides a one-stop to help design, test, document, and publish your API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#15-what-are-the-major-security-issues-faced-by-web-services"&gt;
  &lt;/a&gt;
  15. What are the major security issues faced by web services?
&lt;/h2&gt;

&lt;p&gt;Since web services often deal with a lot of confidential information, the security of the application becomes a major concern. Below are a few issues to keep in mind.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Encryption - A web service may consist of multiple applications and could potentially contain a weak node. Hence a safe practice is to encrypt data so that they remain confidential at any cost.&lt;/li&gt;
&lt;li&gt;Authentication - This issue arises when dealing with a large user base. Authentication prevents other people from accessing user data and it also helps you keep track of user activity.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#16-what-is-the-difference-between-ajax-and-rest"&gt;
  &lt;/a&gt;
  16. What is the difference between AJAX and REST?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;AJAX&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Requests are sent to the server using the XMLHttpRequest object. Javascript later interprets the response and changes the page dynamically&lt;/li&gt;
&lt;li&gt;AJAX supports asynchronous requests and thereby does not require constant client-server interactions&lt;/li&gt;
&lt;li&gt;AJAX dynamically updates the UI without reloading the page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;REST&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;REST uses a URL and a request/response pattern to access resources&lt;/li&gt;
&lt;li&gt;REST requires a constant client-server interaction&lt;/li&gt;
&lt;li&gt;REST requests data or information from the server and then updates it&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#17-what-is-jaxrs"&gt;
  &lt;/a&gt;
  17. What is JAX-RS?
&lt;/h2&gt;

&lt;p&gt;JAX-RS stands for Java API for RESTful web services. It is a Java-based specification, developed for the implementation of Java in RESTful services.&lt;/p&gt;

&lt;p&gt;JAX-RS helps REST applications communicate well with Java. It is also used for SOAP communication in Java.&lt;/p&gt;

&lt;p&gt;Some of the common implementations of JAX-RS are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jersey&lt;/li&gt;
&lt;li&gt;RESTEasy&lt;/li&gt;
&lt;li&gt;Apache CXF&lt;/li&gt;
&lt;li&gt;Play&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>devops</category>
    </item>
    <item>
      <title>How To Reduce Context Switching as a Developer</title>
      <author>Alex Omeyer</author>
      <pubDate>Thu, 16 Sep 2021 12:05:30 +0000</pubDate>
      <link>https://dev.to/alexomeyer/how-to-reduce-context-switching-as-a-developer-1hnn</link>
      <guid>https://dev.to/alexomeyer/how-to-reduce-context-switching-as-a-developer-1hnn</guid>
      <description>&lt;p&gt;Context switching is the act of working on several tasks in parallel. More specifically, working on one task and switching to another task while not finishing the previous task. &lt;/p&gt;

&lt;p&gt;Constantly switching between different tasks requires your brain to jump from one thought process to another. Developers often prefer long blocks of uninterrupted work to get into a so-called state of flow or &lt;a href="https://betterprogramming.pub/deep-programming-da7dc58a7104"&gt;deep work&lt;/a&gt;. For that reason, context switching prevents developers from reaching this state of flow.&lt;/p&gt;

&lt;p&gt;Some of the most common reasons for productivity loss are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Interruptions at your workplace&lt;/li&gt;
&lt;li&gt;Switching between tools &amp;amp; apps&lt;/li&gt;
&lt;li&gt;Balancing between personal and team productivity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let‚Äôs take a look at each of these causes and possible solutions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoid-potential-interruptions"&gt;
  &lt;/a&gt;
  Avoid potential interruptions
&lt;/h2&gt;

&lt;p&gt;Organising a space for you to work without distractions is the number one step to reduce context switching and increase productivity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Grouping similar tasks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I‚Äôm a huge fan of grouping similar tasks because it helps me reduce context switching. For instance, I prefer to block time in my calendar to answer all my emails or Slack messages at once.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V0jPGQkl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eh93yxy9w7b6209q5gfy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V0jPGQkl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eh93yxy9w7b6209q5gfy.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Organising TODO lists&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another great approach to &lt;a href="https://www.stepsize.com/blog/how-to-organise-your-todos-as-a-software-engineer"&gt;organise your work in TODO lists&lt;/a&gt;. A TODO list helps you to list all tasks and clear your mind of any unfinished ones. On top of that, a TODO list is an essential tool to prioritise your tasks. It will help you to focus on the most impactful ones. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Turning off notifications&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First of all, let‚Äôs talk about notifications and their disruptive effect on deep work. &lt;/p&gt;

&lt;p&gt;Imagine you are working on a new feature, and a Slack notification pops up. You decide to ignore the notification and continue work on the feature. However, your mind briefly switches its context to analyse the importance of the notification and determines if you should take immediate action. &lt;/p&gt;

&lt;p&gt;In fact, we can label this as context switching even though you decide not to engage with the notification. Yet, your mind gets distracted by the notification, which disrupts your flow state. Therefore, the single best tip to reach a deep state of work is to &lt;a href="https://support.google.com/chrome/answer/3220216?hl=en&amp;amp;co=GENIE.Platform%3DDesktop"&gt;turn off all notifications&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoid-switching-between-tools"&gt;
  &lt;/a&gt;
  Avoid switching between tools
&lt;/h2&gt;

&lt;p&gt;For devs, context switching often occurs when switching between different tools. Just think about the number of times you leave your IDE to access a project management tool like JIRA, Trello, or Monday.com.&lt;/p&gt;

&lt;p&gt;Each time you create an issue, you need to switch between tools.&lt;/p&gt;

&lt;p&gt;Luckily, modern tools solve this problem by helping you stay in your IDE, e.g. VS Code or JetBrains.&lt;/p&gt;

&lt;p&gt;Stepsize is an editor-first &lt;a href="https://www.stepsize.com/r/vscode?utm_medium=dev.to&amp;amp;utm_source=referral&amp;amp;utm_campaign=editor-first"&gt;issue tracker for VS Code&lt;/a&gt; and &lt;a href="https://www.stepsize.com/r/jetbrains?utm_medium=dev.to&amp;amp;utm_source=referral&amp;amp;utm_campaign=editor-first"&gt;JetBrains&lt;/a&gt; that allows you to create, bookmark, and prioritise codebase issues directly in your editor. Therefore, it‚Äôs an excellent tool to reduce tool switching and keep your mind focused while improving your codebase health.&lt;/p&gt;

&lt;p&gt;Moreover, you can collaborate on the codebase issues with your colleagues by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating issues from the IDE&lt;/li&gt;
&lt;li&gt;Seeing all relevant issues linked to a particular piece of code&lt;/li&gt;
&lt;li&gt;Prioritising and resolving issues &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will significantly reduce context switching and improve your team communication.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#balancing-between-personal-and-team-productivity"&gt;
  &lt;/a&gt;
  Balancing between personal and team productivity
&lt;/h2&gt;

&lt;p&gt;Often, developers struggle to balance timely communication and context switching. As we already know, context switching has a negative impact on your productivity because it prevents you from reaching a deep state of work. &lt;/p&gt;

&lt;p&gt;On the other hand, when colleagues ask a question, you want to help them promptly. For example, a developer asks for your assistance and might be blocked if you don‚Äôt help him. But should you sacrifice your flow state to help your colleague? Well, the answer is somewhat divided. &lt;/p&gt;

&lt;p&gt;Try to find a balance between responding on time and prioritising your work. Asynchronous communication has become a popular approach to tackle this problem. Instead of calling a meeting for each problem, communicate with the involved people and resolve it via text-based communication such as Slack. Moreover, it would help if you blocked time in your calendar to reach a flow state and leave time slots open for meetings or handling questions from colleagues.&lt;/p&gt;

&lt;p&gt;For instance, you can block two slots of three hours of deep work and leave two slots of one hour for asynchronous communication. This is one approach to prioritise your work while helping colleagues in a timely manner.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-gamify-your-work-to-reduce-context-switching"&gt;
  &lt;/a&gt;
  Bonus: Gamify your work to reduce context switching
&lt;/h2&gt;

&lt;p&gt;Here are a couple of fun apps to make your journey to productivity more fun:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Forest: Planting distracting-free trees&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.forestapp.cc/"&gt;Forest&lt;/a&gt; is one of the most simple yet effective tools to reduce context switching. This shows again that a simple tool can do wonders. You can download Forest as a mobile application, but you can also install it as a Chrome extension in your browser. &lt;/p&gt;

&lt;p&gt;Forest helps you to stay focused by planting virtual trees. If you stay focused, the tree will grow while you work. However, when you get distracted and open blocked websites or your phone, the tree will die. The cool thing about this app is that you can earn virtual coins in Forest that you can exchange for planting real trees!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Habitica: gamified habit-building&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://habitica.com/static/home"&gt;Habitica&lt;/a&gt; takes habit-building to a whole level by adding gamification to the mix. First of all, you have to define what goals you want to achieve or what tasks you want to accomplish. Each time you accomplish a task, you can check the task off in the app. It allows you to earn experience points and gold tokens in the game. These gold tokens can be used to buy equipment and some items, as well as custom rewards.&lt;/p&gt;

&lt;p&gt;It‚Äôs a great application that makes habit-building fun and engaging, even involving your friends or finding people working towards a similar goal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Many developers struggle with context switching. Nowadays, developers have to use many different tools in their day-to-day tasks. IDE-based tools and extensions can help you to reduce context switching.&lt;/p&gt;

&lt;p&gt;On top of that, the most important lesson is to block dedicated focus time. During these focus blocks, you should turn off all notifications to avoid them interrupting your flow state. For many developers, it‚Äôs a process of trial and error to find the right tools that can help them to work distraction-free.&lt;/p&gt;

&lt;p&gt;P.S. I wrote an article on &lt;a href="https://dev.to/alexomeyer/7-vs-code-extensions-that-help-ll-you-stay-in-your-editor-a5f"&gt;7 VS Code extensions that will help you stay in your editor&lt;/a&gt; to avoid context switching - check it out!&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
      <category>tooling</category>
      <category>vscode</category>
    </item>
    <item>
      <title>7 VS Code Extensions that'll Help You Stay in Your Editor</title>
      <author>Alex Omeyer</author>
      <pubDate>Thu, 16 Sep 2021 12:03:42 +0000</pubDate>
      <link>https://dev.to/alexomeyer/7-vs-code-extensions-that-help-ll-you-stay-in-your-editor-a5f</link>
      <guid>https://dev.to/alexomeyer/7-vs-code-extensions-that-help-ll-you-stay-in-your-editor-a5f</guid>
      <description>&lt;p&gt;Constantly switching between different tasks and tools requires your brain to jump from one thought process to another. Developers often prefer long blocks of uninterrupted work to get into deep work.&lt;/p&gt;

&lt;p&gt;Extensions that help you stay in the editor &lt;a href="https://dev.to/alexomeyer/how-to-reduce-context-switching-as-a-developer-1hnn"&gt;reduce context switching&lt;/a&gt; and help you reach the state of flow.&lt;/p&gt;

&lt;p&gt;Let‚Äôs look at some of the most useful ones.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-git-history"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory"&gt;Git History&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Git History helps you avoid switching from VS Code editor to GitHub. It'll show you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;git log along with the graph and details&lt;/li&gt;
&lt;li&gt;previous copy of the file&lt;/li&gt;
&lt;li&gt;the history of a file or a line in a file (Git Blame) and more!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---pm1Ou1J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1jddbiqb2ncc9c3j3fyn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---pm1Ou1J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1jddbiqb2ncc9c3j3fyn.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-image-preview"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://marketplace.visualstudio.com/items?itemName=kisstkondoros.vscode-gutter-preview"&gt;Image preview&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The Image Preview extension provides inline previews for images included HTML file types. The extension shows a pop-up window in the editor surface, and an optional image preview in the gutter, which can be toggled on or off in User Settings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HBGbEKgG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8b55p0rof88oqy0onalz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HBGbEKgG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8b55p0rof88oqy0onalz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-stepsize"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://www.stepsize.com/r/vscode?utm_medium=dev.to&amp;amp;utm_source=referral&amp;amp;utm_campaign=editor-first"&gt;Stepsize&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Stepsize allows you to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create, view, and edit codebase issues, such as technical debt, refactoring work, and other defects  directly from your editor.&lt;/li&gt;
&lt;li&gt;you can then collaborate on these issues with your teammates, upvoting important issues, adding key issues to your sprints with the Jira integration, and resolving them - all directly in the editor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is an excellent tool to reduce tool switching while improving your codebase.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MEg8goUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7mdsjk74maj6clkisef.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEg8goUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7mdsjk74maj6clkisef.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-browser-preview"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://marketplace.visualstudio.com/items?itemName=auchenberg.vscode-browser-preview"&gt;Browser Preview&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Browser Preview for VS Code enables you to open a real browser preview inside your editor that you can debug.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Browser preview inside VS Code (Powered by headless Chromium).&lt;br&gt;
‚Ä¢ Ability to have multiple previews open at the same time.&lt;br&gt;
‚Ä¢ Debuggable. Launch urls and attach Debugger for Chrome to the browser view instance, and debug within VS Code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yH4p9XWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yle736b83ykvshvtc8al.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yH4p9XWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yle736b83ykvshvtc8al.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-remote-containers"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers"&gt;Remote - Containers&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The Remote - Containers extension lets you use a Docker container as a full-featured development environment. Whether you deploy to containers or not, containers make a great development environment because you can:&lt;/p&gt;

&lt;p&gt;‚Ä¢ Develop with a consistent, easily reproducible toolchain on the same operating system you deploy to.&lt;br&gt;
‚Ä¢ Quickly swap between different, separate development environments and safely make updates without worrying about impacting your local machine.&lt;br&gt;
‚Ä¢ Make it easy for new team members / contributors to get up and running in a consistent development environment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8oV0cwbk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9eckxaa9eh8fmumput6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8oV0cwbk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9eckxaa9eh8fmumput6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-excel-viewer"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://marketplace.visualstudio.com/items?itemName=GrapeCity.gc-excelviewer"&gt;Excel Viewer&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This extension is a must for devs who are dealing a lot with CSV files. It provides read-only viewers for CSV files and Excel spreadsheets within the current VS Code workspace, and will easily save you hours of work!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--onOikrxA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezi8c6qysl1s1uaemv98.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--onOikrxA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezi8c6qysl1s1uaemv98.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-dash"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://marketplace.visualstudio.com/items?itemName=deerawan.vscode-dash"&gt;Dash&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Dash is an API Documentation Browser and Code Snippet Manager. Dash instantly searches offline documentation sets for 200+ APIs, 100+ cheat sheets and more. You can even generate your own docsets or request docsets to be included.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5uzTHJ4N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1w7i8l347na7710dvluf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5uzTHJ4N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1w7i8l347na7710dvluf.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-extension-vsinder"&gt;
  &lt;/a&gt;
  Bonus Extension: &lt;a href="https://marketplace.visualstudio.com/items?itemName=benawad.vsinder"&gt;Vsinder&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Vsinder is a dating app for devs where you swipe on code. If you think this is crazy, just check out this review! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CHGI25u3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u18wzxlsnmpr1skxyjg4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CHGI25u3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u18wzxlsnmpr1skxyjg4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you have any favourite extensions that help you stay focused? Share in the comments!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>codequality</category>
      <category>productivity</category>
      <category>tooling</category>
    </item>
    <item>
      <title>SEO Keyword Opportunities in Developer Marketing</title>
      <author>Karl L. Hughes</author>
      <pubDate>Thu, 16 Sep 2021 11:51:14 +0000</pubDate>
      <link>https://dev.to/karllhughes/seo-keyword-opportunities-in-developer-marketing-14pf</link>
      <guid>https://dev.to/karllhughes/seo-keyword-opportunities-in-developer-marketing-14pf</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YW2fDxhs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://draft.dev/learn/assets/posts/n5kzpgs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YW2fDxhs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://draft.dev/learn/assets/posts/n5kzpgs.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We recently started supporting our clients at Draft.dev &lt;a href="https://draft.dev/learn/posts/topic-clusters"&gt;with keyword research&lt;/a&gt; which, given our unique position, has generated some exciting opportunities. We work with an array of clients, targeting different kinds of customers, in a hyper-defined niche: software development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://draft.dev/learn/developer-marketing"&gt;Developer marketing&lt;/a&gt; is unique. It moves fast, and new terms are being popularized constantly. These factors, plus our position as a &lt;a href="https://draft.dev/learn/content-creation-agency"&gt;content marketing agency&lt;/a&gt; in the space, have allowed us to rank well in Google searches‚Äîfast.&lt;/p&gt;

&lt;p&gt;In this piece, you‚Äôll get an overview of these opportunities. I‚Äôll offer a tiny bit of free keyword research, but competitors in our space are moving quickly. Much of this information will be outdated in 3-6 months, so it‚Äôs critical to reassess your keyword research regularly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finding-good-keywords-in-developer-marketing"&gt;
  &lt;/a&gt;
  Finding Good Keywords in Developer Marketing
&lt;/h2&gt;

&lt;p&gt;Although the specific long-tail keyword data I use in this article will become outdated soon, the underlying strategy is evergreen. I recently &lt;a href="https://twitter.com/KarlLHughes/status/1409913791937232899"&gt;broke this process down into five steps&lt;/a&gt;, but it all starts with &lt;strong&gt;finding the right keywords.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1. Find a good keyword üîë  &lt;/p&gt;

&lt;p&gt;It's a little bit art and a little bit science. üß™  &lt;/p&gt;

&lt;p&gt;I typically target keywords with &amp;gt;100 monthly searches and &amp;lt;20 difficulty in &lt;a href="https://twitter.com/ahrefs?ref_src=twsrc%5Etfw"&gt;@ahrefs&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;Let's go with "cto interview questions" &lt;a href="https://t.co/gMWjLqq9gQ"&gt;pic.twitter.com/gMWjLqq9gQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚Äî Karl L Hughes (&lt;a class="mentioned-user" href="https://dev.to/karllhughes"&gt;@karllhughes&lt;/a&gt;
) &lt;a href="https://twitter.com/KarlLHughes/status/1409913794244100097?ref_src=twsrc%5Etfw"&gt;June 29, 2021&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I use &lt;a href="https://ahrefs.com/"&gt;ahrefs&lt;/a&gt; to find estimated search volume and ranking difficulty. While these &lt;a href="https://ahrefs.com/blog/keyword-search-volume/"&gt;metrics aren‚Äôt perfect&lt;/a&gt;, they‚Äôll give you a pretty good sense of how easily you can rank for a search term in developer marketing.&lt;/p&gt;

&lt;p&gt;The hard part about finding good keywords in developer marketing is &lt;strong&gt;finding terms popular enough to have significant search volume, while being new enough to escape saturation.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs look at six topic areas that meet this criteria. Using these terms as a starting point will help you &lt;a href="https://draft.dev/learn/writing/how-to-write-better-technical-content"&gt;write better technical content&lt;/a&gt; aimed at developers, while also helping you rank better in search engines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-kubernetes"&gt;
  &lt;/a&gt;
  1. Kubernetes
&lt;/h2&gt;

&lt;p&gt;Linux containers are not new, but Kubernetes is suddenly &lt;a href="https://stackoverflow.blog/2020/05/29/why-kubernetes-getting-so-popular/"&gt;dominating the container and DevOps space&lt;/a&gt;. You‚Äôd think most of the tooling you need would‚Äôve been built already‚Äîespecially with a big corporate backer like Google. But lots of startups are creating tools for Kubernetes right now.&lt;/p&gt;

&lt;p&gt;Given its fast, widespread adoption, it‚Äôs no surprise to see an influx of developers learning about Kubernetes. And to learn about anything, you need good content. Ahrefs currently shows five terms containing the word ‚ÄúKubernetes‚Äù, with more than 1,000 monthly searches and a difficulty of 30 or less.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N49beypO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/nnIgf8r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N49beypO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/nnIgf8r.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But it‚Äôs not all about top keywords. There are thousands of long-tail keywords we‚Äôve investigated for various clients in order to come up with worthwhile content topics, such as performance testing, virtualization, and scalability.&lt;/p&gt;

&lt;p&gt;The key to writing good Kubernetes content is technical expertise. If you search for related terms, you‚Äôll find lots of cookie-cutter, jargon-filled fluff pieces. This kind of content &lt;a href="https://draft.dev/learn/posts/6-tips-for-b2d-marketing"&gt;doesn‚Äôt really fly in developer marketing&lt;/a&gt;; to compete you‚Äôll need content written by experts‚Äîfor experts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-python"&gt;
  &lt;/a&gt;
  2. Python
&lt;/h2&gt;

&lt;p&gt;Python recently became &lt;a href="https://pypl.github.io/PYPL.html"&gt;the most searched for language in Google&lt;/a&gt;. So as you can imagine, there‚Äôs tons of demand for good content to capture developers‚Äô attention.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fEpKwTZ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/lImDDyh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fEpKwTZ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/lImDDyh.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Useful search terms for companies to reach Python developers include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;python square root&lt;/strong&gt;, 9,400+ monthly searches&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;python random number&lt;/strong&gt;, 7,300+ monthly searches&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;python read csv&lt;/strong&gt;, 5,400+ monthly searches&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;python command line arguments&lt;/strong&gt;, 5,000+ monthly searches&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a real keyword research project, you‚Äôd filter terms by your target audience and product use case. But with thousands of keywords having a difficulty score less than 30, you‚Äôre sure to find a few good options.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://draft.dev/playbook?utm_source=academy&amp;amp;utm_medium=inline&amp;amp;utm_campaign=post&amp;amp;utm_content=/seo-keyword-opportunities-in-developer-marketing"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n8yv1xlk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://draft.dev/learn/assets/img/reach-developers.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-graphql"&gt;
  &lt;/a&gt;
  3. GraphQL
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúI consider GraphQL to be the most exciting thing to happen to APIs‚Ä¶I‚Äôd go so far as to say that GraphQL is the new REST.‚Äù - &lt;a href="https://www.newline.co/@eigenjoy/why-graphql-is-the-new-rest--db6d20b0"&gt;Nate Murray, Founder at newline&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;GraphQL is hot right now. This popularity comes in spite of its age, given some very mature projects use it as a query language and API interface. Search volume for GraphQL isn‚Äôt as high as other topics on this list. But using it alongside other popular frameworks and programming languages presents a very interesting opportunity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G7eIlCjM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/TxQ5hMe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G7eIlCjM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/TxQ5hMe.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GraphQL is a ‚Äúglue‚Äù technology (it‚Äôs typically used in conjunction with other developer tools), so the tutorials and content you can write on it are limitless. The only question is whether GraphQL‚Äôs popularity will fade away, or eclipse REST as the go-to API query language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-go"&gt;
  &lt;/a&gt;
  4. Go
&lt;/h2&gt;

&lt;p&gt;Go has been around for over a decade now, with a small yet loyal following. While only used by around &lt;a href="https://insights.stackoverflow.com/survey/2020"&gt;9% of programmers&lt;/a&gt;, Stack Overflow ranked Go as the third ‚Äúmost wanted‚Äù language. It‚Äôs no surprise that &lt;a href="https://draft.dev/learn/technical-blogs/golang"&gt;our list of Best Go Blogs&lt;/a&gt; is one of our most popular &lt;a href="https://draft.dev/learn"&gt;Draft.dev blog&lt;/a&gt; posts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uGxPal5R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/v3zto2X.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uGxPal5R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/v3zto2X.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The demand for Go has driven lots of developers to learn it, with many looking for jobs that use the langage. While Python or JavaScript are more popular in production workloads, increased curiosity around Go has led to a lot of search traffic considering its market share. Fundamental search terms like ‚Äúgolang ternary,‚Äù ‚Äúgolang for loop,‚Äù and ‚Äúgolang substring‚Äù indicate a strong market for learning the basics of Go.&lt;/p&gt;

&lt;p&gt;There are plenty of opportunities for purchase-intent search terms as well. ‚ÄúGolang ide,‚Äù ‚Äúgolang mongodb,‚Äù and ‚Äúgolang authentication‚Äù might all be worth pursuing for the right companies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-typescript"&gt;
  &lt;/a&gt;
  5. TypeScript
&lt;/h2&gt;

&lt;p&gt;I was hesitant to move to a new frontend language, but when my team &lt;a href="https://www.telerik.com/blogs/how-my-team-accidentally-moved-to-typescript-and-loved-it"&gt;adopted Angular, I was pleasantly surprised&lt;/a&gt;. I‚Äôm not alone either; TypeScript is the second most-loved programming language according to Stack Overflow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jy7UUx4Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/QXNWmxn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jy7UUx4Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/QXNWmxn.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similar to Go, TypeScript‚Äôs popularity has triggered a surge in search traffic around fundamental search terms. There‚Äôs also been significant search volume around the differences between TypeScript and JavaScript, which is more widely used.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H_4kafBw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/hZP5Snn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H_4kafBw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/hZP5Snn.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Writing TypeScript content is great because you can take almost any interesting idea in JavaScript and swap out TypeScript to come up with ideas. The differences between the two languages are important from a technical perspective, but they solve most of the same high-level problems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-open-source"&gt;
  &lt;/a&gt;
  6. Open Source
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúIt was just five years ago that there was an ample dose of skepticism from investors about the viability of &lt;a href="https://www.karllhughes.com/posts/open-source-companies"&gt;open source as a business model&lt;/a&gt;. The common thesis was that Red Hat was a snowflake and that no other open-source company would be significant in the software universe. Fast-forward to today and we‚Äôve witnessed the growing excitement in the space.‚Äù - &lt;a href="https://techcrunch.com/2019/01/12/how-open-source-software-took-over-the-world/"&gt;Mike Volpi, General Partner at Index Ventures&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Open source software continues to interest developers and non-developers alike. As Mike Volpi points out above, open source companies are leaning into this part of their business as a strength, rather than a hurdle.&lt;/p&gt;

&lt;p&gt;When you look at the search data around ‚Äúopen source,‚Äù you‚Äôll see a list of business ideas that could all prove successful with content marketing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;open source search engine&lt;/strong&gt;, 500+ monthly searches&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;open source video converter&lt;/strong&gt;, 450+ monthly searches&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;open source 3d printer plans&lt;/strong&gt;, 250+ monthly searches&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;open source dashboards&lt;/strong&gt;, 250+ monthly searches&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;open source workflow engines&lt;/strong&gt;, 250+ monthly searches&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your product has an open source core‚Äîor at least a component‚Äîit makes sense to use this to your advantage in developer marketing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Generally speaking, there are lots of good opportunities for search engine optimization in developer marketing. Many companies in the space have historically underinvested in content, but we‚Äôre now seeing clients generating hundreds of leads with just a few thousand dollars spent.&lt;/p&gt;

&lt;p&gt;If you‚Äôre interested in learning more, &lt;a href="https://draft.dev/call"&gt;sign up for a call&lt;/a&gt;. I‚Äôd love to walk you through our process and help you reach more software developers through search engine optimization.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#by-karl-hughes"&gt;
  &lt;/a&gt;
  By Karl Hughes
&lt;/h4&gt;

&lt;p&gt;Karl is a former startup CTO and the founder of Draft.dev. He writes about technical blogging and content management.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://draft.dev/playbook?utm_source=academy&amp;amp;utm_medium=banner&amp;amp;utm_campaign=post&amp;amp;utm_content=/seo-keyword-opportunities-in-developer-marketing"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X9fLWc2F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://draft.dev/learn/assets/img/playbook.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-a-blog-that-software-developers-will-read"&gt;
  &lt;/a&gt;
  Build a Blog that Software Developers Will Read
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://draft.dev/playbook?utm_source=academy&amp;amp;utm_medium=banner&amp;amp;utm_campaign=post&amp;amp;utm_content=/seo-keyword-opportunities-in-developer-marketing"&gt;The Technical Content Manager‚Äôs Playbook&lt;/a&gt; is a collection of resources you can use to manage a high-quality, technical blog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  A template for creating content briefs&lt;/li&gt;
&lt;li&gt;  An Airtable publishing calendar&lt;/li&gt;
&lt;li&gt;  A technical blogging style guide&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://draft.dev/playbook?utm_source=academy&amp;amp;utm_medium=banner&amp;amp;utm_campaign=post&amp;amp;utm_content=/seo-keyword-opportunities-in-developer-marketing"&gt;Download Now!&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>‚ö°JS Tip: Create Emoji Characters in JavaScript using String.fromCodePoint();</title>
      <author>-</author>
      <pubDate>Thu, 16 Sep 2021 11:51:00 +0000</pubDate>
      <link>https://dev.to/iamatifriaz/js-tip-create-emoji-characters-in-javascript-using-string-fromcodepoint-20nh</link>
      <guid>https://dev.to/iamatifriaz/js-tip-create-emoji-characters-in-javascript-using-string-fromcodepoint-20nh</guid>
      <description>&lt;p&gt;The String.fromCodePoint() method was added to ECMAScript 2015. The result of this method is a string (and not a String object).&lt;br&gt;
Because fromCodePoint() is a static String method, you must call it as String.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let smile = String.fromCodePoint(128516); // '128516' is character code
let str = `I got you ${smile}!`;
console.log(str);
// output: "I got you üòÑ!" 


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pKByfYdU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/483aunrbvexwk9qvtvlr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pKByfYdU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/483aunrbvexwk9qvtvlr.png" alt="You can create emoji characters in JavaScript using String.fromCodePoint( );"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h2&gt;

&lt;p&gt;Here is the syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;String.fromCodePoint(num1)
String.fromCodePoint(num1, num2)
String.fromCodePoint(num1, num2, ..., numN)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#initially-created-on-twitter"&gt;
  &lt;/a&gt;
  Initially created on Twitter
&lt;/h2&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CeJYUGOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_QMnlbWQAIm-Lb.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--grrUDOzJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1422286620498309132/m3FX0agM_normal.jpg" alt="Atif Riaz profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Atif Riaz
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/iamatifriaz"&gt;@iamatifriaz&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      ‚ö°JS Tip :  &lt;br&gt;You can create emoji characters in JavaScript using String.fromCodePoint( );&lt;br&gt;&lt;br&gt;Give it a try üöÄ&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/javascriptdeveloper"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/javascript"&gt;#javascript&lt;/a&gt;developer &lt;a href="https://twitter.com/hashtag/javascript"&gt;#javascript&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:40 PM - 14 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1437788236332605449" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1437788236332605449" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1437788236332605449" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;If you liked this article, be sure to ‚ù§Ô∏è it.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>javascript30</category>
    </item>
    <item>
      <title>How to fix microphone including system sounds on Linux</title>
      <author>Seth</author>
      <pubDate>Thu, 16 Sep 2021 11:49:09 +0000</pubDate>
      <link>https://dev.to/saluki/how-to-fix-microphone-including-system-sounds-on-linux-4fpp</link>
      <guid>https://dev.to/saluki/how-to-fix-microphone-including-system-sounds-on-linux-4fpp</guid>
      <description>&lt;h1&gt;
  &lt;a href="#magright-the-problem"&gt;
  &lt;/a&gt;
  üîé The Problem
&lt;/h1&gt;

&lt;p&gt;Recently, I have been on voice calls with my friends, and I have been noticing that my system sounds are being included in my microphone playback. An example of this would be if I listen to music whilst talking to friends, my friends can hear the music too. This isn't ideal, so I decided I would try and fix it. Luckily, I found it to be quite an easy fix.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bulb-the-solution"&gt;
  &lt;/a&gt;
  üí° The Solution
&lt;/h1&gt;

&lt;p&gt;To fix this, open up a terminal and type &lt;code&gt;alsamixer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, make sure the correct sound card is selected. If you aren't sure, the default one is probably correct. You can press &lt;code&gt;F6&lt;/code&gt; to view your options and switch to a different card.&lt;/p&gt;

&lt;p&gt;The field we're interested in is the one called &lt;strong&gt;Loopback&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Using the arrow keys, navigate to right until you have it selected. Then press the down arrow key to set it to &lt;em&gt;disabled&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#gear-testing"&gt;
  &lt;/a&gt;
  ‚öôÔ∏è Testing
&lt;/h1&gt;

&lt;p&gt;Hopefully this is all you'll need to do to fix your microphone issues. You can now press &lt;code&gt;Esc&lt;/code&gt; to exit Alsamixer.&lt;/p&gt;

&lt;p&gt;If you want to make sure that this has worked, then navigate to a folder somewhere in your home directory and type &lt;code&gt;arecord test.wav&lt;/code&gt;. Now talk a bit, and play some music or audio in the background. When you're done, press &lt;code&gt;Ctrl+C&lt;/code&gt; to stop the recording.&lt;/p&gt;

&lt;p&gt;To play the audio file, run &lt;code&gt;aplay test.wav&lt;/code&gt; to playback the recording. If this sounds good, then you should have solved your problems. &lt;/p&gt;

&lt;p&gt;The last thing you should do is delete the file you created to test your microphone, you can do this with &lt;code&gt;rm test.wav&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thinking-not-working"&gt;
  &lt;/a&gt;
  ü§î Not working?
&lt;/h1&gt;

&lt;p&gt;If this didn't solve your problem, then don't panic. In my experience this is the most common cause of the issue, but there are definitely others out there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://forums.linuxmint.com/viewtopic.php?t=301725"&gt;This forum post&lt;/a&gt; goes into quite a bit more detail and solves a more complex instance of the issue.&lt;/p&gt;

&lt;p&gt;And if that still doesn't help you, feel free to tag me on Twitter and I'll do my best to help you figure it out.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For the original version of this article, with images for guidance, see: &lt;a href="https://saluki.tech/posts/2021/09/2021-09-16-fix-mic-playback-with-system-sounds/"&gt;https://saluki.tech/posts/2021/09/2021-09-16-fix-mic-playback-with-system-sounds/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
