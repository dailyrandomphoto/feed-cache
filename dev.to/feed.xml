<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Introducing a new tool - DEV Backup</title>
      <author>SnowBit</author>
      <pubDate>Thu, 20 Jan 2022 10:39:03 +0000</pubDate>
      <link>https://dev.to/codewithsnowbit/introducing-a-new-tool-dev-backup-1c06</link>
      <guid>https://dev.to/codewithsnowbit/introducing-a-new-tool-dev-backup-1c06</guid>
      <description>&lt;h3&gt;
  &lt;a href="#hello-folks"&gt;
  &lt;/a&gt;
  Hello folks 👋
&lt;/h3&gt;

&lt;p&gt;What's up friends, this is &lt;strong&gt;SnowBit&lt;/strong&gt; here. I am a passionate young developer having the intention to become a successful developer.&lt;/p&gt;

&lt;p&gt;Today, I am here with an amazing tool for my fellow writers on this platform. Probably, you all write articles and post on DEV.to and want to keep a backup of your posts and articles on GitHub and doing that manually becomes somewhat tedious work. &lt;/p&gt;

&lt;p&gt;Here comes &lt;strong&gt;&lt;a href="https://dev-backup.vercel.app/"&gt;DEV Backup&lt;/a&gt;&lt;/strong&gt; that backup/saves any post on &lt;strong&gt;DEV Community&lt;/strong&gt; in your GitHub Repository in just a few clicks. Let's give it a try 🌟 - &lt;a href="https://dev-backup.vercel.app/"&gt;DEV Backup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xspv9Vbf9qI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Thank you for reading, have a nice day!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow me on Twitter - &lt;a href="https://twitter.com/codewithsnowbit"&gt;@codewithsnowbit&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Subscribe me on YouTube - &lt;a href="https://www.youtube.com/channel/UCNTKqF1vhFYX_v0ERnUa1RQ?view_as=subscriber&amp;amp;sub_confirmation=1"&gt;Code With SnowBit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Concurrency In JavaScript</title>
      <author>Kinanee Samson</author>
      <pubDate>Thu, 20 Jan 2022 09:54:25 +0000</pubDate>
      <link>https://dev.to/kalashin1/concurrency-in-javascript-4oho</link>
      <guid>https://dev.to/kalashin1/concurrency-in-javascript-4oho</guid>
      <description>&lt;p&gt;JavaScript our dearly beloved programming is termed asynchronous and this is one of the things we love about it. JavaScript has an api for handling concurrent tasks, as is required of most high level languages. There is a neat way that JavaScript achieves this, which is quite different from what you'd be used to in Java or C. In this article we are going to explore this amazing part of JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#concurrency"&gt;
  &lt;/a&gt;
  Concurrency
&lt;/h2&gt;

&lt;p&gt;Often there is a need for a program to be able to execute certain commands out of the normal flow, without breaking other parts of the program. Much like you can see and listen at the same time, if we examine more closely you will find out these two phenomenal occur in parallel and at the same time, the collective result of both "programs" makes what's happening more clear to us. Similarly we as software engineers desire that our programs should behave in like manner. &lt;/p&gt;

&lt;p&gt;It is very normal for a computer cpu to expose more than one core on which we can execute or run commands, JavaScript as a language was not designed to utilize more than one core, JavaScript code normally runs in a single thread manner where one statement is executed and then the next. This approach is logical, however there is often a need to "move" on to the next without waiting for the immediate to complete, going out of the normal flow as we pointed out earlier.&lt;/p&gt;

&lt;p&gt;If we could not then our user would not get a good user experience, certain things like fetching data could cause glitches especially if your internet is not fast, thank God this isn't the case and we handle data fetching and other like actions asynchronously. We will now proceed to understanding how JavaScript implements its concurrency model.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#queue-stack-heap"&gt;
  &lt;/a&gt;
  Queue, Stack, Heap
&lt;/h2&gt;

&lt;p&gt;Every JavaScript program is a self isolated process, it has its own queue a term we will look at shortly, stack another term we will look at, and its heap. The heap is a largely unstructured area of memory allocated to the objects in our code. Let's think of the heap as an area where messangers on horseback wait before they get to deliver their messages. &lt;/p&gt;

&lt;p&gt;When it gets to the turn of a messenger they unmount and move to &lt;code&gt;queue&lt;/code&gt;.  This area they are attended to in a first in first out manner, when each messenger dispatches their message, there is usually a reaction to that message, which in our case is a function call, for every message in the queue there is a function associated with it, that function is called when the message is processed out of the queue.&lt;/p&gt;

&lt;p&gt;Each function call creates a stack frame that contains the statement and expression in the function, when that function returns a value or void, its frame is then popped out, the next function will begin executing, if we call a function inside another function a frame will be created for each. The frame for the nested function sits on top of the frame for the function that called it, when the nested function is done executing it will return and get popped of and the main function will continue executing or return and get popped off. The items in stack are treated in a last in first out format. The stack is a data structure that holds the frame for each function, we can deduce that this is a synchronous process, so how is concurrency achieved with the stack and the queue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#event-loop"&gt;
  &lt;/a&gt;
  Event Loop
&lt;/h2&gt;

&lt;p&gt;The event loop is simply a loop that iterates through the queue and processes any message if any is in the queue. Since we are in a JavaScript development environment messages could also be added to the queue as a result of events happening in the DOM. The event loop does not really care, its job is to process the messages in the queue. Its js interesting to remember that a stack frame which is in essence a function call can emit an event that adds a new message to the queue or it can directly add a message to the queue. So when the result of an expression might take long, there are APIs that allow us to add that result as a message when it is available to the queue, we go on processing other things without waiting. This is the basis of callback based code. This is also how setTimeout and setInterval adds messages asynchronously to the queue. When we write a setTimeout function a message is added to the queue after the specified delay in milisecs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;delayed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hello gets logged because it is immediately added to the queue and since there is no other task waiting to be added to the queue except of course the one from the setTimeout, which is added immediately, there's no 100ms delay guarantee that the message will be added to the queue, rather this is just a maximum delay if there are other messages in the queue waiting to be processed, however if this is not the case and there are no messages waiting in the queue, the task from the SetTimeout is added immediately ignoring the delay.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;getSomeData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// do something with place&lt;/span&gt;
 &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;place&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// something&lt;/span&gt;
 &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;getSomeData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;london&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// call back based code&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the example above when the first function is executed  a new stack frame is created, we create a variable and then use setTimeout  to call the function passed in. as the second argument and give it the variable we created earlier when, if the first function has to take some time before completing the action would have to wait, but our code does not have to wait and it moves on to processing the next statement, when the result is ready &lt;code&gt;action&lt;/code&gt; is called with the &lt;code&gt;result&lt;/code&gt; passed in as an argument to the function. A new stack frame is created for it and the next message in the queue is processed if any. &lt;/p&gt;

&lt;p&gt;The above process, the way the event loop as described above is synchronous, the event loop is usually expressed in terms of a while loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;waitForMessage&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
 &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;processNextMessage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we pass in 0, as the delay this is does not always mean that the message will be added to the queue in zero seconds. The message will only be added to the queue when other messages in the queue has been processed. You should know that each stack frame must run to completion before another can be added on top of it. If you want to know more about asynchronous JavaScript i think you should read this &lt;a href="https://dev.to/kalashin1/mastering-asynchronous-operations-in-javascript-1712"&gt;article&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Install Kodi on Ubuntu</title>
      <author>Ramashankar</author>
      <pubDate>Thu, 20 Jan 2022 08:42:05 +0000</pubDate>
      <link>https://dev.to/okayrama/how-to-install-kodi-on-ubuntu-7lg</link>
      <guid>https://dev.to/okayrama/how-to-install-kodi-on-ubuntu-7lg</guid>
      <description>&lt;p&gt;This guide will teach you to install Kodi on your Ubuntu Devices. Many of you may not know what Kodi is? Kodi is a free and open source media player, previously known as XBOX Media Centre. With the help of Kodi, You can watch popular Movies, TV Shows, Seasons and Episodes, Music &amp;amp; Audiobooks, Music Videos, Live TV and PVR, Pictures &amp;amp; Comic Books for free. It also &lt;a href="https://thedroidgenome.com/how-to/install-kodi-on-ubuntu/"&gt;runs on Debian, Linux Mint and other operating systems&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-kodi-on-ubuntubased-linux-distros-via-ppa"&gt;
  &lt;/a&gt;
  Install Kodi on Ubuntu-based Linux distros via PPA
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--afBr3KR4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fthbzf8tkmhxrxxua9yl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--afBr3KR4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fthbzf8tkmhxrxxua9yl.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Install Kodi on Ubuntu-based Linux distros via PPA. Install Kodi by running following command&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo add-apt-repository ppa:team-xbmc/ppa&lt;br&gt;
sudo apt-get update&lt;br&gt;
sudo apt-get install kodi&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Start Kodi by running the following command in Terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;kodi&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#kodi-repositories"&gt;
  &lt;/a&gt;
  Kodi Repositories
&lt;/h2&gt;

&lt;p&gt;These are following Build Types of Kodi&lt;/p&gt;

&lt;p&gt;ppa:team-xbmc/ppa - Final release builds&lt;br&gt;
ppa:team-xbmc/unstable - Betas and release candidates&lt;br&gt;
ppa:team-xbmc/xbmc-nightly - Nightly builds&lt;/p&gt;

&lt;p&gt;Install the repository of choice by replacing the build PPA.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo apt install software-properties-common&lt;br&gt;
sudo add-apt-repository -ysP team-xbmc/[build type]&lt;br&gt;
sudo apt install kodi&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;With the help of this guide, we learnt how can we install Kodi on Ubuntu. Feel free to comment down your issues, I will be more than happy to help you.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>tutorial</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>How to Develop a Smartphone Game from the Scratch?</title>
      <author>jason0300</author>
      <pubDate>Thu, 20 Jan 2022 08:12:37 +0000</pubDate>
      <link>https://dev.to/all_tech/how-to-develop-a-smartphone-game-from-the-scratch-4665</link>
      <guid>https://dev.to/all_tech/how-to-develop-a-smartphone-game-from-the-scratch-4665</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MLztN0mV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1w8veu9cm3z1e3f87tzu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MLztN0mV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1w8veu9cm3z1e3f87tzu.jpg" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;br&gt;
Gaming for smartphones has expanded its market coverage like a wildfire. From horror to survival, gaming apps are being downloaded by millions of people every month. Now, developers are also seeing games as an opportunity to make good money. Ways such as in-app purchases, premium subscriptions, or app prices are providing game developers good income if the game has potential. Now, how to build a game that has enough potential to grow in the market? That’s the question we will answer here.&lt;/p&gt;

&lt;p&gt;Furthermore, we are discussing how to design a smooth game development process from scratch. We will discuss every crucial element of the game development process from developing an idea to marketing the app. If you think your questions can be answered in this blog, stick with us until the end!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#process-of-developing-a-smartphone-game"&gt;
  &lt;/a&gt;
  Process of developing a smartphone game
&lt;/h2&gt;

&lt;p&gt;Without further ado, let’s go through each step to prepare the proper game development process design.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-an-idea"&gt;
  &lt;/a&gt;
  1. An idea
&lt;/h2&gt;

&lt;p&gt;Every process begins with an idea. Now it all depends on what users like to play. Take PUBG for example. When it came into the market, it influenced millions of players instantly and grew with an unmatchable speed.&lt;/p&gt;

&lt;p&gt;With such popularity, it became evident that multiplayer survival games were the future. Thus, expert &lt;a href="https://appinventiv.com/on-demand-app-development"&gt;on-demand gaming app developers&lt;/a&gt; from many prestigious organizations released survival co-op and multiplayer games with various concepts. These games are also defined under the Battle Royale category.&lt;/p&gt;

&lt;p&gt;Now, the message is, that you need to find an idea that you think users will love. It can be a zombie killer storyline or a superhero team-up. It’s all about how creative and influencing you can get.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-prepare-the-budget"&gt;
  &lt;/a&gt;
  2. Prepare the budget
&lt;/h2&gt;

&lt;p&gt;Now, the entire game development process is divided into three parts-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pre-development&lt;/li&gt;
&lt;li&gt;During the development&lt;/li&gt;
&lt;li&gt;Post-development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, the pre-development budget planning includes tasks like preparing a budget for hiring, technology expenses, API costs, time investments, platform-specific or &lt;a href="https://www.mobileappdaily.com/best-hybrid-app-frameworks"&gt;hybrid app development frameworks&lt;/a&gt; that you are using, and more. During the development, costs such as game testing occur. Once the game development process is done, game marketing and publishing take the main share of costs. It has to be understood that without a good marketing strategy, the success of the smartphone game that you developed can be considered compromised. Your budget will have the following elements influencing it-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No. of people working on the process&lt;/li&gt;
&lt;li&gt;No. of hours consumed in the development&lt;/li&gt;
&lt;li&gt;Maintenance of the gaming app&lt;/li&gt;
&lt;li&gt;Any modifications or updates&lt;/li&gt;
&lt;li&gt;Gaming app marketing platforms&lt;/li&gt;
&lt;li&gt;Target operating systems&lt;/li&gt;
&lt;li&gt;Target countries where you will publish the game&lt;/li&gt;
&lt;li&gt;Licensing costs, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-build-the-prototype"&gt;
  &lt;/a&gt;
  3. Build the prototype
&lt;/h2&gt;

&lt;p&gt;It is always ideal to build a prototype first to have an idea of the final product that you are going to get. You can use any easy &lt;a href="https://www.gamedeveloper.com/disciplines/develop-a-mobile-game-the-easy-way-use-a-framework"&gt;gaming framework&lt;/a&gt; to conceptualize the prototype. Now, there are many low-end development frameworks that will let you build the gaming app without the least requirements of manual coding. You can also skip the prototyping phase and begin the development of the actual game, especially if you are building a small game. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-test-your-game-properly"&gt;
  &lt;/a&gt;
  4. Test your game properly
&lt;/h2&gt;

&lt;p&gt;With each phase that you finish developing, test it to make sure that there is no error or glitch left in the game. The glitch can ruin all the progress of the player and spoil their experience. The QA team should be instructed to explore the game through every possible way of playing it to find all the possible bugs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-market-the-app-on-multiple-platforms"&gt;
  &lt;/a&gt;
  5. Market the app on multiple platforms
&lt;/h2&gt;

&lt;p&gt;If your budget allows, you should always go for the omnichannel marketing strategy. Omnichannel marketing strategies include advertising the game on print media, audio-video media, and the internet. It helps you in covering more markets. Moreover, you can also use social media marketing techniques like hiring influencers or advertising the game on huge pages and groups to attract as many people as possible to your game.&lt;/p&gt;

&lt;p&gt;Some marketing strategies like using hashtags to expand your reach might not even cost you anything. It’s always a good idea to build a social media presence from the moment you finalize the idea as it takes time to grow social media platforms originally. Moreover, you also require a regular routine of posting interesting content to grow your social media outreach as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-update-and-maintain-games-regularly"&gt;
  &lt;/a&gt;
  6. Update and maintain games regularly
&lt;/h2&gt;

&lt;p&gt;The job is not over even after the game is published. The main work is making sure it remains interesting and playable for users. Thus, it is always a good idea to bring new ideas occasionally and update the game to give players new experiences. It keeps the curiosity and fun alive. Moreover, as technologies evolve and new OS versions or devices get released in the market, your gaming app has to keep up. Thus, make sure you maintain it and update it regularly to make it suitable for new OS or devices.&lt;/p&gt;

&lt;p&gt;Well, that’s it for the process of developing a gaming app from scratch. Hopefully, it was useful. Until next time, Happy Programming!&lt;/p&gt;

</description>
      <category>gamedev</category>
    </item>
    <item>
      <title>View this solution on Exercism</title>
      <author>Schawnnara</author>
      <pubDate>Thu, 20 Jan 2022 07:54:22 +0000</pubDate>
      <link>https://dev.to/schawnnaraj/view-this-solution-on-exercism-2cn9</link>
      <guid>https://dev.to/schawnnaraj/view-this-solution-on-exercism-2cn9</guid>
      <description>&lt;p&gt;&lt;a href="https://exercism.org/tracks/bash/exercises/rectangles/solutions/SchawnnahJ"&gt;https://exercism.org/tracks/bash/exercises/rectangles/solutions/SchawnnahJ&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Learning Go by examples: part 9 - Use HomeBrew &amp; GoReleaser for distributing a Golang app</title>
      <author>Aurélie Vache</author>
      <pubDate>Thu, 20 Jan 2022 07:18:22 +0000</pubDate>
      <link>https://dev.to/aurelievache/learning-go-by-examples-part-9-use-homebrew-goreleaser-for-distributing-a-golang-app-44ae</link>
      <guid>https://dev.to/aurelievache/learning-go-by-examples-part-9-use-homebrew-goreleaser-for-distributing-a-golang-app-44ae</guid>
      <description>&lt;p&gt;As we have seen in &lt;a href="https://dev.to/aurelievache/learning-go-by-examples-part-8-automatically-cross-compile-release-your-go-app-457a"&gt;Learning Go by examples: part 8 - Automatically cross-compile &amp;amp; release your Go app&lt;/a&gt; article, we can create an app and cross-compile automatically. It's cool but I think we can go more deeper.&lt;/p&gt;

&lt;p&gt;It's cool to create awesome tools but it's better to provide a way to install them easily.&lt;/p&gt;

&lt;p&gt;What do you think if Mac users can install and update our app through HomeBrew?&lt;/p&gt;

&lt;p&gt;In this article, you will learn how to allows users to install your apps, hosted in a GitHub repository, through HomeBrew, starting from my GopherSay application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#homebrew"&gt;
  &lt;/a&gt;
  HomeBrew
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5AfXDGfs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u31j5h3p4fkb194gxgi3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5AfXDGfs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u31j5h3p4fkb194gxgi3.png" alt="HomeBrew" width="880" height="1325"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Homebrew is the missing package manager for macOS. It installs packages with a simple command like &lt;code&gt;brew install curl&lt;/code&gt;. &lt;strong&gt;Homebrew taps&lt;/strong&gt; are third-party repositories. By creating a Homebrew tap &lt;strong&gt;formula&lt;/strong&gt;, users can install and use your repository.&lt;/p&gt;

&lt;p&gt;Taps are external sources of Homebrew formula, casks and/or external commands. They can be created by anyone to provide their own formula, casks and/or external commands to any Homebrew user.&lt;/p&gt;

&lt;p&gt;For example, if you want to install &lt;strong&gt;curl&lt;/strong&gt; app through HomeBrew, you just need to enter the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew install curl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Curl app is on the core HomeBrew tap so HomeBrew found the tap and install the tool in your computer.&lt;/p&gt;

&lt;p&gt;If you want to install a tool that is in a private tap, you need to add it and then install the tool.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew tap go-task/tap
$ brew install go-task
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Or you can directly install the tool in a private tap in only one line:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew install go-task/tap/go-task
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#create-a-github-repository-for-our-homebrew-tap"&gt;
  &lt;/a&gt;
  Create a GitHub repository for our HomeBrew Tap
&lt;/h2&gt;

&lt;p&gt;A Tap is usually a Git repository. If hosted on GitHub, it is recommended that the repository’s name start with &lt;strong&gt;homebrew-&lt;/strong&gt; in order to use &lt;code&gt;brew tap&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scraly/homebrew-tools&lt;/code&gt; repository =&amp;gt; &lt;code&gt;brew tap scraly/tools&lt;/code&gt; command&lt;/p&gt;

&lt;p&gt;Note: even if we want to install only our GopherSay app in this tutorial, we will not name our repository &lt;strong&gt;homebrew-gophersay&lt;/strong&gt; instead of that we will create a repository that will contains many of different formulas.&lt;/p&gt;

&lt;p&gt;First, create our new repository in GitHub: &lt;strong&gt;homebrew-tools&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For that, I logged in GitHub website, clicked on the repositories link, click on "New" green button and then I created a new repository called &lt;code&gt;homebrew-tools&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q9Ow6Dqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejbuhx75glcczp4irlpr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q9Ow6Dqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejbuhx75glcczp4irlpr.png" alt="homebrew-tools" width="880" height="772"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our new GitHub repository is created:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/scraly"&gt;
        scraly
      &lt;/a&gt; / &lt;a href="https://github.com/scraly/homebrew-tools"&gt;
        homebrew-tools
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
homebrew-tools&lt;/h1&gt;
&lt;p&gt;Homebrew formula for installing Scraly's apps &amp;amp; tools.&lt;/p&gt;
&lt;h2&gt;
How To Use&lt;/h2&gt;
&lt;p&gt;Add repository:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;brew tap scraly/tools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Install &lt;a href="https://github.com/scraly/gophersay"&gt;GopherSay&lt;/a&gt;:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;brew install gophersay
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Upgrade the GopherSay CLI to the latest version:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;brew upgrade gophersay
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/scraly/homebrew-tools"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#generate-automatically-homebrew-tap-formula-through-goreleaser"&gt;
  &lt;/a&gt;
  Generate automatically HomeBrew Tap Formula through GoReleaser
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KmnqADMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqbae08i5nalsf49ffqu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KmnqADMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqbae08i5nalsf49ffqu.png" alt="Gopher Zelda" width="414" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the previous article, we created GopherSay golang app, we generated the releases thanks to Go Releaser and we automatized them through GitHub actions.&lt;br&gt;
Everytime we publish a new GitHub release in GopherSay, the GitHub action is runned and our release is created.&lt;/p&gt;

&lt;p&gt;It's perfect.&lt;/p&gt;

&lt;p&gt;So now we need to ask GoReleaser to generate also a HomeBrew tap formula :).&lt;/p&gt;

&lt;p&gt;In order to do that automatically, we need to edit our &lt;code&gt;goreleaser.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;If you don't already clone the repository, you need to clone it and go into the &lt;strong&gt;gophersay&lt;/strong&gt; folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git clone https://github.com/scraly/gophersay.git
$ cd gophersay
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, add the following step in &lt;code&gt;.goreleaser.yml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;brews&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gophersay&lt;/span&gt;
  &lt;span class="na"&gt;homepage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://github.com/scraly/homebrew-tools&lt;/span&gt; 
  &lt;span class="na"&gt;tap&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;owner&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;scraly&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;homebrew-tools&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's explain this code block:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;brews&lt;/strong&gt; section specifies how the formula should be created. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;homepage&lt;/strong&gt; is for your app's homepage&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;tap&lt;/strong&gt; is for defining the GitHub/GitLab repository to push the formula to&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Warning: the name of the brew will be the name of the formula, so what you want to install with &lt;code&gt;brew install &amp;lt;name&amp;gt;&lt;/code&gt; command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generate-our-formula"&gt;
  &lt;/a&gt;
  Generate our formula!
&lt;/h2&gt;

&lt;p&gt;In order to generate the HomeBrew formula automatically, we need to create a new tag in our Git repository and push it. This will create a new release in the GitHub repository.&lt;/p&gt;

&lt;p&gt;Let's create and push &lt;strong&gt;v1.0.2&lt;/strong&gt; tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git tag v1.0.2
$ git push origin v1.0.2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check if the new tag have been correctly added, go to &lt;a href="https://github.com/scraly/gophersay/releases/"&gt;GopherSay Releases&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gZPdGv48--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/reqktr4g3n75ls2d25xz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gZPdGv48--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/reqktr4g3n75ls2d25xz.png" alt="GopherSay Releases" width="880" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fine, release v1.0.2 exists.&lt;/p&gt;

&lt;p&gt;Now, go in &lt;strong&gt;Actions&lt;/strong&gt; tab in the GitHub repository in order to check if GitHub action runned:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---MwwD7le--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r0geajhny62miu29iuxl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---MwwD7le--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r0geajhny62miu29iuxl.png" alt="GitHub Actions" width="880" height="277"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Everything is green, it's a good sign! 🙂&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-check-if-our-formula-have-been-added"&gt;
  &lt;/a&gt;
  Let's check if our formula have been added
&lt;/h2&gt;

&lt;p&gt;Go in our &lt;a href="https://github.com/scraly/homebrew-tools"&gt;HomeBrew Tap repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The GopherSay formula have been automatically updated:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--is9cmRaS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awlysnv794sf83y7j6sc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--is9cmRaS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awlysnv794sf83y7j6sc.png" alt="GopherSay formula" width="880" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's have a look to our &lt;code&gt;gophersay.rb&lt;/code&gt; formula file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# typed: false&lt;/span&gt;
&lt;span class="c1"&gt;# frozen_string_literal: true&lt;/span&gt;

&lt;span class="c1"&gt;# This file was generated by GoReleaser. DO NOT EDIT.&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Gophersay&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Formula&lt;/span&gt;
  &lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
  &lt;span class="n"&gt;homepage&lt;/span&gt; &lt;span class="s2"&gt;"https://github.com/scraly/homebrew-tools"&lt;/span&gt;
  &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="s2"&gt;"1.0.2"&lt;/span&gt;

  &lt;span class="n"&gt;on_macos&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;Hardware&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CPU&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;intel?&lt;/span&gt;
      &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="s2"&gt;"https://github.com/scraly/gophersay/releases/download/v1.0.2/gophersay_1.0.2_Darwin_x86_64.tar.gz"&lt;/span&gt;
      &lt;span class="n"&gt;sha256&lt;/span&gt; &lt;span class="s2"&gt;"084b60f89b442cc66159a495421d3e9fb48b3861b324a2ac1062d4491c342f27"&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;install&lt;/span&gt;
        &lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;install&lt;/span&gt; &lt;span class="s2"&gt;"gophersay"&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;Hardware&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CPU&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arm?&lt;/span&gt;
      &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="s2"&gt;"https://github.com/scraly/gophersay/releases/download/v1.0.2/gophersay_1.0.2_Darwin_arm64.tar.gz"&lt;/span&gt;
      &lt;span class="n"&gt;sha256&lt;/span&gt; &lt;span class="s2"&gt;"0e98ff426817075492f3e61569c28d5bfd7a69ab7264f6cf03dd99e007277ae1"&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;install&lt;/span&gt;
        &lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;install&lt;/span&gt; &lt;span class="s2"&gt;"gophersay"&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;on_linux&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;Hardware&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CPU&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;intel?&lt;/span&gt;
      &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="s2"&gt;"https://github.com/scraly/gophersay/releases/download/v1.0.2/gophersay_1.0.2_Linux_x86_64.tar.gz"&lt;/span&gt;
      &lt;span class="n"&gt;sha256&lt;/span&gt; &lt;span class="s2"&gt;"bd3af60d4e9f5deb63dfd675cc5c2aa515d4897fb056b3170d316d9a9e466998"&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;install&lt;/span&gt;
        &lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;install&lt;/span&gt; &lt;span class="s2"&gt;"gophersay"&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;Hardware&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CPU&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arm?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="no"&gt;Hardware&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CPU&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_64_bit?&lt;/span&gt;
      &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="s2"&gt;"https://github.com/scraly/gophersay/releases/download/v1.0.2/gophersay_1.0.2_Linux_arm64.tar.gz"&lt;/span&gt;
      &lt;span class="n"&gt;sha256&lt;/span&gt; &lt;span class="s2"&gt;"b8e8113b90efcd8dce4a38d648000cd5f1d8830bba039a585ca2d5067eb17740"&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;install&lt;/span&gt;
        &lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;install&lt;/span&gt; &lt;span class="s2"&gt;"gophersay"&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;GoReleaser create and update this formula every time you will push a new tag is your app with release information like: version, executable binary archive depending on the OS, sha256...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-our-app-through-homebrew"&gt;
  &lt;/a&gt;
  Install our app through HomeBrew
&lt;/h2&gt;

&lt;p&gt;Now your HomeBrew tap is ready and the formula is created, so we can install our app.&lt;/p&gt;

&lt;p&gt;Add our tap:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew tap scraly/tools
==&amp;gt; Tapping scraly/tools
Cloning into '/usr/local/Homebrew/Library/Taps/scraly/homebrew-tools'...
remote: Enumerating objects: 9, done.
remote: Counting objects: 100% (9/9), done.
remote: Compressing objects: 100% (6/6), done.
remote: Total 9 (delta 0), reused 0 (delta 0), pack-reused 0
Receiving objects: 100% (9/9), done.
Tapped 1 formula (13 files, 7.7KB).
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install our app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew install gophersay
Updating Homebrew...
==&amp;gt; Auto-updated Homebrew!
Updated 1 tap (scraly/tools).
==&amp;gt; New Formulae
scraly/tools/gophersay

==&amp;gt; Installing gophersay from scraly/tools
==&amp;gt; Downloading https://github.com/scraly/gophersay/releases/download/v1.0.1/gophersay_1.0.1_Darwin_x86_64.tar.gz
==&amp;gt; Downloading from https://github-releases.githubusercontent.com/398637863/968c588e-71e2-4300-b62a-33aa9b245ada?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210830%2Fus-east-1%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20210830T100137
######################################################################## 100.0%
Error: The `brew link` step did not complete successfully
The formula built, but is not symlinked into /usr/local
Could not symlink bin/gophersay
Target /usr/local/bin/gophersay
already exists. You may want to remove it:
  rm '/usr/local/bin/gophersay'

To force the link and overwrite all conflicting files:
  brew link --overwrite gophersay

To list all files that would be deleted:
  brew link --overwrite --dry-run gophersay

Possible conflicting files are:
/usr/local/bin/gophersay
==&amp;gt; Summary
🍺  /usr/local/Cellar/gophersay/1.0.1: 5 files, 1.5MB, built in 8 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or you can directly install the app in oneline installation command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew install scraly/tools/gophersay
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#test-our-app"&gt;
  &lt;/a&gt;
  Test our app
&lt;/h2&gt;

&lt;p&gt;Run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ gophersay test

  ----
&amp;lt; test &amp;gt;
  ----
        \
         \

       (%%.                             .
     @***,*********@           &amp;amp;****************&amp;amp;             .&amp;amp;%(********%#
       ,(((((((@*******@   .*************///***********#  @****(#((((((((((@
         &amp;amp;(((((((((@*****@***********************************((((((((((,
           .((((((((((%((((((((&amp;amp;****************************((((((((((@
             &amp;amp;((((((((@.    .@#((@***************************@((((((@
                /@(@     @@@     (*************************&amp;amp;(((/(((((%
                   @     @@      /************************            @
                 (**            /************************&amp;amp;    (@@@    *
                /*****%       @**************************@            @
               ,*******************************************&amp;amp;         ,
               ***************************************************
              @***********************((((((((&amp;amp;*******************
             *************************((((((&amp;amp;((&amp;amp;*****************&amp;amp;
             ***********************((((((((((((%****************
            (****.......@......#***&amp;amp;((((((#((((%***..........@**,@,
          ****,/ .......#.......,******,  (  ******.. ....@..*******@
          @*@.... @.....#..(.....#*****@@@@/(*****..(...../...&amp;amp;. ****&amp;amp;
             ............ ......../************&amp;amp;.........&amp;amp;..&amp;amp;*,  (((#
             ..............@........@********/.......... .....   &amp;amp;(((
              ...............%........&amp;amp;**#............/......(    %((.
             *..................,.......#...........#.......@    .((((
             *....................(.......%.....#..........(     (((((
              ......................@........%.............      #((((
               .......................&amp;amp;......@............(       ((((
                ........................@................*        #(((
                 /....................... ......(.......%        #(((
                   (.......................,.....#....****@     (#((
                  .******.@.................,.....@*   ****/   &amp;amp;((((/
                 /****.                                         ##.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#upgrade-our-app"&gt;
  &lt;/a&gt;
  Upgrade our app
&lt;/h2&gt;

&lt;p&gt;Through HomeBrew, you can now upgrade our GopherSay application to the latest version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew upgrade gophersay
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you have seen in this article and previous articles, it's possible to create multiple different applications in Go,  and automatize build and cross-compilation and even provides an easy way to install our app for Mac users.&lt;/p&gt;

&lt;p&gt;All the code of our GopherSay app in Go is available in: &lt;a href="https://github.com/scraly/gophersay"&gt;https://github.com/scraly/gophersay&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the following articles we will create others kind/types of applications in Go.&lt;/p&gt;

&lt;p&gt;Hope you'll like it.&lt;/p&gt;

</description>
      <category>go</category>
      <category>beginners</category>
      <category>library</category>
      <category>package</category>
    </item>
    <item>
      <title>YOU NEED to Learn Python in 2022! (Business Perspective)</title>
      <author>CodeWithKenn</author>
      <pubDate>Thu, 20 Jan 2022 07:14:13 +0000</pubDate>
      <link>https://dev.to/codewithkenn/top-5-reasons-to-learn-python-in-2022-business-perspective-27fj</link>
      <guid>https://dev.to/codewithkenn/top-5-reasons-to-learn-python-in-2022-business-perspective-27fj</guid>
      <description>&lt;p&gt;&lt;strong&gt;Python is one of the easiest programming languages to get started with. For this reason, the community keeps growing every month.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because of its simplicity (of the Syntax), Python has become the most popular language.&lt;/p&gt;

&lt;p&gt;Besides, Python helps Engineers build great products in many industries and professional domains.&lt;br&gt;
The Programmer's life gets easier when it comes to having a look at Python.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-about-the-python-business-market-size"&gt;
  &lt;/a&gt;
  What about the Python Business Market size?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ooqISuWW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642662070916/ha3UIJDHx.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ooqISuWW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642662070916/ha3UIJDHx.jpeg" alt="market-size-market-share.jpg" width="815" height="713"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python is an open-source language, which means that anyone can use it. However, if you look to an industry such as data analytics, in which Python can be used, the market value is &lt;strong&gt;over $10 billion&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Shared by &lt;a href="https://www.futurelearn.com/info/insights/python-insights"&gt;futurelearn.com&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#here-are-the-top-10-most-common-uses-of-python-by-industry"&gt;
  &lt;/a&gt;
  Here are the top 10 most common uses of Python by industry
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--umGw-dCA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642662192938/xYTgi2Ycs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--umGw-dCA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642662192938/xYTgi2Ycs.png" alt="pandemic-hero.png" width="880" height="528"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;▪ Insurance: Creating business insights with machine learning.&lt;/p&gt;

&lt;p&gt;▪ Retail Banking: Flexible data transformation and manipulation.&lt;/p&gt;

&lt;p&gt;▪ Aerospace: Meeting software system deadlines.&lt;/p&gt;

&lt;p&gt;▪ Finance: Data mining to identify cross-sell opportunities.&lt;/p&gt;

&lt;p&gt;▪ Business Services: API access to financial information&lt;/p&gt;

&lt;p&gt;▪ Hardware: Automating network administration&lt;/p&gt;

&lt;p&gt;▪ Healthcare: Predicting disease prognosis&lt;/p&gt;

&lt;p&gt;▪ Consulting Services: Bespoke web development&lt;/p&gt;

&lt;p&gt;▪ InfoTech: IT modernization&lt;/p&gt;

&lt;p&gt;▪ Software: Adding extensibility to legacy applications&lt;/p&gt;

&lt;p&gt;Shared by &lt;a href="https://appdevelopermagazine.com/ten-industries-using-python-programming/"&gt;appdevelopermagazine.com&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#here-are-5-worldclass-software-companies-that-use-python"&gt;
  &lt;/a&gt;
  Here are 5 World-Class Software Companies That Use Python
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O3fz1ihF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642662333807/Y73E563_X.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O3fz1ihF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642662333807/Y73E563_X.jpeg" alt="COTW-TechAcquisitions-Shareable-2.jpg" width="880" height="461"&gt;&lt;/a&gt;&lt;br&gt;
(Photo by Visual Capitalist)&lt;/p&gt;

&lt;p&gt;Google, Meta (Facebook), Instagram, Netflix, Instagram.&lt;br&gt;
There are plenty of companies searching for Python Developers around the globe.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#hence-i-created-this-blog-to-help-you-out"&gt;
  &lt;/a&gt;
  Hence, I created this Blog to help you out!
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3BDkfEel--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642662424540/nnlZkUO_y.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3BDkfEel--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642662424540/nnlZkUO_y.jpeg" alt="Design-Blog-Page-Python.jpg" width="800" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hence, Learning Python helps you create Opportunities from jobs to Building Products people use.&lt;br&gt;
I just got into Full-stack development using Python Software Development, React + Python as Tech Stack.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-sure-to-follow-codewithkenn-for-more-articles-about"&gt;
  &lt;/a&gt;
  Make sure to follow CodeWithKenn for more articles about:
&lt;/h2&gt;

&lt;p&gt;➞ Learning Python in simple terms&lt;/p&gt;

&lt;p&gt;➞ Building Side Projects and SaaS using React + Python&lt;/p&gt;

&lt;p&gt;➞ Getting useful Resources and tips for your coding Journey&lt;/p&gt;

&lt;p&gt;Stay tuned! More articles are coming out! Feel free to comment and share the articles to support me 🤙&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  🌎 Let's connect
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/CodeWithKenn"&gt;Twitter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/KennStack01"&gt;Github&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.linkedin.com/in/kennkibadi/"&gt;LinkedIn&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.instagram.com/codewithkenn_/"&gt;Instagram&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/Code-With-Kenn-104376625415201"&gt;Facebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Want to start blogging?  🔥&lt;a href="https://hashnode.com/@CodeWithKenn/joinme"&gt;Join NOW!&lt;/a&gt; &lt;/p&gt;

</description>
      <category>python</category>
      <category>django</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Building a Spotify that can interact  with social media and we can upload song there </title>
      <author>M.Majid</author>
      <pubDate>Thu, 20 Jan 2022 06:57:13 +0000</pubDate>
      <link>https://dev.to/majidnope/building-a-spotify-that-can-interact-with-social-media-and-we-can-upload-song-there-2lad</link>
      <guid>https://dev.to/majidnope/building-a-spotify-that-can-interact-with-social-media-and-we-can-upload-song-there-2lad</guid>
      <description>&lt;p&gt;&lt;a href="https://www.instagram.com/nop.__e_/"&gt;Connect me in 🤖 Instagtram&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ODcabNcz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0fx6owq2eb57g7u1zoa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ODcabNcz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0fx6owq2eb57g7u1zoa.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>React to the React App: How to hard reload your React Web App?</title>
      <author>Mohammed Ali Chherawalla (MAC)</author>
      <pubDate>Thu, 20 Jan 2022 06:18:16 +0000</pubDate>
      <link>https://dev.to/alichherawalla/react-to-the-react-app-how-to-hard-reload-your-react-web-app-3god</link>
      <guid>https://dev.to/alichherawalla/react-to-the-react-app-how-to-hard-reload-your-react-web-app-3god</guid>
      <description>&lt;p&gt;Good software development practices reduce the possibility of errors. But these pesky creatures still find their way in production. When a user runs into an error the webpage could crash and s/he would have to manually reload it. This leads to a bad user experience. A reload button in case of an error could help the user and nudge them into recovery. More specifically a “Hard reload button” i.e. a button that fetches the webpage from the server instead of the cache.&lt;/p&gt;

&lt;p&gt;The error boundary of your web application is a good place to keep the reload button. In most React applications this is a component. It contains a fallback UI, with some text to nudge the user to reload.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Note: This tutorial assumes that you know React and have good 
working knowledge of javascript.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this tutorial, you will learn to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build a basic Error Boundary component&lt;/li&gt;
&lt;li&gt;Create a button that will hard reload a webpage&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#starter-project"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Starter Project&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;We’re going to use the &lt;a href="https://github.com/wednesday-solutions/react-template"&gt;Wednesday react template&lt;/a&gt; as a starter project. This is a project we use as a base across all the react projects at Wednesday.&lt;/p&gt;

&lt;p&gt;Open the terminal and clone the repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone &lt;span class="o"&gt;[&lt;/span&gt;git@github.com]&lt;span class="o"&gt;(&lt;/span&gt;mailto:git@github.com&lt;span class="o"&gt;)&lt;/span&gt;:wednesday-solutions/react-template.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Navigate to the project on the terminal and run.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once done run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will start the react template. You should see the following on your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PjbbEwGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ck90vhqurxbvj8dznrd9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PjbbEwGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ck90vhqurxbvj8dznrd9.png" alt="Image description" width="880" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great going so far. You’re now ready to start making changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-error-boundary"&gt;
  &lt;/a&gt;
  The Error Boundary
&lt;/h2&gt;

&lt;p&gt;The Starter Project comes with a basic error boundary but we will begin by &lt;strong&gt;creating an all-new Error Boundary&lt;/strong&gt; with a refresh button &amp;amp; a start fresh button.&lt;/p&gt;

&lt;p&gt;Open the project in your text editor of choice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 1&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Navigate to the &lt;strong&gt;app/components/ErrorBoundary&lt;/strong&gt; folder and replace the contents of the &lt;strong&gt;index.js&lt;/strong&gt; file with the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 *
 * ErrorBoundary
 *
 */&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prop-types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;errorBoundaryImage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@images/icon-512x512.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;media&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@themes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Styled components to make it look nice&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundaryContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  text-align: center;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundaryImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="s2"&gt;`
  margin-top: 8rem;
  width: 25%;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="s2"&gt;`
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extraLarge&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;
  margin-top: 1.375rem;
  font-family: 'Poppins';
  color: #00244f;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="s2"&gt;`
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;large&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;
  color: #00244f;
  margin: 0 26.9% 0 26.9%;

  b {
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StyledButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
  padding: 0.5rem 1.5rem;
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;borderRadius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;;
  border: none;
  color: #ffffff;
  background: #af0974;
  margin: 1.5rem 1.5rem 11rem 0;
  cursor: pointer;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;hasError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;getDerivedStateFromError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// state to hold the error&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;hasError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;componentDidCatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errorInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errorInfo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;handleRefreshClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ErrorBoundaryContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ErrorBoundaryImage&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errorBoundaryImage&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Please bear with us..&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            Sorry for the inconvenience. We suggest you &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;refresh the page&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; to resolve the issue.
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StyledButton&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleRefreshClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hit Refresh&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;StyledButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ErrorBoundaryContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oneOfType&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arrayOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It’s a lot to digest. I’ve left a few comments in the code to make it easy to understand.&lt;/p&gt;

&lt;p&gt;In a nutshell this component shows the a button and some text when the error state is set.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 2&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;To test your new component you're going to deliberately trigger an error in the App Container.&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;app/containers/App/index.js&lt;/strong&gt; file and replace the current App component with the one below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your browser should now show the following.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nM9qmg0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/in1jt1a9l17m7hanrh1e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nM9qmg0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/in1jt1a9l17m7hanrh1e.png" alt="Image description" width="880" height="518"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hard-reload"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Hard Reload&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;You now have all the building blocks in place. You have a component that will show up when an error occurs. You just need to write the logic to hard reload the page when the user hits the refresh button.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-uninstall-service-workers"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 1: Uninstall service workers&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Paste in the below code in the &lt;strong&gt;handleRefreshClick&lt;/strong&gt; function in &lt;strong&gt;app/components/ErrorBoundary/index.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;handleRefreshClick&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serviceWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRegistrations&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;registrations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;registrations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;registration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;registration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above piece of code gets all the service workers currently installed for your web app and uninstalls them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Note: We could also use the window.location.reload&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt; 
However it would not bypass the service worker and requests will still 
be fetched from the cache.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-clear-the-cache"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 2: Clear the cache&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The the following code to the end of the &lt;strong&gt;handleRefreshClick()&lt;/strong&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;handleRefreshClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;keyList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;keyList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above piece of code removes all browser cache entries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-reload-the-window"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 3: Reload the window&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Finally, copy the following snippet and paste it at the end of the same function and add the async keyword before the function name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;handleRefreshClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This triggers the browser to reload the page. If you reload the webpage in your browser, it should now work as expected. Clicking the 'Hit Refresh' button will hard reload the page.&lt;/p&gt;

&lt;p&gt;Yay! You’ve now &lt;strong&gt;created a button that can hard reload a webpage.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-go-from-here"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Where to go from here&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;You’re now able to hard reload webpages using javascript and implement it on your website. The &lt;strong&gt;Error Boundary&lt;/strong&gt; we created here is very basic to keep the focus on the javascript bit.  When you do implement it in your website, remember to get as creative as possible i.e. design a much more helpful webpage, add animations, transitions. Have fun with it. &lt;/p&gt;

&lt;p&gt;I hope you enjoyed this tutorial as much as I enjoyed writing it. If this piqued your interest, check out other articles by Wednesday Solutions and tweet your comments at &lt;a href="https://twitter.com/home"&gt;us&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By: Saksham Khatod &lt;br&gt;
Originally appeared on &lt;a href="https://www.wednesday.is/writing-tutorials/react-to-the-react-app-how-to-hard-reload-your-react-web-app-using-error-boundary"&gt;https://www.wednesday.is/writing-tutorials/react-to-the-react-app-how-to-hard-reload-your-react-web-app-using-error-boundary&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>webapp</category>
    </item>
    <item>
      <title>Tailwind CSS Pseudo-elements</title>
      <author>Chris Bongers</author>
      <pubDate>Thu, 20 Jan 2022 05:51:59 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/tailwind-css-pseudo-elements-1h2</link>
      <guid>https://dev.to/dailydevtips1/tailwind-css-pseudo-elements-1h2</guid>
      <description>&lt;p&gt;I only learned that Tailwind recently added the option to style pseudo-elements.&lt;br&gt;
Ever since the introduction of &lt;a href="https://daily-dev-tips.com/posts/why-tailwind-jit-compiler-is-amazing/"&gt;Tailwind JIT&lt;/a&gt; it turns out we can now also leverage pseudo-elements in Tailwind!&lt;/p&gt;

&lt;p&gt;Let's look at how it works and what we can do with them.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-are-pseudoelements"&gt;
  &lt;/a&gt;
  What are pseudo-elements
&lt;/h2&gt;

&lt;p&gt;If you are &lt;a href="https://daily-dev-tips.com/posts/css-pseudo-elements/"&gt;not aware of pseudo-elements&lt;/a&gt;, they are similar to pseudo-classes like &lt;code&gt;:hover&lt;/code&gt;, &lt;code&gt;:first&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;The difference is that &lt;code&gt;pseudo-classes&lt;/code&gt; are existing elements that get styled differently.&lt;br&gt;
As to where &lt;code&gt;pseudo-elements&lt;/code&gt; are new elements.&lt;br&gt;
They can give us the superpower to add new styled elements to the DOM.&lt;/p&gt;

&lt;p&gt;Another way to identify &lt;code&gt;pseudo-elements&lt;/code&gt; is to always start with two &lt;code&gt;::&lt;/code&gt; where the classes only use one &lt;code&gt;:&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's look at each of the pseudo-elements and how we can use them in Tailwind CSS.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tailwind-css-firstline-pseudoelement"&gt;
  &lt;/a&gt;
  Tailwind CSS first-line pseudo-element
&lt;/h2&gt;

&lt;p&gt;This pseudo-element can manipulate the first line of a specific sentence.&lt;/p&gt;

&lt;p&gt;Let's say we want to make the first line of an article blue, so it pops a bit more. While we are at it, we could also transform the first line to uppercase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"first-line:uppercase first-line:tracking-widest first-line:text-blue-500"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
  incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud
  exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure
  dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
  Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt
  mollit anim id est laborum.
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will result in the following:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/dyVqwqz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-firstletter-pseudoelement"&gt;
  &lt;/a&gt;
  Tailwind CSS first-letter pseudo-element
&lt;/h2&gt;

&lt;p&gt;Like the &lt;code&gt;first-line&lt;/code&gt; selector, we can also target the first letter.&lt;br&gt;
You often see this in those old-school books giving a nice effect.&lt;/p&gt;

&lt;p&gt;I personally really love this effect, and this is how you use it in Tailwind CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"first-letter:text-7xl first-letter:font-bold first-letter:mr-3 first-letter:float-left first-letter:text-teal-500"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
  incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud
  exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure
  dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
  Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt
  mollit anim id est laborum.
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result of the first-letter will look like this:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/JjrawqN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-before-pseudoelement"&gt;
  &lt;/a&gt;
  Tailwind CSS before pseudo-element
&lt;/h2&gt;

&lt;p&gt;The before pseudo-element is perfect for adding that extra new element to the dom, which you can use to add nice effects to certain elements.&lt;/p&gt;

&lt;p&gt;Let's try and create a fun background for an image.&lt;br&gt;
We want the image to show, but there should be a different colored div with an angle on the background.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative before:block before:absolute before:-inset-1 before:-rotate-6  before:bg-teal-500"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative border-4 border-white"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img.jpg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which will result in the following:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/NWaLeQV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-before-pseudoelement"&gt;
  &lt;/a&gt;
  Tailwind CSS before pseudo-element
&lt;/h2&gt;

&lt;p&gt;The after element can be used the same way as the before element.&lt;br&gt;
Let's try something else for this one.&lt;/p&gt;

&lt;p&gt;We often have forms with required fields. Let's add a red &lt;code&gt;*&lt;/code&gt; for the required fields.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"block"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt;
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"after:content-['*'] after:ml-0.5 after:text-red-500 block text-sm font-medium text-gray-700"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Email
  &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
    &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;
    &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mt-1 px-3 py-2 bg-white border shadow-sm border-gray-300 placeholder-gray-400 focus:outline-none focus:border-sky-500 focus:ring-sky-500 block w-full rounded-md sm:text-sm focus:ring-1"&lt;/span&gt;
    &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"you@example.com"&lt;/span&gt;
  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Resulting in this amazing piece:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/mdBGvVz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-selection-pseudoelement"&gt;
  &lt;/a&gt;
  Tailwind CSS selection pseudo-element
&lt;/h2&gt;

&lt;p&gt;I'm sure you have seen this before, you select a piece of text, and the color is different.&lt;/p&gt;

&lt;p&gt;That is done by using the &lt;code&gt;selection&lt;/code&gt; pseudo-element.&lt;/p&gt;

&lt;p&gt;It looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"selection:bg-teal-500 selection:text-white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
  incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud
  exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure
  dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
  Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt
  mollit anim id est laborum.
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try it out by selecting some text:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/gOGdqrZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Now that we can use these selectors in Tailwind, there is almost no need for any custom CSS while using Tailwind.&lt;/p&gt;

&lt;p&gt;I'm thrilled these are now so well supported, and I'm sure it will be a game-changer.&lt;/p&gt;

&lt;p&gt;If you want to read up more, the &lt;a href="https://tailwindcss.com/docs/hover-focus-and-other-states#pseudo-elements"&gt;official docs of Tailwind&lt;/a&gt; are always a gem of information.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>6 ways to center a div</title>
      <author>Jatin Sharma</author>
      <pubDate>Thu, 20 Jan 2022 05:46:04 +0000</pubDate>
      <link>https://dev.to/j471n/6-ways-to-center-a-div-5fgj</link>
      <guid>https://dev.to/j471n/6-ways-to-center-a-div-5fgj</guid>
      <description>&lt;p&gt;Yeah, I know we all have struggled with this situation. We want to center a &lt;code&gt;div&lt;/code&gt; or &lt;code&gt;child&lt;/code&gt; inside the parent element, but sometimes it won't work or it's hard to do. So now let me introduce to you 6 ways by which you can center a &lt;code&gt;div&lt;/code&gt; mostly in every situation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h3&gt;

&lt;p&gt;We have 2 divs &lt;code&gt;parent&lt;/code&gt; and &lt;code&gt;child&lt;/code&gt; and we need to center &lt;code&gt;child&lt;/code&gt; with respect to the &lt;code&gt;parent&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2fkYaY1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ydjQ8nQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2fkYaY1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ydjQ8nQ.png" width="432" height="432"&gt;&lt;/a&gt;Goal - It should look like this&lt;/p&gt;

&lt;p&gt;Now we know what we want to achieve. So let's see what are the possible solutions for this problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-using-flexbox"&gt;
  &lt;/a&gt;
  1. Using Flexbox
&lt;/h2&gt;

&lt;p&gt;The Flexible Box Layout Module, makes it easier to design flexible responsive layout structure.&lt;/p&gt;

&lt;p&gt;Apply the following properties to  &lt;code&gt;.parent&lt;/code&gt;  will center &lt;code&gt;.child&lt;/code&gt;  horizontally and vertically.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/j471n/embed/ZEXpVYv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/j471n/pen/ZEXpVYv"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8AKOF1Df--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/MNtTdVp.png" alt="codepen" width="300" height="76"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-using-position"&gt;
  &lt;/a&gt;
  2. Using Position
&lt;/h2&gt;

&lt;p&gt;The  &lt;code&gt;position&lt;/code&gt;  property specifies the type of positioning method used for an element (static, relative, fixed, absolute or sticky). We only need relative and absolute.&lt;/p&gt;

&lt;p&gt;Apply following properties to &lt;code&gt;.parent&lt;/code&gt; and &lt;code&gt;.child&lt;/code&gt;  will center  &lt;code&gt;.child&lt;/code&gt;  horizontally and vertically.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/j471n/embed/gOGwZpp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/j471n/pen/gOGwZpp"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8AKOF1Df--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/MNtTdVp.png" alt="codepen" width="300" height="76"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-using-css-grid"&gt;
  &lt;/a&gt;
  3. Using CSS grid
&lt;/h2&gt;

&lt;p&gt;The CSS Grid Layout Module offers a grid-based layout system, with rows and columns. we can center the &lt;code&gt;child&lt;/code&gt; element with this as well.&lt;/p&gt;

&lt;p&gt;Apply following properties to  &lt;code&gt;.parent&lt;/code&gt;  will center  &lt;code&gt;.child&lt;/code&gt;  horizontally and vertically.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Horizontal */&lt;/span&gt;  
    &lt;span class="nl"&gt;align-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Vertical */&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/j471n/embed/QWqKzjp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/j471n/pen/QWqKzjp"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8AKOF1Df--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/MNtTdVp.png" alt="codepen" width="300" height="76"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also there's one other way to use the Grid you can apply the following properties to &lt;code&gt;.parent&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Another Approach */&lt;/span&gt;
&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="py"&gt;place-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/j471n/embed/oNGzJbO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/j471n/pen/oNGzJbO"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8AKOF1Df--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/MNtTdVp.png" alt="codepen" width="300" height="76"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-using-raw-margin-auto-endraw-on-a-raw-flex-endraw-item"&gt;
  &lt;/a&gt;
  4. Using  &lt;code&gt;margin:  auto&lt;/code&gt;  on a  &lt;code&gt;flex&lt;/code&gt;  item
&lt;/h2&gt;

&lt;p&gt;Flexbox introduced a pretty awesome behavior for &lt;code&gt;auto&lt;/code&gt; margins. Now, it not only horizontally centers an element as it did in block layouts, but it also centers it in the vertical axis.&lt;/p&gt;

&lt;p&gt;Apply following properties to &lt;code&gt;.parent&lt;/code&gt; will center &lt;code&gt;.child&lt;/code&gt;  horizontally and vertically.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/j471n/embed/zYEKyKJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/j471n/pen/zYEKyKJ"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8AKOF1Df--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/MNtTdVp.png" alt="codepen" width="300" height="76"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-pseudoelements-on-a-raw-flex-endraw-container"&gt;
  &lt;/a&gt;
  5. Pseudo-elements on a  &lt;code&gt;flex&lt;/code&gt;  container
&lt;/h2&gt;

&lt;p&gt;Not the most practical approach in the world, but we can also use flexible, empty pseudo-elements to push an element to the center.&lt;/p&gt;

&lt;p&gt;Apply following properties to  &lt;code&gt;.parent&lt;/code&gt;  will center  &lt;code&gt;.child&lt;/code&gt;  horizontally and vertically.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="nc"&gt;.parent&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
&lt;span class="nc"&gt;.parent&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="c"&gt;/* ...other CSS */&lt;/span&gt; 
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/j471n/embed/RwLGEKN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/j471n/pen/RwLGEKN"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8AKOF1Df--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/MNtTdVp.png" alt="codepen" width="300" height="76"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-raw-margin-auto-endraw-on-a-raw-grid-endraw-item"&gt;
  &lt;/a&gt;
  6.  &lt;code&gt;margin:  auto&lt;/code&gt;  on a  &lt;code&gt;grid&lt;/code&gt;  item
&lt;/h2&gt;

&lt;p&gt;Similarly to Flexbox, applying &lt;code&gt;margin:&lt;/code&gt;  &lt;code&gt;auto&lt;/code&gt; on a &lt;code&gt;grid&lt;/code&gt; item centers it on both axes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/j471n/embed/ExwgGZd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/j471n/pen/ExwgGZd"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8AKOF1Df--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/MNtTdVp.png" alt="codepen" width="300" height="76"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;These are not the only solution or the ways to center a child. There are many other ways to achieve the same thing, But I know only these so I shared them with you. If you have any other way, then feel free to drop your thoughts.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can now extend your support by buying me a Coffee.😊👇&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/j471n"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee" width="545" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#also-read"&gt;
  &lt;/a&gt;
  Also Read
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/curved-css-timeline-5ab3"&gt;Curved Timeline in CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/image-slider-with-vanila-js-22bf"&gt;Image Slider with Vanila JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/typing-effect-by-using-css-50p"&gt;Typing Effect by using CSS &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>JS Event Loop and Call Stack</title>
      <author>SURAJITSHAW</author>
      <pubDate>Thu, 20 Jan 2022 05:35:02 +0000</pubDate>
      <link>https://dev.to/surajitshaw/js-event-loop-and-call-stack-360h</link>
      <guid>https://dev.to/surajitshaw/js-event-loop-and-call-stack-360h</guid>
      <description>&lt;p&gt;Hello everyone 👋, I hope you are doing great.&lt;/p&gt;

&lt;p&gt;So, today you are going to learn An Overview of what JavaScript event loop and call stack are, and how JavaScript work visually.&lt;/p&gt;

&lt;p&gt;Many JavaScript developers don't know how JavaScript works. If you are new to JavaScript, then this article will help to learn how JavaScript works.&lt;/p&gt;

&lt;p&gt;⚙️ &lt;strong&gt;JavaScript Engine&lt;/strong&gt;&lt;br&gt;
The JavaScript engine is a program that executes your JavaScript code. A popular example of a JavaScript engine is Google's V8 engine.&lt;/p&gt;

&lt;p&gt;⚙️ &lt;strong&gt;V8 Engine&lt;/strong&gt;&lt;br&gt;
The V8 engine is an open-source, high-performance JavaScript and Web Assembly engine written in C++. The V8 engine is used inside Google Chrome, Node.js, and electron, among others.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Event Loop&lt;/strong&gt; : &lt;em&gt;The event loop is the secret behind JavaScript’s asynchronous programming. JS executes all operations on a single thread, but using a few smart data structures, it gives us the illusion of multi-threading. Let’s take a look at what happens on the back-end.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Call Stack&lt;/strong&gt; : &lt;em&gt;The call stack is responsible for keeping track of all the operations in line to be executed. Whenever a function is finished, it is popped from the stack.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--04-IdUBk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zkazqq7fx5sykqecl06.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--04-IdUBk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zkazqq7fx5sykqecl06.png" alt="Image of call stack and it's function push and pop" width="363" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Event Queue&lt;/strong&gt; : &lt;em&gt;The event queue is responsible for sending new functions to the track for processing. It follows the queue data structure to maintain the correct sequence in which all operations should be sent for execution.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XIEJS3ZH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajsp1lwhphv7t2dhvdaq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XIEJS3ZH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajsp1lwhphv7t2dhvdaq.png" alt="Image of a queue" width="393" height="238"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Whenever an async function is called, it is sent to a browser API. These are APIs built into the browser. Based on the command received from the call stack, the API starts its own single-threaded operation.&lt;/p&gt;

&lt;p&gt;An example of this is the setTimeout method. When a setTimeout operation is processed in the stack, it is sent to the corresponding API which waits till the specified time to send this operation back in for processing.&lt;/p&gt;

&lt;p&gt;Where does it send the operation? The event queue. Hence, we have a cyclic system for running async operations in JavaScript. The language itself is single-threaded, but the browser APIs act as separate threads.&lt;/p&gt;

&lt;p&gt;The event loop facilitates this process; it constantly checks whether or not the call stack is empty. If it is empty, new functions are added from the event queue. If it is not, then the current function call is processed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UEhihIes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fuzsf8e6r06p3v1mmxtw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UEhihIes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fuzsf8e6r06p3v1mmxtw.png" alt="whole diagram of JavaScript environment " width="782" height="518"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading! My name is Surajit Shaw; I love to share my learning with others. You can follow me on &lt;a href="https://twitter.com/SURAJIT__SHAW"&gt;Twitter&lt;/a&gt; if you’d like to learn about web development and JavaScript.&lt;/p&gt;

&lt;p&gt;Here's a link where I explain how JavaScript work much briefly &lt;a href="https://twitter.com/SURAJIT__SHAW/status/1484022930833313792?s=20"&gt;Understanding of JavaScript Function Executions.&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
