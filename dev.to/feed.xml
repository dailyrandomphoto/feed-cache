<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>I got Linux Foundation Scholarship,2021  :)</title>
      <author>manish srivastava</author>
      <pubDate>Wed, 30 Jun 2021 19:04:58 +0000</pubDate>
      <link>https://dev.to/manishfoodtechs/i-got-2021-linux-foundation-scholarship-3lam</link>
      <guid>https://dev.to/manishfoodtechs/i-got-2021-linux-foundation-scholarship-3lam</guid>
      <description>&lt;p&gt;Hello  friends,&lt;/p&gt;

&lt;p&gt;I am delighted to inform all of my friends here that I was nominated and finally got selected for this year Linux Foundation Scholarship (under Cloud Category). They announced winners on 30 june 2021.&lt;/p&gt;

&lt;p&gt;I am happy because it is an accomplishment for me with no formal experience and professional degree in computer science. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background:
&lt;/h3&gt;

&lt;p&gt;I earned my Bachelor's Degree in Chemical Engineering 15 years ago and  MBA from a prestigious university counted as IIT.&lt;/p&gt;

&lt;p&gt;For Many years, I worked as a government banker, ministry nodal officer, etc to ensure rollouts of biometric and technology-based financial inclusion in four Indian states. It was a difficult job in 2010-2015, because we were living in the era of GPRS and 2G connectivity. Later,with launch of 3G things got streamed line. &lt;/p&gt;

&lt;p&gt;I quit my  job to pursue my passion. But by this point, I had a 15-year gap . I started brushing up my C language skills, but the  world has gotten much faster with new languages and js libraries.&lt;/p&gt;

&lt;p&gt;Its was a difficult period of my career transition from one area where 'you have experience of 13 years'  to another where 'you only have passion' and never ending path to learn for developing new  skill sets to acceptable levels.&lt;/p&gt;

&lt;p&gt;Well, at the age of 37+, I'm learning technologies to use in my business.&lt;/p&gt;

&lt;p&gt;After work, I spend most of my time reading posts on DEV.to. It's a fantastic community where we can read and be encouraged to write new articles on  variety of topics. &lt;br&gt;
You can find People here 'exploring and experimenting with technologies' in order to publish an article on dev.to.&lt;/p&gt;

&lt;p&gt;I always think you should have more faith in your weapon than you do in yourself. You can read few of my experiments in my profile.&lt;/p&gt;

&lt;p&gt;(1) I like my docker image with complete desktop. This was&lt;br&gt;
possible because of a custom ubuntu image. This image is pulled 50K+ times at docker hub. &lt;/p&gt;

&lt;p&gt;(2) Running  an IAAS (opennebula) inside container(LXC).&lt;/p&gt;

&lt;p&gt;(3)Cloud Brothers Story- Creating your own cloud like digital ocean.&lt;/p&gt;

&lt;p&gt;(4) Xp.css ( xtra power css) : A project to ensure always remain responsive irrespective of device size.&lt;/p&gt;

&lt;p&gt;(5) Xp.Backened ( Code Generator) : I created a code generator that takes care of security and generates codes for sql and nosql databases . Codes are generated for PHP, Python and C++. I use it as my tool . &lt;/p&gt;

&lt;p&gt;(6) I am also among people who are having OpenAI GPT-3 API access. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thankyou-devto-"&gt;
  &lt;/a&gt;
  Thankyou Dev.to ...
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#big-thankyou-to-my-followers"&gt;
  &lt;/a&gt;
  Big Thankyou to my followers....
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#thankyou-friends-here"&gt;
  &lt;/a&gt;
  Thankyou Friends here.....
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#my-staff-members-to-whom-i-am-confused-guy"&gt;
  &lt;/a&gt;
  My staff members to whom I am confused guy.....
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://forms.gle/pSCALuEWHus3pg9F6"&gt; Click here for joining my team &lt;/a&gt;.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>watercooler</category>
      <category>linux</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Demystifying DevRel with Nader Dabit, Christina Gorton &amp; Pachi Carlson</title>
      <author>Ben Halpern</author>
      <pubDate>Wed, 30 Jun 2021 18:47:44 +0000</pubDate>
      <link>https://dev.to/devteam/demystifying-devrel-with-nader-dabit-christina-gorton-pachi-carlson-28nh</link>
      <guid>https://dev.to/devteam/demystifying-devrel-with-nader-dabit-christina-gorton-pachi-carlson-28nh</guid>
      <description>&lt;p&gt;DevDiscuss is a bit of a "bad news, good news" situation this week. &lt;/p&gt;

&lt;p&gt;Let's start with the bad news first: it's the season 5 finale of the DevDiscuss podcast! 😭  &lt;/p&gt;

&lt;p&gt;Our eight episodes always seem to fly by but this season was a particular sort of whirlwind. &lt;em&gt;Thank you for joining us for analysis and discussion of the burning questions that impact all our lives as developers.&lt;/em&gt; We'll be back for season 6 soon!&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devdiscuss/s5-e8-diving-deep-into-devrel"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S5:E8 - Diving Deep Into DevRel&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devdiscuss"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevDiscuss  

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s5-e8-diving-deep-into-devrel" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s5-e8-diving-deep-into-devrel" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s5-e8-diving-deep-into-devrel" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s5-e8-diving-deep-into-devrel" alt="DevDiscuss" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtvK04RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j-SdIkjZ--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s5-e8-diving-deep-into-devrel"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devdiscuss/s5-e8-diving-deep-into-devrel"&gt;
      &lt;img id="episode-profile-image" alt="S5:E8 - Diving Deep Into DevRel" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTELFWpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--otY2jCJh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;Ok, now we can savor the good news: &lt;strong&gt;in the season 5 finale, we finally talked about a topic that I know many of you have been awaiting for a while: the field of Developer Relations.&lt;/strong&gt; If you often hear about "DevRel", "Dev Advocacy", "Dev Evangelism", and want to throw your hands up in confusion, this episode is for you. We're here to demystify this awesome career within software development — and have fun doing it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#another-piece-of-good-news-we-had-three-fantastic-guests-for-s5e8"&gt;
  &lt;/a&gt;
  Another piece of good news? We had THREE fantastic guests for S5E8...
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/coffeecraftcode"&gt;Christina Gorton&lt;/a&gt; is a Developer Relations Advocate at Forem, a LinkedIn Instructor, and a technical writer. Thanks for being my guest co-host this week, Christina!&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/dabit3"&gt;Nader Dabit&lt;/a&gt; is an author and Developer Relations Engineer at Edge &amp;amp; Node.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/pachicodes"&gt;Pachi Carlson&lt;/a&gt; is a Developer Relations Engineer at New Relic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enjoy our final episode of season 5. We'll be back soon with a whole new collection of episodes designed to inspire, motivate, and satisfy the curiosity of software developers everywhere 🌩 &lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devdiscuss"&gt;follow DevDiscuss&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; — or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  Quick Listening Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s5-e8-diving-deep-into-devrel/id1513053883?i=1000527323214"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/24zOgFzvK6KOqAPSBKmfRP"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5kZXZwb2RzLmRldi9kZXZkaXNjdXNzX3BvZGNhc3QueG1s/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZkaXNjdXNzLzQx?sa=X&amp;amp;ved=0CAQQkfYCahcKEwiQ4sfHgcDxAhUAAAAAHQAAAAAQCA"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devdiscuss/s5e8-diving-deep-into-devrel-Dn9fXUt7LsI/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevDiscuss-p1324596/?topicId=164121994"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://devpods.herokuapp.com/podcasts/devdiscuss/episodes/173"&gt;DEV Pods Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;Acknowledgements&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Our season five sponsors: &lt;a href="//cockroachlabs.com/devdiscuss"&gt;CockroachDB&lt;/a&gt;, &lt;a href="https://www.cloudways.com/en/?id=893892"&gt;Cloudways&lt;/a&gt;, &lt;a href="https://www.scoutapm.com/devdiscuss"&gt;Scout APM&lt;/a&gt; &amp;amp; &lt;a href="https://rudderstack.com/?utm_source=devto&amp;amp;utm_medium=podcast&amp;amp;utm_campaign=CMPGN_3_PS&amp;amp;utm_content=None&amp;amp;utm_term=%7Bkeyword%7D&amp;amp;raid=6dbc05eeb293b421f68d02ce12648240"&gt;Rudderstack&lt;/a&gt;!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Q9w66xTyEFicLrbAZr/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Q9w66xTyEFicLrbAZr/giphy.gif" alt="that's a wrap"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>podcast</category>
      <category>devrel</category>
    </item>
    <item>
      <title>Youtube Channel For Cracking Coding Interview</title>
      <author>C-mmon</author>
      <pubDate>Wed, 30 Jun 2021 18:36:32 +0000</pubDate>
      <link>https://dev.to/cmmon/youtube-channel-for-coding-interview-2o9p</link>
      <guid>https://dev.to/cmmon/youtube-channel-for-coding-interview-2o9p</guid>
      <description>&lt;p&gt;Following Video count includes for DSA Videos&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCxX9wt5FWQUAAz4UrysqK9A"&gt;&lt;strong&gt;CS Dojo&lt;/strong&gt;&lt;/a&gt; (Total: 31) (Inactive)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/Insidecode/featured"&gt;&lt;strong&gt;Inside Code&lt;/strong&gt; &lt;/a&gt;(Total Video: 36) (Ongoing)&lt;br&gt;
Great Explanation and Animation generated using manim engine, Same engine is used by 1blue3 brown.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCmJz2DV1a3yfgrR7GqRtUUA"&gt;&lt;strong&gt;BacktoBackSWE&lt;/strong&gt;&lt;/a&gt;(Total Video: 71) (Inactive)&lt;br&gt;
Again Quality video with great explanation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/IDeserve/videos"&gt;&lt;strong&gt;IDeserve&lt;/strong&gt;&lt;/a&gt;(Total Video:97) (Inactive)&lt;br&gt;
This channel is highly underrated.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/user/tusharroy2525/featured"&gt;&lt;strong&gt;Tushar Roy&lt;/strong&gt;&lt;/a&gt; (Total Videos: 103) (Inactive)&lt;br&gt;
Trust me, you got to study Dynamic Programming from this Guy&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/user/mycodeschool"&gt;&lt;strong&gt;Mycodeschool&lt;/strong&gt;&lt;/a&gt; all time best.(Total: 110) (Inactive)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UC5WO7o71wvxMxEtLRkPhiQQ"&gt;&lt;strong&gt;Aditya Verma&lt;/strong&gt;&lt;/a&gt; (Total Videos: 134) (Ongoing)&lt;br&gt;
4 Words to describe this guy.&lt;br&gt;
Think Twice, Code Once. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Abdul Bari&lt;/strong&gt; (Total: 163)&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=0IAPZzGSbME&amp;amp;list=PLAXnLdrLnQpRcveZTtD644gM9uzYqJCwr"&gt;DSA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/takeUforward/featured"&gt;&lt;strong&gt;Take u forward&lt;/strong&gt;&lt;/a&gt;(Ongoing) (Total: 169)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=z9bZufPHFLU&amp;amp;list=PLfqMhTWNBTe0b2nM6JHVCnAkhQRGiZMSJ"&gt;&lt;strong&gt;ApnaCollege&lt;/strong&gt;&lt;/a&gt;(Total Videos: 251) (Ongoing)&lt;br&gt;
Hats off to Aman Dhatterwal for producing this type of quality video and that too free.&lt;br&gt;
The animation in the video will really help you to visualize the problem.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/NickWhite/playlists"&gt;&lt;strong&gt;Nick White&lt;/strong&gt;&lt;/a&gt; (Ongoing) (Total Videos: 261)&lt;br&gt;
On a leetcode streak? So is this guy&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/TECHDOSE4u/videos"&gt;&lt;strong&gt;TechDose&lt;/strong&gt;&lt;/a&gt;  (Total Videos: 451) (Ongoing)&lt;br&gt;
Mad Respect. 451 videos??&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.toTotal%20Videos:%20627"&gt;&lt;strong&gt;Geeksforgeeks&lt;/strong&gt;&lt;/a&gt; (Ongoing)&lt;br&gt;
&lt;a href="https://www.youtube.com/c/GeeksforGeeksVideos/playlists?view=50&amp;amp;sort=dd&amp;amp;shelf_id=5"&gt;Data Structure&lt;/a&gt;(Total: 427)&lt;br&gt;
&lt;a href="https://www.youtube.com/c/GeeksforGeeksVideos/playlists?view=50&amp;amp;sort=dd&amp;amp;shelf_id=6"&gt;Programming Question&lt;/a&gt;&lt;br&gt;
(200 videos)&lt;/p&gt;

&lt;p&gt;To sum up, The above channel account for 2129 videos. &lt;br&gt;
Start Now, you will definitely land that job.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>career</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Welcome Thread - v131</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 30 Jun 2021 18:34:53 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v131-68n</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v131-68n</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/TObsuiUoDsYmI/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/TObsuiUoDsYmI/giphy.gif" alt="crocodile saying hello"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. 👋 &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>Why is using javascript “for loop” for array iteration a bad idea?
</title>
      <author>Prosen Ghosh</author>
      <pubDate>Wed, 30 Jun 2021 17:58:09 +0000</pubDate>
      <link>https://dev.to/_prosen/why-is-using-javascript-for-loop-for-array-iteration-a-bad-idea-48l4</link>
      <guid>https://dev.to/_prosen/why-is-using-javascript-for-loop-for-array-iteration-a-bad-idea-48l4</guid>
      <description>&lt;p&gt;Sometimes using loop for array iteration can be bad. Let's see how?&lt;/p&gt;

&lt;p&gt;Let's create a &lt;code&gt;10&lt;/code&gt; empty slot array using Array constructor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//[empty × 10]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's iterate over the array element using for loop. This loop will log &lt;code&gt;Hi&lt;/code&gt; 10 times to the console, which we do not want to do.&lt;/p&gt;

&lt;p&gt;But our for loop iterates over the empty slot, that is bad for our software performance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//[empty × 10]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see another example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet index &lt;code&gt;4&lt;/code&gt; of the array is an empty slot, but the &lt;code&gt;console.log&lt;/code&gt; will execute 5 times.&lt;/p&gt;

&lt;p&gt;Now let's try using one of the array methods. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;forEach()&lt;/code&gt; method invoked the passed  callback function for each element.&lt;/p&gt;

&lt;p&gt;But in this case our array slot is empty and our &lt;code&gt;forEach()&lt;/code&gt; method is not going to invoke the &lt;code&gt;log&lt;/code&gt; function for the empty slot.&lt;/p&gt;

&lt;p&gt;So, the below code will print nothing to the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// NOT GOING TO INVOKE THE LOG FUNCTION&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we try our second &lt;code&gt;for...loop&lt;/code&gt; example using &lt;code&gt;forEach()&lt;/code&gt; method it will execute 4 times. The passed callback function not going to invoke for empty slot.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also you can try &lt;code&gt;.map()&lt;/code&gt; method insted of &lt;code&gt;for..loop&lt;/code&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What is Your Story?</title>
      <author>Firangiz Ganbarli</author>
      <pubDate>Wed, 30 Jun 2021 17:53:45 +0000</pubDate>
      <link>https://dev.to/firangizg/what-is-your-story-2pjc</link>
      <guid>https://dev.to/firangizg/what-is-your-story-2pjc</guid>
      <description>&lt;p&gt;Everyone has their life story, what makes them unique. Recently, I read the book &lt;a href="https://www.amazon.com/Million-Miles-Thousand-Years-Learned/dp/1400202981"&gt;A Million Miles in a Thousand Years&lt;/a&gt; by Donald Miller . It is one of my favorite books I have read so far. It talks about the lessons the author learned about life and stories while him and filmmakers were preparing to make a movie about his life.  &lt;/p&gt;

&lt;p&gt;I do think I am too young to have a nice story of my own (or maybe that is just an excuse) but I have thought about how to craft my own story. One of the things that was stressed in the book was how most of us are sitting around and expecting life to happen to us. &lt;/p&gt;

&lt;p&gt;For your life to have a good story (a story people would watch or read about), you should have a really big challenge that makes the people doubt whether you can make it. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It wasn’t necessary to win for the story to be great, it was only necessary to sacrifice everything.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;So, what have you sacrificed, what challenges have you taken for your story to be better?&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>watercooler</category>
      <category>career</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Challenge to Write Git Tutorial </title>
      <author>Brad</author>
      <pubDate>Wed, 30 Jun 2021 17:50:48 +0000</pubDate>
      <link>https://dev.to/thebtm/write-git-tutorial-challenge-3a9</link>
      <guid>https://dev.to/thebtm/write-git-tutorial-challenge-3a9</guid>
      <description>&lt;p&gt;A few years ago for an interview, I was asked to write a git tutorial for beginners. Even thought there was many existing tutorials out there, I thought it was a good challenge to make sure I truly understood git and the uses for it. (Note: I'm an avid GitLab user and I may have referenced that a few times in my completed challenge below.) &lt;/p&gt;

&lt;p&gt;I recommend anybody who has been using git for a long time to try writing your own tutorial and see if you know the basics really well.&lt;/p&gt;

&lt;p&gt;Maybe a well written tutorial can teach those who can't code to use git. I firmly believe git can exist in a world beyond developers in other documentation like resume tracking, business documents for small businesses, school work and notes from non programming classes, and others I can't think of at this time. All we need to do is teach the masses of this fantastic tool.&lt;/p&gt;

&lt;p&gt;Here is the tutorial I wrote a few years ago:&lt;/p&gt;

&lt;blockquote&gt;
&lt;h2&gt;
  &lt;a href="#git-tutorial-for-beginners"&gt;
  &lt;/a&gt;
  Git Tutorial for Beginners
&lt;/h2&gt;

&lt;p&gt;For this well known site, I may be a newcomer for posting a tutorial on it. I would like to share I have been using git since 2016 and fell in love with using the tool on the first day I started to learn about it. I am always looking to learn more about git and increase my knowledge and love for the tool. I would like to tell you that we were all beginners and started learning the basics with using git. I will cover those basics, as it's always good practice for even the most experienced people to remember them. &lt;/p&gt;

&lt;p&gt;So you have a project cloned, or a project from something you started with trying to learn to use git with. Well, we are here to learn how take advantage of the &lt;code&gt;git branch &amp;lt;new-branch&amp;gt;&lt;/code&gt; command or, as my preference is, &lt;code&gt;git checkout -b &amp;lt;new-branch&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Why would you want to to create a new branch you ask? Well, it's for many reasons: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One could be that you don't want to cause any errors on the working production branch, known as master. &lt;/li&gt;
&lt;li&gt;Another is looking to just experiment with how things are going in a development environment. &lt;/li&gt;
&lt;li&gt;A non-coding example that I could share is that I use git to track my resume versions, and I use branches to play with the layout of my resume without risking losing my current resume.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many reasons why you would want to create a branch, but all the reasons always comes back to wanting to protect the master branch. Whether it's source code, your resume, or other files and folders you want to use with a version control system. &lt;/p&gt;

&lt;p&gt;There are 2 ways you can go about creating a new branch in the project you have open. One way is to call on &lt;code&gt;git branch &amp;lt;new-branch&amp;gt;&lt;/code&gt; then to &lt;code&gt;git checkout &amp;lt;new-branch&amp;gt;&lt;/code&gt;. This is the 2 command step and with &lt;code&gt;git branch&lt;/code&gt; you are able to view, create, modify and delete branches as required. &lt;code&gt;git branch&lt;/code&gt; will also tell you what branch you're on with a &lt;code&gt;*&lt;/code&gt; beside the branch name. This is important to confirm that you are on the right branch. Another extension of &lt;code&gt;git branch&lt;/code&gt; is &lt;code&gt;git branch -r&lt;/code&gt; which will show remote branches and &lt;code&gt;git branch -a&lt;/code&gt; which will show all of your branches and all of the remote branches and have the &lt;code&gt;*&lt;/code&gt; for the branch that you're on.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A tidbit for you is something I like to do if you're willing to experiment more with git: I set &lt;code&gt;git branch -a&lt;/code&gt; to &lt;code&gt;git branches&lt;/code&gt; using the &lt;code&gt;.gitconfig&lt;/code&gt; file on your home directory. This may be a bit advanced for this tutorial but I wanted to show that the option is there. Something we can visit down the road, or you could &lt;a href="https://about.gitlab.com/blog/2016/12/08/git-tips-and-tricks/#aliases"&gt;read this other blog post&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The more condensed way of completing the creation of a new branch is to use &lt;code&gt;git checkout -b &amp;lt;new-branch&amp;gt;&lt;/code&gt;. This tells git to create the new branch from where you are and check it out immediately. You will find that doing this is simpler than doing the 2 step method shown above but it's important to remember what exactly is being completed by using this one command to essentially run 2 commands. I also have to point out to you, that even after many years of dealing with git and using this command countless times, I still have to reference the manual page as I had forgotten the details over the years for &lt;code&gt;git checkout -b&lt;/code&gt; and had to &lt;a href="https://git-scm.com/docs/git-checkout"&gt;reference it&lt;/a&gt; again.&lt;/p&gt;

&lt;p&gt;Once you have created the branch and confirmed you are on that branch, you are good to make the change you are looking to complete. As you complete &lt;code&gt;git add&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt;, you know you are applying those changes to the branch you created. Having the changes saved in its own branch is nice; say if you're working on a multi-day code update to the project, and you're looking to make sure your code is saved, you are going to add and commit multiple times through that period to save your code. &lt;/p&gt;

&lt;p&gt;For those wondering, &lt;code&gt;git add&lt;/code&gt; moves a copy of the code into your staging area before committing it using &lt;code&gt;git commit&lt;/code&gt;. I know there is the command &lt;code&gt;git commit -a&lt;/code&gt; which will just commit all of your changes immediately, although I do have to give you a warning that this could have detrimental effects on your code commits and it's better to take the time to add files accordingly before committing.&lt;/p&gt;

&lt;p&gt;Now that you have completed your change and ensured that everything is working as expected, you're going to want to merge into the master branch. The way this is completed is with &lt;code&gt;git merge&lt;/code&gt;, but before you run that command you are going to want to make sure you check out the master branch with &lt;code&gt;git checkout master&lt;/code&gt; and then run &lt;code&gt;git merge &amp;lt;branch&amp;gt;&lt;/code&gt; as created above. As long as there has been no other branches merged in and changes done to the master branch, it should merge without any issues. However, if you come across a merge issue, you will have to run &lt;code&gt;git status&lt;/code&gt; and fix each of the files listed as merge conflict(s). Once all the conflicts have been fixed, you are going to want to run &lt;code&gt;git add&lt;/code&gt; for each of the corrected files, then &lt;code&gt;git merge --continue&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Finally, after you have completed all the work you needed to do, and you no longer require the branch, you will want to perform some clean up on that branch. So, to complete this, you run &lt;code&gt;git branch -d &amp;lt;branch&amp;gt;&lt;/code&gt; to remove this branch. It's always good to keep your branches clean from extra entries so you're not buried in a list of branches. &lt;/p&gt;

&lt;p&gt;Additional notes for those new to this: I'm a firm believer in that you don't need to remember everything right off the get go with using git, but taking the time to remember where to look when you're stuck is important. So to help you out, I am going to share the links to every manual or man page for the git commands shown in this tutorial. Also, check out the git &lt;a href="https://git-scm.com/book/en/v2"&gt;pro git book&lt;/a&gt; as it's free for everyone. I have read it and I find that I myself keep going back to it to look something up. &lt;/p&gt;

&lt;p&gt;Manaul pages:&lt;br&gt;
&lt;a href="https://git-scm.com/docs/git-add"&gt;git add&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://git-scm.com/docs/git-branch"&gt;git branch&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://git-scm.com/docs/git-checkout"&gt;git checkout&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://git-scm.com/docs/git-commit"&gt;git commit&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://git-scm.com/docs/git-merge"&gt;git merge&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A working example of the command in sequence&lt;/p&gt;



&lt;pre class="highlight plaintext"&gt;&lt;code&gt;`git checkout -b feature-branch`
`git add feature.txt`
`git status`
`git commit -m "awesome feature"`
`git checkout master`
`git status`
`git merge feature-branch`
`git status`
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;In summary, I hope you have learned something useful about utilizing git and if you have any questions, please ask in the comments section below. I or someone else will be able to assist when they see your question. &lt;/p&gt;


&lt;/blockquote&gt;

</description>
      <category>git</category>
      <category>tutorial</category>
      <category>challenge</category>
    </item>
    <item>
      <title>Server-side rendering(SSR) with React[Part-1]</title>
      <author>Tarun Singh</author>
      <pubDate>Wed, 30 Jun 2021 17:44:42 +0000</pubDate>
      <link>https://dev.to/tarunsingh56/server-side-rendering-ssr-with-react-part-1-160h</link>
      <guid>https://dev.to/tarunsingh56/server-side-rendering-ssr-with-react-part-1-160h</guid>
      <description>&lt;h3&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Client-side-rendering&lt;/li&gt;
&lt;li&gt;Drawbacks&lt;/li&gt;
&lt;li&gt;Server-side rendering&lt;/li&gt;
&lt;li&gt;Drawbacks&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This article is not for beginners, I'll assume that you save some experience working with React.&lt;br&gt;
The article consists of two parts, this is Part-1 of the article. The first part covers the fundamentals that are required to actually know how SSR  with react works. We'll then move on to Part-2 where I'll explain SSR with react and also the implementation about how can we enable SSR in React and give our app a performance boost.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Article mirrors&lt;/strong&gt; &lt;br&gt;&lt;br&gt;
Read in your preferred platform:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tarunsingh.hashnode.dev/server-side-renderingssr-with-reactpart-1"&gt;hashnode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We know how React renders our app on the client-side. We can as well render our React app at the server-side and leverage the advantages that SSR offers us. But before going any further let's have a look at what we mean by client-side and server-side rendering.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-clientside-rendering"&gt;
  &lt;/a&gt;
  What is Client-side rendering?
&lt;/h1&gt;

&lt;p&gt;When developers talk about client-side rendering they're talking about JavaScript rendering the content of our webpage in the browser.&lt;/p&gt;

&lt;p&gt;If you have some experience with building react applications, by now you would be familiar with &lt;code&gt;&amp;lt;div id=" root "&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;, that is where our application content renders. The JavaScript file is responsible for dynamically rendering the content of our website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drawbacks"&gt;
  &lt;/a&gt;
  Drawbacks
&lt;/h2&gt;

&lt;p&gt;When we visit a website that is client-side rendered, with the HTTP request the javascript file is downloaded, and till the time the javascript file downloads we have nothing to render on our screen, we'll be seeing a blank page.&lt;br&gt;
Now,  as soon as the download completes HTML markup is loaded, and finally, we see our app rendered.&lt;br&gt;
&lt;strong&gt;Initial load time&lt;/strong&gt; is increased if the size of the js file is heavy. That means the user needs to wait for some time before our app is loaded and we don't want our user to keep hanging till the app loads.&lt;/p&gt;

&lt;p&gt;Also, if we're concerned about &lt;strong&gt;SEO&lt;/strong&gt; we should not be rendering our app client-side.&lt;br&gt;
Web Crawlers are unable to index our site since they'll be seeing a blank page while our javascript file still loads. Therefore, client-side rendering impacts our website ranking.&lt;/p&gt;

&lt;p&gt;Is there a better way to render our app? Yes!  &lt;strong&gt;Server-side rendering to our rescue&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-serverside-rendering"&gt;
  &lt;/a&gt;
  What is Server-side rendering?
&lt;/h1&gt;

&lt;p&gt;In Server-side rendering(or SSR) we load our HTML pages onto the server instead of rendering them in the browser. &lt;br&gt;
When we visit a website, we make an HTTP request to our server, the server sends back a fully rendered HTML page as a response that almost instantly gets rendered(also depends on the user's internet speed, location of the server, and on a multitude of factors).&lt;/p&gt;

&lt;p&gt;This solves our issue related to &lt;strong&gt;initial load time&lt;/strong&gt;.  Also, Web Crawler now sees a rendered page and can index our app thereby ensuring &lt;strong&gt;SEO&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;However, now let's look at another side of the SSR.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drawbacks"&gt;
  &lt;/a&gt;
  Drawbacks
&lt;/h2&gt;

&lt;p&gt;Though it solves the problem that we faced with client-side rendering it has its downside.&lt;/p&gt;

&lt;p&gt;Suppose we visit a website that is server-side rendered. Our app loads fully rendered content returned by the server almost instantly as discussed. However, if we navigate to another page of our app, we make another request to our server returning us the corresponding webpage, and then the content is rendered from the ground up.&lt;/p&gt;

&lt;p&gt;As we see that even for a small change that needs to be rendered while we navigate to another page the content is fetched and &lt;strong&gt;rendered from the ground up&lt;/strong&gt;. That means with every request the entire new page would be rendered, and not just the new content. &lt;br&gt;
Therefore, we make &lt;strong&gt;frequent requests&lt;/strong&gt; to the server, which is bad.&lt;/p&gt;

&lt;p&gt;So, can we solve this issue of making frequent requests and avoid full page reloads? Yes!  &lt;strong&gt;SSR with React&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this article, we saw two different ways of rendering our content i.e client-side and SSR. We also saw what are the drawbacks of both and how they solve them. &lt;br&gt;&lt;br&gt;
&lt;strong&gt;In PART-2 of this article, I'll cover SSR with React and how we can enable SSR in React.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I hope you liked the content, Part-2 is coming soon. Stay Tuned! 🔥 &lt;br&gt;&lt;br&gt;
 If you have any suggestions or questions or found this article helpful, please let me know in the comments.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/thesavvycoder"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>performance</category>
    </item>
    <item>
      <title>Build Big Companies UI by Using HTML, CSS.</title>
      <author>Hiep Le</author>
      <pubDate>Wed, 30 Jun 2021 17:39:33 +0000</pubDate>
      <link>https://dev.to/hieptl/build-big-companies-ui-by-using-html-css-25nb</link>
      <guid>https://dev.to/hieptl/build-big-companies-ui-by-using-html-css-25nb</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Please give me Github ⭐ if you like the project. Pull Requests are highly appreciated ❤️&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I'm Hiep. I work as a full-time software engineer. Most of my open-source projects are focused on one thing - to help people learn 📚. &lt;/p&gt;

&lt;p&gt;I am new to CSS. The repository contains HTML, CSS of Big Companies - UI. I hope that my repository could useful for you.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Responsiveness would be develop in the next version. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI of other companies would be developed in the next version.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you feel the repository is useful, please help me share the post and give me a Github ⭐. It will make me feel motivation to work even harder. I will try to make many open sources and share to the community.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-netflix"&gt;
  &lt;/a&gt;
  1. Netflix
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tFEv3vX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgzj0g6ms1ej90ye0xvk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tFEv3vX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgzj0g6ms1ej90ye0xvk.png" alt="netflix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Github Link: &lt;a href="https://github.com/hieptl/big-companies-html-css/tree/main/netflix-html-css"&gt;https://github.com/hieptl/big-companies-html-css/tree/main/netflix-html-css&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I also have a post about learn React by building Netflix: &lt;a href="https://dev.to/hieptl/learn-react-by-building-netflix-1127"&gt;https://dev.to/hieptl/learn-react-by-building-netflix-1127&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-devto"&gt;
  &lt;/a&gt;
  2. Dev.to
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uP-A6g5N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ljv0vxoxsoewk1090v8m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uP-A6g5N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ljv0vxoxsoewk1090v8m.png" alt="devto"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Github Link: &lt;a href="https://github.com/hieptl/big-companies-html-css/tree/main/devto-html-css"&gt;https://github.com/hieptl/big-companies-html-css/tree/main/devto-html-css&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I also have a post about learn Next.js and Tailwind CSS by building Dev.to: &lt;a href="https://dev.to/hieptl/learn-next-js-by-building-dev-to-57p0"&gt;https://dev.to/hieptl/learn-next-js-by-building-dev-to-57p0&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-youtube"&gt;
  &lt;/a&gt;
  3. Youtube.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tGrHHb_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5msfnj6wc7qlzep3ota.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tGrHHb_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5msfnj6wc7qlzep3ota.png" alt="youtube"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Github Link: &lt;a href="https://github.com/hieptl/big-companies-html-css/tree/main/youtube-html-css"&gt;https://github.com/hieptl/big-companies-html-css/tree/main/youtube-html-css&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I also have a post about learn React, Redux and Tailwind CSS by building Youtube: &lt;a href="https://dev.to/hieptl/learn-react-redux-and-tailwind-css-by-building-youtube-29ea"&gt;https://dev.to/hieptl/learn-react-redux-and-tailwind-css-by-building-youtube-29ea&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-tiktok"&gt;
  &lt;/a&gt;
  4. Tiktok
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fQYaRxi9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8f8g3npn56xq3ajnbh4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fQYaRxi9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8f8g3npn56xq3ajnbh4k.png" alt="tiktok"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Github Link: &lt;a href="https://github.com/hieptl/big-companies-html-css/tree/main/tiktok-html-css"&gt;https://github.com/hieptl/big-companies-html-css/tree/main/tiktok-html-css&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks and Best Regards,&lt;br&gt;
Hiep&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>showdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Why does React State Need a New Object/Array?</title>
      <author>saransh kataria</author>
      <pubDate>Wed, 30 Jun 2021 17:39:29 +0000</pubDate>
      <link>https://dev.to/saranshk/why-does-react-state-need-a-new-object-array-4pgk</link>
      <guid>https://dev.to/saranshk/why-does-react-state-need-a-new-object-array-4pgk</guid>
      <description>&lt;p&gt;If you have been using React for a while, you are familiar with how state update works. There are a lot of internal optimizations that React makes for faster rendering. And one of the implementation details of the React internals is that it does a check of whether the given state object has actually changed or not. But the behavior of assigning a new object/array trips up newcomers. Let us understand why does React need a new copy of an object/array when assigning the state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#objectis-in-javascript"&gt;
  &lt;/a&gt;
  Object.is() in JavaScript
&lt;/h2&gt;

&lt;p&gt;Object.is() is a comparison operator in JavaScript. It is attached to Object.prototype and can be used to compare JavaScript values, both object as well as primitive values.&lt;/p&gt;

&lt;p&gt;For an object:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const author1 = {name: "Saransh Kataria"};
const author2 = {name: "Saransh Kataria"};
Object.is(author1, author2); // false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Since objects are stored by reference, the comparison returns false.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-is-this-relevant-with-respect-to-react"&gt;
  &lt;/a&gt;
  How is this relevant with respect to React?
&lt;/h2&gt;

&lt;p&gt;React uses Object.is() for comparison of previous and next state to determine whether or not to update the DOM or not. The relevant part for that case is:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const author1 = {name: "Saransh Kataria"};
author1.name = "Wisdom Geek";
Object.is(author1, author1); // true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Since we are mutating the same object and it’s properties, the comparison will always return true.&lt;/p&gt;

&lt;p&gt;Therefore, when we do:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [author, setAuthor] = useState({name:"Saransh Kataria")};

const updateName = () =&amp;gt; {
  author.name = "Wisdom Geek";
  setAuthor(author)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In the update name function, we are updating the author object. And send the updated object to setAuthor. This will not update the UI even though we have updated the author object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-the-user-interface-not-updated"&gt;
  &lt;/a&gt;
  Why is the User Interface not updated?
&lt;/h2&gt;

&lt;p&gt;As we saw previously, changing a property on an object does not change the reference of that object. And React uses Object.is() under the hood to determine if the state was updated or not when we invoke the setter function.&lt;/p&gt;

&lt;p&gt;Since the object reference did not change, Object.is() returns false even though we did update some property on it. Therefore React does not feel the need to update the UI, because nothing has changed according to it.&lt;/p&gt;

&lt;p&gt;For getting it to work correctly, we need to pass in a new reference to the useState function. And for doing that, we need to create a new object. And once we do that, Object.is() will return true because the references will not be the same and we will trigger a re-render.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const updateName = () =&amp;gt; {
  setAuthor(prevState =&amp;gt; {...prevState, name: "Wisdom Geek"});
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This uses the spread syntax and the callback function to update the state. And we return a new object which does not have any properties that are directly referenced from the initial object. And we also update the property that we wanted to update.&lt;/p&gt;

&lt;p&gt;The same logic applies to arrays as well since they are reference types as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Hope that that explanation demystifies React internals a bit and gives a better idea about the implementation detail of state management in React. If you have any questions, feel free to drop a comment below!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://www.wisdomgeek.com/development/web-development/react/why-does-react-state-need-new-object-array/"&gt;https://www.wisdomgeek.com&lt;/a&gt; on May 25, 2021.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>React form validation with React Hook Form and Yup</title>
      <author>Francisco Mendes</author>
      <pubDate>Wed, 30 Jun 2021 17:33:44 +0000</pubDate>
      <link>https://dev.to/franciscomendes10866/react-form-validation-with-react-hook-form-and-yup-4a98</link>
      <guid>https://dev.to/franciscomendes10866/react-form-validation-with-react-hook-form-and-yup-4a98</guid>
      <description>&lt;p&gt;Validating user input on forms prior to submission, in my opinion, is one of the most important and fundamental things about a website these days.&lt;/p&gt;

&lt;p&gt;Thank god we have several options to validate them, in the React ecosystem there are lots of libraries. However many of these libraries either end up having a huge boilerplate, which is sometimes scary, even when implementing in a form with few fields. Or they decrease application performance.&lt;/p&gt;

&lt;p&gt;Keeping these points in mind, I always end up looking for a solution that is simple, with little boilerplate and that has a great performance.&lt;/p&gt;

&lt;p&gt;Apart from that, another thing I'm looking for is a form validation library that lets you use a library to validate schemas, such as Joi, Yup, etc. This way I can reuse the schema code in the frontend and backend.&lt;/p&gt;

&lt;p&gt;It's exactly for all these reasons that I love working with React Hook Form.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let's code
&lt;/h1&gt;

&lt;p&gt;First we will add the following dependencies to our React application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install react-hook-form @hookform/resolvers yup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's pretend this is your form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Lets&lt;/span&gt; &lt;span class="nx"&gt;sign&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
        &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;required&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Sign&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's import &lt;code&gt;React Hook Form&lt;/code&gt; into our project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-hook-form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Hidden for simplicity&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then let's get the following things from the &lt;code&gt;useForm()&lt;/code&gt; hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;formState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// Hidden for simplicity&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#quick-overview"&gt;
  &lt;/a&gt;
  Quick overview
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;register()&lt;/code&gt; method allows registering an element and applying the appropriate validation rules.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;handleSubmit()&lt;/code&gt; function will receive the form data if validation is successful.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;reset()&lt;/code&gt; function will clear all form fields or reset to initial values.&lt;/li&gt;
&lt;li&gt;In this case, we are using &lt;code&gt;formState&lt;/code&gt; to return form errors in an easier way.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we have to import Yup into our project and then let's create our schema.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Hidden for simplicity&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yup&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have to import &lt;code&gt;@hookform/resolvers&lt;/code&gt; so we can use our Yup schema to validate input values. Like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;yupResolver&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@hookform/resolvers/yup&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Hidden for simplicity&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;formState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;resolver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yupResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// Hidden for simplicity&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have to create our function to submit the data (which in this example will be a simple log). Just like we're going to add the &lt;code&gt;reset()&lt;/code&gt; method inside our function so that form inputs are cleared as soon as they're submitted.&lt;/p&gt;

&lt;p&gt;Lastly let's add the &lt;code&gt;handleSubmit()&lt;/code&gt; method to our form. Similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;formState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;resolver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yupResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmitHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSubmitHandler&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="c1"&gt;// Hidden for simplicity&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to register our inputs, assigning their names according to the properties of our schema:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Hidden for simplicity&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSubmitHandler&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Lets&lt;/span&gt; &lt;span class="nx"&gt;sign&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
        &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;required&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Sign&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Last but not least, let's add the error messages for each of the inputs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Hidden for simplicity&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSubmitHandler&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Lets&lt;/span&gt; &lt;span class="nx"&gt;sign&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
        &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;required&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Sign&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now with everything finished, the code should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-hook-form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;yupResolver&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@hookform/resolvers/yup&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yup&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;formState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;resolver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yupResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmitHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSubmitHandler&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Lets&lt;/span&gt; &lt;span class="nx"&gt;sign&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
        &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;required&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Sign&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order for you to have an idea of the final result, you should have something similar to what you see in the gif:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DRhS5qe7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dj5iihhqv/image/upload/v1624804450/Kapture_2021-06-27_at_15.31.42-min_m2cd7q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DRhS5qe7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dj5iihhqv/image/upload/v1624804450/Kapture_2021-06-27_at_15.31.42-min_m2cd7q.gif" alt="result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-about-you"&gt;
  &lt;/a&gt;
  What about you
&lt;/h1&gt;

&lt;p&gt;What library do you use to validate your forms in React?&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Free design resources for Web Developers...</title>
      <author>Deepayan Mukherjee</author>
      <pubDate>Wed, 30 Jun 2021 17:30:42 +0000</pubDate>
      <link>https://dev.to/ciggzy1312/free-design-resources-for-web-developers-1b9k</link>
      <guid>https://dev.to/ciggzy1312/free-design-resources-for-web-developers-1b9k</guid>
      <description>&lt;h1&gt;
  &lt;a href="#pexels"&gt;
  &lt;/a&gt;
  Pexels
&lt;/h1&gt;

&lt;p&gt;The best free stock photos &amp;amp; videos shared by talented creators&lt;br&gt;
Website : &lt;a href="https://www.pexels.com/"&gt;https://www.pexels.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#landing-stock"&gt;
  &lt;/a&gt;
  Landing Stock
&lt;/h1&gt;

&lt;p&gt;Landing Stock is a niche site providing free stock photos that are suitable for your website landing page. Created by London-based product designer Craig Barber, it features only high-quality, clean, and minimalistic photos&lt;br&gt;
Website : &lt;a href="https://www.landingstock.com/"&gt;https://www.landingstock.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#stocksnap"&gt;
  &lt;/a&gt;
  StockSnap
&lt;/h1&gt;

&lt;p&gt;With a large selection of free high-definition stock photos, StockSnap offers a valuable resource to web designers, bloggers, and content curators&lt;br&gt;
Website : &lt;a href="https://stocksnap.io/"&gt;https://stocksnap.io/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#photo-creator"&gt;
  &lt;/a&gt;
  Photo Creator
&lt;/h1&gt;

&lt;p&gt;CREATE YOUR REALISTIC PHOTOS IN MINUTES. Choose from thousands of models, objects, and backgrounds to perfectly tell any story&lt;br&gt;
Website : &lt;a href="https://icons8.com/mega-creator"&gt;https://icons8.com/mega-creator&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#drawkit"&gt;
  &lt;/a&gt;
  Drawkit
&lt;/h1&gt;

&lt;p&gt;DrawKit is a collection of free, beautiful, customizable MIT licensed SVG illustrations in two styles, to use on your next website, app, or project&lt;br&gt;
Website : &lt;a href="https://www.drawkit.io/"&gt;https://www.drawkit.io/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ionicons"&gt;
  &lt;/a&gt;
  Ionicons
&lt;/h1&gt;

&lt;p&gt;Ionicons are premium icons for use by designers in web, iOS, Android, and desktop apps. Built by the Ionic Framework team, they're all free and open source&lt;br&gt;
Website : &lt;a href="https://ionic.io/ionicons"&gt;https://ionic.io/ionicons&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pixlr"&gt;
  &lt;/a&gt;
  Pixlr
&lt;/h1&gt;

&lt;p&gt;The Pixlr Editor is similar to Photoshop, Pixlr Express is perfect for quick fixes, and Pixler O-Matic features easy-to-use pre-made filters that can be applied to photos&lt;br&gt;
Website : &lt;a href="https://pixlr.com/"&gt;https://pixlr.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#coolors"&gt;
  &lt;/a&gt;
  Coolors
&lt;/h1&gt;

&lt;p&gt;The super fast color schemes generator!&lt;br&gt;
Create the perfect palette or get inspired by thousands of beautiful color schemes&lt;br&gt;
Website : &lt;a href="https://coolors.co/"&gt;https://coolors.co/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dribbble"&gt;
  &lt;/a&gt;
  Dribbble
&lt;/h1&gt;

&lt;p&gt;Discover the world’s top designers &amp;amp; creatives&lt;br&gt;
Dribbble is the leading destination to find &amp;amp; showcase creative work and home to the world's best design professionals&lt;br&gt;
Website : &lt;a href="https://dribbble.com/"&gt;https://dribbble.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#type-genius"&gt;
  &lt;/a&gt;
  Type Genius
&lt;/h1&gt;

&lt;p&gt;The site makes it simple to find the perfect font combination, offering multiple suggested pairings for any typeface selected. It also provides real-world examples of combos used on other websites&lt;br&gt;
Website : &lt;a href="https://webdesignledger.com/type-genius-webapp/"&gt;https://webdesignledger.com/type-genius-webapp/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
