<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>🚀 Demystifying Async/Await as Generators + Promises</title>
      <author>Sagar Routh</author>
      <pubDate>Sun, 07 Feb 2021 00:00:45 +0000</pubDate>
      <link>https://dev.to/sagarrth/demystifying-async-await-as-generators-promises-91i</link>
      <guid>https://dev.to/sagarrth/demystifying-async-await-as-generators-promises-91i</guid>
      <description>&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Async/Await solves the problem of Inversion of Control with callbacks.&lt;/li&gt;
&lt;li&gt;Generators build-up to Async/Await&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Contents&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#async-await"&gt;Async/Await&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#generators"&gt;Generators&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="#async-generators"&gt;Async/Await through generators&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;







&lt;h3&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;JavaScript being single-threaded, cannot be blocked for long-running or time-taking tasks.&lt;br&gt;
Callbacks are the answer to execute such tasks without blocking the main thread. However, they cause &lt;strong&gt;Inversion of Control&lt;/strong&gt;. &lt;em&gt;The invocation of callbacks is passed to a function over which you do not have control&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Async/Await solves that problem. In this article, we would compare the same example and break down the similar working of the async/await function with the help of generators.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#asyncawait" class="anchor"&gt;
  &lt;/a&gt;
  Async/Await &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Async functions help us write asynchronous code (Promises) in a more synchronous manner.&lt;/p&gt;

&lt;p&gt;Things to note about async functions - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Async functions always return a Promise, returned values are enclosed in a promise if they are not thenables.&lt;/li&gt;
&lt;li&gt;Await keyword can only be used within an async function, it is used to await the value of a promise.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RPUqwLBq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1fs0iv0xs534yb3ijn77.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RPUqwLBq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1fs0iv0xs534yb3ijn77.png" alt="async await example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above snippet, the invocation of the async function returns us the data, without having to do a .then over the two promises returned from the fetch API and its parsing process.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#generators" class="anchor"&gt;
  &lt;/a&gt;
  Generators &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Generators are functions that do not run to completion. They can be paused and resumed. Until the function is completed, Its context is preserved. It returns a generator object which implements the iterable protocol. This helps us write asynchronous code in a somewhat synchronous manner.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pxjUu_pz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m9msjztir2rmmqt3l70a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pxjUu_pz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m9msjztir2rmmqt3l70a.png" alt="generator example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The generator object is compatible with the Iterable protocol, thus a .next() can be invoked to get subsequent values i.e. control goes back within the generator function.&lt;/li&gt;
&lt;li&gt;Values are exchanged between the generator function and outer code via next/yield. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yr47_lza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eoo7u60zohpsgw2s3yum.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yr47_lza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eoo7u60zohpsgw2s3yum.png" alt="Iterator interface"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#asyncawait-through-generators" class="anchor"&gt;
  &lt;/a&gt;
  Async/Await through generators &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Understanding the generators is essential for the last part of the article. It is where Promises and Generators will be composed to create our own async/await implementation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/VFHWGT96hbfsjDJ57S/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/VFHWGT96hbfsjDJ57S/giphy.gif" alt="almost there"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above code snippet is analogous to the async/await code snippet at the top. Here is the breakdown of the steps -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A generator function is required for it, yield is analogous to the await keyword.&lt;/li&gt;
&lt;li&gt;The asyncify function returns a Promise, which embodies the await logic.&lt;/li&gt;
&lt;li&gt;The manual invocation of the iterator.next() method which was seen in the generator's example is done within the promise body.&lt;/li&gt;
&lt;li&gt;The logic would be recursively invoked until the IteratorResult has 'done' as true &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9DCpKcZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ns1r22fjpc1yn2hmixar.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9DCpKcZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ns1r22fjpc1yn2hmixar.png" alt="asyncify"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ultimately, the &lt;code&gt;asyncified&lt;/code&gt; function would be consumed in a similar manner as an async function is. As it returns a Promise, it should be consumed via a success and error handler.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1sdLDgVw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zhgabsie3dq65jjftnd0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1sdLDgVw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zhgabsie3dq65jjftnd0.png" alt="asyncified consumption"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;All above snippets can be run &lt;a href="https://codepen.io/sagarrth/pen/PobNpwZ"&gt;here&lt;/a&gt;&lt;br&gt;
Reference: &lt;a href="https://exploringjs.com/es6/ch_generators.html"&gt;ExploringJS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all people!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>uiweekly</category>
      <category>generators</category>
    </item>
    <item>
      <title>Coupling: The one and only software design problem</title>
      <author>Maxi Contieri</author>
      <pubDate>Sat, 06 Feb 2021 23:56:40 +0000</pubDate>
      <link>https://dev.to/mcsee/coupling-the-one-and-only-software-design-problem-2pd7</link>
      <guid>https://dev.to/mcsee/coupling-the-one-and-only-software-design-problem-2pd7</guid>
      <description>&lt;p&gt;A root cause analysis of all failures of our software will find a single culprit with multiple costumes.&lt;/p&gt;

&lt;p&gt;The enemy is always there. Many times disguised as laziness, sometimes simplification, and usually with the optimization outfit.&lt;/p&gt;

&lt;p&gt;If we analyze many common mistakes, we will always find a single culprit. The bloody coupling.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#expanding-the-axioms" class="anchor"&gt;
  &lt;/a&gt;
  Expanding the axioms
&lt;/h1&gt;

&lt;p&gt;In previous articles, we talked about the definition of software design in an axiomatic way.&lt;br&gt;
We enunciated the rule to know what objects to represent in our model:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5P_qTbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lVa_4S4c--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/980ad955-6831-484f-9285-65d8fef4e385.jpg" alt="mcsee image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/what-is-wrong-with-software-5pa" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What is (wrong with) software&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri ・ Oct  8 '20 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#oop&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#solid&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;and we showed the only principle that we should use:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5P_qTbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lVa_4S4c--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/980ad955-6831-484f-9285-65d8fef4e385.jpg" alt="mcsee image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/the-one-and-only-software-design-principle-3086" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The One and Only Software Design Principle&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri ・ Oct 13 '20 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#oop&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;We are going to add the only mistake we should avoid by all means to this axiomatic list.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coupling-examples" class="anchor"&gt;
  &lt;/a&gt;
  Coupling Examples
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#classes" class="anchor"&gt;
  &lt;/a&gt;
  Classes
&lt;/h3&gt;

&lt;p&gt;Global variables link a global reference from the code. This link cannot be easily broken unless we connect to interfaces instead of references and use &lt;a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle"&gt;dependency inversion&lt;/a&gt; (the &lt;a href="https://en.wikipedia.org/wiki/SOLID"&gt;SOLID&lt;/a&gt; D).&lt;br&gt;
Having global variables in a structured language involves being attached to a reference that cannot be replaced, mocked or deferred over time. In object-oriented programming using classification languages, ​​the problem is the same.&lt;/p&gt;

&lt;p&gt;This is a step back to more pure functional languages where there's and explicit prohibition enforced by preventing functions from having side effects.&lt;/p&gt;

&lt;p&gt;If we take an extreme and minimalist position:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every function/method should only invoke objects in their attributes and/or their parameters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#settings" class="anchor"&gt;
  &lt;/a&gt;
  Settings
&lt;/h3&gt;

&lt;p&gt;Those plugs that allow us to 'configure' the software using arbitrary global references from anywhere on the code.&lt;/p&gt;

&lt;p&gt;They are a particular case of global references and prevent the correct unit test of a system. If something must be configurable, this possible configuration must be passed as an object as we proposed in this article.&lt;/p&gt;

&lt;p&gt;In this way we can replace the configuration on tests and have full control and no side effects.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5P_qTbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lVa_4S4c--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/980ad955-6831-484f-9285-65d8fef4e385.jpg" alt="mcsee image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/code-smell-29-settings-configs-3eh3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Code Smell 29 - Settings/Configs&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri ・ Nov 20 '20 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#oop&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#hidden-assumptions" class="anchor"&gt;
  &lt;/a&gt;
  Hidden Assumptions
&lt;/h3&gt;

&lt;p&gt;As we have described in the note on bijections, partially ignoring this principle implies running the risk of losing information on the contract and making mistakes under different interpretations.&lt;/p&gt;

&lt;p&gt;In our previous example where we represented 10 meters with the number 10.&lt;/p&gt;

&lt;p&gt;In this case, we are coupled to the hidden assumption that 10 represents 10 meters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ZbGGLm2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1iekxeqj1qp7nwjyz63o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ZbGGLm2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1iekxeqj1qp7nwjyz63o.jpg" alt="Hidden"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hidden assumptions appear at the worst moments of the development cycle.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#null-references" class="anchor"&gt;
  &lt;/a&gt;
  Null References
&lt;/h3&gt;

&lt;p&gt;This is a particular case of the item above. Null should never be used because it violates our only non-negotiable principle since it is not bijective with any real-world entity (Null only exists in the world of developers).&lt;/p&gt;

&lt;p&gt;If we decide to use a null as a flag of some particular behavior we are coupling the decision of the function implementer to the one who invokes it. This ambiguous semantics brings countless problems.&lt;/p&gt;

&lt;p&gt;Same issue happens when someone sets a property to null coupling to the reader of the attribute.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5P_qTbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lVa_4S4c--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/980ad955-6831-484f-9285-65d8fef4e385.jpg" alt="mcsee image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/null-the-billion-dollar-mistake-1h1c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Null: The Billion dollar mistake&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri ・ Nov 18 '20 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#singletons" class="anchor"&gt;
  &lt;/a&gt;
  Singletons
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Singleton_pattern"&gt;Singleton pattern&lt;/a&gt; is a controversial design pattern. If we look at it under the guidance of our single design rule we will discard its use immediately. An object is represented by a *Singleton *if there is only one instance of its class. This also violates the principle of being declarative since the uniqueness of a concept, in general, is coupled to implementation problems, so we are violating the only design rule that we imposed ourselves.&lt;/p&gt;

&lt;p&gt;Besides, *singletons *are generally referenced through their class name, so we add all the problems mentioned in the first paragraph.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5P_qTbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lVa_4S4c--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/980ad955-6831-484f-9285-65d8fef4e385.jpg" alt="mcsee image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/singleton-the-root-of-all-evil-50bh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Singleton: The Root of all Evil&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri ・ Nov 17 '20 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#oop&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#ifcaseswitch-and-all-their-friends" class="anchor"&gt;
  &lt;/a&gt;
  If/Case/Switch and all their friends
&lt;/h3&gt;

&lt;p&gt;If clauses have a hidden coupling between the condition and the place where they are evaluated and violate the &lt;a href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle"&gt;open/closed principle&lt;/a&gt;. (The O on the solid acronym).&lt;/p&gt;

&lt;p&gt;Ifs (and hence cases) should be avoided unless these conditions are business rules thus related to the &lt;a href="https://maximilianocontieri.com/the-one-and-only-software-design-principle"&gt;bijection&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A business rule &lt;em&gt;'A bonus should be paid to employees with 3 or more years at a company'&lt;/em&gt; can be safely stated by an If clause but rules such as *'If the employee's position is junior then pay them 10.000' *shouldn't, since this is not essential on the business rule but accidental therefore should be treated with polymorphism.&lt;/p&gt;

&lt;p&gt;In the real world, employees are aware of their position, but they are not usually aware of their age on the company.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5P_qTbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lVa_4S4c--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/980ad955-6831-484f-9285-65d8fef4e385.jpg" alt="mcsee image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/code-smell-36-switch-case-elseif-else-if-statements-h6c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Code Smell 36 - Switch/case/elseif/else/if statements&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri ・ Nov 28 '20 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#oop&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#documentation" class="anchor"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;If you need to add comments to your code there's a smell you might not be declarative enough.&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5P_qTbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lVa_4S4c--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/980ad955-6831-484f-9285-65d8fef4e385.jpg" alt="mcsee image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/code-smell-05-comment-abusers-2ba5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Code Smell 05 - Comment Abusers&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri ・ Oct 24 '20 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Code documentation is many times not synced with the code itself. Many times developers change the code and don't have enough courage to change the code documentation bound to the code. This is another subtle coupling case.&lt;/p&gt;

&lt;p&gt;Some months later we read the code and the documentation and need a lot of time to figure out their meaning.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ripple-effect" class="anchor"&gt;
  &lt;/a&gt;
  Ripple effect
&lt;/h1&gt;

&lt;p&gt;If we are faithful to our unique design rule and have a declarative model, we will expect, consequently, that a small change in the requirements will generate a small change in the model and so on. When this does not occur, the dreaded &lt;a href="https://asu.pure.elsevier.com/en/publications/ripple-effect-analysis-of-software-maintenance"&gt;ripple effect &lt;/a&gt;is produced, turning the software unpredictable and full of potential errors that hinder its maintenance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xwCARWZh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xdvszs3e9fsb220dca9r.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xwCARWZh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xdvszs3e9fsb220dca9r.jpeg" alt="Ripple"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5P_qTbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lVa_4S4c--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/980ad955-6831-484f-9285-65d8fef4e385.jpg" alt="mcsee image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/code-smell-16-ripple-effect-3881" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Code Smell 16 - Ripple Effect&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri ・ Nov  4 '20 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#solutions" class="anchor"&gt;
  &lt;/a&gt;
  Solutions
&lt;/h1&gt;

&lt;p&gt;There are many ways to remove coupling once identified.&lt;/p&gt;

&lt;p&gt;In this article we will see coupling reduction techniques:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mcsee.hashnode.dev/how-to-decouple-a-legacy-system"&gt;Decouple a Legacy System&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusions" class="anchor"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h1&gt;

&lt;p&gt;Coupling is necessary because the objects must know each other to collaborate and be able to solve the problems raised in the simulation.&lt;/p&gt;

&lt;p&gt;Finding out which binding is good versus which one is bad to avoid the wave effect requires a little experience and a lot of staying true to the rules defined in this article.&lt;/p&gt;




&lt;p&gt;Part of the objective of this series of articles is to generate spaces for debate and discussion on software design.&lt;/p&gt;

&lt;p&gt;We look forward to comments and suggestions on this article.&lt;/p&gt;

&lt;p&gt;This article is published at the same time in Spanish &lt;a href="https://medium.com/@mcsee/acoplamiento-el-%C3%BAnico-problema-importante-en-el-dise%C3%B1o-de-software-ae203338c8d5"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>oop</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Make Animated Content Placeholders with HTML and CSS</title>
      <author>James Sinkala</author>
      <pubDate>Sat, 06 Feb 2021 22:00:42 +0000</pubDate>
      <link>https://dev.to/xinnks/make-animated-content-placeholders-with-html-and-css-3ekn</link>
      <guid>https://dev.to/xinnks/make-animated-content-placeholders-with-html-and-css-3ekn</guid>
      <description>&lt;p&gt;In the same spirit of my previous article on &lt;a href="https://dev.to/xinnks/create-loading-animations-with-svg-and-css-1d0p"&gt;creating loading animations with web technologies&lt;/a&gt;, on this post I'll be demonstrating how one can create content placeholders for their web projects using HTML and CSS.&lt;/p&gt;

&lt;p&gt;It's a good practice to let the user know that something is going on in the background such as the retrieval of data from the database by displaying an animation that will later be replaced by the loaded data than having nothing displayed which might give the impression that either the page is broken or has issues especially for users that have a weak connection.&lt;/p&gt;

&lt;p&gt;In the wide range of animations that one can choose from within the latest web trends content placeholders seem to be the best of the pile as they display animations that carry a look closest possible to the content to be displayed. They can be positioned to hold the place of different types of data from text paragraphs to content cards as evident on major websites such as youtube, instagram and facebook.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#on-to-creating-our-animated-content-placeholder" class="anchor"&gt;
  &lt;/a&gt;
  On to creating our animated content placeholder.
&lt;/h4&gt;

&lt;p&gt;The anatomy of the placeholder animation consists of two div blocks, the parent block that acts as the animation's wrapper with a darker background and a child block relatively positioned to the parent spanning the entire height of the parent with a lighter colored gradient background which will be animated infinitely, moving it from out of view from the left side of the parent past it to out of view on the right side of the parent.&lt;br&gt;
below is a demonstration of the animated placeholder.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ExVB4I1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mrvsmk2pl3l8fwocbfhy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ExVB4I1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mrvsmk2pl3l8fwocbfhy.gif" alt="animated placeholder block"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is a preview of the anatomy of the placeholder animation:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Tzr5T52--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y19gyj60khodkzf4nvqc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Tzr5T52--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y19gyj60khodkzf4nvqc.gif" alt="Anatomy of the placeholder animation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The template of the placeholder animation is as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"load-wraper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"activity"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And the stylesheet to animate the placecholder animation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.load-wraper&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;211&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;211&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;211&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;44&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.activity&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-45%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;45%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;.05&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;.3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;.6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;.3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;.05&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-moz-linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;.05&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;.3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;.6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;.3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;.05&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-webkit-linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;.05&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;.3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;.6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;.3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;251&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;.05&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;loading&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;45&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;loading&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-45%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To make the animation smoother make sure the child block (&lt;em&gt;.activity&lt;/em&gt;) is as wide as posible, here it's width is 45% of the parent's total width.&lt;/p&gt;

&lt;p&gt;At this point the animated placeholder block is complete and that's all on implementing it.&lt;/p&gt;

&lt;p&gt;What's left is placing the placeholder within the wireframes of any content card layout blocks to see the animated placeholder in action. &lt;/p&gt;

&lt;p&gt;Let's demonstrate an example of this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A card component's animated placeholder.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--93YEl_n0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bj22jajoiosw1vgk92uk.gif" alt="A card component's animated placeholder"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The HTML for the the above cards is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-image"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"load-wraper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"activity"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"load-wraper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"activity"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-image"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"load-wraper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"activity"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-avatar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"load-wraper circular"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"activity"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-avatar-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"load-wraper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"activity"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Adding the stylesheet to the cards:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;260px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.card-image&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.card-content&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.card-avatar&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.card-avatar-text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.card-content&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.card-text&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.card-avatar&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.card-avatar-text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.card-content&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.card-text&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.card-avatar-text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.circular&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Go ahead and get creative with animated placeholders in your web projects.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>animation</category>
    </item>
    <item>
      <title>Checklist for learning a new programming language</title>
      <author>Horia Constantin</author>
      <pubDate>Sat, 06 Feb 2021 20:39:11 +0000</pubDate>
      <link>https://dev.to/treaz/checklist-for-learning-a-new-programming-language-5g67</link>
      <guid>https://dev.to/treaz/checklist-for-learning-a-new-programming-language-5g67</guid>
      <description>&lt;p&gt;&lt;strong&gt;Update 22/01/2020:&lt;/strong&gt; I’ve applied the checklist to &lt;a href="https://www.horiaconstantin.com/checklist-for-learning-scala/"&gt;learning Scala&lt;/a&gt; and I’m updating it based on that experience.&lt;/p&gt;

&lt;p&gt;In a workshop that I recently gave, I compared learning a new programming language with learning a new natural language. Depending on your experience, learning a new programming language might be a medium difficulty task or a hard project. In the latter situation, you’re going to need to have some structure in your approach, to ensure you reach your goal. But what is an easy way to start? I propose to use a checklist similar to the one I’ve written below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#naive-solution" class="anchor"&gt;
  &lt;/a&gt;
  Naive solution
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;“I’ve got enough Java experience. I’m a good software engineer. I’ve played with other languages before, and it went well.”&lt;/em&gt; I said to myself. I was aware that Scala has some very funky notations and that it uses plenty of functional programming concepts. But my confidence was high. I’ll do it as I did it before: take an online course, read a book, find the documentation, make a small app, and go from there. But I didn’t expect to get into analysis paralysis because of the overwhelming number of books, frameworks, courses, etc. I eventually decided on an online course and finished it only to realize that I wasn’t learning as much as I wanted. I decided to make the learning process explicit by creating a checklist that I could improve iteratively.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-checklist" class="anchor"&gt;
  &lt;/a&gt;
  The checklist
&lt;/h2&gt;

&lt;p&gt;I created this checklist iteratively as I was learning Scala, but I’ve generalized it for any programming language. In a future post, I’ll show how I’ve applied it to my learning.&lt;/p&gt;

&lt;p&gt;There are two components that I found valuable while learning Scala: keeping my motivation high (mindset) and having a good learning plan that supports my learning experience (setting). Start with mindset first (ordered starting with top priority), continue with the setting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mindset" class="anchor"&gt;
  &lt;/a&gt;
  Mindset
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Clarify what your personal why’s for learning are. &lt;a href="https://en.wikipedia.org/wiki/Self-determination_theory"&gt;Try to connect this to intangible needs/wants/dreams&lt;/a&gt;. Bad: I want to learn this because my boss promised me a 2% raise at the end of the year. Good: I want to learn this because I’m curious about how it works&lt;/li&gt;
&lt;li&gt;Find a project to build while learning. Online courses and books tend to teach concepts without applying them to real-world use cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setting" class="anchor"&gt;
  &lt;/a&gt;
  Setting
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#onetime-tasks" class="anchor"&gt;
  &lt;/a&gt;
  One-time tasks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Follow a high-quality online course/book about the language. Material created by the language’s author or main contributor clarifies the language philosophy and its specific patterns.&lt;/li&gt;
&lt;li&gt;Find/create a cheat sheet with the most common expressions and idioms of the language and keep it open in a browser tab&lt;/li&gt;
&lt;li&gt;Find/create a comparison between the new language and another that you’re familiar with&lt;/li&gt;
&lt;li&gt;Start collaborating on an open-source library. Pick a common one, but not a complex one. Start by searching on GitHub.&lt;/li&gt;
&lt;li&gt;Find the official language documentation, learn how to read it, and keep it open in a browser tab&lt;/li&gt;
&lt;li&gt;Find/create a roadmap that describes the steps that you will go through (the table of contents of online courses are usually a good source)&lt;/li&gt;
&lt;li&gt;Find a code-conventions/style-guide document&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#continuous-tasks" class="anchor"&gt;
  &lt;/a&gt;
  Continuous tasks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Take notes: questions, curiosities, “strange” code.&lt;/li&gt;
&lt;li&gt;Find someone to review the code that you write.&lt;/li&gt;
&lt;li&gt;Find/create a dictionary/glossary of the concepts, keywords, etc. which are specific to the new language (consider making a mindmap). Aim to understand the use cases for them. And practice it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#deprecated-tasks" class="anchor"&gt;
  &lt;/a&gt;
  Deprecated tasks
&lt;/h3&gt;

&lt;p&gt;These tasks seemed a good idea in theory but were not useful to me in practice.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Find/create a list of antipatterns. It might be syntax or design patterns, but the language that you are learning is going to do a couple of things differently compared to what you were used to.&lt;/li&gt;
&lt;li&gt;Find the frameworks that you foresee needing and are the most popular (GitHub search with the new language tag)&lt;/li&gt;
&lt;li&gt;Find and learn how to use the most popular build tool&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#work-in-progress" class="anchor"&gt;
  &lt;/a&gt;
  Work in progress
&lt;/h2&gt;

&lt;p&gt;At this point, I’m convinced of the usefulness of having a checklist for learning a new programming language. However, I’m aware that some of these ideas are more effective than others. In a future article, I’ll tell you how my learning process was affected by following this checklist.&lt;/p&gt;

</description>
      <category>tips</category>
    </item>
    <item>
      <title>10 React Hooks Explained ✨</title>
      <author>Abhishek Naidu</author>
      <pubDate>Sat, 06 Feb 2021 20:38:05 +0000</pubDate>
      <link>https://dev.to/abhisheknaiidu/10-react-hooks-explained-3ino</link>
      <guid>https://dev.to/abhisheknaiidu/10-react-hooks-explained-3ino</guid>
      <description>&lt;p&gt;&lt;em&gt;This blog is originally published on: &lt;a href="//blog.abhisheknaidu.tech"&gt;My Blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before React Hooks (React &amp;lt; 16.8), developer's were required to write &lt;code&gt;class&lt;/code&gt; components in order to take advantage of certain React Features. But now, &lt;code&gt;React Hooks&lt;/code&gt; provides a more ergonomic way to build components because we can use stateful logic without changing our component hierarchy.&lt;/p&gt;

&lt;p&gt;There are 10 Hooks in total 🔥&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usestate-" class="anchor"&gt;
  &lt;/a&gt;
  🚀 UseState :
&lt;/h3&gt;

&lt;p&gt;It is the most important and often used hook. The purpose of this hook to handle reactive data, any data that changes in the application is called state, when any of the data changes, React re-renders the UI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#useeffect-" class="anchor"&gt;
  &lt;/a&gt;
  🚀 UseEffect :
&lt;/h3&gt;

&lt;p&gt;It allows us to implement all of the lifecycle hooks from within a single function API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// this will run when the component mounts and anytime the stateful data changes&lt;/span&gt;
&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hey, Nads here!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// this will run, when the component is first initialized&lt;/span&gt;
&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hey, Nads here!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

&lt;span class="c1"&gt;// this will run only when count state changes&lt;/span&gt;
&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nads&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setLoaded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="c1"&gt;// this will run when the component is destroyed or before the component is removed from UI.&lt;/span&gt;
&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hey, Nads here&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Goodbye Component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usecontext-" class="anchor"&gt;
  &lt;/a&gt;
  🚀 useContext :
&lt;/h3&gt;

&lt;p&gt;This hook allows us to work with &lt;code&gt;React's Context API&lt;/code&gt;, which itself a mechanism to allow us to share data within it's component tree without passing through props. It basically removes &lt;code&gt;prop-drilling&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;✅&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;wrong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;❌&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AnsContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Exam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="c1"&gt;// Any child component inside this component can access the value which is sent.&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AnsContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;RightAns&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;AnsContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;RightAns&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// it consumes value from the nearest parent provider.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AnsContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ans&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// previously we were required to wrap up inside the AnsContext.Consumer&lt;/span&gt;
    &lt;span class="c1"&gt;// but this useContext hook, get rids that.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#useref-" class="anchor"&gt;
  &lt;/a&gt;
  🚀 useRef :
&lt;/h3&gt;

&lt;p&gt;This hook allows us to create a mutable object. It is used, when the value keeps changes like in the case of useState hook, but the difference is, it doesn't trigger a re-render when the value changes.&lt;/p&gt;

&lt;p&gt;The common use case of this, is to grab HTML elements from the DOM.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;myBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;myBtn&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleBtn&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usereducer-" class="anchor"&gt;
  &lt;/a&gt;
  🚀 useReducer :
&lt;/h3&gt;

&lt;p&gt;It does very similiar to setState, It's a different way to manage state using &lt;code&gt;Redux Pattern&lt;/code&gt;. Instead of updating the state directly, we &lt;code&gt;dispatch&lt;/code&gt; actions, that go to a &lt;code&gt;reducer&lt;/code&gt; function, and this function figure out, how to compute the next state.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ik_MbBeK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/885ulztfmsm2xhdqj3mp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ik_MbBeK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/885ulztfmsm2xhdqj3mp.png" alt="reducer"&gt;&lt;/a&gt;&lt;/p&gt;
Fig. useReducer Architecture 





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;increment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;decrement&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// state is the state we want to show in the UI.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        Count : &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;decrement&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;-&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;increment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;+&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usememo-" class="anchor"&gt;
  &lt;/a&gt;
  🚀 useMemo :
&lt;/h3&gt;

&lt;p&gt;This hook will help you to optimise computational cost or improve performance. It mostly used when we're needed to make expensive calculations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;expensiveCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// recompute when count changes.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Works great for memoizing returned values, but in other &lt;code&gt;CSSNamespaceRule&lt;/code&gt;, we want to memoize the whole function, in that case we can use this hook ↓&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usecallback-" class="anchor"&gt;
  &lt;/a&gt;
  🚀 useCallback :
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useCallbackDemo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;showCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Count &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SomeChild&lt;/span&gt; &lt;span class="na"&gt;handler&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showCount&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#useimperativehandle-" class="anchor"&gt;
  &lt;/a&gt;
  🚀 useImperativeHandle :
&lt;/h3&gt;

&lt;p&gt;This hook is use to modify the exposed ref and it is rarely used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useImperativeHandleDemo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useImperativeHandle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;click&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;clicking button!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;myBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#uselayouteffect-" class="anchor"&gt;
  &lt;/a&gt;
  🚀 useLayoutEffect :
&lt;/h3&gt;

&lt;p&gt;It works same as useEffect hook with one difference, the callback will run after rendering the component but before the actual updates have been painted to the screen.&lt;/p&gt;

&lt;p&gt;⚠️ : Blocks visual updates until your callback is finished.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useLayoutEffectDemo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;// scroll position before the dom is visually updated&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usedebugvalue-" class="anchor"&gt;
  &lt;/a&gt;
  🚀 useDebugValue :
&lt;/h3&gt;

&lt;p&gt;This hook doesn't make much sense, but it allows us to define our own custom labels in &lt;code&gt;React Dev Tools&lt;/code&gt;, which are useful for debugging. Suppose we have &lt;code&gt;n&lt;/code&gt; number of components which uses the same logic, then we can separately define our own function and that can be used in other components, but the key thing here is we can debug things&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useDisplayName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setDisplayName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetchFromDatabase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

    &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useDebugValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;displayName&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loading...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The return value can be used in other components or else where in the application like this 👇🏽&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;displayName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDisplayName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;displayName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;References - &lt;code&gt;Fireship's Youtube Video&lt;/code&gt; - &lt;a href="https://youtu.be/TNhaISOUy6Q"&gt;React Hooks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to connect? &lt;a href="https://twitter.com/abhisheknaiidu"&gt;twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>showdev</category>
      <category>writing</category>
      <category>react</category>
    </item>
    <item>
      <title>Sorting algorithms: JavaScript - Quick Sort Algorithm🚀</title>
      <author>Codespresso</author>
      <pubDate>Sat, 06 Feb 2021 20:06:15 +0000</pubDate>
      <link>https://dev.to/codespresso/sorting-algorithms-javascript-quick-sort-algorithm-p9o</link>
      <guid>https://dev.to/codespresso/sorting-algorithms-javascript-quick-sort-algorithm-p9o</guid>
      <description>&lt;p&gt;Table Of Contents&lt;br&gt;
        * 🤓 &lt;a href="#intro"&gt;INTRODUCTION&lt;/a&gt;&lt;br&gt;
        * 👉🏻 &lt;a href="#quick"&gt;ABOUT QUICK SORT ALGORITHM&lt;/a&gt;&lt;br&gt;
        * 👨🏻‍🏫 &lt;a href="#explain"&gt;EXPLANATION&lt;/a&gt;&lt;br&gt;
        * 🖖🏻 &lt;a href="#pseudo"&gt;PESUDO CODE&lt;/a&gt;&lt;br&gt;
        * 🛠 &lt;a href="#implement"&gt;IMPLEMENTATION&lt;/a&gt;&lt;br&gt;
        * 👩🏻‍💻 &lt;a href="#code"&gt;CODE&lt;/a&gt;&lt;br&gt;
        * 🤔 &lt;a href="#complex"&gt;COMPLEXITY&lt;/a&gt;&lt;br&gt;
        * 🙏 &lt;a href="#thank-you"&gt;THANK YOU&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  🤓 INTRODUCTION &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Top of the day, my dear coders! I hope you are all having a beautiful weekend. Welcome to another chapter of the Sorting algorithms with JavaScript series. Today we are talking about the QuickSort algorithm!&lt;/p&gt;

&lt;p&gt;Connect with me via &lt;a href="https://twitter.com/lazar_dev"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/lazar-stankovic-44a199177/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#education-time" class="anchor"&gt;
  &lt;/a&gt;
  ⚡⚡⚡ EDUCATION TIME!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/QB44N1iwGN53hAQ46L/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/QB44N1iwGN53hAQ46L/giphy.gif" alt="snape"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since the beginning of this series, we are talking about various algorithms. We should in my opinion mention the Algorithm as a term or idea.&lt;/p&gt;

&lt;p&gt;An algorithm in computer science as well as in mathematics is a finite sequence of well-defined, computer-implementable instructions, typically to solve a class of problems or to perform a computation.&lt;/p&gt;

&lt;p&gt;Algorithms are &lt;strong&gt;always&lt;/strong&gt; unambiguous and are used to perform the following tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Calculations&lt;/li&gt;
&lt;li&gt;Data processing&lt;/li&gt;
&lt;li&gt;Automated reasoning
And much, much more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Important thing is that an algorithm, an &lt;strong&gt;effective&lt;/strong&gt; algorithm, can be expressed within a finite amount of space and time.&lt;/p&gt;

&lt;p&gt;The concept of the algorithm has existed since antiquity. Division algorithm and an arithmetic algorithm was used by ancient Babylonian mathematicians c.2500 BC and Egyptian mathematicians c. 1550 BC.&lt;/p&gt;

&lt;p&gt;The word 'algorithm' has its roots in Latinizing the nisba, indicating his geographic origin, of the name of Persian mathematician Muhammad ibn Musa al-Khwarizmi to "algorismus".&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Algorism is the art by which at present we use those Indian figures, which number two times five. - Alexandre de Villedieu&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#about-quick-sort-algorithm" class="anchor"&gt;
  &lt;/a&gt;
  👉🏻 ABOUT QUICK SORT ALGORITHM&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Quicksort is an &lt;strong&gt;efficient sorting algorithm&lt;/strong&gt;. His father is a British computer scientist &lt;a href="https://en.wikipedia.org/wiki/Tony_Hoare"&gt;Tony Hoare&lt;/a&gt;, not the gentleman in the following gif as one might think.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/xT9DPpf0zTqRASyzTi/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xT9DPpf0zTqRASyzTi/giphy.gif" alt="father"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The quicksort algorithm is a &lt;strong&gt;divide-and-conquer&lt;/strong&gt; algorithm, an algorithm that recursively breaks down a problem into two or more subproblems of the same or related type until these become simple enough to be solved directly.&lt;/p&gt;

&lt;p&gt;In the quicksort algorithm, all the real work happens in the divide step of the divide-and-conquer paradigm.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#explanation" class="anchor"&gt;
  &lt;/a&gt;
  👨🏻‍🏫 EXPLANATION&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We are dividing our sorting problem into three steps: &lt;strong&gt;divide&lt;/strong&gt;, &lt;strong&gt;conquer&lt;/strong&gt;, &lt;strong&gt;combine&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let's take a typical subarray A[p...r]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DIVIDE:&lt;/strong&gt; Partitioning (rearrange) the array A[p...r] into two (possibly empty) subarrays A[p...q-1] and A[q+1...r] such that each element of A[p...q-1] is less than or equal to A[q], which is, in turn, less than or equal to each element of A[q+1...r]. We are computing the index q as part of this partitioning procedure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CONQUER:&lt;/strong&gt; Sort the two subarrays A[p...q-1] and A[q+1...r] by recursive calls to quicksort.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;COMBINE:&lt;/strong&gt; Because the subarrays are already sorted, no work is needed to combine them: the entire array A[p...r] is now sorted.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#pseudo-code" class="anchor"&gt;
  &lt;/a&gt;
  🖖🏻 PSEUDO CODE &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;QUICKSORT(A: array, p, r)
1  if p &amp;lt; r
2    q = PARTITION(A,p,r)
3    QUICKSORT(A,p,q-1)
4    QUICKSORT(A,q+1,r)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PARTITION(A: array, p, r)
1  x = A[r]
2  i = p - 1
3  for j = p to r-1
4    if A[j] &amp;lt;= x
5      i = i + 1
6      swap A[i] with A[j]
7  swap A[i+1] with A[r]
8  return i+1
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%9B%A0-implementation" class="anchor"&gt;
  &lt;/a&gt;
  🛠 IMPLEMENTATION &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PaLNzj0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/luo1yves66jdtm2v4ydx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PaLNzj0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/luo1yves66jdtm2v4ydx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#code" class="anchor"&gt;
  &lt;/a&gt;
  👨🏻‍💻 CODE &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Play with code! 🚀&lt;br&gt;
&lt;iframe src="https://jsfiddle.net/codespresso/pj4105mc/11//embedded/js,result,html,css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complexity" class="anchor"&gt;
  &lt;/a&gt;
  🤔 COMPLEXITY &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Worst case:&lt;/strong&gt; It occurs when the partitioning routine produces one subproblem with n-1 elements and one with 0 elements. If the partitioning is maximally unbalanced at every recursive level of the algorithm, the running time is Big O of n&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Best case:&lt;/strong&gt; In the most even possible split, Partition function will produce two subproblems, each of size more than n/2, since one if of size [n/2] and one of size [n/2]-1; In this case, complexity is Big O of nlogn (Pretty good!)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thank-you-for-reading" class="anchor"&gt;
  &lt;/a&gt;
  🙏 THANK YOU FOR READING!&lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;References:&lt;br&gt;
School notes...&lt;br&gt;
School books...&lt;br&gt;
&lt;a href="https://www.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort"&gt;Khan academy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please leave a comment, tell me about you, about your work, comment your thoughts, connect with me! &lt;/p&gt;

&lt;p&gt;☕ SUPPORT ME AND KEEP ME FOCUSED!&lt;br&gt;
&lt;a href="https://ko-fi.com/Z8Z33D1HJ"&gt;&lt;img height="36" src="https://res.cloudinary.com/practicaldev/image/fetch/s--IT81Gxvw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.ko-fi.com/cdn/kofi4.png%3Fv%3D2" alt="Buy Me a Coffee at ko-fi.com"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have a nice time hacking! 😊&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>JS: Random Background Color Change</title>
      <author>DevLorenz0</author>
      <pubDate>Sat, 06 Feb 2021 19:44:48 +0000</pubDate>
      <link>https://dev.to/devlorenzo/js-random-background-color-change-4pof</link>
      <guid>https://dev.to/devlorenzo/js-random-background-color-change-4pof</guid>
      <description>&lt;p&gt;&lt;code&gt;Hello World!&lt;/code&gt; I decided to start a new series! - A CSS/JS trick in 5 minutes - It will be a concentrate of quick and useful tricks you can apply to your website. I will try to never exceed 20 lines of code and to always go straight to the point. I will start very easy, how to implement a random background color change. &lt;/p&gt;

&lt;p&gt;For that we just need a javascript function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function random_bg_color() {
    let x = Math.floor(Math.random() * 256);
    let y = Math.floor(Math.random() * 256);
    let z = Math.floor(Math.random() * 256);
    let bgColor =  `rgb( ${x}, ${y}, ${z} )`;
    document.body.innerText = bgColor;

    document.body.style.background = bgColor;
}

setInterval(random_bg_color, 2000); // You can easily change Interval here
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I think there nothing really difficult to explain, we create 3 random variables and assign them to the background. We just need to know how RGB system work (or like Jack said in the comments we could also use HSL).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;RGB defines the values of red (the first number), green (the second number), or blue (the third number). The number 0 signifies no representation of the color and 255 signifies the highest possible concentration of the color. &lt;a href="https://www.pluralsight.com/blog/tutorials/understanding-hexadecimal-colors-simple"&gt;Pluralsight&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;document.body.innerText = bgColor;&lt;/code&gt; &lt;br&gt;
This line of code serves to show RGB of the color on screen. &lt;/p&gt;



&lt;p&gt;You can have here a live preview:&lt;br&gt;
&lt;a href="https://codepen.io/DevLorenzo/pen/PoboRqm"&gt;Click Me&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/DevLorenzo/embed/PoboRqm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Hope this helped and thanks for reading!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please smash that like button to make me understand that you want the series to continue :)&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>codequality</category>
    </item>
    <item>
      <title>How To Code A Game As A Beginner </title>
      <author>Luke Garrigan</author>
      <pubDate>Sat, 06 Feb 2021 19:19:38 +0000</pubDate>
      <link>https://dev.to/lukegarrigan/how-to-code-a-game-as-a-beginner-2hmk</link>
      <guid>https://dev.to/lukegarrigan/how-to-code-a-game-as-a-beginner-2hmk</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;So you want to get into programming? And you know you want to code games, then hopefully, this is the perfect blog for you. In this blog I'll be going through the very fundamentals of programming. To do this we'll be using &lt;a href="https://p5js.org/"&gt;p5.js&lt;/a&gt;, you've probably heard of &lt;a href="https://www.javascript.com/"&gt;JavaScript&lt;/a&gt; (JS), well, p5.js is just a JavaScript library — an extension of the language — that has a &lt;a href="https://codeheir.com/2019/02/01/what-is-p5-js-0/"&gt;tonne of drawing functionality&lt;/a&gt; that we can use to develop 2D games.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-we-will-create" class="anchor"&gt;
  &lt;/a&gt;
  What we will create
&lt;/h1&gt;

&lt;p&gt;We are going to create our very own &lt;a href="https://cookie-clicker2.com/"&gt;cookie clicker&lt;/a&gt;!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6lh9wvy3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://codeheir.files.wordpress.com/2021/02/git-scrummage3.gif%3Fw%3D356" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6lh9wvy3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://codeheir.files.wordpress.com/2021/02/git-scrummage3.gif%3Fw%3D356" alt="This image has an empty alt attribute; its file name is git-scrummage3.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#getting-started" class="anchor"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h1&gt;

&lt;p&gt;The first thing you need to do is open up the &lt;a href="https://editor.p5js.org/"&gt;p5js editor&lt;/a&gt;, this is where we will be writing our code, the editor is great because once you've finished your game you can send a link to your friends and allow them to play it too!&lt;/p&gt;

&lt;p&gt;You should see the following:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JMQOIDhK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kpSZ07V.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JMQOIDhK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kpSZ07V.png" alt="https://i.imgur.com/kpSZ07V.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;you'll notice the play button, go ahead and click that - this will run your code:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2rA-uI28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image.png%3Fw%3D421" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2rA-uI28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image.png%3Fw%3D421" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should see the above in the preview section on the right, this is the output of the already existing code.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setup-and-draw-functions" class="anchor"&gt;
  &lt;/a&gt;
  setup() and draw() functions
&lt;/h2&gt;

&lt;p&gt;The existing code has two functions &lt;code&gt;setup()&lt;/code&gt; and &lt;code&gt;draw()&lt;/code&gt;. A function is just a block of code that performs a specific task, anything between curly braces { } is a block of code. So the &lt;code&gt;setup()&lt;/code&gt; and &lt;code&gt;draw()&lt;/code&gt; functions both have their own tasks. The concept for these two functions is very simple.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#setup" class="anchor"&gt;
  &lt;/a&gt;
  setup()
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;setup()&lt;/code&gt; function gets called &lt;strong&gt;once&lt;/strong&gt; at the start of your program, so as soon as you hit the play button, the &lt;code&gt;setup()&lt;/code&gt; function will execute.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#draw" class="anchor"&gt;
  &lt;/a&gt;
  draw()
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;draw()&lt;/code&gt; function gets called continuously until your program stops executing, so whatever is within the &lt;code&gt;draw()&lt;/code&gt; function gets executed and executed, time after time. This happens 60 times per second, overwise known as your &lt;a href="https://p5js.org/reference/#/p5/frameRate"&gt;framerate&lt;/a&gt; which is a term all of you gamers will be familiar with!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-createcanvas400-400-and-background220" class="anchor"&gt;
  &lt;/a&gt;
  What is createCanvas(400, 400) and background(220)?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#createcanvas" class="anchor"&gt;
  &lt;/a&gt;
  createCanvas
&lt;/h3&gt;

&lt;p&gt;This creates a &lt;a href="https://en.wikipedia.org/wiki/Canvas_element"&gt;canvas element&lt;/a&gt; with the width and height of 400px. Basically, the canvas element is what we’re drawing on! Remember how &lt;code&gt;draw()&lt;/code&gt; and &lt;code&gt;setup()&lt;/code&gt; are functions, well here we're calling a function called &lt;code&gt;createCanvas&lt;/code&gt;. So our &lt;code&gt;setup()&lt;/code&gt; function calls another function called &lt;code&gt;createCanvas&lt;/code&gt;, remember this will only ever happen once because &lt;code&gt;setup()&lt;/code&gt; only gets called once. Notice how the &lt;code&gt;createCanvas(400, 400)&lt;/code&gt; function takes in two numbers, these are called &lt;a href="https://www.w3schools.com/js/js_function_parameters.asp"&gt;function arguments&lt;/a&gt; which means we can pass in some information to the function to make it behave a certain way, in our scenario we are passing in the width and the height.&lt;/p&gt;

&lt;p&gt;Go ahead and change the numbers that we pass in to the &lt;code&gt;createCanvas&lt;/code&gt; function, write &lt;code&gt;createCanvas(600, 600)&lt;/code&gt; and hit play, notice how the canvas got bigger on the right?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j2ahk7g2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-1.png%3Fw%3D552" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j2ahk7g2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-1.png%3Fw%3D552" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#background" class="anchor"&gt;
  &lt;/a&gt;
  background
&lt;/h3&gt;

&lt;p&gt;The background function colours in the canvas, If you specify just one value as an argument like &lt;code&gt;background(220)&lt;/code&gt; it is grayscale, but you can choose any colour you wish using RGB arguments. &lt;code&gt;background(251, 211, 219)&lt;/code&gt; will give you a lovely pink. Each value is in the range of 0 to 255. More information can be found &lt;a href="https://p5js.org/reference/#/p5/background"&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Change your background function call to the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;background(251, 211, 219)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And hit play:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LLiZW9rR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-2.png%3Fw%3D627" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LLiZW9rR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-2.png%3Fw%3D627" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#creating-our-cookie" class="anchor"&gt;
  &lt;/a&gt;
  Creating our cookie
&lt;/h1&gt;

&lt;p&gt;Cookies are usually round in shape so let's add a circle. Luckily p5.js has a circle function that we can call. The function definition looks like this &lt;code&gt;circle(x, y, diameter)&lt;/code&gt; So you provide these numbers when you call the function.&lt;/p&gt;

&lt;p&gt;The very top left of the canvas is the coordinate (x, y) = (0, 0) and the very bottom right is (600, 600), hopefully the image below will help you to visualise it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4XrEtW92--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-3.png%3Fw%3D1024" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4XrEtW92--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-3.png%3Fw%3D1024" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So if we wanted to put something in the dead centre of the canvas what would the coordinates be? That's right x = 300 and y = 300. So, let's write the code to call the circle function within our &lt;code&gt;draw()&lt;/code&gt; function underneath the &lt;code&gt;background&lt;/code&gt; code.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;circle(300, 300, 300)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So the first two 300s represent the x and the y, play around with the numbers to watch it change, the 3rd 300 is the diameter, the size of the circle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rE_oFw4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-4.png%3Fw%3D556" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rE_oFw4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-4.png%3Fw%3D556" alt="This image has an empty alt attribute; its file name is image-4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is what your code should look like so far:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function setup() {
  createCanvas(600, 600)
}

function draw() {
  background(251, 211, 219)
  circle(300, 300, 300)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Notice how the &lt;code&gt;circle&lt;/code&gt; function call is after the &lt;code&gt;background&lt;/code&gt; function call. This is because we want the &lt;code&gt;circle&lt;/code&gt; to be on top of the &lt;code&gt;background&lt;/code&gt;. Much like when you're doing a painting, if you were painting a bird in the sky, you'd paint the sky first and then the bird on top of the sky not the bird first and then the sky on top of the bird, then you'd just have a sky!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#adding-a-score" class="anchor"&gt;
  &lt;/a&gt;
  Adding a score
&lt;/h1&gt;

&lt;p&gt;When somebody clicks on our cookie/circle we want some score to display and increment on click. Let's first add the score.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#variables" class="anchor"&gt;
  &lt;/a&gt;
  Variables
&lt;/h2&gt;

&lt;p&gt;So you've probably heard the term variable, but what actually is it? A variable just allows us to store some information so that we can use it in our program. So for us, we want to store the score so we can display it. In JavaScript you can define a variable a couple ways but in this tutorial we're going to use var. Here are some examples of stuff you might want to store in your program and how defining the variable would look:&lt;/p&gt;

&lt;p&gt;The word after &lt;code&gt;var&lt;/code&gt; is the variable name you choose, it's good practice to call your variable names in &lt;a href="https://eslint.org/docs/rules/camelcase"&gt;camelCase&lt;/a&gt; so if you had a really long variable name, it would look like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;aReallyLongVariableName&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where you lower case the first letter of the first word and then upper case the first letter of the subsequent words. More information on variables can be &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures"&gt;found here&lt;/a&gt; but it won't be necessary for our cookie clicker!&lt;/p&gt;

&lt;p&gt;So let's add our score variable, of course, we want to start the score off at 0. Remember, if this was within the &lt;code&gt;draw()&lt;/code&gt; function the variable would get set every time the function is called which would mean that our score would get set back to 0 each time, we don't want that. So let's add &lt;code&gt;var score = 0&lt;/code&gt; to the very top of the file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var score = 0  
function setup() {  
  createCanvas(600, 600)  
}  

function draw() {  
  background(251, 211, 219)  
  circle(300, 300, 300)  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you hit play, the output of the program will be the same because although we've set our first variable we're not actually using it!&lt;/p&gt;

&lt;p&gt;To display our score we're going to use the &lt;a href="https://p5js.org/reference/#/p5/text"&gt;text&lt;/a&gt; function. The &lt;code&gt;text(word, x, y)&lt;/code&gt; takes the word as the first function argument, the x as the second and the y as the third. Let's put our score in as the word that we want to display and then the x and y locations. Add the following code in your draw function:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;text(score, 300, 100)&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---_oQluD---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-5.png%3Fw%3D558" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---_oQluD---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-5.png%3Fw%3D558" alt="This image has an empty alt attribute; its file name is image-5.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should see the score has been added to the canvas! Congratulations, you've just created and used a variable.&lt;/p&gt;

&lt;p&gt;It's probably a little too small, so let's change the size of the text using &lt;a href="https://p5js.org/reference/#/p5/textSize"&gt;textSize&lt;/a&gt;, this function takes one argument which is the size of the text- &lt;code&gt;textSize(theSize)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's add the following to our program:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;textSize(60)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Which should look something like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oGNSvVhc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-6.png%3Fw%3D552" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oGNSvVhc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-6.png%3Fw%3D552" alt="This image has an empty alt attribute; its file name is image-6.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's a better size, but it's a little off center, let's make use of the &lt;a href="https://p5js.org/reference/#/p5/textAlign"&gt;textAlign&lt;/a&gt; function and pass it in CENTER as an argument. Add the following to the code in the draw function:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;textAlign(CENTER)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So that your overall code looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var score = 0  
function setup() {  
  createCanvas(600, 600)  
}  

function draw() {  
  background(251, 211, 219)  
  circle(300, 300, 300)  

  text(score, 300, 100)  
  textAlign(CENTER)  
  textSize(60)  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Which should, when played look like:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wlcbT3vI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-7.png%3Fw%3D561" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wlcbT3vI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-7.png%3Fw%3D561" alt="This image has an empty alt attribute; its file name is image-7.png"&gt;&lt;/a&gt;&lt;br&gt;
Now we're getting somewhere!&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#clicking-the-cookie" class="anchor"&gt;
  &lt;/a&gt;
  Clicking the cookie
&lt;/h1&gt;

&lt;p&gt;When we click on the cookie we want our score to increase by 1. In order to do this we need to add a function to our code called &lt;code&gt;mouseClicked()&lt;/code&gt;. So whenever somebody clicks using their mouse this function will execute:&lt;/p&gt;

&lt;p&gt;add the following code underneath the draw function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function mouseClicked() {  
  console.log('I just got clicked')  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Notice if you play and then click anywhere you'll see in your console, "I just got clicked" - one for every time you click. &lt;code&gt;console.log&lt;/code&gt; is a way for us to &lt;a href="https://www.wikiwand.com/en/Debugging#:~:text=In%20computer%20programming%20and%20software,programs%2C%20software%2C%20or%20systems."&gt;debug our program&lt;/a&gt; or just sanity check that a function is getting executed like we've just done. I added the &lt;code&gt;console.log('I just got clicked')&lt;/code&gt; just to make sure that when we click with the mouse that function gets executed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#incrementing-the-count" class="anchor"&gt;
  &lt;/a&gt;
  Incrementing the count
&lt;/h2&gt;

&lt;p&gt;So when we click we want our score to increase by 1. So let's add the following code to the &lt;code&gt;mouseClicked&lt;/code&gt; function:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;score = score + 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;What this is doing is increasing the value of our variable by 1, we're assigning it to itself plus 1. This can also be written in shorthand like &lt;code&gt;score++&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var score = 0;
function setup() {
  createCanvas(600, 600)
}

function draw() {
  background(251, 211, 219)
  circle(300, 300, 300)

  text(score, 300, 100)
  textAlign(CENTER)
  textSize(60)
}

function mouseClicked() {
  score = score + 1
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So now when you click the score should increase:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--daacp7Q_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-8.png%3Fw%3D554" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--daacp7Q_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-8.png%3Fw%3D554" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Awesome! However, there's a slight problem with this approach, well done if you spotted it! The score increments regardless of whether you click the cookie or not, we want to restrict increasing the score to just when we click the cookie.&lt;/p&gt;

&lt;p&gt;To do this we're going to require a little bit of maths!&lt;/p&gt;

&lt;p&gt;We will be using the &lt;code&gt;dist(x, y, x1, x2)&lt;/code&gt; function which calculates the distance between two points. The two points we will be using is the center of the circle and the position the person clicks. If the distance between the two points is less than or equal to the radius of the circle then they have clicked within the circle, hopefully the following image explains that a little better:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6PfMoUWK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/clickedit.jpg%3Fw%3D1000" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6PfMoUWK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/clickedit.jpg%3Fw%3D1000" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's add this code, so that our &lt;code&gt;mouseClicked&lt;/code&gt; function looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function mouseClicked() {
  var distance = dist(300, 300, mouseX, mouseY)
  if (distance &amp;lt;= 150) {
    score++
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, there's a couple things to unpack here. The first line we are calling the &lt;code&gt;dist&lt;/code&gt; function which is returning us the distance between two points. The first two arguments of the &lt;code&gt;dist&lt;/code&gt; function are 300 and 300 which is the x and y of the centre of our circle, the second coordinates is &lt;code&gt;mouseX&lt;/code&gt; and &lt;code&gt;mouseY&lt;/code&gt; which are special p5.js variables that track the &lt;a href="https://p5js.org/reference/#/p5/mouseX"&gt;position of the mouse&lt;/a&gt;. So we retrieve the distance between those two points as shown in the diagram and then we set it to a new variable called &lt;code&gt;distance&lt;/code&gt;, so we can then use it in an &lt;a href="https://www.w3schools.com/js/js_if_else.asp"&gt;if statement&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-statements" class="anchor"&gt;
  &lt;/a&gt;
  If statements
&lt;/h2&gt;

&lt;p&gt;An if statement allows us to perform different actions based on different conditions. They follow this structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (condition) {
  //  block of code to be executed if the condition is true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So in our example we have &lt;code&gt;if (distance &amp;lt;= 150)&lt;/code&gt; so this is saying if the distance is less than or equal to the radius of our circle (circle has a diameter of 300, radius is just half the diameter) then execute the code &lt;code&gt;score++&lt;/code&gt; so it'll increase our score. If the condition is not satisified, i.e the person clicks next to the cookie but not within, then the score doesn't get increased.&lt;/p&gt;

&lt;p&gt;Try it out for yourself!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ygxTL4Fb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://codeheir.files.wordpress.com/2021/02/clickinthecookie.gif%3Fw%3D537" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ygxTL4Fb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://codeheir.files.wordpress.com/2021/02/clickinthecookie.gif%3Fw%3D537" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-it-bounce" class="anchor"&gt;
  &lt;/a&gt;
  Making it bounce
&lt;/h2&gt;

&lt;p&gt;When we click it, we want some kind of indication that the cookie is being clicked, so let's make it bounce.&lt;/p&gt;

&lt;p&gt;So rather than hardcoding 300 as the diameter of the circle, let's create a new variable that we can reference whenever we want. At the top of the code where you've written the &lt;code&gt;score&lt;/code&gt; variable let's add &lt;code&gt;var diameter = 300&lt;/code&gt; and update the call to the &lt;code&gt;circle(x, y, diameter)&lt;/code&gt; function so that it takes our diameter variable as an argument rather than the hardcoded 300. So the code should now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var score = 0
var diameter = 300
function setup() {
  createCanvas(600, 600)
}

function draw() {
  background(251, 211, 219)
  circle(300, 300, diameter)

  text(score, 300, 100)
  textAlign(CENTER)
  textSize(60)
}

function mouseClicked() {
  var distance = dist(300, 300, mouseX, mouseY)
  if (distance &amp;lt;= 150) {
    score++
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you run the program, once again there shouldn't be any difference in functionality as all we're doing is setting a variable for a value we'd hardcoded before.&lt;/p&gt;

&lt;p&gt;Next, when we click we want the diameter of the variable to decrease to 280 and then we will perform some magic to make it pop back to real size.&lt;/p&gt;

&lt;p&gt;Add &lt;code&gt;diameter = 280&lt;/code&gt; within our &lt;code&gt;mouseClicked&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function mouseClicked() {
  var distance = dist(300, 300, mouseX, mouseY)
  if (distance &amp;lt;= 150) {
    score++;
    diameter = 280
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So you'll notice that when you hit play and then click the cookie it'll decrease in size, but it'll stay that size as that's what we've set it to!&lt;/p&gt;

&lt;p&gt;To make it pop back to the starting size add the following code within our &lt;code&gt;draw&lt;/code&gt; function&lt;/p&gt;

&lt;p&gt;&lt;code&gt;diameter = lerp(diameter, 300, 0.1)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://p5js.org/reference/#/p5.Vector/lerp"&gt;lerp&lt;/a&gt; function linearly interpolates the number to another number - so our diameter of 280 changes gradually back to 300. Don't worry about the ins and outs of this function it just gives our cookie a nice bouncing effect!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i9XCuUf0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://codeheir.files.wordpress.com/2021/02/popping.gif%3Fw%3D530" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i9XCuUf0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://codeheir.files.wordpress.com/2021/02/popping.gif%3Fw%3D530" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#adding-an-actual-cookie" class="anchor"&gt;
  &lt;/a&gt;
  Adding an actual cookie
&lt;/h1&gt;

&lt;p&gt;Clicking a circle is boring, let's add an actual cookie&lt;/p&gt;

&lt;p&gt;Right-click and save this image, we're going to add it to our game! Credit goes to &lt;a href="https://dribbble.com/shots/5358537-Cookie"&gt;https://dribbble.com/shots/5358537-Cookie&lt;/a&gt; for the image&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8r5qu4bL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/cookie.png%3Fw%3D311" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8r5qu4bL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/cookie.png%3Fw%3D311" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will have to have an account with &lt;a href="https://editor.p5js.org/"&gt;https://editor.p5js.org/&lt;/a&gt; to be able to upload images, I suggest signing up so all your code can be saved! (it's free)&lt;/p&gt;

&lt;p&gt;In the editor, click the side panel:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dHZLrYXo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-13.png%3Fw%3D307" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dHZLrYXo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-13.png%3Fw%3D307" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then using the drop-down "Upload file":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1UDzvHQI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-9.png%3Fw%3D160" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1UDzvHQI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-9.png%3Fw%3D160" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should see the cookie.png in your files list:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AHfwmxes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-10.png%3Fw%3D126" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AHfwmxes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-10.png%3Fw%3D126" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's load our image, first let's create a any empty &lt;code&gt;cookieImage&lt;/code&gt; variable at the top of our file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;var cookieImage&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It's not been set to anything to start with, we're going to load our image which will then set the variable. So in our &lt;code&gt;setup()&lt;/code&gt; function add the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cookieImage = loadImage('cookie.png')&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;loadImage(pathToImage)&lt;/code&gt; function does exactly what you'd imagine, it loads the image into memory so we can use it. The top of our code should look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var score = 0
var diameter = 300
var cookieImage
function setup() {
  createCanvas(600, 600)
  cookieImage = loadImage('cookie.png')
}
// .. rest of code
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next we need to replace the circle with the cookie, let's &lt;a href="https://www.w3schools.com/js/js_comments.asp"&gt;comment out&lt;/a&gt; our circle code&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comments" class="anchor"&gt;
  &lt;/a&gt;
  Comments
&lt;/h2&gt;

&lt;p&gt;Comments in code is a way for us to explain what the code is doing, a comment can start with two slashes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// this is a comment
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You may have already noticed a comment earlier when explaining about if statements. A comment doesn't get executed, it has no effect on the program. So you may add comments to help you understand code or to help others understand the code you've written!&lt;/p&gt;

&lt;p&gt;In our case, we're going to comment out the code for the circle so that it doesn't get executed any more, or, you could always just delete the code!&lt;/p&gt;

&lt;p&gt;If you comment out the &lt;code&gt;circle(300, 300, diameter)&lt;/code&gt; code so that it looks like &lt;code&gt;// circle(300, 300, diameter)&lt;/code&gt; then when you execute the program it should look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_bX0378V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-11.png%3Fw%3D544" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_bX0378V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-11.png%3Fw%3D544" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Brilliant, now let's add our cookie using the &lt;a href="https://p5js.org/reference/#/p5/image"&gt;image function&lt;/a&gt; - &lt;code&gt;image(img, x, y, width, height)&lt;/code&gt;. So it takes the image as the first argument, the x and y of the image as the second and third respectively, and the width and height as the fourth and fifth!&lt;/p&gt;

&lt;p&gt;Just under where we commented out the circle code write the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;image(cookieImage, 300, 300, diameter, diameter)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now when you run you should see the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8h-fE7Rm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-12.png%3Fw%3D548" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8h-fE7Rm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codeheir.files.wordpress.com/2021/02/image-12.png%3Fw%3D548" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which isn't quite right, images are drawn from the top left as the reference point we want the reference point to be the center, so similar to what we did with the text let's add &lt;code&gt;imageMode(CENTER)&lt;/code&gt; just before our image. All of the code together should look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var score = 0
var diameter = 300
var cookieImage
function setup() {
  createCanvas(600, 600)
  cookieImage = loadImage('cookie.png')
}

function draw() {
  background(251, 211, 219)
  //circle(300, 300, diameter)
  imageMode(CENTER)
  image(cookieImage, 300, 300, diameter, diameter)
  text(score, 300, 100)
  textAlign(CENTER)
  textSize(60)
  diameter = lerp(diameter, 300, 0.1)
}

function mouseClicked() {
  var distance = dist(300, 300, mouseX, mouseY)
  if (distance &amp;lt;= 150) {
    score++;
    diameter = 280
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Which should play like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pIRaAd0W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://codeheir.files.wordpress.com/2021/02/done.gif%3Fw%3D530" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pIRaAd0W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://codeheir.files.wordpress.com/2021/02/done.gif%3Fw%3D530" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ideas" class="anchor"&gt;
  &lt;/a&gt;
  Ideas
&lt;/h1&gt;

&lt;p&gt;And that's it for the blog but you shouldn't stop there! If you really want to learn how to program you need to try stuff yourself here's some ideas you can code extending our cookie clicker game to hopefully emphasise what we've learnt.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The closer you click to the centre the larger the increase in the score&lt;/li&gt;
&lt;li&gt;  Make the cookie grow as the score increases&lt;/li&gt;
&lt;li&gt;  Make the cookie move around the screen&lt;/li&gt;
&lt;li&gt;  Make the cookie spin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use your imagination, or have a look at some features other cookie clickers have and try to replicate what they've done. I suggest using the &lt;a href="https://p5js.org/reference/"&gt;p5.js reference&lt;/a&gt; to see what functions you can use!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-next" class="anchor"&gt;
  &lt;/a&gt;
  What next
&lt;/h1&gt;

&lt;p&gt;And there you have it, you've coded a game and learned some of the key concepts in programming. If you enjoyed this blog then I recommend moving on to &lt;a href="https://codeheir.com/2019/08/17/top-5-best-games-to-code-as-a-beginner/"&gt;The Top 5 BEST games to code as a beginner&lt;/a&gt;, if you follow along with those blogs you should be in a good position to be able to create your own games, or maybe even &lt;a href="https://codeheir.com/2019/05/11/how-to-code/"&gt;create multiplayer games&lt;/a&gt; so that you can play with your friends!&lt;/p&gt;

&lt;p&gt;If you liked this blog then I have a tonne more game-dev blogs on my personal website at &lt;a href="https://codeheir.com"&gt;codeheir.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Making a progress circle in React</title>
      <author>Jack</author>
      <pubDate>Sat, 06 Feb 2021 18:20:15 +0000</pubDate>
      <link>https://dev.to/jackherizsmith/making-a-progress-circle-in-react-3o65</link>
      <guid>https://dev.to/jackherizsmith/making-a-progress-circle-in-react-3o65</guid>
      <description>&lt;p&gt;When I need something simple that I don't know how to build quickly, it can be tempting to find a library for it. But what is actually going on inside any given library? And how do I make it do this specific thing, instead of the 20 other options this library comes packaged with? I think it can sometimes take longer to read the docs and find workarounds than to just build the thing from scratch, and then at the end it's lighter and easier to make adjustments.&lt;/p&gt;

&lt;p&gt;I recently wanted to make a progress circle / pie. It came out looking something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---5sHq1S5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vfbgqwem54zv64cof0qs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---5sHq1S5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vfbgqwem54zv64cof0qs.png" alt="complete progress circle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is how I did it in React. The aim of this article is for people to do things their own way rather than using a component someone else has built for them, so I'd love to know what you'd do differently or additionally in the comments.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/chnHv7g2coez6ZEryb/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/chnHv7g2coez6ZEryb/giphy.gif" alt="ideas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#svgs" class="anchor"&gt;
  &lt;/a&gt;
  SVGs
&lt;/h2&gt;

&lt;p&gt;I like SVGs a lot, they're awesome. They seem to have every attribute you could want and, unlike some CSS properties, they work on all main browsers. So actually we can do this whole thing without CSS. Since this is a dynamic component which will take a percentage value, we'll be using JavaScript to do all the calculations.&lt;/p&gt;

&lt;p&gt;We're going to make two circles, one (blue) on top of the other (light grey). We'll use SVG's stroke-dasharray, which sets the length of a dashed stroke, and stroke-dashoffset, which sets where it begins relative to its natural starting point.&lt;/p&gt;

&lt;p&gt;So the stroke dash length will be the circumference of the circle - &lt;code&gt;2 * pi * radius&lt;/code&gt; - and the offset which we need to change for the blue circle will be a percentage of that. When we want to visualise 85%, that stroke will have to start at 15% of whatever the circumference is, so that we can only see the remaining 85% of the line before the dash ends.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;circle&lt;/span&gt; &lt;span class="na"&gt;r=&lt;/span&gt;&lt;span class="s"&gt;"70"&lt;/span&gt; &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"transparent"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"lightgrey"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2rem"&lt;/span&gt; &lt;span class="na"&gt;stroke-dasharray=&lt;/span&gt;&lt;span class="s"&gt;"439.8"&lt;/span&gt; &lt;span class="na"&gt;stroke-dashoffset=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/circle&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;circle&lt;/span&gt; &lt;span class="na"&gt;r=&lt;/span&gt;&lt;span class="s"&gt;"70"&lt;/span&gt; &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"transparent"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2rem"&lt;/span&gt; &lt;span class="na"&gt;stroke-dasharray=&lt;/span&gt;&lt;span class="s"&gt;"439.8"&lt;/span&gt; &lt;span class="na"&gt;stroke-dashoffset=&lt;/span&gt;&lt;span class="s"&gt;"66"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/circle&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We're already off to a flying start, with some hard-coded values - in particular, the radius of &lt;code&gt;70&lt;/code&gt;, the circumference of &lt;code&gt;439.8&lt;/code&gt; and its "85%" bar starting at &lt;code&gt;66&lt;/code&gt;. If you try this yourself, you'll see we're 90 degrees clockwise of where we'd want to be, and also missing the text value that should sit neatly in the middle. So we can put the circles in a group to rotate it -90 degrees, and add some text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;g&lt;/span&gt; &lt;span class="na"&gt;transform=&lt;/span&gt;&lt;span class="s"&gt;"rotate(-90 100 100)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;circle&lt;/span&gt; &lt;span class="na"&gt;r=&lt;/span&gt;&lt;span class="s"&gt;"70"&lt;/span&gt; &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"transparent"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"lightgrey"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2rem"&lt;/span&gt; &lt;span class="na"&gt;stroke-dasharray=&lt;/span&gt;&lt;span class="s"&gt;"439.8"&lt;/span&gt; &lt;span class="na"&gt;stroke-dashoffset=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/circle&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;circle&lt;/span&gt; &lt;span class="na"&gt;r=&lt;/span&gt;&lt;span class="s"&gt;"70"&lt;/span&gt; &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"transparent"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2rem"&lt;/span&gt; &lt;span class="na"&gt;stroke-dasharray=&lt;/span&gt;&lt;span class="s"&gt;"439.8"&lt;/span&gt; &lt;span class="na"&gt;stroke-dashoffset=&lt;/span&gt;&lt;span class="s"&gt;"66"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;/circle&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"50%"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"50%"&lt;/span&gt; &lt;span class="na"&gt;dominant-baseline=&lt;/span&gt;&lt;span class="s"&gt;"central"&lt;/span&gt; &lt;span class="na"&gt;text-anchor=&lt;/span&gt;&lt;span class="s"&gt;"middle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;85%&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There are some of those great SVG attributes I mentioned earlier - &lt;code&gt;dominant-baseline&lt;/code&gt; and &lt;code&gt;text-anchor&lt;/code&gt; helping us centre our text vertically and horizontally. Doing stuff like this in CSS can be a bit of a headache. When rotating SVGs we can also specify the centre of rotation - in this case its in the middle at &lt;code&gt;100 100&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This actually already gives us the progress circle at the top of the article, so we're ready to move this to React.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-it-a-component" class="anchor"&gt;
  &lt;/a&gt;
  Making it a component
&lt;/h2&gt;

&lt;p&gt;Using React gives us a lot of dynamic control over the values we're using. Let's take the percentage we want as an input, and the colour we want the progress to be.&lt;/p&gt;

&lt;p&gt;We'll start by 'cleaning' the input to make sure it's a number we can use, we can set up the SVG parts as re-useable components and then we're basically done.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cleanPercentage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isNegativeOrNaN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isFinite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;percentage&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// we can set non-numbers to 0 here&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isTooHigh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;percentage&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isNegativeOrNaN&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isTooHigh&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;colour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;percentage&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;circ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;strokePct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;circ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// where stroke will start, e.g. from 15% to 100%.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;circle&lt;/span&gt;
      &lt;span class="na"&gt;r&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"transparent"&lt;/span&gt;
      &lt;span class="na"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;strokePct&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;circ&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;colour&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// remove colour as 0% sets full circumference&lt;/span&gt;
      &lt;span class="na"&gt;strokeWidth&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2rem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;strokeDasharray&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;circ&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;strokeDashoffset&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;percentage&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;strokePct&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;percentage&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;text&lt;/span&gt;
      &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"50%"&lt;/span&gt;
      &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"50%"&lt;/span&gt;
      &lt;span class="na"&gt;dominantBaseline&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"central"&lt;/span&gt;
      &lt;span class="na"&gt;textAnchor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"middle"&lt;/span&gt;
      &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1.5em&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;%
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Pie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;colour&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cleanPercentage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;g&lt;/span&gt; &lt;span class="na"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`rotate(-90 &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100 100&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Circle&lt;/span&gt; &lt;span class="na"&gt;colour&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"lightgrey"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Circle&lt;/span&gt; &lt;span class="na"&gt;colour&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;colour&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pct&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;g&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="na"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pct&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And actually this is just a starting point, since there are still hard-coded values - do we want to fix our radius to &lt;code&gt;70&lt;/code&gt;, or stroke width to &lt;code&gt;2rem&lt;/code&gt;, or circle size to &lt;code&gt;200&lt;/code&gt;? I think probably not, and now that's all in our control - I've left curly braces wherever I would continue to add dynamic values. At the moment the component takes just percentage and colour, but it could take stroke width, radius, rounded ends and so on.&lt;/p&gt;

&lt;p&gt;You can see the final code with some examples where I've added some more colours, rounded the ends using &lt;code&gt;stroke-linecap="round"&lt;/code&gt; below; I've also included a "Randomise" button so you can see it in action.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/heuristic-burnell-kttl5?module=/Pie.jsx"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>tutorial</category>
      <category>datavis</category>
    </item>
    <item>
      <title>Various Ways of Real-Time Data Communication in Node.js</title>
      <author>Kalpit Rathore</author>
      <pubDate>Sat, 06 Feb 2021 16:17:33 +0000</pubDate>
      <link>https://dev.to/kalpitrathore/various-ways-of-real-time-data-communication-in-node-js-1h2b</link>
      <guid>https://dev.to/kalpitrathore/various-ways-of-real-time-data-communication-in-node-js-1h2b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this article, We will going to talk about various ways of Real-Time Data Communication techniques. &lt;/p&gt;

&lt;p&gt;Real-Time Communication is a mode of telecommunication where all the connected clients can exchange information instantly or with negligible transmission delay. There are various techniques by which, We can exchange information between client &amp;amp; server in real-time, Some are:-&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#techniques" class="anchor"&gt;
  &lt;/a&gt;
  Techniques
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Polling&lt;/li&gt;
&lt;li&gt;Server Sent Events&lt;/li&gt;
&lt;li&gt;Web Sockets&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zgMQf9Xo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ejq4nvu0a560j5hyh7wp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zgMQf9Xo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ejq4nvu0a560j5hyh7wp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-polling" class="anchor"&gt;
  &lt;/a&gt;
  1. Polling
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It is a type of "Client Pull" architecture where client constantly request the server for updates at certain regular intervals.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Client waits for a particular time, then request the server for new updates.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is kind of half-duplex or unidirectional communication, Where only one direction transmission is allowed at a time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is based on HTTP protocol.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;High latency transmission.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Browser Support: To receive or send "Polling" updates at the client side, We will use XMLHttpRequest JavaScript API whose browser support can be found on &lt;a href="https://caniuse.com/mdn-api_xmlhttprequest"&gt;caniuse&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Let's implement this technique in Node.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1) Open a terminal &amp;amp; create a folder &lt;em&gt;polling&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir polling &amp;amp;&amp;amp; cd polling
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;2) Now initialize npm in the folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;3) Create &lt;em&gt;app.js&lt;/em&gt; file &amp;amp; write some code in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express')
const app = express()
const port = 80

app.use('/', express.static('public'));

var data = "Real-Time Update 1";
var number = 1;

app.get('/', (req, res) =&amp;gt; {
  res.send({"update": data})
});

var interval = setInterval(function(){
    data = "Real-Time Update "+number;
    console.log("SENT: "+data);
    number++;
}, randomInteger(2,9)*1000);

function randomInteger(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}  

app.listen(port, () =&amp;gt; {
  console.log(`Listening at http://localhost:${port}`)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;4) Install the required dependencies or libraries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save express
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;5) Create &lt;em&gt;public&lt;/em&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir public &amp;amp;&amp;amp; cd public
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;6) Create &lt;em&gt;html&lt;/em&gt; folder inside &lt;em&gt;public&lt;/em&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir html &amp;amp;&amp;amp; cd html
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;7) Create &lt;em&gt;index.html&lt;/em&gt; file inside the public folder &amp;amp; write some code in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;Polling&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div id="updates"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;script type="text/javascript"&amp;gt;

        var interval = setInterval(function(){
            getUpdates();
        }, 5000);

        function getUpdates()
        {
            var xhr = new XMLHttpRequest();
            xhr.open("GET", "/", true);
            xhr.onload = function (e) {
            if (xhr.readyState === 4) {
                if (xhr.status === 200) {                    
                    document.getElementById('updates').innerHTML = document.getElementById('updates').innerHTML + "Received: "+JSON.parse(xhr.responseText).update+"&amp;lt;/br&amp;gt;";
                }
            }
            };
            xhr.onerror = function (e) {
                console.error(xhr.statusText);
            };
            xhr.send(null);
        }
    &amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;8) Execute &lt;em&gt;app.js&lt;/em&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//if you are inside html folder then go to your root project directory
cd ../..

//Now execute the app.js file
node app.js
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;9) Open a browser &amp;amp; point to &lt;a href="http://localhost/html/index.html"&gt;http://localhost/html/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have successfully implemented the &lt;em&gt;Polling&lt;/em&gt; technique in Node.js. As you can see it's transmission latency is very high.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-server-sent-events" class="anchor"&gt;
  &lt;/a&gt;
  2. Server Sent Events
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It is a type of "Server Push" architecture, Where server instantly pushes the updates to client whenever it receives new information.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Initially client sends the handshake request to server, After handshaking or establishing the connection, Client is not allowed to send data to server, Only server can push updates to client.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is a kind of half-duplex or unidirectional communication. But after handshaking, only server is allowed to send data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is based on HTTP protocol.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provide low latency transmission.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To receive or send "Server Sent Events" updates at client side, We will going to use EventSource JavaScript API whose browser support can be found on &lt;a href="https://caniuse.com/mdn-api_eventsource"&gt;caniuse&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Let's implement this technique in Node.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1) Open a terminal &amp;amp; create a folder &lt;em&gt;server-sent-events&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir server-sent-events &amp;amp;&amp;amp; cd server-sent-events
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;2) Now initialize npm in the folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;3) Create &lt;em&gt;app.js&lt;/em&gt; file &amp;amp; write some code in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express')
const app = express()
const port = 80

app.use('/', express.static('public'));

var data = "Real-Time Update 1";
var number = 1;

app.get('/server-sent-events', function(req, res) {

    res.writeHead(200, {
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive'
    });

    var interval = setInterval(function(){
        data = "Real-Time Update "+number;
        console.log("SENT: "+data);
        res.write("data: " + data + "\n\n")
        number++;
    }, randomInteger(2,9)*1000);

    // close
    res.on('close', () =&amp;gt; {
        clearInterval(interval);
        res.end();
    });
})

function randomInteger(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}  

app.listen(port, () =&amp;gt; {
  console.log(`Listening at http://localhost:${port}`)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;4) Install the required dependencies or libraries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save express
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;5) Create &lt;em&gt;public&lt;/em&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir public &amp;amp;&amp;amp; cd public
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;6) Create &lt;em&gt;html&lt;/em&gt; folder inside &lt;em&gt;public&lt;/em&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir html &amp;amp;&amp;amp; cd html
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;7) Create &lt;em&gt;index.html&lt;/em&gt; file inside the public folder &amp;amp; write some code in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;Server Sent Events&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div id="updates"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;script type="text/javascript"&amp;gt;    

        var source = new EventSource('/server-sent-events')

        source.addEventListener('message', function(e) {            
            document.getElementById('updates').innerHTML = document.getElementById('updates').innerHTML + "Received: "+e.data+"&amp;lt;/br&amp;gt;";
        }, false)

    &amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;8) Execute &lt;em&gt;app.js&lt;/em&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//if you are inside html folder then go to your root project directory
cd ../..

//Now execute the app.js file
node app.js
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;9) Open a browser &amp;amp; point to &lt;a href="http://localhost/html/index.html"&gt;http://localhost/html/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have successfully implemented the &lt;em&gt;Server Sent Events&lt;/em&gt; technique in Node.js. We can use this protocol where "Server to Client Transmission" is our only concern.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-web-sockets" class="anchor"&gt;
  &lt;/a&gt;
  3. Web Sockets
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It is a type of "Server Push" architecture.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After handshaking, both client &amp;amp; server are allowed to send or receive information at any time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is a kind of full-duplex or bidirectional communication where both client &amp;amp; server transmit &amp;amp; receive information simultaneously.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is based on HTTP &amp;amp; TCP/IP Protocol.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provide low latency transmission.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To receive or send "Web Sockets" updates at client side, We will going to use WebSocket JavaScript API whose browser support can be found on &lt;a href="https://caniuse.com/mdn-api_websocket"&gt;caniuse&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Let's implement this technique in Node.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1) Open a terminal &amp;amp; create a folder &lt;em&gt;websockets&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir websockets &amp;amp;&amp;amp; cd websockets
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;2) Now initialize npm in the folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;3) Create &lt;em&gt;app.js&lt;/em&gt; file &amp;amp; write some code in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const http = require('http')
const express = require('express')
const WebSocket = require('ws')
const app = express()
const port = 80

app.use('/', express.static('public'));

const server = http.createServer(app);
const wss = new WebSocket.Server({ server })

var data = "Real-Time Update 1";
var number = 1;

wss.on('connection', ws =&amp;gt; {

  ws.on('message', message =&amp;gt; {
    console.log(`Received message =&amp;gt; ${message}`)
  })

  var interval = setInterval(function(){
    data = "Real-Time Update "+number;
    console.log("SENT: "+data);
    ws.send(data)
    number++;
  }, randomInteger(2,9)*1000);  

  ws.on('close', function close() {
    clearInterval(interval);
  });
})

function randomInteger(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}  

server.listen(port, () =&amp;gt; {
  console.log(`Listening at http://localhost:${port}`)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;4) Install the required dependencies or libraries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save express
npm install --save ws
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;5) Create &lt;em&gt;public&lt;/em&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir public &amp;amp;&amp;amp; cd public
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;6) Create &lt;em&gt;html&lt;/em&gt; folder inside &lt;em&gt;public&lt;/em&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir html &amp;amp;&amp;amp; cd html
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;7) Create &lt;em&gt;index.html&lt;/em&gt; file inside the public folder &amp;amp; write some code in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;Server Sent Events&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div id="updates"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;script type="text/javascript"&amp;gt;    

        const connection = new WebSocket('ws://localhost:80')

        connection.onmessage = e =&amp;gt; {
            document.getElementById('updates').innerHTML = document.getElementById('updates').innerHTML + "Received: "+e.data+"&amp;lt;/br&amp;gt;";
        }

    &amp;lt;/script&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;8) Execute &lt;em&gt;app.js&lt;/em&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//if you are inside html folder then go to your root project directory
cd ../..

//Now execute the app.js file
node app.js
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;9) Open a browser &amp;amp; point to &lt;a href="http://localhost/html/index.html"&gt;http://localhost/html/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have successfully implemented the &lt;em&gt;Web Socket&lt;/em&gt; technique in Node.js.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FrNPtyWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sjyt6xl0rzi1c5gxlrxl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FrNPtyWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sjyt6xl0rzi1c5gxlrxl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There are the most used techniques we have disscussed, Apart from these there are hundreds of techniques available for real-time data transmission.&lt;/p&gt;

&lt;p&gt;You can find whole project on &lt;a href="https://github.com/Kalpitrathore/nodejs-realtime-communication-types.git"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more update, Follow me on &lt;a href="https://twitter.com/kalpitrathore"&gt;Twitter&lt;/a&gt; or &lt;a href="https://github.com/Kalpitrathore"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>node</category>
      <category>productivity</category>
      <category>saas</category>
      <category>javascript</category>
    </item>
    <item>
      <title>5 tips for acing your first year as a junior developer</title>
      <author>James Robinson</author>
      <pubDate>Sat, 06 Feb 2021 14:58:15 +0000</pubDate>
      <link>https://dev.to/jrobind/5-tips-for-acing-your-first-year-as-a-junior-developer-1hc</link>
      <guid>https://dev.to/jrobind/5-tips-for-acing-your-first-year-as-a-junior-developer-1hc</guid>
      <description>&lt;p&gt;Starting a new job as a developer can be a daunting prospect especially if you’re coming from a self-taught background. For many junior developers starting their first job may evoke feelings of excitement as well as inadequacy. The feelings of inadequacy are commonly termed &lt;a href="https://en.wikipedia.org/wiki/Impostor_syndrome"&gt;imposter syndrome&lt;/a&gt;. This is common for experienced as well as inexperienced developers, and these feelings are usually the result of working in a complex and constantly changing landscape. &lt;/p&gt;

&lt;p&gt;There is so much to learn it’s almost impossible to understand all of it in any detail. Feelings of imposter syndrome can be even more intense for those just starting out in the industry because, well, they’re new to it.&lt;/p&gt;

&lt;p&gt;Your first job as a junior developer is an important one. Mainly because this experience can ultimately determine whether this career path is for you or not. As a junior developer, it is up to you to ensure you do what it takes to make the most of this opportunity and experience. You’ve already cleared the first, hardest hurdle, you’ve managed to teach yourself how to code and now you’ve bagged yourself a job. Your next hurdle is surviving your first 6-12 months as a junior developer. This will be a challenging experience, but if you approach it the right way it will be an incredibly rewarding one, and you’ll learn a heck of a lot. Based on my own experiences during my first year as a junior front-end developer, I’ve compiled my 5 top tips for acing your first 12 months as a junior developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-prepare-for-a-mindfork" class="anchor"&gt;
  &lt;/a&gt;
  1. Prepare for a mindfork
&lt;/h2&gt;

&lt;p&gt;In all honesty, there’s no polite way of putting this. You will be experiencing information overload on a daily basis (this never really stops but it tends to calm down as you gain more experience and settle into a job). This can be pretty overwhelming, and alongside the other conventions that come with a new job - like getting to know a new surrounding, new co-workers, processes, and coffee machines - things can get on top of you really quickly - but only if you let them. &lt;/p&gt;

&lt;p&gt;Preparing yourself for this can go a long way toward helping you handle and cope with the rate of information overload. Aside from merely preparing yourself, here are a few approaches I took to handle this:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-notes-in-a-markdown-file" class="anchor"&gt;
  &lt;/a&gt;
  Keep notes in a markdown file
&lt;/h3&gt;

&lt;p&gt;Keep a markdown file noting key pieces of information that would be wise for you to remember. Using markdown is cool because you can easily format your notes and they can live in your text editor so you can easily reach them when you're coding. Your notes can be codebase specific, they could relate to technologies the company/project uses - they can even be company-specific such as payroll and time tracking information, even where to find the toilet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ask-for-direction" class="anchor"&gt;
  &lt;/a&gt;
  Ask for direction
&lt;/h3&gt;

&lt;p&gt;Ask a senior developer or your mentor which areas of information you should be focusing on. You are effectively asking for help to streamline this information overload so you can process and learn the key parts. An experienced developer will have the context and foresight to direct you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-communicate" class="anchor"&gt;
  &lt;/a&gt;
  2. Communicate
&lt;/h2&gt;

&lt;p&gt;This sounds like the standard tip of ‘be good at communicating’. But honestly, as a junior developer your communication skills are just as, if not more important, than your technical ability. Often, because you feel embarrassed that you might not know something and you’re hyper-aware that you feel out of your depth, it becomes tempting to silo yourself and hide away when you’re completely stuck on something - eventually, you might decide to ask for help begrudgingly. The problem is, if you don’t tell your co-workers or boss when things are hard or when you’re stuck then you risk shooting yourself and possibly your team in the foot. You won't help yourself and you won't allow your team and co-workers to help you. For instance, if you put off asking a question regarding a task that you do not understand you may end up blocked by this for a long time which may have been fixed really quickly if only you’d asked. The repercussions could be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your team might miss a sprint goal or particular objective&lt;/li&gt;
&lt;li&gt;You may be perceived as underperforming&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As long as you keep communicating you’ll allow yourself to progress at a much faster rate and you’ll allow your co-workers to help you too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-be-enthusiastic" class="anchor"&gt;
  &lt;/a&gt;
  3. Be enthusiastic
&lt;/h2&gt;

&lt;p&gt;As a junior developer, you’ve been hired under the premise that you have little to no experience and you will require extensive training and development. Although there isn’t huge (there shouldn’t be) pressure on you to perform and be highly productive at this stage, this is still a crucial time, and you should be looking to show enthusiasm for what you’re doing. &lt;/p&gt;

&lt;p&gt;Enthusiasm is a fairly broad term so we can refine this a little more with a few examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Willingness to jump out of your comfort zone&lt;/li&gt;
&lt;li&gt;Eagerness to learn new languages and technologies&lt;/li&gt;
&lt;li&gt;Willingness to lend a hand even if you haven’t been asked to do so&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your fellow developers are way more likely to want to invest time in you and your progression because of this. Helping you to improve benefits the whole team not just you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-ask-good-questions" class="anchor"&gt;
  &lt;/a&gt;
  4. Ask good questions
&lt;/h2&gt;

&lt;p&gt;This one seems a little silly but is in fact a skill in itself. Being able to ask good questions is incredibly important for all developers, especially juniors. Naturally, being new to the industry and new to a job you’ll have a ton of questions that you will want to and &lt;strong&gt;need to ask&lt;/strong&gt;. Inevitably, if you’re constantly nagging the developer next to you with questions there’s a high chance this will become annoying for them - especially if you’re asking questions in a certain way. It helps to follow a few key question asking rules:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prove-youve-tried" class="anchor"&gt;
  &lt;/a&gt;
  Prove you've tried
&lt;/h3&gt;

&lt;p&gt;Before asking make sure you’ve actually spent some time trying to answer it yourself. This is especially poignant for coding questions. It might help to actually write down what approach you have taken, what issues you’ve encountered, and what you think the solution might be. When you ask, you can go over each of these points and whoever you’re asking is way more likely to want to help you because this shows you’ve actively made an effort to solve something independently. Here's an example:&lt;/p&gt;

&lt;p&gt;Don’t&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“I can’t get this h3 to center inside this div”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Do&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“I'm struggling to center an H3 element horizontally and vertically inside a div. I’ve tried to use flexbox to do this. I have applied the flex display property along with justify-content and align-items center properties to the containing div but that hasn’t worked. I think it may be something to do with specificity. I’ve taken a look at the stylesheet but I’m struggling to find where the styles I’m applying are being overridden - if at all. Would you be able to point me in the right direction please?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#batch-your-questions" class="anchor"&gt;
  &lt;/a&gt;
  Batch your questions
&lt;/h3&gt;

&lt;p&gt;Find the middle ground between asking questions too quickly and waiting too long to ask. Again, this is more relevant for coding specific questions. If you ask too quickly, you risk annoying the person you’re asking. And if you leave it too long you risk wasting company time and money. Seems like a catch-22, but there is a balance to strike - you’ll just have to work at it to find it.&lt;/p&gt;

&lt;p&gt;Asking lots of questions is fine, but distracting the developer next to you with five questions in less than 10 minutes might be quite frustrating for them. Especially as &lt;a href="https://blog.trello.com/why-context-switching-ruins-productivity"&gt;context switching&lt;/a&gt; is a massive productivity drain for developers so it helps to be mindful of this. Instead, try to group/batch multiple questions together - you’ll find a lot of them will be related in some way too.&lt;/p&gt;

&lt;p&gt;Please don’t let my advice put you off asking questions! Developers like to have their egos stroked (at least a little), so asking them about things they probably already know will usually result in you learning something valuable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-find-a-mentor" class="anchor"&gt;
  &lt;/a&gt;
  5. Find a mentor
&lt;/h2&gt;

&lt;p&gt;If you’re lucky, maybe you'll be assigned a mentor at your new job. If so, then great! Please make use of them, they will likely have a wealth of knowledge surrounding not only the development side of things but also domain/company-specific knowledge that will help you settle in and progress in your role. I’d really encourage you to ask about this before starting your new position. Having a point of contact and someone to go to for questions regarding your progression and any pain points is really useful.&lt;/p&gt;

&lt;p&gt;If you don’t have access to a mentor, all is not lost. If you play your cards right, often the more experienced developers you work with will become your de-facto mentors - especially if you’ve built a strong working relationship with them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;As a developer you will always be required to learn new things, it’s the nature of the job. However, this learning experience is intensified for a junior developer given there is so much to learn and adapt to. It’s not just the new frameworks, libraries, and languages but it’s also working in a cross-functional team, working with other developers, working with a client, or with a business product. These things are really tough to become good at if you’ve never had a job as a developer.&lt;/p&gt;

&lt;p&gt;Ultimately you need to be willing to step out of your comfort zone. Be enthusiastic about it and make sure you communicate your progress (or lack of). This will enhance your learning and rate of progression, ensuring your experience as a newly hired developer is a positive and rewarding one.&lt;/p&gt;




&lt;p&gt;Thank you for reading!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you enjoy reading my content and want to support my work, please follow me on &lt;a href="https://twitter.com/FrontEndCoach"&gt;Twitter&lt;/a&gt;&lt;/strong&gt; 😊&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>career</category>
    </item>
    <item>
      <title>Luxa CSS, the minimalist framework!</title>
      <author>Lucas de França</author>
      <pubDate>Sat, 06 Feb 2021 14:41:53 +0000</pubDate>
      <link>https://dev.to/luxonauta/luxa-css-the-minimalist-framework-4npg</link>
      <guid>https://dev.to/luxonauta/luxa-css-the-minimalist-framework-4npg</guid>
      <description>&lt;p&gt;Hi, I would like to present a project that I am proudly developing: a minimalist framework called &lt;a href="https://luxacss.com/"&gt;Luxa CSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When we find a new tool, the first questions inevitably arise: "&lt;em&gt;What is its purpose?&lt;/em&gt;" Soon after, "&lt;em&gt;Will it works for me?&lt;/em&gt;"&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Luxa is simple and focused&lt;/strong&gt;; that's why I attribute to it the "&lt;em&gt;minimalist&lt;/em&gt;" term. When I created it, my idea was not to make a Bootstrap (&lt;em&gt;which is incredible&lt;/em&gt;) and &lt;strong&gt;still isn't the goal&lt;/strong&gt;. The idea was a reset with some superpowers and widespread components in my daily use.&lt;/p&gt;

&lt;p&gt;Like any framework, it makes writing CSS a lot easier, but the idea is not to stop writing your stylesheet; you will still need to code using it. But you won't have to worry about creating a reset or system of columns, rows and containers, and make it all responsive and suitable for production in addition to not having to link a gigantic framework just for that use. That's where Luxa finds its strength. It's a framework with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A simple reset;&lt;/li&gt;
&lt;li&gt;Avatars, badges, breadcrumbs, buttons, cards, collections, a navbar, pagination, and more;&lt;/li&gt;
&lt;li&gt;Various helpers;&lt;/li&gt;
&lt;li&gt;Containers, rows and columns system (&lt;strong&gt;based on FlexBox&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;All this for less than &amp;lt;12 KBs (v1.1) and written with modern CSS.&lt;/strong&gt; In fact, in the docs, I teach how to clone it from the &lt;a href="https://github.com/luxonauta/luxa"&gt;GitHub repo&lt;/a&gt;, customize and recreate or create your components and styles. Because the more specific it gets, the better it will be for its user.&lt;/p&gt;

&lt;p&gt;Now, a little bit of the history of this tool.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://luxacss.com/"&gt;Luxa CSS&lt;/a&gt; was born out of a need for my co-workers and me when I joined &lt;a href="https://www.unoeste.br/"&gt;Unoeste - Universidade do Oeste Paulista&lt;/a&gt;. Before, there was no standard for development. Thus, when another dev had to support a project they did not build, they wasted too much time understanding the responsible colleague's development pattern.&lt;/p&gt;

&lt;p&gt;So I started planning Luxa. I built a base version, and it was quickly adopted. Since then, I haven't stopped developing it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are the next steps?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Forms&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The goal here is to unify the initial look between browsers and common field types, almost like a reset, with a minimum of customization to look elegant.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Colors&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have been studying an excellent way to offer this feature. As I had no prior knowledge, it took longer than I wished, but now it is very close to being released!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Documentation translation in other languages&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Very important for accessibility, I initially thought of my native language (Brazilian Portuguese) and Hindi.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In a few aeons?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Themes, templates, video tutorials, and Javascript code snippets to copy and paste and add functionality (Luxa CSS is a framework focused on style only).&lt;/p&gt;

&lt;p&gt;Moving forward in spacetime, I want to make Luxa CSS a tool to help you develop your projects in a simple, light, and safe way!&lt;/p&gt;

&lt;p&gt;If you are interested in the project, here are some useful links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://luxacss.com/"&gt;Luxa CSS - Docs Site&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/luxonauta/luxa"&gt;Luxa CSS - On GitHub&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/luxonauta"&gt;My personal Twitter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>framework</category>
      <category>minimalism</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
