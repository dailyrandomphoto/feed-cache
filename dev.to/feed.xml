<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>CSS transform : complete guide on CSS transform. Everything you need for good developer</title>
      <author>Modern Web</author>
      <pubDate>Thu, 06 Jan 2022 13:31:01 +0000</pubDate>
      <link>https://dev.to/kunaal438/css-transform-complete-guide-on-css-transform-everything-you-need-for-good-developer-841</link>
      <guid>https://dev.to/kunaal438/css-transform-complete-guide-on-css-transform-everything-you-need-for-good-developer-841</guid>
      <description>&lt;p&gt;If you struggle with CSS transform or don’t know what it is. This article is for you. In this article you’ll not only learn what is CSS transform and how to use it. But you even see its properties and learn how you can make 3d objects. The video is very simple covering the topic for you. And at the end of the video you get 3 designs which are very amazing to make. I bet if you make those 3 design, you’ll not feel you don’t know about transform anymore.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video Tutorial
&lt;/h1&gt;

&lt;p&gt;You can watch video tutorial for better understanding with live example.&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BEkE9lzpaKw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#who-am-i-"&gt;
  &lt;/a&gt;
  Who am I ?
&lt;/h1&gt;

&lt;p&gt;Before we start, if you don't know me. Well, I am Kunaal from India manage Modern Web YouTube channel. I make content on web development to master your web dev skills, I made tutorials on &lt;a href="https://www.youtube.com/playlist?list=PLqm86YkewF6S45smPYeNv01aFFKWZSgYD"&gt;Fullstack Ecom website&lt;/a&gt;,&lt;a href="https://www.youtube.com/playlist?list=PLqm86YkewF6QS_knm-9-dc4tTKgbQI-zZ"&gt;Personal Portfolios&lt;/a&gt;, &lt;a href="https://www.youtube.com/playlist?list=PLqm86YkewF6RU_k6jymVX7EavJ1w9i4VW"&gt;Fullstack Blogging website&lt;/a&gt;, &lt;a href="https://www.youtube.com/playlist?list=PLqm86YkewF6TEYXEoyVUdDmmIEJ1TzORZ"&gt;Amazing Headers Animations&lt;/a&gt; and much more. If that excites you, you can visit my &lt;a href="https://www.youtube.com/channel/UCoygqHsdILWZFlfI5RMC-dw/"&gt;channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So without wasting more time lets start.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tansform"&gt;
  &lt;/a&gt;
  Tansform
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#so-what-is-css-transform-exactly"&gt;
  &lt;/a&gt;
  So what is CSS transform exactly.
&lt;/h3&gt;

&lt;p&gt;Well,CSS transform is used to change shapes, scale the element, rotate it and much more. Let's see some transform properties.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.element&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how we use css transform. Let's see some of it's value.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#translate"&gt;
  &lt;/a&gt;
  Translate
&lt;/h3&gt;

&lt;p&gt;The first property of it is translate. Translate value is used to change element's position.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;tr&gt;
&lt;td&gt;translateX(px) &lt;/td&gt;
&lt;td&gt;it is used to place element in X axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;translateY(px) &lt;/td&gt;
&lt;td&gt;it is used to place element in Y axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;translateZ(px) &lt;/td&gt;
&lt;td&gt;it is used to place element in Z axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;translate(x,y) &lt;/td&gt;
&lt;td&gt;This is a short form for translateX and translateY&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;translate3d(x,y,z) &lt;/td&gt;
&lt;td&gt;This is a short form for translateX, translateY and translateZ&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt; 

&lt;h6&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PlbWbs7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkbkgh1fkc2ik20u1cw5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PlbWbs7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkbkgh1fkc2ik20u1cw5.png" alt="Frame 1 (2)" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scale"&gt;
  &lt;/a&gt;
  Scale
&lt;/h3&gt;

&lt;p&gt;Scale is used to scale element in x, y, z axis.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;tr&gt;
&lt;td&gt;scaleX(px) &lt;/td&gt;
&lt;td&gt;it is used to scale element in X axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scaleY(px) &lt;/td&gt;
&lt;td&gt;it is used to scale element in Y axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scaleZ(px) &lt;/td&gt;
&lt;td&gt;it is used to scale element in Z axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scale(x,y) &lt;/td&gt;
&lt;td&gt;This is a short form for scaleX and scaleY&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scale3d(x,y,z) &lt;/td&gt;
&lt;td&gt;This is a short form for scaleX, scaleY and scaleZ&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h6&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---D4l7eRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wvny7iwo0b1di1035qa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---D4l7eRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wvny7iwo0b1di1035qa.png" alt="Translate" width="880" height="292"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rotate"&gt;
  &lt;/a&gt;
  Rotate
&lt;/h3&gt;

&lt;p&gt;Rotate value is used to rotate element's position.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;tr&gt;
&lt;td&gt;rotate(deg) &lt;/td&gt;
&lt;td&gt;It is used to rotate element in 2d dimension&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rotateX(deg) &lt;/td&gt;
&lt;td&gt;it is used to rotate element in X axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rotateY(deg) &lt;/td&gt;
&lt;td&gt;it is used to rotate element in Y axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rotate3d(x,y,z, angle) &lt;/td&gt;
&lt;td&gt;This is used to rotate element in 3d dimesion&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt; 

&lt;h6&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rDOvrDOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3fqujn46uc3fmiwhryz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rDOvrDOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3fqujn46uc3fmiwhryz.png" alt="Translate (2)" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;RotateX and RotateY value will behave like scale why is that we will talk at last.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#skew"&gt;
  &lt;/a&gt;
  Skew
&lt;/h3&gt;

&lt;p&gt;Skew value is used to slant the element.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;tr&gt;
&lt;td&gt;skewX(deg) &lt;/td&gt;
&lt;td&gt;it is used to skew element in X axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;skewY(deg) &lt;/td&gt;
&lt;td&gt;it is used to skew element in Y axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;skew(deg) &lt;/td&gt;
&lt;td&gt;it is a short form for skewX and skewY&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h6&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TI0yRKJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hiycml2q7h7e1ickxzsp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TI0yRKJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hiycml2q7h7e1ickxzsp.png" alt="Translate (4)" width="880" height="292"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So these was some CSS transform properties. But we donhave some more properties. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#transform-origin"&gt;
  &lt;/a&gt;
  Transform Origin
&lt;/h1&gt;

&lt;p&gt;Well, all the things we learnt till now in this article was a value of &lt;code&gt;transform&lt;/code&gt; property. But &lt;code&gt;transform-origin&lt;/code&gt; is a property itself. And its value could be a numerical value like &lt;code&gt;100px | 10%&lt;/code&gt; or can simply be the corners name. &lt;/p&gt;

&lt;p&gt;Well, up until now, all the transform was happening from the elements centre, because it was the origin of the elements. But what if I want to rotate the div from &lt;code&gt;top left&lt;/code&gt; side. Fir exactly this purpose, we have &lt;code&gt;transform-origin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_LL3A7hv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8tbaf5u7z1bklrn2fr4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_LL3A7hv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8tbaf5u7z1bklrn2fr4.png" alt="CSs transform" width="880" height="328"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It let's you define the origin of transformation of the element.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#perspective"&gt;
  &lt;/a&gt;
  Perspective
&lt;/h1&gt;

&lt;p&gt;And the last we have perspective. Remember &lt;code&gt;rotateX&lt;/code&gt; and &lt;code&gt;rotateY&lt;/code&gt; was behaving like &lt;code&gt;scale&lt;/code&gt; that was because of this perspective.&lt;/p&gt;

&lt;p&gt;Perspective is a viewpoint or viewing angle. And this define a viewing angle which make the element 3d.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XfNUQ_DV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47a3uiugxtht26viib4x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XfNUQ_DV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47a3uiugxtht26viib4x.png" alt="CSS transform" width="880" height="328"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So if we rotate that div along X axis using perspective property like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;perspective&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1000px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.element&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll see something like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xAKpCJ3L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bbiunjvhcwnfg3gmfyuu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xAKpCJ3L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bbiunjvhcwnfg3gmfyuu.png" alt="Translate (3)" width="880" height="292"&gt;&lt;/a&gt;&lt;br&gt;
Now, it is 3d, right? So this was perspective. Remember we give this property to the parent element. because we set this to the element itself it will not affect because of the same viewing angles. And also the lesser the value of perspective, closer the element to the screen.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h1&gt;

&lt;p&gt;So, that's it. That was all about CSS Transform. If you liked the article and found it helpful, make sure sure to follow me and you can also show your appreciation by simply subscribing my youtube channel. I make awesome web dev content though 😉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/modern_web?sub_confirmation=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5gs5zBA7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jeitpawvax07cx7r9yoa.png" width="334" height="90"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, As I decided to make advance CSS series, then I will do it on my style. And according to me its not enough that I'll tell you how to use it. You also have to practice it. For that, I made 3 designs for you that you can make using CSS Transfom for practice. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://drive.google.com/file/d/1ujRNHdi2y6ET9VUXJyA0hB9C0jm7FSrE/view?usp=sharing"&gt;Design 1&lt;/a&gt;, &lt;a href="https://drive.google.com/file/d/195MMd9f5xkr4pdmDbpDT4JOUIQ4uzGGz/view?usp=sharing"&gt;Design 2&lt;/a&gt;, &lt;a href="https://drive.google.com/file/d/1fh3Dq7EsTEXijHzYSVCsTP5X8ferolhN/view?usp=sharing"&gt;Design 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, make sure you code the above designs, it will motivate me to continue this CSS series. And make sure to submit it to me by tagging me on my instagram &lt;code&gt;@modern_web_channel&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you stuck anywhere, or have any doubt feel free to ask me. &lt;/p&gt;

&lt;p&gt;Thanks for reading 😊&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#articles-you-may-find-useful"&gt;
  &lt;/a&gt;
  Articles you may find Useful
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/css-the-best-css-effects-of-all-time-most-underrated-web-ux-2chj"&gt;Best CSS Effect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/quick-css-make-infinity-loading-animation-for-your-next-website-187k"&gt;Infinte CSS loader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/how-to-create-disney-plus-clone-for-beginner-in-2021-html-css-js-m3p"&gt;Disney+ Clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/create-working-youtube-clone-with-search-box-youtube-api-2a6e"&gt;Youtube API - Youtube Clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/how-to-create-netflix-clone-netflix-clone-with-hmtl-css-js-989"&gt;TMDB - Netflix Clone&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>ES6 and Modern JavaScript</title>
      <author>Naftali Murgor</author>
      <pubDate>Thu, 06 Jan 2022 13:22:08 +0000</pubDate>
      <link>https://dev.to/naftalimurgor/es6-and-modern-javascript-4nje</link>
      <guid>https://dev.to/naftalimurgor/es6-and-modern-javascript-4nje</guid>
      <description>&lt;p&gt;ES6 (ES2015) JavaScript version introduced major language features that have seen JavaScript gain a lot of popularity over the years. &lt;br&gt;
This has been a major language to the JavaScript language since 1997.&lt;br&gt;
Features introduced in ES6 Javascript&lt;br&gt;
The following features were introduced in the new JavaScript version:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Let keyword&lt;/li&gt;
&lt;li&gt;The const keyword&lt;/li&gt;
&lt;li&gt;Arrow Functions&lt;/li&gt;
&lt;li&gt;For/of&lt;/li&gt;
&lt;li&gt;Map Objects&lt;/li&gt;
&lt;li&gt;Set Objects&lt;/li&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;li&gt;Promises&lt;/li&gt;
&lt;li&gt;Symbol&lt;/li&gt;
&lt;li&gt;Default parameters&lt;/li&gt;
&lt;li&gt;Function Rest Parameters&lt;/li&gt;
&lt;li&gt;String.includes() method&lt;/li&gt;
&lt;li&gt;String.startsWith()&lt;/li&gt;
&lt;li&gt;String.endsWith()&lt;/li&gt;
&lt;li&gt;Array.from()&lt;/li&gt;
&lt;li&gt;Array.keys()&lt;/li&gt;
&lt;li&gt;Array.find()&lt;/li&gt;
&lt;li&gt;Array.findIndex()&lt;/li&gt;
&lt;li&gt;JavaScript modules(better known as ES6 Modules)&lt;/li&gt;
&lt;li&gt;Iterables Object.entries&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In our next article, we shall go through each feature in a summarized format and learn why leveraging on these features makes us better JavaScript developers.&lt;br&gt;
Until next week,&lt;br&gt;
Adios!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>ndoejs</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>COVID Tracker App in  JS || 50 JS Project Challenge #3</title>
      <author>VECTOR3Studio</author>
      <pubDate>Thu, 06 Jan 2022 13:03:16 +0000</pubDate>
      <link>https://dev.to/vector3studio/covid-tracker-app-in-js-50-js-project-challenge-3-14bh</link>
      <guid>https://dev.to/vector3studio/covid-tracker-app-in-js-50-js-project-challenge-3-14bh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello"&gt;
  &lt;/a&gt;
  Hello 👋
&lt;/h2&gt;

&lt;p&gt;In this post I will show you how to make COVID Tracker App with COVID Tracking API.&lt;/p&gt;

&lt;p&gt;This is Part 3 of the 50 JS Project Challenge.&lt;/p&gt;

&lt;p&gt;So let's get into it.&lt;/p&gt;

&lt;p&gt;First, here is the video tutorial:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kMoi7uICisk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-lets-start-coding"&gt;
  &lt;/a&gt;
  So let's start coding.
&lt;/h3&gt;

&lt;p&gt;First, we need to create three files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;index.html&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;style.css&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;home.js&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we have those files created, we can start coding.&lt;/p&gt;

&lt;p&gt;Here is the code for index.html:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;COVID-19 in Slovakia&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container covid"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Total Cases: &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id = &lt;/span&gt;&lt;span class="s"&gt;"cases"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Total Deaths: &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id = &lt;/span&gt;&lt;span class="s"&gt;"deaths"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Population: &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id = &lt;/span&gt;&lt;span class="s"&gt;"population"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container covid"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Vaccinations: &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id = &lt;/span&gt;&lt;span class="s"&gt;"vaccinations"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Partially Vaccinated: &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id = &lt;/span&gt;&lt;span class="s"&gt;"partially"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"home.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are just creating a header with the Logo and About button.&lt;br&gt;
We are creating a text with information about COVID-19.&lt;/p&gt;

&lt;p&gt;Now it's time for styling!. Open our style.css and write this code in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&amp;amp;display=swap')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Poppins'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;13%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f5f5f5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#e5e5e5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have a font here declared, the font is Poopins.&lt;br&gt;
We are rewriting the default padding and margin and changing the font to Poopins. The other is just styling elements.&lt;/p&gt;

&lt;p&gt;Now let's move to the actual coding and fun part. So let's start programming in JavaScript&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://covid-api.mmediagroup.fr/v1//cases?country=Slovakia&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cases&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;All&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;confirmed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;deaths&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;All&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deaths&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;population&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;All&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;population&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So first, we need to decide, from what country we want the data. I'm fetching the Data from Slovakia. After Fetch, we need to take the response and write it to the JSON File as JS object. Then we need to take that JSON file and convert it into variable data so we can assign the variable to the actual text. So we are overwriting the numbers in the different elements.&lt;/p&gt;

&lt;p&gt;Now that we have COVID part done, let's move to the vaccination part.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://covid-api.mmediagroup.fr/v1//vaccines?country=Slovakia&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vaccinations&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;All&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;people_vaccinated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;partially&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;All&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;people_partially_vaccinated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are basically using the same method here, but assigning different elements.&lt;/p&gt;

&lt;p&gt;Now, we are done! Open your index.html and you should see results like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--la724nTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gndv9phsctb5q6lubifo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--la724nTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gndv9phsctb5q6lubifo.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it. You created your own COVID Tracking website with API. Congrats!&lt;/p&gt;

&lt;p&gt;Thanks for reading my post, and I hope I will see you next time. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Navigate the Web3 and Crypto Dev Scene with Kylee Fields (Nervos Network)</title>
      <author>Brian H. Hough</author>
      <pubDate>Thu, 06 Jan 2022 12:54:21 +0000</pubDate>
      <link>https://dev.to/brianhhough/how-to-navigate-the-web3-and-crypto-dev-scene-with-kylee-fields-nervos-network-19lm</link>
      <guid>https://dev.to/brianhhough/how-to-navigate-the-web3-and-crypto-dev-scene-with-kylee-fields-nervos-network-19lm</guid>
      <description>&lt;p&gt;From airdrops to DAOs to building full-stack decentralized applications on the blockchain, there are more opportunities than ever before to get involved in this decentralized future of tech in web3. &lt;/p&gt;

&lt;p&gt;In this episode of the &lt;a href="https://youtu.be/hFvGrvCpEsg"&gt;Tech Stack Playbook&lt;/a&gt;, I sit down with Kylee Fields (&lt;a class="mentioned-user" href="https://dev.to/kyleecodes"&gt;@kyleecodes&lt;/a&gt;), Tech &amp;amp; Community at Nervos Network, to break down all of the web3 excitement. Today's episode focuses on the web3 developer landscape, thoughts on the evolving blockchain space, some trending topics in crypto, and how anyone can get involved in the space right now.&lt;/p&gt;

&lt;p&gt;Since Kylee and I connected on Instagram a little over a year ago, I have been greatly impressed with her passion for tech, coding, and sharing her journey in STEM, blockchain, and software engineering. As a tech influencer and content creator, Kylee brings a unique and insightful experience to the tech industry, especially as someone who is heavily plugged into the blockchain space, so I was of course thrilled when we were finally able to do a LIVE for the Tech Stack Playbook.&lt;/p&gt;

&lt;p&gt;This episode is packed with value, so here's a glance at what you'll learn about below, and a series of sections further down in this blog post highlighting the important topics we discussed:&lt;/p&gt;

&lt;p&gt;Time stamps:&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=0s"&gt;00:00&lt;/a&gt; Welcoming &lt;a class="mentioned-user" href="https://dev.to/kyleecodes"&gt;@kyleecodes&lt;/a&gt; to the Tech Stack Playbook &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=55s"&gt;00:55&lt;/a&gt; Setting the scene of today's interview on web3&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=139s"&gt;02:19&lt;/a&gt; How Kylee &amp;amp; I became #devfriends on social media&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=228s"&gt;03:48&lt;/a&gt; Kylee's journey from biology to computer science&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=439s"&gt;07:19&lt;/a&gt; Self-taught developers are information seekers&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=555s"&gt;09:15&lt;/a&gt; The reason for blockchain, crypto, and NFTs current hype &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=693s"&gt;11:33&lt;/a&gt; Why 2021 web3 is so different from 2018 web3 &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=766s"&gt;12:46&lt;/a&gt; Comparing the Bill Gates Internet Interview to explaining blockchain&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=830s"&gt;13:50&lt;/a&gt; How crypto is making people question status quo's&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=896s"&gt;14:56&lt;/a&gt; Is crypto just about trading, or something more?&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=975s"&gt;16:15&lt;/a&gt; What digital ownership means&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=1100s"&gt;18:20&lt;/a&gt; Etherscan and information verification in a trust-less world&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=1254s"&gt;20:54&lt;/a&gt; Working on interoperability &amp;amp; crypto at Nervos Network&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=1375s"&gt;22:55&lt;/a&gt; How Nervos Network is solving important web3 challenges&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=1464s"&gt;24:24&lt;/a&gt; How Nervos is building for a multi-use web3 future&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=1585s"&gt;26:25&lt;/a&gt; What does DevRel (developer relations) look like in web3?&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=1895s"&gt;31:35&lt;/a&gt; Kylee's insights on how to build a career in tech&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=2060s"&gt;34:20&lt;/a&gt; Tech stacks for web3 + building on Nervos Network&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=2316s"&gt;38:36&lt;/a&gt; How can accessibility &amp;amp; inclusion get more people into tech?&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=2634s"&gt;43:54&lt;/a&gt; What should devs interested in blockchain look at to get started?&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=3042s"&gt;50:42&lt;/a&gt; The excitement of airdrops, DAOs, and $ENS governance tokens&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=a6-yniz3l1g&amp;amp;t=3640s"&gt;01:00:40&lt;/a&gt; What's been the most rewarding experience learning how to code&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/a6-yniz3l1g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-is-kylee-codes"&gt;
  &lt;/a&gt;
  👨‍💻 Who is Kylee Codes?
&lt;/h2&gt;

&lt;p&gt;Kylee Fields (who goes by &lt;a class="mentioned-user" href="https://dev.to/kyleecodes"&gt;@kyleecodes&lt;/a&gt; on social media), started coding in 2018 and has since become a freelance developer, a tech influencer with thousands of followers on social media, and currently runs community at Nervos Network. &lt;/p&gt;

&lt;p&gt;Additionally, as a technical community manager, Kylee is studying community building and combining her technical knowledge to serve the ever-growing Nervos Network community. Through technical support, networking, community building events, public appearances, and more, Kylee is on the forefront of the rapidly evolving community management sector in the crypto world.&lt;/p&gt;

&lt;p&gt;She started her career off as a biology student and throughout her youth was a fan of tech and the sciences. Kylee found herself specifically fascinated by biology and evolutionary biology through school. However, when she got to college, she was immediately drawn to the flexibility that programmers had in terms of their work schedules and the value developers can bring to the world through their craft.&lt;/p&gt;

&lt;p&gt;Similar to STEM, software engineering careers allow you to also solve programs and "engineer" solutions to issues that exist in the world. She decided to align her career path towards computers, thinking it would be a great way to continue her journey into STEM along with a flexible career path. The fact that you can be self-taught was also a huge draw for her, along with the real guarantees of work placements after studying as well. Getting a job can be really difficult in any market, but coding is one that has one of the least barriers to entry for folks that are motivated, driven, and committed to growth, like Kylee has found.&lt;/p&gt;

&lt;p&gt;To build her skills and experience, she started freelancing as a WordPress developer. This later led to an internship for BF Products, a supply chain management company, and then most recently Red Hat, an IBM subsidiary software company that provides open source software products to enterprises. &lt;/p&gt;

&lt;p&gt;Currently, she manages community for a global blockchain company called Nervos Network. Nervos is an EVM compatible layer 2 solution on Ethereum, that provides a fast, scalable, and familiar platform for building decentralized applications on the blockchain. Overall, Nervos Network is a cutting-edge, interoperable solution for blockchain connectivity, from NFTs and digital assets to cryptocurrencies and tokens, to solve the blockchain “Trilemma.” To learn more about the blockchain “Trilemma” and how Nervos is solving this, check out this &lt;a href="https://medium.com/nervosnetwork/how-to-move-beyond-blockchains-trilemma-6a10ae034e9f"&gt;blog post here&lt;/a&gt; from Nervos Lead Engineer, Jan Xie.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-start-your-career-in-software-engineering"&gt;
  &lt;/a&gt;
  👨‍💻 How to start your career in software engineering
&lt;/h2&gt;

&lt;p&gt;Kylee's voyage into the web3 and crypto ether is one that I am sure a lot of readers will be interested in. Particularly because of her switch from an earth science (biology) to a computer science (software engineering). &lt;/p&gt;

&lt;p&gt;When Kylee and I met virtually during the COVID-19 lockdown, we were taking courses, leveling up our skills, and making networks and connections. However, there were many practical steps Kylee took to build her career and level up.&lt;/p&gt;

&lt;p&gt;When she started freelancing as a web developer, she began googling companies in her home town to identify which of their Google Pages had incorrect data, the wrong hours, was not optimized efficiently, and so on. Stringing together these types Freelance gigs led to making $50 at each establishment. This inner drive as a "tech hustler" propelled her to see how the web2, and eventually the web3, space could provide not only job security, but work that can truly make a difference in the world. &lt;/p&gt;

&lt;p&gt;This then led to making WordPress sites for local businesses, while she continued going to school and tangentially continued self-teaching. This then led to two internships, the first with BF Products, and then this past summer with Red Hat. She describes her internship with Red Hat as her first doorway into the corporate world where she not only learned so much about open source softwares at scale, but also that it rounded out all of her skillsets coming from a small business background. She had been a fan of open source and Linux products for years, so the chance to really see this up front at Red Hat was very rewarding for her. &lt;/p&gt;

&lt;p&gt;Now as a Technical Community Consultant for Nervos Network, Kylee helps to run one of the top crypto and web3 Twitter Spaces "Hashing It Out", as well as assists with the management and growth of Nervos Network's global community.&lt;/p&gt;

&lt;p&gt;One of the key takeaways from Kylee's journey into tech is that all the skills you learn at each company compounds. Warren Buffett refers to this as compound interest via learning: "If you are investing in your education and you are learning, you should do that as early as you possibly can, because then it will have time to compound over the longest period" (&lt;a href="https://www.goodreads.com/quotes/9594306-if-you-are-investing-in-your-education-and-you-are"&gt;GoodReads&lt;/a&gt;) With Kylee's experiences, they continue to get bigger and bigger in scope and scale, so no doubt, I am excited to see where her career continues to go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finding-your-hype-beasts-in-web3"&gt;
  &lt;/a&gt;
  👨‍💻 Finding your "Hype Beasts" in Web3
&lt;/h2&gt;

&lt;p&gt;Something that both Kylee and I can attest to is how warm and welcoming the web3 community has been for us and for many currently entering the space. When you are entering a new career, field, or embarking on a new journey in highly technical industry like blockchain, the path to get to where you want to go can seem quite daunting and intimidating. While entering any field can have its ebbs and flows, it's so important to find your "Hype Beasts" — the people who pump you up, keep you motivated, peak your academic/technical interests, and keep you trudging through the unknown. &lt;/p&gt;

&lt;p&gt;The field of blockchain continues to be written as we speak, and by the time you read this blog post, there will undoubtedly be new tools, platforms, web3 integrations, frameworks, blockchains, NFTs, and tokens then when we did this live on Nov. 12. Forming a supportive network online is one the most important and most rewarding components of becoming a web3 developer.&lt;/p&gt;

&lt;p&gt;The beauty of having your inner community of "Hype Beasts" is that instead of going at it alone, you have a core community of people constantly fueling your drive to level up, be innovative, and show up to build (or BUIDL as they say).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-blockchain-development-is-getting-so-much-hype-right-now"&gt;
  &lt;/a&gt;
  👨‍💻 Why blockchain development is getting so much hype right now?
&lt;/h2&gt;

&lt;p&gt;First of all, we have to understand why this happening right now. To Kylee, she sees NFTs (Non-Fungible Tokens), DAOs (Decentralized Autonomous Organizations), "Flex Culture" now going mainstream, celebrities making NFT deals, and so on. "Blockchain [and crypto technologies and products] has reached mainstream. It's hard to ignore that. People want to get in on that now." Kylee said. &lt;/p&gt;

&lt;p&gt;What excites Kylee the most about these trends is the concept of "Digital Ownership." Digital Ownership is her favorite feature of blockchain technology, and while it has a ways to go, she sees this element as being vital to its long term prospects and longevity. As major corporations like EY, Sotheby's, Vayner Media, and more join into the NFT market, the hype cycle continues to promulgate. There are many big names in the space and their endorsement and utilization of blockchain and crypto technologies holds a great amount of weight in the in the global market, and in the traditional markets they usually play in.&lt;/p&gt;

&lt;p&gt;Personally, I often see a lot of parallels to web3's adoption with a &lt;a href="https://www.youtube.com/watch?v=gipL_CEw-fk"&gt;1995 interview with Bill Gates&lt;/a&gt; where he explains what the "Internet" is and why it is (and will be) so transformational to society. The obvious response for watching things on the internet at the time is, "ever hear of going outside?" or communicating with people in real time with "yea, ever hear of this thing called the Post Office?" Obviously this interview did not age well, but it is goes to show how important it is to stay on top of society-moving changes. Those who do not pick up technology skills or tools will be left back by those who push on and build the next foundation. This is happening right now with blockchain, crypto, and web3, so it is important to stay knowledgeable, learn, and build as Kylee does.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-crypto-just-trading-or-is-there-more-to-it"&gt;
  &lt;/a&gt;
  👨‍💻 Is crypto just trading, or is there more to it?
&lt;/h2&gt;

&lt;p&gt;As Kylee explains for us, there are cryptocurrencies (bucket #1), and blockchain technology - the umbrella term of cryptographic tools (bucket #2), which can be a physical item like an NFT or a coin like cryptocurrency.&lt;/p&gt;

&lt;p&gt;To frame this with the lens of digital ownership, Kylee makes a great point that you could create a "fake dollar bill" but there would be no way to actually verify the asset in question without intense analysis. Thanks to blockchain's open-varifiableness and authenticatable nature, we can analyze each transaction right down it's hash number. An incredible tool for blockchain research like this, as well as verifying transactions in general is &lt;a href="https://etherscan.io/"&gt;Etherscan&lt;/a&gt;. Thanks to tools like this, you can verify actions and legitimately prove the authenticity of the assets in question independent of "us."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#at-the-center-of-blockchain-and-crypto-at-nervos-what-is-kylee-focusing-on"&gt;
  &lt;/a&gt;
  👨‍💻 At the center of blockchain and crypto at Nervos, what is Kylee focusing on?
&lt;/h2&gt;

&lt;p&gt;Given the lack of connectedness with different blockchains today, Nervos is working on solving the interoperability conundrum.&lt;/p&gt;

&lt;p&gt;Comparatively speaking, as Kylee explains, Bitcoin is more of an asset storage layer, compared with a blockchain like Ethereum that has more transactional capabilities. "Where Nervos comes in with its CKB token is building a storage layer 2 on top of their token, to provide a storable digital object similar to Bitcoin with the capabilities of Ethereum on the second layer when it comes to how transactions are conducted. In a sense, they are combining the best of both Bitcoin and Ethereum into one CKB token for the world," as Kylee explained.&lt;/p&gt;

&lt;p&gt;As Kylee explained, Nervos uses RISC-V. Wasm was considered for Nervos, but RISC-V ultimately won out due to it's ability to meet the requirements from low-power micro processor to high-performance data center (DC) processor (given it's characteristics of transparency, simplicity, modularity, wide support and scalability!)&lt;/p&gt;

&lt;p&gt;The Nervos token, combining the best attributes of the two leading cryptocurrencies by market cap in the world will certainly make the network more future proof moving forward.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-been-the-most-rewarding-experience-learning-how-to-code"&gt;
  &lt;/a&gt;
  👨‍💻 What's been the most rewarding experience learning how to code?
&lt;/h2&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;If you have any questions about the application process, please reach out over social media or drop a comment below and I will respond!&lt;/p&gt;

&lt;p&gt;Check out the full recording below:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/a6-yniz3l1g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let me know if you found this post helpful! And if you haven't yet, make sure to check out these free resources below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Follow my Instagram for more: &lt;a href="https://instagram.com/brianhhough"&gt;@BrianHHough&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Watch my latest &lt;a href="https://youtube.com/brianhhough"&gt;YouTube video for more&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Listen to my Podcast on &lt;a href="https://podcasts.apple.com/us/podcast/tech-stack-playbook/id1553712082"&gt;Apple Podcasts&lt;/a&gt; and &lt;a href="https://open.spotify.com/show/01bHbabSyBmPfbc3ORMZa9?si=av_16aPbQEqL_bVu3RnO0g"&gt;Spotify&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Join my FREE &lt;a href="https://facebook.com/groups/techstackplaybook"&gt;Tech Stack Playbook Facebook Group&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Join entrepreneurs and developers in the &lt;a href="https://bit.ly/HelpMeDevDiscordLink"&gt;HelpMeDev Discord Server&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's digitize the world together! 🚀&lt;/p&gt;

&lt;p&gt;-- Brian&lt;/p&gt;

</description>
      <category>web3</category>
      <category>blockchain</category>
      <category>crypto</category>
      <category>nervos</category>
    </item>
    <item>
      <title>Should I ever have a role="button"?</title>
      <author>Vesa Piittinen</author>
      <pubDate>Thu, 06 Jan 2022 12:28:42 +0000</pubDate>
      <link>https://dev.to/merri/should-i-ever-have-a-rolebutton-4f3c</link>
      <guid>https://dev.to/merri/should-i-ever-have-a-rolebutton-4f3c</guid>
      <description>&lt;p&gt;The answer is no. You should always use &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However there exists &lt;strong&gt;one&lt;/strong&gt; valid niche use case. You have a design where you have an element that looks like a link inside other text. This means the element should wrap just like the text! So isn't this just a link? Well, there is a gotcha: for whatever reason the behavior of the element is not to navigate to another url but to do a button action.&lt;/p&gt;

&lt;p&gt;Now, you can argue that this is design gone bad, and you're right. However in real life it is hard to avoid this kind of issues since the process has to be good and people aware enough for this not to ever happen. So it keeps happening.&lt;/p&gt;

&lt;p&gt;How should we handle this use case?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-much-to-do"&gt;
  &lt;/a&gt;
  So much to do!
&lt;/h2&gt;

&lt;p&gt;The big problem when going ARIA route is the need to do so much to get things right. We have these considerations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Should visually behave like any other link would&lt;/li&gt;
&lt;li&gt;Should functionally behave like a button&lt;/li&gt;
&lt;li&gt;Should have focus indication&lt;/li&gt;
&lt;li&gt;Should be announced as button for a screen reader&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We would like to avoid all this. It would be so simple to just use &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt; and style it as a link. But can we do that?&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#visually-as-a-link"&gt;
  &lt;/a&gt;
  Visually as a link
&lt;/h3&gt;

&lt;p&gt;You could go ahead and duplicate your link styles for this element. You might also think that using &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt; element would be fine, just drop in &lt;code&gt;display: inline;&lt;/code&gt; and good to go, right?&lt;/p&gt;

&lt;p&gt;Well, the answer is &lt;strong&gt;no&lt;/strong&gt;. &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt; will never respect your &lt;code&gt;display: inline;&lt;/code&gt; no matter how much &lt;code&gt;!important&lt;/code&gt; you throw at it. It won't budge: it'll always be a minimum of &lt;code&gt;display: inline-block;&lt;/code&gt;. That's a bummer. Shouldn't CSS have control over everything?&lt;/p&gt;

&lt;p&gt;There are likely good historical reasons for buttons not to respect &lt;code&gt;display: inline;&lt;/code&gt;. To me it is enough to know that it just doesn't work. And because our use case is a link that should wrap just like all the other text, well, &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt; just simply can't meet that criteria.&lt;/p&gt;

&lt;p&gt;So what should we do then? Use a &lt;code&gt;&amp;lt;span /&amp;gt;&lt;/code&gt; element? It is a possibility. However I think it is easier to actually make use of the anchor element since this means you can handle the issue in your normal link styles! This kind of means "zero styles" necessary for a custom element, no need for &lt;code&gt;className&lt;/code&gt; etc.&lt;/p&gt;

&lt;p&gt;So what should our style rules look like?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Note: we support `&amp;lt;a role="button" /&amp;gt;` */&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* Provide your link color to anchor element. */&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;royalblue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c"&gt;/* Links have a pointer cursor. */&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c"&gt;/* Links probably should always have underline. */&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;underline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There aren't really much use for anchors on the web these days so this shouldn't cause any undesired side effects on any modern website.&lt;/p&gt;

&lt;p&gt;The nice thing about this is that you get to handle the issue with rather minimal CSS, and it can happen in your &lt;code&gt;normalize.css&lt;/code&gt; or equivalent place where you handle default styles. It makes sense since ideally we'll be using the native anchor element directly in our code, not a component that renders an anchor.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#functionally-like-a-button"&gt;
  &lt;/a&gt;
  Functionally like a button
&lt;/h3&gt;

&lt;p&gt;We can do just &lt;code&gt;&amp;lt;a onClick={() =&amp;gt; {}} /&amp;gt;&lt;/code&gt; and call it a day, right?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wrong!&lt;/strong&gt; You also need to add in keyboard functionality. And that means there are multiple related things that need to be done. First and foremost the element needs to become accessible by keyboard. For that we need &lt;code&gt;tabIndex&lt;/code&gt;!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;tabIndex&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Looks like a link!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So are we done? We can now focus the element with a keyboard and get a default focus indication on it, too! However there is more to a &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt; functionality. Links navigate when you press the enter key. Buttons do their action with enter. However buttons also do their action when you press the space key! And in this case we have an anchor element which reacts to neither, because &lt;strong&gt;anchor is not a link&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So we need to handle enter and space keys and add &lt;code&gt;onKeyDown&lt;/code&gt; handler.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;KeyboardEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isDefaultPrevented&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Enter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;tabIndex&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    Looks like a link!
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This event handler won't execute if &lt;code&gt;event.preventDefault()&lt;/code&gt; has been called by someone before this handler executes. It makes sense since we're implementing &lt;strong&gt;default behavior&lt;/strong&gt;. We are reimplementing how the web works so we also should behave similarly. So while it might be a rather edge case it is one potential future bug less when we respect the world of DOM, and give an option to skip the behavior.&lt;/p&gt;

&lt;p&gt;The other part of the first &lt;code&gt;if&lt;/code&gt; condition is to "make TypeScript happy".&lt;/p&gt;

&lt;p&gt;But hey, are we done?&lt;/p&gt;

&lt;p&gt;I'm happy to let you know that we are not done. There is one thing in Firefox: it lets you drag anchor elements. However we don't want this behavior and it is a bit annoying that element might start moving upon click, and then not click due to entering dragging mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;
    &lt;span class="na"&gt;draggable&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;onDragStart&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DragEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;tabIndex&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    Looks like a link!
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Darn it. How to remember all of that? You might be able to omit &lt;code&gt;draggable&lt;/code&gt; but it might be a safer bet to have it to let everything absolutely know that we don't want dragging on this element.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#announced-as-a-button"&gt;
  &lt;/a&gt;
  Announced as a button
&lt;/h3&gt;

&lt;p&gt;This is one more attribute, but this time we can get through with just one addition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;
    &lt;span class="na"&gt;draggable&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;onDragStart&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DragEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;
    &lt;span class="na"&gt;tabIndex&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    Looks like a link!
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that we are &lt;strong&gt;finally done&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;But... that is awful lot of code to repeat every single time we have a need for this, and it is too easy to forget something being done.&lt;/p&gt;

&lt;p&gt;One solution would be to make this a component. Call it a &lt;code&gt;TextLinkButton&lt;/code&gt; or something! However there is one gotcha with components: it hides the semantics of what we're doing. People also expect components to contain their own styles, but in this case we want to rely on default or generic styles. So by making this a component we break one ideal, or an expectation other developers might have.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#utility-props"&gt;
  &lt;/a&gt;
  Utility props
&lt;/h2&gt;

&lt;p&gt;There is another way to deal with the issue of too many props: just provide an object to be shared!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// buttonRoleProps.ts&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;KeyboardEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isDefaultPrevented&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Enter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/** Usage: `&amp;lt;a {...buttonRoleProps} /&amp;gt;` */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buttonRoleProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTMLProps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;draggable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;onDragStart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;tabIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These props have been designed so that references to functions remain always the same.&lt;/p&gt;

&lt;p&gt;There is of course one tradeoff being made here: if for whatever reason you need to customize &lt;code&gt;onKeyDown&lt;/code&gt; you have to re-implement the space and enter key support. However I feel like this is becoming such a niche case of a niche case that it is just better add documentation to the utility like "remember to handle space and enter keys if you use custom &lt;code&gt;onKeyDown&lt;/code&gt; handler" rather than solving the issue.&lt;/p&gt;

&lt;p&gt;With that we now have a rather complete solution with very few lines of additional CSS, and with minimal JavaScript code! All needs for basic button behavior and expectations have been tackled, and developer experience is very simple as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;This is text &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;buttonRoleProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;that has button looking like a link&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; within!&lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#but-solving-the-issue"&gt;
  &lt;/a&gt;
  But solving the issue
&lt;/h3&gt;

&lt;p&gt;Overkill mode is now active. In my opinion this is absolutely too much code for this issue.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// buttonize.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;buttonRoleProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./buttonRoleProps&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;WeakMap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buttonize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;JSX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTMLProps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;JSX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTMLProps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;buttonRoleProps&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;onKeyDown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onKeyDown&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onKeyDown&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;
        &lt;span class="c1"&gt;// having this memoize might also be overkill...&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;buttonRoleProps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;buttonRoleProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isValidElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;buttonize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;buttonRoleProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What you can now do with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// use as props:&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;buttonize&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onKeyDown&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;I can have focus&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// pass in element:&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;buttonize&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;I can have focus&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// compared to (here onKeyDown would also have to handle enter &amp;amp; space):&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;buttonRoleProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onKeyDown&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;I can have focus&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For some other use case this kind of helper utility might be worth it. But here? We're dealing with just one function callback that needs the default behavior to be available after a custom handler. Which is likely not needed, ever, in any project.&lt;/p&gt;

&lt;p&gt;Of course the code amount isn't &lt;strong&gt;that bad&lt;/strong&gt; but it's still something for something that isn't really needed.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#closing-it"&gt;
  &lt;/a&gt;
  Closing it
&lt;/h2&gt;

&lt;p&gt;So what did we learn here? Well, there are quite a bit of considerations to make an element work like a real button! Doesn't this highlight how much work the native web standards do for you that you might never wonder about yourself? Embrace the &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt;, always! It is a truly awesome little piece of code. Even if you probably have to write &lt;code&gt;&amp;lt;button type="button" /&amp;gt;&lt;/code&gt; way too often, because not every button is a submit button!&lt;/p&gt;

&lt;p&gt;There is still also one little consideration that occurred to me while making this article: &lt;code&gt;user-select: none;&lt;/code&gt;. This is how typical buttons behave regarding text selection. So why didn't I bring it up earlier? Because after thinking about it we're dealing with a &lt;strong&gt;text link&lt;/strong&gt;. You are supposed to be able to select the text, and should not disable it here. The button made here looks like it is part of the text so that is an expected behavior.&lt;/p&gt;

&lt;p&gt;But if at all possible, please avoid having a need for this in the first place! Yes, I know, it keeps happening to everyone. It always finds it's way in at some point when people develop websites. But maybe consider your design and development process and how it would make sure usability and tech specs are met in design?&lt;/p&gt;

&lt;p&gt;So that it would be noticed that "hey, this isn't really a link, it is a button, it shouldn't look like a link" can happen when features are still in the design pipeline and not during development when changing a design on-the-fly might be rather costly. And then we end up with anchor elements that look like links that are really buttons. Or something worse.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Telegram bot with Django</title>
      <author>UlugbekMuslitdinov</author>
      <pubDate>Thu, 06 Jan 2022 12:23:45 +0000</pubDate>
      <link>https://dev.to/ulugbekmuslitdinov/telegram-bot-with-django-8b2</link>
      <guid>https://dev.to/ulugbekmuslitdinov/telegram-bot-with-django-8b2</guid>
      <description>&lt;p&gt;Hi everyone. Recently I faced a problem with integrating the Telegram bot with Django. At first look, it looks very simple. There are several ways you can connect them. I think most of you will use API to integrate them. But it is a hard way of implementing this. Using this method you will need to open API in Django, make the authorization through REST API, write methods separately for Telegram bot and so more... It is an effective way if you have a simple Django application. But in my project, It would take much more time, because it was a complicated project. So I started looking for a simpler way of implementing it. After surfing the internet for several days and finding several wrong ways of it, I found the right method. And this method made my work much simpler, so I don't need to open the API from Django and write separate methods for the Telegram bot. The bot works directly from the Django server. It turns on when you start the Django server and turns off when you shut the server off. And I want to share this method with you.&lt;/p&gt;

&lt;p&gt;First, you should set a webhook for your bot, so Telegram knows where to send requests for your bot. In this step, you will need a production server set, because the localhost is not reachable for Telegram. If you want to set webhook with your local machine, I recommend you use &lt;a href="https://ngrok.com/"&gt;NGROK&lt;/a&gt;. It allows you to make your local server for public usage. After you configure your production server go to &lt;code&gt;https://api.telegram.org/botYOUR-TOKEN/setWebhook?url=YOUR-URL&lt;/code&gt; . This website should return a response like below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;"ok"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nl"&gt;"result"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Webhook was set"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the webhook is set, just copy the code from my &lt;a href="https://gist.github.com/UlugbekMuslitdinov/023482dcf264785109ea67c1577a8146"&gt;GitHub Gist&lt;/a&gt; and paste it to your Django project. And, of course, write your bot token in the appropriate place.&lt;/p&gt;

&lt;p&gt;I hope you will like this method.&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>telebot</category>
      <category>telegram</category>
    </item>
    <item>
      <title>Why is redux state immutable?</title>
      <author>SuperTokens</author>
      <pubDate>Thu, 06 Jan 2022 12:18:00 +0000</pubDate>
      <link>https://dev.to/supertokens/why-is-redux-state-immutable-5359</link>
      <guid>https://dev.to/supertokens/why-is-redux-state-immutable-5359</guid>
      <description>&lt;p&gt;For redux to work correctly, the state must be immutable. This means that whenever we update the redux state, we have to create a copy of the whole state and set values to fields we want to change. In code, this usually looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let newState = {
    ...oldState,
    field1: {
        ...oldState.field1,
        field2: "someNewValue"
    },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, we are modifying the oldState’s &lt;code&gt;field2&lt;/code&gt; value by creating a new state and setting a new value to &lt;code&gt;field2&lt;/code&gt;. The value and reference of &lt;code&gt;oldState&lt;/code&gt; remains the same.&lt;/p&gt;

&lt;p&gt;Before we get into why we must change redux state in this way, we should know the difference between “value” and “reference”&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#difference-between-value-and-reference"&gt;
  &lt;/a&gt;
  Difference between value and reference
&lt;/h2&gt;




&lt;p&gt;The value of a variable is the “semantic” meaning of what that variable holds. For example, in the example code below, the semantics of what is held by &lt;code&gt;var1&lt;/code&gt; and &lt;code&gt;var2&lt;/code&gt; are the same, therefore we can say that their values are the same. However, &lt;code&gt;var3&lt;/code&gt;’s value is different since the “semantics” of what it’s holding is different.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let var1 = { name: "John", age: 20}
let var2 = { name: "John", age: 20}

let var3 = { name: "May", age: 30}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we talk about reference, we are referring (pun intended!) to the memory address of where something is stored. So in the above example, the memory address of the object referenced by &lt;code&gt;var1&lt;/code&gt;, is different from the memory address of the object referenced by &lt;code&gt;var2&lt;/code&gt;. In other words, &lt;code&gt;var1&lt;/code&gt; points to a different memory address than &lt;code&gt;var2&lt;/code&gt;. Therefore, their references are different, even though their values are the same!&lt;/p&gt;

&lt;p&gt;The only way two variables can have the same reference is when they are both pointing to the same memory address. So in the code below, &lt;code&gt;var4&lt;/code&gt; and &lt;code&gt;var5&lt;/code&gt; have the same reference:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let var4 = { name: "Jeremy",  age: 50}
let var5 = var4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we do &lt;code&gt;var5.name = “Mary”&lt;/code&gt;, then the value of &lt;code&gt;var4.name&lt;/code&gt; will also be “Mary”.&lt;/p&gt;

&lt;p&gt;Based on this understanding, we can conclude:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the value of two variables are the same, their reference may or may not be the same.&lt;/li&gt;
&lt;li&gt;If the values of two variables are different, then their references must be different.&lt;/li&gt;
&lt;li&gt;If the reference of two variables are the same, their values must be the same.&lt;/li&gt;
&lt;li&gt;If the reference of two variables are different, their values may or may not be the same.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#re-rendering-of-react-components"&gt;
  &lt;/a&gt;
  Re rendering of react components
&lt;/h2&gt;




&lt;p&gt;Coming back to redux and react, react will only want to re render a component if the value of the props or state has changed. To know if a value of these have changed, we must do a “deep comparison” - recursively check all the fields inside the state and prop to see if any of them have changed. &lt;/p&gt;

&lt;p&gt;Large applications usually have a very deep state structure when using redux - several nested levels (in the count of 100s or even 1000s). Doing a deep comparison here, perhaps several times every second, will slow down the UI. On the other hand, if we do a “shallow comparison” (where we only check if the values of the first level fields have changed), it will be much quicker, but we may miss out on updates - breaking application logic. An example of how we might miss out on updates with shallow comparison is presented below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let oldState = {
    name: "John",
    age: 20,
    profession: {
        title: "Software Engineer",
        organization: "SuperTokens.io"
    }
}

let newState = oldState

newState.profession.title = "Senior Software Engineer"

// Shallow comparison. upto level one
if (newState !== oldState || oldState.name !== newState.name || oldState.age !== newState.age || oldState.profession !== newState.profession) {
    // Update UI
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#optimising-with-the-immutability-rule"&gt;
  &lt;/a&gt;
  Optimising with the immutability rule
&lt;/h2&gt;




&lt;p&gt;The problem of rerendering could be solved if we could somehow just do a shallow reference check, without missing out on updates. This would give us the performance we need and not break the application’s logic.&lt;/p&gt;

&lt;p&gt;Based on what we saw in the previous sections, we know that “if the reference of two variables (state variables in this case) are different, their values may or may not be the same.”. What if we change this to “if and only if the reference of two variables (state variables in this case) are different, we should assume that their values are different.”. What happens now?&lt;/p&gt;

&lt;p&gt;If the above change is enforced, then to know if a state’s value has changed, we can just do a reference check like &lt;code&gt;oldState === newState&lt;/code&gt; (if this is &lt;code&gt;false&lt;/code&gt;, then the reference has changed). If the reference has changed, then we can assume that the values must have changed and trigger a render. If not, then we do not rerender.&lt;/p&gt;

&lt;p&gt;To enforce this assumption, we must never directly change the fields inside &lt;code&gt;oldState&lt;/code&gt;. Instead, we must always create a new copy of &lt;code&gt;oldState&lt;/code&gt; (in &lt;code&gt;newState&lt;/code&gt;), just like we showed at the start of this article, and make modifications in &lt;code&gt;newState&lt;/code&gt;. Since &lt;code&gt;newState&lt;/code&gt; is a new object, its reference will always be different than that of &lt;code&gt;oldState&lt;/code&gt;. This is known as enforcing immutability of state - exactly what redux enforces its users to do!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;




&lt;p&gt;Immutability of redux state is necessary since it allows detecting redux state changes in an efficient manner. This implies that whenever we want to modify a redux state, we must create a new copy of it and do modifications to that copy - which then becomes the new redux state.&lt;/p&gt;

&lt;p&gt;Written by the Folks at &lt;a href="https://supertokens.io/blog/why-is-redux-state-immutable"&gt;SuperTokens&lt;/a&gt; — hope you enjoyed! We are always available on our &lt;a href="https://supertokens.io/discord"&gt;Discord&lt;/a&gt; server. Join us if you have any questions or need any help.&lt;/p&gt;

</description>
      <category>security</category>
      <category>opensource</category>
      <category>redux</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Código simples é diferente de código simplista: Elm vs JavaScript</title>
      <author>Marcio Frayze</author>
      <pubDate>Thu, 06 Jan 2022 11:51:27 +0000</pubDate>
      <link>https://dev.to/marciofrayze/codigo-simples-e-diferente-de-codigo-simplista-elm-vs-javascript-4cnf</link>
      <guid>https://dev.to/marciofrayze/codigo-simples-e-diferente-de-codigo-simplista-elm-vs-javascript-4cnf</guid>
      <description>&lt;p&gt;Existem linguagens, &lt;em&gt;frameworks&lt;/em&gt; e bibliotecas que se esforçam para permitir que seja possível realizar tarefas relativamente complexas escrevendo poucas linhas de código. &lt;em&gt;JavaScript&lt;/em&gt; é um bom exemplo. Para fazer uma chamada &lt;em&gt;http&lt;/em&gt; para uma página do meu site usando esta linguagem, basta escrever uma única linha:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://segunda.tech/sobre&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A maioria das pessoas provavelmente não considera este código é difícil ou complexo, mas podem existir cenários de erros escondidos que não são triviais de tratar. Para analisar isso, vou mostrar uma implementação de uma pequena página utilizando &lt;em&gt;JavaScript&lt;/em&gt; puro e discutir os potencias problemas. Em seguida vou mostrar como implementar a mesma solução utilizando a linguagem de programação &lt;em&gt;&lt;a href="https://elm-lang.org"&gt;Elm&lt;/a&gt;&lt;/em&gt; e analisar os mesmos pontos. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exerc%C3%ADcio-recuperando-os-nomes-dos-pok%C3%A9mons"&gt;
  &lt;/a&gt;
  Exercício: recuperando os nomes dos Pokémons
&lt;/h2&gt;

&lt;p&gt;Para exemplificar o problema que quero discutir neste artigo, implementei em &lt;em&gt;html&lt;/em&gt; e &lt;em&gt;JavaScript&lt;/em&gt; puro (utilizando &lt;em&gt;Ajax&lt;/em&gt;) o mínimo necessário para exibir uma lista com nomes de Pokémons. Para isso utilizei a &lt;em&gt;API&lt;/em&gt; do site &lt;a href="https://pokeapi.co"&gt;PokéAPI&lt;/a&gt;. O &lt;em&gt;endpoint&lt;/em&gt; para recuperar a lista dos 5 primeiros Pokémons é bem simples: basta acionar a &lt;em&gt;URL&lt;/em&gt; &lt;code&gt;https://pokeapi.co/api/v2/pokemon?limit=5&lt;/code&gt; e o retorno será um &lt;em&gt;json&lt;/em&gt; contendo o resultado abaixo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"count"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1118&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"next"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://pokeapi.co/api/v2/pokemon?offset=5&amp;amp;limit=5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"previous"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"results"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"bulbasaur"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://pokeapi.co/api/v2/pokemon/1/"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ivysaur"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://pokeapi.co/api/v2/pokemon/2/"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"venusaur"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://pokeapi.co/api/v2/pokemon/3/"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"charmander"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://pokeapi.co/api/v2/pokemon/4/"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"charmeleon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://pokeapi.co/api/v2/pokemon/5/"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Neste exercício o objetivo é recuperar estes dados de forma assíncrona e listar na página &lt;em&gt;html&lt;/em&gt; apenas o conteúdo do campo &lt;em&gt;name&lt;/em&gt; (que está dentro de &lt;em&gt;result&lt;/em&gt;). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementando-uma-solu%C3%A7%C3%A3o-utilizando-html-e-javascript-puro"&gt;
  &lt;/a&gt;
  Implementando uma solução utilizando &lt;em&gt;html&lt;/em&gt; e &lt;em&gt;JavaScript&lt;/em&gt; puro
&lt;/h2&gt;

&lt;p&gt;Existem várias formas de se resolver este problema utilizando estas tecnologias. Abaixo apresento a minha implementação.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"pt-BR"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Lista de Pokémons em HTML e JavaScript&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"author"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Marcio Frayze David"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"loading-message"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Carregando lista de nomes dos Pokémons, aguarde...
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"pokemon-names-list"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://pokeapi.co/api/v2/pokemon?limit=5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataJson&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dataJson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;addNamesToDOM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

      &lt;span class="nx"&gt;hideLoadingMessage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="p"&gt;})();&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addNamesToDOM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pokemonNamesListElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pokemon-names-list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;addNameToDOM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pokemonNamesListElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addNameToDOM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pokemonNamesListElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newListElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;newListElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
      &lt;span class="nx"&gt;pokemonNamesListElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newListElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hideLoadingMessage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loading-message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visibility&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A ideia é que ao finalizar a chamada &lt;em&gt;Ajax&lt;/em&gt;, a mensagem de carregamento deixe de aparecer e a lista contendo os nomes dos Pokémons seja carregada dentro da &lt;em&gt;tag&lt;/em&gt; com o &lt;em&gt;id&lt;/em&gt; &lt;em&gt;pokemons-names-list&lt;/em&gt;. Publiquei &lt;a href="https://jsfiddle.net/027p8sa9"&gt;esta página no editor &lt;em&gt;on-line&lt;/em&gt; &lt;em&gt;JSFiddle&lt;/em&gt;&lt;/a&gt; para que veja o comportamento esperado.&lt;/p&gt;

&lt;p&gt;Sei que dificilmente alguém escreveria um código desta forma. Não usei nenhum &lt;em&gt;framework&lt;/em&gt; ou biblioteca externa e fiz algumas coisas que muitos considerariam más práticas (como por exemplo colocar o código &lt;em&gt;JavaScript&lt;/em&gt; direto no &lt;em&gt;html&lt;/em&gt;). Mas mesmo que tivesse implementado esta solução com tecnologias populares como &lt;em&gt;&lt;a href="https://pt-br.reactjs.org"&gt;React&lt;/a&gt;&lt;/em&gt;, &lt;em&gt;&lt;a href="https://en.wikipedia.org/wiki/JSX_(JavaScript)"&gt;JSX&lt;/a&gt;&lt;/em&gt; e &lt;em&gt;&lt;a href="https://axios-http.com"&gt;Axios&lt;/a&gt;&lt;/em&gt;, os potencias problemas que quero discutir aqui provavelmente ainda existiriam.&lt;/p&gt;

&lt;p&gt;Analisando o código acima, as perguntas que gostaria que você tentasse responder são:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O que vai acontecer caso ocorra um &lt;em&gt;timeout&lt;/em&gt; na chamada &lt;em&gt;Ajax&lt;/em&gt;? &lt;/li&gt;
&lt;li&gt;Se o servidor voltar um &lt;em&gt;status http&lt;/em&gt; de falha, o que vai acontecer?&lt;/li&gt;
&lt;li&gt;Se o servidor retornar um &lt;em&gt;status http&lt;/em&gt; de sucesso mas o formato do conteúdo retornado for diferente do esperado, o que vai acontecer?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O código acima não responde nenhuma destas perguntas de forma clara. É fácil visualizar o "caminho feliz", mas qualquer situação inesperada não esta sendo tratada de forma explícita. E embora nunca devêssemos colocar um código em produção que não trate estes cenários, a linguagem &lt;em&gt;JavaScript&lt;/em&gt; não nos &lt;strong&gt;obriga&lt;/strong&gt; a lidar com eles. Caso alguém do seu time esqueça de fazer o tratamento adequado para um desses potenciais problemas, o resultado será um &lt;strong&gt;erro em tempo de execução&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Se o seu time tiver azar, talvez estes cenários só apareçam quando o código já estiver em produção. E quando isso inevitavelmente acontecer, é bem provável que coloquem a culpa na pessoa desenvolvedora que implementou aquela parte do sistema.&lt;/p&gt;

&lt;p&gt;Mas se sabemos que este tipo de situação precisa obrigatoriamente ser tratada, &lt;strong&gt;por que as linguagens, &lt;em&gt;frameworks&lt;/em&gt; e bibliotecas permitem que este tipo de código seja escrito?&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-que-%C3%A9-uma-solu%C3%A7%C3%A3o-simples"&gt;
  &lt;/a&gt;
  O que é uma solução &lt;strong&gt;simples&lt;/strong&gt;?
&lt;/h2&gt;

&lt;p&gt;Existe uma diferença grande entre uma solução ser &lt;strong&gt;simples&lt;/strong&gt; e ser &lt;strong&gt;simplista&lt;/strong&gt;. Esta solução que escrevi em &lt;em&gt;JavaScript&lt;/em&gt; não é simples, mas simplista, já que ela ignora aspectos fundamentais do problema em questão.&lt;/p&gt;

&lt;p&gt;Já linguagens como &lt;em&gt;&lt;a href="https://elm-lang.org"&gt;Elm&lt;/a&gt;&lt;/em&gt;, por sua vez, tendem a nos &lt;strong&gt;obrigar&lt;/strong&gt; a pensar e implementar a solução para todos os potenciais cenários de problemas. O código final provavelmente será maior, mas trará consigo a garantia de que não vamos ter &lt;strong&gt;nenhum erro em tempo de execução&lt;/strong&gt;, já que o compilador verifica e impõe que a pessoa desenvolvedora trate todos os caminhos possíveis, não deixando espaço para falhas previsíveis.&lt;/p&gt;

&lt;p&gt;Claro que isso não significa que &lt;em&gt;webapps&lt;/em&gt; criadas nesta linguagem estão isentas de todo e qualquer tipo de erro. Podem ocorrer problemas na lógica de negócio e a aplicação ter um comportamento inesperado, ou aspectos visuais do sistema podem não estar como gostaríamos. Mas aqueles erros previsíveis, que podem ser encontrados por um compilador, vão deixar de existir. Um bom exemplo é o famoso &lt;em&gt;&lt;strong&gt;Undefined is not a function&lt;/strong&gt;&lt;/em&gt; do &lt;em&gt;JavaScript&lt;/em&gt;. Já em &lt;em&gt;Elm&lt;/em&gt;, &lt;strong&gt;é impossível escrever um código que resulte em qualquer erro de &lt;em&gt;runtime&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Outra vantagem desta abordagem é que temos um código realmente &lt;strong&gt;auto-documentado&lt;/strong&gt;. Deve ficar muito claro, por exemplo, qual o formato do retorno esperado, quais campos são obrigatórios e quais são opcionais, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementando-a-mesma-solu%C3%A7%C3%A3o-em-elm"&gt;
  &lt;/a&gt;
  Implementando a mesma solução em &lt;em&gt;Elm&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;Agora vamos analisar uma solução escrita em &lt;em&gt;&lt;a href="https://elm-lang.org"&gt;Elm&lt;/a&gt;&lt;/em&gt; para este mesmo problema. Se você não conhece essa linguagem (ou alguma outra similar, como &lt;em&gt;&lt;a href="https://haskell.org"&gt;Haskell&lt;/a&gt;&lt;/em&gt; ou &lt;em&gt;&lt;a href="https://purescript.org"&gt;PureScript&lt;/a&gt;&lt;/em&gt;), provavelmente vai achar a sua sintaxe um pouco estranha. Mas não se preocupe, você não precisa entender totalmente este código para compreender a proposta deste artigo.&lt;/p&gt;

&lt;p&gt;Primeiro precisamos de um arquivo &lt;em&gt;html&lt;/em&gt; simples, que irá hospedar nossa página. Esta abordagem é bastante similar ao que é feito quando utilizamos ferramentas como &lt;em&gt;&lt;a href="https://pt-br.reactjs.org"&gt;React&lt;/a&gt;&lt;/em&gt; ou &lt;em&gt;&lt;a href="https://br.vuejs.org"&gt;Vue&lt;/a&gt;&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"pt-BR"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Lista de Pokémons em HTML e Elm&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"author"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Marcio Frayze David"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;Elm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Desta vez nosso &lt;em&gt;html&lt;/em&gt; quase não tem lógica. Ele apenas irá carregar a aplicação escrita em &lt;em&gt;Elm&lt;/em&gt; (previamente compilada) e colocar seu conteúdo dentro da &lt;em&gt;tag&lt;/em&gt; &lt;em&gt;main&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Agora sim a parte interessante: o código escrito em &lt;em&gt;Elm&lt;/em&gt;. Vou primeiro listar o código por completo e depois destacar e comentar algumas partes mais relevantes para o tema deste artigo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elm"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="kt"&gt;Main&lt;/span&gt; &lt;span class="k"&gt;exposing&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Browser&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Html&lt;/span&gt; &lt;span class="k"&gt;exposing&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Http&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Decode&lt;/span&gt; &lt;span class="k"&gt;exposing&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Decoder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;-- MAIN&lt;/span&gt;


&lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="kt"&gt;Browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subscriptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subscriptions&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;-- MODEL&lt;/span&gt;


&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="k"&gt;alias&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Failure&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Loading&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Success&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Cmd&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Loading&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fetchPokemonNames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;-- UPDATE&lt;/span&gt;


&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;FetchedPokemonNames&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Result&lt;/span&gt; &lt;span class="kt"&gt;Http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Error&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Cmd&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;

    &lt;span class="kt"&gt;FetchedPokemonNames&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;
        &lt;span class="kt"&gt;Ok&lt;/span&gt; &lt;span class="n"&gt;pokemonsInfo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Success&lt;/span&gt; &lt;span class="n"&gt;pokemonsInfo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="kt"&gt;Err&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Failure&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;-- SUBSCRIPTIONS&lt;/span&gt;


&lt;span class="n"&gt;subscriptions&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Sub&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="n"&gt;subscriptions&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="kt"&gt;Sub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;


&lt;span class="c1"&gt;-- VIEW&lt;/span&gt;


&lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Html&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;
    &lt;span class="kt"&gt;Failure&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Por alguma razão, não foi possível carregar a lista com nome dos Pokémons. 😧"&lt;/span&gt;

    &lt;span class="kt"&gt;Loading&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Carregando lista de nomes dos Pokémons, aguarde..."&lt;/span&gt;

    &lt;span class="kt"&gt;Success&lt;/span&gt; &lt;span class="n"&gt;pokemonsInfo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;viewPokemonInfo&lt;/span&gt; &lt;span class="n"&gt;pokemonsInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 


&lt;span class="n"&gt;viewPokemonInfo&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Html&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="n"&gt;viewPokemonInfo&lt;/span&gt; &lt;span class="n"&gt;pokemonInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="n"&gt;pokemonInfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="c1"&gt;-- HTTP&lt;/span&gt;


&lt;span class="n"&gt;fetchPokemonNames&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Cmd&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="n"&gt;fetchPokemonNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="kt"&gt;Http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://pokeapi.co/api/v2/pokemon?limit=5"&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expectJson&lt;/span&gt; &lt;span class="kt"&gt;FetchedPokemonNames&lt;/span&gt; &lt;span class="n"&gt;decoder&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="n"&gt;pokemonInfoDecoder&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Decoder&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt;
&lt;span class="n"&gt;pokemonInfoDecoder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="kt"&gt;Json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Decode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Decode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name"&lt;/span&gt; &lt;span class="kt"&gt;Json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Decode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;decoder&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Decoder&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
&lt;span class="n"&gt;decoder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="kt"&gt;Json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Decode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;results"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Decode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="n"&gt;pokemonInfoDecoder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Publiquei &lt;a href="https://ellie-app.com/gj4f6Cpw4XBa1"&gt;esta página no editor online &lt;em&gt;Ellie&lt;/em&gt;&lt;/a&gt; para que possa ver este &lt;em&gt;webapp&lt;/em&gt; em funcionamento. Recomendo que tente alterar o código e veja o que acontece. É uma ótima forma de começar a experimentar a linguagem &lt;em&gt;Elm&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#analisando-a-implementa%C3%A7%C3%A3o-em-elm"&gt;
  &lt;/a&gt;
  Analisando a implementação em &lt;em&gt;Elm&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;Não irei neste artigo explicar todo este código e a arquitetura por trás da linguagem &lt;em&gt;Elm&lt;/em&gt;. Mas queria destacar algumas partes importantes para o contexto da discussão deste artigo, começando pela definição dos nossos &lt;em&gt;types&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#defini%C3%A7%C3%A3o-de-tipos"&gt;
  &lt;/a&gt;
  Definição de tipos
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt;
  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Loading&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Failure&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Success&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No código acima primeiro é definido um &lt;em&gt;type alias&lt;/em&gt;, tornando mais claro para pessoa que está lendo o código o que é um &lt;em&gt;PokemonInfo&lt;/em&gt; (neste caso, uma estrutura com um campo chamado &lt;em&gt;name&lt;/em&gt; do tipo &lt;em&gt;String&lt;/em&gt;). Isso também facilitará a vida do nosso compilador, permitindo que faça o tratamento de erro adequado quando necessário e, durante a fase de compilação, consiga emitir mensagens de erros mais informativas.&lt;/p&gt;

&lt;p&gt;Em seguida, definimos um &lt;em&gt;type&lt;/em&gt; chamado &lt;em&gt;Model&lt;/em&gt; que será utilizado para representar o estado atual da nossa aplicação. Neste exemplo, nossa &lt;em&gt;webapp&lt;/em&gt; pode estar em um (e apenas um) dos 3 possíveis estados:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Loading&lt;/em&gt;: estado inicial da aplicação, indicando que a requisição &lt;em&gt;http&lt;/em&gt; ainda está sendo processada.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Failure&lt;/em&gt;: representa um estado de falha, indicando que ocorreu algum problema ao realizar a chamada &lt;em&gt;http&lt;/em&gt; ao servidor (podendo ser &lt;em&gt;timeout&lt;/em&gt;, falha no &lt;em&gt;parsing&lt;/em&gt; da mensagem de retorno, etc).&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Success&lt;/em&gt;: indica que a requisição foi realizada e seu retorno convertido com sucesso.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dos três estados definidos, apenas o &lt;em&gt;Success&lt;/em&gt; possui uma informação extra associada a ele: uma lista contendo elementos do tipo &lt;em&gt;PokemonInfo&lt;/em&gt;. Note que isso não deixa espaço para ambiguidades. Se tivermos um estado de sucesso, &lt;strong&gt;obrigatoriamente&lt;/strong&gt; temos uma lista de &lt;em&gt;PokemonInfo&lt;/em&gt; definida e com uma estrutura válida. E o contrário também: em caso de falha, a lista com os nomes dos Pokémons não estará definida.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-constru%C3%A7%C3%A3o-da-p%C3%A1gina"&gt;
  &lt;/a&gt;
  A construção da página
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Elm&lt;/em&gt; foi uma das pioneiras em utilizar o conceito de &lt;em&gt;DOM&lt;/em&gt; virtual e programação declarativa no desenvolvimento de &lt;em&gt;webapp&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Na &lt;a href="https://guide.elm-lang.org/architecture"&gt;arquitetura do &lt;em&gt;Elm&lt;/em&gt;&lt;/a&gt;, existe uma separação bastante clara entre o &lt;strong&gt;estado&lt;/strong&gt; da nossa aplicação e o que deve ser exibido na tela. É responsabilidade da função &lt;em&gt;view&lt;/em&gt; montar, a partir do estado atual da nossa aplicação, uma representação da nossa &lt;em&gt;DOM&lt;/em&gt; virtual. E toda vez que o estado for alterado (quando, por exemplo, terminar de carregar os dados com nomes dos Pokémons) esta função será reavaliada e uma nova &lt;em&gt;DOM&lt;/em&gt; virtual criada. &lt;/p&gt;

&lt;p&gt;Em nosso exemplo, isso ocorre no seguinte trecho de código:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elm"&gt;&lt;code&gt;&lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Html&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;
    &lt;span class="kt"&gt;Failure&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Por alguma razão, não foi possível carregar a lista com nome dos Pokémons. 😧"&lt;/span&gt;

    &lt;span class="kt"&gt;Loading&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Carregando lista de nomes dos Pokémons, aguarde..."&lt;/span&gt;

    &lt;span class="kt"&gt;Success&lt;/span&gt; &lt;span class="n"&gt;pokemonsInfo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;viewPokemonInfo&lt;/span&gt; &lt;span class="n"&gt;pokemonsInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 


&lt;span class="n"&gt;viewPokemonInfo&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Html&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="n"&gt;viewPokemonInfo&lt;/span&gt; &lt;span class="n"&gt;pokemonInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="n"&gt;pokemonInfo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Temos aqui a declaração de 2 funções: a &lt;em&gt;view&lt;/em&gt; e uma função auxiliar chamada &lt;em&gt;viewPokemonInfo&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Uma vantagem de utilizar &lt;em&gt;types&lt;/em&gt; para representação do estado da nossa aplicação é que &lt;strong&gt;sempre&lt;/strong&gt; que um trecho de código for utilizar este &lt;em&gt;type&lt;/em&gt;, o compilador irá &lt;strong&gt;obrigar&lt;/strong&gt; a pessoa desenvolvedora a tratar todos os possíveis estados. Neste caso: &lt;em&gt;Loading&lt;/em&gt;, &lt;em&gt;Failure&lt;/em&gt; e &lt;em&gt;Success&lt;/em&gt;. Se você remover o tratamento do &lt;em&gt;Loading&lt;/em&gt; da função &lt;em&gt;view&lt;/em&gt; do nosso exemplo, receberá uma mensagem de erro similar a esta ao tentar compilar a aplicação:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Line 70, Column 3
This `case` does not have branches for all possibilities:

70|&amp;gt;  case model of
71|&amp;gt;    Failure -&amp;gt;
72|&amp;gt;        text "Por alguma razão, não foi possível carregar a lista com nome dos Pokémons. 😧"
73|&amp;gt;
74|&amp;gt;    Success pokemonsInfo -&amp;gt;
75|&amp;gt;      ul []
76|&amp;gt;        (List.map viewPokemonInfo pokemonsInfo) 

Missing possibilities include:

    Loading

I would have to crash if I saw one of those. Add branches for them!

Hint: If you want to write the code for each branch later, use `Debug.todo` as a
placeholder. Read &amp;lt;https://elm-lang.org/0.19.1/missing-patterns&amp;gt; for more
guidance on this workflow.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Isso traz mais segurança para a pessoa desenvolvedora refatorar o código e incluir ou remover estados da aplicação, tendo a certeza que não vai deixar de tratar algum caso obscuro.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fazendo-uma-chamada-http"&gt;
  &lt;/a&gt;
  Fazendo uma chamada &lt;em&gt;http&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;O trecho de código abaixo é responsável por fazer a chamada &lt;em&gt;http&lt;/em&gt; de forma assíncrona e realizar o &lt;em&gt;parse&lt;/em&gt; do retorno, transformando-o em uma lista de &lt;em&gt;PokemonInfo&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elm"&gt;&lt;code&gt;&lt;span class="n"&gt;fetchPokemonNames&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Cmd&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;
&lt;span class="n"&gt;fetchPokemonNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="kt"&gt;Http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://pokeapi.co/api/v2/pokemon?limit=5"&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expectJson&lt;/span&gt; &lt;span class="kt"&gt;FetchedPokemonNames&lt;/span&gt; &lt;span class="n"&gt;decoder&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="n"&gt;pokemonInfoDecoder&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Decoder&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt;
&lt;span class="n"&gt;pokemonInfoDecoder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="kt"&gt;Json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Decode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Decode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name"&lt;/span&gt; &lt;span class="kt"&gt;Json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Decode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;decoder&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Decoder&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="kt"&gt;PokemonInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
&lt;span class="n"&gt;decoder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="kt"&gt;Json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Decode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;results"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Decode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="n"&gt;pokemonInfoDecoder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Impossível negar que este código é maior do que uma chamada a uma função &lt;em&gt;fetch&lt;/em&gt;. Mas note que este código, além de fazer a chamada de forma assíncrona, também valida e transforma o retorno em uma &lt;em&gt;List PokemonInfo&lt;/em&gt;, eliminando a necessidade de qualquer validação por nossa parte.&lt;/p&gt;

&lt;p&gt;No final da execução da chamada será emitida uma mensagem &lt;em&gt;FetchedPokemonNames&lt;/em&gt; junto com o resultado da operação: ou uma lista com nomes dos Pokémons já decodificados ou então um resultado representando que ocorreu um erro.&lt;/p&gt;

&lt;p&gt;Será responsabilidade da função &lt;em&gt;update&lt;/em&gt; receber esta mensagem e criar um novo estado para a aplicação.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elm"&gt;&lt;code&gt;&lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Cmd&lt;/span&gt; &lt;span class="kt"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;

    &lt;span class="kt"&gt;FetchedPokemonNames&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;
        &lt;span class="kt"&gt;Ok&lt;/span&gt; &lt;span class="n"&gt;pokemonsInfo&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Success&lt;/span&gt; &lt;span class="n"&gt;pokemonsInfo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="kt"&gt;Err&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Failure&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mais uma vez, somos obrigados a tratar todos os possíveis cenários. Neste exemplo, são dois: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;caso o &lt;em&gt;result&lt;/em&gt; seja do tipo &lt;em&gt;Ok&lt;/em&gt;, significa que nossa requisição foi processada com sucesso. É retornado então um novo estado para nossa aplicação, alterando para &lt;em&gt;Success&lt;/em&gt;, junto com a lista contendo os nomes dos Pokémons.&lt;/li&gt;
&lt;li&gt;caso o &lt;em&gt;result&lt;/em&gt; seja do tipo &lt;em&gt;Err&lt;/em&gt;, então sabemos que ocorreu algum problema durante a requisição ou ao realizar o &lt;em&gt;parsing&lt;/em&gt; do &lt;em&gt;json&lt;/em&gt;. Um novo estado da aplicação é retornado, alterando-o para &lt;em&gt;Failure&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sempre que o retorno da função &lt;em&gt;update&lt;/em&gt; for diferente do estado anterior, automaticamente a função &lt;em&gt;view&lt;/em&gt; será acionada novamente, então uma nova &lt;em&gt;DOM&lt;/em&gt; virtual será criada e eventuais alterações serão aplicadas na tela. Para entender melhor este processo, você pode ler sobre a &lt;em&gt;The Elm Architecture&lt;/em&gt; &lt;a href="https://guide.elm-lang.org/architecture"&gt;nesta página&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%B5es"&gt;
  &lt;/a&gt;
  Conclusões
&lt;/h2&gt;

&lt;p&gt;Embora tenha focado exclusivamente nas requisições &lt;em&gt;http&lt;/em&gt; e no &lt;em&gt;JavaScript&lt;/em&gt;, os mesmos conceitos são aplicados em muitos outros cenários, bibliotecas, &lt;em&gt;frameworks&lt;/em&gt; e linguagens.&lt;/p&gt;

&lt;p&gt;Minha intenção não é desmotivar o uso de &lt;em&gt;JavaScript&lt;/em&gt;. &lt;em&gt;&lt;a href="https://elm-lang.org"&gt;Elm&lt;/a&gt;&lt;/em&gt; é uma linguagem maravilhosa, mas até hoje ainda uso &lt;em&gt;JavaScript&lt;/em&gt; e &lt;em&gt;TypeScript&lt;/em&gt; em alguns &lt;em&gt;webapps&lt;/em&gt; e este não é o ponto focal do problema. O que eu gostaria é que quando você for consumir uma função de sua linguagem preferida (seja uma função nativa, seja de uma bibliotecas de terceiros), que você sempre reflita e responda para si mesma: existe algum cenário que este código está ignorando? Ou, em outras palavras, esta é uma solução &lt;strong&gt;simples&lt;/strong&gt; ou &lt;strong&gt;simplista&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;E o mais importante: ao escrever uma nova função, utilize uma interface de comunicação que incentive a pessoa que for consumi-la a seguir as boas práticas. Mesmo que ela esteja seguindo o caminho do mínimo esforço, deve ser capaz de se precaver de todos os cenários possíveis. Ou, em outras palavras, sempre siga o &lt;a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment"&gt;Princípio de menor espanto&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;Gostou deste texto? Conheça meus outros artigos, podcasts e vídeos acessando: &lt;a href="https://segunda.tech"&gt;https://segunda.tech&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Why Remix 💿?</title>
      <author>Abdur-Rahman</author>
      <pubDate>Thu, 06 Jan 2022 11:50:58 +0000</pubDate>
      <link>https://dev.to/shafspecs/why-remix--5cm5</link>
      <guid>https://dev.to/shafspecs/why-remix--5cm5</guid>
      <description>&lt;p&gt;In the the &lt;a href="https://dev.to/shafspecs/intro-to-remix-41l7"&gt;first part&lt;/a&gt; of this post series (yes, it's now a series), we talked briefly about what Remix is and a little bit of what it adds to the web development eco-system as a whole. In this post, we will indulge ourselves more answering the question &lt;em&gt;Why Remix&lt;/em&gt;, and why you should start using it today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-remix-bring-to-the-table"&gt;
  &lt;/a&gt;
  &lt;u&gt;What does Remix 💿 bring to the table?:&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;Remix is a server-side rendered (SSR) framework (&lt;em&gt;yes, just like Next.js and Sveltekit&lt;/em&gt;). This implies that both the backend and the frontend can be made using a single Remix app. Unlike vanilla React, where data is fetched on the frontend and then rendered on the screen, Remix fetches data on the backend and serves the HTML directly to the user (Remix has no static support hence it requires a server...) Hold up, what's so special about all this?&lt;br&gt;
&lt;strong&gt;Because there is so much more&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#routing-%F0%9F%96%87"&gt;
  &lt;/a&gt;
  Routing 🖇:
&lt;/h3&gt;

&lt;p&gt;A number one advantage of Remix 💿 in my opinion. I've used several JS frameworks including React, Next.js and a little bit of Vue with some spices of here and there with regard to frameworks, and I can say none comes even close to how Remix single-handedly (no external packages included) handles it's routing. Remix makes use of something known as nested routing that simply means embedding a component route in another (paren route) which leads to much faster loading times&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNFSlLXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfsf53mncd5c0e88ag5b.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNFSlLXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfsf53mncd5c0e88ag5b.gif" alt="Remix GIF" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And with this nested routing comes another goodybag, even though these components are nested in one another, they are all seperate entities that handle their own state and data. This leads to an extra decrease in page loading time due to the dynamic handling and fetching of these "routes" by Remix 💿 at the cost of nothing!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VjRlK5lM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bpgwv70adn9pw7pfbs6x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VjRlK5lM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bpgwv70adn9pw7pfbs6x.gif" alt="Remix Loading Time animated" width="880" height="317"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yea! Now that's what we're talking about 😄.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#error-boundaries-and-handling-"&gt;
  &lt;/a&gt;
  Error Boundaries and Handling 🚫:
&lt;/h3&gt;

&lt;p&gt;I have written thousands of lines of code in React and Next.js mainly and I can say Error handling has always been a pain. It is something you don't always remember, breaks your entire site even if it's just a button component and even when you remember, it's just another hard task that's been added to your todos. &lt;/p&gt;

&lt;p&gt;With Remix, error handling is built-in. Wait a second, we actually have a framework where the maintainers realize errors would happen even in production stage? Hell, yeah!&lt;/p&gt;

&lt;p&gt;With Remix, your errors don't break your site so your page doesn't need to be refreshed. And Remix handles errors while Server Rendering. Errors while Client Rendering. Even errors in your server side data handling. All those nasty errors finally in your hands and you can plan ahead of how to handle them just fine. Ah, Remix 😌.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#transitions-"&gt;
  &lt;/a&gt;
  Transitions 🔄:
&lt;/h3&gt;

&lt;p&gt;Another advantage Remix has (&lt;em&gt;yes, there is so much more&lt;/em&gt; 🤤) is how it handles transition and loading states of your browser, this ia also handled single-handedly by Remix too! All you have to do is sit back and tell Remix what to do (or show) while your app is loading (&lt;em&gt;and grab a glass of iced tea to relax while you're at it&lt;/em&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#forms-forms-forms-"&gt;
  &lt;/a&gt;
  Forms, Forms, Forms 📝:
&lt;/h3&gt;

&lt;p&gt;Remeber those cringy moment when implementing forms, where for some weird reasons, &lt;code&gt;onClick&lt;/code&gt; event just did nothing or your form data getting hanged somewhere between the input and the server? Well, Remix 💿 is here for that. By implementing functions to handle server-side operations (&lt;em&gt;known to some as &lt;code&gt;loader&lt;/code&gt; and &lt;code&gt;action&lt;/code&gt;&lt;/em&gt;), Remix is able to eaasily deal and harness your form data with no need for Javascript involvement. &lt;em&gt;Wait, what!&lt;/em&gt;, that's right, no Javascript is needed for your form to work. I guess this should be another segment of it's own but another thing Remix achieves is the fact that it totally removes that javascript-first motive that we have been seeing for a long time in our frameworks, hence, reducing the browser load tremendously leading to a happier user experience and a happier developer experience (&lt;em&gt;you might want to start by cutting down that outrageously long dependency list in your &lt;code&gt;package.json&lt;/code&gt;&lt;/em&gt;)&lt;/p&gt;




&lt;p&gt;What's next in store for Remix? I don't know exactly but I can say it's good. The thing that excites me is that this is v1 of Remix, first release, and we have a bunch ton of features and improvements to be excited for. Can't wait to see what the future holds for the Remix community. I hope you finally agree with me about &lt;em&gt;why remix&lt;/em&gt; and the good stuff that lay in store for it and web development as a whole. With that, I wish you happy reading and coding 👋. &lt;/p&gt;

</description>
      <category>remix</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to add Algolia Search to Nuxt 3</title>
      <author>Jakub Andrzejewski</author>
      <pubDate>Thu, 06 Jan 2022 11:46:30 +0000</pubDate>
      <link>https://dev.to/baroshem/how-to-add-algolia-search-to-nuxt-3-3od3</link>
      <guid>https://dev.to/baroshem/how-to-add-algolia-search-to-nuxt-3-3od3</guid>
      <description>&lt;p&gt;Nuxt 3 beta has proven to be a great tool for building websites by having a great Developer Experience thanks to many features like out of the box support for Vite, composables, SSR utilities and many more. It is still in beta, but this beta version is becoming more and more stable so more external modules are being created like Storyblok, Strapi, Pinia, etc. &lt;/p&gt;

&lt;p&gt;One of these modules has been released recently as well (surprise surprise, I have created this module :D) and it is a module that allows you to easily integrate Algolia search with Nuxt 3.&lt;/p&gt;

&lt;p&gt;In this article I will guide you through the installation process so that you could jump right in and built your next (Nuxt ;)) project with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-algolia"&gt;
  &lt;/a&gt;
  What is Algolia?
&lt;/h2&gt;

&lt;p&gt;Algolia is a Flexible Search &amp;amp; Discovery Hosted APIs that enables developers to build next generation apps with composable APIs, delivering relevant content in milliseconds.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SpVcbiFJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rl3gqymcyhf3d5kqwsde.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SpVcbiFJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rl3gqymcyhf3d5kqwsde.png" alt="Algolia landing page" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In other words, Algolia is a very powerful search engine that works quite similar to Elasticsearch allowing for fast content delivery that matches current query.&lt;/p&gt;

&lt;p&gt;You can read more about Algolia &lt;a href="https://www.algolia.com/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nuxt-3-with-algolia"&gt;
  &lt;/a&gt;
  Nuxt 3 with Algolia
&lt;/h2&gt;

&lt;p&gt;In this section I will guide you step by step through the process of integrating your Nuxt 3 project with Algolia.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you get lost at some point I have also prepared a github repository with the final project that you can take a look at &lt;a href="https://github.com/Baroshem/nuxt3-algolia"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-a-boilerplate-nuxt-3-project"&gt;
  &lt;/a&gt;
  Setting up a boilerplate Nuxt 3 project.
&lt;/h3&gt;

&lt;p&gt;Let's start with generating an empty Nuxt 3 project. We can do so by typing following command in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx nuxi init nuxt3-algolia
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you open your new created project in your code editor you should see following result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mQdkuzSd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3qjn07woullb9ucvp4j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mQdkuzSd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3qjn07woullb9ucvp4j.png" alt="Nuxt 3 project in VS Code" width="522" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's install dependencies of the project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn &lt;span class="c"&gt;# npm install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And start the project to see if it is working as expected:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn dev &lt;span class="c"&gt;# npm run dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If everything went good, we should see following result in our browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kq83lzs0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6lpu627d4va91utt3ak6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kq83lzs0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6lpu627d4va91utt3ak6.png" alt="Nuxt 3 in the browser" width="880" height="428"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup-algolia-account-and-add-data"&gt;
  &lt;/a&gt;
  Setup Algolia account and add data
&lt;/h3&gt;

&lt;p&gt;In this step I will just mention that at this point you should have an Algolia account and an index filled with some test data or your own data. When it will be done, make sure to save &lt;code&gt;search api key&lt;/code&gt; and &lt;code&gt;application ID&lt;/code&gt; from your Algolia settings as they will be used in the next section.&lt;/p&gt;

&lt;p&gt;For the sake of this tutorial I have generated some dummy data in Algolia for Ecommerce so my Search dashboard looks like follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hpXUJvz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrwhfy11z8jhovv12tr8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hpXUJvz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrwhfy11z8jhovv12tr8.png" alt="Algolia Dashboard" width="880" height="497"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When generating a new index make sure to remember this name as it will be used in the next section.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-algolia-to-nuxt-3"&gt;
  &lt;/a&gt;
  Adding Algolia to Nuxt 3
&lt;/h3&gt;

&lt;p&gt;Algolia provides a very good &lt;a href="https://github.com/algolia/algoliasearch-client-javascript/tree/master/packages/algoliasearch"&gt;package&lt;/a&gt; that allow to integrate JavaScript project with Algolia API. However, in this project we will be using a Nuxt module instead that provides similar functionality by using handy composables like useSearch, useAlgolia, etc.&lt;/p&gt;

&lt;p&gt;First, let's install Algolia module in our Nuxt 3 project like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add @nuxt-commerce/algolia &lt;span class="c"&gt;# npm install @nuxt-commerce/algolia&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, add &lt;code&gt;@nuxt-commerce/algolia&lt;/code&gt; to &lt;code&gt;buildModules&lt;/code&gt; inside &lt;code&gt;nuxt.config.ts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineNuxtConfig&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nuxt3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineNuxtConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;buildModules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nuxt-commerce/algolia&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;YOUR_SEARCH_API_KEY&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;applicationId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;YOUR_APPLICATION_ID&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By adding the module to buildModules, we can automatically import composables so that you can use them in your application without the need to import them.&lt;/p&gt;

&lt;p&gt;After that, add following script setup section in your &lt;code&gt;app.vue&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test_index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// pass your index as param&lt;/span&gt;

&lt;span class="nx"&gt;onMounted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Samsung&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's stop here for a second to discuss in more details what is going on here.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We are calling a &lt;code&gt;useSearch&lt;/code&gt; composable and we pass a name of the index created in the Algolia dashboard as a parameter. &lt;/li&gt;
&lt;li&gt;We are destructuring the &lt;code&gt;result&lt;/code&gt; property and &lt;code&gt;search&lt;/code&gt; method from this composable.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;search&lt;/code&gt; method will be used to call algoliasearch to search for the certain query.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;result&lt;/code&gt; is a reactive computed value containing the result of the search method.&lt;/li&gt;
&lt;li&gt;We are calling a &lt;code&gt;search&lt;/code&gt; method inside &lt;code&gt;onMounted&lt;/code&gt; lifecycle hook asynchronously and passing a query as a object property with a value of 'Samsung'&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To display the result in the browser you can add result in your template to see the actual result of the search:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;NuxtWelcome&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a result of this operation, you should see following result in your browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OPipLkEG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfeehzcf12re6idg77n6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OPipLkEG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfeehzcf12re6idg77n6.png" alt="Algolia result in Browser" width="880" height="497"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wow, that's a lot of data and it was delivered in miliseconds. And that's it. You have now access to data delivered by Algolia that can be used to display some results to the users in a visually acceptable form (not in a raw data :D ). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;You have managed to integrate Algolia with Nuxt 3 application. Well done! In this introduction article I wanted to focus on how easy it is to integrate these tools together thanks to the module but bare in mind that for the real application you would need a Vue component that would handle the search (for example &lt;a href="https://github.com/algolia/vue-instantsearch"&gt;https://github.com/algolia/vue-instantsearch&lt;/a&gt; that I will be integrating in the upcoming weeks) or your custom component but this should be a solid start for working with Algolia :)&lt;/p&gt;

&lt;p&gt;If you liked this article and a module make sure to drop a reaction, github star or/and Twitter follow ❤️&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/Baroshem/nuxt3-algolia"&gt;Nuxt3-Algolia repository&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is also another composable available in this module that would allow you to write your own composables or logic related to Algola search:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;algolia&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAlgolia&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;algolia&lt;/code&gt; is an instance of &lt;code&gt;algoliasearch&lt;/code&gt; client so by calling &lt;code&gt;useAlgolia&lt;/code&gt; you have access to all methods available to &lt;code&gt;algoliasearch&lt;/code&gt; as well.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;BTW, if you find yourself developing a new composable or function based on this, make sure to ping me so that we can put into the module and provide this functionality to other users as well :)&lt;/em&gt;&lt;/p&gt;

</description>
      <category>algolia</category>
      <category>nuxt</category>
      <category>vue</category>
      <category>search</category>
    </item>
    <item>
      <title>Angular 13 + NestJS 8 Starter Project</title>
      <author>wlucha</author>
      <pubDate>Thu, 06 Jan 2022 11:31:37 +0000</pubDate>
      <link>https://dev.to/wlucha/angular-13-nestjs-8-1b8</link>
      <guid>https://dev.to/wlucha/angular-13-nestjs-8-1b8</guid>
      <description>&lt;p&gt;This project is a Angular 13 + NestJS 8 starter to build your new frontend &amp;amp; backend project (by &lt;a href="https://github.com/wlucha"&gt;@wlucha&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;p&gt;✅ Angular 13+&lt;br&gt;&lt;br&gt;
✅ NestJS 8+&lt;br&gt;&lt;br&gt;
✅ Jest Unit Testing  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-project"&gt;
  &lt;/a&gt;
  GitHub Project
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/wlucha/angular-nest"&gt;https://github.com/wlucha/angular-nest&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackblitz.com/github/wlucha/angular-nest"&gt;StackBlitz Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Install dependencies&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#running-nestjs"&gt;
  &lt;/a&gt;
  Running Nest.js
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# development&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm run start-nest

&lt;span class="c"&gt;# watch mode&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm run start-nest:dev

&lt;span class="c"&gt;# production mode&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm run start-nest:prod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#running-angular"&gt;
  &lt;/a&gt;
  Running Angular
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# development&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm run start-angular

&lt;span class="c"&gt;# production mode&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm run start-angular:prod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#test"&gt;
  &lt;/a&gt;
  Test
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# unit tests&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm run &lt;span class="nb"&gt;test&lt;/span&gt;

&lt;span class="c"&gt;# e2e tests&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm run &lt;span class="nb"&gt;test&lt;/span&gt;:e2e

&lt;span class="c"&gt;# test coverage&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm run &lt;span class="nb"&gt;test&lt;/span&gt;:cov
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  License
&lt;/h2&gt;

&lt;p&gt;MIT License&lt;/p&gt;

&lt;p&gt;Copyright (c) 2022 Wilfried Lucha&lt;/p&gt;

</description>
    </item>
    <item>
      <title>AWS - NLP Newsletter December 2021 </title>
      <author>Heiko Hotz</author>
      <pubDate>Thu, 06 Jan 2022 11:25:04 +0000</pubDate>
      <link>https://dev.to/aws/aws-nlp-newsletter-december-2021-18o3</link>
      <guid>https://dev.to/aws/aws-nlp-newsletter-december-2021-18o3</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YbIFk6W3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y5aumn2oyczsxgt28d2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YbIFk6W3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y5aumn2oyczsxgt28d2.PNG" alt="Image description" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy new year, everyone! In 2021, the global Natural Language Processing (NLP) market size reached an &lt;a href="https://www.fortunebusinessinsights.com/industry-reports/natural-language-processing-nlp-market-101933"&gt;estimated &lt;strong&gt;USD 21 Billion&lt;/strong&gt;&lt;/a&gt;(!) and it is projected to grow to &lt;strong&gt;USD 127 Billion&lt;/strong&gt; in 2028 at an estimated &lt;strong&gt;CAGR of 29.4%&lt;/strong&gt;. To put these numbers into perspective: The estimated global revenue for AWS in 2021 is around USD 62 Billion.&lt;/p&gt;

&lt;p&gt;Add in strategic initiatives like our partnership with Hugging Face and the continued efforts to improve our AI Language Services and it becomes clear that NLP is, and will be for a long time, one of the most important areas to cover within AWS.&lt;/p&gt;

&lt;p&gt;In 2021 the NLP Domain has set out to successfully guide customers in their NLP journeys. We also have created resources and mechanisms to scale the field internally. In 2022 we will continue this effort by growing the NLP Domain, supporting NLP initiatives, and creating even more resources so that we as an organisation are prepared for the exciting NLP challenges to come.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nlp-customer-success-stories"&gt;
  &lt;/a&gt;
  NLP Customer Success Stories
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IkmUc6AG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rfwts69hxln6t9vhgn0z.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IkmUc6AG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rfwts69hxln6t9vhgn0z.PNG" alt="Image description" width="281" height="379"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://aws.amazon.com/blogs/startups/koo-app-connects-millions-of-voices-in-their-preferred-language-with-aws/"&gt;Koo App Connects Millions of Voices in Their Preferred Language with AWS&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
When the social media revolution began, e-commerce sites mostly catered to English speakers, which left out a huge population of would-be participants. Koo, a microblogging platform based in India, noted the lack of inclusivity and made it their mission to create an app that is accessible to the entire spectrum of languages spoken in India. Koo leverages several AWS services, such as Amazon SageMaker, Aurora, EKS, and EC2 to serve millions of users on their platform.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.pfizer.com/news/press-release/press-release-detail/aws-helps-pfizer-accelerate-drug-development-and-clinical"&gt;AWS Helps Pfizer Accelerate Drug Development And Clinical Manufacturing&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Also in December, AWS announced that it is working with Pfizer to create innovative, cloud-based solutions with the potential to improve how new medicines are developed, manufactured, and distributed for testing in clinical trials. To gain quick, secure access to the right information at the right time, Pfizer’s Pharmaceutical Sciences Small Molecules teams are working with AWS to develop a prototype system that can automatically extract, ingest, and process data from this documentation to help in the design of lab experiments. The prototype system is powered by Amazon Comprehend Medical (AWS’s HIPAA-eligible natural language processing (NLP) service to extract information from unstructured medical text accurately and quickly) and Amazon SageMaker, and uses Amazon Cognito to deliver secure user access control. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#updates-on-aws-language-services"&gt;
  &lt;/a&gt;
  Updates on AWS Language Services
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Double Bill: AWS announces &lt;a href="https://aws.amazon.com/blogs/machine-learning/post-call-analytics-for-your-contact-center-with-amazon-language-ai-services/"&gt;post call analytics&lt;/a&gt; and &lt;a href="https://aws.amazon.com/blogs/machine-learning/live-call-analytics-for-your-contact-center-with-amazon-language-ai-services/"&gt;live call analytics&lt;/a&gt; with Amazon AI Language Services.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zvUfMqQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1ng8cj3j8cd18n7bkze.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zvUfMqQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1ng8cj3j8cd18n7bkze.png" alt="Image description" width="709" height="605"&gt;&lt;/a&gt;&lt;br&gt;
This is a huge step for AWS customers that need rich analytics capabilities to transcribe and extract insights from your contact centre communications at scale. Both functionalities were already available in Contact Lens for Amazon Connect, and now customers who don’t use Amazon Connect can use it in their existing contact centres.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://aws.amazon.com/blogs/machine-learning/live-transcriptions-of-f1-races-using-amazon-transcribe/"&gt;Live transcriptions of F1 races using Amazon Transcribe&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
The Formula 1 (F1) live steaming service, F1 TV, has live automated closed captions in three different languages: English, Spanish, and French. For the 2021 season, FORMULA 1 has achieved another technological breakthrough, building a fully automated workflow to create closed captions in three languages and broadcasting to 85 territories using Amazon Transcribe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://aws.amazon.com/blogs/machine-learning/clinical-text-mining-using-the-amazon-comprehend-medical-new-snomed-ct-api/"&gt;Clinical text mining using the Amazon Comprehend Medical new SNOMED CT API&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
This blog post describes how to use a new feature to automatically standardize and link detected concepts to the SNOMED CT (Systematized Nomenclature of Medicine—Clinical Terms) ontology. It details how to use the new SNOMED CT API to link SNOMED CT codes to medical concepts (or entities) in natural written text that can then be used to accelerate research and clinical application building.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://aws.amazon.com/blogs/machine-learning/announcing-support-for-extracting-data-from-identity-documents-using-amazon-textract/"&gt;Support for extracting data from identity documents using Amazon Textract&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e0L7EDrb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8inlhl6e7njd8s8k6v67.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e0L7EDrb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8inlhl6e7njd8s8k6v67.PNG" alt="Image description" width="773" height="512"&gt;&lt;/a&gt;&lt;br&gt;
This blog post announces a new API to Amazon Textract called Analyze ID that will help you automatically extract information from identification documents, such as driver’s licenses and passports. Amazon Textract uses AI and ML technologies to extract information from identity documents, such as U.S. passports and driver’s licenses, without the need for templates or configuration. You can automatically extract specific information, such as date of expiry and date of birth, as well as intelligently identify and extract implied information, such as name and address.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://aws.amazon.com/blogs/machine-learning/enrich-your-content-and-metadata-to-enhance-your-search-experience-with-custom-document-enrichment-in-amazon-kendra/"&gt;Custom document enrichment in Amazon Kendra&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Amazon Kendra customers can now enrich document metadata and content during the document ingestion process using custom document enrichment (CDE). Organizations often have large repositories of raw documents that can be improved for search by modifying content or adding metadata before indexing. So how does CDE help? By simplifying the process of creating, modifying, or deleting document metadata and content before they’re ingested into Amazon Kendra. This can include detecting entities from text, extracting text from images, transcribing audio and video, and more by creating custom logic or using services like Amazon Comprehend, Amazon Textract, Amazon Transcribe, Amazon Rekognition, and others.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://aws.amazon.com/blogs/machine-learning/expedite-conversation-design-with-the-automated-chatbot-designer-in-amazon-lex/"&gt;Expedite conversation design with the automated chatbot designer in Amazon Lex&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
The automated chatbot designer expands the usability of Amazon Lex to the design phase. It uses machine learning (ML) to provide an initial bot design that you can then refine and launch conversational experiences faster. With the automated chatbot designer, Amazon Lex customers and partners get an easy and intuitive way of designing chatbots and can reduce bot design time from weeks to hours.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nlp-on-amazon-sagemaker"&gt;
  &lt;/a&gt;
  NLP on Amazon SageMaker
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://aws.amazon.com/blogs/machine-learning/build-custom-amazon-sagemaker-pytorch-models-for-real-time-handwriting-text-recognition/"&gt;Build custom Amazon SageMaker PyTorch models for real-time handwriting text recognition&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ymir90e7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6cr0co0qnqwrg8cj1nc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ymir90e7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6cr0co0qnqwrg8cj1nc.jpg" alt="Image description" width="880" height="590"&gt;&lt;/a&gt;&lt;br&gt;
Unlike standard text recognition that can be trained on documents with typed content or synthetic datasets that are easy to generate and inexpensive to obtain, handwriting recognition (HWR) comes with many challenges. These challenges include variability in writing styles, low quality of old scanned documents, and collecting good quality labeled training datasets, which can be expensive or hard to collect. In this post, we share the processes, scripts, and best practices to develop a custom ML model in Amazon SageMaker that applies deep learning (DL) techniques based on the concept outlined in the paper &lt;a href="https://assets.amazon.science/38/fe/4c3105fb43129bf59cc0aadb5d78/gnhk-a-dataset-for-english-handwriting-in-the-wild.pdf"&gt;GNHK: A Dataset for English Handwriting in the Wild&lt;/a&gt; to transcribe text in images of handwritten passages into strings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://aws.amazon.com/blogs/machine-learning/achieve-35-faster-training-with-hugging-face-deep-learning-containers-on-amazon-sagemaker/"&gt;Achieve 35% faster training with Hugging Face Deep Learning Containers on Amazon SageMaker&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
This post shows how to pretrain an NLP model (ALBERT) on Amazon SageMaker by using Hugging Face Deep Learning Container (DLC) and transformers library. We also demonstrate how a SageMaker distributed data parallel (SMDDP) library can provide up to a 35% faster training time compared with PyTorch’s distributed data parallel (DDP) library.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://docs.aws.amazon.com/sagemaker/latest/dg/training-compiler.html"&gt;Amazon SageMaker Training Compiler can accelerate training by up to 50%&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
State-of-the-art NLP models consist of complex multi-layered neural networks with billions of parameters that can take thousands of GPU hours to train. Optimizing such models on training infrastructure requires extensive knowledge of DL and systems engineering; this is challenging even for narrow use cases. SageMaker Training Compiler is a capability of SageMaker that makes these hard-to-implement optimizations to reduce training time on GPU instances. The compiler optimizes DL models to accelerate training by more efficiently using SageMaker machine learning (ML) GPU instances.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://docs.aws.amazon.com/sagemaker/latest/dg/serverless-endpoints.html"&gt;Amazon SageMaker Serverless inference for intermittent usage patterns&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QjeAVQ0F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7cvgcqd4xspvzdphbmtg.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QjeAVQ0F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7cvgcqd4xspvzdphbmtg.PNG" alt="Image description" width="880" height="277"&gt;&lt;/a&gt;&lt;br&gt;
Amazon SageMaker Serverless Inference is a purpose-built inference option that makes it easy for you to deploy and scale ML models. Serverless Inference is ideal for workloads which have idle periods between traffic spurts and can tolerate cold starts. Serverless endpoints automatically launch compute resources and scale them in and out depending on traffic, eliminating the need to choose instance types or manage scaling policies. This takes away the undifferentiated heavy lifting of selecting and managing servers. Serverless Inference integrates with AWS Lambda to offer you high availability, built-in fault tolerance and automatic scaling.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#community-content"&gt;
  &lt;/a&gt;
  Community content
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://towardsdatascience.com/setting-up-a-text-summarisation-project-daae41a1aaa3"&gt;Setting up a text summarisation project on Amazon SageMaker&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
This tutorial serves as a practical guide for diving deep into text summarisation. It was born out of a customer engagement where the customer wanted to know how to go about setting up a text summarisation project. While there are many impressive demos on text summarisation out there, they are not well suited for actually experimenting with different models and hyperparameters. To do that, organisations need to set up their own experimentation pipeline. The tutorial is divided into the several steps to build up this pipeline:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using a no-ML “model” to establish a baseline&lt;/li&gt;
&lt;li&gt;Generating summaries with a zero-shot model&lt;/li&gt;
&lt;li&gt;Training a summarisation model&lt;/li&gt;
&lt;li&gt;Evaluating the trained model&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://huggingface.co/blog/codeparrot"&gt;Building a language models from scratch&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YnYevIj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qiziz9pgpta1554x8qvn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YnYevIj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qiziz9pgpta1554x8qvn.PNG" alt="Image description" width="855" height="605"&gt;&lt;/a&gt;&lt;br&gt;
This blog post takes a look at what it takes to build the technology behind GitHub CoPilot, an application that provides suggestions to programmers as they code. In this step by step guide, we'll learn how to train a large GPT-2 model called CodeParrot, entirely from scratch. CodeParrot can auto-complete your Python code - give it a spin here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://towardsdatascience.com/a-2021-nlp-retrospective-b6f51e60026a"&gt;A 2021 NLP Retrospective&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Much has happened in the field of Natural Language Processing (NLP) in the past year and this blog post reflects on some of the NLP highlights of 2021.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stay-in-touch-with-nlp-on-aws"&gt;
  &lt;/a&gt;
  Stay in touch with NLP on AWS
&lt;/h2&gt;

&lt;p&gt;Our contact: &lt;a href="//mailto:aws-nlp@amazon.com"&gt;aws-nlp@amazon.com&lt;/a&gt;&lt;br&gt;
Email us about (1) your awesome project about NLP on AWS, (2) let us know which post in the newsletter helped your NLP journey, (3) other things that you want us to post on the newsletter. Talk to you soon.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>nlp</category>
      <category>machinelearning</category>
      <category>ai</category>
    </item>
  </channel>
</rss>
