<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>REASONS TO LEARN PYTHON WITH DJANGO IN 2022</title>
      <author>Faith Mueni Kilonzi </author>
      <pubDate>Fri, 14 Jan 2022 09:31:39 +0000</pubDate>
      <link>https://dev.to/global_codess/reasons-to-learn-python-with-django-in-2022-248m</link>
      <guid>https://dev.to/global_codess/reasons-to-learn-python-with-django-in-2022-248m</guid>
      <description>&lt;p&gt;It is that time of the year ‚Äì the beginning- where everyone is giving their opinion on the booming tech stack. This year, I have resolved to focus on Python as my core language and sticking with that. When it comes to Python for web development, Django and Flask are the two go-to web frameworks. While Flask is an equally good framework, I am going with Django. I will be sharing my journey and the insights gotten thereof. &lt;br&gt;
This piece will discuss some of the golden reasons why you should start learning Django in 2022.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-opensource-python-web-framework"&gt;
  &lt;/a&gt;
  1 Open-Source Python Web Framework
&lt;/h1&gt;

&lt;p&gt;Django is a high-level open-source python framework that has neem escalating demands in the market ever since with assured growth.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-increasing-demand"&gt;
  &lt;/a&gt;
  2 Increasing Demand
&lt;/h1&gt;

&lt;p&gt;The demand for Django professional is increasing every single day with high demanding salary and career launches. &lt;br&gt;
The average salary of a Django developer is $120,000 per year. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-new-interview-opportunities"&gt;
  &lt;/a&gt;
  3 New Interview Opportunities
&lt;/h1&gt;

&lt;p&gt;Getting a job is nice but getting an interview might change your life. This is because an interview offers you the opportunity to promote yourself and negotiate. Django Framework is used by most big tech companies, including Instagram, National Geographic, Mozilla, Spotify, Pinterest, Disqus, Bitbucket, Eventbrite, and Prezi.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-high-job-market-share"&gt;
  &lt;/a&gt;
  4 High Job Market Share
&lt;/h1&gt;

&lt;p&gt;The market share and demand for Django developers is high, with over 70,000 vacancies and a market share of over 28% since 2021.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-industry-opportunities"&gt;
  &lt;/a&gt;
  5 Industry Opportunities
&lt;/h1&gt;

&lt;p&gt;Learning Django will provide you a huge advantage in the industry, opening you new doors and allowing you to develop a variety of skills. This ensures that Django professionals will have plenty of career opportunities.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;With so many new languages, frameworks, and technologies being released on a regular basis, deciding which stack to use is a personal choice. The above discussion, on the other hand, is a guidance for individuals who are unsure about their path in Python, Django, and even Flask.&lt;/p&gt;

</description>
      <category>python</category>
      <category>django</category>
      <category>technologies</category>
      <category>2022</category>
    </item>
    <item>
      <title>How to predict the future using Python üêç?</title>
      <author>Yash Makan</author>
      <pubDate>Fri, 14 Jan 2022 09:17:08 +0000</pubDate>
      <link>https://dev.to/yash_makan/how-to-predict-future-using-python--3i39</link>
      <guid>https://dev.to/yash_makan/how-to-predict-future-using-python--3i39</guid>
      <description>&lt;p&gt;Hi fellas! I am Yash Makan, a black magician ü¶π‚Äç‚ôÇÔ∏è and you know what I can predict anything. Yup! I can predict the future of covid, google stock price, bitcoin price and your business profit. To avail of my services simply go to &lt;a href="http://www.blackmagicfool.com"&gt;www.blackmagicfool.com&lt;/a&gt;. It would be a pleasure working with you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/09bVX2WzBhZK8KwhqP/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/09bVX2WzBhZK8KwhqP/giphy.gif" alt="https://media.giphy.com/media/09bVX2WzBhZK8KwhqP/giphy.gif" width="480" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#different-models-of-predictive-analysis"&gt;
  &lt;/a&gt;
  Different Models of Predictive Analysis
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;ARIMA - Auto-Regressive Integrated Moving Average&lt;/li&gt;
&lt;li&gt;LSTM - Long Short Term Memory&lt;/li&gt;
&lt;li&gt;Auto-Regressive model&lt;/li&gt;
&lt;li&gt;Exponential Smoothing&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of these models have one thing in common that they require data to be trained in and then we have to tweak the parameters accordingly to see whichever yield the best results. But today we are not going to use these models, I am going to show you a third party library created by Facebook known as &lt;code&gt;fbpropet&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-why-fbprophet"&gt;
  &lt;/a&gt;
  But why fbprophet?
&lt;/h2&gt;

&lt;p&gt;I know you must be thinking that why do we are using a third party Facebook library if we already have these models. The problem with these models is that you have to tweak the parameters to see which way yields the best result whereas fbprophet lets all of this work on its own. It is a simple yet powerful library in which you simply has to pass the historical data and it can predict the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;To install fbprophet you must have anaconda installed or you can use google colab and the installation works flawlessly. I personally will be using google colab&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First, you have to install &lt;code&gt;pystan&lt;/code&gt; that helps run fbprophet easily. You can install pystan using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;!pip install pystan
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you can install fbpropeht using the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;!pip install fbprophet
or
conda install -c conda-forge fbprophet
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we will be using yfinance to fetch the data of the stock price&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;!pip install yfinance
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At last, we have to install pandas and plotly to work with historical data and plot it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;!pip install plotly==4.4.1
!pip install pandas==1.3.4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implementation-in-python"&gt;
  &lt;/a&gt;
  Implementation in Python
&lt;/h2&gt;

&lt;p&gt;So, as an example, let‚Äôs predict the future 3 years of the reliance share price using python.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Importing libraries&lt;/strong&gt;&lt;br&gt;
First, we have to import the necessary libraries that we have just installed&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_wj2jyIX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/790ljahy0yo3pn5weomv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_wj2jyIX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/790ljahy0yo3pn5weomv.png" alt="Import libraries" width="509" height="178"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Optional) Ignore any warnings to make the output cleaner&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YE5nR0GY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plq29wcakw9es9uuho8r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YE5nR0GY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plq29wcakw9es9uuho8r.png" alt="warning" width="446" height="49"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Optional) To show plotly plots in google colab&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P6BKr3Ux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8b4jza5wuq7jxmi57gm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P6BKr3Ux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8b4jza5wuq7jxmi57gm.png" alt="Plotly in google colab" width="880" height="182"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Download the historical data from the internet.&lt;/strong&gt; &lt;br&gt;
I am using yahoo finance API to install the historical data but you can fetch data from anywhere. Also, I have assigned the prediction time to 3 years&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zHcH5mtA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4yoeilalet91he1rad1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zHcH5mtA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4yoeilalet91he1rad1.png" alt="Fetching historical data" width="495" height="113"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The data is from 1996 where this stock IPO till current date and it looks something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cfoAwto3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nyv5890lhht7bcs4onr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cfoAwto3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nyv5890lhht7bcs4onr.png" alt="Historical data output" width="880" height="333"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Format the historical data for the fbprophet library.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Here as you can see I created a new dataframe and assigned the date column as &lt;code&gt;ds&lt;/code&gt; and close values as &lt;code&gt;y&lt;/code&gt;. This is very important as the column names must be ds and y as fbprophet will be looking for these columns.&lt;br&gt;
&lt;code&gt;df[‚Äôds‚Äô]&lt;/code&gt; ‚Äî&amp;gt; column of date&lt;br&gt;
&lt;code&gt;df[‚Äôy‚Äô]&lt;/code&gt;  ‚Äî&amp;gt;  the historical values that you have to feed to the model&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ewLR4Ep_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhgvq4oke7rn1ct6uxab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ewLR4Ep_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhgvq4oke7rn1ct6uxab.png" alt="Formatting the historical data" width="669" height="121"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Training the model&lt;/strong&gt;&lt;br&gt;
Training the model basically means to feed the historical data and the model trains it feeding data one by one and reducing the loss. Loss is basically a number that represents how bad the model is predictions on the given data. The lesser the loss number, the better your model would be.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Spi3av_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kylx6t7supfc3u2ixa9e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Spi3av_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kylx6t7supfc3u2ixa9e.png" alt="Training the model" width="260" height="73"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Making future predictions&lt;/strong&gt;&lt;br&gt;
Here we will use our previously trained model and predict the future possible outcomes&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Bvb3GbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16b345n3wblo3x2p9x09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Bvb3GbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16b345n3wblo3x2p9x09.png" alt="Making future predictions" width="880" height="61"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The forecast looks something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6lKIZPRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4rglc5zztzywm87uqla.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6lKIZPRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4rglc5zztzywm87uqla.png" alt="Future 3 years forecast output" width="880" height="69"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Plotting the forecast&lt;/strong&gt;&lt;br&gt;
Actually, we have successfully predicted the future but for the analysis purpose, it is a great practice to visualize using graphs. Here I will be using a scatter plot and it‚Äôll look something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E80QtAxA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zok0e4vgld5skazu302h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E80QtAxA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zok0e4vgld5skazu302h.png" alt="Plotting the forecast table in scatter plot graph" width="880" height="399"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;What does this forecast represent?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On the y axis, you can see the share price and on the x-axis, you can see the dates.&lt;/li&gt;
&lt;li&gt;The black line is the actual price&lt;/li&gt;
&lt;li&gt;The predicted range be the green and blue lines. This means that the share price will be between the green and blue line&lt;/li&gt;
&lt;li&gt;The red line shows the trend and in this example, the trend is clearly showing up in the next 3 years&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://colab.research.google.com/drive/11ueJlrR7KhuOlMb-oBamoEOogQcmBObk"&gt;Get The Source Code For This Blog&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So there you have it, it's that easy to predict future values using python. Now let me clear one thing that this blog is not a financial advice blog and if anyone from India reading this blog thinks, ‚ÄúOh! this is a great opportunity to invest in reliance India‚Äù, then I would like to say hold your horses and do proper technical analysis before investing in any stock either in Indian stock market or any other. Also if you want to predict future values of anything else other than stocks then you can do that as well. You simply need the historical data. The more data you have, the better be the prediction. With all that being said, I would like to conclude my today‚Äôs blog. You can follow me &lt;a href="https://dev.to/yash_makan"&gt;here&lt;/a&gt; or on &lt;a href="https://twitter.com/Yash_Makan"&gt;twitter&lt;/a&gt; to get the latest updates whenever I post new cool tech material. Also if you are willing to donate, then I will highly appreciate that and you can do that using this &lt;a href="https://www.buymeacoffee.com/yashmakan"&gt;link&lt;/a&gt;. If you have any doubts, just comment down below and I will surely help you out. Alrighty! It‚Äôs time to say b-bye!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4y5n1K-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/TfFDiw5gBuEns4ykJl/giphy.gif%3Fcid%3D790b7611431abc7a85c76da6c399a5727f24e501f9a5cae9%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4y5n1K-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/TfFDiw5gBuEns4ykJl/giphy.gif%3Fcid%3D790b7611431abc7a85c76da6c399a5727f24e501f9a5cae9%26rid%3Dgiphy.gif%26ct%3Dg" alt="https://media4.giphy.com/media/TfFDiw5gBuEns4ykJl/giphy.gif?cid=790b7611431abc7a85c76da6c399a5727f24e501f9a5cae9&amp;amp;rid=giphy.gif&amp;amp;ct=g" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contact-me"&gt;
  &lt;/a&gt;
  Contact Me
&lt;/h2&gt;

&lt;p&gt;Website: &lt;a href="http://yashmakan.co.in"&gt;yashmakan.co.in&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/Yash_Makan"&gt;@Yash_Makan&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contribute"&gt;
  &lt;/a&gt;
  Contribute
&lt;/h2&gt;

&lt;p&gt;buymeacoffee: &lt;a href="https://www.buymeacoffee.com/yashmakan"&gt;@Here&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-interesting-articles"&gt;
  &lt;/a&gt;
  Other Interesting Articles
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/21-must-read-books-for-kids-begineer-advanced-interview-with-pdf-56c7"&gt;21 must-read books for kids, beginner, advanced &amp;amp; interview with PDF üêç&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/everything-about-automation-in-python-pc-mobile-web-raspberry-pi-4cgh"&gt;Improve your workflow using Automation in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/4-ways-to-create-modern-gui-in-python-in-easiest-way-possible-5e0e"&gt;4 ways to create modern GUI in python in the easiest way possible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/4-best-python-web-app-hosting-services-for-freewith-complete-process-57nb"&gt;4 Free hosting platforms for python web app with step-by-step process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/18-python-one-liners-that-will-speed-up-your-coding-process-21md"&gt;18 Python one-liners that will speed up your coding process.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/ai-bot-that-could-answer-any-questions-asked-gmn"&gt;AI bot that could answer your questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/generate-your-own-favourite-tv-episode-using-python-1pb3"&gt;Generate your own favourite TV episode using python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>fbprophet</category>
      <category>programming</category>
    </item>
    <item>
      <title>13 Questions You Need to Ask Before Buying a Deep Learning¬†Course</title>
      <author>Yaniv Noema</author>
      <pubDate>Fri, 14 Jan 2022 08:57:23 +0000</pubDate>
      <link>https://dev.to/yanivnoema/13-questions-you-need-to-ask-before-buying-a-deep-learning-course-3j8h</link>
      <guid>https://dev.to/yanivnoema/13-questions-you-need-to-ask-before-buying-a-deep-learning-course-3j8h</guid>
      <description>&lt;p&gt;Have you considered taking a deep learning course? If so, then there are some questions that you need to ask before diving in. You may not know what you're getting into with this type of course and it's important to take the time and think about your needs and goals for buying a course. In this blog post we will discuss 10 questions that every learner should ask before buying a deep learning course!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-what-are-the-prerequisites"&gt;
  &lt;/a&gt;
  1. What are the prerequisites?
&lt;/h2&gt;

&lt;p&gt;One of the most important questions to ask is what the prerequisites are for the course. Do you need to have a certain level of programming experience? Are you comfortable with matrix operations and calculus? It's important that you know what is required of you before buying a course, so that you don't end up spending money on something that you can't actually use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-what-format-is-the-course"&gt;
  &lt;/a&gt;
  2. What format is the course?
&lt;/h2&gt;

&lt;p&gt;When you're looking for a deep learning course, it's important to consider what format the course will be in. Will it be mostly video lectures? Text-based? Or maybe there are interactive exercises included? Each learner has different preferences when it comes to learning, so you'll want to make sure the course is in a format that will work for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-who-is-the-instructor"&gt;
  &lt;/a&gt;
  3. Who is the instructor?
&lt;/h2&gt;

&lt;p&gt;When you're taking a deep learning course, it's important to know who your instructor is. Do they have a lot of experience in the field? Are they active researchers in the area? Or are they just teaching the course because they know how to code? It's important to have an instructor who is knowledgeable and passionate about the subject matter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-what-type-of-learning-style-do-you-prefer"&gt;
  &lt;/a&gt;
  4. What type of learning style do you prefer?
&lt;/h2&gt;

&lt;p&gt;Some people learn best by listening to lectures, while others prefer reading texts. Some people need lots of practice exercises while others can learn by just watching examples. It's important to know what type of learner you are so that you can find a course that will work best for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-is-the-course-uptodate"&gt;
  &lt;/a&gt;
  5. Is the course up-to-date?
&lt;/h2&gt;

&lt;p&gt;It's important to make sure that any course you buy is up-to-date with the latest research and developments in the field. You don't want to be learning outdated techniques that are no longer used in practice. Make sure to ask the instructor or course provider about this before buying a course.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-what-topics-are-covered"&gt;
  &lt;/a&gt;
  6. What topics are covered?
&lt;/h2&gt;

&lt;p&gt;Another important question to ask is what topics are covered in the course. Are you interested in deep learning for natural language processing? Neural networks? Computer vision? Make sure that the course you buy covers the topics that you're interested in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-is-there-a-lot-of-theory-or-is-it-mostly-handson"&gt;
  &lt;/a&gt;
  7. Is there a lot of theory or is it mostly hands-on?
&lt;/h2&gt;

&lt;p&gt;Some people prefer to learn with a mix of theory and practice, while others prefer just to focus on exercises. It's important to know what type of learner you are so that you can find a course that will work best for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-how-much-time-is-required"&gt;
  &lt;/a&gt;
  8. How much time is required?
&lt;/h2&gt;

&lt;p&gt;It's important to know how much time is required for the course. If you're only able to commit a few hours per week, then you'll want to find a course that isn't too intensive. If you have more time to spare, then you can look for a course that is more intensive.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-what-type-of-learner-are-you"&gt;
  &lt;/a&gt;
  9. What type of learner are you?
&lt;/h2&gt;

&lt;p&gt;It's important to know what type of learner you are before buying a deep learning course. Do you like lots of practice exercises? Or do you prefer listening to lectures? Make sure to consider your preferences before making a purchase.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-what-is-the-courses-refund-policy"&gt;
  &lt;/a&gt;
  10. What is the course's refund policy?
&lt;/h2&gt;

&lt;p&gt;It's important to know what the course's refund policy is before you buy it. Some courses may have a no-refund policy, while others may offer a money-back guarantee if you're not happy with the product. Make sure to read the fine print before making a purchase.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-how-is-the-course-delivered"&gt;
  &lt;/a&gt;
  11. How is the course delivered?
&lt;/h2&gt;

&lt;p&gt;When you're looking for a deep learning course, it's important to consider how the course is delivered. Some courses may be delivered entirely online, while others may require you to attend in-person sessions. Make sure to consider your availability and whether or not you're able to attend in-person sessions before buying a course.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-what-software-is-required"&gt;
  &lt;/a&gt;
  12. What software is required?
&lt;/h2&gt;

&lt;p&gt;Some courses may require you to have certain software installed on your computer in order to participate. Make sure you know what software is required before making a purchase. If you don't have the required software, you may be unable to participate in the course.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#13-what-are-the-courses-prerequisites"&gt;
  &lt;/a&gt;
  13. What are the course's prerequisites?
&lt;/h2&gt;

&lt;p&gt;Some courses may have prerequisites that you need to meet in order to be eligible to participate. Make sure you know what the prerequisites are before making a purchase. If you don't meet the prerequisites, you may not be able to take the course.&lt;/p&gt;




&lt;p&gt;These are just a few of the questions you should ask before buying a deep learning course. Make sure to do your research and ask around to find the best course for you.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; provide you with an easy way to build image datasets.&lt;br&gt;
15K+ categories to choose from&lt;br&gt;
Consistent folders structure for easy parsing&lt;br&gt;
Advanced tools for dataset pre-processing: image format, data split, image size and data augmentation.&lt;/p&gt;

&lt;p&gt;üëâVisit &lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; to learn more&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Clean  Code - Javascript</title>
      <author>Swaraj Panigrahi</author>
      <pubDate>Fri, 14 Jan 2022 07:56:42 +0000</pubDate>
      <link>https://dev.to/swrjp/clean-code-javascript-2hla</link>
      <guid>https://dev.to/swrjp/clean-code-javascript-2hla</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;It is not enough for code to work.&lt;/em&gt; - Robert C. Martin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Having spent hours of time writing, reviewing, and architecting web products, if there is one thing that gives me utmost satisfaction is a well-written code.&lt;/p&gt;

&lt;p&gt;Writing clean code, to me, should not be a clich√© rather a table stake for any software product. During the initial days of my career, I've been fortunate(and grateful) to be mentored by developers for whom "Clean Code" was a matter of habit. As I grew up the ladder in engineering teams, I felt the necessity to document my learnings to a blog. &lt;/p&gt;

&lt;p&gt;In this blog, I have addressed ten ideas that will help you start your journey towards writing clean maintainable code. Since I've spent the majority of my career writing code in Javascript my examples here are in Javascript. The concepts, however, can be applied to any programming language.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-meaningful-variable-names"&gt;
  &lt;/a&gt;
  1. Meaningful Variable Names
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't do this üí©
const a = 3.14;`

// Do this üëå 
const PI = 3.14
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-no-magic-numbers-or-strings"&gt;
  &lt;/a&gt;
  2. No Magic Numbers or Strings
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
// Don't do this üí©
const circumference = 2*3.14*radius;
const isAdminUser = user.type === "ADMIN";

// Do this üëå 
const PI = 3.14;
const USER_ROLES = {
    admin : "ADMIN",
    clerk : "CLERK"
}

const circumference = 2*3.14*radius;
const isAdminUser = user.type === USER_ROLES.admin;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why? &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If a magic string is being written in multiple places you have to change all of them. &lt;/li&gt;
&lt;li&gt;More manual work increases chances of typos.&lt;/li&gt;
&lt;li&gt;Magic numbers/Strings are not self-documenting.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-avoid-unwanted-context"&gt;
  &lt;/a&gt;
  3. Avoid Unwanted context
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't do this üí©
const car = {
    carMake: "BMW",
    carColor: "Black",
    carModel: "X5",
};

// Do this üëå 
const car = {
    make: "BMW",
    color: "Black",
    model: "X5",
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-functions-should-do-one-thing"&gt;
  &lt;/a&gt;
  4. Functions should do one thing
&lt;/h2&gt;

&lt;p&gt;This has to be the most important rule of software engineering. When a function does more than one thing, it is very difficult to write concise test cases for it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't do this üí©
function calculateAndDisplaySum(number1, number2) {
   let sum = number1 + number2;
   console.log(`Sum is ${sum}`);
}
calculateAndDisplaySum(5, 6);


// Do this üëå 
function calculateSum(number1, number2) {
   let sum = number1 + number2;
   return sum;
}

function displaySum(number){
   console.log(`Sum is ${number}`);
}

const sum = calculateSum(5,6);
displaySum(sum);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-less-than-2-arguments"&gt;
  &lt;/a&gt;
  5. Less than 2 arguments
&lt;/h2&gt;

&lt;p&gt;When the number of arguments is less than two, it makes easier for writing effective test cases.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't do this üí©

function createButton(name, title, disabled, onClick){
  //....
}

// Do this üëå 

function createButton({name, title, disabled, onClick}){
  //....
}

const addToCartBtn = createButton({
    name: "addToCart",
    title: "\"Add to Cart\","
    disabled: false,
    onClick: handleClick,
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-no-booleans-as-function-arguments"&gt;
  &lt;/a&gt;
  6. No Booleans as function arguments
&lt;/h2&gt;

&lt;p&gt;Flags tell that this function does more than one thing. Functions should do one thing(Refer #4). Split out your functions if they are following different code paths based on a boolean. This helps your code to stick to Single Responsibility Principle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't do this üí©
distance(pointA, pointB, true)

// Do this üëå 
distanceInKms(pointA, pointB);
distanceInMiles(pointA, pointB);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#7-naming-functions-right-approach"&gt;
  &lt;/a&gt;
  7. Naming functions - Right approach
&lt;/h2&gt;

&lt;p&gt;Function names should say what they do. It is a good idea to set a baseline among your development team members on how to approach this. Once this is done it is easier for anyone in the team to understand what the function is expected to do.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// This fetches data instantaneously.
const getUser = () =&amp;gt; {};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// This function sets data to an object.
const setUser = (user) =&amp;gt; {};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// This function gets data asynchronously.
const fetchUser = () =&amp;gt; {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// This function helps to render DOM.
const renderUser = () =&amp;gt; {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// This function helps to modify a object.
const updateUser = () =&amp;gt; {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// This function helps to handle event.
const handleUserCardClick = (evt) =&amp;gt; {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// These functions returns booleans to take decisions.
const shouldRenderUser = () =&amp;gt; {}
const isAdminUser = () =&amp;gt; {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#8-polymorphism-over-conditionals"&gt;
  &lt;/a&gt;
  8. Polymorphism over conditionals
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function test (condition) {
    if (condition === "A") {
        // do something related to "A" here
    } else if (condition === "B") {
        // do something related to "B" here
    } else if (condition === "C") {
        // do something related to "C" here
    }
}

test('A');
test('B');
test('C');

// Write it this way instead

const A = {
    doTheThing: function(){
        // code related to "A" here
    }
}

const B = {
    doTheThing: function(){
        // code related to "B" here
    }
}

const C = {
    doTheThing: function(){
        //  code related to "C" here
    }
}

function test (condition) {
    condition.doTheThing();    
}

test(A);
test(B);
test(C);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#9-use-promises-not-callbacks"&gt;
  &lt;/a&gt;
  9. Use Promises, not callbacks
&lt;/h2&gt;

&lt;p&gt;Javascript functions are first class citizens, but they are messy as callbacks! They are not clean and cause excessive amount of nesting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Don't do this üí©
get("https://datasource.url/endpoint"),
  (requestErr, response, body) =&amp;gt; {
    if (requestErr) {
      console.error(requestErr);
    } else {
      writeFile("newfile.html", body, writeErr =&amp;gt; {
        if (writeErr) {
          console.error(writeErr);
        } else {
          console.log("File written");
        }
      });
    }
  }
);

// Do this üëå 
get("https://datasource.url/endpoint"),
  .then(body =&amp;gt; {
    return writeFile("newfile.html", body);
  })
  .then(() =&amp;gt; {
    console.log("File written");
  })
  .catch(err =&amp;gt; {
    console.error(err);
  });

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#10-comments"&gt;
  &lt;/a&gt;
  10. Comments
&lt;/h2&gt;

&lt;p&gt;How much comment is too much comment? There are various schools of thoughts for this. I firmly believe in the idea of &lt;br&gt;
&lt;em&gt;"Good code mostly documents itself."&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I follow the principle of only commenting things that have business logic complexity. &lt;/p&gt;




&lt;p&gt;Learning to write clean code is a journey and not a destination.&lt;/p&gt;

&lt;p&gt;For further reading, do consider reading these books.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3EFwfwy"&gt;Clean Code by Robert C Martin &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/33diM17"&gt;Clean Coder by Robert C Martin&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>The Metaverse</title>
      <author>PranavUpadhyay7</author>
      <pubDate>Fri, 14 Jan 2022 07:52:39 +0000</pubDate>
      <link>https://dev.to/getintoweb3/the-metaverse-499g</link>
      <guid>https://dev.to/getintoweb3/the-metaverse-499g</guid>
      <description>&lt;p&gt;You might be hearing the word ‚ÄúMetaverse‚Äù these days a lot and probably wondering what it actually is.&lt;/p&gt;

&lt;p&gt;In brief, it's a combination of multiple elements of technology, including virtual reality(VR), augmented reality(AR), and video where users "live" within a digital universe. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0rxdbCtb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s59dzljgau1u6hmdons6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0rxdbCtb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s59dzljgau1u6hmdons6.png" alt="Virtual meeting" width="712" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-exactly-is-the-metaverse"&gt;
  &lt;/a&gt;
  What exactly is the Metaverse?
&lt;/h1&gt;

&lt;p&gt;There is no clear definition for the Metaverse as of yet. Some call it a virtual world, some call it a video game while some term it an internet server with human bots which are managed online.&lt;/p&gt;

&lt;p&gt;Many large, centralised organisations, such as Meta, place a premium on connecting a virtual world through a server that is active 24 hours a day. There have been multiple successful attempts at this project, and some servers remain operational 24 hours a day, seven days a week, even if they have not yet been made public. "The next platform will be even more immersive ‚Äì an embodied internet where you're in the experience, not just looking at it. We call this the Metaverse, and it will touch every product we build.", says Meta CEO Mark Zuckerberg.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HhKUjDCy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10utjvgl29ywfhurvb3i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HhKUjDCy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10utjvgl29ywfhurvb3i.png" alt="Mark" width="880" height="561"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-long-would-it-take-the-metaverse-to-take-command"&gt;
  &lt;/a&gt;
  How long would it take the Metaverse to take command?
&lt;/h1&gt;

&lt;p&gt;The word "Metaverse" was coined by author Neal Stephenson in his 1992 science fiction novel "Snow Crash," in which he imagined lifelike avatars meeting in realistic 3D buildings and other virtual reality scenarios, so it's safe to assume that the concept has been around for a while. Despite having the notion of the Metaverse but being unable to implement it due to a lack of technology, the work to achieve it began a few years ago, and at current rate, it does not appear that we will be entering the period of the Metaverse anytime soon.&lt;/p&gt;

&lt;p&gt;Since then, a number of advancements have paved the road toward a true Metaverse, an online virtual environment that combines augmented reality, virtual reality, 3D holographic avatars, video, and other forms of communication. As the Metaverse grows, it will provide you with a hyper-real alternative universe in which to coexist.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BPO5NTQh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v67owvk05djjah9c8a3v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BPO5NTQh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v67owvk05djjah9c8a3v.png" alt="VR" width="880" height="459"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mark Zuckerberg, the CEO of the newly renamed Meta (previously Facebook), predicts that the Metaverse's primary capabilities will take five to ten years to become ubiquitous. However, some features of the Metaverse are currently visible. Even if they aren't available to everyone, ultra-fast broadband rates, virtual reality headgear, and persistent always-on online worlds are already available.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-will-we-be-able-to-do-in-the-metaverse"&gt;
  &lt;/a&gt;
  What will we be able to do in the Metaverse?
&lt;/h1&gt;

&lt;p&gt;Things like attending a virtual performance, spending a virtual vacation, viewing or making artwork, and trying on or purchasing digital apparel are just a few examples.&lt;/p&gt;

&lt;p&gt;Imagine a world where you could meet someone and spend a day with them without ever meeting them in the real world; isn't that fascinating?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5yDaJKNg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pp28u4yk3792gzpa51vh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5yDaJKNg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pp28u4yk3792gzpa51vh.png" alt="VR shopping" width="880" height="546"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yes, it can be termed a miracle, but these are all predictions, and predictions always have a small chance of going wrong, so none of these things can be guaranteed.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#will-it-be-as-efficient-as-said"&gt;
  &lt;/a&gt;
  Will it be as efficient as said?
&lt;/h1&gt;

&lt;p&gt;We cannot ignore the issues that the Metaverse can generate, despite all of the benefits it can provide. Imagine someone spending a day off in virtual reality with his family and friends when his connection (internet server) suddenly goes down; the turmoil would be enormous!&lt;/p&gt;

&lt;p&gt;Some tech experts believe that the Metaverse will be able to solve a wide range of problems, but because it will be an online web server, we cannot entirely rely on it. Although the Metaverse would be extremely useful for the next generation of technology, it would unlock numerous features of the web that are currently ignored or unusable.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-metaverse-is-coming"&gt;
  &lt;/a&gt;
  The Metaverse is coming!
&lt;/h1&gt;

&lt;p&gt;The Metaverse has evolved over the last few years from a fantasy future envisioned in numerous works of fiction to an actual reality that exists now, albeit in an early stage of development. The stage has been prepared for the next wave of immersive metaverse applications to emerge, and the underlying technologies are progressing at a rapid pace.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ur1dtCOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pch2b8lsybdu0t872nb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ur1dtCOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pch2b8lsybdu0t872nb.png" alt="F" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's impossible to predict whether we'll see a dismal reality such to that depicted in Snow Crash and the Matrix, or a gamified virtual world replete with nostalgic references like Ready Player One. Perhaps the metaverse will manifest in ways we haven't yet imagined. With the metaverse's future state yet unknown, builders, artists, users, and visionaries must work together to create a user-owned digital realm characterised by decentralisation, immersion, and connectedness.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-ideas-do-you-have-for-the-metaverse"&gt;
  &lt;/a&gt;
  What ideas do you have for the Metaverse?
&lt;/h2&gt;

&lt;p&gt;Let us know in the comment section. We'd love to hear your thoughts.&lt;/p&gt;

&lt;p&gt;Also, don't forget to follow us on &lt;a href="https://twitter.com/GetIntoWeb3"&gt;Twitter&lt;/a&gt; and join the &lt;a href="https://discord.gg/invite/nbbpBG3SCT"&gt;Discord&lt;/a&gt; community to learn more- &lt;a href="https://discord.gg/invite/nbbpBG3SCT"&gt;https://discord.gg/invite/nbbpBG3SCT&lt;/a&gt;&lt;/p&gt;

</description>
      <category>metaverse</category>
      <category>web3</category>
      <category>crypto</category>
      <category>beginners</category>
    </item>
    <item>
      <title>MongoDB Atlas Hackathon:  S/F E-Commerce Creation</title>
      <author>Ryan Collicutt</author>
      <pubDate>Fri, 14 Jan 2022 07:36:44 +0000</pubDate>
      <link>https://dev.to/ryancoll/mongodb-atlas-hackathon-sf-e-commerce-creation-f3b</link>
      <guid>https://dev.to/ryancoll/mongodb-atlas-hackathon-sf-e-commerce-creation-f3b</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Building an E-Commerce platform has never been easier with MongoDB's Atlas Search. You can create custom indexes on your products, get lightning fast results on searches within your database, and use a wide range of popular features, like autocomplete. &lt;/p&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/irenewuu"&gt;@irenewuu&lt;/a&gt; and &lt;a class="mentioned-user" href="https://dev.to/ryancoll"&gt;@ryancoll&lt;/a&gt; present...&lt;/p&gt;

&lt;p&gt;Streetz Footwear:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R_mQeSrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wi21hp8yhlj9tpigpjp5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R_mQeSrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wi21hp8yhlj9tpigpjp5.png" alt="Streetz Footwear Homepage:" width="880" height="709"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h2&gt;

&lt;p&gt;Streetz Footwear is a responsive e-commerce website built with Next.js, React.js, Mongoose, and MongoDB Atlas Search.&lt;br&gt;
Visit the web-app: &lt;a href="https://streetzfootwear.vercel.app/"&gt;Streetz Footwear&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h2&gt;

&lt;p&gt;E-Commerce Creation&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/RyanColl"&gt;
        RyanColl
      &lt;/a&gt; / &lt;a href="https://github.com/RyanColl/E-Commerce-MongoDB-Hackathon-2022"&gt;
        E-Commerce-MongoDB-Hackathon-2022
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Investigate MongoDB's Atlas Search with autocomplete in this stunning E-Commerce Creation.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h2&gt;
E-Commerce Store integrating Atlas Search using MongoDB and NextJS&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.mongodb.com/" rel="nofollow"&gt;MongoDB&lt;/a&gt; is a general purpose, document-based, distributed database built for modern application developers and for the cloud era. This example will show you how to connect to and use MongoDB as your backend for your Next.js app.&lt;/p&gt;
&lt;p&gt;If you want to learn more about MongoDB, visit the following pages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mongodb.com/atlas" rel="nofollow"&gt;MongoDB Atlas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/" rel="nofollow"&gt;MongoDB Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to learn more about NextJS, vistit the following pages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/vercel/next.js/#getting-started"&gt;NextJS Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/learn/basics/create-nextjs-app" rel="nofollow"&gt;NextJS Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Configuration&lt;/h2&gt;
&lt;h3&gt;
Set up a MongoDB database&lt;/h3&gt;
&lt;p&gt;Set up a MongoDB database either locally or with &lt;a href="https://mongodb.com/atlas" rel="nofollow"&gt;MongoDB Atlas for free&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
Set up environment variables&lt;/h3&gt;
&lt;p&gt;Copy the &lt;code&gt;env.local.example&lt;/code&gt; file in this directory to &lt;code&gt;.env.local&lt;/code&gt; (which will be ignored by Git):&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;cp .env.local.example .env.local&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Set each variable on &lt;code&gt;.env.local&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;MONGODB_URI&lt;/code&gt; - Your MongoDB connection string. If you are using &lt;a href="https://mongodb.com/atlas" rel="nofollow"&gt;MongoDB Atlas&lt;/a&gt; you can find this by clicking the "Connect" button for your cluster.&lt;/li&gt;
&lt;/ul&gt;‚Ä¶&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/RyanColl/E-Commerce-MongoDB-Hackathon-2022"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#atlas-search"&gt;
  &lt;/a&gt;
  Atlas Search
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#indexes"&gt;
  &lt;/a&gt;
  Indexes
&lt;/h4&gt;

&lt;p&gt;Three Indexes were set up (the maximum for a free cluster) for different purposes for this app.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first index searches our database for a single element of a collection: type.
The type being passed as a parameter is either 'mens', or 'womens', and the database is searched accordingly.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getProductsByType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;$search&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wildcard&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;The second index searches our database for a single element of a collection: collectionName.
The collection being passed as a parameter is either 'sport', 'luxury', or 'collectors', and the database is searched accordingly.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getProductsByCollection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;$search&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;collectionName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wildcard&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;The third index setup for this app is the most powerful and one I would like to show off for purposes of the hackathon. This index is setup using MongoDB's Atlas Search's &lt;a href="https://docs.atlas.mongodb.com/atlas-search/autocomplete/"&gt;AutoComplete&lt;/a&gt;. Autocomplete allows us to take a complete index of our database, and search through a specific field for products that match the spelling of a word. We can even apply a fuzzy filter, so when users misspell our product names, MongoDB still knows what they mean. The index is as follows:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;atlasSearch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchText&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;$search&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;autocomplete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
              &lt;span class="na"&gt;autocomplete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;searchText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;fuzzy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;maxEdits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;prefixLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The name of this index is autocomplete, and the path we are looking through is the description of the products. We could look through names/titles if we had simpler products like groceries, but with shoe descriptions, Atlas Search uses score based returns to order the products from the query based on their score. Using a simple dropdown, I have placed the products underneath the search bar in a scrollable menu.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#autocomplete-preview"&gt;
  &lt;/a&gt;
  Autocomplete Preview
&lt;/h4&gt;

&lt;p&gt;Autocomplete for "comfort":&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L07DCwrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vez7kma86llwyofptsdh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L07DCwrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vez7kma86llwyofptsdh.png" alt='Autocomplete for "comfort":' width="880" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Autocomplete for "style":&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K4HieEOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rb1fn32efheq9bw1p7kg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K4HieEOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rb1fn32efheq9bw1p7kg.png" alt='Autocomplete for "style":' width="880" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#products-page"&gt;
  &lt;/a&gt;
  Products Page
&lt;/h4&gt;

&lt;p&gt;Streetz Footwear Products Page:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tOLY41Gy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/214wbsa81d3mgj1iynrf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tOLY41Gy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/214wbsa81d3mgj1iynrf.png" alt="Streetz Footwear Products Page:" width="880" height="718"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#individual-product-page"&gt;
  &lt;/a&gt;
  Individual Product Page
&lt;/h4&gt;

&lt;p&gt;Streetz Footwear Individual Product Page:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0irDRFy3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/an6tsq7dobdgtodwinl6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0irDRFy3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/an6tsq7dobdgtodwinl6.png" alt="Streetz Footwear Individual Product Page:" width="880" height="458"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#collaborators"&gt;
  &lt;/a&gt;
  Collaborators
&lt;/h4&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/irenewuu"&gt;@irenewuu&lt;/a&gt; &lt;br&gt;
UX/UI DESIGNER &amp;amp; FRONT END DEV üé®üíª&lt;/p&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/ryancoll"&gt;@ryancoll&lt;/a&gt; &lt;br&gt;
FULL STACK WEB DEV ü•ûüíª&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tech-stack-%F0%9F%9B%A0"&gt;
  &lt;/a&gt;
  Tech Stack üõ†üíª
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Next.js&lt;/li&gt;
&lt;li&gt;React.js&lt;/li&gt;
&lt;li&gt;SCSS&lt;/li&gt;
&lt;li&gt;Mongoose&lt;/li&gt;
&lt;li&gt;MongoDB Atlas Search&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to &lt;a class="mentioned-user" href="https://dev.to/mongodb_staff"&gt;@mongodb_staff&lt;/a&gt; for this opportunity!&lt;/p&gt;

</description>
      <category>atlashackathon</category>
    </item>
    <item>
      <title>What is AWS Community Builders and what's in it for you</title>
      <author>Andra Glavan (she/her)</author>
      <pubDate>Fri, 14 Jan 2022 07:00:52 +0000</pubDate>
      <link>https://dev.to/aws-builders/what-is-aws-community-builders-and-whats-in-it-for-you-1e6a</link>
      <guid>https://dev.to/aws-builders/what-is-aws-community-builders-and-whats-in-it-for-you-1e6a</guid>
      <description>&lt;p&gt;A few days ago the application for the AWS Community Builders program has opened and I happily shared the news on Twitter (@ AndraGlavan) and &lt;a href="https://www.linkedin.com/in/andra-glavan-0003ab69/"&gt;LinkedIn&lt;/a&gt;. Since then, I keep getting DMs like "What exactly is AWS Community Builders program?" and "Could you help me with my application?" and I am delighted to help. &lt;br&gt;
A few of my colleagues have already written some great articles on this topic, but I would like to highlight what the program is about and what you can get from it ‚ú®.&lt;/p&gt;

&lt;p&gt;‚ùóThe application is open from January 10th through January 24th EOD Pacific Time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-aws-community-builders-program"&gt;
  &lt;/a&gt;
  What is AWS Community Builders Program
&lt;/h2&gt;

&lt;p&gt;You can read everything about it on the &lt;a href="https://aws.amazon.com/developer/community/community-builders/"&gt;main page&lt;/a&gt;, but basically it is a great way to connect the people from all around the globe (94 countries now) who are activly involved in the AWS community, all in one place. Of course, it will be impossible to manage a program like this if everyone in the AWS space gets in, and this is why only a small percent of the applicants receive the great news. In the last round of applications - October 2021, only 10% of the applicantions were approved. &lt;br&gt;
To stand out you have to really be involved, write more articles, do some Meetup presentations, organize Meetups, have an YouTube channel, a Podcast, be very active on Twitter. You don't have to be doing all of them, you just have to stand out among the applicants. And it's not all about that, the questions cover your motivation for joining, what is your unique perspective, and what are your future plans.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#eager-to-find-out-more"&gt;
  &lt;/a&gt;
  Eager to find out more
&lt;/h6&gt;

&lt;p&gt;To know more about who should apply and how, you can read this &lt;a href="https://dev.to/pawelpiwosz/aws-community-builders-program-1m75"&gt;article&lt;/a&gt; by &lt;a class="mentioned-user" href="https://dev.to/pawelpiwosz"&gt;@pawelpiwosz&lt;/a&gt; &lt;br&gt;
For a more in depth information about the program and some of its benefits, you can read this &lt;a href="https://dev.to/aws-builders/aws-community-builders-program-6kf"&gt;article&lt;/a&gt; by &lt;a class="mentioned-user" href="https://dev.to/andrewbrown"&gt;@andrewbrown&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-in-it-for-you"&gt;
  &lt;/a&gt;
  What's in it for you
&lt;/h2&gt;

&lt;p&gt;It is all about the community ‚ù§Ô∏è and it comes with some extra benefits üéÅ.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS Commnity Builders is a great community - I've met some of my collegues for the first time &lt;del&gt;this&lt;/del&gt; last year at re:Invent, and it was amazing to start feeling comfortable with people I have actually never met before. Being in the Slack workspace, you get a lot of help and support, but also a chance to do some networking and to make new friends, or just finding out about things you never heard about before üòÑ.&lt;/li&gt;
&lt;li&gt;Free stuff - Everybody loves free stuff, especially when they are branded with the cloud you love or with the great community logo. You get an Welcome Kit, AWS Credits, exam voucher and some extra things that usually vary.&lt;/li&gt;
&lt;li&gt;Exclusiveness - There are exclusive events with people from AWS and sessions with the AWS Heroes. This is more amazing than I can describe. The chance to do some networking with the Heroes and to be able to attend a presentation from Jeff Barr itself is just beyond awesome ü¶Ñ.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#eager-to-find-out-more"&gt;
  &lt;/a&gt;
  Eager to find out more
&lt;/h6&gt;

&lt;p&gt;Then this &lt;a href="https://dev.to/aws-builders/10-benefits-to-joining-aws-community-builders-4cle"&gt;article&lt;/a&gt; on 10 benefits of the program by &lt;a class="mentioned-user" href="https://dev.to/vattybear"&gt;@vattybear&lt;/a&gt; is the right place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this was a quick read that covered the basics of what the AWS Community Builders program is and what benefits it can bring you if you will join. Keep being great and keep trying! If you don't get in easily, doesn't mean you won't get in at all! üéì&lt;/p&gt;

</description>
      <category>awscommunitybuilders</category>
      <category>aws</category>
      <category>community</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Hashnode is taking over the world</title>
      <author>Chris Bongers</author>
      <pubDate>Fri, 14 Jan 2022 06:39:41 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/hashnode-is-taking-over-the-world-37jf</link>
      <guid>https://dev.to/dailydevtips1/hashnode-is-taking-over-the-world-37jf</guid>
      <description>&lt;p&gt;And it's not a bad thing!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hashnode.com/@dailydevtips/joinme"&gt;Hashnode&lt;/a&gt; for those who don't know, it is a blogging platform for technical articles.&lt;br&gt;
Since the early days, I've been a member, and it has grown massively since then.&lt;/p&gt;

&lt;p&gt;Recently one of the founders shared these impressive statistics on Twitter:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--cFm6-zSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1480406297061126144/6lUNBr8t_normal.jpg" alt="Syed Fazle Rahman profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Syed Fazle Rahman
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/fazlerocks"&gt;@fazlerocks&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Thrilled to share some &lt;a href="https://twitter.com/hashnode"&gt;@hashnode&lt;/a&gt; YoY numbers from a very successful 2021‚ö°Ô∏è&lt;br&gt;&lt;br&gt;Blogs:     17K‚û°Ô∏è100K (+488%)&lt;br&gt;Articles: 18K‚û°Ô∏è73K (+405%)&lt;br&gt;Reads:    5M‚û°Ô∏è31M (+600%)&lt;br&gt;Hackathons: 0‚û°Ô∏è4&lt;br&gt;Team:             5‚û°Ô∏è19&lt;br&gt;Funding: 8.7M&lt;br&gt;Twitter: 43K+&lt;br&gt;Discord: 6K+&lt;br&gt;&lt;br&gt;Thank you to our amazing community. üíô
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      06:49 AM - 10 Jan 2022
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1480431473580675074" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1480431473580675074" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1480431473580675074" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;And right before that Nazanin, announced on Twitter that she would organize a &lt;a href="https://twitter.com/nazanin_ashrafi/status/1479860636385484810"&gt;CSS art challenge&lt;/a&gt;, before I even knew what it was going to be about, I've said yes.&lt;/p&gt;

&lt;p&gt;And here we are. This article describes how I made my CSS artwork for this Hashnode CSS Art Challenge.&lt;/p&gt;

&lt;p&gt;My result looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qNHHvob1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642013095101/kzoVmjFk6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qNHHvob1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642013095101/kzoVmjFk6.gif" alt="Hashnode is taking over the world" width="500" height="505"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: You can try it out at the bottom&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-rules-and-my-idea"&gt;
  &lt;/a&gt;
  The rules and my idea
&lt;/h2&gt;

&lt;p&gt;The rules for this challenge are super simple.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use the Hashnode logo and run it into whatever you think of.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I was trying to fall asleep, but this challenge kept me up. I just couldn't put my finger on what I wanted to create.&lt;/p&gt;

&lt;p&gt;And then it hit me!&lt;/p&gt;

&lt;p&gt;Hashnode is taking over the world!&lt;br&gt;
So let's make a character out of this logo and have it walk around the world.&lt;/p&gt;

&lt;p&gt;My idea is to combine the CSS art I know and try out &lt;a href="https://pokecoder.hashnode.dev/making-pixel-art-with-pure-css"&gt;pixel art&lt;/a&gt;, as that sounds cool to me!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-the-logo"&gt;
  &lt;/a&gt;
  Creating the logo
&lt;/h2&gt;

&lt;p&gt;Let's start with the logo. I'm sure you might think, oh well, you can use a rounded square and put a round div over it, r right?&lt;/p&gt;

&lt;p&gt;And yes, we could do that, but then we can't use backgrounds behind it.&lt;/p&gt;

&lt;p&gt;So I decided to go with a little different approach.&lt;/p&gt;

&lt;p&gt;I've added a div that I called &lt;code&gt;hashnode&lt;/code&gt; and inside created a &lt;code&gt;body&lt;/code&gt; which will hold the logo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.hashnode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;aspect-ratio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="err"&gt;.body&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;27%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2962ff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;-webkit-mask&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;#0000&lt;/span&gt; &lt;span class="m"&gt;28%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt; &lt;span class="m"&gt;28%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;#0000&lt;/span&gt; &lt;span class="m"&gt;28%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt; &lt;span class="m"&gt;28%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The magic here is actually in the &lt;code&gt;webkit-mask&lt;/code&gt;. This defines a transparent radial gradient.&lt;br&gt;
This will create a round gap in the body.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: This idea was &lt;a href="https://codepen.io/alvaromontoro/pen/RwLYRpr"&gt;demoed out by Alvaro&lt;/a&gt;. Thank you very much for that.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then I decided to add arms to the character, which would move. The arms are two times the same styling with a different offset.&lt;br&gt;
I've also made sure the right arm is one second delayed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.arm&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#001&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;#001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;70%&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt; &lt;span class="n"&gt;move-arm&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="err"&gt;&amp;amp;:before&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;aspect-ratio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-5%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;-left&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;-right&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see I used the &lt;code&gt;before&lt;/code&gt; selector to add the little round hand-like shapes, which would make the arms look neater.&lt;/p&gt;

&lt;p&gt;This shape is a square box where we color only two sides of a rounded border.&lt;/p&gt;

&lt;p&gt;This is what it looks like if we color it completely.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hr5WLw4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642006228783/QAhF4JPDV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hr5WLw4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642006228783/QAhF4JPDV.png" alt="Arm color" width="174" height="177"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A good thing to note about the arm is this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;transform-origin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;bottom&lt;/span&gt; &lt;span class="nt"&gt;left&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This defines what axis the transform should take place. Setting this to &lt;code&gt;bottom left&lt;/code&gt; allows the rotation to happen on a solid axis, making the arm "swing".&lt;/p&gt;

&lt;p&gt;As for the swing animation goes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;move-arm&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A very straightforward rotating from 45 degrees to 0 and back.&lt;br&gt;
I'm using the scaleY to invert because I started upside down and was too lazy to revert it üòÇ.&lt;/p&gt;

&lt;p&gt;The legs are a very similar approach, but they are longer, and the shoes are slightly different.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.leg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;45%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt; &lt;span class="n"&gt;move-leg&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="err"&gt;&amp;amp;:before&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;90%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;-left&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;-right&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for the animation, I used the same approach. But with fewer degrees since your legs don't swing as much as your arms.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;move-leg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#meme-glasses-pixel-art"&gt;
  &lt;/a&gt;
  Meme glasses pixel art
&lt;/h2&gt;

&lt;p&gt;I decided to give the character some glasses and meme glasses for that Mather.&lt;/p&gt;

&lt;p&gt;They are perfect for trying out pixel art, as they are pixels.&lt;/p&gt;

&lt;p&gt;The glasses look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.glasses&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;90px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;110px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;130px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;140px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;160px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;170px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;180px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;190px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;90px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;130px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;140px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;150px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;160px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;170px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;180px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;190px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;80px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;90px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;130px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;140px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;160px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;170px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;180px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;190px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;130px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;140px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;160px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;170px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;180px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;60px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;140px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;160px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;170px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This stacking of border shadows allows us to create a pixel-like effect.&lt;/p&gt;

&lt;p&gt;I enjoyed using this and will most likely dedicate a complete article to pixel art and how it works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-the-character-whistle"&gt;
  &lt;/a&gt;
  Making the character whistle
&lt;/h2&gt;

&lt;p&gt;I thought it would be cool to make the character whistle. In this case, it means a musical note comes out of its "hole" (mouth?).&lt;/p&gt;

&lt;p&gt;For this, I used the &lt;code&gt;before&lt;/code&gt; selector on the hashnode div.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.hashnode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;&amp;amp;:before&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'üéµ'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5s&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, it plays an infinite &lt;code&gt;notes&lt;/code&gt; animation.&lt;br&gt;
The notes animation looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;notes&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;75&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;360deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;360deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It starts by setting the opacity to 1 and resetting the rotation.&lt;br&gt;
Then we use a 5% step not to make the animation super fast and rotate the note as we move it upwards.&lt;br&gt;
And eventually, we fade it out.&lt;/p&gt;

&lt;p&gt;This will then re-loop, making it start from 0%.&lt;/p&gt;

&lt;p&gt;I think it turned out to be quite a fantastic addition.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#run-the-world-animation"&gt;
  &lt;/a&gt;
  Run the world animation
&lt;/h2&gt;

&lt;p&gt;The last part is the globe that spins around.&lt;br&gt;
For this, I created a big circle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.world&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;75vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;aspect-ratio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(https://cdn.hashnode.com/res/hashnode/image/upload/v1641971056244/tPSv8apET.png)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15s&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The circle is then filled with a PNG image of the world. You can open the above image to see what it looks like.&lt;/p&gt;

&lt;p&gt;I've added a &lt;code&gt;world&lt;/code&gt; animation that will spin it around. It's important to note the &lt;code&gt;linear&lt;/code&gt; animation so it won't slow down once it's almost complete but move at the same speed all the time.&lt;/p&gt;

&lt;p&gt;The animation itself looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;360deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just a simple from 0 degrees to 360 degrees animation that makes the world go round, and round and round!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finishing-touch"&gt;
  &lt;/a&gt;
  Finishing touch
&lt;/h2&gt;

&lt;p&gt;Go ahead, click the character...&lt;/p&gt;

&lt;p&gt;(Put your music up! üéµ)&lt;/p&gt;

&lt;p&gt;Yes, I decided to add "Daft Punk - Around the world" when clicking the logo.&lt;/p&gt;

&lt;p&gt;For this, we leverage a little bit of JavaScript that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;audio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Audio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://download.mp3very.buzz/d/Daft-Punk-Around-The-World.mp3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hashnode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.hashnode&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;hashnode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paused&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pause&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will load a new Audio object, and once we click the logo, it will toggle between playing and pausing the music.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I loved doing this challenge as it allowed me to try out different types of CSS art.&lt;/p&gt;

&lt;p&gt;And I think it came out pretty cool üòÇ&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/wvrQzMq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;A big shoutout to the following people for all their parts of information around it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nazanin Ashrafi for setting this up! ‚ö°Ô∏è&lt;/li&gt;
&lt;li&gt;Alvaro Montoro for the mask setup üíñ&lt;/li&gt;
&lt;li&gt;Ale Thomas Ale for the pixel-art idea üëæ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Task Manager</title>
      <author>Junius Lekgoara</author>
      <pubDate>Fri, 14 Jan 2022 06:36:25 +0000</pubDate>
      <link>https://dev.to/julekgwa/task-manager-1coe</link>
      <guid>https://dev.to/julekgwa/task-manager-1coe</guid>
      <description>&lt;h3&gt;
  &lt;a href="#task-manager"&gt;
  &lt;/a&gt;
  Task Manager
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;Task manager, is a web app where users can have a list of tasks they need to complete or things that they want to do. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Productivity&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/julekgwa"&gt;
        julekgwa
      &lt;/a&gt; / &lt;a href="https://github.com/julekgwa/task-manager"&gt;
        task-manager
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h2&gt;
MongoDB Atlas Hackathon&lt;/h2&gt;
&lt;h3&gt;
Running the project&lt;/h3&gt;
&lt;p&gt;add the following variables to your env&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;export&lt;/span&gt; PASSWORD pass
&lt;span class="pl-k"&gt;export&lt;/span&gt; USERNAME username
&lt;span class="pl-k"&gt;export&lt;/span&gt; DATABASE db&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Clone the repo&lt;/h3&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;git clone https://github.com/julekgwa/task-manager.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;cd task-manager

#run npm install or yarn

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;
Preview&lt;/h2&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/julekgwa/task-managerimages/task.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3SDHXph9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/julekgwa/task-managerimages/task.png" alt="preview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
License&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;Licensed under the Apache License, Version 2.0 (the &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;License&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;span class="pl-k"&gt;;&lt;/span&gt;
you may not use this file except &lt;span class="pl-k"&gt;in&lt;/span&gt; compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to &lt;span class="pl-k"&gt;in&lt;/span&gt; writing, software
distributed under the License is distributed on an &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;AS IS&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License &lt;span class="pl-k"&gt;for&lt;/span&gt; the specific language governing permissions and
limitations under the License.&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/julekgwa/task-manager"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#technologies-used"&gt;
  &lt;/a&gt;
  Technologies used
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;ReactJS&lt;/li&gt;
&lt;li&gt;MongoDB&lt;/li&gt;
&lt;li&gt;Nodejs&lt;/li&gt;
&lt;li&gt;Restify&lt;/li&gt;
&lt;li&gt;Redux&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e36Lo3oY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsb0emdh9jca33w7h7mn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e36Lo3oY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsb0emdh9jca33w7h7mn.png" alt="Image description" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6q5WUUDB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjqx38qw0lxnhl44w4ta.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6q5WUUDB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjqx38qw0lxnhl44w4ta.png" alt="Image description" width="880" height="417"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>atlashackathon</category>
    </item>
    <item>
      <title>Bubble sort explained to a 6-year-old kid</title>
      <author>Abel Lifaefi Mbula</author>
      <pubDate>Fri, 14 Jan 2022 06:31:25 +0000</pubDate>
      <link>https://dev.to/bam92/bubble-sort-explained-to-a-6-year-old-kid-3mfa</link>
      <guid>https://dev.to/bam92/bubble-sort-explained-to-a-6-year-old-kid-3mfa</guid>
      <description>&lt;p&gt;You're a programmer, right? But do you rally think like programmers (or computer scientists) do?&lt;/p&gt;

&lt;p&gt;When going for job interviews, you're likely to meet data structure and algorithm questions. This helps companies make sure they hire a systematic problem solver developer.&lt;/p&gt;

&lt;p&gt;In this shot, I want you to learn more about one of the simplest sorting algorithms out there: &lt;strong&gt;bubble sort&lt;/strong&gt;. How it works and how do we implement it with Java language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-bubble-sort-in-a-nutshell"&gt;
  &lt;/a&gt;
  The bubble sort in a nutshell
&lt;/h2&gt;

&lt;p&gt;There we are: what is bubble sort?&lt;/p&gt;

&lt;p&gt;Bubble sort is one type of sorting algorithms, and the simplest one, which is used to repeatedly compare adjacent items in a list and exchange them if they are in wrong order.&lt;/p&gt;

&lt;p&gt;Let consider a list that need to be sorted in ascending order. To do this with bubble sort, we will start by comparing the first item of the list with the second one, if the first item is greater than the second, we swap both items, and then move on to compare the second and the third items, and so on. So, for a given list of size &lt;code&gt;n&lt;/code&gt;, we need to repeat this process &lt;code&gt;n - 1&lt;/code&gt; times.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bubble sort is also called comparison alogorithm&lt;/li&gt;
&lt;li&gt;In real life, we can observe bubble sort when people in a queue wanting to be standing in a high wise sorted manner swap their positions among themselves until everyone is standing based on increasing order of heights&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's visualize an example of bubble sort so that you get it very well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bubble-sort-in-practice"&gt;
  &lt;/a&gt;
  Bubble sort in practice
&lt;/h2&gt;

&lt;p&gt;Here, I'll explain with an example how the bubble sort works, then after we will implement the algorithm in Java.&lt;/p&gt;

&lt;p&gt;Let's consider this list of integer values: &lt;code&gt;19, 1, 9, 3, 10, 13&lt;/code&gt;. We want it to be sorted in ascending order.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w1c4CIkl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnzchazq8qjz4mzsroa1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w1c4CIkl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnzchazq8qjz4mzsroa1.PNG" alt="List with indexes" width="629" height="103"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can now proceed with the comparison. You can notice that I've added indexes above each item of the list.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-iteration"&gt;
  &lt;/a&gt;
  First iteration
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We start with the first and second item: &lt;code&gt;19 &amp;gt; 1&lt;/code&gt; is true, so we need to swap both items.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qaxRsBgY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3geaawzp21m9h2r1ea2c.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qaxRsBgY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3geaawzp21m9h2r1ea2c.PNG" alt="Swapping item 1 and item 2" width="631" height="138"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our list looks now like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--foC37HMs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tucbaxm5qu0ukb0bt9qq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--foC37HMs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tucbaxm5qu0ukb0bt9qq.PNG" alt="The new list" width="633" height="100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Next, we compare the second item with the third one: &lt;code&gt;19 &amp;gt; 9&lt;/code&gt; is true, again we need to swap.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ax_ZZaV7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmivlf9zy1sdy9u1kibt.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ax_ZZaV7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmivlf9zy1sdy9u1kibt.PNG" alt="Swapping item 2 and item 3" width="635" height="133"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The new list is formed as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YISQRBcc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45pfsc7b6uglnno0ktth.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YISQRBcc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45pfsc7b6uglnno0ktth.PNG" alt="New list after swapping item 2 and item 3" width="637" height="105"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We proceed with the third and fourth items: &lt;code&gt;19 &amp;gt; 3&lt;/code&gt; is true, we swap as before.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a56yMnEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bfk6thwuviyn5ysdr270.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a56yMnEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bfk6thwuviyn5ysdr270.PNG" alt="Swapping item 3 and item 4" width="635" height="140"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again, our list is arranged like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1e4fRCYB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15y5eudbg3drwvzw4djp.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1e4fRCYB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15y5eudbg3drwvzw4djp.PNG" alt="New list after swapping item 3 and 4" width="635" height="99"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Let's continue the comparison with the fourth and the fifth items: &lt;code&gt;19 &amp;gt; 10&lt;/code&gt; is true, once more we swap.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dlPvCboT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rxrfm5xde1ck1s44ex0h.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dlPvCboT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rxrfm5xde1ck1s44ex0h.PNG" alt="Swapping item 4 and item 5" width="633" height="138"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After swapping, the list is now as follows&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7220Ttbm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0jgjpkd4yrqky3p5yfek.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7220Ttbm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0jgjpkd4yrqky3p5yfek.PNG" alt="New list after swapping item 4 and item 5" width="646" height="106"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We proceed with the fifth item and the last one: &lt;code&gt;19 &amp;gt; 13&lt;/code&gt; is true, we need to swap.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SwhoH2vo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8y8s7mxekcwmjtwhtt71.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SwhoH2vo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8y8s7mxekcwmjtwhtt71.PNG" alt="Swapping item 5 and item 6" width="639" height="139"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thus, after swapping item 5 and item 6, the list becomes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_OQ6KKjC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6i9wyv68gqn6byyqoqu5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_OQ6KKjC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6i9wyv68gqn6byyqoqu5.PNG" alt="New list after swapping item 5 and item 6" width="647" height="107"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the end of the first iteration. Notice how the largest item (&lt;code&gt;19&lt;/code&gt;) is at the last position. &lt;code&gt;10&lt;/code&gt; and &lt;code&gt;13&lt;/code&gt; are also at their position.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#second-iteration"&gt;
  &lt;/a&gt;
  Second iteration
&lt;/h2&gt;

&lt;p&gt;We will be doing the same thing as in the first iteration.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We proceed with the first and the second items: &lt;code&gt;1 &amp;gt; 9&lt;/code&gt; is false, so no swapping.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s----I_GwNZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/az7kg42s4d80as9airoh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s----I_GwNZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/az7kg42s4d80as9airoh.PNG" alt="1 is not greater than 9, no swapping" width="641" height="103"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Next, we proceed with &lt;code&gt;9&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt;: &lt;code&gt;9 &amp;gt; 3&lt;/code&gt; is true, we swap.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kCguMT24--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0hk4wopw6ibdrq6lkhq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kCguMT24--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0hk4wopw6ibdrq6lkhq.PNG" alt="Swapping item 2 and item 3" width="637" height="135"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After swapping, the list is now like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5b7iLQ8Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yddvpbwcsxt8znrvxqco.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5b7iLQ8Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yddvpbwcsxt8znrvxqco.PNG" alt="New list swapping item 2 and item 3" width="640" height="105"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every item is in its right position. This marks the end of the process.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If the list was not yet sorted as expected, we could continue with the third, nth processes until we get a fully sorted list.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#bubble-sort-pseudocode"&gt;
  &lt;/a&gt;
  Bubble sort: Pseudocode
&lt;/h2&gt;

&lt;p&gt;It's always a good practice to use &lt;a href="https://www.abelmbula.com/blog/pseudocode/"&gt;pseudocode&lt;/a&gt; before actual implementation. This is one for the bubble sort.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function bubbleSort(arr)
Set isSwapped to true
WHILE isSwapped = true
    Reset isSwapped to false
    FOR each item in the arr
        IF current item &amp;gt; next item
            swap items
            Reset isSwapped to true
        ENDIF
    ENDFOR
ENDWHILE
RETURN arr
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bubble-sort-java-implementation"&gt;
  &lt;/a&gt;
  Bubble sort: Java implementation
&lt;/h2&gt;

&lt;p&gt;Now is the time to implement the algorithm. We are using Java here. If you want a JavaScript implementation, use this &lt;a href="https://www.educative.io/edpresso/how-to-implement-the-bubble-sort-algorithm-in-javascript"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We create two classes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;BubbleSort.java&lt;/code&gt; for the implementation of the logic&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Main.java&lt;/code&gt; to test the implementation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;BubbleSort.java&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's create a method called &lt;code&gt;sort()&lt;/code&gt; and implement the first iteration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BubbleSort&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// swap is true&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our method is not that complicated. We're going through the list of integers by comparing adjacent items to see if they need to be swapped. If so, we do swap them. Look how we've implemented our swapping system:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;first, we keep the left item in temporary variable, &lt;code&gt;temp&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;next, we assign the value of the right item to the left one&lt;/li&gt;
&lt;li&gt;last, the right item is assigned &lt;code&gt;temp&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make our code cleaner and more readable, let's move the swap logic into a method called &lt;code&gt;swap()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;private void swap(int[] list, int curr_index) {
  int temp = list[curr_index];
  list[curr_index] = list[curr_index + 1];
  list[curr_index + 1] = temp;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our is working pretty fine, but only for one iteration, which is not enough to sort the list as expected.&lt;/p&gt;

&lt;p&gt;Let's modify the code so that it can loop over and over until we get a fully sorted list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BubbleSort&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;isSwapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isSwapped&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;isSwapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;isSwapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;swap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;left_item&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;right_item&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left_item&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;left_item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;right_item&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;right_item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What did we do here? We've created a boolean variable, &lt;code&gt;isSwapped&lt;/code&gt; and initialized to &lt;code&gt;true&lt;/code&gt; so that we can use it in a &lt;code&gt;while&lt;/code&gt; loop. Inside the &lt;code&gt;while&lt;/code&gt; loop, we first assume that we want need swapping, so we set &lt;code&gt;isSwapped&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. If we end up swapping, we reset it back to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can now test our implementation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Main.java&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BubbleSort&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;isSwapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isSwapped&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;isSwapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;isSwapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;swap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;curr_index&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr_index&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
          &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr_index&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
          &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curr_index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations! You've been able to implement Bubble sort algorithm in Java. &lt;/p&gt;

&lt;p&gt;One more thing for your information: complexity of the algorithm&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complexity-analysis"&gt;
  &lt;/a&gt;
  Complexity analysis
&lt;/h2&gt;

&lt;p&gt;To end our journey, let me say just one word about the performance of this algorithm.&lt;/p&gt;

&lt;p&gt;Bubble sort is a very simple sorting algorithm and also the very slow one. For this reason, you'll almost never find or use it in the real world. In fact, it is mostly used for educational purposes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Worst Case Time Complexity, aka Big-O: $O(n^2)$&lt;/li&gt;
&lt;li&gt;Best Case Time Complexity, aka Big-omega: $O(n)$&lt;/li&gt;
&lt;li&gt;Average Time Complexity, aka Big-theta: $O(n^2)$&lt;/li&gt;
&lt;li&gt;Space Complexity: $O(1)$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>java</category>
      <category>beginners</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Set up a local Prisma instance</title>
      <author>Chris Bongers</author>
      <pubDate>Fri, 14 Jan 2022 06:28:48 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/set-up-a-local-prisma-instance-2anf</link>
      <guid>https://dev.to/dailydevtips1/set-up-a-local-prisma-instance-2anf</guid>
      <description>&lt;p&gt;In this article, I'll guide you through the process of setting up a local Prisma server.&lt;br&gt;
We will connect it with our &lt;a href="https://daily-dev-tips.com/posts/installing-postgresql-on-a-mac-with-homebrew/"&gt;local setup Postgres database&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Previously we already used &lt;a href="https://daily-dev-tips.com/posts/adding-prisma-to-a-nextjs-project/"&gt;Prisma in a Next.js application&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main goal here is to have a basic node application to manage our database.&lt;br&gt;
I mean, it can create the schema and even query it with manage.&lt;/p&gt;

&lt;p&gt;Let's set this up.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-the-basic-project"&gt;
  &lt;/a&gt;
  Creating the basic project
&lt;/h2&gt;

&lt;p&gt;Let's start by setting up a new folder to initialize a new node project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;prisma-local &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;prisma-local
npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can install all the dev dependencies we need.&lt;br&gt;
In our case, this is Typescript and Prisma.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;prisma typescript ts-node @types/node &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we also want to add the Prisma client to query the database. This is a regular dependency.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @prisma/client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Right, then let's also set up a &lt;code&gt;tsconfig.json&lt;/code&gt; file for our Typescript configuration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"sourceMap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"outDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dist"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"strict"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lib"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"esnext"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"esModuleInterop"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next thing we need to do is initialize Prisma. This will set up everything we need to use Prisma.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Prisma directory with the &lt;code&gt;schema.prisma&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;.env&lt;/code&gt; file to keep our database schema.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx prisma init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#connecting-to-our-database"&gt;
  &lt;/a&gt;
  Connecting to our database
&lt;/h2&gt;

&lt;p&gt;To connect to our database, we have to edit the &lt;code&gt;.env&lt;/code&gt; file and set the &lt;code&gt;DATABASE_URL&lt;/code&gt; value.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: You can also use a &lt;a href="https://daily-dev-tips.com/posts/setting-up-a-free-postgresql-database-on-heroku/"&gt;Heroku hosted Postgres database&lt;/a&gt; if you prefer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But we'll connect to our &lt;a href="https://daily-dev-tips.com/posts/installing-postgresql-on-a-mac-with-homebrew/"&gt;locally hosted Postgres database&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The schema for connecting to a PostgreSQL database looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=SCHEMA
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in our locally hosted one, we need the following information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;USER&lt;/code&gt;: The user we created if you followed along, I used &lt;code&gt;chris&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PASSWORD&lt;/code&gt;: The password we set, I've used &lt;code&gt;password&lt;/code&gt; in my example&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;HOST&lt;/code&gt;: Your host, in our case &lt;code&gt;localhost&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PORT&lt;/code&gt;: The default port usually is &lt;code&gt;5432&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DATABASE&lt;/code&gt;: The name of the database, in my case &lt;code&gt;postgres&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;SCHEMA&lt;/code&gt;: The schema name we use &lt;code&gt;public&lt;/code&gt; for this&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The full URL will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;postgresql://chris:password@localhost:5432/postgres?schema=public
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-and-migrating-our-first-schema"&gt;
  &lt;/a&gt;
  Creating and migrating our first schema
&lt;/h2&gt;

&lt;p&gt;Now that we are connected to our database, we want this new application to manage our database.&lt;/p&gt;

&lt;p&gt;In our case, we want to create tables automatically and have our code be the generated and maintainer of it.&lt;/p&gt;

&lt;p&gt;When we initialized Prisma, we got a &lt;code&gt;prisma/prisma.schema&lt;/code&gt; file. This file is used to maintain your database schemas.&lt;/p&gt;

&lt;p&gt;For now, this is empty, so let's create our very first models.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="nx"&gt;Hobby&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;      &lt;span class="nx"&gt;Int&lt;/span&gt;     &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;id&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;autoincrement&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="nx"&gt;title&lt;/span&gt;   &lt;span class="nb"&gt;String&lt;/span&gt;  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VarChar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;user&lt;/span&gt;    &lt;span class="nx"&gt;User&lt;/span&gt;    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;relation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;references&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="nx"&gt;userId&lt;/span&gt;  &lt;span class="nx"&gt;Int&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;      &lt;span class="nx"&gt;Int&lt;/span&gt;      &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;id&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;autoincrement&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;    &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
  &lt;span class="nx"&gt;hobbies&lt;/span&gt; &lt;span class="nx"&gt;Hobby&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should create a User table and a Hobby table.&lt;br&gt;
We want to be able to have a user, that can have multiple hobbies.&lt;/p&gt;

&lt;p&gt;We have to run the migrate command to create the migration and add these columns to our database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx prisma migrate dev &lt;span class="nt"&gt;--name&lt;/span&gt; init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can specify the name which will be the name for this migration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Br_Kv9Yd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641277044449/soqndmBbQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Br_Kv9Yd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641277044449/soqndmBbQ.png" alt="Migration run" width="866" height="343"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After you see the above output, the migration is done, and you should be able to see the columns in your database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sXI9zdZj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641277153344/RmKwpbIPo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sXI9zdZj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641277153344/RmKwpbIPo.png" alt="Prisma migrated database" width="880" height="376"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generating-and-querying-data"&gt;
  &lt;/a&gt;
  Generating and querying data
&lt;/h2&gt;

&lt;p&gt;So now we have a database but no data yet. You can create the entries manually in the database or use the Prisma client to add data.&lt;/p&gt;

&lt;p&gt;First, let's create an &lt;code&gt;index.ts&lt;/code&gt; file which will be our main file to work with the database.&lt;/p&gt;

&lt;p&gt;The template for this file will look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;PrismaClient&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@prisma/client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Todo the main function&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We load the Prisma client, then define a new main function that can run &lt;code&gt;async&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we execute this main function and throw an error if there is any. We disconnect the database on the final callback *(close, for instance).&lt;/p&gt;

&lt;p&gt;Let's fill this main function with some code to fill our database tables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Chris&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;hobbies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Writing code&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Going our for dinners&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Watching movies&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a new user called &lt;code&gt;Chris&lt;/code&gt; and add these three hobbies connected to this user.&lt;/p&gt;

&lt;p&gt;To execute this code, we can run the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx ts-node index.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if we go and look at our database, we should see the data populated.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z6-NY1FY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641278095671/HL5UIdI-4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z6-NY1FY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641278095671/HL5UIdI-4.png" alt="Data populated in Prisma client" width="880" height="376"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's remove that code and change it into code that will showcase what we have in our database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allUsersAndHobbies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;hobbies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allUsersAndHobbies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we rerun the code, we should get a nice output of all our data in the console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yE_PWllw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641278426964/o9pxEu9QA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yE_PWllw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641278426964/o9pxEu9QA.png" alt="Prisma data output to a console" width="604" height="256"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it for this article.&lt;/p&gt;

&lt;p&gt;What we learned in this article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Connecting Prisma to our local Postgres database&lt;/li&gt;
&lt;li&gt;Creating our very first Prisma migration&lt;/li&gt;
&lt;li&gt;Querying the database through the Prisma client&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to see the finished result, I've created &lt;a href="https://github.com/rebelchris/local-prisma/tree/part-1"&gt;this GitHub repo&lt;/a&gt; where you can check out the completed code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>database</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Kodular vs Thunkable | which is better? | All-time-dev</title>
      <author>coding-land</author>
      <pubDate>Fri, 14 Jan 2022 06:24:41 +0000</pubDate>
      <link>https://dev.to/codingland/kodular-vs-thunkable-which-is-better-all-time-dev-53gj</link>
      <guid>https://dev.to/codingland/kodular-vs-thunkable-which-is-better-all-time-dev-53gj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#kodular-vs-thunkable-which-is-better-alltimedev"&gt;
  &lt;/a&gt;
  Kodular vs Thunkable | which is better? | All-time-dev
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ee7oI4Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp83elavoqt9qk54thpm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ee7oI4Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lp83elavoqt9qk54thpm.jpg" alt="Image description" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post, we will compare Kodular with Thunkable in different aspects and we will also find out about both of them. So, if you are interested and like our post then share our post with your developer friends and you can also &lt;a href="https://all-time-devlopment.blogspot.com"&gt;visit&lt;/a&gt; all-time-dev for more posts like this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-kodular-its-features-and-its-history"&gt;
  &lt;/a&gt;
  What is Kodular, its features, and its history?
&lt;/h2&gt;

&lt;p&gt;Kodular is a freemium app builder which is partnered with ArubaClouds which provides servers to run the Kodular main infrastructure and it is owned by Junnovate, LLC. There are more than 850 active users from more than 200+ countries like the USA, Canada, India, Japan, etc, more than 2.3 million app projects are created using Kodular app builder, and more than 2 million daily users use apps created using Kodular. Pavitra G is the co-founder of Kodular and Diego Barreiro P√©rez is the CEO of Kodular. It was founded in 2017 and was made with MIT app inventor which is also a very popular app inventor. But Kodular makes app development easier than MIT and there are more features that Kodular provides its users than MIT app inventor like it supports Blockly. If you are wondering that what is Blockly? Then it describes how to do tasks. In simple words, all the components that we use in Kodular is designed using this. Some more features of Kodular are that it is very easy to use and learn, you don't have to learn a language for using Kodular you can create apps by just dragging and dropping and it is not necessary to pay for Kodular you can use almost every feature of Kodular for free only. They also have a very big community as I have mentioned before. So, if you face any problem then you can easily find its solution on Kodular Community and their support is also very good. Now let's also see some of its components that will help you create your app -&lt;br&gt;
Screen. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;User Interface. &lt;/li&gt;
&lt;li&gt;Layout. Media. &lt;/li&gt;
&lt;li&gt;Drawing and Animation.&lt;/li&gt;
&lt;li&gt;Maps.&lt;/li&gt;
&lt;li&gt;Sensors. &lt;/li&gt;
&lt;li&gt;Social.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;and more components of Kodular are there. In our next section, we will find out the pricing and pros and cons of Kodular.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pricing-of-kodular"&gt;
  &lt;/a&gt;
  Pricing of Kodular
&lt;/h2&gt;

&lt;p&gt;Kodular Creator is FREE. However, if you include ads in your apps to monetize them, they will take a little commission from your earnings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Free Forever (No ads in-app)&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
In this plan, you can use Kodular and create your app with Kodular but you cannot show ads in your app using Admob or any other Ad network you can create unlimited projects, using unlimited features means you can use everything to create your dream app. It is completely free until you want to monetize it and want to make a profit with it.&lt;/p&gt;

&lt;p&gt;‚Ç¨ %%% &lt;br&gt;
The next plan of their app builder is ‚Ç¨ %%%. Literally, their next plan's name is ‚Ç¨ %%%. If anyone from Kodular is viewing my post then I will say to change the name of this plan because it is really hard to pronounce it. In this plan, they will take a little commission from your app earnings. If you want to know how much money they will take from your earnings then they have a personal calculator to measure the commission they will take from your earning. So, if you want to measure it then you can visit their website. Here is the link&lt;/p&gt;

&lt;p&gt;Pros and Cons of Kodular&lt;br&gt;
Advantages -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open Source Framework. &lt;/li&gt;
&lt;li&gt;Amazing Widgets. &lt;/li&gt;
&lt;li&gt;Hot Reload. &lt;/li&gt;
&lt;li&gt;Simple and Easy Programming Language. &lt;/li&gt;
&lt;li&gt;Growing Community.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Disadvantages - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Hard to use APIs&lt;/li&gt;
&lt;li&gt;They charge commission for launching and monetizing your app&lt;/li&gt;
&lt;li&gt;Not good for creating unique apps &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-is-thunkable-its-features-and-its-history"&gt;
  &lt;/a&gt;
  What is Thunkable, its features, and its history?
&lt;/h2&gt;

&lt;p&gt;Thunkable is also a very popular freemium app builder like Kodular and millions of users are using and creating apps using this app builder. Ayush Saigal is the co-founder and CEO of Thunkable. Thunkable app builder was created in 2015 and it is owned by Thunkable, Inc. Thunkable is a San Francisco-based company. This popular app builder is made in MIT app inventor and as I have mentioned before MIT App Inventor is an app inventor/builder used to create an app for native apps. It is also better than MIT and provides you features than MIT app inventor and makes your development much easier. Thunkable helps create your favorite by simply dragging and dropping, by using their pre-built components like -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;User Interface.&lt;/li&gt;
&lt;li&gt;Layout.&lt;/li&gt;
&lt;li&gt;Image.&lt;/li&gt;
&lt;li&gt;Data.&lt;/li&gt;
&lt;li&gt;Location.&lt;/li&gt;
&lt;li&gt;Monetization.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, they provide less features than Kodular in terms of pricing. But it is easier to use APIs with Thunkable than Kodular which will help you create better apps but you can only create native apps using Thunkable like Kodular and MIT app inventor. They also have an app that you can use for testing your apps from mobile devices easily. However, Kodular also has an app that you can use for creating amazing apps from your mobile devices. They have a very big community means if you face any problems while creating your apps then you can find its solution easily on the Thunkable community or if you are facing any issue on their website or app or you want to ask them anything then their support is also very good.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pricing-of-thunkable"&gt;
  &lt;/a&gt;
  Pricing of Thunkable
&lt;/h2&gt;

&lt;p&gt;In Thunkable you can either pay monthly or annually. They have personal and business plan in both of them there are three categories which are -&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Free $0 monthly / yearly (Personal Plans)&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Get started building your native, no-code app today! &lt;/p&gt;

&lt;p&gt;To continue reading the post visit &lt;a href="https://all-time-devlopment.blogspot.com/2021/11/kodular-vs-thunkable-which-is-better.html"&gt;https://all-time-devlopment.blogspot.com/2021/11/kodular-vs-thunkable-which-is-better.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>beginners</category>
      <category>android</category>
      <category>discuss</category>
    </item>
  </channel>
</rss>
